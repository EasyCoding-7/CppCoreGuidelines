{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"C++ Core Guidelines \"C++ \uc548\uc5d0\ub294 \ubc16\uc73c\ub85c \ube60\uc838\ub098\uc624\ub824\uace0 \uc560\uc4f0\uace0 \uc788\ub294 \ub354 \uc791\uace0 \ub2e8\uc21c\ud558\uba70 \uc548\uc804\ud55c \uc5b8\uc5b4\uac00 \uc788\ub2e4.\" -- \ube44\uc57c\ub124 \uc2a4\ud2b8\ub86d\uc2a4\ud2b8\ub8f9 (Bjarne Stroustrup) ISO C++ \ucd5c\uc2e0\ubc84\uc804(\uc601\ubb38): https://github.com/isocpp/CppCoreGuidelines \ud55c\uae00: https://www.cppkorea.org/CppCoreGuidelines C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778 \ud55c\uae00\ud654 \ud504\ub85c\uc81d\ud2b8 \ubcf8 \ud504\ub85c\uc81d\ud2b8\ub294 C++ \ud45c\uc900 \uc704\uc6d0\ud68c\uc5d0\uc11c \uc81c\uc791\ud55c C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ud55c\uae00\ud654\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\uc785\ub2c8\ub2e4 \ubaa8\ub4e0 \ubb38\uc11c\ub294 Markdown \ud3ec\ub9f7\uc744 \uae30\ubcf8\uc73c\ub85c \ud569\ub2c8\ub2e4 \uc6d0\ubb38\uc758 \uc758\ub3c4\ub9cc \ubc14\ub00c\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc7ac\ubbf8\uc788\uac8c \uc758\uc5ed\ud574\ub3c4 \uc0c1\uad00\uc5c6\uc2b5\ub2c8\ub2e4 \uae30\uc5ec\ud574\uc8fc\uc2e0 \ubd84\ub4e4 \uc774\ub984\uc774 \ub204\ub77d\ub418\uc5c8\uc744 \uacbd\uc6b0 Issue\ub97c \uac1c\uc124\ud574\uc8fc\uc2ed\uc2dc\uc624 Chris Ohk ( utilForever ) Seokjoon Yun ( DevStarSJ ) Giyeon Bang ( GiyeonBang ) Byungwook Eric Ahn ( bwahn ) Eundoo Song ( sedman ) Jongdeok Kim ( jenix21 ) Jihoon Song ( jihoonsong ) Junsung Jang ( naxxster ) Jonghee Yun ( jongheeyun ) Changjun Lee (yiatom) Sangbae Kang ( typeon ) Minjang Kim ( minjang ) Yonghyun Kim ( drvoss ) Hyungtae Kim ( cavecafe ) Junho Kim ( h4wldev ) Incheol Kang ( kangic ) DongHa Park ( luncliff ) Muhun Kim (MuhunKim) Myungshin Kim ( options ) hyeonklab Wonho Ha( Las-Wonho ) DongHyun Kim( knight2995 ) leehongjoo88 niov64 Ji-hoon Lee ( nochoco-lee ) Honggyu Kim ( honggyukim ) Seungho Jeong ( snghojeong ) SeongYeon Won ( GameForPeople )","title":"C++ Core Guidelines"},{"location":"#c-core-guidelines","text":"\"C++ \uc548\uc5d0\ub294 \ubc16\uc73c\ub85c \ube60\uc838\ub098\uc624\ub824\uace0 \uc560\uc4f0\uace0 \uc788\ub294 \ub354 \uc791\uace0 \ub2e8\uc21c\ud558\uba70 \uc548\uc804\ud55c \uc5b8\uc5b4\uac00 \uc788\ub2e4.\" -- \ube44\uc57c\ub124 \uc2a4\ud2b8\ub86d\uc2a4\ud2b8\ub8f9 (Bjarne Stroustrup) ISO C++ \ucd5c\uc2e0\ubc84\uc804(\uc601\ubb38): https://github.com/isocpp/CppCoreGuidelines \ud55c\uae00: https://www.cppkorea.org/CppCoreGuidelines","title":"C++ Core Guidelines"},{"location":"#c","text":"\ubcf8 \ud504\ub85c\uc81d\ud2b8\ub294 C++ \ud45c\uc900 \uc704\uc6d0\ud68c\uc5d0\uc11c \uc81c\uc791\ud55c C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ud55c\uae00\ud654\ud558\ub294 \ud504\ub85c\uc81d\ud2b8\uc785\ub2c8\ub2e4 \ubaa8\ub4e0 \ubb38\uc11c\ub294 Markdown \ud3ec\ub9f7\uc744 \uae30\ubcf8\uc73c\ub85c \ud569\ub2c8\ub2e4 \uc6d0\ubb38\uc758 \uc758\ub3c4\ub9cc \ubc14\ub00c\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc7ac\ubbf8\uc788\uac8c \uc758\uc5ed\ud574\ub3c4 \uc0c1\uad00\uc5c6\uc2b5\ub2c8\ub2e4","title":"C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778 \ud55c\uae00\ud654 \ud504\ub85c\uc81d\ud2b8"},{"location":"#_1","text":"\uc774\ub984\uc774 \ub204\ub77d\ub418\uc5c8\uc744 \uacbd\uc6b0 Issue\ub97c \uac1c\uc124\ud574\uc8fc\uc2ed\uc2dc\uc624 Chris Ohk ( utilForever ) Seokjoon Yun ( DevStarSJ ) Giyeon Bang ( GiyeonBang ) Byungwook Eric Ahn ( bwahn ) Eundoo Song ( sedman ) Jongdeok Kim ( jenix21 ) Jihoon Song ( jihoonsong ) Junsung Jang ( naxxster ) Jonghee Yun ( jongheeyun ) Changjun Lee (yiatom) Sangbae Kang ( typeon ) Minjang Kim ( minjang ) Yonghyun Kim ( drvoss ) Hyungtae Kim ( cavecafe ) Junho Kim ( h4wldev ) Incheol Kang ( kangic ) DongHa Park ( luncliff ) Muhun Kim (MuhunKim) Myungshin Kim ( options ) hyeonklab Wonho Ha( Las-Wonho ) DongHyun Kim( knight2995 ) leehongjoo88 niov64 Ji-hoon Lee ( nochoco-lee ) Honggyu Kim ( honggyukim ) Seungho Jeong ( snghojeong ) SeongYeon Won ( GameForPeople )","title":"\uae30\uc5ec\ud574\uc8fc\uc2e0 \ubd84\ub4e4"},{"location":"Architecture/","text":"A: \uc124\uacc4(Architectural) \uc544\uc774\ub514\uc5b4 \uc774 \uc808\uc740 \ubcf4\ub2e4 \uace0\uc218\uc900\uc758 \uad6c\uc870\uc640 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud55c \uc544\uc774\ub514\uc5b4\ub97c \ud3ec\ud568\ud55c\ub2e4. \uad6c\uc870\uc801 \uc544\uc774\ub514\uc5b4 \uaddc\uce59 \uc694\uc57d: A.1: \ucf54\ub4dc\uc758 \ub35c \uc548\uc815\uc801\uc778 \ubd80\ubd84\uc5d0\uc11c \uc548\uc815\uc801\uc778 \ubd80\ubd84\uc744 \ubd84\ub9ac\ud558\ub77c A.2: \uc7a0\uc7ac\uc801\uc73c\ub85c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ubd80\ubd84\uc744 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ud45c\ud604\ud558\ub77c A.4: \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc774\uc758 \uc21c\ud658 \ucc38\uc870\uac00 \uc5c6\ub3c4\ub85d \ud558\ub77c ??? ??? ??? ??? ??? ??? A.1: \ucf54\ub4dc\uc758 \ub35c \uc548\uc815\uc801\uc778 \ubd80\ubd84\uc5d0\uc11c \uc548\uc815\uc801\uc778 \ubd80\ubd84\uc744 \ubd84\ub9ac\ud558\ub77c \ubd88\uc548\uc804\ud55c \ucf54\ub4dc\ub97c \ubd84\ub9ac\ud558\ub294 \uac83\uc740, \ucf54\ub4dc\uc758 \uc720\ub2db \ud14c\uc2a4\ud2b8, \uc778\ud130\ud398\uc774\uc2a4 \uac1c\uc120, \ub9ac\ud329\ud1a0\ub9c1, \uc7a0\uc7ac\uc801\uc778 \uc9c0\uc6d0 \uc911\ub2e8\uc5d0 \uc6a9\uc774\ud558\ub2e4. A.2: \uc7a0\uc7ac\uc801\uc73c\ub85c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ubd80\ubd84\uc744 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ud45c\ud604\ud558\ub77c Reason Note \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc720\uc9c0\ub418\uace0, \ubb38\uc11c\ud654\ub418\uba70, \ud568\uaed8 \uc81c\uacf5\ub418\ub294 \uc120\uc5b8\uacfc \uc815\uc758\uc758 \uc9d1\ud569\uc774\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ud5e4\ub354\ub4e4\uc758 \uc9d1\ud569(\"\ud5e4\ub354 \uc804\uc6a9 \ub77c\uc774\ube0c\ub7ec\ub9ac\") \ub610\ub294 \ud5e4\ub354 \uc9d1\ud569\uacfc \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c \uc9d1\ud569\uc774 \ub420 \uc218 \uc788\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc815\uc801 \ub610\ub294 \ub3d9\uc801\uc73c\ub85c \ud504\ub85c\uc81d\ud2b8\uc5d0 \ub9c1\ud06c\ub420 \uc218 \uc788\uc73c\uba70, '#include' \ub420 \uc218 \uc788\ub2e4. A.4: \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc774\uc758 \uc21c\ud658 \ucc38\uc870\uac00 \uc5c6\ub3c4\ub85d \ud558\ub77c Reason \uc21c\ud658 \ucc38\uc870\ub294 \ube4c\ub4dc \uacfc\uc815\uc758 \ubcf5\uc7a1\uc131\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc21c\ud658 \ucc38\uc870\ub294 \uc774\ud574\ud558\uae30 \uc5b4\ub835\uace0, \ubbf8\uc815\uc758 \ub3d9\uc791\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Note \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ud574\ub2f9 \uad6c\uc131\uc694\uc18c\uc758 \uc815\uc758\uc5d0\uc11c \uc21c\ud658 \ucc38\uc870\ub97c \ud3ec\ud568\ud560 \uc218 \uc788\ub2e4. For example: ??? \ud558\uc9c0\ub9cc \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc758\uc874\uc131\uc744 \uac00\uc9c0\uba74 \uc548\ub41c\ub2e4.","title":"Architecture"},{"location":"Architecture/#a-architectural","text":"\uc774 \uc808\uc740 \ubcf4\ub2e4 \uace0\uc218\uc900\uc758 \uad6c\uc870\uc640 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud55c \uc544\uc774\ub514\uc5b4\ub97c \ud3ec\ud568\ud55c\ub2e4. \uad6c\uc870\uc801 \uc544\uc774\ub514\uc5b4 \uaddc\uce59 \uc694\uc57d: A.1: \ucf54\ub4dc\uc758 \ub35c \uc548\uc815\uc801\uc778 \ubd80\ubd84\uc5d0\uc11c \uc548\uc815\uc801\uc778 \ubd80\ubd84\uc744 \ubd84\ub9ac\ud558\ub77c A.2: \uc7a0\uc7ac\uc801\uc73c\ub85c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ubd80\ubd84\uc744 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ud45c\ud604\ud558\ub77c A.4: \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc774\uc758 \uc21c\ud658 \ucc38\uc870\uac00 \uc5c6\ub3c4\ub85d \ud558\ub77c ??? ??? ??? ??? ??? ???","title":"A: \uc124\uacc4(Architectural) \uc544\uc774\ub514\uc5b4"},{"location":"Architecture/#a1","text":"\ubd88\uc548\uc804\ud55c \ucf54\ub4dc\ub97c \ubd84\ub9ac\ud558\ub294 \uac83\uc740, \ucf54\ub4dc\uc758 \uc720\ub2db \ud14c\uc2a4\ud2b8, \uc778\ud130\ud398\uc774\uc2a4 \uac1c\uc120, \ub9ac\ud329\ud1a0\ub9c1, \uc7a0\uc7ac\uc801\uc778 \uc9c0\uc6d0 \uc911\ub2e8\uc5d0 \uc6a9\uc774\ud558\ub2e4.","title":"A.1: \ucf54\ub4dc\uc758 \ub35c \uc548\uc815\uc801\uc778 \ubd80\ubd84\uc5d0\uc11c \uc548\uc815\uc801\uc778 \ubd80\ubd84\uc744 \ubd84\ub9ac\ud558\ub77c"},{"location":"Architecture/#a2","text":"","title":"A.2: \uc7a0\uc7ac\uc801\uc73c\ub85c \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ubd80\ubd84\uc744 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ud45c\ud604\ud558\ub77c"},{"location":"Architecture/#reason","text":"","title":"Reason"},{"location":"Architecture/#note","text":"\ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc720\uc9c0\ub418\uace0, \ubb38\uc11c\ud654\ub418\uba70, \ud568\uaed8 \uc81c\uacf5\ub418\ub294 \uc120\uc5b8\uacfc \uc815\uc758\uc758 \uc9d1\ud569\uc774\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ud5e4\ub354\ub4e4\uc758 \uc9d1\ud569(\"\ud5e4\ub354 \uc804\uc6a9 \ub77c\uc774\ube0c\ub7ec\ub9ac\") \ub610\ub294 \ud5e4\ub354 \uc9d1\ud569\uacfc \uc624\ube0c\uc81d\ud2b8 \ud30c\uc77c \uc9d1\ud569\uc774 \ub420 \uc218 \uc788\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc815\uc801 \ub610\ub294 \ub3d9\uc801\uc73c\ub85c \ud504\ub85c\uc81d\ud2b8\uc5d0 \ub9c1\ud06c\ub420 \uc218 \uc788\uc73c\uba70, '#include' \ub420 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Architecture/#a4","text":"","title":"A.4: \ub77c\uc774\ube0c\ub7ec\ub9ac \uc0ac\uc774\uc758 \uc21c\ud658 \ucc38\uc870\uac00 \uc5c6\ub3c4\ub85d \ud558\ub77c"},{"location":"Architecture/#reason_1","text":"\uc21c\ud658 \ucc38\uc870\ub294 \ube4c\ub4dc \uacfc\uc815\uc758 \ubcf5\uc7a1\uc131\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc21c\ud658 \ucc38\uc870\ub294 \uc774\ud574\ud558\uae30 \uc5b4\ub835\uace0, \ubbf8\uc815\uc758 \ub3d9\uc791\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Architecture/#note_1","text":"\ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ud574\ub2f9 \uad6c\uc131\uc694\uc18c\uc758 \uc815\uc758\uc5d0\uc11c \uc21c\ud658 \ucc38\uc870\ub97c \ud3ec\ud568\ud560 \uc218 \uc788\ub2e4. For example: ??? \ud558\uc9c0\ub9cc \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc758\uc874\uc131\uc744 \uac00\uc9c0\uba74 \uc548\ub41c\ub2e4.","title":"Note"},{"location":"Bibliography/","text":"Bibliography [Abrahams01]: D. Abrahams. Exception-Safety in Generic Components . [Alexandrescu01]: A. Alexandrescu. Modern C++ Design (Addison-Wesley, 2001). [C++03]: ISO/IEC 14882:2003(E), Programming Languages \u2014 C++ (updated ISO and ANSI C++ Standard including the contents of (C++98) plus errata corrections). [C++CS]: ??? [Cargill92]: T. Cargill. C++ Programming Style (Addison-Wesley, 1992). [Cline99]: M. Cline, G. Lomow, and M. Girou. C++ FAQs (2ndEdition) (Addison-Wesley, 1999). [Dewhurst03]: S. Dewhurst. C++ Gotchas (Addison-Wesley, 2003). [Henricson97]: M. Henricson and E. Nyquist. Industrial Strength C++ (Prentice Hall, 1997). [Koenig97]: A. Koenig and B. Moo. Ruminations on C++ (Addison-Wesley, 1997). [Lakos96]: J. Lakos. Large-Scale C++ Software Design (Addison-Wesley, 1996). [Meyers96]: S. Meyers. More Effective C++ (Addison-Wesley, 1996). [Meyers97]: S. Meyers. Effective C++ (2nd Edition) (Addison-Wesley, 1997). [Meyers15]: S. Meyers. Effective Modern C++ (O'Reilly, 2015). [Murray93]: R. Murray. C++ Strategies and Tactics (Addison-Wesley, 1993). [Stroustrup94]: B. Stroustrup. The Design and Evolution of C++ (Addison-Wesley, 1994). [Stroustrup00]: B. Stroustrup. The C++ Programming Language (Special 3rdEdition) (Addison-Wesley, 2000). [Stroustrup05]: B. Stroustrup. A rationale for semantically enhanced library languages . [Stroustrup13]: B. Stroustrup. The C++ Programming Language (4th Edition) . Addison Wesley 2013. [Stroustrup14]: B. Stroustrup. A Tour of C++ . Addison Wesley 2014. [Stroustrup15]: B. Stroustrup, Herb Sutter, and G. Dos Reis: A brief introduction to C++'s model for type- and resource-safety . [SuttHysl04b]: H. Sutter and J. Hyslop. \"Collecting Shared Objects\" (C/C++ Users Journal, 22(8), August 2004). [SuttAlex05]: H. Sutter and A. Alexandrescu. C++ Coding Standards. Addison-Wesley 2005. [Sutter00]: H. Sutter. Exceptional C++ (Addison-Wesley, 2000). [Sutter02]: H. Sutter. More Exceptional C++ (Addison-Wesley, 2002). [Sutter04]: H. Sutter. Exceptional C++ Style (Addison-Wesley, 2004). [Taligent94]: Taligent's Guide to Designing Programs (Addison-Wesley, 1994).","title":"Bibliography"},{"location":"Bibliography/#bibliography","text":"[Abrahams01]: D. Abrahams. Exception-Safety in Generic Components . [Alexandrescu01]: A. Alexandrescu. Modern C++ Design (Addison-Wesley, 2001). [C++03]: ISO/IEC 14882:2003(E), Programming Languages \u2014 C++ (updated ISO and ANSI C++ Standard including the contents of (C++98) plus errata corrections). [C++CS]: ??? [Cargill92]: T. Cargill. C++ Programming Style (Addison-Wesley, 1992). [Cline99]: M. Cline, G. Lomow, and M. Girou. C++ FAQs (2ndEdition) (Addison-Wesley, 1999). [Dewhurst03]: S. Dewhurst. C++ Gotchas (Addison-Wesley, 2003). [Henricson97]: M. Henricson and E. Nyquist. Industrial Strength C++ (Prentice Hall, 1997). [Koenig97]: A. Koenig and B. Moo. Ruminations on C++ (Addison-Wesley, 1997). [Lakos96]: J. Lakos. Large-Scale C++ Software Design (Addison-Wesley, 1996). [Meyers96]: S. Meyers. More Effective C++ (Addison-Wesley, 1996). [Meyers97]: S. Meyers. Effective C++ (2nd Edition) (Addison-Wesley, 1997). [Meyers15]: S. Meyers. Effective Modern C++ (O'Reilly, 2015). [Murray93]: R. Murray. C++ Strategies and Tactics (Addison-Wesley, 1993). [Stroustrup94]: B. Stroustrup. The Design and Evolution of C++ (Addison-Wesley, 1994). [Stroustrup00]: B. Stroustrup. The C++ Programming Language (Special 3rdEdition) (Addison-Wesley, 2000). [Stroustrup05]: B. Stroustrup. A rationale for semantically enhanced library languages . [Stroustrup13]: B. Stroustrup. The C++ Programming Language (4th Edition) . Addison Wesley 2013. [Stroustrup14]: B. Stroustrup. A Tour of C++ . Addison Wesley 2014. [Stroustrup15]: B. Stroustrup, Herb Sutter, and G. Dos Reis: A brief introduction to C++'s model for type- and resource-safety . [SuttHysl04b]: H. Sutter and J. Hyslop. \"Collecting Shared Objects\" (C/C++ Users Journal, 22(8), August 2004). [SuttAlex05]: H. Sutter and A. Alexandrescu. C++ Coding Standards. Addison-Wesley 2005. [Sutter00]: H. Sutter. Exceptional C++ (Addison-Wesley, 2000). [Sutter02]: H. Sutter. More Exceptional C++ (Addison-Wesley, 2002). [Sutter04]: H. Sutter. Exceptional C++ Style (Addison-Wesley, 2004). [Taligent94]: Taligent's Guide to Designing Programs (Addison-Wesley, 1994).","title":"Bibliography"},{"location":"CPL/","text":"CPL: C \uc2a4\ud0c0\uc77c \ud504\ub85c\uadf8\ub798\ubc0d C\uc640 C++\ub294 \ubc00\uc811\ud558\uac8c \uad00\ub828\ub41c \uc5b8\uc5b4\ub2e4. \ub450 \uc5b8\uc5b4 \ubaa8\ub450 1978\ub144 \"Classic C\"\uc5d0\uc11c \uc720\ub798\ub418\uc5b4 \uc774\ud6c4 ISO \uc704\uc6d0\ud68c\uc5d0\uc11c \ubc1c\uc804\ud574 \uc654\ub2e4. \ub450 \uc5b8\uc5b4\uac04\uc758 \ud638\ud658\uc131\uc744 \uc704\ud574 \ub9ce\uc740 \uc2dc\ub3c4\ub4e4\uc774 \uc788\uc5c8\uc73c\ub098, \uc5b4\ub290 \ucabd\ub3c4 \ub2e4\ub978 \uac83\uc758 \ubd80\ubd84\uc9d1\ud569\uc774 \uc544\ub2c8\ub2e4. C \uaddc\uce59 \uc694\uc57d: CPL.1: C\ubcf4\ub2e4 C++\ub97c \uc0ac\uc6a9\ud558\ub77c CPL.2: \ubc18\ub4dc\uc2dc C\ub97c \uc368\uc57c\ud55c\ub2e4\uba74, C\uc640 C++\uc758 \uacf5\ud1b5\uc9d1\ud569\uc744 \uc4f0\uace0, C++\ub85c \ucf54\ub4dc\ub97c \ucef4\ud30c\uc77c\ud558\ub77c CPL.3: C \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc368\uc57c\ud55c\ub2e4\uba74, \ud638\ucd9c\ub418\ub294 \ucf54\ub4dc \uc548\uc5d0\uc11c\ub294 C++\ub97c \uc0ac\uc6a9\ud558\ub77c CPL.1: C\ubcf4\ub2e4 C++\ub97c \uc0ac\uc6a9\ud558\ub77c Reason C++\ub294 \ub354 \ub098\uc740 \ud615 \uac80\uc0ac(type checking)\uc640 \ub354 \ub9ce\uc740 \ud45c\uae30\ubc95\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\uac83\uc740 \uace0\uc218\uc900\uc758 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud574 \ub354 \ub098\uc740 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud558\uace0 \ub300\uac8c \ub354 \ube60\ub978 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud55c\ub2e4. Example char ch = 7 ; void * pv = & ch ; int * pi = pv ; // C++ (style)\uc774 \uc544\ub2d8 * pi = 999 ; // &ch \uadfc\ucc98\uc758 sizeof(int) \ubc14\uc774\ud2b8\ub97c \ub36e\uc5b4\uc4f4\ub2e4 The rules for implicit casting to and from void* in C are subtle and unenforced. In particular, this example violates a rule against converting to a type with stricter alignment. Enforcement C++ \ucef4\ud30c\uc77c\ub7ec\ub97c \uc0ac\uc6a9\ud558\ub77c. CPL.2:\ubc18\ub4dc\uc2dc C\ub97c \uc368\uc57c\ud55c\ub2e4\uba74, C\uc640 C++\uc758 \uacf5\ud1b5\uc9d1\ud569\uc744 \uc4f0\uace0, C++\ub85c \ucf54\ub4dc\ub97c \ucef4\ud30c\uc77c\ud558\ub77c Reason C\uc640 C++ \ucef4\ud30c\uc77c\ub7ec \ubaa8\ub450 \uadf8 \ucf54\ub4dc\ub97c \ucef4\ud30c\uc77c \ud560 \uc218 \uc788\uc73c\uba70, C++\ub85c \ucef4\ud30c\uc77c \ud560 \uacbd\uc6b0 \"\uc21c\uc218\ud55c C\"\ubcf4\ub2e4 \ud0c0\uc785 \uac80\uc0ac\uac00 \ub354 \uc798 \uc218\ud589\ub41c\ub2e4. Example int * p1 = malloc ( 10 * sizeof ( int )); // not C++ int * p2 = static_cast < int *> ( malloc ( 10 * sizeof ( int ))); // not C, C-style C++ int * p3 = new int [ 10 ]; // not C int * p4 = ( int * ) malloc ( 10 * sizeof ( int )); // both C and C++ Enforcement \ube4c\ub4dc \uc2dc\uc5d0 C \uc5b8\uc5b4\ub85c \ucef4\ud30c\uc77c\ud558\uace0 \uc788\ub2e4\uba74 \ud45c\uc2dc\ub97c \ub0a8\uaca8\ub77c C++ \ucef4\ud30c\uc77c\ub7ec\ub294 C \ud655\uc7a5(extension) \uc635\uc158\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc720\ud6a8\ud55c C++\ucf54\ub4dc\ub85c (\uac00\uc815\ud558\uace0) \ucc98\ub9ac\ud560 \uac83\uc774\ub2e4 CPL.3: C \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc368\uc57c\ud55c\ub2e4\uba74, \ud638\ucd9c\ub418\ub294 \ucf54\ub4dc \uc548\uc5d0\uc11c\ub294 C++\ub97c \uc0ac\uc6a9\ud558\ub77c Reason C++\ub294 C\ubcf4\ub2e4 \ud45c\ud604\ub825\uc774 \ud48d\ubd80\ud558\uba70 \ub9ce\uc740 \uc885\ub958\uc758 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud574 \ub354 \ub098\uc740 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud55c\ub2e4. Example \uc608\ub97c \ub4e4\uc5b4, \uc678\ubd80(3rd party) C \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 C \uc2dc\uc2a4\ud15c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud560 \ub54c, \ub354 \uc815\ud655\ud55c \ud0c0\uc785 \uac80\uc0ac\ub97c \uc704\ud574 \uc800\uc218\uc900\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub294 C\uc640 C++\uc758 \ubd80\ubd84\uc9d1\ud569\ub9cc\uc73c\ub85c \uc815\uc758\ud558\uc790. \uac00\ub2a5\ud558\uba74 C++ \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc744 \ub530\ub974\ub294 \uc778\ud130\ud398\uc774\uc2a4(\ub354 \ub098\uc740 \ucd94\uc0c1\ud654(abstraction), \uba54\ubaa8\ub9ac(memory) \uc548\uc815\uc131, \uc790\uc6d0(resource)\uc744 \uc704\ud574) \uc548\uc758 \uc800\uc218\uc900 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ucea1\uc290\ud654\ud558\uba70 C++ \ucf54\ub4dc \uc548\uc758 C++ \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4. Example You can call C from C++: // in C: double sqrt ( double ); // in C++: extern \"C\" double sqrt ( double ); sqrt ( 2 ); Example C++\uc5d0\uc11c C\ub97c \ud638\ucd9c\ud560 \uc218 \uc788\ub2e4: // in C: X call_f ( struct Y * , int ); // in C++: extern \"C\" X call_f ( Y * p , int i ) { return p -> f ( i ); // \uc544\ub9c8\ub3c4 \uac00\uc0c1\ud568\uc218 \ud638\ucd9c\uc77c \uac83\uc774\ub2e4 } Enforcement \ud2b9\ubcc4\ud788 \uc5c6\uc74c","title":"C-Style"},{"location":"CPL/#cpl-c","text":"C\uc640 C++\ub294 \ubc00\uc811\ud558\uac8c \uad00\ub828\ub41c \uc5b8\uc5b4\ub2e4. \ub450 \uc5b8\uc5b4 \ubaa8\ub450 1978\ub144 \"Classic C\"\uc5d0\uc11c \uc720\ub798\ub418\uc5b4 \uc774\ud6c4 ISO \uc704\uc6d0\ud68c\uc5d0\uc11c \ubc1c\uc804\ud574 \uc654\ub2e4. \ub450 \uc5b8\uc5b4\uac04\uc758 \ud638\ud658\uc131\uc744 \uc704\ud574 \ub9ce\uc740 \uc2dc\ub3c4\ub4e4\uc774 \uc788\uc5c8\uc73c\ub098, \uc5b4\ub290 \ucabd\ub3c4 \ub2e4\ub978 \uac83\uc758 \ubd80\ubd84\uc9d1\ud569\uc774 \uc544\ub2c8\ub2e4. C \uaddc\uce59 \uc694\uc57d: CPL.1: C\ubcf4\ub2e4 C++\ub97c \uc0ac\uc6a9\ud558\ub77c CPL.2: \ubc18\ub4dc\uc2dc C\ub97c \uc368\uc57c\ud55c\ub2e4\uba74, C\uc640 C++\uc758 \uacf5\ud1b5\uc9d1\ud569\uc744 \uc4f0\uace0, C++\ub85c \ucf54\ub4dc\ub97c \ucef4\ud30c\uc77c\ud558\ub77c CPL.3: C \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc368\uc57c\ud55c\ub2e4\uba74, \ud638\ucd9c\ub418\ub294 \ucf54\ub4dc \uc548\uc5d0\uc11c\ub294 C++\ub97c \uc0ac\uc6a9\ud558\ub77c","title":"CPL: C \uc2a4\ud0c0\uc77c \ud504\ub85c\uadf8\ub798\ubc0d"},{"location":"CPL/#cpl1-c-c","text":"","title":"CPL.1: C\ubcf4\ub2e4 C++\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"CPL/#reason","text":"C++\ub294 \ub354 \ub098\uc740 \ud615 \uac80\uc0ac(type checking)\uc640 \ub354 \ub9ce\uc740 \ud45c\uae30\ubc95\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\uac83\uc740 \uace0\uc218\uc900\uc758 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud574 \ub354 \ub098\uc740 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud558\uace0 \ub300\uac8c \ub354 \ube60\ub978 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud55c\ub2e4.","title":"Reason"},{"location":"CPL/#example","text":"char ch = 7 ; void * pv = & ch ; int * pi = pv ; // C++ (style)\uc774 \uc544\ub2d8 * pi = 999 ; // &ch \uadfc\ucc98\uc758 sizeof(int) \ubc14\uc774\ud2b8\ub97c \ub36e\uc5b4\uc4f4\ub2e4 The rules for implicit casting to and from void* in C are subtle and unenforced. In particular, this example violates a rule against converting to a type with stricter alignment.","title":"Example"},{"location":"CPL/#enforcement","text":"C++ \ucef4\ud30c\uc77c\ub7ec\ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Enforcement"},{"location":"CPL/#cpl2-c-c-c-c","text":"","title":"CPL.2:\ubc18\ub4dc\uc2dc C\ub97c \uc368\uc57c\ud55c\ub2e4\uba74, C\uc640 C++\uc758 \uacf5\ud1b5\uc9d1\ud569\uc744 \uc4f0\uace0, C++\ub85c \ucf54\ub4dc\ub97c \ucef4\ud30c\uc77c\ud558\ub77c"},{"location":"CPL/#reason_1","text":"C\uc640 C++ \ucef4\ud30c\uc77c\ub7ec \ubaa8\ub450 \uadf8 \ucf54\ub4dc\ub97c \ucef4\ud30c\uc77c \ud560 \uc218 \uc788\uc73c\uba70, C++\ub85c \ucef4\ud30c\uc77c \ud560 \uacbd\uc6b0 \"\uc21c\uc218\ud55c C\"\ubcf4\ub2e4 \ud0c0\uc785 \uac80\uc0ac\uac00 \ub354 \uc798 \uc218\ud589\ub41c\ub2e4.","title":"Reason"},{"location":"CPL/#example_1","text":"int * p1 = malloc ( 10 * sizeof ( int )); // not C++ int * p2 = static_cast < int *> ( malloc ( 10 * sizeof ( int ))); // not C, C-style C++ int * p3 = new int [ 10 ]; // not C int * p4 = ( int * ) malloc ( 10 * sizeof ( int )); // both C and C++","title":"Example"},{"location":"CPL/#enforcement_1","text":"\ube4c\ub4dc \uc2dc\uc5d0 C \uc5b8\uc5b4\ub85c \ucef4\ud30c\uc77c\ud558\uace0 \uc788\ub2e4\uba74 \ud45c\uc2dc\ub97c \ub0a8\uaca8\ub77c C++ \ucef4\ud30c\uc77c\ub7ec\ub294 C \ud655\uc7a5(extension) \uc635\uc158\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc720\ud6a8\ud55c C++\ucf54\ub4dc\ub85c (\uac00\uc815\ud558\uace0) \ucc98\ub9ac\ud560 \uac83\uc774\ub2e4","title":"Enforcement"},{"location":"CPL/#cpl3-c-c","text":"","title":"CPL.3: C \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc368\uc57c\ud55c\ub2e4\uba74, \ud638\ucd9c\ub418\ub294 \ucf54\ub4dc \uc548\uc5d0\uc11c\ub294 C++\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"CPL/#reason_2","text":"C++\ub294 C\ubcf4\ub2e4 \ud45c\ud604\ub825\uc774 \ud48d\ubd80\ud558\uba70 \ub9ce\uc740 \uc885\ub958\uc758 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud574 \ub354 \ub098\uc740 \uc9c0\uc6d0\uc744 \uc81c\uacf5\ud55c\ub2e4.","title":"Reason"},{"location":"CPL/#example_2","text":"\uc608\ub97c \ub4e4\uc5b4, \uc678\ubd80(3rd party) C \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 C \uc2dc\uc2a4\ud15c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud560 \ub54c, \ub354 \uc815\ud655\ud55c \ud0c0\uc785 \uac80\uc0ac\ub97c \uc704\ud574 \uc800\uc218\uc900\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub294 C\uc640 C++\uc758 \ubd80\ubd84\uc9d1\ud569\ub9cc\uc73c\ub85c \uc815\uc758\ud558\uc790. \uac00\ub2a5\ud558\uba74 C++ \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc744 \ub530\ub974\ub294 \uc778\ud130\ud398\uc774\uc2a4(\ub354 \ub098\uc740 \ucd94\uc0c1\ud654(abstraction), \uba54\ubaa8\ub9ac(memory) \uc548\uc815\uc131, \uc790\uc6d0(resource)\uc744 \uc704\ud574) \uc548\uc758 \uc800\uc218\uc900 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ucea1\uc290\ud654\ud558\uba70 C++ \ucf54\ub4dc \uc548\uc758 C++ \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4.","title":"Example"},{"location":"CPL/#example_3","text":"You can call C from C++: // in C: double sqrt ( double ); // in C++: extern \"C\" double sqrt ( double ); sqrt ( 2 );","title":"Example"},{"location":"CPL/#example_4","text":"C++\uc5d0\uc11c C\ub97c \ud638\ucd9c\ud560 \uc218 \uc788\ub2e4: // in C: X call_f ( struct Y * , int ); // in C++: extern \"C\" X call_f ( Y * p , int i ) { return p -> f ( i ); // \uc544\ub9c8\ub3c4 \uac00\uc0c1\ud568\uc218 \ud638\ucd9c\uc77c \uac83\uc774\ub2e4 }","title":"Example"},{"location":"CPL/#enforcement_2","text":"\ud2b9\ubcc4\ud788 \uc5c6\uc74c","title":"Enforcement"},{"location":"Class/","text":"C: \ud074\ub798\uc2a4\uc640 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 \ud074\ub798\uc2a4\ub294 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc73c\ub85c\uc368, \ud0c0\uc785\uc758 \ud45c\ud604\uacfc \uc5f0\uc0b0, \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc815\uc758\ud560 \uc218 \uc788\ub2e4. \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870\ub294 \uad00\ub828\ub41c \ud074\ub798\uc2a4\ub4e4\uc744 \uacc4\uce35\uc801\uc73c\ub85c \uad6c\uc870\ud654 \ud560 \ub54c \uc0ac\uc6a9\ub41c\ub2e4. \ud074\ub798\uc2a4 \uaddc\uce59 \uc694\uc57d: C.1: \uad00\ub828\ub41c \ub370\uc774\ud130\ub97c \uc870\uc9c1\ud654 \ud558\ub77c ( struct \uc640 class ) C.2: \ud0c0\uc785\uc774 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\uba74, class \ub97c \uc0ac\uc6a9\ud558\ub77c; \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc5d0 \ub300\ud55c \uc81c\uc57d\uc774 \uc790\uc720\ub86d\ub2e4\uba74 struct \ub97c \uc0ac\uc6a9\ud558\ub77c C.3: \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud574 \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc744 \ubd84\ub9ac\ud558\ub77c C.4: \ud074\ub798\uc2a4\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc \ud568\uc218\ub97c \uba64\ubc84\ud568\uc218\ub85c \uc791\uc131\ud558\ub77c C.5: \ubcf4\uc870 \ud568\uc218\ub4e4\uc740 \uad00\ub828 \ud074\ub798\uc2a4\uc640 \uac19\uc740 namespace\uc5d0 \ubc30\uce58\ud558\ub77c C.7: \ud074\ub798\uc2a4 \ub610\ub294 \uc5f4\uac70\ud615\uc5d0 \ub300\ud55c \uc815\uc758\uc640 \ubcc0\uc218 \uc120\uc5b8\uc744 \uac19\uc740 \uad6c\ubb38\uc5d0 \ub123\uc9c0 \ub9d0\uc544\ub77c C.8: non-public \uba64\ubc84\uac00 \uc788\ub2e4\uba74 struct \ubcf4\ub2e8 class \ub97c \uc0ac\uc6a9\ud558\ub77c C.9: \uba64\ubc84\ub4e4\uc758 \ub178\ucd9c\uc744 \ucd5c\uc18c\ud654\ud558\ub77c \ud558\uc704 \uc601\uc5ed: C.concrete: \uc2e4\uc81c \ud0c0\uc785(Concrete types) C.ctor: \uc0dd\uc131\uc790, \ub300\uc785 \uc5f0\uc0b0\uc790, \uc18c\uba78\uc790 C.con: \ucee8\ud14c\uc774\ub108\uc640 \ub9ac\uc18c\uc2a4 \ud578\ub4e4 C.lambdas: \ud568\uc218 \uac1c\uccb4\uc640 \ub78c\ub2e4 \ud45c\ud604\uc2dd C.hier: \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 (OOP) C.over: \uc624\ubc84\ub85c\ub529 C.union: \uacf5\uc6a9\uccb4 C.1: \uad00\ub828\ub41c \ub370\uc774\ud130\ub97c \uc870\uc9c1\ud654 \ud558\ub77c ( struct \uc640 class ) Reason \uc774\ud574\ud558\uae30 \uc27d\ub2e4. \uadfc\ubcf8\uc801\uc778 \uc774\uc720\ub85c \ub370\uc774\ud130\uac00 \uad00\ub828\uc774 \uc788\ub2e4\uba74, \uadf8 \uc0ac\uc2e4\uc740 \ucf54\ub4dc\uc5d0 \ubc18\uc601\ub418\uc5b4\uc57c \ud55c\ub2e4. Example void draw ( int x , int y , int x2 , int y2 ); // BAD: unnecessary implicit relationships void draw ( Point from , Point to ); // better Note \uac00\uc0c1 \ud568\uc218\uac00 \uc5c6\ub294 \uac04\ub2e8\ud55c \ud074\ub798\uc2a4\ub294 \uacf5\uac04, \uc2dc\uac04\uc801\uc778 \uc624\ubc84\ud5e4\ub4dc\uac00 \uc5c6\ub2e4. Note \uc5b8\uc5b4\uc801\uc778 \uad00\uc810\uc5d0\uc11c \ubcfc \ub54c class \uc640 struct \uc758 \ucc28\uc774\ub294 \uba64\ubc84\ub4e4\uc758 \uac00\uc2dc\uc131(visibility)\uc774\ub2e4. Enforcement \ud2b9\ubcc4\ud788 \uc5c6\ub2e4. \ub370\uc774\ud130 \ud56d\ubaa9\ub4e4\uc5d0 \ub300\ud55c \uacbd\ud5d8\uc801\uc778 \uad00\uc810\ub4e4\uc774 \ud568\uaed8 \ubc18\uc601\ub420 \uc218\ub294 \uc788\uc744 \uac83\uc774\ub2e4. C.2: \ud0c0\uc785\uc774 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\uba74, class \ub97c \uc0ac\uc6a9\ud558\ub77c; \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc5d0 \ub300\ud55c \uc81c\uc57d\uc774 \uc790\uc720\ub86d\ub2e4\uba74 struct \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131\uc774 \uc88b\uace0 \uc774\ud574\ud558\uae30\ub3c4 \uc27d\ub2e4. class \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368, \ud504\ub85c\uadf8\ub798\uba38\uac00 \ubd88\ubcc0\uc870\uac74(invariant)\uc774 \ud544\uc694\ud558\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c \ub41c\ub2e4. \uc774 \uc810\uc740 \uc720\uc775\ud55c \uad00\uc2b5\uc774\ub2e4. Note invariant\ub294 \uac1c\uccb4 \uba64\ubc84\ub4e4\uc758 \ub17c\ub9ac\uc801\uc778 \uc0c1\ud0dc\ub85c\uc368, \uacf5\uac1c \uba64\ubc84 \ud568\uc218\ub4e4\uc774 \uac00\uc815\ud560 \uc218 \uc788\ub3c4\ub85d \uc0dd\uc131\uc790\uac00 \uc124\uc815 \ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. invariant\uac00 \uc124\uc815\ub41c \ud6c4\uc5d0\uc57c (\uc77c\ubc18\uc801\uc73c\ub85c \uc0dd\uc131\uc790\uc5d0 \uc758\ud574) \ubaa8\ub4e0 \uba64\ubc84 \ud568\uc218\ub294 \uac1c\uccb4\ub97c \ud1b5\ud574 \ud638\ucd9c\ub420 \uc218 \uc788\ub2e4. invariant\ub294 \ud615\uc2dd\uc5d0 \uad6c\uc560\ubc1b\uc9c0 \uc54a\uace0 (\uac00\ub839, \uc8fc\uc11d\uc73c\ub85c) \uae30\uc220\ub420 \uc218 \uc788\uc73c\uba70, \ub354 \ud615\uc2dd\uc744 \uac16\ucd98\ub2e4\uba74 Expects \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc774 \uc0c1\ud638\ub3c5\ub9bd\uc801\uc774\ub77c\uba74, \ubd88\ubcc0\uc870\uac74\uc740 \uc874\uc7ac\ud560 \uc218 \uc5c6\ub2e4. Example struct Pair { // the members can vary independently string name ; int volume ; }; \ud558\uc9c0\ub9cc: class Date { public : // validate that {yy, mm, dd} is a valid date and initialize Date ( int yy , Month mm , char dd ); // ... private : int y ; Month m ; char d ; // day }; Note \ud074\ub798\uc2a4\uac00 \uc5b4\ub5a4 private \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba74, \uc0ac\uc6a9\uc790\ub294 \uc0dd\uc131\uc790 \ud638\ucd9c \uc5c6\uc774 \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud560 \uc218 \uc5c6\ub2e4. \ub530\ub77c\uc11c, \ud074\ub798\uc2a4\ub97c \uc815\uc758\ud558\ub294 \uc0ac\ub78c\uc740 \uc0dd\uc131\uc790\ub97c \uc81c\uacf5\ud558\uace0 \uadf8 \uc758\ubbf8\ub97c \uba85\uc2dc\ud574\uc57c\ub9cc \ud55c\ub2e4. \uc774\ub294 \ud074\ub798\uc2a4 \uc791\uc131\uc790\uac00 invariant\ub97c \uc815\uc758\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. See also private \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74 class \ub97c \uc0ac\uc6a9\ud558\ub77c \ud074\ub798\uc2a4 \uc815\uc758\uc5d0 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uba3c\uc800 \ubc30\uce58\ud558\ub77c \uba64\ubc84\uc758 \ub178\ucd9c\uc744 \ucd5c\uc18c\ud654\ud558\ub77c protected \ub370\uc774\ud130 \uc0ac\uc6a9\uc744 \uc9c0\uc591\ud558\ub77c Enforcement private \ub370\uc774\ud130\ub97c \uac00\uc9c4 struct \ub098 public \uba64\ubc84\ub97c \uac00\uc9c4 class \ub4e4\uc744 \ucc3e\uc544\ub0b8\ub2e4. C.3: \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud574 \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc744 \ubd84\ub9ac\ud558\ub77c Reason \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc5d0 \ub300\ud55c \ubd84\uba85\ud55c \uad6c\ubd84\uc740 \uac00\ub3c5\uc131\uc744 \ub354 \uc88b\uac8c \ud558\uace0, \uc720\uc9c0 \ubcf4\uc218\ub97c \ub2e8\uc21c\ud558\uac8c \ud55c\ub2e4. Example class Date { // ... some representation ... public : Date (); // validate that {yy, mm, dd} is a valid date and initialize Date ( int yy , Month mm , char dd ); int day () const ; Month month () const ; // ... }; \uc774\ub7ec\ud55c \uacbd\uc6b0, \uc774\uc81c \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uace0 Date \uc5d0 \ub300\ud55c representation\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. (\ube44\ub85d \ub2e4\uc2dc \ucef4\ud30c\uc77c \ud574\uc57c \ud558\uaca0\uc9c0\ub9cc) Note \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uac04\uc758 \uad6c\ubd84\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc720\uc77c\ud55c \ubc29\ubc95\uc740 \uc544\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud55c \uac1c\ub150\uc73c\ub85c \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc548\uc5d0 \ub3c5\ub9bd\uc801\uc778 \ud568\uc218\ub4e4\uc774\ub098 \ucd94\uc0c1 \uae30\ubcf8 \ud074\ub798\uc2a4 \ud639\uc740 \ud15c\ud50c\ub9bf \ud568\uc218\ub4e4\uc744 \uc120\uc5b8\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uac00\uc7a5 \uc911\uc694\ud55c \uac83\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc778\ud130\ud398\uc774\uc2a4\uc640 \uadf8\uac83\ub4e4\uc758 \uad6c\ud604 \"\uc138\ubd80\uc0ac\ud56d\"\uc744 \uad6c\ubd84\ud558\ub294 \uac83\uc774\ub2e4. \uc774\uc0c1\uc801\uc73c\ub85c, \uadf8\ub9ac\uace0 \uc77c\ubc18\uc801\uc73c\ub85c, \uc778\ud130\ud398\uc774\uc2a4\ub294 \uadf8 \uad6c\ud604\ub4e4\ubcf4\ub2e4 \ud6e8\uc52c \ub354 \uc548\uc815\uc801\uc774\ub2e4. Enforcement ??? C.4: \ud074\ub798\uc2a4\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc \ud568\uc218\ub97c \uba64\ubc84\ud568\uc218\ub85c \uc791\uc131\ud558\ub77c Reason \uba64\ubc84 \ud568\uc218\uac04 \ucee4\ud50c\ub9c1\uc744 \uc904\uc778\ub2e4. \uac1c\uccb4 \uc0c1\ud0dc \ubcc0\uacbd\uc5d0 \uc758\ud574 \ubb38\uc81c\uac00 \uc0dd\uae30\ub294 \ud568\uc218\ub97c \uc904\uc778\ub2e4. \ud45c\ud604\uc774 \ubcc0\uacbd\ub41c \ud6c4\uc5d0 \uc218\uc815\ub420 \ud544\uc694\uac00 \uc788\ub294 \uba64\ubc84 \ud568\uc218\uc758 \uc218\ub97c \uc904\uc778\ub2e4. Example class Date { // ... \uc0c1\ub300\uc801\uc73c\ub85c \uc801\uc740 \uc778\ud130\ud398\uc774\uc2a4 ... }; // helper functions: Date next_weekday ( Date ); bool operator == ( Date , Date ); \"helper functions\"\uc73c\ub85c \ud45c\uc2dc\ub41c \ud568\uc218\ub4e4\uc740 Date \uc758 \ub0b4\ubd80\uc5d0 \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. Note \"uniform function call\" \uc774 \uac00\ub2a5\ud574\uc9c0\uba74 \ub354 \uc88b\uc544\uc9c8 \uac83\uc774\ub2e4. Exception C++ \uc5d0\uc11c\ub294 \uba64\ubc84 \ud568\uc218\ub9cc\uc774 virtual \ud568\uc218\uac00 \ub420 \uc218 \uc788\uc9c0\ub9cc, \ubaa8\ub4e0 virtual \uac00 \uba64\ubc84\uc5d0 \uc811\uadfc\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \ud2b9\ud788 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc740 \uba64\ubc84\uc5d0 \uc811\uadfc\ud558\ub294 \uacbd\uc6b0\uac00 \ub4dc\ubb3c\ub2e4. multi-methods \ub97c \ud655\uc778\ud558\ub77c. Exception C++ \uc5b8\uc5b4\uc5d0\uc11c = , () , [] , -> \uc5f0\uc0b0\uc790\ub294 \uba64\ubc84\ud568\uc218\uc5ec\uc57c \ud55c\ub2e4. Exception \uc911\ubcf5\uc815\uc758(overload) \uc9d1\ud569\uc5d0 private \ub370\uc774\ud130\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \uba64\ubc84\uac00 \uc788\uc744 \uc218 \uc788\ub2e4: class Foobar { public : void foo ( long x ) { /* manipulate private data */ } void foo ( double x ) { foo ( std :: lround ( x )); } // ... private : // ... }; \uc720\uc0ac\ud558\uac8c, \uc5b4\ub5a4 \ud568\uc218\ub4e4\uc740 \uc5f0\uc18d\uc801\uc73c\ub85c \ud638\ucd9c\ud558\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uc744 \uc218 \uc788\ub2e4: x . scale ( 0.5 ). rotate ( 45 ). set_color ( Color :: red ); \uc77c\ubc18\uc801\uc73c\ub85c, \uc774\ub7f0 \ud568\uc218\ub4e4 \uc911 \uc77c\ubd80\ub294 private \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud55c\ub2e4. Enforcement \ub370\uc774\ud130 \uba64\ubc84\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \ube44 \uac00\uc0c1 \uba64\ubc84 \ud568\uc218\ub97c \ucc3e\uc544\ub0b8\ub2e4. \uc774\ub7f0 \ud568\uc218\ub294 \ub9ce\uc740 \uba64\ubc84 \ud568\uc218\ub4e4\uc774 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uc9c1\uc811 \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc5c6\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4 virtual \ud568\uc218\ub4e4\uc740 \ubb34\uc2dc\ud55c\ub2e4 \uc911\ubcf5\uc815\uc758\ud558\ub294 \ud568\uc218 \uc911 \ud558\ub098 \uc774\uc0c1\uc758 \ud568\uc218\uac00 private \ub370\uc774\ud130 \uba64\ubc84\uc5d0 \uc811\uadfc\ud560 \ub54c, \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \ub2e4\ub978 \ud568\uc218\ub4e4\uc740 \ubb34\uc2dc\ud55c\ub2e4 this \ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub4e4\uc740 \ubb34\uc2dc\ud55c\ub2e4 C.5: \ubcf4\uc870 \ud568\uc218\ub4e4\uc740 \uad00\ub828 \ud074\ub798\uc2a4\uc640 \uac19\uc740 namespace\uc5d0 \ubc30\uce58\ud558\ub77c Reason \ubcf4\uc870 \ud568\uc218(helper function)\ub294 (\ubcf4\ud1b5 \ud074\ub798\uc2a4 \uc791\uc131\uc790\uac00 \uc81c\uacf5\ud558\ub294) \ud074\ub798\uc2a4\uc758 \ud45c\ud604\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc5c6\ub294 \ud568\uc218\uc774\uba70, \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uc720\uc6a9\ud55c \uc778\ud130\ud398\uc774\uc2a4 \uc911\uc5d0 \ud558\ub098\ub85c \ubcfc \uc218 \uc788\ub2e4. \ubcf4\uc870 \ud568\uc218\ub4e4\uc744 \uac19\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ub123\uc73c\uba74 \ud568\uc218\uc640 \ud074\ub798\uc2a4\uc758 \uad00\uacc4\uac00 \uba85\ud655\ud574\uc9c0\uace0, Argument Dependent Lookup\uc5d0\uc11c \ubc1c\uacac \ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. Example namespace Chrono { // here we keep time-related services class Time { /* ... */ }; class Date { /* ... */ }; // helper functions: bool operator == ( Date , Date ); Date next_weekday ( Date ); // ... } Note \uc774\ub294 \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 \uc744 \uc704\ud574\uc11c \ub9e4\uc6b0 \uc911\uc694\ud558\ub2e4. Enforcement \ub2e8\uc77c \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \uc778\uc790 \ud0c0\uc785\uc744 \ucde8\ud558\ub294 \uc804\uc5ed\ud568\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c C.7: \ud074\ub798\uc2a4 \ub610\ub294 \uc5f4\uac70\ud615\uc5d0 \ub300\ud55c \uc815\uc758\uc640 \ubcc0\uc218 \uc120\uc5b8\uc744 \uac19\uc740 \uad6c\ubb38\uc5d0 \ub123\uc9c0 \ub9d0\uc544\ub77c Reason \ud0c0\uc785\uc5d0 \ub300\ud55c \uc815\uc758\uc640 \ub2e4\ub978 \uac1c\uccb4(entitiy)\uc5d0 \ub300\ud55c \uc815\uc758\ub97c \uac19\uc740 \uad6c\ubb38(statement)\uc5d0 \ub123\ub294 \uac83\uc740 \ud63c\ub3d9\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\uace0, \ubd88\ud544\uc694\ud558\ub2e4. Example; bad struct Data { /*...*/ } data { /*...*/ }; Example; good struct Data { /*...*/ }; Data data { /*...*/ }; Enforcement \ud074\ub798\uc2a4\ub098 \uc5f4\uac70\ud615\uc758 \uc815\uc758\uc5d0 \uc788\ub294 \ub2eb\ub294 \uad04\ud638 } \uc5d0 ; \uc774 \ubc14\ub85c \ub098\ud0c0\ub098\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud558\ub77c C.8: non-public \uba64\ubc84\uac00 \uc788\ub2e4\uba74 struct \ubcf4\ub2e8 class \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131\uc5d0 \uc88b\ub2e4. \ubb34\uc5c7\uc778\uac00 \uc228\uaca8\uc838 \uc788\uac70\ub098, \ucd94\uc0c1\ud654\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \ubd84\uba85\ud558\uac8c \ud55c\ub2e4. \uc720\uc775\ud55c \uad00\uc2b5\uc774\ub2e4. Example, bad struct Date { int d , m ; Date ( int i , Month m ); // ... lots of functions ... private : int y ; // year }; C++ \uc5b8\uc5b4 \uaddc\uce59\uc744 \uace0\ub824\ud588\uc744 \ub54c \uc774 \ucf54\ub4dc\uc5d4 \uc798\ubabb\ub41c \uac83\uc774 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc \ub514\uc790\uc778 \uad00\uc810\uc5d0\uc11c\ub294 \ubaa8\ub4e0\uac8c \uc798\ubabb\ub418\uc5c8\ub2e4. private \ub370\uc774\ud130\uac00 public \ub370\uc774\ud130\uc640 \uba40\ub9ac \ub5a8\uc5b4\uc838 \uc228\uc5b4\uc788\uace0, \ud074\ub798\uc2a4 \uc120\uc5b8\uc758 \ub2e4\ub978 \ubd80\ubd84\ub4e4\ub85c \ubd84\ub9ac\ub418\uc5b4 \uc788\ub2e4. \uc774\ub7f0 \uc694\uc18c\ub4e4\uc740 \uac00\ub3c5\uc131\uc744 \uc800\ud574\ud558\uace0 \uc720\uc9c0\ubcf4\uc218\ub97c \ubcf5\uc7a1\ud558\uac8c \ud55c\ub2e4. Note \ud074\ub798\uc2a4 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uba3c\uc800 \ubc30\uce58\ud558\ub77c. NL.16\uc744 \ucc38\uace0\ud558\ub77c Enforcement private \ud639\uc740 protected \uba64\ubc84\ub97c \uac00\uc9c0\uc9c0\ub9cc struct \ub85c \uc120\uc5b8\ub41c \ud074\ub798\uc2a4\ub97c \uc9c0\uc801\ud55c\ub2e4 C.9: \uba64\ubc84\ub4e4\uc758 \ub178\ucd9c\uc744 \ucd5c\uc18c\ud654\ud558\ub77c Reason \ucea1\uc290\ud654. \uc815\ubcf4 \uc740\ub2c9. \uc758\ub3c4\uce58 \uc54a\uc740 \uc811\uadfc\uc744 \ucd5c\uc18c\ud654 \ud558\uace0, \uc720\uc9c0\ubcf4\uc218\ub97c \uc27d\uac8c \ud55c\ub2e4. Example template < typename T , typename U > struct pair { T a ; U b ; // ... }; // \ubd80\ubd84\uc5d0 \uc5b4\ub5a4 \ucf54\ub4dc\uac00 \uc791\uc131\ub418\uac74, pair \uc758 \uc0ac\uc6a9\uc790\ub294 a \uc640 b \ub97c \ub3c5\ub9bd\uc801\uc73c\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. \ucf54\ub4dc \uaddc\ubaa8\uac00 \ud070 \uacbd\uc6b0, pair \uc758 \uba64\ubc84\uc5d0 \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\ub294\uc9c0 \ucc3e\uae30 \uc5b4\ub835\ub2e4. \ub3c5\ub9bd\uc801\uc73c\ub85c \ubcc0\uacbd\ud558\ub294 \uac83\uc774 \uc758\ub3c4\uc5d0 \ub9de\uc744 \uc218 \uc788\uc9c0\ub9cc, \uba64\ubc84\uac04\uc758 \uad00\uacc4\ub97c \uac15\uc81c\ud558\uace0 \uc2f6\ub2e4\uba74, private \ub85c \ubcc0\uacbd\ud558\uace0 \uadf8 \uad00\uacc4(\ubd88\ubcc0\uc870\uac74)\ub97c \uc0dd\uc131\uc790\uc640 \uba64\ubc84 \ud568\uc218\ub4e4\ub85c \uc9c0\ud0a4\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74: class Distance { public : // ... double meters () const { return magnitude * unit ; } void set_unit ( double u ) { // ... check that u is a factor of 10 ... // ... change magnitude appropriately ... unit = u ; } // ... private : double magnitude ; double unit ; // 1 is meters, 1000 is kilometers, 0.001 is millimeters, etc. }; Note \ub9cc\uc57d \ubcc0\uc218\ub4e4\uc5d0 \uc811\uadfc\ud558\ub294 \ucf54\ub4dc\ub97c \uc27d\uac8c \uacb0\uc815\ud560 \uc218 \uc5c6\ub2e4\uba74, \uadf8 \ud0c0\uc785\uc774\ub098 \uc0ac\uc6a9\uc744 (\uc27d\uac8c) \ubcc0\uacbd\ud558\uac70\ub098 \uac1c\uc120\ud558\uae30 \uc5b4\ub835\ub2e4. public \uacfc protected \ub370\uc774\ud130\ub294 \ubcf4\ud1b5 \uc774 \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4. Example \ud074\ub798\uc2a4\ub294 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ub450\uac00\uc9c0 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud560 \uc218 \uc788\ub2e4. \ud558\ub098\ub294 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4\uc5d0\uac8c \uc81c\uacf5\ud558\ub294 protected \uc774\uba70 \ud558\ub098\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c public \uc774\ub2e4. \uc608\ub97c \ub4e4\uba74, \ud558\uc704 \ud074\ub798\uc2a4\ub294 \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ubd88\ubcc0\uc870\uac74\uc774 \uc720\uc9c0\ub41c\ub2e4\ub294 \uac83\uc744 \ud655\uc2e4\ud788 \ud560 \uc218 \uc788\ub2e4\uba74 \uc2e4\ud589\uc2dc\uac04 \uac80\uc0ac\ub97c \uc0dd\ub7b5 \ud560\uc218\ub3c4 \uc788\ub2e4: class Foo { public : int bar ( int x ) { check ( x ); return do_bar ( x ); } // ... protected : int do_bar ( int x ); // do some operation on the data // ... private : // ... data ... }; class Dir : public Foo { //... int mem ( int x , int y ) { /* ... do something ... */ return do_bar ( x + y ); // OK: derived class can bypass check } }; void user ( Foo & x ) { int r1 = x . bar ( 1 ); // OK, will check int r2 = x . do_bar ( 2 ); // error: would bypass check // ... } Note protected \ub370\uc774\ud130\ub294 \uc88b\uc740 \uc0dd\uac01\uc774 \uc544\ub2c8\ub2e4 . Note public \uba64\ubc84\ub97c \uac00\uc7a5 \uc55e\uc5d0, protected \uba64\ubc84\ub97c \ub2e4\uc74c\uc5d0, private \uba64\ubc84\ub97c \ub9c8\uc9c0\ub9c9\uc5d0 \ubc30\uce58\ud558\ub77c. Enforcement protected \ub370\uc774\ud130\ub97c \uc9c0\uc801\ud558\ub77c public \uacfc private \ub370\uc774\ud130\uac00 \ud568\uaed8 \uc0ac\uc6a9\ub41c \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c C.concrete: \uc2e4\uc81c \ud0c0\uc785(Concrete types) \uc774\uc0c1\uc801\uc778 \ud074\ub798\uc2a4\ub294 \uc815\uaddc \ud0c0\uc785(Regular Type)\uacfc \uac19\uc544\uc57c \ud55c\ub2e4. \uc27d\uac8c \ub9d0\ud558\uba74 \" int \ucc98\ub7fc \ub3d9\uc791\ud558\ub294 \uac83\"\uc774\ub2e4. \uc2e4\uc81c \ud0c0\uc785(Concrete type)\uc774\ub780 \uac00\uc7a5 \uac04\ub2e8\ud55c \uc885\ub958\uc758 \ud074\ub798\uc2a4\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc5ed\uc8fc: Regular Type\uc740 \ub2e4\uc74c\uc758 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\ub294 \ud0c0\uc785\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. - DefaultConstructible - CopyConstructible, CopyAssignable - MoveConstructible, MoveAssignable - Destructible - Swappable - EqualityComparable \uc608\uc2dc\ub85c \uc5b8\uae09\ub41c int \uc758 \uacbd\uc6b0, \uae30\ubcf8 \uc5f0\uc0b0(\uc0dd\uc131, \ud30c\uad34, \ubcf5\uc0ac, \uc774\ub3d9)\uc744 \uc9c0\uc6d0\ud558\uba74\uc11c \uad50\ud658, \ub3d9\ub4f1\ube44\uad50\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4 \uc815\uaddc \ud0c0\uc785\uc758 \uac12\uc740 \ubcf5\uc0ac \ub420 \uc218 \uc788\uace0, \ubcf5\uc0ac\uc758 \uacb0\uacfc\ub294 \uc6d0\ubcf8\uacfc \uac19\uc740 \uac12\uc744 \uac16\ub294 \ub3c5\ub9bd\uc801\uc778 \uac1c\uccb4\uc774\ub2e4. \ud0c0\uc785\uc774 = \uc640 == \ub97c \ubaa8\ub450 \uac16\ub294\ub2e4\uba74, a = b \ub97c \uc2e4\ud589\ud55c \uc774\ud6c4\uc5d0\ub294 a == b \uc5d0\uc11c true \uac00 \ubc18\ud658\ub418\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \uc2e4\uc81c \ud0c0\uc785\uc774 \ub300\uc785\uacfc \ub3d9\ub4f1 \ube44\uad50\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc9c0\ub9cc, \uadf8\ub7f0 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\ub2e4 (\uac70\uc758 \uc5c6\uc5b4\uc57c \ud55c\ub2e4). C++\uc758 \uc5b8\uc5b4 \ub0b4\uc7a5(built-in) \ud0c0\uc785\ub4e4\uc740 \uc815\uaddc\uc801(Regular)\uc774\uace0, string , vector , map \uac19\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ud074\ub798\uc2a4\ub4e4 \ub610\ud55c \uadf8\ub807\ub2e4. \uc2e4\uc81c \ud0c0\uc785\ub4e4\uc740 \uc885\uc885 \uacc4\uce35\uad6c\uc870\uc758 \uc77c\ubd80\ub85c \uc0ac\uc6a9\ub418\ub294 \ud0c0\uc785\ub4e4\uacfc \uad6c\ubd84\ud558\uc5ec \uac12 \ud0c0\uc785\uc73c\ub85c \uc5b8\uae09\ub41c\ub2e4. \uc2e4\uc81c \ud0c0\uc785 \uaddc\uce59 \uc694\uc57d: C.10: \ud074\ub798\uc2a4 \uacc4\uce35 \ubcf4\ub2e4 \uc2e4\uc81c(Concrete) \ud0c0\uc785\ub4e4\uc744 \uc120\ud638\ud558\ub77c C.11: \uc2e4\uc81c \ud0c0\uc785\ub4e4\uc740 \uc815\uaddc\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub77c C.10: \ud074\ub798\uc2a4 \uacc4\uce35 \ubcf4\ub2e4 \uc2e4\uc81c(Concrete) \ud0c0\uc785\ub4e4\uc744 \uc120\ud638\ud558\ub77c Reason \uc2e4\uc81c \ud0c0\uc785\uc740 \uadfc\ubcf8\uc801\uc73c\ub85c \uacc4\uce35\uad6c\uc870\ubcf4\ub2e4 \ub2e8\uc21c\ud558\ub2e4: \ub514\uc790\uc778\uc774 \ub354 \uc27d\uace0, \uad6c\ud604\uc774 \ub354 \uc27d\uace0, \uc0ac\uc6a9\ud558\uae30\uac00 \ub354 \uc26c\uc6b0\uba70, \ucd94\ub860\ud558\uae30 \ub354 \uc27d\ub2e4. \ub354 \uc791\uace0 \ub354 \ube60\ub974\uae30\ub3c4 \ud558\ub2e4. \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \ud0c0\ub2f9\ud55c \uc774\uc720\uac00 \uc788\uc5b4\uc57c \ud55c\ub2e4. Example class Point1 { int x , y ; // ... operations ... // ... no virtual functions ... }; class Point2 { int x , y ; // ... operations, some virtual ... virtual ~ Point2 (); }; void use () { Point1 p11 { 1 , 2 }; // make an object on the stack Point1 p12 { p11 }; // a copy auto p21 = make_unique < Point2 > ( 1 , 2 ); // make an object on the free store auto p22 = p21 . clone (); // make a copy // ... } \ud074\ub798\uc2a4\uac00 \uacc4\uce35\uad6c\uc870\uc758 \uc77c\ubd80\uac00 \ub420 \uc218 \uc788\ub2e4\uba74, \ubc18\ub4dc\uc2dc \ud3ec\uc778\ud130\ub098 \ub808\ud37c\ub7f0\uc2a4\ub85c \uac1c\uccb4\ub97c \ub2e4\ub8e8\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub294 \uac04\uc811 \ucc98\ub9ac\ub97c \uc704\ud574 \ub354 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc0ac\uc6a9\ud558\uac8c \ub418\uace0, \ub354 \ub9ce\uc740 \ud560\ub2f9\uacfc \ud574\uc81c, \uc2e4\ud589\uc2dc\uac04 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubc1c\uc0dd\ud558\uac8c \ub41c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. Note \uc2e4\uc81c \ud0c0\uc785\uc740 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub420 \uc218 \uc788\uace0, \ub2e4\ub978 \ud074\ub798\uc2a4\uc758 \uba64\ubc84\uac00 \ub420 \uc218 \uc788\ub2e4. Note \uc2e4\ud589\uc2dc\uac04\uc5d0 \ub2e4\ud615\uc801 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc704\ud574 \uac04\uc811\ucc98\ub9ac\ub294 \ud544\uc218\uc801\uc774\ub2e4. \ud560\ub2f9\uacfc \ud574\uc81c\uc758 \ucd94\uac00\ube44\uc6a9\uc740 \uadf8\ub807\uc9c0 \uc54a\ub2e4. (\ub2e8\uc9c0 \uac00\uc7a5 \ud754\ud55c \uc0ac\ub840\uc77c \ubfd0\uc774\ub2e4) \ud30c\uc0dd \ud074\ub798\uc2a4\uc758 \uc81c\ud55c\ub41c(\ud2b9\uc815\ub41c) \uac1c\uccb4\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c\uc368 \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. \ub3d9\uc801 \ud560\ub2f9\uc744 \ud560 \uc218 \uc5c6\uc73c\uba70, \ud50c\ub7ec\uadf8\uc778\uacfc \uac19\uc740 \uac83\ub4e4\uc5d0\uac8c \uc548\uc815\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud558\uace0\uc790 \ud560 \ub54c \uc774\ub807\uac8c \ud560 \uc218 \uc788\ub2e4. (\uc608\ucee8\ub300, hard real-time) Enforcement ??? C.11: \uc2e4\uc81c \ud0c0\uc785\ub4e4\uc740 \uc815\uaddc\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub77c Reason \uc77c\ubc18\uc801\uc778(regular) \ud0c0\uc785\uc740 \uc774\ud574\ud558\uace0 \ucd94\ub860(reason)\ud558\uae30 \uc27d\ub2e4. (\uc77c\ubc18\uc801\uc774\uc9c0 \uc54a\uc740 \ud0c0\uc785\ub4e4\uc740 \uc774\ud574\ud558\uace0 \uc0ac\uc6a9\ud558\ub294\ub370 \ucd94\uac00\uc801\uc778 \ub178\ub825\uc744 \ud544\uc694\ub85c \ud55c\ub2e4.) Example struct Bundle { string name ; vector < Record > vr ; }; bool operator == ( const Bundle & a , const Bundle & b ) { return a . name == b . name && a . vr == b . vr ; } Bundle b1 { \"my bundle\" , { r1 , r2 , r3 }}; Bundle b2 = b1 ; if ( ! ( b1 == b2 )) error ( \"impossible!\" ); b2 . name = \"the other bundle\" ; if ( b1 == b2 ) error ( \"No!\" ); \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0, \ub9cc\uc57d concrete type\uc774 \ub300\uc785\uc5f0\uc0b0( a = b )\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \ube44\uad50 \uc5f0\uc0b0( a == b )\ub3c4 \uc9c0\uc6d0\ud55c\ub2e4. Enforcement ??? C.ctor: \uc0dd\uc131\uc790, \ub300\uc785 \uc5f0\uc0b0\uc790, \uc18c\uba78\uc790 \uc774 \ud568\uc218\ub4e4\uc740 \uac1c\uccb4\uc758 \uc0dd\uba85\uc8fc\uae30\ub97c \uc81c\uc5b4 \ud55c\ub2e4: \uc0dd\uc131, \ubcf5\uc0ac, \uc774\ub3d9, \uadf8\ub9ac\uace0 \uc18c\uba78. \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud574\uc11c \ud074\ub798\uc2a4\uc758 \ucd08\uae30\ud654\ub97c \ubcf4\uc7a5\ud558\uace0 \ub2e8\uc21c\ud654 \ud558\ub77c. \uae30\ubcf8 \uc5f0\uc0b0 \uc740 \uc544\ub798\uc640 \uac19\uc740 \uc5f0\uc0b0\ub4e4\uc744 \uc758\ubbf8\ud55c\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790: X() \ubcf5\uc0ac \uc0dd\uc131\uc790: X(const X&) \ubcf5\uc0ac \ub300\uc785 \uc5f0\uc0b0\uc790: operator=(const X&) \uc774\ub3d9 \uc0dd\uc131\uc790: X(X&&) \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790: operator=(X&&) \uc18c\uba78\uc790: ~X() \uc774\uc0c1\uc758 \uc5f0\uc0b0\ub4e4\uc740 \uc815\uc758\ud558\uc9c0 \uc54a\uc544\ub3c4 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0dd\uc131\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uae30\ubcf8\uc5f0\uc0b0\uc744 \uc81c\ud55c\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\ub2e4. \uae30\ubcf8 \uc5f0\uc0b0\uc740 \uac1c\uccb4\uc758 \uc218\uba85\uc8fc\uae30\uc640 \uad00\ub828\ub41c \uc5f0\uc0b0\ub4e4\uc758 \uc9d1\ud569\uc744 \uc758\ubbf8\ud55c\ub2e4. \ucf54\ub4dc\uac00 \uba85\uc2dc\ud558\uc9c0 \uc54a\ub294 \ud55c, C++\uc740 \ud074\ub798\uc2a4\ub97c \uac12 \ud0c0\uc785 \ucc98\ub7fc \ub2e4\ub8e8\uc9c0\ub9cc \ubaa8\ub4e0 \ud0c0\uc785\uc774 \uac12 \ud0c0\uc785\ucc98\ub7fc \ub3d9\uc791\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \uae30\ubcf8 \uc5f0\uc0b0 \uaddc\uce59\ub4e4: C.20: \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uba74 \uadf8\ub807\uac8c \ud558\ub77c C.21: \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758 \ud558\uac70\ub098 =delete \ub85c \uc120\uc5b8\ud588\ub2e4\uba74, \ub098\uba38\uc9c0 \ubaa8\ub450 \uc815\uc758\ud558\uac70\ub098 =delete \ud558\ub77c C.22: \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc740 \uc11c\ub85c \uc870\ud654\ub86d\uac8c \ub3d9\uc791\ud574\uc57c \ud55c\ub2e4 \uc18c\uba78\uc790 \uaddc\uce59\ub4e4: C.30: \uac1c\uccb4\uac00 \uc5c6\uc5b4\uc9c8 \ub54c, \uba85\uc2dc\uc801\uc778 \ub3d9\uc791\uc774 \ud544\uc694\ud560 \uacbd\uc6b0 \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c C.31: \ud074\ub798\uc2a4\uac00 \ud68d\ub4dd\ud55c \ubaa8\ub4e0 \uc790\uc6d0\uc740 \uc18c\uba78\uc790\uc5d0\uc11c \ud574\uc81c\ub418\uc5b4\uc57c \ud55c\ub2e4 C.32: \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130( T* )\ub098 \ucc38\uc870( T& )\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \ucc38\uc870 \ub300\uc0c1\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub294\uc9c0\ub97c \uace0\ub824\ud558\ub77c C.33: \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130\ub85c \ub300\uc0c1\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub2e4\uba74, \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c C.35: \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\ub294 \uacf5\uac1c\ub41c \uac00\uc0c1 \uc18c\uba78\uc790 \ud639\uc740 \uc0c1\uc18d\ub418\ub294 \ube44-\uac00\uc0c1 \ud568\uc218\uc5ec\uc57c \ud55c\ub2e4 C.36: \uc18c\uba78\uc790\ub294 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 C.37: \uc18c\uba78\uc790\ub97c noexcept \ub85c \uc791\uc131\ud558\ub77c \uc0dd\uc131\uc790 \uaddc\uce59\ub4e4: C.40: \ud074\ub798\uc2a4\uac00 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\uba74 \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud558\ub77c C.41: \uc0dd\uc131\uc790\ub294 \uc644\uc804\ud788 \ucd08\uae30\ud654\ub41c \uac1c\uccb4\ub97c \uc0dd\uc131\ud574\uc57c \ud55c\ub2e4 C.42: \uc0dd\uc131\uc790\uac00 \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uc9c0 \ubabb\ud55c\ub2e4\uba74, \uc608\uc678\ub97c \ub358\uc9c0\ub3c4\ub85d \ud558\ub77c C.43: \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud074\ub798\uc2a4(\uac12 \ud0c0\uc785)\ub294 \ubc18\ub4dc\uc2dc \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac16\ub3c4\ub85d \ud558\ub77c C.44: \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uac00\ub2a5\ud55c \ub2e8\uc21c\ud558\uace0 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c C.45: \uba64\ubc84\ub97c \ucd08\uae30\ud654 \ud558\uae30\ub9cc \ud558\ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c; \ub300\uc2e0 \uba64\ubc84\ub4e4\uc774 \uc2a4\uc2a4\ub85c \ucd08\uae30\ud654 \ud558\ub3c4\ub85d \ud558\ub77c C.46: \ub2e8\uc77c \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uc0dd\uc131\uc790\ub294 explicit \uc73c\ub85c \uc120\uc5b8\ud558\ub77c C.47: \uba64\ubc84 \ubcc0\uc218\ub4e4\uc740 \uc120\uc5b8\ub41c \uc21c\uc11c\ub300\ub85c \ucd08\uae30\ud654\ud558\ub77c C.48: \uc0c1\uc218 \ucd08\uae30\ud654\ub294 \uac00\ub2a5\ud55c \ud074\ub798\uc2a4 \ub0b4(in-class) \uba64\ubc84 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c C.49: \uc0dd\uc131\uc790 \uc548\uc5d0\uc11c\uc758 \ub300\uc785 \ubcf4\ub2e4\ub294 \ucd08\uae30\ud654\ub97c \uc120\ud638\ud558\ub77c C.50: \ucd08\uae30\ud654 \uacfc\uc815\uc5d0\uc11c virtual \ub3d9\uc791\uc774 \ud544\uc694\ud558\ub2e4\uba74, \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c C.51: \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub4e4\uc744 \uc704\ud55c \uc77c\ubc18\uc801\uc778 \ub3d9\uc791\uc744 \ud45c\ud604\ud560 \ub54c\ub294 \ub300\ub9ac \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c C.52: \ucd94\uac00\uc801\uc778 \ucd08\uae30\ud654\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \ud30c\uc0dd\ub41c \ud074\ub798\uc2a4\uc5d0\uc11c \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \uc0c1\uc18d \uc0dd\uc131\uc790\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c \ubcf5\uc0ac\uc640 \uc774\ub3d9 \uaddc\uce59\ub4e4: C.60: \ubcf5\uc0ac\uc5f0\uc0b0\uc744 virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c. \ub9e4\uac1c\ubcc0\uc218\ub294 const& \ub85c \ubc1b\uace0, const& \ub85c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c C.61: \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \ubcf5\uc0ac\ub97c \uc218\ud589\ud574\uc57c \ud55c\ub2e4 C.62: \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uac8c \uc791\uc131\ud558\ub77c C.63: \uc774\ub3d9 \uc5f0\uc0b0\uc740 virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c, \ub9e4\uac1c\ubcc0\uc218\ub294 && \ub97c \uc0ac\uc6a9\ud558\uace0, const& \ub85c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c C.64: \uc774\ub3d9 \uc5f0\uc0b0\uc740 \uc774\ub3d9\uc744 \uc218\ud589\ud574\uc57c \ud558\uba70, \uc6d0\ubcf8 \uac1c\uccb4\ub97c \uc720\ud6a8\ud55c \uc0c1\ud0dc\ub85c \ub0a8\uaca8\ub193\uc544\uc57c \ud55c\ub2e4 C.65: \uc774\ub3d9 \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uac8c \uc791\uc131\ud558\ub77c C.66: \uc774\ub3d9 \uc5f0\uc0b0\uc740 noexcept \ub85c \ub9cc\ub4e4\uc5b4\ub77c C.67: \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\ub294 \ubcf5\uc0ac\ub97c \uc81c\ud55c\ud574\uc57c \ud55c\ub2e4 \ub2e4\ub978 \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc5d0 \ub300\ud55c \uaddc\uce59: C.80: \uae30\ubcf8 \uc758\ubbf8\uad6c\uc870(semantic)\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub824\uba74 =default \ub97c \uc0ac\uc6a9\ud558\ub77c C.81: \uae30\ubcf8 \ub3d9\uc791\uc744 (\ub300\uc548\uc744 \uc6d0\ud558\uc9c0 \uc54a\uace0) \uae08\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74 =delete \ub97c \uc0ac\uc6a9\ud558\ub77c C.82: \uc0dd\uc131\uc790 \ub610\ub294 \uc18c\uba78\uc790\uc5d0\uc11c \uac00\uc0c1 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9d0\uc544\ub77c C.83: \uac12 \ud0c0\uc785\ub4e4\uc5d0\ub294, noexcept swap\ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c C.84: swap \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 C.85: swap \uc5f0\uc0b0\uc740 noexcept \ub85c \uc791\uc131\ud558\ub77c C.86: == \uc5f0\uc0b0\uc790\ub294 \ud53c\uc5f0\uc0b0\uc790 \ud0c0\uc785\ub4e4\uc5d0 \ub300\uce6d\uc801\uc774\uace0, noexcept \ub85c \ub9cc\ub4e4\uc5b4\ub77c C.87: \uae30\ubcf8 \ud074\ub798\uc2a4\uc5d0 \uc788\ub294 == \uc5d0 \uc8fc\uc758\ud558\ub77c C.89: hash \ub294 noexcept \ub85c \uc791\uc131\ud558\ub77c C.90: memset \ub610\ub294 memcpy \uac00 \uc544\ub2cc, \uc0dd\uc131\uc790\uc640 \ud560\ub2f9 \uc5f0\uc0b0\uc790\uc5d0 \uc758\uc874\ud558\ub77c C.defop: \uae30\ubcf8 \uc5f0\uc0b0\ub4e4(Default Operations) C++ \uc5d0\uc11c\ub294 \uae30\ubcf8\uc801\uc778 \uc758\ubbf8\ub97c \uac00\uc9c4 \uc5f0\uc0b0\ub4e4\uc744 \uc81c\uacf5\ud55c\ub2e4. \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc774 \uc5f0\uc0b0\ub4e4\uc744 \uae08\uc9c0\ud558\uac70\ub098 \uad50\uccb4\ud560 \uc218 \uc788\ub2e4. C.20: \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uba74 \uadf8\ub807\uac8c\ud558\ub77c Reason \uac00\uc7a5 \ub2e8\uc21c\ud558\uace0, \uba85\ub8cc\ud55c \uc758\ubbf8\ub97c \uc900\ub2e4. Example struct Named_map { public : // ... no default operations declared ... private : string name ; map < int , int > rep ; }; Named_map nm ; // default construct Named_map nm2 { nm }; // copy construct std::map \uacfc string \uc740 \ubaa8\ub4e0 \ud2b9\uc218\ud55c \ud568\uc218\ub4e4\uc744 \uac16\uace0 \uc788\ub2e4, \ucd94\uac00\ub85c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. Note \"The rule of zero\"\ub85c \uc54c\ub824\uc838 \uc788\ub2e4. Enforcement (Not enforceable) \uc2dc\ud589\ud560 \uc218 \uc5c6\ub354\ub77c\ub3c4, \uc88b\uc740 \uc815\uc801 \ubd84\uc11d\uae30\ub294 \uc774 \uaddc\uce59\uc5d0 \ub9de\ub294 \uac00\ub2a5\ud55c \uac1c\uc120\uc0ac\ud56d\ub4e4\uc744 \uc54c\ub824\uc8fc\ub294 \ud328\ud134\ub4e4\uc744 \ucc3e\uc744 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74, \ud3ec\uc778\ud130\uc640 \ud06c\uae30\ub97c \uba64\ubc84\ub85c \uac16\ub294 \ud074\ub798\uc2a4\uac00 \uc788\uace0 \uc18c\uba78\uc790\uc5d0\uc11c \uadf8 \ud3ec\uc778\ud130\ub97c delete \ud55c\ub2e4\uba74 \uc544\ub9c8\ub3c4 vector \ub85c \ubc14\uafc0 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. C.21: \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758 \ud558\uac70\ub098 =delete \ub85c \uc120\uc5b8\ud588\ub2e4\uba74, \ub098\uba38\uc9c0 \ubaa8\ub450 \uc815\uc758\ud558\uac70\ub098 =delete \ud558\ub77c Reason \uc774 \ud2b9\ubcc4\ud55c \uba64\ubc84 \ud568\uc218\ub4e4 \uc740 \uae30\ubcf8 \uc0dd\uc131\uc790, \ubcf5\uc0ac \uc0dd\uc131\uc790, \ubcf5\uc0ac \ub300\uc785 \uc5f0\uc0b0\uc790, \uc774\ub3d9 \uc0dd\uc131\uc790, \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790, \uc18c\uba78\uc790\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc774\ub4e4\uc758 \uc758\ubbf8\ub294 \uc11c\ub85c \ubc00\uc811\ud558\uac8c \uc5f0\uad00\ub418\uc5b4 \uc788\ub2e4. \ub9cc\uc57d \ud55c \ud568\uc218\uac00 \uae30\ubcf8 \uc81c\uacf5 \ud568\uc218\uac00 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4\uba74(non-default), \ub2e4\ub978 \ud568\uc218\ub4e4\ub3c4 \uc218\uc815\uc774 \ud544\uc694\ud558\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc81c\uc678\ud558\uace0 \uc774 \ud2b9\ubcc4\ud55c \uba64\ubc84 \ud568\uc218\ub4e4 \uc911 \ud558\ub098\ub97c =default \ud639\uc740 =delete \ub85c \uc120\uc5b8\ud560 \uacbd\uc6b0, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774\ub3d9 \uc0dd\uc131\uc790\uc640 \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790\ub97c \ubb35\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub3d9 \uc0dd\uc131\uc790 \ub610\ub294 \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790\ub97c \uc120\uc5b8\ud558\ub294 \uacbd\uc6b0, \ubcf5\uc0ac \uc0dd\uc131\uc790\uc640 \ubcf5\uc0ac \ub300\uc785 \uc5f0\uc0b0\uc790\uac00 \uc774\ub97c \ub530\ub978\ub2e4. \uc774\ub3d9 \uc5f0\uc0b0\uc774 =default \ub85c \uc120\uc5b8\ub41c \uacbd\uc6b0 \ubcf5\uc0ac \uc5f0\uc0b0\uc774 \uc790\ub3d9\uc73c\ub85c \uc815\uc758\ub418\uba70, \uc774\ub3d9 \uc5f0\uc0b0\uc774 =delete \ub85c \uc120\uc5b8\ub41c \uacbd\uc6b0 \ubcf5\uc0ac \uc5f0\uc0b0\ub3c4 =delete \uac00 \uc801\uc6a9\ub41c\ub2e4. \ub530\ub77c\uc11c, \uc774 \ud2b9\ubcc4 \ud568\uc218\ub4e4 \uc911 \ud558\ub098\ub77c\ub3c4 \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74, \uc758\ub3c4\uce58 \uc54a\uc740 \ubcf5\uc0ac\uc640 \uc774\ub3d9\uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud574 \ub098\uba38\uc9c0 \ud568\uc218\ub4e4\ub3c4 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. Example, bad struct M2 { // bad: incomplete set of default operations public : // ... // ... no copy or move operations ... ~ M2 () { delete [] rep ; } private : pair < int , int >* rep ; // zero-terminated set of pairs }; void use () { M2 x ; M2 y ; // ... x = y ; // the default assignment // ... } \uc5ec\uae30\uc11c\ub294, \uc18c\uba78\uc790\uc5d0 \ub300\ud55c \"\ud2b9\ubcc4\ud55c \uc8fc\uc758\"\uac00 \ud544\uc694\ud558\ub2e4\uace0 \ud55c\ub2e4\uba74, \ubcf5\uc0ac\uc640 \uc774\ub3d9 \ud560\ub2f9(\ub458 \ub2e4 \ubb35\uc2dc\uc801\uc73c\ub85c \uac1c\uccb4\ub97c \uc18c\uba78\ud560 \uac83\uc774\ub2e4)\uc774 \uc815\ud655\ud558\uac8c \ub3d9\uc791\ud560 \uac00\ub2a5\uc131\uc740 \uc801\ub2e4. (\uc5ec\uae30\uc11c\ub294, \ub450\ubc88 delete \ub97c \uc2dc\ub3c4\ud560 \uac83\uc774\ub2e4) Note \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc911\uc694\ud558\uac8c \uc0dd\uac01\ud558\ub294\uc9c0\uc5d0 \ub2ec\ub824\uc788\ub294\ub370, \uc774\uac83\uc740 \"The rule of five\" \ud639\uc740 \"The rule of six\" \uc774\ub77c\uace0 \uc54c\ub824\uc838 \uc788\ub2e4. Note \ub2e4\ub978 \uac83\uc740 \uc815\uc758 \ud558\ub354\ub77c\ub3c4 \uae30\ubcf8 \uc5f0\uc0b0\uc758 \uae30\ubcf8 \uad6c\ud604\uc774 \ud544\uc694\ud558\ub2e4\uba74, =default \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 \ud568\uc218\uc5d0 \ub300\ud55c \uc758\ub3c4\ub97c \ud45c\ud604\ud558\ub77c. \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, =delete \ub97c \uc368\uc11c \uc81c\ud55c\ud558\ub77c. Example, good \ub2e8\uc21c\ud788 virtual \uc744 \uc704\ud574 \uc18c\uba78\uc790\uac00 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4\uba74, =default \ub97c \uc0ac\uc6a9\ud574 \uc815\uc758\ud560 \uc218 \uc788\ub2e4. \ubb35\uc2dc\uc801\uc73c\ub85c \uc774\ub3d9 \uc5f0\uc0b0\uc774 \uc81c\ud55c\ub418\ub294 \uac83\uc744 \ub9c9\uace0 \uc2f6\ub2e4\uba74 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\uc774 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d \uc774\ub3d9 \uc5f0\uc0b0\ub9cc \uc9c0\uc6d0\ud558\ub294\uac8c \uc544\ub2c8\ub77c\uba74 (\uc989 \ubcf5\uc0ac\uac00 \uac00\ub2a5\ud574\uc57c \ud55c\ub2e4\uba74) \ubcf5\uc0ac \uc5f0\uc0b0 \uc5ed\uc2dc \uadf8\uc5d0 \ub9de\uac8c \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4: class AbstractBase { public : virtual ~ AbstractBase () = default ; AbstractBase ( const AbstractBase & ) = default ; AbstractBase & operator = ( const AbstractBase & ) = default ; AbstractBase ( AbstractBase && ) = default ; AbstractBase & operator = ( AbstractBase && ) = default ; }; C.67 \uc744 \uace0\ub824\ud574\uc11c \ubcf5\uc0ac \uc808\ub2e8(slicing) \ubb38\uc81c\ub97c \uc608\ubc29\ud558\uae30 \uc704\ud574 \ubcf5\uc0ac\uc640 \uc774\ub3d9\uc5f0\uc0b0\uc744 \uc81c\ud55c\ud560 \uc218\ub3c4 \uc788\ub2e4: class ClonableBase { public : virtual unique_ptr < ClonableBase > clone () const ; virtual ~ ClonableBase () = default ; ClonableBase ( const ClonableBase & ) = delete ; ClonableBase & operator = ( const ClonableBase & ) = delete ; ClonableBase ( ClonableBase && ) = delete ; ClonableBase & operator = ( ClonableBase && ) = delete ; }; \ubcf5\uc0ac\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\uc744 =delete \ub85c \uc815\uc758\ud558\uac70\ub098 \ubcf5\uc0ac\uc5f0\uc0b0\uc744 =delete \ud558\ub294 \uacbd\uc6b0 \ubaa8\ub450 \uac19\uc740 \ud6a8\uacfc\ub97c \uac00\uc9c4\ub2e4. \ud558\uc9c0\ub9cc \ud0c0\uc785\uc758 \uc758\ub3c4\ub97c \ubd84\uba85\ud788 \uc804\ub2ec\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubaa8\ub4e0 \ud2b9\ubcc4 \ud568\uc218\ub4e4\uc744 \uc815\uc758\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. Note \ucef4\ud30c\uc77c\ub7ec\ub294 \uc774 \uaddc\uce59\uc744 \uac15\uc81c\ud558\uace0, \uc774\uc0c1\uc801\uc73c\ub85c\ub294 \uc704\ubc18\uc0ac\ud56d\uc774 \ubc1c\uc0dd\ud558\uba74 \uacbd\uace0\ud55c\ub2e4. Note \ud074\ub798\uc2a4\uc5d0 \ubb35\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\ub41c \ubcf5\uc0ac \uc5f0\uc0b0\uc5d0 \uc758\uc874\ud558\ub294 \uac83\uc740 \ub354 \uc774\uc0c1 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4. Note \uc5ec\uc12f\uac1c\uc758 \ud2b9\ubcc4 \ud568\uc218\ub4e4\uc744 \ubaa8\ub450 \uc791\uc131\ud558\ub294 \uac83\uc740 \uc624\ub958\uc5d0 \ucde8\uc57d\ud560 \uc218 \uc788\ub2e4. \uc544\ub798 \uc608\uc2dc\uc758 \uc778\uc790 \ud0c0\uc785\uc5d0 \uc8fc\ubaa9\ud558\ub77c: class X { public : // ... virtual ~ X () = default ; // destructor (virtual if X is meant to be a base class) X ( const X & ) = default ; // copy constructor X & operator = ( const X & ) = default ; // copy assignment X ( X && ) = default ; // move constructor X & operator = ( X && ) = default ; // move assignment }; \uc2a4\ud3a0\ub9c1\uc744 \uc798\ubabb \uc801\uac70\ub098, const \ub97c \ube60\ub728\ub9ac\uac70\ub098, && \ub300\uc2e0 & \uc744 \uc0ac\uc6a9\ud558\uac70\ub098, \ud558\ub098\ub97c \ube60\ub728\ub9ac\ub294 \uac83 \uac19\uc740 \uc0ac\uc18c\ud55c \uc2e4\uc218\uac00 \uc624\ub958\ub098 \uacbd\uace0\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4. \uc774\ub7f0 (\uc9c0\ub8e8\ud55c \ucf54\ub4dc\ub85c \uc778\ud574 \ubc1c\uc0dd\ud558\ub294) \uc624\ub958\ub97c \ud53c\ud558\uace0\uc790 \ud55c\ub2e4\uba74 The rule of zero \ub97c \ub530\ub974\ub294 \uac83\uc744 \uad8c\ud55c\ub2e4. Enforcement (\uc26c\uc6c0) \ud074\ub798\uc2a4\ub294 \ud2b9\ubcc4\ud55c \ud568\uc218\ub4e4\uc5d0 \ub300\ud55c \uc120\uc5b8( =delete \ub3c4 \ud3ec\ud568\ud558\uc5ec)\uc744 \ubaa8\ub450 \uac16\uac70\ub098 \ud558\ub098\ub3c4 \uc5c6\uc5b4\uc57c \ud55c\ub2e4. C.22: \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc740 \uc11c\ub85c \uc870\ud654\ub86d\uac8c \ub3d9\uc791\ud574\uc57c \ud55c\ub2e4 Reason \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc740 \uac1c\ub150\uc801\uc73c\ub85c \uc798 \uc9dc\uc5ec\uc9c4 \uc9d1\ud569\uc774\ub2e4. \uc5f0\uc0b0\ub4e4\uc758 \uc758\ubbf8\ub294 \uc11c\ub85c \uc5f0\uad00\ub418\uc5b4 \uc788\ub2e4. \uc0ac\uc6a9\uc790\ub294 \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uacfc \ubcf5\uc0ac/\uc774\ub3d9 \ud560\ub2f9\uc774 \ub17c\ub9ac\uc801\uc73c\ub85c \ub3d9\uc77c\ud558\uace0, \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uac00 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc5d0 \ub300\ud574 \uc77c\uad00\uc801\uc73c\ub85c \ub3d9\uc791\ud558\uba70, \ubcf5\uc0ac\uc640 \uc774\ub3d9\uc774 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uac00 \ub3d9\uc791\ud558\ub294 \ubc29\uc2dd\uc744 \ubc18\uc601\ud55c\ub2e4\ub294 \uac83\uc744 \uae30\ub300 \ud560 \uac83\uc774\ub2e4. \ub9cc\uc57d \ubcf5\uc0ac\uc640 \uc774\ub3d9\uc774 \uc0dd\uc131\uacfc \uc18c\uba78\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud63c\ub780\uc744 \uc904 \uac83\uc774\ub2e4. Example, bad class Silly { // BAD: Inconsistent copy operations class Impl { // ... }; shared_ptr < Impl > p ; public : Silly ( const Silly & a ) : p { a . p } { * p = * a . p ; } // deep copy Silly & operator = ( const Silly & a ) { p = a . p ; } // shallow copy // ... }; \uc774 \uc5f0\uc0b0\ub4e4\uc740 \ubcf5\uc0ac \uc5f0\uc0b0\uc5d0 \ub300\ud55c \uc758\ubbf8\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub7f0 \ub3d9\uc791\uc740 \ud63c\ub780\uc744 \uc57c\uae30\ud558\uace0 \ubc84\uadf8\ub97c \ub9cc\ub4e4 \uac83\uc774\ub2e4. Enforcement (\uc5b4\ub824\uc6c0) \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790\uc640 \uc774\uc5d0 \ub300\uc751\ud558\ub294 \ubcf5\uc0ac/\uc774\ub3d9 \ud560\ub2f9 \uc5f0\uc0b0\uc790\ub294 \ub3d9\uc77c\ud55c \ub808\ubca8\uc5d0\uc11c \ub3d9\uc77c\ud55c \uba64\ubc84 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud558\ub294 \uac83\uc774 \uc88b\ub2e4 (\uc5b4\ub824\uc6c0) \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790\uc5d0\uc11c \ubcc0\uacbd\ud558\ub294 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc740 \ub2e4\ub978 \uc0dd\uc131\uc790\ub4e4\uc5d0\uc11c\ub3c4 \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc774 \uc88b\ub2e4 (\uc5b4\ub824\uc6c0) \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790\ub294 \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub300\ud574 \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc218\ud589\ud558\uace0 \ub098\uc11c, \uc18c\uba78\uc790\ub294 \uba64\ubc84 \ubcc0\uc218\ub97c \uc218\uc815\ud574\uc57c \ud55c\ub2e4 (\uc5b4\ub824\uc6c0) \uc18c\uba78\uc790\uac00 \uba64\ubc84 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud558\uba74, \uadf8 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc740 \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790 \ud639\uc740 \ud560\ub2f9 \uc5f0\uc0b0\uc790\uc5d0\uc11c \uc4f0\uc5ec\uc9c0\ub294 \uac83\uc774 \uc88b\ub2e4 C.dtor: \uc18c\uba78\uc790 \"\uc774 \ud074\ub798\uc2a4\uc5d0 \uc18c\uba78\uc790\uac00 \ud544\uc694\ud560\uae4c?\"\ub77c\ub294 \uac83\uc740 \uc124\uacc4 \uce21\uba74\uc5d0\uc11c \uad49\uc7a5\ud788 \uac15\ub825\ud55c \uc9c8\ubb38\uc774\ub2e4. \ub300\ubd80\ubd84\uc758 \ud074\ub798\uc2a4\ub4e4\uc5d0 \ub300\ud574\uc11c \ub300\ub2f5\uc740 \"no\"\uc778\ub370, \uadf8 \uc774\uc720\ub294 \ud574\ub2f9 \ud074\ub798\uc2a4\uac00 \uc790\uc6d0\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uac70\ub098 \uc18c\uba78\uacfc\uc815\uc774 The rule of zero \uc5d0 \uc758\ud574 \ucc98\ub9ac\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. \uc694\ucee8\ub300, \ud074\ub798\uc2a4\uc758 \uba64\ubc84\ub4e4\uc774 \uc2a4\uc2a4\ub85c\uc758 \uc18c\uba78\uc744 \uad00\ub9ac\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \ub300\ub2f5\uc774 \"yes\"\ub77c\uba74, \uadf8 \ud074\ub798\uc2a4 \uc124\uacc4\uc758 \ub300\ubd80\ubd84\uc740 The rule of five \ub97c \ub530\ub974\uac8c \ub41c\ub2e4. C.30: \uac1c\uccb4\uac00 \uc5c6\uc5b4\uc9c8 \ub54c, \uba85\uc2dc\uc801\uc778 \ub3d9\uc791\uc774 \ud544\uc694\ud560 \uacbd\uc6b0 \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c Reason \uc18c\uba78\uc790\ub294 \uc554\ubb35\uc801\uc73c\ub85c \uac1c\uccb4\uc758 \uc0dd\uba85\uc8fc\uae30\uc758 \ub9c8\uc9c0\ub9c9\uc5d0 \ud638\ucd9c\ub41c\ub2e4. \uae30\ubcf8 \uc18c\uba78\uc790\ub85c \ucda9\ubd84\ud558\ub2e4\uba74 \uadf8\uac83\uc744 \uc0ac\uc6a9\ud558\ub77c. \ub2e8\uc21c\ud558\uac8c \uba64\ubc84\uc758 \uc18c\uba78\uc790\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc774 \uc544\ub2cc \ucf54\ub4dc\uac00 \ud544\uc694\ud560 \uacbd\uc6b0 \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c. Example template < typename A > struct final_action { // slightly simplified A act ; final_action ( A a ) : act { a } {} ~ final_action () { act (); } }; template < typename A > final_action < A > finally ( A act ) // deduce action type { return final_action < A > { act }; } void test () { auto act = finally ([]{ cout << \"Exit test \\n \" ; }); // establish exit action // ... if ( something ) return ; // act done here // ... } // act done here final_action \uc758 \ubaa9\uc801\uc740 \uc18c\uba78\ud560 \ub54c \uc2e4\ud589\ud560 \ucf54\ub4dc(\ubcf4\ud1b5 \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc744 \uc4f4\ub2e4)\ub97c \uc5bb\ub294 \uac83\uc774\ub2e4. Note \uc0ac\uc6a9\uc790 \uc815\uc758 \uc18c\uba78\uc790\uac00 \ud544\uc694\ud55c \ud074\ub798\uc2a4\uc5d0\ub294 \ubcf4\ud1b5 \ub450 \uc885\ub958\uac00 \uc788\ub2e4: \ub9ac\uc18c\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \ud074\ub798\uc2a4\uac00 \uc18c\uba78\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0, \uc608\ucee8\ub300 vector \ud639\uc740 \ud2b8\ub79c\uc7ad\uc158 \ucf54\ub4dc \ud2b8\ub808\uc774\uc2f1\uc774\ub098 final_action \ucc98\ub7fc \uc18c\uba78\uc2dc\uae30\uc5d0 \uc5b4\ub5a4 \ub3d9\uc791\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc704\ud55c \ud074\ub798\uc2a4 Example, bad class Foo { // bad; use the default destructor public : // ... ~ Foo () { s = \"\" ; i = 0 ; vi . clear (); } // clean up private : string s ; int i ; vector < int > vi ; }; \uae30\ubcf8 \uc18c\uba78\uc790\uac00 \ub354 \uc798 \ub3d9\uc791\ud558\uace0, \ub354 \ud6a8\uacfc\uc801\uc774\uba70, \ud2c0\ub9ac\uc9c0 \uc54a\ub294\ub2e4. Note \uae30\ubcf8 \uc18c\uba78\uc790\uac00 \ud544\uc694\ud558\uc9c0\ub9cc, \uc0dd\uc131\ub418\uc9c0 \uc54a\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4\uba74 (\uc608, \uc774\ub3d9 \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud55c \uacbd\uc6b0), =default \ub97c \uc0ac\uc6a9\ud558\ub77c. Enforcement \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc640 \uac19\uc740 \"\uc554\ubb35\uc801\uc778 \uc790\uc6d0\"\uc774 \ub420 \uc218 \uc788\ub294 \uac83\ub4e4\uc744 \ucc3e\uc544\ubcf4\ub77c. \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\uac00 \uc18c\uba78\uc790\ub97c \uac16\uace0 \uc788\ub354\ub77c\ub3c4, \uc0ac\uc6a9\uc790 \uc9c0\uc815 \uc18c\uba78\uc790\uac00 \uc788\ub294 \ud074\ub798\uc2a4\ub4e4\uc744 \ucc3e\uc544\ubcf4\ub77c. C.31: \ud074\ub798\uc2a4\uac00 \ud68d\ub4dd\ud55c \ubaa8\ub4e0 \uc790\uc6d0\uc740 \uc18c\uba78\uc790\uc5d0\uc11c \ud574\uc81c\ub418\uc5b4\uc57c \ud55c\ub2e4 Reason \ub9ac\uc18c\uc2a4 \ub204\uc218\ub97c \ub9c9\ub294\ub2e4, \ud2b9\ud788 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uc0c1\ud669\uc5d0\uc11c \uadf8\ub807\ub2e4. Note \ud074\ub798\uc2a4\ub85c \ud45c\ud604\ub418\ub294 \ub9ac\uc18c\uc2a4\ub4e4\uc774 \uae30\ubcf8 \uc5f0\uc0b0 \uc9d1\ud569\uc744 \uac16\uace0 \uc788\uc744 \ub54c \uc18c\uba78\uc790\uc5d0\uc11c\uc758 \ub9ac\uc18c\uc2a4 \ud574\uc81c\uac00 \uc790\ub3d9\uc73c\ub85c \ubc1c\uc0dd\ud55c\ub2e4. Example class X { ifstream f ; // may own a file // ... no default operations defined or =deleted ... }; X \uc758 ifstream \uc740 X \uac00 \uc18c\uba78\ub420 \ub54c \ubb35\uc2dc\uc801\uc73c\ub85c \uc5f4\uc5c8\uc744 \uc218 \uc788\ub294 \ud30c\uc77c\uc744 \ub2eb\ub294\ub2e4. Example, bad class X2 { // bad FILE * f ; // may own a file // ... no default operations defined or =deleted ... }; X2 \uc5d0\uc11c\ub294 \ud30c\uc77c \ud578\ub4e4 \ub204\uc218\uac00 \uc0dd\uae38 \uac83\uc774\ub2e4. Note \ub2eb\uc9c0 \uc54a\uc740 \uc18c\ucf13\uc740 \uc5b4\ub5a8\uae4c? \uc18c\uba78\uc790, \ub2eb\uae30, \uc815\ub9ac \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uc88b\ub2e4 . \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \ubc1c\uc0dd\ud55c\ub2e4\uba74, \uc88b\uc740 \ud574\uacb0\ucc45\uc744 \ucc3e\uae30 \uc815\ub9d0 \ud798\ub4e0 \ubb38\uc81c\ub97c \ub9c8\uc8fc\uce5c \uac83\uc774\ub2e4. \ucd08\uc2ec\uc790\ub4e4\uc740 \uc18c\uba78\uc790\ub97c \uc791\uc131\ud560 \ub54c \uc65c \uc18c\uba78\uc790\uac00 \ud638\ucd9c\ub418\uace0, \uc608\uc678\ub97c \ub358\uc9d0\uc73c\ub85c\uc368 \"\ucc98\ub9ac\ub97c \uac70\ubd80\"\ub97c \ud560 \uc218 \uc5c6\ub294\uc9c0 \uc54c\uc9c0 \ubabb\ud560 \uac83\uc774\ub2e4. \uc774\uc5d0 \ub300\ud574\uc11c\ub294 \uc18c\uba78\uc790\ub294 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4(\ud1a0\ub860) \ub97c \ucc38\uace0\ud558\ub77c. \ubb38\uc81c\ub97c \uc545\ud654\uc2dc\ud0a4\ub294 \uac83\uc740, \ub9ce\uc740 \"\ub2eb\uae30/\ud574\uc81c\" \uc5f0\uc0b0\ub4e4\uc774 \uc7ac\uc2dc\ub3c4 \ud560 \uc218 \uc5c6\ub3c4\ub85d \ub418\uc5b4\uc788\ub294 \uac83\uc774\ub2e4. \uc774 \ubb38\uc81c\ub97c \ud480\ub824\ub294 \uc2dc\ub3c4\ub294 \ub9ce\uc558\uc9c0\ub9cc, \uc77c\ubc18\uc801\uc778 \ud574\uacb0\ucc45\uc740 \uc54c\ub824\uc9c0\uc9c0 \uc54a\uc558\ub2e4. \ud574\uacb0\ucc45\uc774 \uc5c6\ub2e4\uba74, \ub2eb\uae30/\ud574\uc81c\uc5d0 \ub300\ud55c \uc2e4\ud328\ub97c \ub514\uc790\uc778 \uc624\ub958\ub85c \uac04\uc8fc\ud558\uace0 \uc885\ub8cc\uc2dc\ud0a4\ub294 \uac83\uc744 \uace0\ub824\ud574 \ubcf4\ub77c. Note \ud074\ub798\uc2a4\uac00 \uc18c\uc720\ud558\uace0 \uc788\uc9c0 \uc54a\uc740 \uac1c\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \uac16\uace0 \uc788\uc744 \uc218 \uc788\ub2e4. \ub2f9\uc5f0\ud558\uc9c0\ub9cc, \uc774 \uac1c\uccb4\ub4e4\uc740 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\uc5d0\uc11c delete \ub418\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74: Preprocessor pp { /* ... */ }; Parser p { pp , /* ... */ }; Type_checker tc { p , /* ... */ }; p \ub294 pp \ub97c \ucc38\uc870\ud558\uc9c0\ub9cc, \uc18c\uc720\ud558\uace0 \uc788\uc9c0 \uc54a\ub2e4. Enforcement (\uc26c\uc6c0) \ud074\ub798\uc2a4\uac00 \uc18c\uc720\uc790\uc778 \ud3ec\uc778\ud130\ub098 \ucc38\uc870 \uba64\ubc84 \ubcc0\uc218\ub97c \uac16\uace0 \uc788\ub2e4\uba74 (\uac00\ub839, gsl::owner \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc18c\uc720\ud558\ub294 \uacbd\uc6b0), \uc18c\uba78\uc790\uc5d0\uc11c \ucc38\uc870\ub418\ub294 \uac83\uc774 \uc88b\ub2e4 (\uc5b4\ub824\uc6c0) \uc18c\uc720\uad8c\uc5d0 \ub300\ud574 \uba85\uc2dc\uc801\uc73c\ub85c \uae30\uc220\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0, \ud3ec\uc778\ud130\ub098 \ucc38\uc870 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc774 \uc18c\uc720\uc790 \uc778\uc9c0 \ud310\ub2e8\ud558\ub77c (\uc608, \uc0dd\uc131\uc790 \ubcf8\ubb38\uc744 \ud655\uc778\ud55c\ub2e4). C.32: \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130( T* )\ub098 \ucc38\uc870( T& )\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \ucc38\uc870 \ub300\uc0c1\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub294\uc9c0\ub97c \uace0\ub824\ud558\ub77c Reason \uc18c\uc720\uad8c\uc5d0 \ub300\ud574\uc11c \uc0c1\uc138\ud558\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub294 \ub9ce\uc774 \uc788\ub2e4. Example ??? Note T* \ud639\uc740 T& \uac00 \uc18c\uc720\ub97c \uc758\ubbf8\ud55c\ub2e4\uba74, \uc18c\uc720\ud55c\ub2e4\ub294 \ud45c\uc2dc\ub97c \ud558\ub77c. T* \uc5d0 \uc18c\uc720\uc758 \uc758\ubbf8\uac00 \uc5c6\ub2e4\uba74 ptr \ub85c \ud45c\uc2dc\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c. \uc774\uac83\uc740 \ubb38\uc11c\ud654\uc640 \ubd84\uc11d\uc5d0 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub2e4. Enforcement \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \ucd08\uae30\ud654 \ud560 \ub54c \uc790\uc6d0\ud560\ub2f9\uc774 \ubc1c\uc0dd\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub77c. C.33: \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130\ub85c \ub300\uc0c1\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub2e4\uba74, \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c Reason \uc18c\uc720\ub41c \uac1c\uccb4\ub294 \uadf8\uac83\uc744 \uc18c\uc720\ud55c \uac1c\uccb4\uac00 \uc18c\uba78\ub420 \ub54c delete \ub418\uc5b4\uc57c \ud55c\ub2e4. Example \ud3ec\uc778\ud130 \uba64\ubc84\ub294 \ub9ac\uc18c\uc2a4\uc77c \uac83\uc774\ub2e4. T* \ub294 \ub9ac\uc18c\uc2a4\uac00 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4 , \uc774\ub294 \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0\uc11c\ub294 \uc77c\ubc18\uc801\uc774\ub2e4. \uac00\ub2a5\ud55c T* \ub97c \uc18c\uc720\uc790\ub77c\uace0 \uace0\ub824\ud558\uace0, \uc758\uc2ec\ud574\ubcf4\ub77c. template < typename T > class Smart_ptr { T * p ; // BAD: *p \uc758 \uc18c\uc720\uac00 \ubd88\ubd84\uba85\ud558\ub2e4 // ... public : // ... \uc0ac\uc6a9\uc790\uac00 \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\uc558\ub2e4 ... }; void use ( Smart_ptr < int > p1 ) { // error: p2.p \uc5d0 \ub204\uc218\uac00 \ubc1c\uc0dd\ud55c\ub2e4. (nullptr\uac00 \uc544\ub2c8\uac70\ub098 \ub2e4\ub978 \ucf54\ub4dc\uc5d0\uc11c \uc18c\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74) auto p2 = p1 ; } \uc18c\uba78\uc790\ub97c \uc815\uc758 \ud55c\ub2e4\uba74, \ubaa8\ub4e0 \uae30\ubcf8 \uc5f0\uc0b0\ub4e4 \uc744 \uc815\uc758\ud558\uac70\ub098 \uc0ad\uc81c\ud574\uc57c \ud55c\ub2e4. template < typename T > class Smart_ptr2 { T * p ; // BAD: *p \uc758 \uc18c\uc720\uac00 \ubd88\ubd84\uba85\ud558\ub2e4 // ... public : // ... \uc0ac\uc6a9\uc790\uac00 \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\uc558\ub2e4 ... ~ Smart_ptr2 () { delete p ; } // p \uac00 \uc790\uc6d0\uc744 \uc18c\uc720\ud558\uace0 \uc788\uc5c8\ub2e4! }; void use ( Smart_ptr2 < int > p1 ) { auto p2 = p1 ; // error: delete\uac00 2\ubc88 \ud638\ucd9c\ub41c\ub2e4. } \uae30\ubcf8 \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \ub2e8\uc9c0 p1.p \ub97c p2.p \ub85c \ubcf5\uc0ac\ud558\uace0, p1.p \uac00 \ub450\ubc88 \uc18c\uba78\ub418\uac8c \ub9cc\ub4e4 \uac83\uc774\ub2e4. \uc18c\uc720\uad8c\uc744 \uba85\uc2dc\ud558\ub77c: template < typename T > class Smart_ptr3 { owner < T *> p ; // OK: \uba85\uc2dc\uc801\uc73c\ub85c *p \uc758 \uc18c\uc720\uad8c\uc744 \uac00\uc9c4\ub2e4. // ... public : // ... // ... \ubcf5\uc0ac\uc640 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4 ... ~ Smart_ptr3 () { delete p ; } }; void use ( Smart_ptr3 < int > p1 ) { auto p2 = p1 ; } Note \ubcf4\ud1b5 \uc18c\uba78\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uac00\uc7a5 \ub2e8\uc21c\ud55c \ubc29\ubc95\uc740 \ud3ec\uc778\ud130\ub97c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130(\uac00\ub839, std::unique_ptr )\ub85c \uad50\uccb4\ud558\uace0, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc801\uc808\ud55c \uc18c\uba78\uc790\ub97c \uc554\ubb35\uc801\uc73c\ub85c \ud638\ucd9c\ud558\uac8c \ub9cc\ub4e4\ub3c4\ub85d \ub194\ub450\ub294 \uac83\uc774\ub2e4. Note \uc18c\uc720\ud558\uace0 \uc788\ub294 \ubaa8\ub4e0 \ud3ec\uc778\ud130\ub97c \"\uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\"\ub85c \ubcc0\uacbd\ud558\ub294 \uac83\uc740 \uc5b4\ub5a4\uac00? \ub4dc\ubb3c\uac8c\ub294 \uc911\ub300\ud55c \ucf54\ub4dc \ubcc0\uacbd\uc774 \ud544\uc694\ud574\uc9c0\uace0 ABI \uc5d0 \uc601\ud5a5\uc744 \uc904 \uc218\ub3c4 \uc788\ub2e4. Enforcement \ud3ec\uc778\ud130 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uac16\ub294 \ud074\ub798\uc2a4\ub97c \uc758\uc2ec\ud558\ub77c owner<T> \ub97c \uac16\ub294 \ud074\ub798\uc2a4\ub294 \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc744 \uc815\uc758 \ud574\uc57c\ud55c\ub2e4 C.35: \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\ub294 \uacf5\uac1c\ub41c \uac00\uc0c1 \uc18c\uba78\uc790 \ud639\uc740 \uc0c1\uc18d\ub418\ub294 \ube44-\uac00\uc0c1 \ud568\uc218\uc5ec\uc57c \ud55c\ub2e4 Reason \ubbf8\uc815\uc758 \ub3d9\uc791(undefined behavior)\uc744 \ub9c9\uae30 \uc704\ud55c \uaddc\uce59\uc774\ub2e4. \ub9cc\uc57d \uc18c\uba78\uc790\uac00 public \uc774\uba74, \ud638\ucd9c\ud558\ub294 \ucf54\ub4dc\ub294 \ud30c\uc0dd \ud074\ub798\uc2a4\uac00 \uae30\ubcf8 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uc18c\uba78\ub420 \uac83\uc774\ub77c \uc0dd\uac01\ud55c\ub2e4. \uadf8\ub9ac\uace0 \uae30\ubcf8 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\uac00 virtual \uc774 \uc544\ub2c8\uba74 \uacb0\uacfc\ub294 \ubbf8\uc815\uc758 \ub3d9\uc791\uc73c\ub85c \uc774\uc5b4\uc9c4\ub2e4. \ub9cc\uc57d \uc18c\uba78\uc790\uac00 protected \ub77c\uba74, \ud638\ucd9c\ud558\ub294 \ucf54\ub4dc\ub294 \uae30\ubcf8 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574\uc11c \uc18c\uba78\uc2dc\ud0ac \uc218 \uc5c6\uace0, \ub530\ub77c\uc11c \uc18c\uba78\uc790\ub294 virtual \uc774 \uc544\ub2c8\uc5b4\ub3c4 \ubb38\uc81c\uac00 \uc5c6\ub2e4. private \uac00 \uc544\ub2cc protected \uc5ec\uc57c \ud558\ub294 \uc774\uc720\ub294 \ud30c\uc0dd \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\uac00 \ud638\ucd9c\ud560 \uc218 \uc788\uc5b4\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c, \uae30\ubcf8 \ud074\ub798\uc2a4\uc758 \uc791\uc131\uc790\ub294 \uc18c\uba78 \uacfc\uc815\uc5d0\uc11c \uc5b4\ub5a4 \ub3d9\uc791\uc774 \uc801\ud569\ud55c\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. Discussion \ud1a0\ub860 \uc744 \ud568\uaed8 \uc77d\uc5b4\ubcf4\ub77c. Example, bad struct Base { // BAD: virtual \uc18c\uba78\uc790\uac00 \uc5c6\ub2e4 virtual void f (); }; struct D : Base { string s { \"a resource needing cleanup\" }; ~ D () { /* ... \uc815\ub9ac \uc791\uc5c5\uc744 \ud55c\ub2e4 ... */ } // ... }; void use () { unique_ptr < Base > p = make_unique < D > (); // ... } // p \uc758 \uc18c\uba78\uc740 ~Base()\ub97c \ud638\ucd9c\ud558\uc9c0\ub9cc, ~D() \ub294 \ud638\ucd9c\ud558\uc9c0 \uc54a\ub294\ub2e4. // \ub530\ub77c\uc11c D::s \uc5d0 \ub204\uc218\uac00 \ubc1c\uc0dd\ud558\uace0, \ub2e4\ub978 \uc790\uc6d0\ub4e4\ub3c4 \ub204\uc218\ub420 \uac83\uc774\ub2e4. Note \uac00\uc0c1( virtual ) \ud568\uc218\ub294 \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0 \ub300\ud574 \uc2e0\uacbd\uc744 \uc4f0\uc9c0 \uc54a\uac8c \ub41c\ub2e4. \ub9cc\uc57d \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc18c\uba78\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \uadf8 \uacfc\uc815\uc740 \uc548\uc804\ud574\uc57c\ub9cc \ud55c\ub2e4. Note \uc18c\uba78\uc790\ub294 private\uc774 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d \uadf8\ub7f4 \uacbd\uc6b0 \ud574\ub2f9 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uac8c \ub420 \uac83\uc774\ub2e4: class X { ~ X (); // private \uc18c\uba78\uc790 // ... }; void use () { X a ; // error: \uc18c\uba78\uc2dc\ud0ac \uc218 \uc5c6\ub2e4 auto p = make_unique < X > (); // error: \uc18c\uba78\uc2dc\ud0ac \uc218 \uc5c6\ub2e4 } Exception protected virtual \uc18c\uba78\uc790\ub97c \uc6d0\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \uc0c1\uc0c1\ud574\ubcfc \uc218 \uc788\ub2e4. \ud30c\uc0dd \ud0c0\uc785\uc758 \uac1c\uccb4\uac00 \uae30\ubcf8 \ud0c0\uc785 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 (\uadf8 \uc790\uc2e0\uc774 \uc544\ub2cc) \ub2e4\ub978 \uac1c\uccb4\uc758 \uc18c\uba78\uc744 \ud558\ub3c4\ub85d \ud5c8\uc6a9\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uadf8\ub7ec\ud558\ub2e4. \ud558\uc9c0\ub9cc \uc544\uc9c1\uae4c\uc9c0 \uadf8\ub7f0 \uc0ac\ub840\ub97c \ubcfc \uc218 \uc5c6\uc5c8\ub2e4. Enforcement \uac00\uc0c1 \ud568\uc218\ub97c \ud558\ub098\ub77c\ub3c4 \uac00\uc9c0\ub294 \ud074\ub798\uc2a4\ub294 public \ud558\uace0 virtual \ud55c \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4. \ub610\ub294 protected \uc774\uace0 virtual \uc774 \uc544\ub2cc \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4. C.36: \uc18c\uba78\uc790\ub294 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 Reason \uc77c\ubc18\uc801\uc73c\ub85c \uc18c\uba78\uc790\uac00 \uc2e4\ud328\ud560 \ub54c \uc624\ub958 \uc5c6\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc744 \uc54c \uc218 \uc5c6\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \ub2e4\ub8e8\ub294 \ubaa8\ub4e0 \ud074\ub798\uc2a4\ub4e4\uc740 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294 \uc18c\uba78\uc790\ub97c \uc694\uad6c\ud55c\ub2e4. Example class X { public : ~ X () noexcept ; // ... }; X ::~ X () noexcept { // ... if ( cannot_release_a_resource ) terminate (); // ... } Note \uc18c\uba78\uc790\uc5d0\uc11c\uc758 \uc2e4\ud328\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 \uc2e4\ud328\ud560 \uc5fc\ub824\uac00 \uc5c6\ub294 \ubc29\ubc95(scheme)\uc744 \ub9ce\uc774 \uace0\uc548\ud574 \uc654\ub2e4. \uc774\uc5d0 \ub300\ud574\uc120 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uc131\uacf5\ud55c \uc608\uac00 \uc5c6\ub2e4. \uc774\uac83\uc740 \uc815\ub9d0 \ud604\uc2e4\uc801\uc778 \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\ub2e4: \uc608\ub97c \ub4e4\uba74, \ub2eb\uc9c0 \uc54a\uc740 \uc18c\ucf13\uc740 \uc5b4\ub5a4\uac00? \uc18c\uba78\uc790\ub97c \uc791\uc131\ud558\ub294 \uc0ac\ub78c\uc740 \uc65c \uc18c\uba78\uc790\uac00 \ud638\ucd9c\ub418\uace0 \uc608\uc678\ub97c \ub358\uc9d0\uc73c\ub85c\uc368 \"\ub3d9\uc791\uc744 \uac70\ubd80\ud558\ub294 \uac83\"\uc744 \ud560 \uc218 \uc5c6\ub294\uc9c0 \ubaa8\ub978\ub2e4. \ud1a0\ub860 \uc744 \ud568\uaed8\ubcf4\ub77c. \ubb38\uc81c\ub97c \uc545\ud654\uc2dc\ud0a4\ub294 \uac83\uc740, \ub9ce\uc740 \"close/release\" \uc5f0\uc0b0\uc774 \uc7ac\uc2dc\ub3c4\ud560 \uc218 \uc5c6\uac8c \ub418\uc5b4\uc788\ub294 \uac83\uc774\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74, close/failure\uc5d0 \ub300\ud55c \uc2e4\ud328\ub97c \uadfc\ubcf8\uc801\uc778 \ub514\uc790\uc778 \uc624\ub958\ub85c \uac04\uc8fc\ud558\uace0 \uc885\ub8cc\uc2dc\ucf1c\ub77c. Note \uc18c\uba78\uc790\ub97c noexcept \ub85c \uc120\uc5b8\ud558\ub77c. \uc774\uac83\uc740 \uc18c\uba78\uc790\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc644\ub8cc\ud588\uac70\ub098 \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc7a5\ud55c\ub2e4. Note \ub9cc\uc57d \uc790\uc6d0\uc774 \ud574\uc81c\ub420 \uc218 \uc5c6\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud328\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \uc5b4\ub5a4 \ubc29\ubc95\uc73c\ub85c\ub4e0 \uc2dc\uc2a4\ud15c\uc758 \ub098\uba38\uc9c0 \ubd80\ubd84\uc5d0\uc11c \uc2e4\ud328 \ud588\ub2e4\ub294 \uc2e0\ud638\ub97c \ubcf4\ub0b4\ub3c4\ub85d \ud558\ub77c. (\uc804\uc5ed \uc0c1\ud0dc \ubcc0\uc218\ub97c \uc218\uc815\ud558\uace0 \ud504\ub85c\uadf8\ub7a8\uc758 \ub2e4\ub978 \ubd80\ubd84\uc774 \uadf8\uac83\uc744 \ud655\uc778\ud558\uace0 \uc544\ub9c8\ub3c4 \ubb38\uc81c\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4) \uc774 \ubc29\uc2dd\uc740 \ud2b9\ubcc4\ud55c \ubaa9\uc801\uc774 \uc788\uace0, \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4\ub294 \uac83\uc744 \ucda9\ubd84\ud788 \uc774\ud574\ud558\ub77c. \uc608\uc2dc\ub85c \"\ub2eb\ud788\uc9c0 \uc54a\ub294 \uc5f0\uacb0\"\uc744 \uace0\ub824\ud574\ubcf4\uc790. \uc5b4\uca4c\uba74 \uc5f0\uacb0\uc758 \ubc18\ub300\ud3b8\uc5d0 \ubb38\uc81c\uac00 \uc788\uc744 \uc218 \uc788\uace0, \uc774\ub54c \uc591\ucabd\uc758 \uc5f0\uacb0\uc744 \ub2f4\ub2f9\ud558\ub294 \ucf54\ub4dc\ub9cc\uc774 \ubb38\uc81c\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub2e4. \uc18c\uba78\uc790\uac00 (\uc5b4\ub5a4 \ubc29\ubc95\uc73c\ub85c) \uc2dc\uc2a4\ud15c\uc758 \ub2f4\ub2f9(responsible) \ubd80\ubd84\uc5d0 \uba54\uc138\uc9c0\ub97c \ubcf4\ub0b4\uace0, \uc5f0\uacb0\uc774 \ub2eb\ud78c \uac83\uc73c\ub85c \uac04\uc8fc\ud55c \ub4a4, \uc815\uc0c1\uc801\uc73c\ub85c \ubc18\ud658\ud560 \uc218\ub3c4 \uc788\ub2e4. Note \uc18c\uba78\uc790\uac00 \uc2e4\ud328\ud560 \uc218\ub3c4 \uc788\ub294 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc608\uc678\ub97c \uc7a1\uc744 \uc218 \uc788\uace0, \uc5b4\ub5a4 \uacbd\uc6b0\uc5d0\ub294 \uc131\uacf5\uc801\uc73c\ub85c \uc644\ub8cc\ud560 \uc218 \uc788\ub2e4. (\uac00\ub839, \uc608\uc678\ub97c \ub358\uc9c4 \uba54\ucee4\ub2c8\uc998\uacfc\ub294 \ub2e4\ub978 \uc815\ub9ac(clean-up) \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4) Enforcement (\uc26c\uc6c0) \ub9cc\uc57d \uc608\uc678 \ubc1c\uc0dd\uc774 \uac00\ub2a5\ud558\uba74, \uc18c\uba78\uc790\ub294 noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4 C.37: \uc18c\uba78\uc790\ub97c noexcept \ub85c \uc791\uc131\ud558\ub77c Reason \uc18c\uba78\uc790\ub294 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 . \ub9cc\uc57d \uc18c\uba78\uc790\uac00 \uc608\uc678\ub85c \uc778\ud574 \uc885\ub8cc\ub418\ub824\uace0 \ud55c\ub2e4\uba74, \uc88b\uc9c0 \uc54a\uc740 \ub514\uc790\uc778 \uc624\ub958\ub85c \ubcf4\uace0 \uc885\ub8cc\ud558\ub294 \ud3b8\uc774 \ub098\uc744 \uac83\uc774\ub2e4. Note \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud558\uc600\uac74 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0dd\uc131\ud558\uc600\uac74 \ubaa8\ub4e0 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc758 \uc18c\uba78\uc790\uac00 noexcept \ub77c\uba74 \uc18c\uba78\uc790\ub294 \uc554\ubb35\uc801\uc73c\ub85c noexcept \uac00 \ub41c\ub2e4 (\ud568\uc218\uc758 \ucf54\ub4dc\uac00 \uc5b4\ub5bb\uac8c \uc791\uc131\ub418\uc5c8\ub294\uc9c0\ub294 \uace0\ub824\ub418\uc9c0 \uc54a\ub294\ub2e4). \uba85\uc2dc\uc801\uc73c\ub85c \uc18c\uba78\uc790\ub97c noexcept \ub85c \ud45c\uae30\ud568\uc73c\ub85c\uc368, \uadf8 \ucf54\ub4dc\uc758 \uc791\uc131\uc790\ub294 \ub098\uc911\uc5d0 \uba64\ubc84\uac00 \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub418\uba74\uc11c \uc18c\uba78\uc790\uac00 noexcept(false) \ub85c \ubcc0\ud558\ub294 \uac83\uc744 \ucc28\ub2e8\ud560 \uc218 \uc788\ub2e4. Example \ubaa8\ub4e0 \uc18c\uba78\uc790\uac00 noexcept \ub97c \uae30\ubcf8\uc73c\ub85c \ud558\uc9c0\ub294 \uc54a\ub294\ub2e4; \uc608\uc678\ub97c \ub358\uc9c0\ub294 \ud558\ub098\uc758 \uba64\ubc84\uac00 \ubaa8\ub4e0 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uc5d0 \uc601\ud5a5\uc744 \uc904 \uc218 \uc788\ub2e4. struct X { Details x ; // happens to have a throwing destructor // ... ~ X () { } // implicitly noexcept(false); aka can throw }; \ub9cc\uc57d \uc758\uc2ec\uc774 \uc0dd\uae34\ub2e4\uba74, \uc18c\uba78\uc790\ub294 noexcept \ub85c \uc120\uc5b8\ud558\ub77c. Note \uc18c\uba78\uc790\ub97c noexcept \ub85c \uc120\uc5b8\ud558\uc9c0 \uc54a\uc744 \uc774\uc720\uac00 \uc5c6\ub2e4. noexcept(false) \ub294 \ub9ce\uc740 \uacbd\uc6b0 -- \ud2b9\ud788 \ub2e8\uc21c\ud55c \ucf54\ub4dc\uc5d0\uc11c -- \ud63c\ub780\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. Enforcement (\uc26c\uc6c0) \uc18c\uba78\uc790\ub294 noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. C.ctor: \uc0dd\uc131\uc790 \uc0dd\uc131\uc790\ub294 \uac1c\uccb4\uac00 \uc0dd\uc131\ub418\ub294(\ucd08\uae30\ud654\ub418\ub294) \ubc29\ubc95\uc744 \uc815\uc758 \ud55c\ub2e4. C.40: \ud074\ub798\uc2a4\uac00 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\uba74 \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud558\ub77c Reason \uc0dd\uc131\uc790\uac00 \uc874\uc7ac\ud558\ub294 \uc774\uc720\ub2e4. Example class Date { // Date \ud074\ub798\uc2a4\ub294 \uc720\ud6a8\ud55c \ub0a0\uc9dc\ub97c \ud45c\ud604\ud55c\ub2e4 // \ubc94\uc704 : 1900\ub144 1\uc6d4 1\uc77c ~ 2100\ub144 12\uc6d4 31\uc77c Date ( int dd , int mm , int yy ) : d { dd }, m { mm }, y { yy } { if ( ! is_valid ( d , m , y )) throw Bad_date {}; // \ubd88\ubcc0\uc870\uac74\uc744 \uac15\uc81c\ud55c\ub2e4 } // ... private : int d , m , y ; }; \uc0dd\uc131\uc790\uc5d0\uc11c Ensures \ub85c \ubd88\ubcc0\uc870\uac74\uc744 \ud45c\ud604\ud558\ub294 \uac83\ub3c4 \uc88b\uc740 \uc0dd\uac01\uc774\ub2e4. Note \uc0dd\uc131\uc790\ub294 \ud074\ub798\uc2a4\uac00 \ubd88\ubcc0\uc870\uac74\uc774 \uc544\ub2c8\ub354\ub77c\ub3c4 \ud3b8\uc758\ub97c \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4: struct Rec { string s ; int i { 0 }; Rec ( const string & ss ) : s { ss } {} Rec ( int ii ) : i { ii } {} }; Rec r1 { 7 }; Rec r2 { \"Foo bar\" }; Note C++11 \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8 \uaddc\uce59\uc740 \ub9ce\uc740 \uc0dd\uc131\uc790\uc758 \ud544\uc694\uc131\uc744 \uc81c\uac70\ud55c\ub2e4: struct Rec2 { string s ; int i ; Rec2 ( const string & ss , int ii = 0 ) : s { ss }, i { ii } {} // redundant }; Rec2 r1 { \"Foo\" , 7 }; Rec2 r2 { \"Bar\" }; Rec2 \uc0dd\uc131\uc790\ub294 \uc911\ubcf5\uc801\uc774\ub2e4. \uadf8\ub9ac\uace0, int \uc5d0 \ub300\ud55c \uae30\ubcf8\uac12\uc740 member initializer \ub97c \uc0ac\uc6a9\ud558\ub294 \ud3b8\uc774 \ub0ab\ub2e4. See also: \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\ub77c \uc0dd\uc131\uc790\uac00 \ub358\uc9c0\ub294 \uc608\uc678 Enforcement \uc0ac\uc6a9\uc790 \uc815\uc758 \ubcf5\uc0ac \uc5f0\uc0b0\uc774 \uc788\uc9c0\ub9cc \uc18c\uba78\uc790\uac00 \uc5c6\ub294 \ud074\ub798\uc2a4\ub97c \uc9c0\uc801\ud55c\ub2e4 (\uc0ac\uc6a9\uc790 \uc815\uc758 \ubcf5\uc0ac\ub294 \ud074\ub798\uc2a4\uac00 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc900\ub2e4) C.41: \uc0dd\uc131\uc790\ub294 \uc644\uc804\ud788 \ucd08\uae30\ud654\ub41c \uac1c\uccb4\ub97c \uc0dd\uc131\ud574\uc57c \ud55c\ub2e4 Reason \uc0dd\uc131\uc790\ub294 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ubd88\ubcc0\uc870\uac74\uc744 \uc124\uc815\ud55c\ub2e4. \ud074\ub798\uc2a4 \uc0ac\uc6a9\uc790\ub294 \uc0dd\uc131\ub41c \uac1c\uccb4\uac00 \uc0ac\uc6a9\uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc744 \uac00\uc815\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4. Example, bad class X1 { FILE * f ; // \ub2e4\ub978 \ud568\uc218\uc5d0 \uc55e\uc11c init()\uc744 \ud638\ucd9c\ud55c\ub2e4 // ... public : X1 () {} void init (); // \uba64\ubc84 f \ucd08\uae30\ud654 void read (); // \uba64\ubc84 f \ub85c\ubd80\ud130 \uc77d\ub294\ub2e4 // ... }; void f () { X1 file ; file . read (); // crash \ub610\ub294 bad read \uac00 \ubc1c\uc0dd\ud55c\ub2e4. // ... file . init (); // \ucd08\uae30\ud654 \ud558\uae30\uc5d4 \ub108\ubb34 \ub2a6\uc5c8\ub2e4 // ... } \ucef4\ud30c\uc77c\ub7ec\ub294 \uc8fc\uc11d\uc744 \uc77d\uc9c0 \uc54a\ub294\ub2e4. Exception \uc0dd\uc131\uc790\ub9cc\uc73c\ub85c \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc5c6\ub2e4\uba74 \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c Enforcement (\ub2e8\uc21c) \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub294 \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uba64\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc57c \ud55c\ub2e4 (\uba85\uc2dc\uc801\uc778 \uc0dd\uc131\uc790 \uc704\uc784 \ud639\uc740 \uae30\ubcf8 \uc0dd\uc131\uc744 \ud1b5\ud574\uc11c) (\ubd88\ubd84\uba85\ud568) \ub9cc\uc57d \uc0dd\uc131\uc790\uac00 Ensures \uacc4\uc57d\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uc0dd\uc131 \ud6c4 \uc870\uac74\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub77c Note \uc0dd\uc131\uc790\uac00 \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \uc790\uc6d0\uc744 \uc5bb\ub294\ub2e4\uba74, \ub9ac\uc18c\uc2a4\ub294 \uc18c\uba78\uc790\uc5d0 \uc758\ud574 \ud574\uc81c \ub418\uc5b4\uc57c \ud55c\ub2e4. \uc0dd\uc131\uc790\uc5d0\uc11c \uc790\uc6d0\uc744 \uc5bb\uace0 \uc18c\uba78\uc790\uc5d0\uc11c \uc790\uc6d0\uc744 \ud574\uc81c\ud558\ub294 \uac83\uc744 RAII (\"Resource Acquisitions Is Initialization\") \ub77c\uace0 \ud55c\ub2e4. C.42: \uc0dd\uc131\uc790\uac00 \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uc9c0 \ubabb\ud55c\ub2e4\uba74, \uc608\uc678\ub97c \ub358\uc9c0\ub3c4\ub85d \ud558\ub77c Reason \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub97c \ub0a8\uaca8\ub450\ub294 \uac83\uc740 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac \uac83\uc774\ub2e4. Example class X2 { FILE * f ; // ... public : X2 ( const string & name ) : f { fopen ( name . c_str (), \"r\" )} { if ( ! f ) throw runtime_error { \"could not open\" + name }; // ... } void read (); // \uba64\ubc84 f \ub85c\ubd80\ud130 \uc77d\ub294\ub2e4 // ... }; void f () { X2 file { \"Zeno\" }; // file\uc774 \uc5f4\ub824\uc788\uc9c0 \uc54a\uc73c\uba74 \uc608\uc678\ub97c \ub358\uc9c4\ub2e4 file . read (); // \ubb38\uc81c \uc5c6\ub2e4 // ... } Example, bad class X3 { // bad: \uc0dd\uc131\uc790\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub97c \ub0a8\uaca8\ub193\uc744 \uc218 \uc788\ub2e4 FILE * f ; // call is_valid() before any other function bool valid ; // ... public : X3 ( const string & name ) : f { fopen ( name . c_str (), \"r\" )}, valid { false } { if ( f ) valid = true ; // ... } bool is_valid () { return valid ; } void read (); // \uba64\ubc84 f \ub85c\ubd80\ud130 \uc77d\ub294\ub2e4 // ... }; void f () { X3 file { \"Heraclides\" }; file . read (); // crash \ub610\ub294 bad read\uac00 \ubc1c\uc0dd\ud55c\ub2e4! // ... if ( file . is_valid ()) { file . read (); // ... } else { // ... \uc624\ub958\ub97c \ucc98\ub9ac\ud55c\ub2e4 ... } // ... } Note \ubcc0\uc218\ub97c \uc815\uc758\ud560 \ub54c\ub294 (\uac00\ub839, \uc2a4\ud0dd\uc5d0 \ud639\uc740 \ub2e4\ub978 \uac1c\uccb4\uc758 \uba64\ubc84\ub85c\uc368) \uc624\ub958\ucf54\ub4dc\uac00 \ub9ac\ud134\ub418\ub294 \uba85\uc2dc\uc801\uc778 \ud568\uc218 \ud638\ucd9c\uc740 \uc5c6\ub2e4. \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub97c \ub0a8\uaca8\ub450\uace0 \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \uc9c0\uc18d\uc801\uc73c\ub85c is_valid() \ud568\uc218\ub97c \ud638\ucd9c\ud574\uc57c \ud558\ub294 \uac83\uc740 \ubc88\uac70\ub86d\uace0, \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc26c\uc6b0\uba70, \ube44\ud6a8\uc728\uc801 \uc774\ub2e4. Exception (\ucd94\uac00\uc801\uc778 \ud234 \uc9c0\uc6d0 \uc5c6\uc774) \uc608\uc678 \ucc98\ub9ac\uac00 \uc608\uce21 \uac00\ub2a5\ud55c \uc2dc\uac04 \ub0b4\ub85c \uc218\ud589\ub418\uc5b4\uc57c \ud558\ub294 \uc2e4\uc2dc\uac04 \uc2dc\uc2a4\ud15c(\ube44\ud589\uae30 \uc81c\uc5b4\ub97c \uc0dd\uac01\ud574 \ubcf4\ub77c)\uacfc \uac19\uc740 \ubd84\uc57c\ub3c4 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d4 is_valid() \uc640 \uac19\uc740 \ubc29\ubc95\uc774 \ubc18\ub4dc\uc2dc \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \uc774\uc640 \uac19\uc740 \uacbd\uc6b0 RAII \ucc98\ub7fc \ub3d9\uc791\ud558\ub3c4\ub85d \ud558\uae30 \uc704\ud574 \uc9c0\uc18d\uc801\uc73c\ub85c is_valid() \ub85c \ud655\uc778\ud558\ub77c. Alternative \"\uc0dd\uc131\uc790 \uc774\ud6c4 \ucd08\uae30\ud654\" \ud639\uc740 \"\ub450 \ub2e8\uacc4 \ucd08\uae30\ud654\"\ub97c \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\ub2e4\uba74, \uadf8\ub807\uac8c \ud558\uc9c0 \uc54a\ub3c4\ub85d \ud574\ubcf4\ub77c. \uc815\ub9d0\ub85c \uadf8\ub807\uac8c \ud574\uc57c \ud55c\ub2e4\uba74 \ud329\ud1a0\ub9ac \ud568\uc218 \ub97c \uac80\ud1a0\ud558\ub77c. Note \uc0ac\ub78c\ub4e4\uc774 \uc0dd\uc131\uc790\uc5d0\uc11c \ucd08\uae30\ud654\ub97c \uc218\ud589\ud558\uc9c0 \uc54a\uace0 init() \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc628 \uc774\uc720 \uc911 \ud558\ub098\ub294 \ucf54\ub4dc\uc758 \uc911\ubcf5\uc744 \ub9c9\uae30 \uc704\ud568\uc774\uc5c8\ub2e4. \ub300\ub9ac \uc0dd\uc131\uc790 \uc640 \uae30\ubcf8 \uba64\ubc84 \ucd08\uae30\ud654 \uac00 \uc774\ub7f0 \uc791\uc5c5\uc744 \ub354 \uc798 \ud574\ub0bc \uc218 \uc788\ub2e4. \ub610 \ub2e4\ub978 \uc774\uc720\ub85c\ub294 \uac1c\uccb4\uac00 \ud544\uc694\ud560 \ub54c\uae4c\uc9c0 \ucd08\uae30\ud654\ub97c \uc9c0\uc5f0\uc2dc\ud0a4\ub294 \uac83\uc774\ub2e4; \uc774\ub7ec\ud55c \ud574\ubc95\uc740 \ubcf4\ud1b5 \ubcc0\uc218\uac00 \uc801\uc808\ud558\uac8c \ucd08\uae30\ud654\ub418\uae30 \uc804\uae4c\uc9c0\ub294 \ud574\ub2f9 \ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4 . Enforcement ??? C.43: \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud074\ub798\uc2a4(\uac12 \ud0c0\uc785)\ub294 \ubc18\ub4dc\uc2dc \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac16\ub3c4\ub85d \ud558\ub77c Reason \ub9ce\uc740 \uc5b8\uc5b4\ub098 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \uae30\ubcf8 \uc0dd\uc131\uc790\uc5d0 \uc758\uc874\ud558\uace0 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74, T a[10] \ub098 std::vector<T> v(10) \ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub4e4\uc774 \uac01 \uc694\uc18c\ub97c \ucd08\uae30\ud654 \ud55c\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ubcf4\ud1b5 \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud0c0\uc785\uc774 \uc801\ud569\ud55c \uc774\ub3d9 \ub41c \uc0c1\ud0dc\ub97c \uc815\uc758\ud558\uae30 \uc27d\ub3c4\ub85d \ud55c\ub2e4. Note \uac12 \ud0c0\uc785 \uc740 \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud0c0\uc785\uc744 \uc758\ubbf8\ud55c\ub2e4 (\ub9ce\uc740 \uacbd\uc6b0 \ubcf4\ud1b5 \ube44\uad50 \uac00\ub2a5\ud558\ub2e4). EoP \uc640 The Palo Alto TR \uc5d0\uc11c \ub098\uc628 \uc815\uaddc \ud0c0\uc785 \uac1c\ub150\uacfc \ubc00\uc811\ud55c \uad00\ub828\uc774 \uc788\ub2e4. Example class Date { // BAD: \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \uc5c6\ub2e4 public : Date ( int dd , int mm , int yyyy ); // ... }; vector < Date > vd1 ( 1000 ); // Date\uc758 \uae30\ubcf8 \uac12\uc774 \ud544\uc694\ud558\ub2e4 vector < Date > vd2 ( 1000 , Date { Month :: October , 7 , 1885 }); // \ub300\uc548 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ub2e4\ub978 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc0dd\uc131\uc790\uac00 \uc5c6\uc744 \ub54c\ub9cc \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c\ub2e4. \ub54c\ubb38\uc5d0 \uc774\ub7f0 \ucf54\ub4dc\uc640 \uac19\uc740 \uacbd\uc6b0\uc5d4 vd1 \uc744 \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. \uae30\ubcf8\uac12\uc774 \uc5c6\ub2e4\ub294 \uac83\uc740 \uc0ac\uc6a9\uc790\uc5d0\uac8c\ub294 \ub0a0\ubcbc\ub77d \uac19\uc740 \uc0c1\ud669\uc77c \uc218 \uc788\uc73c\uba70 \ud0c0\uc785\uc758 \uc0ac\uc6a9\uc744 \uc5b4\ub835\uac8c \ud55c\ub2e4. \ub54c\ubb38\uc5d0 \ud558\ub098\ub77c\ub3c4 \uc758\ubbf8\uc788\uac8c \uc815\uc758\ud560 \uc218 \uc788\ub2e4\uba74, \uc815\uc758\ub418\uc5b4\uc57c \ud55c\ub2e4. Date \ub97c \ubc14\ud0d5\uc73c\ub85c \uc0dd\uac01\ud574\ubcf4\uc790: \"\uc790\uc5f0\uc801\uc778\" \uae30\ubcf8 \ub0a0\uc9dc\ub77c\ub294 \uac83\uc740 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4 (\ube45\ubc45\uc740 \ub300\ubd80\ubd84\uc758 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \ub108\ubb34 \uc624\ub798 \uc804 \uc774\uc57c\uae30\ub2e4). \uadf8\ub7ec\ub2c8 \uc774 \uc608\uc2dc\ub294 \uc0ac\uc18c\ud55c \uace0\ubbfc\uc740 \uc544\ub2c8\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. {0, 0, 0} \ub294 \ub300\ubd80\ubd84\uc758 \ub2ec\ub825 \uccb4\uacc4\uc5d0\uc11c \uc720\ud6a8\ud55c \ub0a0\uc9dc\uac00 \uc544\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 \uc774 \uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubd80\ub3d9 \uc18c\uc218\uc810\uc5d0\uc11c NaN \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \uac19\ub2e4. \ud558\uc9c0\ub9cc, \ub300\ubd80\ubd84\uc758 \ud604\uc2e4\uc801\uc778 Date \ud074\ub798\uc2a4\ub294 \"\uccab\uc9f8 \ub0a0\" (\uac00\ub839. 1970\ub144 1\uc6d4 1\uc77c\uc774 \ub9ce\uc774 \uc4f0\uc778\ub2e4)\uc744 \uac16\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\uc744 \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc774\ub2e4. class Date { public : Date ( int dd , int mm , int yyyy ); Date () = default ; // [C.45: \uba64\ubc84\ub97c \ucd08\uae30\ud654 \ud558\uae30\ub9cc \ud558\ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c](#Rc-default) // ... private : int dd = 1 ; int mm = 1 ; int yyyy = 1970 ; // ... }; vector < Date > vd1 ( 1000 ); Note \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uba64\ubc84\ub4e4\uc774 \uae30\ubcf8 \uc0dd\uc131\uc790\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uc744 \uacbd\uc6b0 \ubb35\uc2dc\uc801\uc73c\ub85c \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c4\ub2e4: struct X { string s ; vector < int > v ; }; X x ; // means X{{}, {}}; that is the empty string and the empty vector \uae30\ubcf8(built-in) \ud0c0\uc785\ub4e4\uc740 \uc801\uc808\ud558\uac8c \uae30\ubcf8 \uc0dd\uc131(default construct)\ub418\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4: struct X { string s ; int i ; }; void f () { X x ; // x.s is initialized to the empty string; x.i is uninitialized cout << x . s << ' ' << x . i << '\\n' ; ++ x . i ; } \uc815\uc801\uc73c\ub85c \ud560\ub2f9\ub41c \ub0b4\uc7a5 \ud0c0\uc785 \uac1c\uccb4\ub4e4\uc740 0 \uc73c\ub85c \ucd08\uae30\ud654 \ub41c\ub2e4. \ud558\uc9c0\ub9cc \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc740 \uadf8\ub807\uc9c0 \uc54a\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uc758 \ucd5c\uc801\ud654 \ube4c\ub4dc\ub294 \ub0b4\uc7a5 \ud0c0\uc785 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c. \ub530\ub77c\uc11c, \uc704\uc758 \uc608\uc2dc\uc640 \uac19\uc740 \ucf54\ub4dc\uac00 \ub098\ud0c0\ub09c\ub2e4\uba74, \ubbf8\uc815\uc758 \ub3d9\uc791\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. \ucd08\uae30\ud654\ub97c \ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uba85\uc2dc\uc801 \uae30\ubcf8 \uc0dd\uc131\uc774 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub2e4: struct X { string s ; int i {}; // \uae30\ubcf8 \ucd08\uae30\ud654 (i\ub294 0 \uc774 \ub41c\ub2e4) }; Notes \uc801\uc808\ud55c \uae30\ubcf8 \uc0dd\uc131\uc744 \uac00\uc9c0\uc9c0 \uc54a\ub294 \ud074\ub798\uc2a4\ub4e4\uc740 \ubcf4\ud1b5 \ubcf5\uc0ac \ub610\ud55c \ubd88\uac00\ud558\ub2e4. \ub54c\ubb38\uc5d0 \uc774\ub7f0 \uacbd\uc6b0\ub294 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c \ub2e4\ub8e8\uc9c0 \uc54a\ub294\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc0c1\uc704 \ud074\ub798\uc2a4\uac00 \uac12 \ud0c0\uc785\uc774 \uc544\ub2c8\ub77c\uba74 (\uc0c1\uc704 \ud074\ub798\uc2a4\ub4e4\uc740 \ubcf5\uc0ac\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4) \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \ud544\uc218\uc801\uc774\uc9c0 \uc54a\ub2e4: // Shape is an abstract base class, not a copyable value type. // It may or may not need a default constructor. struct Shape { virtual void draw () = 0 ; virtual void rotate ( int ) = 0 ; // =delete copy/move functions // ... }; \ud638\ucd9c\uc790\uac00 \uc81c\uacf5\ud558\ub294 \uc790\uc6d0\uc744 \uc0dd\uc131 \uacfc\uc815\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\ub77c\uba74 \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c8 \uc218 \uc5c6\ub2e4. \uc774 \uacbd\uc6b0\ub3c4 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\ub294\ub370 \ubcf4\ud1b5 \uc774\ub7f0 \ud074\ub798\uc2a4\ub4e4\uc740 \ubcf5\uc0ac\uac00 \ubd88\uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4: // std::lock_guard is not a copyable value type. // It does not have a default constructor. lock_guard g { mx }; // guard the mutex mx lock_guard g2 ; // error: guarding nothing \ub2e4\ub978 \uc0c1\ud0dc\ub4e4\uacfc \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ub418\uc5b4\uc57c \ud558\ub294 \"\ud2b9\ubcc4\ud55c \uc0c1\ud0dc\"\ub97c \uac00\uc9c0\ub294 \ud074\ub798\uc2a4\ub4e4\uc740 \uc0ac\uc6a9\uc790\uac00 \ub354 \ub9ce\uc740 \uc791\uc5c5\uc744 \ud558\uac8c \ub9cc\ub4e0\ub2e4 (\uadf8 \ub54c\ubb38\uc5d0 \ub354 \ub9ce\uc740 \uc624\ub958\ub97c \ub9cc\ub4e4\uae30\ub3c4 \ud55c\ub2e4). \uadf8\ub7f0 \ud0c0\uc785\uc740 (\ubcf5\uc0ac\uc640 \ubb34\uad00\ud558\uac8c) \ud2b9\ubcc4\ud55c \uc0c1\ud0dc\ub97c \uae30\ubcf8 \uc0dd\uc131 \uc9c1\ud6c4\uc758 \uc0c1\ud0dc\ub85c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. // std::ofstream is not a copyable value type. // It does happen to have a default constructor // that goes along with a special \"not open\" state. ofstream out { \"Foobar\" }; // ... out << log ( time , transaction ); \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud2b9\ubcc4\ud55c \uc0c1\ud0dc\ub97c \uac00\uc9c4 \ud0c0\uc785\uc758 \uc608\uc2dc\ub85c\ub294, \ubcf5\uc0ac \uac00\ub2a5\ud55c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ub4e4 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c \uae30\ubcf8 \uc0dd\uc131 \uc0c1\ud0dc(\ud2b9\ubcc4\ud55c \uc0c1\ud0dc)\ub294 nullptr \ub97c \ub4e4\uace0\uc788\ub294 \uc0c1\ud0dc\uac00 \ub41c\ub2e4. \ud558\uc9c0\ub9cc, \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc9c0\uc6d0\ud558\uace0 \uc0dd\uc131 \ud6c4 \uc720\uc758\ubbf8\ud55c \uc0c1\ud0dc\ub97c \uac00\uc9c0\ub294 \uac83\uc774 \uad8c\uc7a5\ub41c\ub2e4. \uc774\ub7f0 \uc608\ub85c\ub294 std::string \uc774 \"\" \ub85c \ucd08\uae30\ud654\ub418\uac70\ub098, std::vector \uac00 \uacf5\ubc31\uc0c1\ud0dc( {} )\ub97c \uac00\uc9c0\ub294 \uac83\uc744 \ub4e4 \uc218 \uc788\ub2e4. Enforcement \ud074\ub798\uc2a4\uac00 \uae30\ubcf8 \uc0dd\uc131\uc790 \uc5c6\uc774 \ubcf5\uc0ac \uac00\ub2a5\ud55c \uacbd\uc6b0\ub97c \uc9c0\uc801\ud55c\ub2e4 \ud074\ub798\uc2a4\uac00 \ubcf5\uc0ac\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \ub3d9\ub4f1 \ube44\uad50( == )\uac00 \uac00\ub2a5\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4 C.44: \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uac00\ub2a5\ud55c \ub2e8\uc21c\ud558\uace0 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c Reason \uc2e4\ud328\ud560 \uc218 \uc788\ub294 \uc5f0\uc0b0\uc5c6\uc774 \"\uae30\ubcf8\"\uc801\uc778 \uac12\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc740 \uc624\ub958 \ucc98\ub9ac\ub97c \ub2e8\uc21c\ud654 \ud558\uace0, \uc774\ub3d9 \uc5f0\uc0b0\uc744 \ucd94\uce21 \ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. Example, problematic template < typename T > // elem\uc740 \uacf5\uac04\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub2e4 - new\ub97c \uc0ac\uc6a9\ud574 \uc6d0\uc18c\ub4e4\uc774 \ud560\ub2f9\ub41c\ub2e4. class Vector0 { public : Vector0 () : Vector0 { 0 } {} Vector0 ( int n ) : elem { new T [ n ]}, space { elem + n }, last { elem } {} // ... private : own < T *> elem ; T * space ; T * last ; }; \uc77c\ubc18\uc801\uc774\uc9c0\ub9cc, \uc624\ub958 \uc774\ud6c4 Vector0 \ub97c \uacf5\ubc31\uc73c\ub85c \ub9cc\ub4dc\ub294 \uac83\uc740 \ud560\ub2f9\uacfc \uad00\ub828\uc774 \uc788\uace0, \uc2e4\ud328\ud560 \uc218 \uc788\ub2e4. \ub610, \uae30\ubcf8 Vector \ub97c { new T[0], 0, 0} \uc73c\ub85c \ud45c\ud604\ud558\ub294 \uac83 \uc5ed\uc2dc \ub0ad\ube44\ucc98\ub7fc \ubcf4\uc778\ub2e4 \uc608\ub97c \ub4e4\uba74, Vector0<int> v(100) \uc740 100 \ub9cc\ud07c \ud560\ub2f9\ud558\ub294 \ube44\uc6a9\uc774 \ub4e0\ub2e4. Example template < typename T > // elem\uc740 nullptr\uc774\uac70\ub098, new\ub97c \uc0ac\uc6a9\ud574 \ud560\ub2f9\ub41c \uacf5\uac04\uc744 \uac00\ub9ac\ud0a8\ub2e4. class Vector1 { public : // {nullptr, nullptr, nullptr}\uacfc \ub3d9\uc77c\ud558\ub2e4. \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4. Vector1 () noexcept {} Vector1 ( int n ) : elem { new T [ n ]}, space { elem + n }, last { elem } {} // ... private : own < T *> elem = nullptr ; T * space = nullptr ; T * last = nullptr ; }; {nullptr, nullptr, nullptr} \ub294 Vector1{} \ub97c \ub9cc\ub4dc\ub294 \ube44\uc6a9\uc744 \uc904\uc5ec\uc900\ub2e4(cheap). \ud558\uc9c0\ub9cc \uc774\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc774\uace0 \uc2e4\ud589\uc2dc\uac04 \ud3c9\uac00\uac00 \ud544\uc694\ud558\ub2e4. \uc624\ub958\ub97c \ubc1c\uacac\ud558\uace0 Vector1 \ub97c \ube44\uc6b0\ub294 \uac83\uc740 \uac04\ub2e8\ud558\ub2e4. Enforcement \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc9c0\uc801\ud55c\ub2e4 C.45: \uba64\ubc84\ub97c \ucd08\uae30\ud654 \ud558\uae30\ub9cc \ud558\ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c; \ub300\uc2e0 \uba64\ubc84\ub4e4\uc774 \uc2a4\uc2a4\ub85c \ucd08\uae30\ud654 \ud558\ub3c4\ub85d \ud558\ub77c Reason \uba64\ubc84\ub4e4\uc5d0\uac8c \ucd08\uae30\ud654\ub97c \uc704\uc784\ud558\uba74, \ucef4\ud30c\uc77c\ub7ec\uac00 \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud55c\ub2e4. \ub354 \ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4. Example, bad class X1 { // BAD: \uba64\ubc84 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4 string s ; int i ; public : X1 () : s { \"default\" }, i { 1 } { } // ... }; Example class X2 { string s = \"default\" ; int i = 1 ; public : // \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0dd\uc131\ud55c \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud55c\ub2e4. // ... }; Enforcement (\uc26c\uc6c0) \uba85\uc2dc\uc801\uc778 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ucd08\uae30\ud654 \uc774\uc678\uc758 \ub3d9\uc791\uc744 \ud574\uc57c\ud560 \ub54c \uc4f0\ub294 \uac83\uc774 \uc88b\ub2e4. C.46: \ub2e8\uc77c \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uc0dd\uc131\uc790\ub294 explicit \uc73c\ub85c \uc120\uc5b8\ud558\ub77c Reason \uc758\ub3c4\uce58 \uc54a\uc740 \ubcc0\ud658\uc744 \ud53c\ud55c\ub2e4. Example, bad class String { // ... public : String ( int ); // BAD // ... }; String s = 10 ; // \ub180\ub78d\uac8c\ub3c4... \uae38\uc774\uac00 10\uc778 \ubb38\uc790\uc5f4\uc774 \ub41c\ub2e4 Exception \uc0dd\uc131 \uc778\uc790 \ud0c0\uc785\uc73c\ub85c\ubd80\ud130\uc758 \ubb35\uc2dc\uc801\uc778 \ubcc0\ud658\uc744 \ud5c8\uc6a9\ud55c\ub2e4\uba74 explicit \uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4: class Complex { // ... public : Complex ( double d ); // OK: we want a conversion from d to {d, 0} // ... }; Complex z = 10.7 ; // \uc804\ud600 \uc5b4\uc0c9\ud558\uc9c0 \uc54a\ub2e4 See also Discussion of implicit conversions Note \ubcf5\uc0ac\uc640 \uc774\ub3d9 \uc0dd\uc131\uc790\ub294 \ubcc0\ud658(conversion)\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 explicit \uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4. \uba85\uc2dc\uc801 \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790\ub294 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uac70\ub098 \ubc18\ud658\ud558\ub294 \uac83\uc744 \uc5b4\ub835\uac8c \ud55c\ub2e4. Enforcement (\uc26c\uc6c0) \ub2e8\uc77c \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uc0dd\uc131\uc790\ub294 explicit \uc73c\ub85c \uc120\uc5b8\ud558\ub3c4\ub85d \ud55c\ub2e4. explicit \uc774 \uc544\ub2c8\uba74\uc11c \uc88b\uc740 \uc0dd\uc131\uc790\ub294 \ub4dc\ubb3c\ub2e4. \ubaa8\ubc94 \uc0ac\ub840\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. C.47: \uba64\ubc84 \ubcc0\uc218\ub4e4\uc740 \uc120\uc5b8\ub41c \uc21c\uc11c\ub300\ub85c \ucd08\uae30\ud654\ud558\ub77c Reason \ud63c\ub780\uacfc \uc624\ub958\ub97c \ucd5c\uc18c\ud654\ud55c\ub2e4. \uc21c\uc11c\ub300\ub85c \uc9c4\ud589\ud558\ub294 \uac83\uc774 \ucd08\uae30\ud654\uc758 \ubc29\uc2dd\uc774\ub2e4. (\uba64\ubc84 \ubcc0\uc218 \ucd08\uae30\ud654\uc640\ub294 \ubb34\uad00\ud558\ub2e4). Example, bad class Foo { int m1 ; int m2 ; public : Foo ( int x ) : m2 { x }, m1 { ++ x } { } // BAD: misleading initializer order // ... }; Foo x ( 1 ); // surprise: x.m1 == x.m2 == 2 Enforcement (\ub2e8\uc21c) \uba64\ubc84 \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8\ub294 \uc120\uc5b8\uacfc \uac19\uc740 \uc21c\uc11c\ub85c \uc9c4\ud589\ub418\uc5b4\uc57c \ud55c\ub2e4. See also Discussion C.48: \uc0c1\uc218 \ucd08\uae30\ud654\ub294 \uac00\ub2a5\ud55c \ud074\ub798\uc2a4 \ub0b4(in-class) \uba64\ubc84 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uac19\uc740 \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub420 \uac83\uc774\ub77c\uace0 \uba85\uc2dc\uc801\uc73c\ub85c \ubcf4\uc5ec\uc900\ub2e4. \uc911\ubcf5\uc801\uc73c\ub85c \uc791\uc131\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4. \uc720\uc9c0\ubcf4\uc218 \ubb38\uc81c\ub294 \uc5c6\uc564\ub2e4. \uc9e7\uace0 \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc\uac00 \ub41c\ub2e4. Example, bad class X { // BAD int i ; string s ; int j ; public : X () : i { 666 }, s { \"qqq\" } { } // j is uninitialized X ( int ii ) : i { ii } {} // s is \"\" and j is uninitialized // ... }; \ucf54\ub4dc\ub97c \uc720\uc9c0\ubcf4\uc218\ud558\ub294 \uc0ac\ub78c\uc774 j \uac00 \uc758\ub3c4\uc801\uc73c\ub85c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4 (\uaf64 \uc774\uc0c1\ud55c \uc0dd\uac01\uc774\uc9c0\ub9cc). \ub610 \uc5b4\ub5a4 \uc758\ub3c4\ub85c s \uc758 \uae30\ubcf8\uac12\uc73c\ub85c \"\" \uc640 qqq \ub97c \uc0ac\uc6a9\ud558\ub294\uc9c0 \uc54c \uc218 \uc788\uc744\uae4c? j \uc640 \uac19\uc774 \uba64\ubc84 \ucd08\uae30\ud654\uac00 \uc0dd\ub7b5\ub418\ub294 \ubb38\uc81c\ub294 \uc774\ubbf8 \uc788\ub294 \ud074\ub798\uc2a4\uc5d0 \uc0c8\ub85c\uc6b4 \uba64\ubc84\uac00 \ucd94\uac00\ub420 \ub54c \ubc1c\uc0dd\ud55c\ub2e4. Example class X2 { int i { 666 }; string s { \"qqq\" }; int j { 0 }; public : X2 () = default ; // all members are initialized to their defaults X2 ( int ii ) : i { ii } {} // s and j initialized to their defaults // ... }; Alternative \uc0dd\uc131\uc790\uc5d0 \uae30\ubcf8 \uc778\uc790\ub97c \uc8fc\ub294 \uac83\uc744 \uc0dd\uac01\ud574\ubcfc \uc218 \uc788\ub2e4. \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0\uc120 \uaf64 \ud754\ud55c \ubc29\ubc95\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc774\ub294 \uba85\uc2dc\uc801\uc774\uc9c0 \uc54a\uace0, \ub354 \ub9ce\uc740 \uc778\uc790\uac00 \uc804\ub2ec\ub418\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uc0dd\uc131\uc790\uac00 \uc5ec\ub7ff\uc778 \uacbd\uc6b0, \uae30\ubcf8 \uc778\uc790 \ucf54\ub4dc\ub97c \ubc18\ubcf5\uc801\uc73c\ub85c \uc791\uc131\ud574\uc57c \ud55c\ub2e4: class X3 { // BAD: inexplicit, argument passing overhead int i ; string s ; int j ; public : X3 ( int ii = 666 , const string & ss = \"qqq\" , int jj = 0 ) : i { ii }, s { ss }, j { jj } { } // all members are initialized to their defaults // ... }; Enforcement (\uc26c\uc6c0) \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub294 \ubaa8\ub4e0 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc57c \ud55c\ub2e4 (\uba85\uc2dc\uc801\uc73c\ub85c\ub4e0, \uc0dd\uc131\uc790 \uc704\uc784\uc774\ub4e0, \uae30\ubcf8 \uc0dd\uc131\uc774\ub4e0) (\uc26c\uc6c0) \uc0dd\uc131\uc790\uc758 \uae30\ubcf8\uc778\uc790\ub294 \ud074\ub798\uc2a4 \ub0b4 \ucd08\uae30\ud654\uac00 \uc801\ud569\ud560 \uc218 \uc788\ub2e4 C.49: \uc0dd\uc131\uc790 \uc548\uc5d0\uc11c\uc758 \ub300\uc785 \ubcf4\ub2e4\ub294 \ucd08\uae30\ud654\ub97c \uc120\ud638\ud558\ub77c Reason \ucd08\uae30\ud654\ub294 \ub300\uc785 \ubcf4\ub2e4 \uae54\ub054\ud558\uace0 \uc544\ub984\ub2f5\uac8c \uc218\ud589\ub420 \uc218 \uc788\ub2e4. \uac12\uc744 \uc124\uc815\ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub294 \uc624\ub958(\"use before set\")\ub97c \uc608\ubc29\ud55c\ub2e4. Example, good class A { // Good string s1 ; public : A () : s1 { \"Hello, \" } { } // GOOD: directly construct // ... }; Example, bad class B { // BAD string s1 ; public : B () { s1 = \"Hello, \" ; } // BAD: default constructor followed by assignment // ... }; class C { // UGLY, aka very bad int * p ; public : C () { cout << * p ; p = new int { 10 }; } // accidental use before initialized // ... }; Example, better still \ud568\uc218\uc5d0 \ubb38\uc790\uc5f4 \uc778\uc218\ub97c \uc81c\uc2dc\ud558\ub294 \ubcf4\ub2e4 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95 )\uc73c\ub85c, const char* \ub300\uc2e0\uc5d0 'gsl::string_span' \ub610\ub294 'std::string_view'(C++17)\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. class D { // Good string s1; public: A(string_view v) : s1{v} { } // GOOD: directly construct // ... }; C.50: \ucd08\uae30\ud654 \uacfc\uc815\uc5d0\uc11c virtual \ub3d9\uc791\uc774 \ud544\uc694\ud558\ub2e4\uba74, \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uc0c1\ud0dc\uac00 \ud558\uc704 \uac1c\uccb4\uc5d0 \uc758\ud574 \uacb0\uc815\ub41c\ub2e4\uba74, \ubd88\uc644\uc804\ud558\uac8c \uc0dd\uc131\ub41c \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud560 \uac00\ub2a5\uc131\uc744 \ucd5c\uc18c\ud654 \ud558\uba74\uc11c \uac00\uc0c1 \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Note \ud329\ud1a0\ub9ac \ud568\uc218\uc758 \ubc18\ud658 \ud0c0\uc785\uc740 \ubcf4\ud1b5 unique_ptr \uac00 \uc801\uc808\ud558\ub2e4; \ub9cc\uc57d \uacf5\uc720\ub418\uc5b4\uc57c \ud55c\ub2e4\uba74, \ud568\uc218\ub97c \ud638\ucd9c\ud55c \ucabd\uc5d0\uc11c unique_ptr \ub97c shared_ptr \ub85c \uc774\ub3d9\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ub2e4\ub974\uac8c\ub294, \ud329\ud1a0\ub9ac \ud568\uc218\uc758 \uc791\uc131\uc790\uac00 \ubc18\ud658 \uac1c\uccb4\uac00 \ud56d\uc0c1 \uacf5\uc720\ub41c\ub2e4\ub294 \uac83\uc744 \uc54c\uace0\uc788\ub2e4\uba74, make_shared \ub97c \uc0ac\uc6a9\ud574\uc11c shared_ptr \ub97c \ubc18\ud658\ud558\uace0 \ud560\ub2f9\uc744 \uc904\uc77c \uc218 \uc788\ub2e4. Example, bad class B { public : B () { // ... f (); // BAD: virtual call in constructor // ... } virtual void f () = 0 ; // ... }; Example class B { protected : B () { /* ... */ } // create an imperfectly initialized object virtual void PostInitialize () // to be called right after construction { // ... f (); // GOOD: virtual dispatch is safe // ... } public : virtual void f () = 0 ; template < class T > static shared_ptr < T > Create () // interface for creating shared objects { auto p = make_shared < T > (); p -> PostInitialize (); return p ; } }; class D : public B { /* ... */ }; // some derived class shared_ptr < D > p = D :: Create < D > (); // creating a D object \uc0dd\uc131\uc790\ub97c protected \ub85c \ub9cc\ub4e6\uc73c\ub85c\uc368, \uac1c\uccb4\uac00 \ubd88\uc644\uc804\ud558\uac8c \uc0dd\uc131\ub41c \ud6c4 \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uc5d0 \ub178\ucd9c\ub418\ub294 \uac83\uc744 \ub9c9\uc744 \uc218 \uc788\ub2e4. \ud329\ud1a0\ub9ac \ud568\uc218 Create() \ub97c \uc9c0\uc6d0\ud558\uba74 (\uc790\uc720 \uc800\uc7a5\uc18c \uc601\uc5ed\uc5d0) \uac1c\uccb4 \uc0dd\uc131\uc744 \uc880 \ub354 \uc27d\uac8c\ud560 \uc218 \uc788\ub2e4. Note \uc804\ud1b5\uc801\uc778 \ud329\ud1a0\ub9ac \ud568\uc218\ub4e4\uc740 \uc2a4\ud0dd\uc774\ub098 \uc778\uc811 \uac1c\uccb4\ubcf4\ub2e4\ub294 \uc790\uc720 \uc800\uc7a5\uc18c\uc5d0 \uc0dd\uc131\ud55c\ub2e4. See also Discussion C.51: \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub4e4\uc744 \uc704\ud55c \uc77c\ubc18\uc801\uc778 \ub3d9\uc791\uc744 \ud45c\ud604\ud560 \ub54c\ub294 \ub300\ub9ac \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ucf54\ub4dc \uc911\ubcf5\uacfc \uc2e4\uc218\uc5d0 \uc758\ud55c \ucf54\ub4dc \ucc28\uc774\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. Example, bad class Date { // BAD: repetitive int d ; Month m ; int y ; public : Date ( int ii , Month mm , year yy ) : i { ii }, m { mm }, y { yy } { if ( ! valid ( i , m , y )) throw Bad_date {}; } Date ( int ii , Month mm ) : i { ii }, m { mm } y { current_year ()} { if ( ! valid ( i , m , y )) throw Bad_date {}; } // ... }; \ub611\uac19\uc740 \ub3d9\uc791\uc744 \uc791\uc131\ud558\ub294 \uac83\uc740 \uc9c0\ub8e8\ud558\uace0 \uc2e4\uc218\ub85c \uc778\ud574 \ub611\uac19\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4. Example class Date2 { int d ; Month m ; int y ; public : Date2 ( int ii , Month mm , year yy ) : i { ii }, m { mm }, y { yy } { if ( ! valid ( i , m , y )) throw Bad_date {}; } Date2 ( int ii , Month mm ) : Date2 { ii , mm , current_year ()} {} // ... }; See also \ub9cc\uc57d \"\ubc18\ubcf5\ub41c \ub3d9\uc791\"\uc774 \ub2e8\uc21c\ud55c \ucd08\uae30\ud654\ub77c\uba74, \ud074\ub798\uc2a4 \ub0b4 \uba64\ubc84 \ucd08\uae30\ud654 \ub97c \uace0\ub824\ud558\ub77c. Enforcement (\uc911\uac04) \uc720\uc0ac\ud55c \uc0dd\uc131\uc790 \uad6c\ud604(Body)\uc744 \ucc3e\ub294\ub2e4 C.52: \ucd94\uac00\uc801\uc778 \ucd08\uae30\ud654\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \ud30c\uc0dd\ub41c \ud074\ub798\uc2a4\uc5d0\uc11c \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \uc0c1\uc18d \uc0dd\uc131\uc790\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc744 \uc704\ud55c \uc0dd\uc131\uc790\uac00 \ud544\uc694\ud558\ub2e4\uba74, \uc0dd\uc131\uc790\ub97c \ub2e4\uc2dc \uad6c\ud604\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc740 \uc9c0\ub8e8\ud558\uace0 \uc624\ub958\uc758 \uc18c\uc9c0\uac00 \ub9ce\ub2e4. Example std::vector \ub294 \uad49\uc7a5\ud788 \ub9ce\uc740 \uc0dd\uc131\uc790\ub97c \uc9c0\uc6d0\ud55c\ub2e4. \ub54c\ubb38\uc5d0 \uc790\uc2e0\ub9cc\uc758 vector \ub97c \ub9cc\ub4e4\uace0\uc790 \ud55c\ub2e4\uba74, \uadf8 \ub9ce\uc740 \uc0dd\uc131\uc790\ub97c \ub2e4\uc2dc \uc791\uc131\ud558\uace0 \uc2f6\uc9c0\ub294 \uc54a\uc744 \uac83\uc774\ub2e4: class Rec { // ... data and lots of nice constructors ... }; class Oper : public Rec { using Rec :: Rec ; // ... no data members ... // ... lots of nice utility functions ... }; Example, bad struct Rec2 : public Rec { int x ; using Rec :: Rec ; }; Rec2 r { \"foo\" , 7 }; int val = r . x ; // uninitialized Enforcement \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uba64\ubc84\ub4e4\uc774 \ucd08\uae30\ud654\ub418\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4 C.copy: \ubcf5\uc0ac(Copy)\uc640 \uc774\ub3d9(Move) \uac12 \ud0c0\uc785\ub4e4\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ubcf5\uc0ac \uac00\ub2a5\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \ud074\ub798\uc2a4 \uacc4\uce35\uc5d0\uc11c\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc740 \uadf8\ub807\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4. \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc758 \uacbd\uc6b0, \ubcf5\uc0ac\uac00 \uac00\ub2a5\ud560 \uc218\ub3c4, \uadf8\ub807\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4. \ud0c0\uc785\ub4e4\uc740 \ub17c\ub9ac\uc801\uc778 \ub610\ub294 \uc131\ub2a5 \uc0c1\uc758 \uc774\uc720\ub85c \uc774\ub3d9\ud558\ub3c4\ub85d \uc815\uc758\ub420 \uc218 \uc788\ub2e4. C.60: \ubcf5\uc0ac\uc5f0\uc0b0\uc744 virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c. \ub9e4\uac1c\ubcc0\uc218\ub294 const& \ub85c \ubc1b\uace0, const& \ub85c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c Reason \uc774\ub807\uac8c \ud558\ub294 \uac83\uc774 \uac04\ub2e8\ud558\uace0 \ud6a8\uc728\uc801\uc774\ub2e4. r-value\ub97c \uc704\ud574 \ucd5c\uc801\ud654\ud558\uae38 \uc6d0\ud55c\ub2e4\uba74, && \ub97c \ubc1b\ub294 \ub300\uc785 \uc5f0\uc0b0\uc744 \uc624\ubc84\ub85c\ub4dc\ud558\uc5ec \uc81c\uacf5\ud558\ub77c. ( F.18 \ub97c \ubcf4\ub77c) Example class Foo { public : Foo & operator = ( const Foo & x ) { // GOOD: \uc790\uae30\ub300\uc785 \uac80\uc0ac\ub97c \ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. (\uc131\ub2a5\uc740 \uc5b4\ucc0c\ub418\uc5c8\ub4e0) auto tmp = x ; std :: swap ( * this , tmp ); return * this ; } // ... }; Foo a ; Foo b ; Foo f (); a = b ; // l-value \ub300\uc785 : \ubcf5\uc0ac a = f (); // r-value \ub300\uc785 : \uc774\ub3d9\uc77c\uc218\ub3c4 \uc788\ub2e4 Note swap \ud568\uc218\uc758 \uad6c\ud604\uc740 \uac15\ud55c \uc608\uc678 \uc548\uc804\uc131 \ubcf4\uc7a5 \uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4. Example \ud558\uc9c0\ub9cc \ub9cc\uc57d \uc784\uc2dc \uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uc9c0 \uc54a\uc74c\uc73c\ub85c\uc368 \ud6e8\uc52c \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4\uba74 \uc5b4\ub5a8\uae4c? \ud06c\uace0 \uac19\uc740 \ud06c\uae30\uc758 Vector \ub4e4\uc758 \ub300\uc785\uc774 \ube48\ubc88\ud55c \uc601\uc5ed\uc744 \uc704\ud55c \uac04\ub2e8\ud55c Vector \ub97c \uc0dd\uac01\ud574\ubcf4\ub77c. \uc774 \uacbd\uc6b0, swap \uad6c\ud604 \uae30\ubc95\uc5d0 \uc758\ud55c \uc6d0\uc18c\ub4e4\uc758 \uc0ac\ubcf8\uc740 \uc0c1\ub2f9\ud55c \ube44\uc6a9 \uc99d\uac00\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4: template < typename T > class Vector { public : Vector & operator = ( const Vector & ); // ... private : T * elem ; int sz ; }; Vector & Vector :: operator = ( const Vector & a ) { if ( a . sz > sz ) { // ... swap\ud568\uc218 \uae30\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub7ec\uba74 \ucd5c\uc0c1\uc758 \uad6c\ud604\uc774 \ub41c\ub2e4 ... return * this } // ... copy sz elements from *a.elem to elem ... if ( a . sz < sz ) { // ... *a.elem\uc73c\ub85c\ubd80\ud130 elem\uc73c\ub85c sz\ub9cc\ud07c \uc6d0\uc18c\ub4e4\uc744 \ubcf5\uc0ac\ud55c\ub2e4 ... } return * this ; } \ub300\uc0c1 \uc6d0\uc18c\ub4e4\uc5d0 \uc9c1\uc811 \uc4f0\uae30 \uc5f0\uc0b0\uc744 \ud568\uc73c\ub85c\uc368, swap \uae30\ubc95\uc774 \uc81c\uacf5\ud558\ub294 \uac15\ud55c \uc608\uc678 \ubcf4\uc7a5 \ub300\uc2e0 \uae30\ubcf8\uc801\uc778 \uc608\uc678 \ubcf4\uc7a5 \ub9cc \uc5bb\uac8c \ub420 \uac83\uc774\ub2e4. \uc790\uae30 \ub300\uc785 \uc5d0 \uc8fc\uc758\ud558\ub77c. Alternatives \ub9cc\uc57d virtual \ub300\uc785 \uc5f0\uc0b0\uc790\uac00 \ud544\uc694\ud558\ub2e4\uace0 \uc0dd\uac01\ud55c\ub2e4\uba74, \uadf8\ub9ac\uace0 \uadf8\uac83\uc774 \uc5b4\uc9f8\uc11c \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub294\uc9c0 \uc774\ud574\ud55c\ub2e4\uba74, \uadf8 \ud568\uc218\ub294 operator= \ub77c\uace0 \ubd80\ub974\uc9c0 \ub9c8\ub77c. \uc774\ub984\uc744 \ubd80\uc5ec\ud574\uc11c virtual void assign(const Foo&) \ub85c \ub9cc\ub4e4\uc5b4\ub77c. \ubcf5\uc0ac \uc0dd\uc131 vs. clone() \ub97c \ucc38\uc870\ud558\ub77c. Enforcement (\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 \uac00\uc0c1\ud568\uc218\uc5ec\uc11c\ub294 \uc548\ub41c\ub2e4. \ub4dc\ub798\uace4\ub4e4\ub9cc\ud07c \uc704\ud5d8\ud558\ub2e4! (\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 T& \ub97c \ubc18\ud658\ud558\uba74 \uc548\ub41c\ub2e4. \uc5f0\uc1c4\uc801\uc778 \ud638\ucd9c\uc744 \uc704\ud574\uc120, \ucee8\ud14c\uc774\ub108\ub85c\uc758 \uac1c\uccb4 \ub300\uc785\uacfc \ucf54\ub4dc \uc791\uc131\uc744 \ubc29\ud574\ud558\ub294 const T& \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c. (\uc911\uac04) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 (\uc554\uc2dc\uc801\uc73c\ub85c\ub098 \uba85\uc2dc\uc801\uc73c\ub85c\ub098) \ubaa8\ub4e0 \uae30\ubcf8 \ud074\ub798\uc2a4\uc640 \uba64\ubc84\ub4e4\uc758 \ub300\uc785 \uc5f0\uc0b0\uc790\ub97c \ud638\ucd9c\ud574\uc57c \ud55c\ub2e4. \ud574\ub2f9 \ud0c0\uc785\uc774 \ud3ec\uc778\ud130 \ubb38\ub9e5\uc774\ub098 \uac12 \ubb38\ub9e5\uc744 \uac00\uc9c0\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574 \uc18c\uba78\uc790\ub97c \ud655\uc778\ud558\ub77c. C.61: \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \ubcf5\uc0ac\ub97c \uc218\ud589\ud574\uc57c \ud55c\ub2e4 Reason \uc77c\ubc18\uc801\uc73c\ub85c \uadf8\ub807\uac8c \ud560 \uac83\uc774\ub77c \uc0dd\uac01\ud55c\ub2e4. x = y \uac00 \uc218\ud589\ub41c \ud6c4\uc5d0\ub294, x == y \uc778 \uacb0\uacfc\ub97c \uac00\uc838\uc57c \ud55c\ub2e4. \ubcf5\uc0ac \ud6c4\uc5d0\ub294 x \uc640 y \uac00 \ub3c5\ub9bd\uc801\uc778 \uac1c\uccb4\ub4e4\uc77c \uc218 \uc788\ub2e4. (\uac12 \uc758\ubbf8\uad6c\uc870, \ube44-\ud3ec\uc778\ud130 \uae30\ubcf8 \ud0c0\uc785\ub4e4\uacfc \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud0c0\uc785\ub4e4\uc758 \ub3d9\uc791\ud558\ub294 \ubc29\uc2dd) \ub610\ub294 \uacf5\uc720\ub41c \uac1c\uccb4\ub97c \ucc38\uc870\ud55c\ub2e4(\ud3ec\uc778\ud130 \uc758\ubbf8\uad6c\uc870, \ud3ec\uc778\ud130\ub4e4\uc774 \ub3d9\uc791\ud558\ub294 \ubc29\uc2dd). Example class X { // OK: value semantics public : X (); X ( const X & ); // copy X void modify (); // change the value of X // ... ~ X () { delete [] p ; } private : T * p ; int sz ; }; bool operator == ( const X & a , const X & b ) { return a . sz == b . sz && equal ( a . p , a . p + a . sz , b . p , b . p + b . sz ); } X :: X ( const X & a ) : p { new T [ a . sz ]}, sz { a . sz } { copy ( a . p , a . p + sz , p ); } X x ; X y = x ; if ( x != y ) throw Bad {}; x . modify (); if ( x == y ) throw Bad {}; // assume value semantics Example class X2 { // OK: pointer semantics public : X2 (); X2 ( const X2 & ) = default ; // shallow copy ~ X2 () = default ; void modify (); // change the pointed-to value // ... private : T * p ; int sz ; }; bool operator == ( const X2 & a , const X2 & b ) { return a . sz == b . sz && a . p == b . p ; } X2 x ; X2 y = x ; if ( x != y ) throw Bad {}; x . modify (); if ( x != y ) throw Bad {}; // assume pointer semantics Note \"\uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\"\ub97c \ub9cc\ub4e4\uace0 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ubcf5\uc0ac \uc758\ubbf8\uad6c\uc870\uc744 \uc120\ud638\ud558\ub77c. \uac12 \uc758\ubbf8\uad6c\uc870\uc740 \uac00\uc7a5 \uac04\ub2e8\ud558\uba70, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uae30\ub2a5\ub4e4\uc774 \uae30\ub300\ud558\ub294 \uac83\uc774\ub2e4. Enforcement (\ud2b9\ubcc4\ud788 \uc5c6\uc74c) C.62: \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uac8c \uc791\uc131\ud558\ub77c Reason x = x \uc758 \uc218\ud589\uc774 x \uc758 \uac12\uc744 \ubc14\uafbc\ub2e4\uba74, \uc0ac\ub78c\ub4e4\uc740 \ub180\ub784 \uac83\uc774\uba70 \uc548\uc88b\uc740 \uc5d0\ub7ec\ub4e4\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4 (\uc885\uc885 \uc790\uc6d0 \ub204\uc218\ub97c \ud3ec\ud568\ud558\uae30\ub3c4 \ud55c\ub2e4). Example \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\ud14c\uc774\ub108\ub4e4\uc740 \uc790\uae30 \ub300\uc785\uc744 \uc6b0\uc544\ud558\uace0 \ud6a8\uc728\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \ucc98\ub9ac\ud55c\ub2e4. std :: vector < int > v = { 3 , 1 , 4 , 1 , 5 , 9 }; v = v ; // the value of v is still {3, 1, 4, 1, 5, 9} Note \uba64\ubc84\ub4e4\ub85c\ubd80\ud130 \uc0dd\uc131\ub41c \uae30\ubcf8 \ub300\uc785 \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\ub2e4. struct Bar { vector < pair < int , int >> v ; map < string , int > m ; string s ; }; Bar b ; // ... b = b ; // \uc815\ud655\ud558\uace0, \ud6a8\uc728\uc801\uc774\ub2e4 Note \uc790\uae30 \ub300\uc785\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uac80\uc0ac\ud568\uc73c\ub85c\uc368 \ucc98\ub9ac\ud560 \uc218\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc885\uc885 \uadf8\ub7f0 \uac80\uc0ac \uc5c6\uc774\ub3c4 \uc6b0\uc544\ud558\uace0 \ube60\ub974\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4 (\uac00\ub839, swap \uc0ac\uc6a9\ubc95 ). class Foo { string s ; int i ; public : Foo & operator = ( const Foo & a ); // ... }; Foo & Foo :: operator = ( const Foo & a ) // OK, but there is a cost { if ( this == & a ) return * this ; s = a . s ; i = a . i ; return * this ; } \uc774 \ubc29\ubc95\uc740 \ubd84\uba85 \uc548\uc804\ud558\uace0 \ud6a8\uc728\uc801\uc774\ub2e4. \ud558\uc9c0\ub9cc, \ub9cc\uc57d \ubc31\ub9cc\ubc88 \ub9c8\ub2e4 \ud55c\ubc88\uc529 \uc790\uae30 \ub300\uc785\uc744 \ud55c\ub2e4\uba74 \uc5b4\ub5bb\uaca0\ub294\uac00? \uadf8 \ub9d0\uc740 \ubc31\ub9cc\ubc88\uc774\ub098 \uc7a5\ud669\ud55c \uac80\uc0ac\ub97c\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uacfc \uac19\ub2e4 (\ud558\uc9c0\ub9cc \uc790\uae30 \ub300\uc785\uc758 \uacb0\uacfc\ub294 \ubc18\ub4dc\uc2dc \uc790\uc2e0\uacfc \uac19\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0, \ucef4\ud4e8\ud130\uc758 \ubd84\uae30 \uc608\uce21\uc740 \ub9e4\ubc88 \ub9de\uc544\ub5a8\uc5b4\uc9c8 \uac83\uc774\ub2e4.) \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc0dd\uac01\ud574\ubcfc \uc218 \uc788\ub2e4: Foo & Foo :: operator = ( const Foo & a ) // \uac04\ub2e8\ud558\uace0, \uc544\ub9c8\ub3c4 \ud6e8\uc52c \ub098\uc744 \uac83\uc774\ub2e4. { s = a . s ; i = a . i ; return * this ; } std::string \uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uace0, int \uc5ed\uc2dc \uc548\uc804\ud558\ub2e4. (\ud76c\uc18c\ud558\uac8c \ubc1c\uc0dd\ud558\ub294) \uc790\uae30 \ub300\uc785\uc5d0 \ub300\ud574\uc11c\ub9cc \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud558\uac8c \ub41c\ub2e4. Enforcement (\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub4e4\uc740 if (this == &a) return *this; \uc640 \uac19\uc740 \ud328\ud134\uc774 \uc788\uc5b4\uc120 \uc548\ub41c\ub2e4. C.63: \uc774\ub3d9 \uc5f0\uc0b0\uc740 virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c, \ub9e4\uac1c\ubcc0\uc218\ub294 && \ub97c \uc0ac\uc6a9\ud558\uace0, const& \ub85c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c Reason \uac04\ub2e8\ud558\uace0, \ud6a8\uc728\uc801\uc774\ub2e4. See also \ubcf5\uc0ac \ub300\uc785\uc744 \uc704\ud55c \uaddc\uce59\ub4e4 Enforcement \ubcf5\uc0ac \ub300\uc785 \uc5d0\uc11c\uc640 \ub3d9\uc77c\ud558\ub2e4. (\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 \uac00\uc0c1 \ud568\uc218\uc5ec\uc11c\ub294 \uc548\ub41c\ub2e4. \ub4dc\ub798\uace4\ub4e4\ub9cc\ud07c \uc704\ud5d8\ud558\ub2e4! (\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 T& \ub97c \ubc18\ud658\ud558\uba74 \uc548\ub41c\ub2e4. \uc5f0\uc1c4\uc801\uc778 \ud638\ucd9c\uc744 \uc704\ud574\uc120, \ucee8\ud14c\uc774\ub108\ub85c\uc758 \uac1c\uccb4 \ub300\uc785\uacfc \ucf54\ub4dc \uc791\uc131\uc744 \ubc29\ud574\ud558\ub294 const T& \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c (\uc911\uac04) \uc774\ub3d9 \uc5f0\uc0b0\uc790\ub294 (\uc554\uc2dc\uc801\uc73c\ub85c\ub098 \uba85\uc2dc\uc801\uc73c\ub85c\ub098) \ubaa8\ub4e0 \uae30\ubcf8 \ud074\ub798\uc2a4\uc640 \uba64\ubc84\ub4e4\uc758 \uc774\ub3d9 \uc5f0\uc0b0\uc790\ub97c \ud638\ucd9c\ud574\uc57c \ud55c\ub2e4 C.64: \uc774\ub3d9 \uc5f0\uc0b0\uc740 \uc774\ub3d9\uc744 \uc218\ud589\ud574\uc57c \ud558\uba70, \uc6d0\ubcf8 \uac1c\uccb4\ub97c \uc720\ud6a8\ud55c \uc0c1\ud0dc\ub85c \ub0a8\uaca8\ub193\uc544\uc57c \ud55c\ub2e4 Reason \uc77c\ubc18\uc801\uc73c\ub85c \uae30\ub300\ud558\ub294 \uc758\ubbf8\uad6c\uc870(semantics)\uc774\ub2e4. x = std::move(y) \ub97c \uc218\ud589\ud55c \ud6c4\uc5d0\ub294, x \uc758 \uac12\uc740 y \uc5ec\uc57c \ud558\uba70, y \ub294 \uc720\ud6a8\ud55c \uc0c1\ud0dc\uc5ec\uc57c \ud55c\ub2e4. Example template < typename T > class X { // OK: value semantics public : X (); X ( X && a ) noexcept ; // X\ub97c \uc774\ub3d9\ud55c\ub2e4 void modify (); // X\uc758 \uac12\uc744 \ubcc0\uacbd\ud55c\ub2e4 // ... ~ X () { delete [] p ; } private : T * p ; int sz ; }; X :: X ( X && a ) : p { a . p }, sz { a . sz } // \uac12\uc744 \uac00\uc838\uac04\ub2e4 { a . p = nullptr ; // empty \uc0c1\ud0dc\uac00 \ub41c\ub2e4 a . sz = 0 ; } void use () { X x {}; // ... X y = std :: move ( x ); x = X {}; // OK } // OK: x \ub294 \uc18c\uba78 \uac00\ub2a5\ud558\ub2e4 Note \uc774\uc0c1\uc801\uc73c\ub85c\ub294, \uc774\ub3d9\uc5f0\uc0b0\uc744 \ud574\uc900 \uac1c\uccb4\ub294 \ud574\ub2f9 \ud0c0\uc785\uc758 \uae30\ubcf8 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub294\ud55c \uae30\ubcf8 \uac12\uc744 \uac00\uc9c0\ub3c4\ub85d \ud655\uc2e4\ud788 \ud558\ub77c. \ud558\uc9c0\ub9cc, \ubaa8\ub4e0 \ud0c0\uc785\ub4e4\uc774 \uae30\ubcf8 \uac12\uc744 \uac00\uc9c0\ub294 \uac83\uc740 \uc544\ub2c8\uba70, \ub610 \uc77c\ubd80 \ud0c0\uc785\ub4e4\uc5d0\uc11c\ub294 \uae30\ubcf8 \uac12\uc744 \ub9cc\ub4dc\ub294 \uac83\uc774 \ube44\uc2fc \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud560 \uc218\ub3c4 \uc788\ub2e4. \ud45c\uc900\uc5d0\uc11c \uc694\uad6c\ud558\ub294 \uac83\uc740, \uc774\ub3d9\uc5f0\uc0b0\uc744 \ud574\uc900 \uac1c\uccb4\uac00 \ud30c\uad34\ub420 \uc218 \uc788\ub2e4\ub294 \uac83 \ubfd0\uc774\ub2e4. \uc885\uc885, \uc27d\uace0 \ube44\uc6a9\uc774 \ub4e4\uc9c0 \uc54a\ub294 \ubc29\ubc95\uc744 \uc4f8\uc218\ub3c4 \uc788\ub2e4: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uac1c\uccb4\ub85c\ubd80\ud130 \uc774\ub3d9\uc744 \ubc1b\uc744 \uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \uc774\ub3d9\uc744 \ud574\uc8fc\ub294 \uac1c\uccb4\ub294 \uc720\ud6a8\ud55c \uc0c1\ud0dc\ub85c (\ud544\uc694\ud558\ub2e4\uba74 \uba85\uc2dc\ud558\uc5ec) \ub0a8\uaca8\ub193\uc544\ub77c. Note \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc801\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud560 \uc608\uc678\uc801\uc778 \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub294 \ud55c, x = std::move(y); y = z; \ub97c \uc0ac\uc6a9\ud558\ub77c. \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\uad6c\uc870\uc5d0 \ubd80\ud569\ud55c\ub2e4. Enforcement (\uc790\uc720\uc120\ud0dd) \uc774\ub3d9 \uc5f0\uc0b0\uc5d0\uc11c \uba64\ubc84\ub4e4\uc758 \ub300\uc785\uc744 \ud655\uc778\ud574\ubcf4\ub77c. \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \uc788\ub2e4\uba74, \uadf8 \ub300\uc785 \uc5f0\uc0b0\ub4e4\uc744 \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud55c \ucd08\uae30\ud654\uc640 \ube44\uad50\ud574\ubcf4\ub77c. C.65: \uc774\ub3d9 \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uac8c \uc791\uc131\ud558\ub77c Reason \ub9cc\uc57d x = x \uac00 x \uc758 \uac12\uc744 \ubc14\uafbc\ub2e4\uba74, \uc0ac\ub78c\ub4e4\uc740 \ub180\ub784 \uac83\uc774\uace0 \uc548\uc88b\uc740 \uc5d0\ub7ec\ub4e4\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \uc0ac\ub78c\ub4e4\uc740 \uc8fc\ub85c \uc790\uae30 \ub300\uc785\uc744 \uc774\ub3d9\uc5f0\uc0b0\uc73c\ub85c \uc791\uc131\ud558\uc9c0 \uc54a\uc9c0\ub9cc, \uadf8\ub7f4 \uc218\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, std::swap \uc740 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\ub85c \uad6c\ud604\ub418\uc5c8\uace0 \ub9cc\uc57d \ub2f9\uc2e0\uc774 \uc6b0\uc5f0\ud788 a \uc640 b \uac00 \uac19\uc740 \uac1c\uccb4\ub97c \ucc38\uc870\ud558\ub294 \uc0c1\ud669\uc5d0\uc11c swap(a, b) \ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc790\uae30-\uc774\ub3d9\uc758 \uc2e4\ud328\ub294 \uc2ec\uac01\ud558\uac70\ub098 \ucc3e\uae30 \uc5b4\ub824\uc6b4(subtle) \uc5d0\ub7ec\uac00 \ub420 \uc218 \uc788\ub2e4. Example class Foo { string s ; int i ; public : Foo & operator = ( Foo && a ); // ... }; Foo & Foo :: operator = ( Foo && a ) noexcept // OK, \ud558\uc9c0\ub9cc \ube44\uc6a9\uc774 \ub4e0\ub2e4 { if ( this == & a ) return * this ; // \uc774 \ub77c\uc778\uc740 \ubb34\uc758\ubbf8\ud558\ub2e4 s = std :: move ( a . s ); i = a . i ; return * this ; } \ubc31\ub9cc\ubc88\uc5d0 \ud55c\ubc88 \ubc1c\uc0dd\ud558\ub294 if (this == &a) return *this; \uc5d0 \ub300\ud55c \ub17c\uc7c1\uc774 \uc788\ub2e4. \uc790\uae30 \ub300\uc785 \ud56d\ubaa9\uc5d0\uc11c\uc758 \ub17c\uc758\ub294 \uc790\uae30 \uc774\ub3d9\uacfc \ub354 \uad00\ub828\uc774 \uc788\ub2e4. Note if (this == &a) return *this; \uc744 \uc4f0\uc9c0 \uc54a\ub294 \ubc29\ubc95\uc740 \uc54c\ub824\uc9c4 \uac83\uc774 \uc5c6\ub2e4. \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc5d0\uc11c \uac80\uc0ac\ub97c \uc218\ud589\ud558\uace0 \uc815\ud655\ud55c \uacb0\uacfc\ub97c \uc5bb\uc73c\ub77c.(\uac00\ub839, x=x \ub97c \uc218\ud589\ud55c \ub4a4\uc5d0 x \uac00 \ubcc0\ud654\ud558\uc9c0 \uc54a\ub294\ub2e4.) Note ISO \ud45c\uc900\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\ud14c\uc774\ub108\ub4e4\uc5d0 \ub300\ud574 \uc624\uc9c1 \"\uc720\ud6a8\ud558\uc9c0\ub9cc \uba85\uc2dc\ub418\uc9c0\ub294 \uc54a\uc740\" \uc0c1\ud0dc\ub9cc\uc744 \ubcf4\uc7a5\ud55c\ub2e4. \uc774\uac83\uc740 10\uc5ec\ub144\uac04\uc758 \uc2e4\ud5d8\uc801\uc778 \uc0ac\uc6a9\uc774\ub098 \uc0c1\uc6a9 \ud658\uacbd\uc5d0\uc11c \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc558\ub2e4. \ub9cc\uc57d \ubc18\ub840\ub97c \ucc3e\uac8c \ub41c\ub2e4\uba74 \uc791\uc131\uc790\uc5d0\uac8c \uc5f0\ub77d\ud558\ub77c. \uc774 \uaddc\uce59\uc740 \uc8fc\uc758\ub97c \ud544\uc694\ub85c \ud558\uba70 \uc644\uc804\ud788 \uc548\uc804\ud574\uc57c \ud55c\ub2e4. Example \uc544\ub798\ub294 \uac80\uc0ac \uc5c6\uc774 \ud3ec\uc778\ud130\ub97c \uc774\ub3d9\ud558\ub294 \ubc29\ubc95\uc774\ub2e4(\ub9c8\uce58 \uc774\ub3d9 \ub300\uc785\uc744 \uad6c\ud604\ud55c \ucf54\ub4dc\ub77c\uace0 \uc0c1\uc0c1\ud574\ubcf4\ub77c.): // move from other.ptr to this->ptr T * temp = other . ptr ; other . ptr = nullptr ; delete ptr ; ptr = temp ; Enforcement (\uc911\uac04) \uc774\ub7ec\ud55c \uc790\uae30 \ub300\uc785\uc758 \uacbd\uc6b0, \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 \ub300\uc785 \ubc1b\ub294 \uac1c\uccb4\uc758 \ud3ec\uc778\ud130 \uba64\ubc84\ub97c delete \ub41c \uc0c1\ud0dc \ub610\ub294 nullptr \ub85c \ub0a8\uaca8\ub193\uc544\uc11c\ub294 \uc548\ub41c\ub2e4. (\uc790\uc720\uc120\ud0dd) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\ud14c\uc774\ub108\ub4e4\uc758 \uc0ac\uc6a9\ubc95\uc744 \ubcf4\ub77c( string \uc744 \ud3ec\ud568\ud55c\ub2e4). \uadf8\ub9ac\uace0 \uc77c\ubc18\uc801\uc778(\uac1c\uccb4 \uc218\uba85\uc5d0 \ubbfc\uac10\ud558\uc9c0 \uc54a\uc740) \uc0ac\uc6a9\uc5d0 \uadf8 \ucee8\ud14c\uc774\ub108\ub4e4\uc774 \uc548\uc804\ud558\ub2e4\uace0 \uc0dd\uac01\ud558\ub77c. C.66: \uc774\ub3d9 \uc5f0\uc0b0\uc740 noexcept \ub85c \ub9cc\ub4e4\uc5b4\ub77c Reason \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uc774\ub3d9 \uc5f0\uc0b0\uc740 \ub300\ub2e4\uc218\uc758 \uc0ac\ub78c\ub4e4\uc758 \ud0c0\ub2f9\ud55c \uac00\uc815\uc744 \ubb34\ub108\ub728\ub9b0\ub2e4. \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294 \uc774\ub3d9\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \uc5b8\uc5b4 \ud2b9\uc9d5\ub4e4\uc5d0 \uc758\ud574 \ub354 \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. Example template < typename T > class Vector { // ... Vector ( Vector && a ) noexcept : elem { a . elem }, sz { a . sz } { a . sz = 0 ; a . elem = nullptr ; } Vector & operator = ( Vector && a ) noexcept { elem = a . elem ; sz = a . sz ; a . sz = 0 ; a . elem = nullptr ; } // ... public : T * elem ; int sz ; }; \uc774 \ubcf5\uc0ac \uc5f0\uc0b0\ub4e4\uc740 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4. Example, bad template < typename T > class Vector2 { // ... Vector2 ( Vector2 && a ) { * this = a ; } // just use the copy Vector2 & operator = ( Vector2 && a ) { * this = a ; } // just use the copy // ... public : T * elem ; int sz ; }; \uc774 Vector2 \ub294 \ube44 \ud6a8\uc728\uc801\uc77c \ubfd0\ub9cc \uc544\ub2c8\ub77c, \ubca1\ud130\uac00 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \uc694\uad6c\ud558\uae30 \ub54c\ubb38\uc5d0 \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc788\ub2e4. Enforcement (\uc26c\uc6c0) \uc774\ub3d9\uc5f0\uc0b0\uc740 noexcept \ub85c \ud45c\uc2dc\ub418\uc5b4\uc57c \ud55c\ub2e4. C.67: \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\ub294 \ubcf5\uc0ac\ub97c \uc81c\ud55c\ud574\uc57c \ud55c\ub2e4 Reason \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4 \ub294 \ud558\ub098 \uc774\uc0c1\uc758 \uac00\uc0c1 \ud568\uc218\ub97c \uc815\uc758\ud558\uac70\ub098 \uc0c1\uc18d\ubc1b\uc740 \ud074\ub798\uc2a4\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub2e4\ub978 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uacfc \uac19\uc774 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \ud1b5\ud574\uc11c \uc0ac\uc6a9\ub420 \uac83\uc774\ub2e4. \ub9cc\uc57d \uc2e4\uc218\ub85c \uc778\ud574 \ubb35\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\ub41c \ubcf5\uc0ac \uc0dd\uc131\uc790/\ub300\uc785 \uc5f0\uc0b0\uc790\uc640 \ud568\uaed8 \uac12\uc73c\ub85c \uc804\ub2ec\ub41c \uacbd\uc6b0, \ubcf5\uc0ac \uc808\ub2e8(slicing)\uc758 \uc704\ud5d8\uc774 \uc788\ub2e4: \ud558\uc704 \uac1c\uccb4\uc5d0\uc11c \uc0c1\uc704 \uac1c\uccb4\uc5d0 \ud574\ub2f9\ud558\ub294 \ubd80\ubd84\ub9cc \ubcf5\uc0ac\ub418\uace0 \ub2e4\ud615\uc131\uc774 \ub9dd\uac00\uc9c4\ub2e4. Example, bad class B { // BAD: polymorphic base class doesn't suppress copying public : virtual char m () { return 'B' ; } // ... nothing about copy operations, so uses default ... }; class D : public B { public : char m () override { return 'D' ; } // ... }; void f ( B & b ) { auto b2 = b ; // oops, slices the object; b2.m() will return 'B' } D d ; f ( d ); Example class B { // GOOD: polymorphic class suppresses copying public : B ( const B & ) = delete ; B & operator = ( const B & ) = delete ; virtual char m () { return 'B' ; } // ... }; class D : public B { public : char m () override { return 'D' ; } // ... }; void f ( B & b ) { auto b2 = b ; // ok, compiler will detect inadvertent copying, and protest } D d ; f ( d ); Note \ub2e4\ud615\uc801\uc778 \uac1c\uccb4\uc5d0 \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uba74, clone() \ud568\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c: C.130 \ub97c \ucc38\uace0\ud558\ub77c. Exception \uc608\uc678 \uac1c\uccb4\ub4e4\uc744 \uc704\ud55c \ud074\ub798\uc2a4\ub294 \ub2e4\ud615\uc801\uc774\uba74\uc11c \ubcf5\uc0ac \uc0dd\uc131\uc774 \uac00\ub2a5\ud574\uc57c \ud55c\ub2e4. Enforcement \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\uc774\uba74\uc11c \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\uc758 \uac1c\uccb4\uac00 \ubcf5\uc0ac\ub418\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c C.other: \ub2e4\ub978 \uae30\ubcf8 \uc5f0\uc0b0 \uaddc\uce59\ub4e4 \uc5b8\uc5b4\uac00 \uc81c\uacf5\ud558\ub294 \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc758 \uad6c\ud604 \uc774\uc678\uc5d0\ub3c4, \ube44\uad50, swap , \uadf8\ub9ac\uace0 hash \ucc98\ub7fc \ubcc4\ub3c4\uc758 \uc815\uc758\uac00 \ud544\uc694\ud560 \uc815\ub3c4\ub85c \uae30\ucd08\uc801\uc778 \uba87\uba87 \uc5f0\uc0b0\ub4e4\uc774 \uc788\ub2e4: C.80: \uae30\ubcf8 \uc758\ubbf8\uad6c\uc870(semantic)\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub824\uba74 =default \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ucef4\ud30c\uc77c\ub7ec\uac00 \ub354 \uc815\ud655\ud55c \uae30\ubcf8 \uc758\ubbf8\uad6c\uc870\ub97c \uc54c\uace0 \uc788\uc73c\uba70, \uc774\ubcf4\ub2e4 \ub098\uc740 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc5c6\ub2e4. Example class Tracer { string message ; public : Tracer ( const string & m ) : message { m } { cerr << \"entering \" << message << '\\n' ; } ~ Tracer () { cerr << \"exiting \" << message << '\\n' ; } Tracer ( const Tracer & ) = default ; Tracer & operator = ( const Tracer & ) = default ; Tracer ( Tracer && ) = default ; Tracer & operator = ( Tracer && ) = default ; }; \uc18c\uba78\uc790\ub97c \uc815\uc758\ud588\uae30 \ub54c\ubb38\uc5d0, \uc6b0\ub9ac\ub294 \ubcf5\uc0ac, \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\uc744 \uc815\uc758\ud574\uc57c\ub9cc \ud55c\ub2e4. \uc774\ub97c \uc704\ud574\uc120 =default \uac00 \uac00\uc7a5 \ucd5c\uc120\uc774\uace0, \uac04\ub2e8\ud55c \ubc29\ubc95\uc774\ub2e4. Example, bad class Tracer2 { string message ; public : Tracer2 ( const string & m ) : message { m } { cerr << \"entering \" << message << '\\n' ; } ~ Tracer2 () { cerr << \"exiting \" << message << '\\n' ; } Tracer2 ( const Tracer2 & a ) : message { a . message } {} Tracer2 & operator = ( const Tracer2 & a ) { message = a . message ; return * this ; } Tracer2 ( Tracer2 && a ) : message { a . message } {} Tracer2 & operator = ( Tracer2 && a ) { message = a . message ; return * this ; } }; \ubcf5\uc0ac\uc640 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\uc758 \ud568\uc218\ub4e4\uc744 \uc77c\uc77c\uc774 \uc791\uc131\ud558\ub294 \uac83\uc740 \ubc88\uac70\ub86d\uace0, \uc9c0\ub8e8\ud558\uba70, \uc5d0\ub7ec\uc5d0 \ucde8\uc57d\ud558\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774 \uc791\uc5c5\uc744 \ub354 \uc798 \ud560\uc218\uc788\ub2e4. Enforcement (\uc911\uac04) \ud2b9\ubcc4\ud55c \uc5f0\uc0b0\ub4e4\uc740 \uc911\ubcf5\uc744 \ud53c\ud558\uae30 \uc704\ud574 \ucef4\ud30c\uc77c\ub7ec\uac00 \ub9cc\ub4e0 \ud568\uc218\ub4e4\uacfc \uac19\uc740 \uc811\uadfc\uc131, \uc758\ubbf8\uad6c\uc870\ub97c \uac00\uc838\uc11c\ub294 \uc548\ub41c\ub2e4 C.81: \uae30\ubcf8 \ub3d9\uc791\uc744 (\ub300\uc548\uc744 \uc6d0\ud558\uc9c0 \uc54a\uace0) \uae08\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74 =delete \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ub4dc\ubb3c\uac8c \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc774 \ubc14\ub78c\uc9c1\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. Example class Immortal { public : ~ Immortal () = delete ; // \uc18c\uba78\uc774 \uae08\uc9c0\ub418\uc5c8\ub2e4 // ... }; void use () { Immortal ugh ; // error: ugh\uc740 \uc18c\uba78\ub420 \uc218 \uc5c6\ub2e4 Immortal * p = new Immortal {}; delete p ; // error: *p\ub97c \uc18c\uba78\uc2dc\ud0ac \uc218 \uc5c6\ub2e4 } Example unique_ptr \ub294 \uc774\ub3d9 \uac00\ub2a5\ud558\uc9c0\ub9cc, \ubcf5\uc0ac\ub294 \ubd88\uac00\ub2a5\ud558\ub2e4. \uc774 \ud074\ub798\uc2a4\uc758 \ubcf5\uc0ac\ub97c \ub9c9\uae30 \uc704\ud574, \ubcf5\uc0ac \uc5f0\uc0b0\ub4e4\uc740 \uc0ad\uc81c\ub418\uc5c8\ub2e4. l-value\ub85c\ubd80\ud130 \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \ub9c9\uae30 \uc704\ud574\uc11c\ub294 =delete \uac00 \ud544\uc694\ud558\ub2e4: template < class T , class D = default_delete < T >> class unique_ptr { public : // ... constexpr unique_ptr () noexcept ; explicit unique_ptr ( pointer p ) noexcept ; // ... unique_ptr ( unique_ptr && u ) noexcept ; // move constructor // ... unique_ptr ( const unique_ptr & ) = delete ; // disable copy from lvalue // ... }; unique_ptr < int > make (); // \"\ubb34\uc5b8\uac00\" \ub9cc\ub4e0 \ub4a4\uc5d0 \uc774\ub3d9\uc73c\ub85c \ubc18\ud658\ud55c\ub2e4 void f () { unique_ptr < int > pi {}; auto pi2 { pi }; // error: l-value\ub85c\ubd80\ud130 \uc0dd\uc131\ud560 \uc218 \uc5c6\ub2e4. auto pi3 { make ()}; // OK, \uc774\ub3d9 \uc0dd\uc131: make()\uc758 \uacb0\uacfc\ub294 r-value\uc774\ub2e4 } delete\ub41c \ud568\uc218\ub4e4\uc774 public\uc774\ub77c\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\ub77c Enforcement \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc81c\uac70\ud558\ub294 \uac83\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\uc5d0 \ubd80\ud569\ud558\ub294 \uadfc\uac70\uac00 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uc815\ub9d0 \uc774\uc720\uac00 \uc788\ub294\uc9c0 \uc758\uc2ec\ud558\ub77c. \ud558\uc9c0\ub9cc \uc0ac\ub78c\uc774 \ubcf4\uae30\uc5d0 \ubb38\ub9e5\uc801\uc73c\ub85c \ud0c0\ub2f9\ud558\ub2e4\uace0 \ub2e8\uc5b8(assert)\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub77c. C.82: \uc0dd\uc131\uc790 \ub610\ub294 \uc18c\uba78\uc790\uc5d0\uc11c \uac00\uc0c1 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9d0\uc544\ub77c Reason \ud638\ucd9c\ub41c \ud568\uc218\ub294 \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0\uc11c \uc624\ubc84\ub77c\uc774\ub4dc \ud558\ub294 \ud568\uc218\uac00 \uc544\ub2c8\ub77c, \uc0dd\uc131\ub41c \uac1c\uccb4\uc758 \ud568\uc218\uc774\ub2e4. \uc774\ub7ec\ud55c \ub3d9\uc791\uc740 \ud63c\ub780\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. \ub098\uc058\uac8c\ub294, \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790 \ub0b4\ubd80\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uad6c\ud604\ub418\uc9c0 \uc54a\uc740 \uc21c\uc218 \uac00\uc0c1 \ud568\uc218\uc5d0 \ub300\ud55c \uc9c1\uc811 \ub610\ub294 \uac04\uc811\ud638\ucd9c\uc774 \ube44\uc815\uc758\ub41c \ub3d9\uc791\uc744 \uc77c\uc73c\ud0a8\ub2e4. Example, bad class Base { public : virtual void f () = 0 ; // \uad6c\ud604\ub418\uc9c0 \uc54a\uc558\ub2e4 virtual void g (); // \uae30\ubcf8 \ubc84\uc804\uc744 \uad6c\ud604\ud558\uc600\ub2e4 virtual void h (); // \uae30\ubcf8 \ubc84\uc804\uc744 \uad6c\ud604\ud558\uc600\ub2e4 }; class Derived : public Base { public : void g () override ; // \ud30c\uc0dd \uad6c\ud604\uc744 \uc81c\uacf5\ud55c\ub2e4 void h () final ; // \ud30c\uc0dd \uad6c\ud604\uc744 \uc81c\uacf5\ud55c\ub2e4 Derived () { // BAD: \uad6c\ud604\ub418\uc9c0 \uc54a\uc740 \uac00\uc0c1 \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4 f (); // BAD: will call Derived::g, not dispatch further virtually g (); // GOOD: \uc811\uadfc \uac00\ub2a5\ud55c(visible) \ud568\uc218\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ud638\ucd9c\ud55c\ub2e4 Derived :: g (); // ok, \ubb38\uc81c \uc5c6\ub2e4. h\ud568\uc218\ub294 final \uad6c\ud604\uccb4\ub97c \uc758\ubbf8\ud55c\ub2e4 h (); } }; \ud2b9\uc815\ud558\uac8c \uba85\uc2dc\uc801\uc73c\ub85c \ud55c\uc815\ub41c \ud568\uc218\ub294 virtual \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4 \uac00\uc0c1\ud638\ucd9c\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc74c\uc744 \uae30\uc5b5\ud558\ub77c. See also \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ub3d9\uc791\uc758 \uc704\ud5d8\uc774 \uc5c6\uc774 \ud30c\uc0dd \ud074\ub798\uc2a4\uc758 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \ud6a8\uacfc\ub97c \uc5bb\uae30 \uc704\ud574\uc11c\ub294 \ud329\ud1a0\ub9ac \ud568\uc218 \ud56d\ubaa9\uc744 \ucc38\uace0\ud558\ub77c. Note \uac00\uc0c1 \ud568\uc218\ub97c \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0\uc11c \ud638\ucd9c\ud558\ub294 \ud589\uc704\uac00 \ubc18\ub4dc\uc2dc \uc798\ubabb\ub41c \uac83\uc740 \uc544\ub2c8\ub2e4. \ubcf4\ud1b5\uc758 \uacbd\uc6b0 \uc774\ub7f0 \ud589\uc704\ub294 \ud0c0\uc785 \uc548\uc804\ud55c \uc758\ubbf8\uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. \ud558\uc9c0\ub9cc, \uacbd\ud5d8\uc801\uc73c\ub85c \uadf8\ub7f0 \uc0ac\uc6a9\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\ub294 \uac70\uc758 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc73c\uba70, \uc720\uc9c0\ubcf4\uc218 \uac1c\ubc1c\uc790\ub97c \ud63c\ub780\uc2a4\ub7fd\uac8c \ud55c\ub2e4. \ucd08\uc2ec\uc790\uac00 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc2e4\uc218\ud558\ub294 \uc6d0\uc778\uc774 \ub420 \uc218 \uc788\ub2e4. Enforcement \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0\uc11c\uc758 \uac00\uc0c1 \ud568\uc218 \ud638\ucd9c\uc744 \uc9c0\uc801\ud55c\ub2e4 C.83: \uac12 \ud0c0\uc785\ub4e4\uc5d0\ub294, noexcept swap\ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c Reason swap \ud568\uc218\ub294 \uac1c\uccb4 \ub300\uc785\uc744 \uad6c\ud604\ud560 \ub54c \uc6d0\ud65c\ud558\uac8c \uac1c\uccb4\ub97c \uc774\ub3d9\ud558\ub294 \uac83\uc5d0\uc11c, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\ub294 \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83\uae4c\uc9c0 \uba87\uba87 \ud568\uc218\ub4e4(idioms)\uc744 \uad6c\ud604\ud558\ub294\ub370 \uc720\uc6a9\ud558\ub2e4. swap\ud568\uc218\uc744 \uc774\uc6a9\ud574\uc11c \ubcf5\uc0ac \ub300\uc785\uc744 \uad6c\ud604\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c. \uc18c\uba78\uc790, \uc790\uc6d0 \ud574\uc81c, \uadf8\ub9ac\uace0 swap\uc740 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 . Example, good class Foo { // ... public : void swap ( Foo & rhs ) noexcept { m1 . swap ( rhs . m1 ); std :: swap ( m2 , rhs . m2 ); } private : Bar m1 ; int m2 ; }; \ud638\ucd9c\uc790\ub4e4\uc758 \ud3b8\uc758\ub97c \uc704\ud574\uc11c \uac19\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ube44-\uba64\ubc84 swap \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub77c. void swap ( Foo & a , Foo & b ) { a . swap ( b ); } Enforcement (\uc26c\uc6c0) \uac00\uc0c1 \ud568\uc218\ub4e4\uc774 \uc5c6\ub294 \ud074\ub798\uc2a4\ub294 swap \uba64\ubc84 \ud568\uc218 \uc120\uc5b8\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4 (\uc26c\uc6c0) \ud074\ub798\uc2a4\uac00 swap \uba64\ubc84\ud568\uc218\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uadf8 \ud568\uc218\ub294 noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4 C.84: swap \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 Reason swap \uc5f0\uc0b0\uc740 \ub9ce\uc740 \uacbd\uc6b0 \uc2e4\ud328\ud558\uc9c0 \uc54a\uc744 \uac83\uc73c\ub85c \uc804\uc81c\ud558\uace0 \uc0ac\uc6a9\ub41c\ub2e4. \ub610\ud55c \uc2e4\ud328 \uac00\ub2a5\uc131\uc774 \uc788\ub294 swap \uc5f0\uc0b0\uc73c\ub85c\ub294 \uc815\ud655\ud558\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \ud504\ub85c\uadf8\ub7a8\uc774 \uc791\uc131\ub418\uae30 \uc5b4\ub835\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucee8\ud14c\uc774\ub108\ub4e4\uacfc \uc54c\uace0\ub9ac\uc998\ub4e4\uc740 swap\uc5f0\uc0b0\uc758 \ud0c0\uc785\uc774 \uc2e4\ud328\ud558\uba74 \uc815\ud655\ud558\uac8c \ub3d9\uc791\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. Example, bad void swap ( My_vector & x , My_vector & y ) { auto tmp = x ; // copy elements x = y ; y = tmp ; } \uc774 \uacbd\uc6b0\ub294 \ub290\ub9b4 \ubfd0\ub9cc \uc544\ub2c8\ub77c, tmp \ub0b4\uc758 \uc6d0\uc18c\ub4e4\uc5d0 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc774 \ubc1c\uc0dd\ud558\uba74, \uc774 swap \uc5f0\uc0b0\uc740 \uc608\uc678\ub97c \ub358\uc9c0\uace0 \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 STL \uc54c\uace0\ub9ac\uc998\ub4e4\uc774 \uc2e4\ud328\ud560 \uc218 \uc788\ub2e4. Enforcement (\uc26c\uc6c0) \ud074\ub798\uc2a4\uc5d0 swap \uba64\ubc84 \ud568\uc218\uac00 \uc788\uc73c\uba74, noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. C.85: swap \uc5f0\uc0b0\uc740 noexcept \ub85c \uc791\uc131\ud558\ub77c Reason swap \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc791\uc131\ud558\ub77c . swap \uc5f0\uc0b0\uc774 \uc608\uc678\ub97c \ub358\uc9c0\uba74\uc11c \uc885\ub8cc\ud558\ub824 \ud55c\ub2e4\uba74, \uadf8\uac83\uc740 \uc798\ubabb\ub41c \uc124\uacc4 \uc624\ub958\uc774\uba70 \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\ud558\ub294\uac8c \ub0ab\ub2e4. Enforcement (\uc26c\uc6c0) \ud074\ub798\uc2a4\uc5d0 swap \uba64\ubc84 \ud568\uc218\uac00 \uc788\uc73c\uba74, noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. C.86: == \uc5f0\uc0b0\uc790\ub294 \ud53c\uc5f0\uc0b0\uc790 \ud0c0\uc785\ub4e4\uc5d0 \ub300\uce6d\uc801\uc774\uace0, noexcept \ub85c \ub9cc\ub4e4\uc5b4\ub77c Reason \ud53c\uc5f0\uc0b0\uc790\ub4e4\uc5d0 \ube44\ub300\uce6d\uc801\uc778 \ucc98\ub9ac\ub294 \uae30\ub300\uc5d0 \ubd80\ud569\ud558\uc9c0 \uc54a\uace0, \ud615\ubcc0\ud658\uc774 \uac00\ub2a5\ud55c \uacbd\uc6b0 \uc5d0\ub7ec\ub97c \uc720\ubc1c\ud560 \uc218 \uc788\ub2e4. == \ub294 \uae30\ubcf8\uc801\uc778 \uc5f0\uc0b0\uc774\uba70 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc774 \uc774 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc5f0\uc0b0 \uc2e4\ud328\uc5d0 \ub300\ud55c \uace0\ubbfc\uc774 \uc5c6\uc5b4\uc57c \ud55c\ub2e4. Example struct X { string name ; int number ; }; bool operator == ( const X & a , const X & b ) noexcept { return a . name == b . name && a . number == b . number ; } Example, bad class B { string name ; int number ; bool operator == ( const B & a ) const { return name == a . name && number == a . number ; } // ... }; B \uc758 \ube44\uad50 \uc5f0\uc0b0\uc740 \ub450\ubc88\uc9f8 \ud53c\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574 \ud615\ubcc0\ud658\uc744 \uc6a9\uc778\ud558\uc9c0\ub9cc, \uccab\ubc88\uc9f8 \ud53c\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c\ub294 \uadf8\ub807\uc9c0 \uc54a\ub2e4. Note \ub9cc\uc57d \ud074\ub798\uc2a4\uac00 double \ud0c0\uc785\uc758 NaN \ucc98\ub7fc \uc2e4\ud328 \uc0c1\ud0dc\ub97c \uac00\uc9c4\ub2e4\uba74, \uc2e4\ud328 \uc0c1\ud0dc\uc640\uc758 \ube44\uad50\uc5d0\uc11c \uc608\uc678\ub97c \ub358\uc9c0\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \uc801\ud569\ud560 \uc218\ub3c4 \uc788\ub2e4. \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294 \uc2e4\ud328 \uc0c1\ud0dc\ub07c\ub9ac\uc758 \ube44\uad50\ub294 \ub3d9\ub4f1\ud558\uac8c \ubcf4\uace0, \uc801\ud569\ud55c \uc0c1\ud0dc\uc640 \uc2e4\ud328 \uc0c1\ud0dc\uc758 \ube44\uad50\uc5d0\uc11c\ub294 \uac70\uc9d3\uc73c\ub85c \ud310\uc815\ud560 \uc218 \uc788\ub2e4. Note \uc774 \uaddc\uce59\uc740 \ubaa8\ub4e0 \uc77c\ubc18 \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4 : != , < , <= , > , >= . Enforcement \uc778\uc790\uc758 \ud0c0\uc785\uc774 \ub2e4\ub978 operator==() \ub97c \uc9c0\uc801\ud558\ub77c. \ub2e4\ub978 \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub2e4 : != , < , <= , > , >= . \uba64\ubc84\uc778 operator==() \ud568\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c. \ub2e4\ub978 \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub2e4 : != , < , <= , > , >= . C.87: \uae30\ubcf8 \ud074\ub798\uc2a4\uc5d0 \uc788\ub294 == \uc5d0 \uc8fc\uc758\ud558\ub77c Reason \uacc4\uce35 \uad6c\uc870\uc5d0\uc11c \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc5b4\ub835\uace0 \uc720\uc6a9\ud55c == \ub97c \uc791\uc131\ud558\ub294 \uac83\uc740 \uc5b4\ub824\uc6b4 \uc77c\uc774\ub2e4. Example, bad class B { string name ; int number ; virtual bool operator == ( const B & a ) const { return name == a . name && number == a . number ; } // ... }; B \uc758 \ube44\uad50 \uc5f0\uc0b0\uc740 \ub450\ubc88\uc9f8 \ud53c\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c \ud0c0\uc785 \ubcc0\ud658\uc744 \ud5c8\uc6a9\ud558\uc9c0\ub9cc, \uccab\ubc88\uc9f8 \ud53c\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c\ub294 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. class D : B { char character ; virtual bool operator == ( const D & a ) const { return name == a . name && number == a . number && character == a . character ; } // ... }; B b = ... D d = ... b == d ; // compares name and number, ignores d's character d == b ; // error: no == defined D d2 ; d == d2 ; // compares name, number, and character B & b2 = d2 ; b2 == d ; // compares name and number, ignores d2's and d's character \ubb3c\ub860 \uacc4\uce35 \uad6c\uc870 \uc548\uc5d0\uc11c == \uac00 \ub3d9\uc791\ud558\ub3c4\ub85d \ud558\ub294 \ubc29\ubc95\ub4e4\uc774 \uc788\uc9c0\ub9cc, \ub2e8\uc21c\ud55c(naive) \ubc29\ubc95\ub4e4\uc740 \uace0\ub824\ud558\uc9c0 \ub9d0\uc544\ub77c. Note \uc774 \uaddc\uce59\uc740 \ubaa8\ub4e0 \uc77c\ubc18 \ube44\uad50\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c\ud558\ub2e4 : != , < , <= , > , >= Enforcement \uac00\uc0c1 \ud568\uc218\uc778 operator==() \ub97c \uc9c0\uc801\ud558\ub77c. \ub2e4\ub978 \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\ub3c4 \ub3d9\uc77c\ud558\ub2e4: != , < , <= , > , >= . C.89: hash \ub294 noexcept \ub85c \uc791\uc131\ud558\ub77c Reason \ud574\uc2dc \ucee8\ud14c\uc774\ub108\ub4e4\uc758 \uc0ac\uc6a9\uc790\ub4e4\uc740 hash\ub97c \uac04\uc811\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uba70, \ud574\uc2dc\uac12\uc744 \uc704\ud55c \ub2e8\uc21c\ud55c \uc811\uadfc\uc774 throw\ud558\uc9c0 \uc54a\uc744 \uac83\uc73c\ub85c \uae30\ub300\ud55c\ub2e4. \uc774\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc694\uad6c\uc0ac\ud56d\uc774\ub2e4. Example, bad template <> struct hash < My_type > { // \uc815\ub9d0\uc815\ub9d0 \uc548\uc88b\uc740 \ud574\uc2dc \ud2b9\uc218\ud654 using result_type = size_t ; using argument_type = My_type ; size_t operator () ( const My_type & x ) const { size_t xs = x . s . size (); if ( xs < 4 ) throw Bad_My_type {}; // \"\uc774\ub7f0 \uc774\ub2e8\uc790 \uac19\uc73c\ub2c8!\" return hash < size_t > ()( x . s . size ()) ^ trim ( x . s ); } }; int main () { unordered_map < My_type , int > m ; My_type mt { \"asdfg\" }; m [ mt ] = 7 ; cout << m [ My_type { \"asdfg\" }] << '\\n' ; } hash \ud2b9\uc218\ud654\ub97c \uc815\uc758\ud560 \ub54c\ub294, \uac04\ub2e8\ud558\uac8c ^ (xor)\uc640 \ud568\uaed8 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 hash \ud2b9\uc218\ud654\uc640 \ud1b5\ud569\ub418\ub3c4\ub85d \ud558\ub77c. \ube44 \uc804\ubb38\uac00\ub4e4\uc744 \uc704\ud574\uc120 \uc774 \ubc29\ubc95\uc774 \ub354 \uc801\ud569\ud558\ub2e4. Enforcement \uc608\uc678\ub97c \ub358\uc9c0\ub294 hash \ub4e4\uc744 \uc9c0\uc801\ud558\ub77c. C.90: memset \ub610\ub294 memcpy \uac00 \uc544\ub2cc, \uc0dd\uc131\uc790\uc640 \ud560\ub2f9 \uc5f0\uc0b0\uc790\uc5d0 \uc758\uc874\ud558\ub77c Reason \ud0c0\uc785\uc758 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \ud45c\uc900 C++ \uba54\ucee4\ub2c8\uc998\uc740 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc774\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \uba85\uc2dc\ub41c \uac83 \ucc98\ub7fc C.41 : \uc0dd\uc131\uc790\ub294 \uc644\uc804\ud788 \ucd08\uae30\ud654\ub41c \uac1c\uccb4\ub97c \uc0dd\uc131\ud574\uc57c \ud55c\ub2e4. 'memcpy'\uc640 \uac19\uc740 \ucd94\uac00\uc801\uc778 \ucd08\uae30\ud654 \ubc29\uc548\uc740 \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\ub294\ub2e4. \ud0c0\uc785\uc740 \ud074\ub798\uc2a4\uc758 \ubcf5\uc0ac\ubcf8\uc744 \uc801\uc808\ud558\uac8c \ub9cc\ub4dc\ub294 \ubcf5\uc0ac \uc0dd\uc131\uc790\uc640(\ub610\ub294) \ubcf5\uc0ac \ud560\ub2f9 \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud558\uc5ec, \ud0c0\uc785\uc758 \ubd88\ubcc0 \uc870\uac74\uc744 \uc720\uc9c0\ud574\uc57c\ud55c\ub2e4. memcpy\ub97c \ud1b5\ud574 \ubcf5\uc0ac \ubbf8\uc815 \ud0c0\uc785(non-trivially copyable type)\uc744 \ubcf5\uc0ac\ud560 \ub54c, \ubbf8\uc815\uc758 \ub3d9\uc791\uc73c\ub85c \uc774\uc5b4\uc9c4\ub2e4. \uc774\ub85c \uc778\ud574 \ubcf5\uc0ac \uc808\ub2e8 \ub610\ub294 \ub370\uc774\ud130 \uc190\uc0c1\uc774 \uc790\uc8fc \ubc1c\uc0dd\ud55c\ub2e4 Example, good struct base { virtual void update() = 0; std::shared_ptr<int> sp; }; struct derived : public base { void update() override {} }; Example, bad void init(derived& a) { memset(&a, 0, sizeof(derived)); } \ubd88\uc548\uc804\ud55c \ud0c0\uc785\uc774\uba70, \uac00\uc0c1 \ud568\uc218 \ud14c\uc774\ube14\uc774 \uc190\uc0c1(overwrite)\ub41c\ub2e4. Example, bad void copy(derived& a, derived& b) { memcpy(&a, &b, sizeof(derived)); } \uc774 \ub610\ud55c \ubd88\uc548\uc804\ud55c \ud0c0\uc785\uc774\uba70, \uac00\uc0c1 \ud568\uc218 \ud14c\uc774\ube14\uc774 \uc190\uc0c1(overwrite)\ub41c\ub2e4. Enforcement 'memset' \ub610\ub294 'memcpy'\uc5d0 \ubcf5\uc0ac \ubbf8\uc815 \ud0c0\uc785(non-trivially copyable type)\uc744 \uc804\ub2ec\ud560 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c C.con: \ucee8\ud14c\uc774\ub108\uc640 \ub9ac\uc18c\uc2a4 \ud578\ub4e4 \ucee8\ud14c\uc774\ub108\ub294 \uc784\uc758 \ud0c0\uc785\uc758 \uc5f0\uc18d\ub41c \uac1c\uccb4\ub4e4\uc744 \uac00\uc9c4 \uac1c\uccb4\ub97c \uc758\ubbf8\ud55c\ub2e4; std::vector \ub294 \ub300\ud45c\uc801\uc778 \ucee8\ud14c\uc774\ub108 \ud0c0\uc785\uc774\ub2e4. \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc740 \uc790\uc6d0\uc744 \uc18c\uc720\ud558\ub294 \ud074\ub798\uc2a4\ub97c \uc758\ubbf8\ud55c\ub2e4; std::vector \ub294 \ubcf4\ud1b5 \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc5d0 \ud574\ub2f9\ud55c\ub2e4; \uc774 \uacbd\uc6b0 \uc790\uc6d0\uc740 \uc5f0\uc18d\ub41c \uc6d0\uc18c\ub4e4\uc774\ub2e4. \ucee8\ud14c\uc774\ub108 \uaddc\uce59 \uc694\uc57d: C.100: \ucee8\ud14c\uc774\ub108\ub97c \uc815\uc758\ud560\ub54c\ub294 STL\uc744 \ub530\ub974\ub77c C.101: \uac12 \uc758\ubbf8\uad6c\uc870(value semantics)\ub97c \uc81c\uacf5\ud558\ub77c C.102: \uc774\ub3d9 \uc5f0\uc0b0\uc744 \uc81c\uacf5\ud558\ub77c C.103: \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\uc790\ub97c \uc9c0\uc6d0\ud558\ub77c C.104: \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ube48 \ucee8\ud14c\uc774\ub108\ub97c \ub9cc\ub4e4\ub3c4\ub85d \ud558\ub77c C.109: \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc774 \ud3ec\uc778\ud130 \uc758\ubbf8\uad6c\uc870\ub97c \ub530\ub97c \uacbd\uc6b0\uc5d0\ub294, * \uacfc -> \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud558\ub77c See also R: \uc790\uc6d0 \uad00\ub9ac C.100: \ucee8\ud14c\uc774\ub108\ub97c \uc815\uc758\ud560\ub54c\ub294 STL\uc744 \ub530\ub974\ub77c Reason C++ \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc5d0\uac8c STL \ucee8\ud14c\uc774\ub108\ub294 \uce5c\uc219\ud558\uace0 \uae30\ubcf8\uc801\uc73c\ub85c \uc801\uc808\ud55c(fundamentally sound) \uc124\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. Note \ub2e4\ub978 fundamentally sound\ud55c \uc124\uacc4 \ubc29\uc2dd\ub4e4\uc774 \uc788\uace0 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744 \uc774\uc720\uac00 \uc788\uae30\ub3c4 \ud558\uc9c0\ub9cc, \ub2e4\ub978 \ubc29\uc2dd\uc744 \ud0dd\ud574\uc57c \ud560 \ud655\uc2e4\ud55c \uc774\uc720\uac00 \uc5c6\ub2e4\uba74, \uad6c\ud604\uc790\uc640 \uc0ac\uc6a9\uc790 \ubaa8\ub450 \ud45c\uc900\uc744 \ub530\ub974\ub294 \uac83\uc774 \ub2e8\uc21c\ud558\uace0 \uc26c\uc6b4 \ubc29\ubc95\uc774\ub2e4. \ud2b9\ud788, std::vector \uc640 std::map \uc740 \ub2e8\uc21c\ud558\uace0 \uc720\uc6a9\ud55c \ubaa8\ub378\uc744 \uc81c\uacf5\ud55c\ub2e4 Example // simplified (e.g., no allocators): template < typename T > class Sorted_vector { using value_type = T ; // ... iterator types ... Sorted_vector () = default ; Sorted_vector ( initializer_list < T > ); // initializer-list constructor: sort and store Sorted_vector ( const Sorted_vector & ) = default ; Sorted_vector ( Sorted_vector && ) = default ; Sorted_vector & operator = ( const Sorted_vector & ) = default ; // copy assignment Sorted_vector & operator = ( Sorted_vector && ) = default ; // move assignment ~ Sorted_vector () = default ; Sorted_vector ( const std :: vector < T >& v ); // store and sort Sorted_vector ( std :: vector < T >&& v ); // sort and \"steal representation\" const T & operator []( int i ) const { return rep [ i ]; } // no non-const direct access to preserve order void push_back ( const T & ); // insert in the right place (not necessarily at back) void push_back ( T && ); // insert in the right place (not necessarily at back) // ... cbegin(), cend() ... private : std :: vector < T > rep ; // use a std::vector to hold elements }; template < typename T > bool operator == ( const T & ); template < typename T > bool operator != ( const T & ); // ... \uc704 \uc608\uc2dc\uc5d0\uc120, \ud45c\uc900 \ud15c\ud50c\ub9bf \ub77c\uc774\ube0c\ub7ec\ub9ac \uc2a4\ud0c0\uc77c\uc744 \ubd88\uc644\uc804\ud558\uac8c \ub530\ub978\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 \ud754\ud788 \ubcfc \uc218 \uc788\ub2e4. \ucd5c\uc18c\ud55c\uc758 \uae30\ub2a5\ub9cc \uc81c\uacf5\ud558\ub294 \uac83\uc740 \ud2b9\ubcc4\ud788 \uad6c\ud604\ub41c \ucee8\ud14c\uc774\ub108\uc5d0\uac8c\ub294 \ud0c0\ub2f9\ud558\ub2e4. \ud575\uc2ec\uc740 \uadf8 \ucee8\ud14c\uc774\ub108\uc5d0\uac8c \ub9de\uac8c \uc804\ud1b5\uc801\uc778 \uc0dd\uc131\uc790, \ub300\uc785, \uc18c\uba78, \uadf8\ub9ac\uace0 \ubc18\ubcf5\uc790\ub97c \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\uad6c\uc870\ub97c \uc9c0\uc6d0\ud558\ub3c4\ub85d \uc815\uc758\ud558\ub294 \uac83\uc774\ub2e4. \uc774\ub97c \ubc14\ud0d5\uc73c\ub85c, \uadf8 \ucee8\ud14c\uc774\ub108\ub294 \ud544\uc694\ud55c \ub9cc\ud07c \ud655\uc7a5\ub420 \uc218 \uc788\ub2e4. \uc774 \uc608\uc2dc\uc5d0\uc11c\ub294 std::vector \ub97c \uc0ac\uc6a9\ud558\ub294 \ud2b9\ubcc4\ud55c \uc0dd\uc131\uc790\uac00 \ucd94\uac00\ub418\uc5c8\ub2e4. Enforcement ??? C.101: \uac12 \uc758\ubbf8\uad6c\uc870(value semantics)\ub97c \uc81c\uacf5\ud558\ub77c Reason \uc815\uaddc \ud0c0\uc785\uc758 \uac1c\uccb4\ub4e4\uc740 \uace0\ubbfc\uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc0ac\uc6a9\uc790\ub4e4\uc740 \uac12 \uc758\ubbf8\uad6c\uc870\uc5d0 \uc775\uc219\ud558\ub2e4. Note \ud544\uc694\ud558\ub2e4\uba74, \ucee8\ud14c\uc774\ub108\ub97c Regular (Concept \uc911 \ud558\ub098)\ud558\uac8c \ub9cc\ub4e4\uc5b4\ub77c. \ud2b9\ud788, \ubcf5\uc0ac\ub41c \uac1c\uccb4\uc640 \uc6d0\ub798 \uac1c\uccb4\ub97c \ube44\uad50\ud588\uc744 \ub54c \uac19\ub3c4\ub85d \ud558\ub77c. Example void f ( const Sorted_vector < string >& v ) { Sorted_vector < string > v2 { v }; if ( v != v2 ) cout << \"insanity rules! \\n \" ; // ... } Enforcement ??? C.102: \uc774\ub3d9 \uc5f0\uc0b0\uc744 \uc81c\uacf5\ud558\ub77c Reason \ucee8\ud14c\uc774\ub108\ub294 \ud070 \uaddc\ubaa8\ub85c \uc0ac\uc6a9\ub418\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4; \uc774\ub3d9 \uc5f0\uc0b0\uc774 \uc5c6\ub2e4\uba74 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4dc\ub294 \ubcf5\uc0ac\uac00 \uc0ac\uc6a9\ub420 \uac83\uc774\uace0, \uc0ac\ub78c\ub4e4\uc774 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud558\ub3c4\ub85d \ub9cc\ub4e6\uc73c\ub85c\uc368 \uc790\uc6d0 \uad00\ub9ac \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. Example Sorted_vector < int > read_sorted ( istream & is ) { vector < int > v ; cin >> v ; // assume we have a read operation for vectors Sorted_vector < int > sv = v ; // sorts return sv ; } A user can reasonably assume that returning a standard - like container is cheap . Enforcement ??? C.103: \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\uc790\ub97c \uc9c0\uc6d0\ud558\ub77c Reason \uc0ac\ub78c\ub4e4\uc740 \uac12 \uc9d1\ud569\uc744 \uc0ac\uc6a9\ud574\uc11c \ucee8\ud14c\uc774\ub108 \ucd08\uae30\ud654\uac00 \uac00\ub2a5\ud560 \uac83\uc774\ub77c \uae30\ub300\ud55c\ub2e4. \uc790\uc5f0\uc2a4\ub7fd\ub2e4. Example Sorted_vector < int > sv { 1 , 3 , - 1 , 7 , 0 , 0 }; // Sorted_vector sorts elements as needed Enforcement ??? C.104: \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ube48 \ucee8\ud14c\uc774\ub108\ub97c \ub9cc\ub4e4\ub3c4\ub85d \ud558\ub77c Reason \ucee8\ud14c\uc774\ub108\ub97c \uc815\uaddc(Regular) \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc900\ub2e4. Example vector < Sorted_sequence < string >> vs ( 100 ); // 100 Sorted_sequences each with the value \"\" Enforcement ??? C.109: \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc774 \ud3ec\uc778\ud130 \uc758\ubbf8\uad6c\uc870\ub97c \ub530\ub97c \uacbd\uc6b0\uc5d0\ub294, * \uacfc -> \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud558\ub77c Reason \ud3ec\uc778\ud130\uc5d0 \uae30\ub300\ub418\ub294 \uc5f0\uc0b0\ub4e4\uc774\ub2e4. \ud3ec\uc778\ud130 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c\ub294 \uc774\ub7f0 \ud45c\ud604\uc774 \uc775\uc219\ud558\ub2e4. Example ??? Enforcement ??? C.lambdas: \ud568\uc218 \uac1c\uccb4\uc640 \ub78c\ub2e4 \ud45c\ud604\uc2dd(Function objects and lambdas) \ud568\uc218 \uac1c\uccb4\ub294 () \ub97c \uc624\ubc84\ub85c\ub4dc\ud574 \ud638\ucd9c\uc744 \uc9c0\uc6d0\ud558\ub294 \uac1c\uccb4\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub78c\ub2e4 \ud45c\ud604\uc2dd(\uc904\uc5ec\uc11c \"\ub78c\ub2e4\"\ub77c\uace0\ub3c4 \ud55c\ub2e4)\uc740 \ud568\uc218 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\ub3c4\ub85d \ud558\ub294 \ud45c\uae30\ub97c \uc758\ubbf8\ud55c\ub2e4. \ud568\uc218 \uac1c\uccb4\ub294 \uac00\ub2a5\ud55c \ubcf5\uc0ac \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4 (\ub610 \uadf8\ub807\uae30\uc5d0 \uac12\uc5d0 \uc758\ud55c \uc804\ub2ec \uc774 \uc0ac\uc6a9\ub41c\ub2e4). \uc694\uc57d: F.50: \ud568\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c (\uc9c0\uc5ed \ubcc0\uc218\ub97c \ubcf5\uc0ac\ud558\uac70\ub098, \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\ub294 \uacbd\uc6b0) F.52: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uac70\ub098 \uc54c\uace0\ub9ac\uc998\uc5d0 \uc804\ub2ec\ub41c\ub2e4\uba74 \ub78c\ub2e4 \ucea1\uccd0\ub85c\ub294 \ucc38\uc870\ub97c \uc120\ud638\ud558\ub77c F.53: \ubc18\ud658\ub418\uac70\ub098, \uc678\ubd80\uc5d0 \uc800\uc7a5\ub418\uac70\ub098, \ub2e4\ub978 \uc2a4\ub808\ub4dc\ub85c \uc804\ub2ec\ud558\ub294 \uacbd\uc6b0\ucc98\ub7fc \ube44 \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 \ub78c\ub2e4\uc758 \ucc38\uc870 \ucea1\uccd0\ub97c \uc9c0\uc591\ud558\ub77c ES.28: \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\uc5d0\ub294, \ud2b9\ud788 \uc0c1\uc218 \ubcc0\uc218\ub4e4\uc758 \ucd08\uae30\ud654\uc5d0\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c C.hier: \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 (OOP) \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub294 \uacc4\uce35\uc801\uc73c\ub85c \uc870\uc9c1\ud654\ub41c \uac1c\ub150\ub4e4\uc758 \uc9d1\ud569\uc744 \ud45c\ud604\ud558\uba74\uc11c (\uc624\uc9c1 \uadf8\ub7f0 \uacbd\uc6b0\uc5d0\ub9cc) \uc0dd\uc131\ub41c\ub2e4. \ubcf4\ud1b5 \uc0c1\uc704 \ud074\ub798\uc2a4(base class)\ub4e4\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub85c\uc368 \ub3d9\uc791\ud55c\ub2e4. \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub294 \ub300\ud45c\uc801\uc778 \uc608\ub85c\ub294 2\uac00\uc9c0\uac00 \uc788\ub294\ub370, \uad6c\ud604 \uc0c1\uc18d\uacfc \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc73c\ub85c \ubd88\ub9b0\ub2e4. \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 \uaddc\uce59 \uc694\uc57d: C.120: \uacc4\uce35\uc801\uc778 \uad6c\uc870\ub97c \uac00\uc9c4 \uac1c\ub150\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub9cc \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c C.121: \uc0c1\uc704 \ud074\ub798\uc2a4\uac00 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74, \uc21c\uc218 \uac00\uc0c1 \ud074\ub798\uc2a4\ub85c \ub9cc\ub4e4\uc5b4\ub77c C.122: \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc758 \ubd84\ub9ac\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc744 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0ac\uc6a9\ud558\ub77c \uacc4\uce35 \uad6c\uc870 \ub0b4 \ud074\ub798\uc2a4 \uc124\uacc4 \uaddc\uce59 \uc694\uc57d: C.126: \uc77c\ubc18\uc801\uc73c\ub85c \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \uc0dd\uc131\uc790\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4 C.127: \uac00\uc0c1\ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub294 \uacf5\uac1c(public)\ub41c \uac00\uc0c1(virtual) \ud639\uc740 \uc0c1\uc18d\ub418\ub294(protected) \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4 C.128: \uac00\uc0c1 \ud568\uc218\ub4e4\uc740 virtual , override , \ud639\uc740 final \uc911 \ud558\ub098\ub9cc \uba85\uc2dc\ud574\uc57c \ud55c\ub2e4 C.129: \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \uc815\uc758\ud560 \ub54c\ub294 \uad6c\ud604 \uc0c1\uc18d\uacfc \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc744 \uad6c\ubd84\ud558\ub77c C.130: \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\uc5d0\uc11c \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc9c0\uc6d0\ud558\uac8c \ud558\ub824\uba74 \ubcf5\uc0ac \uc0dd\uc131/\ub300\uc785 \ubcf4\ub2e4\ub294 \uac00\uc0c1 clone \uc744 \uc120\ud638\ud558\ub77c C.131: \uc790\uc798\ud55c getter\uc640 setter\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c C.132: \uc774\uc720\uc5c6\uc774 \ud568\uc218\ub97c virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c C.133: protected \ub370\uc774\ud130\ub97c \uc9c0\uc591\ud558\ub77c C.134: const \uac00 \uc544\ub2cc \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc774 \uac19\uc740 \uc811\uadfc \ub808\ubca8\uc744 \uac00\uc9c0\ub3c4\ub85d \ud558\ub77c C.135: \uc11c\ub85c \ub2e4\ub978 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub77c C.136: \uad6c\ud604 \ud2b9\uc131(attribute)\uc758 \uacb0\ud569\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub77c C.137: \uc9c0\ub098\uce58\uac8c \uc77c\ubc18\uc801\uc778 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \ud53c\ud558\uae30 \uc704\ud574 virtual \uc744 \uc0ac\uc6a9\ud558\ub77c C.138: using \uc744 \uc0ac\uc6a9\ud574 \uc0c1\uc704/\ud558\uc704 \ud074\ub798\uc2a4\ub97c \uc704\ud55c \uc911\ubcf5 \uc815\uc758 \uc9d1\ud569\uc744 \ub9cc\ub4e4\uc5b4\ub77c C.139: final \uc740 \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc0ac\uc6a9\ud558\ub77c C.140: \uac00\uc0c1 \ud568\uc218\uc640 \uadf8 \uad6c\ud604 \ud568\uc218\uc5d0 \uc11c\ub85c \ub2e4\ub978 \uae30\ubcf8 \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c \uacc4\uce35 \uad6c\uc870 \ub0b4 \uac1c\uccb4 \uc811\uadfc \uaddc\uce59 \uc694\uc57d: C.145: \ub2e4\ud615\uc801\uc778 \uac1c\uccb4\ub4e4\uc740 \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub97c \ud1b5\ud574 \uc811\uadfc\ud558\ub77c C.146: \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 \ud0d0\uc0c9\uc774 \ubd88\uac00\ud53c\ud55c \uacbd\uc6b0\uc5d0\ub9cc dynamic_cast \ub97c \uc0ac\uc6a9\ud558\ub77c C.147: \ud544\uc694\ud55c \ud074\ub798\uc2a4\ub97c \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uac00 \uc624\ub958\uc5d0 \ud574\ub2f9\ud558\ub294 \uacbd\uc6b0 dynamic_cast \ub97c \ucc38\uc870 \ud0c0\uc785\uc5d0 \uc0ac\uc6a9\ud558\ub77c C.148: \ud544\uc694\ud55c \ud074\ub798\uc2a4\ub97c \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uac00 \ub300\uc548\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 dynamic_cast \ub97c \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \uc0ac\uc6a9\ud558\ub77c C.149: \ub3d9\uc801 \ud560\ub2f9\ud55c \uac1c\uccb4\uc758 \uc18c\uba78\uc744 \uc78a\uc9c0 \uc54a\ub3c4\ub85d unique_ptr \ud639\uc740 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c C.150: unique_ptr \ub85c \uc18c\uc720\ub418\ub294 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 make_unique() \ub97c \uc0ac\uc6a9\ud558\ub77c C.151: shared_ptr \ub85c \uc18c\uc720\ub418\ub294 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 make_shared() \ub97c \uc0ac\uc6a9\ud558\ub77c C.152: \uc808\ub300\ub85c \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\uc5d0 \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \ub300\uc785\ud558\uc9c0 \ub9c8\ub77c C.153: \ud0c0\uc785 \uce90\uc2a4\ud305\ubcf4\ub2e4 \uac00\uc0c1 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c C.120: \uacc4\uce35\uc801\uc778 \uad6c\uc870\ub97c \uac00\uc9c4 \uac1c\ub150\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub9cc \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc0dd\uac01\uc774 \ubc14\ub85c \ucf54\ub4dc\ub85c \ub098\ud0c0\ub098\ub294 \uac83\uc740 \uc774\ud574\uc640 \uc720\uc9c0\ubcf4\uc218\ub97c \uc27d\uac8c \ub9cc\ub4e0\ub2e4. \uc0dd\uac01\uc774 \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \ub098\ud0c0\ub098\uace0 \ud558\uc704 \ud0c0\uc785\uc5d0\uc11c \uc774\ub97c \ub530\ub974\uac8c \ud558\ub77c. \uc774 \ubaa9\uc801\uc744 \ub2f4\uc544\ub0b4\uae30 \uc704\ud55c \ubc29\ubc95\uc73c\ub85c \uc0c1\uc18d\ubcf4\ub2e4 \uc88b\uc740 \ubc29\ubc95\uc740 \uc5c6\ub2e4. \ub370\uc774\ud130 \uba64\ubc84\ub97c \ub2f4\uae30 \uc704\ud55c \ubc29\ubc95\uc73c\ub85c \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud574\uc120 \uc548\ub41c\ub2e4 . \ub9ce\uc740 \uacbd\uc6b0 \uc0c1\uc18d\uc740 \ud558\uc704 \ud0c0\uc785\uc774 \uc0c1\uc704 \uac00\uc0c1 \ud568\uc218\ub97c \uc7ac\uc815\uc758\ud558\uac70\ub098 \uba64\ubc84\uc5d0 \uc811\uadfc\ud560 \ud544\uc694\ud55c \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4. Example class DrawableUIElement { public : virtual void render () const = 0 ; // ... }; class AbstractButton : public DrawableUIElement { public : virtual void onClick () = 0 ; // ... }; class PushButton : public AbstractButton { virtual void render () const override ; virtual void onClick () override ; // ... }; class Checkbox : public AbstractButton { // ... }; Example, bad \uacc4\uce35\uc801\uc774\uc9c0 \uc54a\uc740 \uac1c\ub150\uc744 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub85c \ud45c\ud604\ud574\uc120 \uc548\ub41c\ub2e4 . template < typename T > class Container { public : // list operations: virtual T & get () = 0 ; virtual void put ( T & ) = 0 ; virtual void insert ( Position ) = 0 ; // ... // vector operations: virtual T & operator []( int ) = 0 ; virtual void sort () = 0 ; // ... // tree operations: virtual void balance () = 0 ; // ... }; \uc704 \uc608\uc5d0\uc11c \ub300\ubd80\ubd84\uc758 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc740 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uc694\uad6c\ud558\ub294 \ud568\uc218\ub4e4\uc744 \uc798 \uc7ac\uc815\uc758(override)\ud560 \uc218 \uc5c6\ub2e4. \ub54c\ubb38\uc5d0 \uc0c1\uc704 \ud074\ub798\uc2a4\ub294 \uad6c\ud604 \ubd80\ub2f4\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. \ub098\uc544\uac00\uc11c, Container \uc758 \uc0ac\uc6a9\uc790\ub294 \uba64\ubc84 \ud568\uc218\ub4e4\uc774 \uc2e4\uc81c\ub85c \uc720\uc758\ubbf8\ud55c \uc5f0\uc0b0\ub4e4\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc2e4\ud589\ud558\ub294\uc9c0 \uc2e0\ub8b0\ud560 \uc218 \uc5c6\ub2e4: \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\uace0 \uc608\uc678\ub97c \ub358\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \uc774 \ub54c\ubb38\uc5d0 \uc720\uc800\ub294 \uc2e4\ud589 \uc2dc\uac04 \uac80\uc0ac\uc5d0 \uc758\uc874\ud558\uac70\ub098 \uc774\uc640 \uac19\uc740 (\uacfc\ub3c4\ud558\uac8c) \uc77c\ubc18\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 ( dynamic_cast \uc640 \uac19\uc740) \uc2e4\ud589\uc2dc\uac04 \ud0c0\uc785 \ud655\uc778\uc744 \uc0ac\uc6a9\ud560 \uac83\uc774\ub2e4. Enforcement \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uace0 \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uba64\ubc84\uac00 \ub9ce\uc740 \ud074\ub798\uc2a4\ub97c \ucc3e\uc544\ub0b8\ub2e4 \uc0c1\uc704 \ud074\ub798\uc2a4 B \uc758 \uac00\uc0c1\ud568\uc218\ub97c \ud558\uc704 \ud074\ub798\uc2a4 D \uac00 \uad6c\ud604\ud558\uc9c0 \uc54a\uac70\ub098 B \uba64\ubc84\uc5d0 \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c. \uc774\ub54c B \ub294 \ub2e4\uc74c\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4: \uba64\ubc84 \ubcc0\uc218\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294\ub2e4. D \uc758 \ud15c\ud50c\ub9bf \uc778\uc790 \ud639\uc740 \uc778\uc790 \ubb36\uc74c(pack)\uc774 \uc544\ub2c8\ub2e4. D \ub97c \uc0ac\uc6a9\ud574 \ud2b9\uc218\ud654\ub41c \ud15c\ud50c\ub9bf\uc774\ub2e4. C.121: \uc0c1\uc704 \ud074\ub798\uc2a4\uac00 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74, \uc21c\uc218 \uac00\uc0c1 \ud074\ub798\uc2a4\ub85c \ub9cc\ub4e4\uc5b4\ub77c Reason \ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc73c\uba74 \ub354 \uc548\uc815\uc801\uc774\ub2e4. \uc778\ud130\ud398\uc774\uc2a4\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc21c\uc218 \uac00\uc0c1 \ud568\uc218\uc640 \uae30\ubcf8/\ube44\uc5b4\uc788\ub294 \uac00\uc0c1 \uc18c\uba78\uc790\ub85c \uad6c\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4 Example class My_interface { public : // ...only pure virtual functions here ... virtual ~ My_interface () {} // or =default }; Example, bad class Goof { public : // ...only pure virtual functions here ... // no virtual destructor }; class Derived : public Goof { string s ; // ... }; void use () { unique_ptr < Goof > p { new Derived { \"here we go\" }}; f ( p . get ()); // use Derived through the Goof interface g ( p . get ()); // use Derived through the Goof interface } // leak Derived \ud074\ub798\uc2a4\ub294 Goof \ub97c \ud1b5\ud574\uc11c \uc18c\uba78\ub418\uae30 \ub54c\ubb38\uc5d0, \uba64\ubc84 string \uc5d0\uc11c \ub204\uc218\uac00 \ubc1c\uc0dd\ud55c\ub2e4. Goof \uc5d0\uc11c \uac00\uc0c1 \uc18c\uba78\uc790\ub97c \uc81c\uacf5\ud558\uba74 \ubaa8\ub4e0\uac8c \uc6d0\ud65c\ud558\uac8c \ub3cc\uc544\uac04\ub2e4. Enforcement \ud074\ub798\uc2a4\uac00 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uac00\uc9c0\uba74\uc11c ( final \uc774 \uc544\ub2cc) \uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c0\uba74 \uacbd\uace0\ud55c\ub2e4 C.122: \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc758 \ubd84\ub9ac\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc744 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0ac\uc6a9\ud558\ub77c Reason \uc608\ub97c \ub4e4\uc5b4 ABI(Application Binary Interface)\ub97c \uc0ac\uc6a9\ud558\ub294 \uc9c0\uc810\uc5d0\uc11c \uc774\ub7f0 \uc791\uc5c5\uc774 \ud544\uc694\ud558\ub2e4. Example struct Device { virtual ~ Device () = default ; virtual void write ( span < const char > outbuf ) = 0 ; virtual void read ( span < char > inbuf ) = 0 ; }; class D1 : public Device { // ... data ... void write ( span < const char > outbuf ) override ; void read ( span < char > inbuf ) override ; }; class D2 : public Device { // ... different data ... void write ( span < const char > outbuf ) override ; void read ( span < char > inbuf ) override ; }; \uc704\uc640 \uac19\uc740 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\uc790\ub294 Device \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574\uc11c D1 \uacfc D2 \ub97c \uad50\ud658\ud558\uba74\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub098\uc544\uac00\uc11c, Device \ub97c \ud1b5\ud574\uc11c \uc811\uadfc\ub418\ub294 \ud55c D1 \uacfc D2 \ub97c \uad6c \ubc84\uc804\uacfc \ud638\ud658\ub418\uc9c0 \uc54a\ub3c4\ub85d(not binary compatible) \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\ub2e4. Enforcement ??? C.hierclass: \uacc4\uce35 \uad6c\uc870 \ub0b4 \ud074\ub798\uc2a4 \uc124\uacc4 C.126: \uc77c\ubc18\uc801\uc73c\ub85c \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \uc0dd\uc131\uc790\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4 Reason \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc73c\uba70 \uc774\ub97c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud55c \uc0dd\uc131\uc790 \ub610\ud55c \uac00\uc9c0\uc9c0 \uc54a\ub294\ub2e4. Example ??? Exception \uac1c\uccb4\ub97c \uc5b4\ub518\uac00\uc5d0 \ub4f1\ub85d\ud558\uae30 \uc704\ud55c \uc0c1\uc704 \ud074\ub798\uc2a4 \uc0dd\uc131\uc790\uac00 \ud544\uc694\ud560 \uc218\ub3c4 \uc788\ub2e4 \uadf9\ud788 \ub4dc\ubb38 \uacbd\uc6b0\uc774\uc9c0\ub9cc, \ucd94\uc0c1 \ud074\ub798\uc2a4\uac00 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc774 \uacf5\uc720\ud558\ub294 \ub370\uc774\ud130\ub97c \uac00\uc9c0\ub294 \uac83\uc774 \ud0c0\ub2f9\ud55c \uacbd\uc6b0\uac00 \uc788\uc744 \uc218 \uc788\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, \uc815\uc801 \ub370\uc774\ud130, \ub514\ubc84\uae45 \uc815\ubcf4 \ub4f1); \uadf8\ub7ec\ud55c \ud074\ub798\uc2a4\ub4e4\uc740 \uc0dd\uc131\uc790\ub97c \uac00\uc9c4\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc758\ud558\ub77c; \uadf8\ub7f0 \uacbd\uc6b0\ub294 \uac00\uc0c1 \uc0c1\uc18d\uc5d0 \ucde8\uc57d\ud558\ub2e4 Enforcement \uc0dd\uc131\uc790\ub97c \uac00\uc9c4 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c C.127: \uac00\uc0c1\ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub294 \uacf5\uac1c(public)\ub41c \uac00\uc0c1(virtual) \ud639\uc740 \uc0c1\uc18d\ub418\ub294(protected) \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4 Reason \uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub4e4\uc740 \ubcf4\ud1b5 \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574\uc11c \uc0ac\uc6a9\ub41c\ub2e4. \ub9ce\uc740 \uacbd\uc6b0, \ub9c8\uc9c0\ub9c9 \uc0ac\uc6a9\uc790\uac00 \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 delete \ud558\uac70\ub098 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud574 \uc18c\uba78\uc2dc\ud0a8\ub2e4. \ub54c\ubb38\uc5d0 \uc18c\uba78\uc790\ub294 public \ubc94\uc704\uc5d0 \uc788\uc73c\uba74\uc11c \uac00\uc0c1 \ud568\uc218\uc5ec\uc57c \ud55c\ub2e4. \ub4dc\ubb3c\uac8c\ub294, \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud55c \uc18c\uba78\uc744 \uc758\ub3c4\uc801\uc73c\ub85c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \uc18c\uba78\uc790\ub294 protected \ubc94\uc704\uc5d0 \uc788\uc73c\uba74\uc11c \uac00\uc0c1 \ud568\uc218\uac00 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4; C.35 \ub97c \ucc38\uace0\ud558\ub77c Example, bad struct B { virtual int f () = 0 ; // ... no user-written destructor, defaults to public nonvirtual ... }; // bad: derived from a class without a virtual destructor struct D : B { string s { \"default\" }; }; void use () { unique_ptr < B > p = make_unique < D > (); // ... } // undefined behavior. May call B::~B only and leak the string Note shared_ptr \ub97c \ud1b5\ud574 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \uc774 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294 \uc0ac\ub78c\ub4e4\ub3c4 \uc788\ub2e4: std::shared_ptr<B> p = std::make_shared<D>(args); \uc774\ub7f0 \uacbd\uc6b0, \uacf5\uc720 \ud3ec\uc778\ud130\uac00 \uc18c\uba78\uc744 \ub2f4\ub2f9\ud560 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub2c8 \ubd80\uc801\uc808\ud55c \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 delete \ub85c \uc778\ud55c \ub204\uc218\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub97c \uacc4\uc18d\ud558\ub294 \uc0ac\ub78c\ub4e4\uc740 \uc798\ubabb\ub41c \ucf54\ub4dc\ub85c\ubd80\ud130 \uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc744 \ub9cc\ub4e4\uc5b4\ub0b8\ub2e4 (false positive), \uadf8\ub807\uc9c0\ub9cc \uc774 \uaddc\uce59\uc740 \uc911\uc694\ud558\ub2e4 -- \ub9cc\uc57d \ub204\uad70\uac00 make_unique \ub97c \uc0ac\uc6a9\ud574 \ud560\ub2f9\ud558\uba74 \uc5b4\ub5bb\uac8c \ub420 \uac83\uc778\uac00? B \uc758 \uc791\uc131\uc790\uac00 \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub97c private\ub85c \ub9cc\ub4e4\uace0 make_shared \ub97c \ud1b5\ud574\uc11c\ub9cc \uc0dd\uc131\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc81c\uacf5\ud574\uc11c \uc798\ubabb \uc0ac\uc6a9\ub420 \uac83\uc774\ub77c\uace0 \ubcf4\uc7a5\ud558\uc9c0 \uc54a\ub294 \ud55c, \uc774 \ucf54\ub4dc\ub294 \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4. Enforcement \uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub294 \uacf5\uac1c(public)\ub41c \uac00\uc0c1(virtual) \ud639\uc740 \uc0c1\uc18d\ub418\ub294(protected) \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4 \uac00\uc0c1 \uc18c\uba78\uc790\ub97c \uac00\uc9c0\uc9c0 \uc54a\uace0 \uac00\uc0c1 \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 delete \ud558\ub294 \ud074\ub798\uc2a4\ub97c \uc9c0\uc801\ud558\ub77c C.128: \uac00\uc0c1 \ud568\uc218\ub4e4\uc740 virtual , override , \ud639\uc740 final \uc911 \ud558\ub098\ub9cc \uba85\uc2dc\ud574\uc57c \ud55c\ub2e4 Reason \uac00\ub3c5\uc131. \uc2e4\uc218\ub97c \ubc1c\uacac\ud560 \uc218 \uc788\ub2e4. \uba85\uc2dc\uc801\uc73c\ub85c virtual , override , final \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud568\uc218 \uc790\uccb4\ub97c \ubb38\uc11c\ud654\ud55c\ub2e4. \ub3d9\uc2dc\uc5d0 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0c1\uc704 \ud074\ub798\uc2a4\uc640 \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud0c0\uc785 \ud639\uc740 \uc774\ub984\uc774 \ubd88\uc77c\uce58 \ud558\ub294 \uac83\uc744 \uc7a1\uc544\ub0bc \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub4e4\uc744 \ud558\ub098 \uc774\uc0c1 \uc791\uc131\ud558\ub294 \uac83\uc740 \uc911\ubcf5\uc801\uc774\uba74\uc11c \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ud558\ub098\ub9cc \uc791\uc131\ud558\ub294 \uac83\uc774 \ub2e8\uc21c\ud558\uace0 \uba85\ud655\ud558\ub2e4: virtual \ub294 \"\uc0c8\ub85c\uc6b4 \uac00\uc0c1 \ud568\uc218\"\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 override \ub294 \"\uc7ac\uc815\uc758 \ub420 \uc218 \uc788\ub294(non- final ) \uc7ac\uc815\uc758 \ud568\uc218\"\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 final \ub294 \"\ub9c8\uc9c0\ub9c9 \uc7ac\uc815\uc758 \ud568\uc218\"\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 \ub9cc\uc57d \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\uac00 virtual \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74, \ud558\uc704 \ud074\ub798\uc2a4 \uc18c\uba78\uc790\ub4e4\uc740 virtual \ud639\uc740 override \uac00 \ub41c\ub2e4. \uc5b4\ub5a4 \ucf54\ub4dc \ud639\uc740 \uc9c0\uc6d0\ub3c4\uad6c\uc5d0\uc11c \uc18c\uba78\uc790\uc5d0 override \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uac15\uc694\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c\ub294 \uadf8 \ubc29\ubc95\uc740 \uad8c\ud558\uc9c0 \uc54a\ub294\ub2e4. Example, bad struct B { void f1 ( int ); virtual void f2 ( int ) const ; virtual void f3 ( int ); // ... }; struct D : B { void f1 ( int ); // bad (hope for a warning): D::f1() hides B::f1() void f2 ( int ) const ; // bad (but conventional and valid): no explicit override void f3 ( double ); // bad (hope for a warning): D::f3() hides B::f3() // ... }; Example, good struct Better : B { void f1 ( int ) override ; // error (caught): D::f1() hides B::f1() void f2 ( int ) const override ; void f3 ( double ) override ; // error (caught): D::f3() hides B::f3() // ... }; Discussion \uc6b0\ub9ac\ub294 \uc774 \uaddc\uce59\uc744 \ud1b5\ud574 2\uac00\uc9c0 \uc624\ub958\ub97c \uc5c6\uc560\uace0\uc790 \ud55c\ub2e4: \uc554\ubb35\uc801 \uac00\uc0c1\ud568\uc218 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc554\ubb35\uc801 \uac00\uc0c1 \ud568\uc218\ub97c \uc758\ub3c4\ud588\uc73c\uba70, \uc2e4\uc81c\ub85c \uadf8\uc5d0 \ud574\ub2f9\ud558\ub294 \uacbd\uc6b0 (\ud558\uc9c0\ub9cc \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc740 \uc54c\uc544\ubcfc \uc218 \uc5c6\ub2e4) \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc554\ubb35\uc801 \uac00\uc0c1 \ud568\uc218\ub97c \uc758\ub3c4\ud588\uc73c\ub098 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 (\uc608\ub97c \ub4e4\uc5b4 \uc778\uc790\uac00 \ubbf8\ubb18\ud558\uac8c \ub9de\uc9c0 \uc54a\uc558\ub2e4\uac70\ub098\ud558\ub294 \uc774\uc720\ub85c) \ud504\ub85c\uadf8\ub798\uba38\uac00 \uac00\uc0c1 \ud568\uc218\ub97c \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\uc73c\ub098 \uac00\uc0c1 \ud568\uc218\uac00 \ub41c \uacbd\uc6b0 (\uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uac00\uc0c1 \ud568\uc218\uc640 \uac19\uc740 \uc2dc\uadf8\ub2c8\ucc98\ub97c \uac00\uc9c0\ub294 \ubc14\ub78c\uc5d0) \uc554\ubb35\uc801 \uc7ac\uc815\uc758 \ud504\ub85c\uadf8\ub798\uba38\ub294 \ud568\uc218\uac00 \uc554\ubb35\uc801\uc73c\ub85c \uc7ac\uc815\uc758\ub418\ub294 \uac83\uc744 \uc758\ub3c4\ud588\uace0 \uadf8\ub807\uac8c \ub41c \uacbd\uc6b0 (\ud558\uc9c0\ub9cc \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc740 \uc54c\uc544\ubcfc \uc218 \uc5c6\ub2e4) \ud504\ub85c\uadf8\ub798\uba38\ub294 \ud568\uc218\uac00 \uc554\ubb35\uc801\uc73c\ub85c \uc7ac\uc815\uc758\ub418\ub294 \uac83\uc744 \uc758\ub3c4\ud588\uc73c\ub098 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 (\uc608\ub97c \ub4e4\uc5b4 \uc778\uc790\uac00 \ubbf8\ubb18\ud558\uac8c \ub9de\uc9c0 \uc54a\uc558\ub2e4\uac70\ub098\ud558\ub294 \uc774\uc720\ub85c) \ud504\ub85c\uadf8\ub798\uba38\uac00 \ud568\uc218\uac00 \uc7ac\uc815\uc758 \ub418\ub294 \uac83\uc744 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\uc73c\ub098 \uc7ac\uc815\uc758 \ub41c \uacbd\uc6b0 (\uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uac00\uc0c1 \ud568\uc218\uc640 \uac19\uc740 \uc2dc\uadf8\ub2c8\ucc98\ub97c \uac00\uc9c0\ub294 \ubc14\ub78c\uc5d0 -- \uc774\ub7f0 \uc77c\uc740 \uadf8 \ud568\uc218\uac00 virtual\ub85c \uc120\uc5b8\ub418\uc9c0 \uc54a\uc544\ub3c4 \ubc1c\uc0dd\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c, \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc0c8\ub85c\uc6b4 \uac00\uc0c1 \ud568\uc218\ub97c \ub9cc\ub4e4\uae30\ub97c \uc6d0\ud588\ub294\uc9c0 \ube44 \uac00\uc0c1 \ud568\uc218\ub97c \uc6d0\ud588\ub294\uc9c0 \uc54c \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4) Enforcement \uc0c1\uc704 \ud074\ub798\uc2a4\uc640 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc758 \uc774\ub984\uc744 \ube44\uad50\ud558\uace0 \uac19\uc740 \uc774\ub984\uc744 \uc4f0\uba74\uc11c \uc7ac\uc815\uc758\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c override \uc640 final \uc911 \uc5b4\ub290 \ud558\ub098\ub3c4 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 \uc7ac\uc815\uc758\ub97c \uc9c0\uc801\ud558\ub77c virtual , override , final \uc911 2\uac1c \uc774\uc0c1\uc744 \uc0ac\uc6a9\ud55c \ud568\uc218 \uc120\uc5b8\uc744 \uc9c0\uc801\ud558\ub77c C.129: \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \uc815\uc758\ud560 \ub54c\ub294 \uad6c\ud604 \uc0c1\uc18d\uacfc \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc744 \uad6c\ubd84\ud558\ub77c Reason \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uad6c\ud604 \ub0b4\uc6a9\uc744 \uac00\uc9c0\ub294 \uac83\uc740 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub9dd\uac00\uc9c0\uae30 \uc27d\uac8c \ud55c\ub2e4; \ub2ec\ub9ac \ub9d0\ud574, \uc778\ud130\ud398\uc774\uc2a4\uc758 \uc0ac\uc6a9\uc790\ub4e4\uc774 \uad6c\ud604\uc744 \ubc14\uafbc \ub4a4\uc5d0 \ub2e4\uc2dc \ucef4\ud30c\uc77c\ud560 \ub54c \uc601\ud5a5\uc744 \ubc1b\uac8c \ud55c\ub2e4. \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub294 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\ub294 \uac83\uc744 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uace0 \ucf54\ub4dc \uc911\ubcf5\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. Note \uc815\uc758: \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc740 \uc0ac\uc6a9\uc790 \ucf54\ub4dc\ub97c \uad6c\ud604\uacfc \ubd84\ub9ac\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc73c\uba74\uc11c \ucf54\ub4dc\ub97c \ub354\ud558\uac70\ub098 \ubcc0\uacbd\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4 \uad6c\ud604 \uc0c1\uc18d\uc740 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud574 \uc0c8\ub85c\uc6b4 \uad6c\ud604\ub0b4\uc6a9\uc744 \ud558\uc704 \uad6c\ud604\uccb4\ub4e4\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d\ud558\ub294 \uac83\uc774\ub2e4 (\ubcf4\ud1b5 \"programming by difference\"\ub77c\uace0 \ubd88\ub9b0\ub2e4). \uc21c\uc218\ud55c \uc778\ud130\ud398\uc774\uc2a4 \ud074\ub798\uc2a4\ub294 \uc27d\uac8c\ub9d0\ud574 \uc21c\uc218 \uac00\uc0c1\ud568\uc218\ub4e4\uc758 \uc9d1\ud569\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4; I.25 \ub97c \ucc38\uace0\ud558\ub77c. \ucd08\ucc3d\uae30\uc758 \uac1c\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c\ub294 (1980\ub144\ub3c4\uc640 1990\ub144\ub3c4), \uad6c\ud604 \uc0c1\uc18d\uacfc \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc774 \ud63c\uc7ac\ub418\uc5b4 \uc788\uc5c8\uace0 \uadf8\ub7f0 \uc778\uc2b5\uc774 \uc544\uc9c1\ub3c4 \ub0a8\uc544\uc788\ub2e4. \uc624\ub798\ub41c \ucf54\ub4dc\ub098 \uad50\uc721\uc790\ub8cc\uc5d0\uc11c\ub294 \ud754\ud788 \ubcfc \uc218 \uc788\ub2e4. \uc544\ub798\uc758 \uacbd\uc6b0 2\uac00\uc9c0 \uc0c1\uc18d\uc744 \uad6c\ubd84\ud558\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4 \uacc4\uce35\uad6c\uc870\uc758 \ud06c\uae30\uac00 \ucee4\uc9c4\ub2e4(\uc2ed\uc218\uac1c\uc758 \ud558\uc704 \ud074\ub798\uc2a4\uac00 \uc874\uc7ac\ud55c\ub2e4) \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub294 \uc2dc\uac04\uc774 \uae38\uc5b4\uc9c4\ub2e4 (\uc218\uc2ed\ub144) \uc11c\ub85c \ub2e4\ub978 \uc870\uc9c1\uc774 \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4 (\uc989, \ud769\uc5b4\uc9c4 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\uae30 \uc5b4\ub835\ub2e4) Example, bad class Shape { // BAD, mixed interface and implementation public : Shape (); Shape ( Point ce = { 0 , 0 }, Color co = none ) : cent { ce }, col { co } { /* ... */ } Point center () const { return cent ; } Color color () const { return col ; } virtual void rotate ( int ) = 0 ; virtual void move ( Point p ) { cent = p ; redraw (); } virtual void redraw (); // ... private : Point cent ; Color col ; }; class Circle : public Shape { public : Circle ( Point c , int r ) : Shape { c }, rad { r } { /* ... */ } // ... private : int rad ; }; class Triangle : public Shape { public : Triangle ( Point p1 , Point p2 , Point p3 ); // calculate center // ... }; \uc704 \uc608\uc2dc\ub294 \uc544\ub798\uc640 \uac19\uc740 \ubb38\uc81c\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4: \uacc4\uce35\uad6c\uc870\uac00 \ub298\uace0 Shape \uc758 \ub370\uc774\ud130\uac00 \ub298\uc5b4\ub09c\ub2e4. \uc0dd\uc131\uc790\ub97c \uc791\uc131\ud558\uace0 \uad00\ub9ac\ud558\uae30 \uc5b4\ub824\uc6cc\uc9c4\ub2e4 Triangle \uc758 \uc911\uc2ec\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744\uc9c0\ub3c4 \ubaa8\ub974\ub294\ub370 \uacc4\uc0b0\ud560 \ud544\uc694\uac00 \uc788\uc744\uae4c? Shape \uc5d0 \uc0c8\ub85c\uc6b4 \uba64\ubc84\ub97c \ucd94\uac00\ub418\uba74 (\uc608\ucee8\ub300 \uadf8\ub9ac\ub294 \ubc29\ubc95\uc774\ub77c\ub358\uac00 \uadf8\ub9ac\ub294 \uce94\ubc84\uc2a4), \ubaa8\ub4e0 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc774 \ubcc0\ud654\ub418\uba74\uc11c \uc0c8\ub85c \ucef4\ud30c\uc77c \ub418\uc5b4\uc57c \ud55c\ub2e4 Shape::move() \uac00 \uad6c\ud604 \uc0c1\uc18d\uc758 \ud55c \uc0ac\ub840\uc774\ub2e4: \uc0c1\uc704 \ud074\ub798\uc2a4\uc640 \ubaa8\ub4e0 \ud558\uc704 \ud074\ub798\uc2a4\ub97c \uc704\ud574\uc11c move() \ub97c \ud55c\ubc88\ub9cc \uc815\uc758\ud55c\ub2e4. \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ub354 \ub9ce\uc740 \uba64\ubc84\ud568\uc218 \ucf54\ub4dc\uac00 \uc791\uc131\ub420\uc218\ub85d,\ub354 \ub9ce\uc740 \ub370\uc774\ud130\uac00 \uacf5\uc720\ub420\uc218\ub85d, \ucf54\ub4dc\ub97c \uc801\uac8c \uc791\uc131\ud558\ub294 \ud6a8\uc6a9\uc774 \uc0dd\uae30\uc9c0\ub9cc \uacc4\uce35\uad6c\uc870\uac00 \ubd88\uc548\uc815\ud558\uac8c \ub41c\ub2e4. Example \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud574 Shape \uacc4\uce35\uc744 \ub2e4\uc2dc \uc791\uc131\ud558\uba74 \uc774\ub807\ub2e4: class Shape { // pure interface public : virtual Point center () const = 0 ; virtual Color color () const = 0 ; virtual void rotate ( int ) = 0 ; virtual void move ( Point p ) = 0 ; virtual void redraw () = 0 ; // ... }; \uc21c\uc218 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc774 \uc0dd\uc131\uc790\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c: \uc0dd\uc131\ud560 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. class Circle : public Shape { public : Circle ( Point c , int r , Color c ) : cent { c }, rad { r }, col { c } { /* ... */ } Point center () const override { return cent ; } Color color () const override { return col ; } // ... private : Point cent ; int rad ; Color col ; }; \uc778\ud130\ud398\uc774\uc2a4\ub294 \uc774\uc81c \uc880 \ub354 \uacac\uace0\ud574\uc84c\uc9c0\ub9cc, \uba64\ubc84 \ud568\uc218\uc758 \uad6c\ud604\uc744 \uc704\ud574 \ub354 \ub9ce\uc740 \uc791\uc5c5\uc744 \ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, center \ub294 \ubaa8\ub4e0 \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \uc81c\uac01\uae30 \uad6c\ud604\ud574\uc57c \ud55c\ub2e4. Example, dual hierarchy \uc5b4\ub5bb\uac8c \ud558\uba74 \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc5d0 \uc758\ud55c \uc548\uc815\uc801\uc778 \uacc4\uce35\uad6c\uc870\uc640 \uad6c\ud604 \uc0c1\uc18d\uc758 \ud6a8\uc728\uc801\uc778 \uc7ac\uc0ac\uc6a9\uc744 \uacb0\ud569\ud560 \uc218 \uc788\uc744\uae4c? \uad00\ub828\ud574\uc11c \uc720\uba85\ud55c \ubc29\uc2dd \uc911 \ud558\ub098\ub294 \uc774\uc911 \uacc4\uce35(dual hierarchies) \ubc29\uc2dd\uc774\ub2e4. \uc5ec\ub7ec \ubc29\uc2dd\ub4e4\uc774 \uc788\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \ub2e4\uc911 \uc0c1\uc18d \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uccab\ubc88\uc9f8\ub85c \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc744 \ub9cc\ub4e0\ub2e4: class Shape { // pure interface public : virtual Point center () const = 0 ; virtual Color color () const = 0 ; virtual void rotate ( int ) = 0 ; virtual void move ( Point p ) = 0 ; virtual void redraw () = 0 ; // ... }; class Circle : public Shape { // pure interface public : virtual int radius () = 0 ; // ... }; \uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc720\uc6a9\ud558\uac8c \ub9cc\ub4dc\ub824\uba74, \uad6c\ud604 \ud074\ub798\uc2a4\ub4e4\uac00 \ud544\uc694\ud558\ub2e4. (\uc5ec\uae30\uc11c\ub294 Impl \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \ud074\ub798\uc2a4\ub97c \ud558\ub098 \ub354 \uc815\uc758\ud55c\ub2e4): class Impl :: Shape : public Shape { // implementation public : // constructors, destructor // ... Point center () const override { /* ... */ } Color color () const override { /* ... */ } void rotate ( int ) override { /* ... */ } void move ( Point p ) override { /* ... */ } void redraw () override { /* ... */ } // ... }; \uc774\uc81c Shape \ub294 \uad6c\ud604\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\uc758 \uc9c0\uc800\ubd84\ud55c \uc608\uc2dc\uac00 \ub418\uc5c8\uc9c0\ub9cc, \uc880 \ub354 \ubcf5\uc7a1\ud55c \uacc4\uce35\uad6c\uc870\ub97c \uc704\ud55c \ub2e8\uc21c\ud55c \uc608\uc2dc\uc774\uae30 \ub54c\ubb38\uc5d0 \ucc38\uc544\uc904 \uc218 \uc788\ub2e4. class Impl :: Circle : public Circle , public Impl :: Shape { // implementation public : // constructors, destructor int radius () override { /* ... */ } // ... }; \uc5ec\uae30\uc11c Smiley \ud074\ub798\uc2a4\ub97c \ub354\ud574 \uacc4\uce35\uad6c\uc870\ub97c \ud655\uc7a5\ud574\ubcf4\uc790: class Smiley : public Circle { // pure interface public : // ... }; class Impl :: Smiley : public Smiley , public Impl :: Circle { // implementation public : // constructors, destructor // ... } \uc5ec\uae30\uc5d0\ub294 \ub450 \uacc4\uce35\uad6c\uc870\uac00 \ud63c\ud569\ub418\uc5b4 \uc788\ub2e4: \uc778\ud130\ud398\uc774\uc2a4: Smiley -> Circle -> Shape \uad6c\ud604: Impl::Smiley -> Impl::Circle -> Impl::Shape \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604 \uc591\ucabd\uc5d0\uc11c \uc0c1\uc18d\ubc1b\uae30 \ub54c\ubb38\uc5d0 \uaca9\uc790 \uad6c\uc870(\uc720\ud5a5 \ube44\uc21c\ud658 \uadf8\ub798\ud504)\ub97c \uac00\uc9c0\uac8c \ub41c\ub2e4: Smiley -> Circle -> Shape ^ ^ ^ | | | Impl::Smiley -> Impl::Circle -> Impl::Shape \uc55e\uc11c \uc5b8\uae09\ud55c \uac83\ucc98\ub7fc, \uc774\ub294 \uc774\uc911 \uacc4\uce35\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c \ud55c \ubc29\ubc95\uc77c \ubfd0\uc774\ub2e4. \ucd94\uc0c1 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc544\ub2c8\ub77c \uad6c\ud604 \uacc4\uce35\uc744 \ud1b5\ud574\uc11c \ubc14\ub85c \uc0ac\uc6a9\ub420\uc218\ub3c4 \uc788\ub2e4. void work_with_shape ( Shape & ); int user () { Impl :: Smiley my_smiley { /* args */ }; // create concrete shape // ... my_smiley . some_member (); // use implementation class directly // ... work_with_shape ( my_smiley ); // use implementation through abstract interface // ... } \ucd94\uc0c1 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba64\ubc84\ub97c \uad6c\ud604 \ud074\ub798\uc2a4\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub610 \uba64\ubc84\ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \ucd5c\uc801\ud654\uc758 \uac00\ub2a5\uc131\ub3c4 \uc81c\uacf5\ud55c\ub2e4 (\uac00\ub839, \uad6c\ud604 \uba64\ubc84\ud568\uc218\uac00 final \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74) Note \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc744 \ubd84\ub9ac\ud558\uae30 \uc704\ud55c \ub610 \ub2e4\ub978 (\uad00\ub828\ub41c) \ubc29\ubc95\uc740 Pimpl \uc774\ub2e4. Note \uacf5\ud1b5\uc801\uc778 \uae30\ub2a5\ub4e4\uc740 (\uc774\ubbf8 \uad6c\ud604\ub41c) \uc0c1\uc704 \ud074\ub798\uc2a4 \ud568\uc218\ub85c \uc81c\uacf5\ud558\uace0 \uad6c\ud604 namespace\uc5d0\uc11c \uc790\uc720\ub86d\uac8c \uc120\ud0dd\ud558\ub3c4\ub85d \ud560\uc218\ub3c4 \uc788\ub2e4. \uc0c1\uc704 \ud074\ub798\uc2a4\ub294 \ub354 \uc9e7\uc740 \ud45c\uae30\ub97c \ud560 \uc218 \uc788\uac8c \ub9cc\ub4e4\uc5b4\uc8fc\uba70, \uae30\ub2a5\uc801\uc778 \uce21\uba74\uc5d0\uc11c(at the cost of the functionality) \uacc4\uce35\uad6c\uc870\uac00 \uacf5\uc720\ud558\ub294 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud558\ub294 \uc720\uc77c\ud55c \uc874\uc7ac\uac00 \ub420 \uc218 \uc788\ub2e4. \uc720\uc77c\ud55c \uc811\uadfc\uc790\uac00 \uc811\uadfc\ud558\uae30\uac00 \uc27d\ub2e4. Enforcement \ub370\uc774\ud130\uc640 \uac00\uc0c1\ud568\uc218\uc5d0 \ub300\ud574 \ud558\uc704 \ud0c0\uc785\uc5d0\uc11c \uc0c1\uc704 \ud0c0\uc785\uc73c\ub85c\uc758 \ubcc0\ud658\uc744 \uc9c0\uc801\ud558\ub77c (\uc0c1\uc704 \ud074\ub798\uc2a4 \uba64\ubc84 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0) ??? C.130: \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\uc5d0\uc11c \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc9c0\uc6d0\ud558\uac8c \ud558\ub824\uba74 \ubcf5\uc0ac \uc0dd\uc131/\ub300\uc785 \ubcf4\ub2e4\ub294 \uac00\uc0c1 clone \uc744 \uc120\ud638\ud558\ub77c Reason \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\ub97c \ubcf5\uc0ac\ud558\ub294 \uac83\uc740 \uc808\ub2e8 \ubb38\uc81c \ub54c\ubb38\uc5d0 \uad8c\ud560\ub9cc\ud55c \uc77c\uc774 \uc544\ub2c8\ub2e4. C.67 \ub97c \ubcf4\ub77c. \ubcf5\uc0ac \ubb38\ub9e5\uc774 \uc815\ub9d0 \ud544\uc694\ud558\ub2e4\uba74, \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc218\ud589\ud558\ub77c: \uac00\uc0c1 clone \ud568\uc218\ub97c \uc81c\uacf5\ud574\uc11c \uc2e4\uc81c \ud558\uc704 \ud0c0\uc785\uc744 \ubcf5\uc0ac\ud558\uace0 \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \uc18c\uc720\ud558\ub294 \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub77c. \uadf8\ub9ac\uace0 \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c\ub294 \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud0c0\uc785\uc744 \ubc18\ud658\ud558\ub77c (\uacf5\ubcc0\uc801\uc778 \ubc18\ud658 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c) \uacf5\ubcc0\uc131: covariance Example class B { public : virtual owner < B *> clone () = 0 ; virtual ~ B () = 0 ; B ( const B & ) = delete ; B & operator = ( const B & ) = delete ; }; class D : public B { public : owner < D *> clone () override ; virtual ~ D () override ; }; \ubcf4\ud3b8\uc801\uc778 \uacbd\uc6b0, \uc18c\uc720\uad8c\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uad8c\uc7a5\ub41c\ub2e4.( R.20 \ucc38\uace0). \ud558\uc9c0\ub9cc, \uc5b8\uc5b4 \uaddc\uce59\uc73c\ub85c \uc778\ud574, \uacf5\ubcc0\uc801\uc778 \ubc18\ud658\ud0c0\uc785\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \ub420 \uc218 \uc5c6\ub2e4: D::clone \uc740 unique_ptr<D> \uc744 \ubc18\ud658\ud560 \uc218 \uc5c6\ub294 \ubc18\uba74 B::clone \ub294 unique_ptr<B> \ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub2e4. \uc774\ub85c \uc778\ud574, \ubaa8\ub4e0 \uc7ac\uc815\uc758\uc5d0\uc11c \ud56d\uc0c1 unique_ptr<B> \ud639\uc740 Guidelines Support Library \uc758 owner<> \ub97c \ubc18\ud658\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. C.131: \uc790\uc798\ud55c getter\uc640 setter\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Reason \uc0ac\uc18c\ud55c \ubaa9\uc801\uc73c\ub85c \uc791\uc131\ub41c getter\uc640 setter\ub294 \uc758\ubbf8\uad6c\uc870\uc801 \uac00\uce58\uac00 \uc5c6\ub2e4; \ub2e8\uc21c\ud788 public \uc73c\ub85c \uacf5\uac1c\ud574\ub3c4 \ub420 \uac83\uc774\ub2e4. Example class Point { // Bad: verbose int x ; int y ; public : Point ( int xx , int yy ) : x { xx }, y { yy } { } int get_x () const { return x ; } void set_x ( int xx ) { x = xx ; } int get_y () const { return y ; } void set_y ( int yy ) { y = yy ; } // no behavioral member functions }; \uc774\ub7f0 \ud074\ub798\uc2a4\ub97c struct \ub85c \ub9cc\ub4dc\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c -- \uc989, \uc5b4\ub5a4 \ud589\uc704\ub3c4 \ud558\uc9c0 \uc54a\ub294 \ubcc0\uc218\ub4e4\uc744 public \ub370\uc774\ud130\ub85c \ub9cc\ub4e4\uace0 \uba64\ubc84\ud568\uc218\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4. struct Point { int x { 0 }; int y { 0 }; }; \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uae30\ubcf8 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c: C.49: \uc0dd\uc131\uc790 \uc548\uc5d0\uc11c\uc758 \ub300\uc785 \ubcf4\ub2e4\ub294 \ucd08\uae30\ud654\ub97c \uc120\ud638\ud558\ub77c . Note \uc774 \uaddc\uce59\uc758 \ud575\uc2ec\uc740 getter/setter\uc758 \uc758\ubbf8\uad6c\uc870\uac00 \uac00\uce58\uc788\ub294\uc9c0 \ud310\ub2e8\ud558\ub294 \uac83\uc774\ub2e4. \uc774\uac83\uc774 \"\uc0ac\uc18c\ud568\"\uc5d0 \ub300\ud55c \uc644\uc804\ud55c \uc815\uc758\ub294 \uc544\ub2c8\uc9c0\ub9cc, \ubb38\ubc95\uc744 \ub118\uc5b4\uc11c getter/setter\uac00 public \ub370\uc774\ud130 \uba64\ubc84\uc600\uc744 \ub54c\ub97c \uace0\ub824\ud574\ubcf4\ub77c. \uc0ac\uc18c\ud558\uc9c0 \uc54a\uc740 \uc758\ubbf8\uad6c\uc870\uc758 \uc608\ub97c \ub4e0\ub2e4\uba74: \ud074\ub798\uc2a4\uc758 \ubd88\ubcc0\uc870\uac74\uc744 \uc720\uc9c0\ud558\uac70\ub098 \ub0b4\ubd80(internal) \ud0c0\uc785\uacfc \uc778\ud130\ud398\uc774\uc2a4 \ud0c0\uc785\uc744 \ubcc0\ud658\ud558\ub294 \uac83\uc744 \uc608\ub85c \ub4e4 \uc218 \uc788\ub2e4. Enforcement \ubcc4\ub2e4\ub978 \uc758\ubbf8\uad6c\uc870 \uc5c6\uc774 \ub2e8\uc21c\ud788 \uba64\ubc84\uc5d0 \uc811\uadfc\ud558\uae30\ub9cc \ud558\ub294 get / set \uba64\ubc84 \ud568\uc218\ub97c \uc5ec\ub7ff \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4. C.132: \uc774\uc720\uc5c6\uc774 \ud568\uc218\ub97c virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c Reason \uc911\ucca9\ub41c virtual \uc740 \uc2e4\ud589 \uc2dc\uac04\uacfc \uac1c\uccb4\uc758 \ucf54\ub4dc \ud06c\uae30\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4. \uac00\uc0c1 \ud568\uc218\ub294 \uc624\ubc84\ub77c\uc774\ub4dc \ub420 \uc218 \uc788\uace0, \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0\uc11c\uc758 \uc2e4\uc218\uc5d0 \ub178\ucd9c\ub418\uc5b4\uc788\ub2e4. \uac00\uc0c1 \ud568\uc218\ub294 \ud15c\ud50c\ub9bf \uacc4\uce35\uad6c\uc870\uc5d0\uc11c \ucf54\ub4dc \ubcf5\uc81c\ub97c \uc57c\uae30\ud55c\ub2e4. Example, bad template < class T > class Vector { public : // ... virtual int size () const { return sz ; } // bad: \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0\uc11c \ub2e4\ub978 \ubb34\uc2a8 \uc77c\uc744 \ud558\uaca0\ub294\uac00? private : T * elem ; // the elements int sz ; // number of elements }; \uc774\ub7f0 \"vector\"\ub294 \uae30\ubcf8 \ud074\ub798\uc2a4\ub85c \uc0ac\uc6a9\ub418\ub294 \uac83\uc744 \uc804\ud600 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\ub2e4. Enforcement \uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c0\uc9c0\ub9cc \ud30c\uc0dd \ud074\ub798\uc2a4\uac00 \uc5c6\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. \ubaa8\ub4e0 \uba64\ubc84 \ud568\uc218\uac00 \uac00\uc0c1 \ud568\uc218\uc774\uace0 \uad6c\ud604\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. C.133: protected \ub370\uc774\ud130\ub97c \uc9c0\uc591\ud558\ub77c Reason protected \ub370\uc774\ud130\ub294 \ubcf5\uc7a1\uc131\uacfc \uc5d0\ub7ec\uc758 \uc6d0\uc778\uc774\ub2e4. protected \ub370\uc774\ud130\ub294 \ubd88\ubcc0\uc870\uac74\uc758 \uad6c\ubb38\uc744 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e0\ub2e4. protected \ub370\uc774\ud130\ub294 \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ub370\uc774\ud130\ub97c \ubc30\uce58\ud568\uc73c\ub85c\uc368 \ud544\uc5f0\uc801\uc73c\ub85c \uac00\uc0c1 \uc0c1\uc18d\uc744 \ucc98\ub9ac\ud574\uc57c \ud558\ub294 \uc0c1\ud669\uc73c\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4. Example, bad class Shape { public : // ... interface functions ... protected : // data for use in derived classes: Color fill_color ; Color edge_color ; Style st ; }; \uc774 \uc608\uc5d0\uc11c \ubaa8\ub4e0 Shape \uc758 \ud558\uc704 \ud0c0\uc785\ub4e4\uc740 protected \ub370\uc774\ud130\ub97c \uc815\ud655\ud558\uac8c \ubcc0\uacbd\ud574\uc57c\ub9cc \ud55c\ub2e4. \ud754\ud788 \ubcfc\uc218 \uc788\uc73c\uba74\uc11c \uc720\uc9c0\ubcf4\uc218 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a4\ub294 \uc8fc\uc694 \uc6d0\uc778 \uc911 \ud558\ub098\uc5d0 \ud574\ub2f9\ud55c\ub2e4. \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uac00 \ud070 \uacbd\uc6b0, \uc77c\uad00\uc801\uc73c\ub85c protected \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ucf54\ub4dc\uac00 \uc591\uc801\uc73c\ub85c \ub9ce\uace0 \ubd84\uc0b0\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 \uad00\ub9ac\ub418\uae30 \uc5b4\ub835\ub2e4. \uc0c1\uc18d\ub418\ub294 \ub370\uc774\ud130\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4\ub294 \ub354 \ub298\uc5b4\ub0a0 \uc218 \uc788\ub2e4: \uc0c8\ub85c \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc544 protected \ub370\uc774\ud130\ub97c \ubcc0\uacbd\ud558\uae30 \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc120 \ud074\ub798\uc2a4\ub4e4\uc758 \uc804\uccb4 \uc9d1\ud569\uc744 \ucc3e\ub294 \uac83\uc774 \ubd88\uac00\ub2a5\ud560\uc218\ub3c4 \uc788\ub2e4. \uc774\ub85c \uc778\ud574 \ud074\ub798\uc2a4\ub97c \ubcc0\uacbd\ud558\ub294 \uac83\uc744 \uc2e4\ud589\ud560 \uc218 \uc5c6\uc744 \uc218\ub3c4 \uc788\ub2e4. protected \ub370\uc774\ud130\uc5d0\ub294 \ubd88\ubcc0\uc870\uac74\uc744 \uac15\uc694\ud560 \uc218 \uc5c6\ub2e4; \uc804\uc5ed\ubcc0\uc218 \uc9d1\ud569\uacfc \uac19\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4. protected \ub370\uc774\ud130\ub294 \ucf54\ub4dc \uaddc\ubaa8\uac00 \ucee4\uc9c0\uba74 \uc2e4\uc81c\ub85c \uc804\uc5ed\ubcc0\uc218\uac00 \ub41c\ub2e4. Note \ub370\uc774\ud130\ub97c protected\ub97c \uc0ac\uc6a9\ud574 \uc0c1\uc18d\ud558\ub294 \uac83\uc740 \uc784\uc758\uc801\uc73c\ub85c \uac1c\uc120\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uac8c \ud55c\ub2e4\ub294 \uc810\uc5d0\uc11c \ub9e4\ub825\uc801\uc73c\ub85c \ubcf4\uc77c \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub85c \uc778\ud574 \uc81c\uc5b4\ub418\uc9c0 \uc54a\ub294 \ubcc0\uacbd\uacfc \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uac8c \ub41c\ub2e4. \uc798 \uc815\uc758\ub418\uace0 \ubd88\ubcc0\uc870\uac74\uc744 \uac15\uc694\ud558\ub3c4\ub85d private \ub370\uc774\ud130\ub97c \uc120\ud638\ud558\ub77c \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294, \uc778\ud130\ud398\uc774\uc2a4 \ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c . Note protected \uba64\ubc84 \ud568\uc218\uc5d0\ub294 \ubb38\uc81c\uac00 \uc5c6\ub2e4. Enforcement protected \ub370\uc774\ud130\ub97c \uc9c0\uc801\ud558\ub77c C.134: const \uac00 \uc544\ub2cc \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc774 \uac19\uc740 \uc811\uadfc \ub808\ubca8\uc744 \uac00\uc9c0\ub3c4\ub85d \ud558\ub77c Reason \uc0dd\uac01\ud558\uae30\uc5d0 \ud63c\ub780\uc2a4\ub7fd\uc9c0 \uc54a\uc544 \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. const \uba64\ubc84\ub4e4\uc774 \uc11c\ub85c \ub2e4\ub978 \uc811\uadfc \ub808\ubca8\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uadf8 \ud0c0\uc785\uc774 \uc5b4\ub5a4 \uc77c\uc744 \ud558\ub294 \uac83\uc778\uc9c0 \ud63c\ub780\uc2a4\ub7ec\uc6b8 \uac83\uc774\ub2e4. \ud0c0\uc785\uc774 \ubd88\ubcc0\uc870\uac74\uc744 \uc720\uc9c0\ud558\uae30 \uc704\ud55c \uac83\uc778\uac00? \ud639\uc740 \ub2e8\uc21c\ud788 \uac12\uc758 \uc9d1\ud569\uc744 \ud45c\ud604\ud55c \uac83\uc778\uac00? Discussion \ud558\ub098\uc758 \ubcc0\uc218\uc5d0 \ub300\ud574 \uc5b4\ub5a4 \ucf54\ub4dc\uac00 \uc720\uc758\ubbf8\ud558\uace0 \uc815\ud655\ud55c \uac12\uc744 \uad00\ub9ac\ud558\ub294 \ucc45\uc784\uc774 \uc788\ub294\uc9c0 \uace0\ubbfc\ud574\uc57c \ud55c\ub2e4. \ub370\uc774\ud130 \uba64\ubc84\uc5d0\ub294 2\uac00\uc9c0 \uc885\ub958\uac00 \uc788\ub2e4: A: \uac1c\uccb4\uc758 \ubd88\ubcc0\uc870\uac74\uacfc \ubb34\uad00\ud55c \uacbd\uc6b0. \uc774 \uba64\ubc84\ub4e4\uc774 \uc5b4\ub5a4 \uac12(\ud639\uc740 \uac12\uc758 \uc870\ud569)\uc744 \uac00\uc838\ub3c4 \uc720\ud6a8\ud558\ub2e4 B: \uac1c\uccb4\uc758 \ubd88\ubcc0\uc870\uac74\uc73c\ub85c \uae30\ub2a5\ud558\ub294 \uacbd\uc6b0, \ubaa8\ub4e0 \uac12\uc758 \uc870\ud569\uc774 \uc758\ubbf8\ub97c \uac00\uc9c0\uc9c0\ub294 \uc54a\ub294\ub2e4. \ub530\ub77c\uc11c \uc774 \ubcc0\uc218\ub4e4\uc758 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \ubaa8\ub4e0 \ucf54\ub4dc\ub294 \ubd88\ubcc0\uc870\uac74\uc744 \uc54c\uace0, \uc720\uc9c0\ud558\uae30 \uc704\ud55c \uaddc\uce59\ub4e4\uc744 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. A \uadf8\ub8f9\uc5d0 \uc18d\ud558\ub294 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc740 \ub2e8\uc21c\ud788 public (\ud639\uc740, \ub4dc\ubb3c\uc9c0\ub9cc \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \ubcfc \uc218 \uc788\ub3c4\ub85d protected )\uc774\uba74 \ub41c\ub2e4. \ucea1\uc290\ud654\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4. \uba64\ubc84\ub97c \ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub294 \uc774\ub4e4\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. B \uadf8\ub8f9\uc5d0 \uc18d\ud558\ub294 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc740 private \ud639\uc740 const \uc5ec\uc57c \ud55c\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\ub294 \ucea1\uc290\ud654\uac00 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub4e4\uc774 private \uc774\ub098 const \uac00 \uc544\ub2c8\ub77c\ub294 \uac83\uc740 \uac1c\uccb4\uac00 \uc790\uc2e0\uc758 \uc0c1\ud0dc\ub97c \uad00\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc758\ubbf8\uac00 \ub41c\ub2e4: \ud074\ub798\uc2a4\uc758 \ub2e4\ub978 \ucf54\ub4dc\ub4e4\uc774 \ubd88\ubcc0\uc870\uac74\uc744 \uc54c\uace0 \uc815\ud655\ud558\uac8c \uc720\uc9c0\ud574\uc57c \ud55c\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub7f0 \ucf54\ub4dc\uac00 \uc81c\ud55c\uc5c6\uc774 \ub298\uc5b4\ub0a0 \uc218 \uc788\ub2e4. \uc774 \ubcc0\uc218\ub4e4\uc774 public \uc774 \ub418\uba74 \ubaa8\ub4e0 \uc0ac\uc6a9 \ucf54\ub4dc\uac00 \ubd88\ubcc0\uc870\uac74\uc744 \uace0\ub824\ud574\uc57c \ud558\uba70, protected \uc774\ub77c\uba74 (\ud604\uc7ac\uc640 \ubbf8\ub798\uc758) \ubaa8\ub4e0 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc774 \ud3ec\ud568\ub41c\ub2e4. \uc774\ub294 \ub9dd\uac00\uc9c0\uae30 \uc27d\uace0 \uac15\ud558\uac8c \uacb0\ud569\ub41c \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uac8c \ub41c\ub2e4. \uc720\uc9c0\ubcf4\uc218\uac00 \uc545\ubabd\uacfc \uac19\uc744 \uac83\uc774\ub2e4. \uc758\ub3c4\uce58 \uc54a\uac8c \uc5b4\ub5a4 \ucf54\ub4dc\uac00 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uc798\ubabb\ub41c(invalid) \uac12\uc73c\ub85c \ub9cc\ub4e4\uba74 \uac1c\uccb4\uc758 \ud604\uc7ac \uc0c1\ud0dc\uc640 \uc774\ud6c4\uc758 \uc0ac\uc6a9\uc5d0 \uc601\ud5a5\uc744 \uc904 \uac83\uc774\ub2e4. \ub300\ubd80\ubd84\uc758 \ud074\ub798\uc2a4\ub4e4\uc740 A\uc640 B\ub85c \uad6c\ubd84\ub41c\ub2e4: All public : \ubcc0\uc218\ub4e4\uc758 \ubd88\ubcc0\uc870\uac74\uc774 \uc5c6\ub294 \uc9d1\ud569\uc744 \ub9cc\ub4e0\ub2e4\uba74 \ubaa8\ub4e0 \ubcc0\uc218\uac00 public \uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 class \ubcf4\ub2e4\ub294 struct \ub85c \uc120\uc5b8\ud558\ub77c All private : \ubd88\ubcc0\uc870\uac74\uc774 \uc788\ub2e4\uba74, \ubaa8\ub4e0 const \uac00 \uc544\ub2cc \ubcc0\uc218\ub4e4\uc740 private \uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4 -- \ucea1\uc290\ud654 \ud558\ub77c Exception \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc120 \ud074\ub798\uc2a4\ub4e4\uc774 \ub514\ubc84\uae45\uc744 \uc704\ud574 A\uc640 B\ub97c \ud63c\ud569\ud560 \uc218\ub3c4 \uc788\ub2e4. \ucea1\uc290\ud654\ub41c \uac1c\uccb4\uac00 const \uac00 \uc544\ub2cc \ub514\ubc84\uae45 \uc815\ubcf4\ub97c \ud3ec\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub294 \ubd88\ubcc0\uc870\uac74\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uace0 -- \uac1c\uccb4\uac00 \uad00\ub9ac\ud558\ub294 \uac12\uc758 \uc77c\ubd80\uac00 \uc544\ub2c8\uace0 \uad00\ucc30\ub418\uc5b4\uc57c \ud558\ub294 \ubd80\ubd84\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 A\uc5d0 \uc18d\ud55c\ub2e4. \uc774\ub54c\ub294 A\uc5d0 \ud574\ub2f9\ud558\ub294 \uc601\uc5ed ( public \ud639\uc740 protected )\uc740 A \ucc98\ub7fc, \ub098\uba38\uc9c0 \uc601\uc5ed\uc740( private or const ) B \uadf8\ub8f9 \ucc98\ub7fc \uad00\ub9ac\ud558\uba74 \ub41c\ub2e4. Enforcement const \uac00 \uc544\ub2cc \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc774 \uc11c\ub85c \ub2e4\ub978 \uc811\uadfc\ub808\ubca8\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\ub97c \uc9c0\uc801\ud55c\ub2e4. C.135: \uc11c\ub85c \ub2e4\ub978 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ubaa8\ub4e0 \ud074\ub798\uc2a4\ub4e4\uc774 \ubaa8\ub4e0 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc744 \uc9c0\uc6d0\ud558\uc9c0\ub294 \uc54a\uc744 \uac83\uc774\ub2e4. \uadf8\ub9ac\uace0 \ubaa8\ub4e0 \ud638\ucd9c\uc790(caller)\ub4e4\uc774 \ubaa8\ub4e0 \uc5f0\uc0b0\ub4e4\uc744 \uc0ac\uc6a9\ud558\uae38 \uc6d0\ud558\uc9c0\ub3c4 \uc54a\uc744 \uac83\uc774\ub2e4. (\ub2e4\uc911 \uc0c1\uc18d\uc740) \ud2b9\ubcc4\ud788 \ub2e8\uc77c\ud55c(monolitic) \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc744 \ud30c\uc0dd \ud074\ub798\uc2a4\uac00 \uc9c0\uc6d0\ud558\ub294 \ub3d9\uc791\uc758 \"\uce21\uba74\"\ub4e4\ub85c \ub098\ub20c\ub54c \uc0ac\uc6a9\ud558\ub77c. Example class iostream : public istream , public ostream { // \uad49\uc7a5\ud788 \ub2e8\uc21c\ud558\ub2e4 // ... }; istream \uc740 \uc785\ub825 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. ostream \uc740 \ucd9c\ub825 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. iostream \uc740 istream \uacfc ostream \uc778\ud130\ud398\uc774\uc2a4\ub97c \uacb0\ud569\ud558\uba74\uc11c \ub2e8\uc77c \uc2a4\ud2b8\ub9bc\uc5d0\uc11c\uc758 \uc785\ucd9c\ub825 \ub3d9\uae30\ud654\ub97c \uc81c\uacf5\ud55c\ub2e4. Note \ud558\ub098\uc758 \uad6c\ud604\uc5d0 \ub300\ud574 \uc5ec\ub7ec \ub2e4\ub978 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud544\uc694\ud55c \uacbd\uc6b0 \uc27d\uac8c \ubcfc \uc218 \uc788\ub2e4. \uadf8\ub7f0 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc740 \ud558\ub098\uc758 \uacc4\uce35\uad6c\uc870\ub85c \uc870\uc9c1\ud654\ud558\uae30 \uc27d\uc9c0 \uc54a\ub2e4. Note \uc774\ub7f0 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc740 \ubcf4\ud1b5 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc774\ub2e4. Enforcement ??? C.136: \uad6c\ud604 \ud2b9\uc131(attribute)\uc758 \uacb0\ud569\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub77c Reason Some forms of mixins have state and often operations on that state. If the operations are virtual the use of inheritance is necessary, if not using inheritance can avoid boilerplate and forwarding. Example class iostream : public istream , public ostream { // very simplified // ... }; istream \uc740 \uc785\ub825 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. ostream \uc740 \ucd9c\ub825 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. iostream \uc740 istream \uacfc ostream \uc778\ud130\ud398\uc774\uc2a4\ub97c \uacb0\ud569\ud558\uba74\uc11c \ub2e8\uc77c \uc2a4\ud2b8\ub9bc\uc5d0\uc11c\uc758 \uc785\ucd9c\ub825 \ub3d9\uae30\ud654\ub97c \uc81c\uacf5\ud55c\ub2e4. Note \uc774\uac83\uc740 \uc0c1\ub300\uc801\uc73c\ub85c \ub4dc\ubb38 \uacbd\uc6b0\uc778\ub370, \uad6c\ud604\uc740 \uc885\uc885 \ub2e8\uc77c\ub8e8\ud2b8(single-root) \uacc4\uce35\uc73c\ub85c \uc870\uc9c1\ud654\ub420 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. Example \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 \"\uad6c\ud604 \ud2b9\uc131(implementation attribute)\"\uc774 \uad6c\ud604\uccb4\uc758 \ud589\uc704\ub97c \uacb0\uc815\ud558\uace0 \uad6c\ud604\uccb4\uac00 \uc694\uad6c\ubc1b\ub294 \uc815\ucc45\uc744 \ub530\ub974\ub3c4\ub85d \uba64\ubc84\ub97c \uc8fc\uc785\ud558\ub294 \"\ud63c\ud569(mixin)\" \ucc98\ub7fc \ubcf4\uc778\ub2e4. std::enable_shared_from_this \ud639\uc740 boost.intrusive\uc758 list_base_hook \ud639\uc740 intrusive_ref_counter \ub97c \uc608\ub85c \ub4e4 \uc218 \uc788\ub2e4. Enforcement ??? C.137: \uc9c0\ub098\uce58\uac8c \uc77c\ubc18\uc801\uc778 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \ud53c\ud558\uae30 \uc704\ud574 virtual \uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uacf5\uc720 \ub370\uc774\ud130\uc640 \uc778\ud130\ud398\uc774\uc2a4\uc758 \ubd84\ub9ac\uac00 \uac00\ub2a5\ud558\uac8c \ub9cc\ub4e0\ub2e4. \uacf5\uc720 \ub370\uc774\ud130\uac00 \ucd5c\uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ubc30\uce58\ub418\ub294 \uac83\uc744 \ub9c9\ub294\ub2e4. Example struct Interface { virtual void f (); virtual int g (); // ... no data here ... }; class Utility { // with data void utility1 (); virtual void utility2 (); // customization point public : int x ; int y ; }; class Derive1 : public Interface , virtual protected Utility { // override Interface functions // Maybe override Utility virtual functions // ... }; class Derive2 : public Interface , virtual protected Utility { // override Interface functions // Maybe override Utility virtual functions // ... }; Utility \ub97c \ucd94\ucd9c\ud558\ub294 \uac83\uc740 \uc218\ub9ce\uc740 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc774 \"\uad6c\ud604 \ub0b4\uc6a9(implementation details)\"\uc758 \ub9ce\uc740 \ubd80\ubd84\uc744 \uacf5\uc720\ud55c\ub2e4\uba74 \uc774\uce58\uc5d0 \ub9de\ub294 \uc791\uc5c5\uc774\ub2e4. Note \uc774 \uc608\uc2dc\ub294 \uba85\ubc31\ud788 \ub108\ubb34 \"\uc774\ub860\uc801\"\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc791\uc740 \uaddc\ubaa8 \uc758 \uc2e4\uc81c\uc801\uc778 \uc608\uc2dc\ub97c \ucc3e\uae30\ub294 \uc5b4\ub835\ub2e4. Interface \ub294 \uc778\ud130\ud398\uc774\uc2a4 \uacc4\uce35 \uc758 \uc815\uc810\uc774\uace0, Utility \ub294 \uad6c\ud604 \uacc4\uce35 \uc758 \uc815\uc810\uc774\ub2e4. \uc124\uba85\uc744 \ud3ec\ud568\ud55c \uc880 \ub354 \uc0ac\uc2e4\uc801\uc778 \uc608\uc2dc\ub294 \uc5ec\uae30\uc5d0 \uc788\ub2e4 . Note \ub54c\ub85c\ub294 \uacc4\uce35\uc744 \uc120\ud615\ud654(linearization)\ud558\ub294 \uac83\uc774 \ub098\uc740 \ubc29\ubc95\uc77c \uc218 \uc788\ub2e4 Enforcement \uc778\ud130\ud398\uc774\uc2a4 \uacc4\uce35\uacfc \uad6c\ud604 \uacc4\uce35\uc774 \ud63c\uc7ac\ub41c \uacbd\uc6b0 \uc9c0\uc801\ud55c\ub2e4. C.138: using \uc744 \uc0ac\uc6a9\ud574 \uc0c1\uc704/\ud558\uc704 \ud074\ub798\uc2a4\ub97c \uc704\ud55c \uc911\ubcf5 \uc815\uc758 \uc9d1\ud569\uc744 \ub9cc\ub4e4\uc5b4\ub77c Reason using \uc120\uc5b8\uc774 \uc5c6\uc73c\uba74, \ud558\uc704 \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ud568\uc218\ub4e4\uc774 \uc0c1\uc18d\ubc1b\uc740 \uc911\ubcf5\uc815\uc758 \uc9d1\ud569\uc744 \ub36e\uc5b4\uc4f4\ub2e4(hide). Example, bad #include <iostream> class B { public : virtual int f ( int i ) { std :: cout << \"f(int): \" ; return i ; } virtual double f ( double d ) { std :: cout << \"f(double): \" ; return d ; } }; class D : public B { public : int f ( int i ) override { std :: cout << \"f(int): \" ; return i + 1 ; } }; int main () { D d ; std :: cout << d . f ( 2 ) << '\\n' ; // prints \"f(int): 3\" std :: cout << d . f ( 2.3 ) << '\\n' ; // prints \"f(int): 3\" } Example, good class D : public B { public : int f ( int i ) override { std :: cout << \"f(int): \" ; return i + 1 ; } using B :: f ; // exposes f(double) }; Note \uc774 \uc774\uc288\ub294 \uac00\uc0c1/\ube44 \uac00\uc0c1 \uba64\ubc84 \ud568\uc218 \ubaa8\ub450\uc5d0 \uc801\uc6a9\ub41c\ub2e4. \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \uac00\ubcc0\uc801\uc73c\ub85c \uacb0\uc815\ud560 \uc218 \uc788\ub3c4\ub85d, C++17\uc740 \uac00\ubcc0 using \uc120\uc5b8\uc744 \ucd94\uac00\ud588\ub2e4(introduced). template < class ... Ts > struct Overloader : Ts ... { using Ts :: operator ()...; // exposes operator() from every base }; Enforcement \uc774\ub984\uc744 \ub36e\uc5b4\uc4f0\ub294 \uacbd\uc6b0\ub97c \ucc3e\uc544\ub0b8\ub2e4 C.139: final \uc740 \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc0ac\uc6a9\ud558\ub77c Reason final \uc740 \uacc4\uce35\uad6c\uc870\uc758 \ud655\uc7a5\uc131\uc744 \uc800\ud574\ud55c\ub2e4\ub294 \uc810 \ub54c\ubb38\uc5d0 \ud544\uc694\ud55c \uacbd\uc6b0\uac00 \uac70\uc758 \uc5c6\ub2e4. Example, bad class Widget { /* ... */ }; // nobody will ever want to improve My_widget (or so you thought) class My_widget final : public Widget { /* ... */ }; class My_improved_widget : public My_widget { /* ... */ }; // error: can't do that Note \ubaa8\ub4e0 \ud074\ub798\uc2a4\uac00 \uc0c1\uc704 \ud074\ub798\uc2a4\ub85c\uc368 \uc791\uc131\ub418\uc9c0\ub294 \uc54a\ub294\ub2e4. \ub300\ubd80\ubd84\uc758 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud074\ub798\uc2a4\ub4e4\uc774 \uc774\ub7f0 \uacbd\uc6b0\uc5d0 \uc18d\ud55c\ub2e4 (\uc608\ucee8\ub300, std::vector \uc640 std::string \ub294 \ud558\uc704 \ud074\ub798\uc2a4\ub97c \uace0\ub824\ud558\uc9c0 \uc54a\ub294\ub2e4). \uc774 \uaddc\uce59\uc740 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 \ub0b4\uc5d0\uc11c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ub3d9\uc791\ud558\ub294 \uac00\uc0c1 \ud568\uc218\ub4e4\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\ub4e4\uc5d0 final \uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uc5d0 \ub300\ud55c \uac83\uc774\ub2e4. Note \uac00\uc0c1 \ud568\uc218\ub4e4\uc744 final \ub85c \ub9c8\uac10\ud558\ub294 \uac83\uc740 final \uc774 \ud568\uc218\ub4e4\uc758 \uc815\uc758/\uc7ac\uc815\uc758\ub97c \ucc3e\uc544\ub0b4\uc9c0 \ubabb\ud558\ub3c4\ub85d \ud558\uae30 \ub54c\ubb38\uc5d0 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \uc6b4\uc88b\uac8c\ub3c4, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774\ub7f0 \uc2e4\uc218\ub97c \ucc3e\uc544\ub0b8\ub2e4: \ud558\uc704 \ud074\ub798\uc2a4\uc758 final \uc744 \ub2e4\uc2dc \uc120\uc5b8\ud558\uac70\ub098 \uc7ac\uc815\uc758\ud560 \uc218 \uc5c6\ub2e4. Note final \ub85c \uc131\ub2a5\uc774 \uac1c\uc120\ub420 \uac83\uc774\ub77c\ub294 \uc8fc\uc7a5\uc5d0\ub294 \uadfc\uac70\uac00 \uc5c6\ub2e4. \ub300\ubd80\ubd84 \uadf8\ub7f0 \uc8fc\uc7a5\uc740 \ucd94\uce21\uc774\uac70\ub098 \ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c\uc758 \uacbd\ud5d8\uc5d0 \uadfc\uac70\ud55c \uac83\uc774\ub2e4. final \uc774 \ub17c\ub9ac\uc801\uc778 \uc774\uc720\uc640 \uc131\ub2a5 \uce21\uba74\uc5d0\uc11c \uc911\uc694\ud55c \uc608\uc2dc\uac00 \uc788\ub2e4. \ucef4\ud30c\uc77c\ub7ec\ub098 \uc5b8\uc5b4 \ubd84\uc11d \ub3c4\uad6c\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 (\uc131\ub2a5\uae30\uc900\uc774 \ub192\uc740) AST \uacc4\uce35 \uc2dc\uac04\uc774 \uc9c0\ub098\ub3c4 \uc0c8\ub85c\uc6b4 \ud558\uc704 \ud074\ub798\uc2a4\uac00 \ucd94\uac00\ub418\uc9c0 \uc54a\uace0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uad6c\ud604\uc790\uc5d0 \uc758\ud574\uc11c\ub9cc \ucd94\uac00\ub41c\ub2e4 \ud558\uc9c0\ub9cc \uc798\ubabb \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uac00 \ud6e8\uc52c \ub354 \ub9ce\ub2e4. Enforcement final \uc744 \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4 C.140: \uac00\uc0c1 \ud568\uc218\uc640 \uadf8 \uad6c\ud604 \ud568\uc218\uc5d0 \uc11c\ub85c \ub2e4\ub978 \uae30\ubcf8 \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \ud63c\ub780\uc744 \uc77c\uc73c\ud0a8\ub2e4: \uc7ac\uc815\uc758\ud55c \ucf54\ub4dc\uac00 \uae30\ubcf8 \uc778\uc790\ub97c \uc0c1\uc18d\ubc1b\uc9c0 \uc54a\ub294\ub2e4. Example, bad class Base { public : virtual int multiply ( int value , int factor = 2 ) = 0 ; }; class Derived : public Base { public : int multiply ( int value , int factor = 10 ) override ; }; Derived d ; Base & b = d ; b . multiply ( 10 ); // these two calls will call the same function but d . multiply ( 10 ); // with different arguments and so different results Enforcement \uac00\uc0c1\ud568\uc218\uc758 \uae30\ubcf8\uc778\uc790\uac00 \uc0c1\uc704/\ud558\uc704 \ud074\ub798\uc2a4\uc758 \uc120\uc5b8\uc5d0\uc11c \uc11c\ub85c \ub2e4\ub974\uba74 \uc9c0\uc801\ud55c\ub2e4 C.hier-access: \uacc4\uce35 \uad6c\uc870 \ub0b4 \uac1c\uccb4 \uc811\uadfc C.145: \ub2e4\ud615\uc801\uc778 \uac1c\uccb4\ub4e4\uc740 \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub97c \ud1b5\ud574 \uc811\uadfc\ud558\ub77c Reason \uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\uac00 \uc788\ub2e4\uba74, \ub2f9\uc2e0\uc740 (\uc77c\ubc18\uc801\uc73c\ub85c) \uc5b4\ub5a4 \ud074\ub798\uc2a4\uac00 \uc2e4\ud589\ub420 \ud568\uc218\ub97c \uc81c\uacf5\ud560\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. Example struct B { int a ; virtual int f (); }; struct D : B { int b ; int f () override ; }; void use ( B b ) { D d ; B b2 = d ; // \ubcf5\uc0ac \uc190\uc2e4(slice) B b3 = b ; } void use2 () { D d ; use ( d ); // \ubcf5\uc0ac \uc190\uc2e4(slice) } Both d s are sliced. Exception \uac1c\uccb4\uac00 \uc815\uc758\ub41c \ubc94\uc704 \uc548\uc5d0\uc11c\ub294 \uc774\ub984\uc774 \uc788\ub294 \ub2e4\ud615\uc801 \uac1c\uccb4\uc5d0 \uc548\uc804\ud558\uac8c \uc811\uadfc\ud560 \uc218 \uc788\ub2e4. \ub2e8\uc9c0 \ubcf5\uc0ac \uc190\uc2e4\uc774 \uc0dd\uae30\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c. void use3 () { D d ; d . f (); // OK } Enforcement \ubaa8\ub4e0 \uc808\ub2e8(slicing)\uc744 \uc9c0\uc801\ud558\ub77c. C.146: \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 \ud0d0\uc0c9\uc774 \ubd88\uac00\ud53c\ud55c \uacbd\uc6b0\uc5d0\ub9cc dynamic_cast \ub97c \uc0ac\uc6a9\ud558\ub77c Reason dynamic_cast \ub294 \uc2e4\ud589\uc2dc\uac04\uc5d0 \uac80\uc0ac\ub41c\ub2e4. Example struct B { // \uc778\ud130\ud398\uc774\uc2a4 virtual void f (); virtual void g (); }; struct D : B { // \ud655\uc7a5\ub41c \uc778\ud130\ud398\uc774\uc2a4 void f () override ; virtual void h (); }; void user ( B * pb ) { if ( D * pd = dynamic_cast < D *> ( pb )) { // ... D\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4 ... } else { // ... B\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4 ... } } \ub2e4\ub978 \uce90\uc2a4\ud305 \ubc29\ubc95\uc740 \ud0c0\uc785 \uc548\uc804\uc131\uc744 \ud574\uce58\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\uc81c\ub85c X \uc778 \ubcc0\uc218\ub97c Z \ucc98\ub7fc \uc0ac\uc6a9\ud558\uac8c \ub9cc\ub4e0\ub2e4: void user2 ( B * pb ) // bad { D * pd = static_cast < D *> ( pb ); // I know that pb really points to a D; trust me // ... use D's interface ... } void user3 ( B * pb ) // unsafe { if ( some_condition ) { D * pd = static_cast < D *> ( pb ); // I know that pb really points to a D; trust me // ... use D's interface ... } else { // ... make do with B's interface ... } } void f () { B b ; user ( & b ); // OK user2 ( & b ); // bad error user3 ( & b ); // OK *if* the programmer got the some_condition check right } Note \ub2e4\ub978 \ubaa8\ub4e0 \uce90\uc2a4\ud305\ucc98\ub7fc, dynamic_cast \ub294 \ub108\ubb34 \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4. \uce90\uc2a4\ud305 \ubcf4\ub2e4\ub294 \uac00\uc0c1 \ud568\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c . \uac00\ub2a5\ud55c \ud55c \ud074\ub798\uc2a4 \uacc4\uce35\uc744 \ud0d0\uc0c9\ud558\ub294 \uac83\ubcf4\ub2e4 \uc815\uc801 \ub2e4\ud615\uc131(\ub9c1\ud06c \uc5c6\uc74c) \uc744 \uc120\ud638\ud558\ub77c. \uc774\ub807\uac8c \ud558\uba74 \uc2e4\ud589\uc2dc\uac04 \uacb0\uc815\uc774 \ud544\uc694\uc5c6\ub2e4. \uadf8\ub9ac\uace0 \ucda9\ubd84\ud788 \ud3b8\ub9ac\ud558\ub2e4. Note typeid \uac00 \ub354 \uc801\uc808\ud55c\ub370 dynamic_cast \ub97c \uc4f0\ub294 \uc0ac\ub78c\ub4e4\uc774 \uc788\ub2e4; dynamic_cast \ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc54c\ub824\uc9c4 (\uac1c\uccb4\uc5d0 \uac00\uc7a5 \uc801\ud569\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \ucc3e\uae30 \uc704\ud55c) \"is kind of\" \uc5f0\uc0b0\uc774\ub2e4. \ubc18\uba74 typeid \ub294 \"\uc774 \uac1c\uccb4\uc758 \uc815\ud655\ud55c \ud0c0\uc785\uc744 \ucc3e\ub294\" \uc5f0\uc0b0\uc774\ub2e4. \ud6c4\uc790\ub294 \ub2e8\uc21c\ud558\uace0 \ub354 \ube60\ub974\uac8c \ucc98\ub9ac\ub420 \uac83\uc774 \ubd84\uba85\ud558\ub2e4. typeid \ub294 \ud544\uc694\ud558\ub2e4\uba74 \uc27d\uac8c \uc791\uc131\ud560 \uc218 \uc788\ub2e4(\ubaa8\uc885\uc758 \uc774\uc720\ub85c RTTI\uac00 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74). dynamic_cast \ub294 \ubcf4\ud1b5 \uc815\ud655\ud558\uac8c \uad6c\ud604\ud558\uae30 \ud6e8\uc52c \uc5b4\ub835\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uc608\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: struct B { const char * name { \"B\" }; // if pb1->id() == pb2->id() *pb1 is the same type as *pb2 virtual const char * id () const { return name ; } // ... }; struct D : B { const char * name { \"D\" }; const char * id () const override { return name ; } // ... }; void use () { B * pb1 = new B ; B * pb2 = new D ; cout << pb1 -> id (); // \"B\" cout << pb2 -> id (); // \"D\" if ( pb1 -> id () == \"D\" ) { // looks innocent D * pd = static_cast < D *> ( pb1 ); // ... } // ... } pb2->id() == \"D\" \uc758 \uacb0\uacfc\ub294 \uc2e4\uc81c\ub85c\ub294 \uad6c\ud604\uc5d0 \uc758\ud574 \uacb0\uc815\ub41c \uac83\uc774\ub2e4. \uc774\ub294 \uc9c1\uc811 \uc791\uc131\ud55c RTTI\uc758 \uc704\ud5d8\uc744 \uacbd\uace0\ud558\uae30 \uc704\ud55c \uc608\uc2dc\ub2e4. \uc218\ub144\uac04 \uc774 \ucf54\ub4dc\uac00 \uae30\ub300\ud55c \ub300\ub85c \ub3d9\uc791\ud560\uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc0c8\ub85c\uc6b4 \uae30\uacc4, \ucef4\ud30c\uc77c\ub7ec, \ud639\uc740 \ub9c1\ucee4\uc5d0\uc11c \uc18c\uc2a4\ucf54\ub4dc \ub0b4 \ubb38\uc790(character literals)\ub97c \ud1b5\uc77c\ud558\uc9c0 \uc54a\uc73c\uba74 \uc2e4\ud328\ud558\uac8c \ub41c\ub2e4. RTTI\ub97c \uc9c1\uc811 \uad6c\ud604\ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc8fc\uc758\ud558\ub77c. Exception \ub9cc\uc57d \ub2f9\uc2e0\uc758 \uad6c\ud604 \ucf54\ub4dc\uc5d0 \uc815\ub9d0\ub85c \ub290\ub9b0 dynamic_cast \uac00 \uc788\ub2e4\uba74, \ub2e4\ub978 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud560 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc815\uc801\uc73c\ub85c \ud074\ub798\uc2a4\ub97c \uacb0\uc815\ud560 \uc218 \uc5c6\ub294 \ubaa8\ub4e0 \ub300\uc548\uc740 \uba85\uc2dc\uc801 \uce90\uc2a4\ud305(\uc77c\ubc18\uc801\uc73c\ub85c static_cast )\uc744 \ud3ec\ud568\ud558\uace0, \uc5d0\ub7ec\uc5d0 \ucde8\uc57d\ud558\ub2e4. \ub2f9\uc2e0\ub9cc\uc758 \ud2b9\ubcc4\ud55c dynamic_cast \ub97c \ub9cc\ub4e4\uc218\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub2c8, dynamic_cast \uac00 \uc815\ub9d0\ub85c \ub2f9\uc2e0\uc774 \uc0dd\uac01\ud558\ub294 \uac83 \ub9cc\ud07c \ub290\ub9ac\ub2e4\ub294 \uac83\uc744 \ud655\uc2e4\ud788\ud558\ub77c. (\uadfc\uac70 \uc5c6\ub294 \ub8e8\uba38\ub4e4\uc774 \uaf64 \uc788\ub2e4.) \uadf8\ub9ac\uace0 dynamic_cast \uc758 \uc0ac\uc6a9\uc774 \uc815\ub9d0\ub85c \uc131\ub2a5\uc5d0 \uce58\uba85\uc801\uc774\ub77c\ub294 \uac83 \ub610\ud55c \ud655\uc778\ud558\ub77c. \uc774\ub294 dynamic_cast \uc758 \ud604\uc7ac \uad6c\ud604\uc774 \ubd88\ud544\uc694\ud558\uac8c \ub290\ub9b0 \uacbd\uc6b0\uc5d0 \ub300\ud55c \uac83\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc801\uc808\ud55c \uc870\uac74 \ud558\uc5d0\uc11c\ub294, dynamic_cast \ub97c O(1)\uc2dc\uac04 \ub0b4\ub85c \uc218\ud589 \ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc, \ucd5c\uc801\ud654\ub97c \uc704\ud574 \ub178\ub825\ud560 \uac00\uce58\uac00 \uc788\ub2e4\ub294\ub370 \ubaa8\ub450\uac00 \ub3d9\uc758\ud558\uc9c0 \uc54a\uc73c\uba74 \ud638\ud658\uc131\uc740 \ucf54\ub4dc \ubcc0\uacbd\uc744 \uc5b4\ub835\uac8c \ud55c\ub2e4. \ub9e4\uc6b0 \ub4dc\ubb3c\uac8c, dynamic_cast \uc758 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubb38\uc81c\uac00 \ub41c\ub2e4\uba74, \ud558\ud5a5 \uce90\uc2a4\ud305\uc774 \uc131\uacf5\ud55c\ub2e4\uace0 \uc815\uc801\uc73c\ub85c \ubcf4\uc7a5\ub418\ub294 \ub2e4\ub978 \ubc29\ubc95\uc744 \uc4f8 \uc218\ub3c4 \uc788\ub2e4 (\uc608\ub97c \ub4e4\uc5b4 Curiously Recurring Template Pattern\uc744 \uc8fc\uc758\ud574\uc11c \uc4f0\ub294 \ubc29\ubc95\ucc98\ub7fc). \uac00\uc0c1 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ud655\uc2e4\ud55c \uc8fc\uc11d\uacfc \ud568\uaed8 static_cast \uc5d0 \uc758\uc874\ud558\uac70\ub098 \uc2dc\uc2a4\ud15c\uc774 \uc815\ud655\uc131\uc744 \uac80\uc99d\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc720\uc9c0\ubcf4\uc218\uc5d0 \uc0ac\ub78c\uc774 \ud544\uc694\ud558\ub2e4\ub294 \uc870\ud56d\uc744 \uc791\uc131\ud558\ub77c. \uadf8\ub807\uac8c \ud558\ub354\ub77c\ub3c4, \uc6b0\ub9ac \uacbd\ud5d8\uc73c\ub85c \ubbf8\ub8e8\uc5b4 \"\ub098\ub294 \uc9c0\uae08 \ubb58 \ud558\ub294\uc9c0 \ubab0\ub77c\uc694\"\ub294 \ubc84\uadf8\uc758 \uadfc\uc6d0\uc774\ub2e4. Exception \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub294 \uc608\uc678\ub85c \ubcfc \uc218 \uc788\ub2e4: template < typename B > class Dx : B { // ... }; Enforcement \ubaa8\ub4e0 \ud558\uc704 \ud0c0\uc785\uc73c\ub85c\uc758 static_cast \ub97c \uc9c0\uc801\ud558\ub77c. static_cast \ub97c \uc218\ud589\ud558\ub294 C \uc2a4\ud0c0\uc77c \ubcc0\ud658\ub3c4 \ud3ec\ud568\ud558\ub77c \uc774 \uaddc\uce59\uc740 \ud0c0\uc785 \uc548\uc804\uc131 \uaddc\uce59\ub4e4\uc758 \uc77c\ubd80\uc774\ub2e4 C.147: \ud544\uc694\ud55c \ud074\ub798\uc2a4\ub97c \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uac00 \uc624\ub958\uc5d0 \ud574\ub2f9\ud558\ub294 \uacbd\uc6b0 dynamic_cast \ub97c \ucc38\uc870 \ud0c0\uc785\uc5d0 \uc0ac\uc6a9\ud558\ub77c Reason \ucc38\uc870\uc790\uc5d0 \ub300\ud55c \uce90\uc2a4\ud305\uc740 \ub2f9\uc2e0\uc774 \uc815\uc0c1\uc801\uc778 \uac1c\uccb4\ub97c \uc5bb\ub294 \uac83\uc744 \uc758\ub3c4\ud588\uc74c\uc744 \ud45c\ud604\ud55c\ub2e4. \ub530\ub77c\uc11c \uce90\uc2a4\ud305\uc740 \ubc18\ub4dc\uc2dc \uc131\uacf5\ud574\uc57c\ub9cc \ud55c\ub2e4. dynamic_cast \ub294 \ub9cc\uc57d \uc2e4\ud328\ud55c\ub2e4\uba74 \uc608\uc678\ub97c \ub358\uc9c8 \uac83\uc774\ub2e4. Example ??? Enforcement ??? C.148: \ud544\uc694\ud55c \ud074\ub798\uc2a4\ub97c \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uac00 \ub300\uc548\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 dynamic_cast \ub97c \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \uc0ac\uc6a9\ud558\ub77c Reason dynamic_cast \ub294 \ud3ec\uc778\ud130\uac00 \uacc4\uce35\uad6c\uc870 \ub0b4\uc5d0\uc11c \ub2e4\ud615\uc801 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\ub294\uc9c0 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc900\ub2e4. \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \ucc3e\ub294\ub370 \uc2e4\ud328\ud560 \uacbd\uc6b0 \ub2e8\uc21c\ud788 null \uac12\uc744 \ubc18\ud658\ud558\uae30 \ub54c\ubb38\uc5d0, \uc2e4\ud589\uc2dc\uac04\uc5d0 \uac80\uc0ac\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\ub2e4. \uc774 \ub355\ubd84\uc5d0 \ucc38\uc0c9 \uacb0\uacfc\uc5d0 \ub530\ub77c \ub2e4\ub978 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\ub2e4. C.147 \ud56d\ubaa9\uacfc \ubc18\ub300\ub85c, \ud0d0\uc0c9 \uc2e4\ud328\uac00 \uc624\ub958\ub77c\uba74, \uc870\uac74\ubd80 \uc2e4\ud589\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4. Example \uc544\ub798\uc758 \uc608\uc2dc\ub294 Shape_owner \uc758 add \ud568\uc218\uac00 \uc0dd\uc131\ub41c Shape \uc758 \uc18c\uc720\uad8c\uc744 \uac00\uc838\uac00\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uac1c\uccb4\ub4e4\uc740 \uae30\ud558\ud559\uc801 \ud2b9\uc131\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c\ub2e4. \uc774 \uc608\uc2dc\uc5d0\uc120, Shape \ub294 Geometric_attributes \ub97c \uc0c1\uc18d\ud558\uc9c0 \uc54a\ub294\ub2e4. void add ( Shape * const item ) { // Ownership is always taken owned_shapes . emplace_back ( item ); // Check the Geometric_attributes and add the shape to none/one/some/all of the views if ( auto even = dynamic_cast < Even_sided *> ( item )) { view_of_evens . emplace_back ( even ); } if ( auto trisym = dynamic_cast < Trilaterally_symmetrical *> ( item )) { view_of_trisyms . emplace_back ( trisym ); } } Notes \ud0d0\uc0c9 \uc2e4\ud328\ub85c \uc778\ud574 dynamic_cast \uc774 null\uc744 \ubc18\ud658\ud558\uae30 \ub54c\ubb38\uc5d0, null \ud3ec\uc778\ud130 \ucc38\uc870\uac00 \ubc1c\uc0dd\ud558\uace0 \ubbf8\uc815\uc758 \ub3d9\uc791\uc73c\ub85c \uc774\uc5b4\uc9c8 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c dynamic_cast \uc758 \uacb0\uacfc\ub294 \ud56d\uc0c1 null \uac12\uc778\uc9c0 \uac80\uc0ac\ub418\uc5b4\uc57c \ud55c\ub2e4. Enforcement (\ubcf5\uc7a1\ud568) dynamic_cast \uc758 \ud3ec\uc778\ud130 \ud0c0\uc785 \ubc18\ud658\uc744 \uac80\uc0ac\ud558\ub294 \ucf54\ub4dc\uac00 \uc5c6\uc73c\uba74, \uadf8 \ud3ec\uc778\ud130\uc758 \uc0ac\uc6a9\uc744 \uacbd\uace0\ud558\ub77c C.149: \ub3d9\uc801 \ud560\ub2f9\ud55c \uac1c\uccb4\uc758 \uc18c\uba78\uc744 \uc78a\uc9c0 \uc54a\ub3c4\ub85d unique_ptr \ud639\uc740 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc790\uc6d0 \ub204\uc218\ub97c \ubc29\uc9c0\ud55c\ub2e4. Example void use ( int i ) { auto p = new int { 7 }; // bad: initialize local pointers with new auto q = make_unique < int > ( 9 ); // ok: guarantee the release of the memory-allocated for 9 if ( 0 < i ) return ; // maybe return and leak delete p ; // too late } Enforcement new \ub97c \uc0ac\uc6a9\ud55c \uc77c\ubc18(naked) \ud3ec\uc778\ud130\uc758 \ucd08\uae30\ud654\ub97c \uc9c0\uc801\ud558\ub77c \uc9c0\uc5ed \ubcc0\uc218\uc758 delete \ucc98\ub9ac\ub97c \uc9c0\uc801\ud558\ub77c C.150: unique_ptr \ub85c \uc18c\uc720\ub418\ub294 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 make_unique() \ub97c \uc0ac\uc6a9\ud558\ub77c Reason make_unique \ub294 \uc0dd\uc131\uc5d0 \ub300\ud55c \ubcf4\ub2e4 \uc815\ud655\ud55c \uad6c\ubb38\uc744 \uc81c\uacf5\ud55c\ub2e4. \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\uc5d0\uc11c \uc608\uc678 \uc548\uc804\uc131\uc744 \ubcf4\uc7a5\ud55c\ub2e4. Example unique_ptr < Foo > p { new < Foo > { 7 }}; // OK: but repetitive auto q = make_unique < Foo > ( 7 ); // Better: no repetition of Foo // Not exception-safe: the compiler may interleave the computations of arguments as follows: // // 1. allocate memory for Foo, // 2. construct Foo, // 3. call bar, // 4. construct unique_ptr<Foo>. // // If bar throws, Foo will not be destroyed, and the memory-allocated for it will leak. f ( unique_ptr < Foo > ( new Foo ()), bar ()); // Exception-safe: calls to functions are never interleaved. f ( make_unique < Foo > (), bar ()); Enforcement \ubc18\ubcf5\uc801\uc778 \ud15c\ud50c\ub9bf \ud2b9\uc218\ud654 <Foo> \uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud55c\ub2e4 unique_ptr<Foo> \ub85c \uc120\uc5b8\ub41c \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4 C.151: shared_ptr \ub85c \uc18c\uc720\ub418\ub294 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 make_shared() \ub97c \uc0ac\uc6a9\ud558\ub77c Reason make_shared \ub294 \uc0dd\uc131\uc5d0 \ub300\ud55c \ubcf4\ub2e4 \uc815\ud655\ud55c \uad6c\ubb38\uc744 \uc81c\uacf5\ud55c\ub2e4. \ucc38\uc870 \uce74\uc6b4\ud2b8\uc5d0 \ub300\ud55c \ubcc4\ub3c4\uc758 \uacf5\uac04 \ud560\ub2f9\uc774 \ud544\uc694\uc5c6\uac8c \ub41c\ub2e4. shared_ptr \ub294 \uac1c\uccb4\uc758 \uc606(\ub2e4\uc74c \uc601\uc5ed)\uc5d0 \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \ubc30\uce58\ud574 \uc0ac\uc6a9\ud55c\ub2e4. Example void test () { // OK: but repetitive; and separate allocations for the Bar and shared_ptr's use count shared_ptr < Bar > p { new < Bar > { 7 }}; auto q = make_shared < Bar > ( 7 ); // Better: no repetition of Bar; one object } Enforcement \ubc18\ubcf5\uc801\uc778 \ud15c\ud50c\ub9bf \ud2b9\uc218\ud654 <Bar> \uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud55c\ub2e4 shared_ptr<Bar> \ub85c \uc120\uc5b8\ub41c \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4 C.152: \uc808\ub300\ub85c \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\uc5d0 \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \ub300\uc785\ud558\uc9c0 \ub9c8\ub77c Reason \uc0c1\uc704 \ud0c0\uc785 \ud3ec\uc778\ud130\ub97c \ub300\uc785\ud558\uba74 \ubd80\uc801\uc808\ud55c \uac1c\uccb4 \uc811\uadfc\uc774 \ubc1c\uc0dd\ud558\uace0 \uc544\ub9c8\ub3c4 \uba54\ubaa8\ub9ac \uc190\uc0c1\uc744 \uc77c\uc73c\ud0ac \uac83\uc774\ub2e4. Example struct B { int x ; }; struct D : B { int y ; }; void use ( B * ); D a [] = {{ 1 , 2 }, { 3 , 4 }, { 5 , 6 }}; B * p = a ; // bad: a decays to &a[0] which is converted to a B* p [ 1 ]. x = 7 ; // overwrite D[0].y use ( a ); // bad: a decays to &a[0] which is converted to a B* Enforcement \ubc30\uc5f4 \ud3ec\uc778\ud130\uc758 \ubcc0\ud658\uc774\ub098 \uc0c1\uc704 \ud0c0\uc785\uc5d0\uc11c \ud558\uc704 \ud0c0\uc785\uc73c\ub85c\uc758 \ubcc0\ud658\uc744 \uc9c0\uc801\ud55c\ub2e4 \ubc30\uc5f4\uc740 \ud3ec\uc778\ud130\ubcf4\ub2e4\ub294 span \uc744 \uc0ac\uc6a9\ud574\uc11c \uc804\ub2ec\ud558\ub77c. \uadf8\ub9ac\uace0 span \uc744 \uc0dd\uc131\ud558\uae30 \uc804\uae4c\uc9c0\ub294 \ud558\uc704 \ud0c0\uc785\uc5d0\uc11c \uc0c1\uc704 \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c C.153: \ud0c0\uc785 \uce90\uc2a4\ud305\ubcf4\ub2e4 \uac00\uc0c1 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c Reason \ud0c0\uc785 \uce90\uc2a4\ud305\uc774 \uc624\ub958\uc5d0 \ucde8\uc57d\ud55c \ubc18\uba74 \uac00\uc0c1\ud568\uc218 \ud638\ucd9c\uc740 \uc548\uc804\ud558\ub514. \uac00\uc0c1 \ud568\uc218 \ud638\ucd9c\uc740 \ucd5c\uc885 \uad6c\ud604\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc18\uba74, \ud0c0\uc785 \uce90\uc2a4\ud305\uc740 \uc911\uac04 \ud074\ub798\uc2a4\uc5d0 \uc801\uc6a9\ub420\uc218\ub3c4 \uc788\ub2e4. \uc774\ub85c \uc778\ud574 \uc798\ubabb\ub41c \uacb0\uacfc\ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub2e4 (\uacc4\uce35 \uad6c\uc870\uac00 \uc720\uc9c0\ubcf4\uc218 \uacfc\uc815\uc5d0\uc11c \ubcc0\uacbd\ub418\uc5c8\ub2e4\uba74). Example ??? Enforcement C.146 \ub97c \ucc38\uace0\ud558\ub77c C.over: \uc911\ubcf5\uc815\uc758(Overloading) \uc77c\ubc18 \ud568\uc218, \ud15c\ud50c\ub9bf \ud568\uc218, \uc5f0\uc0b0\uc790\ub97c \uc911\ubcf5 \uc815\uc758\ud560 \uc218 \uc788\ub2e4. \ud568\uc218 \uac1c\uccb4\ub294 \uc911\ubcf5\uc815\uc758\ud560 \uc218 \uc5c6\ub2e4. \uc911\ubcf5\uc815\uc758 \uaddc\uce59 \uc694\uc57d: C.160: \uc5f0\uc0b0\uc790\ub97c \uc815\uc758\ud560\ub54c\ub294 \uc804\ud1b5\uc801\uc778 \uc0ac\uc6a9\uc744 \ubaa8\ubc29\ud558\ub77c C.161: \ub300\uce6d\uc801\uc778 \uc5f0\uc0b0\uc790\ub294 \ube44\uba64\ubc84 \ud568\uc218\ub85c \uc815\uc758\ud558\ub77c C.162: \uac70\uc758 \ub3d9\ub4f1\ud55c \uc5f0\uc0b0\ub4e4\uc744 \uc911\ubcf5\uc815\uc758\ud558\ub77c C.163: \uac70\uc758 \ub3d9\ub4f1\ud55c \uc5f0\uc0b0\ub4e4'\ub9cc' \uc911\ubcf5\uc815\uc758\ud558\ub77c C.164: \uc554\ubb35\uc801 \ud615\ubcc0\ud658 \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc9c0\uc591\ud558\ub77c C.165: \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc774 \ud544\uc694\ud558\uba74 using \uc744 \uc0ac\uc6a9\ud558\ub77c C.166: \ub2e8\ud56d \uc5f0\uc0b0\uc790 & \ub294 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc640 \ucc38\uc870 \uccb4\uacc4\ub97c \ub530\ub974\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc911\ubcf5\uc815\uc758\ud558\ub77c C.167: \uc5f0\uc0b0\uc790\ub294 \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\ub97c \uc218\ud589\ud558\ub294\ub370 \uc0ac\uc6a9\ud558\ub77c C.168: \uc5f0\uc0b0\uc790\ub97c \uc911\ubcf5\uc815\uc758\ub294 \ud53c\uc5f0\uc0b0\uc790\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ud558\ub77c C.170: \ub78c\ub2e4\ub97c \uc911\ubcf5 \uc815\uc758\ud558\uace0 \uc2f6\ub2e4\uba74, \uc81c\ub124\ub9ad \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c C.160: \uc5f0\uc0b0\uc790\ub97c \uc815\uc758\ud560\ub54c\ub294 \uc804\ud1b5\uc801\uc778 \uc0ac\uc6a9\uc744 \ubaa8\ubc29\ud558\ub77c Reason \uc608\uc0c1\uc744 \ubc97\uc5b4\ub098\uc9c0 \uc54a\uac8c \ud55c\ub2e4. Example class X { public : // ... X & operator = ( const X & ); // member function defining assignment friend bool operator == ( const X & , const X & ); // == needs access to representation // after a = b we have a == b // ... }; \uc774 \uc608\uc2dc\uc5d0\uc120 \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\uad6c\uc870\ub97c \ub530\ub978\ub2e4: \ubcf5\uc0ac\ub41c \uac1c\uccb4\ub294 \ub3d9\ub4f1\ud55c \uac12\uc744 \uac00\uc9c4\ub2e4 . Example, bad X operator + ( X a , X b ) { return a . v - b . v ; } // bad: makes + subtract Note \uba64\ubc84\uac00 \uc544\ub2cc \uc5f0\uc0b0\uc790\ub4e4\uc740 friend\uc774\uac70\ub098 \ud53c\uc5f0\uc0b0\uc790\ub4e4\uacfc \uac19\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc815\uc758\ub418\uc5b4\uc57c \ud55c\ub2e4 . \uc774\ud56d \uc5f0\uc0b0\uc790\ub4e4\uc740 \ud53c\uc5f0\uc0b0\uc790\ub97c \ub3d9\ub4f1\ud558\uac8c \ub2e4\ub904\uc57c \ud55c\ub2e4 . Enforcement \uac70\uc758 \ubd88\uac00\ub2a5\ud558\ub2e4 C.161: \ub300\uce6d\uc801\uc778 \uc5f0\uc0b0\uc790\ub294 \ube44\uba64\ubc84 \ud568\uc218\ub85c \uc815\uc758\ud558\ub77c Reason \uc5f0\uc0b0\uc790 \uc815\uc758\uc5d0 \uba64\ubc84\ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \ud53c\uc5f0\uc0b0\uc790 \ud0c0\uc785\ub9c8\ub2e4 \uba64\ubc84\ud568\uc218\uac00 \ud544\uc694\ud558\ub2e4. \uac00\ub839 == \uc5f0\uc0b0\uc790\uc5d0 \ube44 \uba64\ubc84 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, a == b \uc640 b == a \uac00 \ubbf8\ubb18\ud558\uac8c \ub2e4\ub97c \uac83\uc774\ub2e4. Example bool operator == ( Point a , Point b ) { return a . x == b . x && a . y == b . y ; } Enforcement \uba64\ubc84 \ud568\uc218\uc778 \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c. C.162: \uac70\uc758 \ub3d9\ub4f1\ud55c \uc5f0\uc0b0\ub4e4\uc744 \uc911\ubcf5\uc815\uc758\ud558\ub77c Reason \ub17c\ub9ac\uc801\uc73c\ub85c \uac19\uc740 \uc5f0\uc0b0\uc774 \ub2e4\ub978 \ud0c0\uc785\uc5d0 \ub2e4\ub978 \uc774\ub984\uc744 \uac00\uc9c0\ub294 \uac83\uc740 \ud63c\ub780\uc2a4\ub7fd\uace0, \ud0c0\uc785 \uc815\ubcf4\ub97c \ud568\uc218 \uc774\ub984\uc5d0 \uc9d1\uc5b4\ub123\uac8c \ub41c\ub2e4. \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\ub3c4 \ubc29\ud574\ub41c\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc740 \uc608\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void print ( int a ); void print ( int a , int base ); void print ( const string & ); \uc774 \uc138 \ud568\uc218\ub4e4\uc740 \uc778\uc790\ub97c \ucd9c\ub825\ud55c\ub2e4. \ub2e4\ub978 \uacbd\uc6b0: void print_int ( int a ); void print_based ( int a , int base ); void print_string ( const string & ); \uc774 \uc138 \ud568\uc218\ub4e4\uc740 \uc778\uc790\ub97c \ucd9c\ub825\ud55c\ub2e4. \uc778\uc790 \ud0c0\uc785\uc744 \uc774\ub984\uc5d0 \ubd99\uc774\ub294 \uac83\uc740 \ubd88\ud544\uc694\ud558\uace0 \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ubabb\ud558\uac8c \ud55c\ub2e4. Enforcement ??? C.163: \uac70\uc758 \ub3d9\ub4f1\ud55c \uc5f0\uc0b0\ub4e4'\ub9cc' \uc911\ubcf5\uc815\uc758\ud558\ub77c Reason \ub17c\ub9ac\uc801\uc73c\ub85c \ub2e4\ub978 \ud568\uc218\uac00 \uac19\uc740 \uc774\ub984\uc744 \uac00\uc9c0\ub294 \uac83\uc740 \ud63c\ub780\uc744 \uc77c\uc73c\ud0a4\uace0 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c \uc624\ub958\ub85c \uc774\uc5b4\uc9c4\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc740 \uc608\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void open_gate ( Gate & g ); // remove obstacle from garage exit lane void fopen ( const char * name , const char * mode ); // open file \uc774 \ub450 \ud568\uc218\ub294 \uadfc\ubcf8\uc801\uc73c\ub85c \ub2e4\ub974\uace0 \uc5f0\uad00\uc131\uc774 \uc5c6\ub2e4. \ub530\ub77c\uc11c \ub2e4\ub978 \uc774\ub984\uc744 \uac00\uc9c0\ub294 \uac83\uc774 \uc88b\ub2e4. \ub2e4\ub978 \uacbd\uc6b0: void open ( Gate & g ); // remove obstacle from garage exit lane void open ( const char * name , const char * mode = \"r\" ); // open file \uc774 \ub450 \uc5f0\uc0b0\uc740 \uc5ec\uc804\ud788 \uadfc\ubcf8\uc801\uc73c\ub85c \ub2e4\ub974\uace0 \uc5f0\uad00\uc131\uc744 \uac00\uc9c0\uc9c0 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub984\uc774 \ucd95\uc57d\ub418\uc5c8\uace0 \ud63c\ub780\uc758 \uac00\ub2a5\uc131\uc744 \ub9cc\ub4e0\ub2e4. \ub2e4\ud589\ud788\ub3c4, \uc774\ub4e4\uc758 \uc2dc\uadf8\ub2c8\ucc98\uac00 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \ud0c0\uc785\uc2dc\uc2a4\ud15c\uc774 \uc2e4\uc218\ub97c \uc7a1\uc544\ub0bc \uac83\uc774\ub2e4. Note open , move , + , == \uacfc \uac19\uc774 \uc77c\ubc18\uc801\uc774\uace0 \ub9ce\uc774 \uc4f0\uc774\ub294 \uc774\ub984\uc5d0\ub294 \ud2b9\ud788 \uc8fc\uc758\ud558\ub77c. Enforcement ??? C.164: \uc554\ubb35\uc801 \ud615\ubcc0\ud658 \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc9c0\uc591\ud558\ub77c Reason \ubb35\uc2dc\uc801 \ubcc0\ud658\uc774 \ud544\uc218\uc801\uc77c \uc218 \uc788\ub2e4 ( double \uc5d0\uc11c int \ub85c \ubc14\uafbc\ub2e4\ub358\uc9c0). \ud558\uc9c0\ub9cc ( String \uc5d0\uc11c C-style \ubb38\uc790\uc5f4\uc774 \ub418\ub294 \uac83\ucc98\ub7fc) \uc758\ub3c4\uce58 \uc54a\uc740 \ub3d9\uc791\uc774 \uc0dd\uae30\uae30\ub3c4 \ud55c\ub2e4. Note \uc815\ub9d0 \ud544\uc694\ud55c \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uba85\uc2dc\uc801 \ubcc0\ud658\uc744 \uc120\ud638\ud558\ub77c. \"\uc815\ub9d0 \ud544\uc694\ud55c\"\uc740 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uc601\uc5ed\uc5d0\uc11c \uae30\ubcf8\uc801\uc774\uace0 \uc790\uc5f0\uc2a4\ub7ec\uc6b0\uba70 \uc790\uc8fc \ud544\uc694\ud55c \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4. (\uac00\ub839 \uc815\uc218\ub97c \ubcf5\uc18c\uc218\ub85c \ubcc0\ud658\ud558\ub294 \uac83\ucc98\ub7fc) (\ubcc0\ud658 \uc5f0\uc0b0\uc790 \ub610\ub294 \uc554\ubb35\uc801 \uc0dd\uc131\uc790\ub97c \ud1b5\ud574\uc11c) \uc554\ubb35\uc801 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uc57d\uac04\uc758 \ud3b8\uc548\ud568\ub9cc \uc5bb\uc744 \uc218 \uc788\uc744 \ubfd0\uc774\ub2e4. Example struct S1 { string s ; // ... operator char * () { return s . data (); } // BAD, likely to cause surprises }; struct S2 { string s ; // ... explicit operator char * () { return s . data (); } }; void f ( S1 s1 , S2 s2 ) { char * x1 = s1 ; // OK, but can cause surprises in many contexts char * x2 = s2 ; // error (and that's usually a good thing) char * x3 = static_cast < char *> ( s2 ); // we can be explicit (on your head be it) } \uc774\ub7f0 \ub180\ub78d\uace0 \uc7a0\uc7ac\uc801 \ud53c\ud574\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uc554\ubb35\uc801 \ubcc0\ud658\uc740 \ucc3e\uc544\ub0b4\uae30 \uc5b4\ub824\uc6b4 \ubb38\ub9e5 \uc18d\uc5d0\uc11c \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, S1 ff (); char * g () { return ff (); } ff() \uc5d0\uc11c \ubc18\ud658\ub41c \ubb38\uc790\uc5f4\uc774 \ud3ec\uc778\ud130\uac00 \uc0ac\uc6a9\ub418\uae30 \uc804\uc5d0 \ud30c\uad34\ub41c\ub2e4. Enforcement \ubaa8\ub4e0 \ud615\ubcc0\ud658 \uc5f0\uc0b0\uc790\ub97c \uc9c0\uc801\ud558\ub77c C.165: \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc774 \ud544\uc694\ud558\uba74 using \uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc704\uce58\ud55c \ud568\uc218 \uac1c\uccb4\uc640 \ud568\uc218\ub4e4\uc744 \ucc3e\uace0 \ubcf4\ud3b8\uc801\uc778 \ud568\uc218\ub85c \"\ucee4\uc2a4\ud130\ub9c8\uc774\uc988\" \ud560 \uc218 \uc788\ub2e4. Example swap \uc744 \uc0dd\uac01\ud574\ubcf4\ub77c. \uc774 \ud568\uc218\ub294 \uc77c\ubc18\uc801\uc778 (\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac) \ud568\uc218\uc774\uace0, \uc5b4\ub5a4 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc791\ud55c\ub2e4. \ud558\uc9c0\ub9cc, \uc5b4\ub5a4 \ud0c0\uc785\ub4e4\uc740 \ud2b9\ubcc4\ud55c swap() \uc744 \uc815\uc758\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc77c\ubc18\uc801\uc778 vector \uc758 swap() \uc740 \ucee8\ud14c\uc774\ub108 \ub0b4 \uc6d0\uc18c\ub4e4\uc744 \ubcf5\uc0ac\ud55c\ub2e4. \uc88b\uc740 \uad6c\ud604\uc774\ub77c\uba74 \ubcf5\uc0ac\ub97c \uc218\ud589\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. namespace N { My_type X { /* ... */ }; void swap ( X & , X & ); // optimized swap for N::X // ... } void f1 ( N :: X & a , N :: X & b ) { std :: swap ( a , b ); // probably not what we wanted: calls std::swap() } f1() \ud568\uc218 \uc548\uc5d0\uc11c std::swap() \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ucf54\ub4dc \uadf8\ub300\ub85c \uc2e4\ud589\ub41c\ub2e4: std \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc758 swap() \uc744 \ud638\ucd9c\ud560 \uac83\uc774\ub2e4. \ubd88\ud589\ud788\ub3c4, \uadf8\uac8c \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. N::X \ud0c0\uc785\uc5d0 \ub9de\uac8c \ud638\ucd9c\ub418\uac8c \ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c \ud560\uae4c? void f2 ( N :: X & a , N :: X & b ) { swap ( a , b ); // calls N::swap } \uc774 \ubc29\ubc95\uc740 \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \uc77c\ubc18\ud654\ub41c \ucf54\ub4dc\uac00 \uc544\ub2d0 \uc218 \uc788\ub2e4. \uc6b0\ub9ac\ub294 \ubcf4\ud1b5 \ud2b9\ubcc4\ud788 \uc791\uc131\ub41c \ud568\uc218\uac00 \uc788\uc73c\uba74 \uadf8 \ud568\uc218\ub97c \uc4f0\uace0 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0\ub294 \ubc94\uc6a9 \ud568\uc218(general function)\ub97c \ud638\ucd9c\ud558\uae30\ub97c \uc6d0\ud55c\ub2e4. \uc774\ub294 \ud568\uc218 \ud0d0\uc0c9\uc5d0 \ubc94\uc6a9 \ud568\uc218\ub97c \ud3ec\ud568\ud558\ub294 \uac83\uc73c\ub85c \ud574\uacb0\ud560 \uc218 \uc788\ub2e4: void f3 ( N :: X & a , N :: X & b ) { using std :: swap ; // std::swap\uc774 \ud0d0\uc0c9\ub418\ub3c4\ub85d \ud55c\ub2e4 swap ( a , b ); // N \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 swap\uc774 \uc874\uc7ac\ud558\uba74 \ud638\ucd9c\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 std::swap\uc744 \ud638\ucd9c\ud55c\ub2e4 } Enforcement swap \uac19\uc774 \uc798 \uc54c\ub824\uc9c4 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc744 \uc81c\uc678\ud558\uba74 \ud560 \uc218 \uc788\ub294\uac8c \uac70\uc758 \uc5c6\ub2e4. \ubb38\uc81c\ub294 qualified \ud0d0\uc0c9\uacfc unqualified \ud0d0\uc0c9\uc774 \ud568\uaed8 \uc0ac\uc6a9\ub41c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc5ed\uc8fc: \uc774\ub984 \ud0d0\uc0c9 - C++ Korea Template Study C.166: \ub2e8\ud56d \uc5f0\uc0b0\uc790 & \ub294 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc640 \ucc38\uc870 \uccb4\uacc4\ub97c \ub530\ub974\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc911\ubcf5\uc815\uc758\ud558\ub77c Reason & \uc5f0\uc0b0\uc790\ub294 C++\uc5d0\uc11c \ud544\uc218\uc801\uc774\ub2e4. C++ \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc758\ubbf8\uad6c\uc870\uc758 \ub9ce\uc740 \ubd80\ubd84\uc774 \uae30\ubcf8\uc801\uc778 \uc758\ubbf8\ub97c \uc804\uc81c\ud558\uace0 \uc788\ub2e4. Example class Ptr { // a somewhat smart pointer Ptr ( X * pp ) : p ( pp ) { /* check */ } X * operator -> () { /* check */ return p ; } X operator []( int i ); X operator * (); private : T * p ; }; class X { Ptr operator & () { return Ptr { this }; } // ... }; Note & \uc5f0\uc0b0\uc790\ub85c \"\ubb54\uac00 \ud558\ub824\uba74\" -> , [] , * , . \uc5f0\uc0b0\uc790\ub4e4\uc5d0 \uc801\ud569\ud55c \uc815\uc758(\ubc18\ud658 \ud0c0\uc785)\ub97c \uac00\uc9c0\ub3c4\ub85d \ud558\ub77c. . \uc5f0\uc0b0\uc790\ub294 \ud604\uc7ac\ub85c\uc368\ub294 \uc911\ubcf5\uc815\uc758\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc644\ubcbd\ud55c \uccb4\uacc4\ub97c \uac16\ucd94\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. \ub2e4\uc74c \ubb38\uc11c\ub97c \ubcf4\uae30\ub97c \uad8c\ud55c\ub2e4: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4477.pdf . std::addressof() \ub294 \ud56d\uc0c1 \ub0b4\uc7a5 \ud3ec\uc778\ud130 \ud0c0\uc785\uc744 \ubc18\ud658\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. Enforcement \uae4c\ub2e4\ub86d\ub2e4. & \uc5f0\uc0b0\uc790\uac00 -> \uc640 \ud568\uaed8 \uc0ac\uc6a9\uc790 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\ub2e4\uba74 \uacbd\uace0\ud55c\ub2e4. C.167: \uc5f0\uc0b0\uc790\ub294 \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\ub97c \uc218\ud589\ud558\ub294\ub370 \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131, \uad00\ub840\uc801 \uc758\ubbf8, \uc7ac\uc0ac\uc6a9\uc131, \uc77c\ubc18\ud654\ub41c \ucf54\ub4dc\uc5d0 \ub3c4\uc6c0\uc774 \ub41c\ub2e4 Example void cout_my_class ( const My_class & c ) // confusing, not conventional,not generic { std :: cout << /* class members here */ ; } std :: ostream & operator << ( std :: ostream & os , const my_class & c ) // OK { return os << /* class members here */ ; } \uadf8 \uc790\uccb4\ub85c, cout_my_class \ub294 \ubb38\uc81c\uac00 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc \uad00\ub840\uc801\uc73c\ub85c \ucd9c\ub825\uc5d0 \uc0ac\uc6a9\ud558\ub294 << \uc5f0\uc0b0\uc790\uc5d0 \ub9de\uac8c \uc791\uc131\ud560 \uc218 \uc5c6\ub2e4: My_class var { /* ... */ }; // ... cout << \"var = \" << var << '\\n' ; Note \ub300\ubd80\ubd84\uc758 \uc5f0\uc0b0\uc790\ub4e4\uc740 \uac15\ub825\ud558\uace0 \ud754\ud788 \uc0ac\uc6a9\ub418\ub294 \uc758\ubbf8\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4 \ube44\uad50 ( == , != , < , <= , > , >= ), \uc0b0\uc220 \uc5f0\uc0b0 ( + , - , * , / , % ) \uc811\uadfc \uc5f0\uc0b0 ( . , -> , \ub2e8\ud56d * , [] ) \ub300\uc785 ( = ) \uad00\ub840\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc5b4\uc628 \uc758\ubbf8\uc640 \ub2e4\ub974\uac8c \uc815\uc758\ud558\uac70\ub098 \uc0c8\ub86d\uac8c \uc758\ubbf8\ub97c \ubd80\uc5ec\ud574\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c. Enforcement \uae4c\ub2e4\ub86d\ub2e4. \uc758\ubbf8\uad6c\uc870\uc5d0 \ub300\ud55c \ud1b5\ucc30\uc774 \ud544\uc694\ud558\ub2e4. C.168: \uc5f0\uc0b0\uc790\ub97c \uc911\ubcf5\uc815\uc758\ub294 \ud53c\uc5f0\uc0b0\uc790\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ud558\ub77c Reason \uac00\ub3c5\uc131. \uc778\uc790 \uae30\ubc18 \ud0d0\uc0c9(ADL)\uc774 \uac00\ub2a5\ud558\ub2e4. \ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc815\uc758\ud558\ub294 \uac83\uc740 \uc77c\uad00\uc801\uc774\uc9c0 \uc54a\ub2e4. Example struct S { }; bool operator == ( S , S ); // OK: in the same namespace as S, and even next to S S s ; bool x = ( s == s ); \uae30\ubcf8\uc801\uc778 == \uc5f0\uc0b0\uc790\uac00 \ud558\ub294 \uc77c\uc774\ub2e4. Example namespace N { struct S { }; bool operator == ( S , S ); // OK: in the same namespace as S, and even next to S } N :: S s ; bool x = ( s == s ); // finds N::operator==() by ADL Example, bad struct S { }; S s ; namespace N { S :: operator ! ( S a ) { return true ; } S not_s = ! s ; } namespace M { S :: operator ! ( S a ) { return false ; } S not_s = ! s ; } \ub124\uc784\uc2a4\ud398\uc774\uc2a4 N \uacfc M \uc5d0\uc11c !s \uc758 \uc758\ubbf8\uac00 \ub2ec\ub77c\uc9c4\ub2e4. \uad49\uc7a5\ud788 \ud63c\ub780\uc2a4\ub7ec\uc6b8 \uc218 \uc788\ub2e4. namespace M \uc758 \uc815\uc758\ub97c \uc81c\uac70\ud558\uba74 \uc2e4\uc218\uac00 \ubc1c\uc0dd\ud560 \uac00\ub2a5\uc131\uc758 \uc0ac\ub77c\uc9c4\ub2e4. Note \uc774\ud56d \uc5f0\uc0b0\uc790\uac00 \ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc788\ub294 \ub450 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c \uc815\uc758\ub418\uc5c8\ub2e4\uba74, \uc774 \uaddc\uce59\uc744 \ub530\ub97c \uc218 \uc5c6\ub2e4. \uc608\ub97c \ub4e4\uc5b4: Vec :: Vector operator * ( const Vec :: Vector & , const Mat :: Matrix & ); \uc774\ub7f0 \uacbd\uc6b0\ub294 \ud53c\ud558\ub294 \uac83\uc774 \ucd5c\uc120\uc774\ub2e4. See also \ubcf4\uc870 \ud568\uc218\ub4e4\uc740 \uad00\ub828 \ud074\ub798\uc2a4\uc640 \uac19\uc740 namespace\uc5d0 \ubc30\uce58\ud558\ub77c \ub294 \uaddc\uce59\uc758 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4 Enforcement \ud53c\uc5f0\uc0b0\uc790\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc704\uce58\ud558\uc9c0 \uc54a\uc740 \uc5f0\uc0b0\uc790 \uc815\uc758\ub97c \uc9c0\uc801\ud55c\ub2e4 C.170: \ub78c\ub2e4\ub97c \uc911\ubcf5 \uc815\uc758\ud558\uace0 \uc2f6\ub2e4\uba74, \uc81c\ub124\ub9ad \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uac19\uc740 \uc774\ub984\uc73c\ub85c \ub450\uac1c\uc758 \uc11c\ub85c \ub2e4\ub978 \ub78c\ub2e4\ub97c \uc911\ubcf5 \uc815\uc758\ud560 \uc218 \uc5c6\ub2e4. Example void f ( int ); void f ( double ); auto f = []( char ); // error: cannot overload variable and function auto g = []( int ) { /* ... */ }; auto g = []( double ) { /* ... */ }; // error: cannot overload variables auto h = []( auto ) { /* ... */ }; // OK Enforcement \ucef4\ud30c\uc77c\ub7ec\uac00 \ub78c\ub2e4\ub97c \uc911\ubcf5 \uc815\uc758\ud558\ub824\ub294 \uc2dc\ub3c4\ub97c \uc7a1\uc544\ub0b8\ub2e4. C.union: \uacf5\uc6a9\uccb4(Union) union \uc740 \ubaa8\ub4e0 \uba64\ubc84\uac00 \uac19\uc740 \uc8fc\uc18c\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 struct \ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud55c \uc2dc\uc810\uc5d0 \ud558\ub098\uc758 \uba64\ubc84\ub9cc \uac00\uc9c0\uace0 \uc788\ub2e4. union \uc740 \uc5b4\ub5a4 \uba64\ubc84\uac00 \uc800\uc7a5\ub418\uc5c8\ub294\uc9c0 \ucd94\uc801\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc815\ud655\ud558\uac8c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4; \uc774\ub294 \ud544\uc5f0\uc801\uc73c\ub85c \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uc9c0\ub9cc, \uc774\ub97c \ubcf4\uc644\ud560 \ubc29\ubc95\uc740 \uc788\ub2e4 union \uc5d0 \uc5b4\ub5a4 \uba64\ubc84\uac00 \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uc9c0 \uc54c\ub824\uc8fc\ub3c4\ub85d \ud45c\uc9c0(indicator)\uac00 \ucd94\uac00\ub41c \uac83\uc744 tagged union , discriminated union , \ud639\uc740 variant \uc774\ub77c\uace0 \ubd80\ub978\ub2e4. \uacf5\uc6a9\uccb4(Unions) \uaddc\uce59 \uc694\uc57d: C.180: union \uc740 \uba54\ubaa8\ub9ac\ub97c \uc808\uc57d\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub77c C.181: \ud45c\uc9c0 \uc5c6\ub294(naked) union \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c C.182: Tagged union \uad6c\ud604\uc5d0\ub294 \uc775\uba85 union \uc744 \uc0ac\uc6a9\ud558\ub77c C.183: \ud0c0\uc785 \uc7ac\ud574\uc11d(type punning)\uc744 \uc704\ud574 union \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c ??? C.180: union \uc740 \uba54\ubaa8\ub9ac\ub97c \uc808\uc57d\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub77c Reason union \uc740 \ud558\ub098\uc758 \uba54\ubaa8\ub9ac \uc870\uac01\uc774 \ub2e4\ub978 \uc2dc\uac01\uc5d0 \ub2e4\ub978 \ud0c0\uc785\uc758 \uac1c\uccb4\ub4e4\ub85c \uc0ac\uc6a9\ub420 \uc218 \uc788\ub3c4\ub85d \ud574\uc900\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c, \ub2e4\ub978 \uac1c\uccb4\ub4e4\uc774 \ub3d9\uc2dc\uc5d0 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \uba54\ubaa8\ub9ac\ub97c \uc808\uc57d\ud558\ub294\ub370 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example union Value { int x ; double d ; }; Value v = { 123 }; // now v holds an int cout << v . x << '\\n' ; // write 123 v . d = 987.654 ; // now v holds a double cout << v . d << '\\n' ; // write 987.654 \ud558\uc9c0\ub9cc \uacbd\uace0\ub97c \uc720\uc2ec\ud788 \ubcf4\ub77c: \ud45c\uc9c0 \uc5c6\ub294(naked) union \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Example // Short-string optimization constexpr size_t buffer_size = 16 ; // Slightly larger than the size of a pointer class Immutable_string { public : Immutable_string ( const char * str ) : size ( strlen ( str )) { if ( size < buffer_size ) strcpy_s ( string_buffer , buffer_size , str ); else { string_ptr = new char [ size + 1 ]; strcpy_s ( string_ptr , size + 1 , str ); } } ~ Immutable_string () { if ( size >= buffer_size ) delete string_ptr ; } const char * get_str () const { return ( size < buffer_size ) ? string_buffer : string_ptr ; } private : // If the string is short enough, we store the string itself // instead of a pointer to the string. union { char * string_ptr ; char string_buffer [ buffer_size ]; }; const size_t size ; }; Enforcement ??? C.181: \ud45c\uc9c0 \uc5c6\ub294(naked) union \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Reason \ud45c\uc9c0 \uc5c6\ub294(naked) union \uc740 \uc5b4\ub5a4 \uba64\ubc84\ub97c \uc0ac\uc6a9\ud558\ub294\uc9c0 \uc54c \uc218 \uc5c6\ub294 union\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774\ub7f0 \uacbd\uc6b0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uacc4\uc18d \ucd94\uc801\ud574\uc57c \ud55c\ub2e4. \ud0c0\uc785 \uc624\ub958\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. Example, bad union Value { int x ; double d ; }; Value v ; v . d = 987.654 ; // v holds a double \uc5ec\uae30\uae4c\uc9c4 \ubb38\uc81c\uac00 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc union \uc740 \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4: cout << v . x << '\\n' ; // BAD, undefined behavior: v holds a double, but we read it as an int \uba85\uc2dc\uc801 \ubcc0\ud658\uc774 \uc5c6\uc74c\uc5d0\ub3c4 \ud0c0\uc785 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uc810\uc5d0 \uc8fc\ubaa9\ud558\ub77c. \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc774 \ud504\ub85c\uadf8\ub7a8\uc744 \ud14c\uc2a4\ud2b8 \ud588\uc744\ub584 \ucd9c\ub825\ub41c \uac12\uc740 987.654 \uc758 \ube44\ud2b8 \ud328\ud134\uc744 \uc815\uc218\ub85c \ud574\uc11d\ud55c 1683627180 \uc774\uc5c8\ub2e4. \uc774 \uc608\uc2dc\uc5d0\uc11c\ub294 \ucf54\ub4dc\uc5d0\ub294 \ubb38\uc81c \uc5c6\uc5b4 \ubcf4\uc774\uc9c0\ub9cc \"\ubcf4\uc774\uc9c0 \uc54a\ub294(invisible)\" \ud0c0\uc785 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uadf8\ub9ac\uace0, \"\ubcf4\uc774\uc9c0 \uc54a\ub294\" \uc624\ub958\ub85c, \uc774 \ucf54\ub4dc\ub294 \uc544\ubb34\uac83\ub3c4 \ucd9c\ub825\ud558\uc9c0 \uc54a\ub294\ub2e4: v . x = 123 ; cout << v . d << '\\n' ; // BAD: undefined behavior Alternative \ud0c0\uc785 \ud544\ub4dc\ub97c \ucd94\uac00\ud574\uc11c union \uc744 \ud074\ub798\uc2a4\ub85c \uac10\uc2fc\ub2e4. <variant> \ud5e4\ub354\uc758 \ud45c\uc900 variant \ud0c0\uc785\uc774 \uc774 \uc77c\uc744 \ub300\uc2e0 \ud574\uc900\ub2e4: variant < int , double > v ; v = 123 ; // v holds an int int x = get < int > ( v ); v = 123.456 ; // v holds a double w = get < double > ( v ); Enforcement ??? C.182: Tagged union \uad6c\ud604\uc5d0\ub294 \uc775\uba85 union \uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uc798 \uc124\uacc4\ub41c Tagged union\uc740 \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \uc775\uba85(anonymous) union\uc740 (tag, union) \ud615\ud0dc\uc758 \ud074\ub798\uc2a4 \uc815\uc758\ub97c \uc27d\uac8c \ub9cc\ub4e4\uc5b4\uc900\ub2e4. Example \uc774 \uc608\uc81c\ub294 \ub300\ubd80\ubd84 TC++PL4 pp216-218 \uc5d0\uc11c \ubc1c\ucdcc\ud55c \uac83\uc774\ub2e4. \uc124\uba85\uc744 \uc6d0\ud55c\ub2e4\uba74 \ud574\ub2f9 \ubb38\uc11c\ub97c \ucc38\uace0\ud558\ub77c. \uc608\uc2dc \ucf54\ub4dc\ub294 \uc0c1\uc138\ud55c \ud3b8\uc774\ub2e4. \uc774 \ud0c0\uc785\uc5d0\uc11c \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \ub300\uc785 \uc5f0\uc0b0\uacfc \uc18c\uba78\uc790\ub97c \ub2e4\ub8e8\ub294 \uac83\uc740 \uaf64 \uc2e0\uacbd\uc368\uc57c \ud558\ub294 \uc791\uc5c5\uc774\ub2e4. \uc774\ub7f0 \uc791\uc5c5\uc744 \ud504\ub85c\uadf8\ub798\uba38\uac00 \ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub294 \uac83\uc774 variant \uac00 \ud45c\uc900\uc5d0 \ucd94\uac00\ub41c \uc774\uc720 \uc911 \ud558\ub098\ub2e4. class Value { // two alternative representations represented as a union private : enum class Tag { number , text }; Tag type ; // discriminant union { // representation (note: anonymous union) int i ; string s ; // string has default constructor, copy operations, and destructor }; public : struct Bad_entry { }; // used for exceptions ~ Value (); Value & operator = ( const Value & ); // necessary because of the string variant Value ( const Value & ); // ... int number () const ; string text () const ; void set_number ( int n ); void set_text ( const string & ); // ... }; int Value :: number () const { if ( type != Tag :: number ) throw Bad_entry {}; return i ; } string Value :: text () const { if ( type != Tag :: text ) throw Bad_entry {}; return s ; } void Value :: set_number ( int n ) { if ( type == Tag :: text ) { s . ~ string (); // explicitly destroy string type = Tag :: number ; } i = n ; } void Value :: set_text ( const string & ss ) { if ( type == Tag :: text ) s = ss ; else { new ( & s ) string { ss }; // placement new: explicitly construct string type = Tag :: text ; } } Value & Value :: operator = ( const Value & e ) // necessary because of the string variant { if ( type == Tag :: text && e . type == Tag :: text ) { s = e . s ; // usual string assignment return * this ; } if ( type == Tag :: text ) s . ~ string (); // explicit destroy switch ( e . type ) { case Tag :: number : i = e . i ; break ; case Tag :: text : new ( & s )( e . s ); // placement new: explicit construct type = e . type ; } return * this ; } Value ::~ Value () { if ( type == Tag :: text ) s . ~ string (); // explicit destroy } Enforcement ??? C.183: \ud0c0\uc785 \uc7ac\ud574\uc11d(type punning)\uc744 \uc704\ud574 union \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Reason union \uc758 \uba64\ubc84\ub97c \ud55c \ud0c0\uc785\uc73c\ub85c \uac12\uc744 \uc4f0\uace0 \ub2e4\ub978 \ud0c0\uc785\uc73c\ub85c \uc77d\ub294 \uac83\uc740 \ubbf8\uc815\uc758 \ub3d9\uc791(undefined behavior)\uc774\ub2e4. \uc774\ub7f0 \ud574\uc11d\uc740 \ubcf4\uc774\uc9c0 \uc54a\uace0, \ud0c0\uc785 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \ucc3e\uc544\ub0b4\uae30 \uc5b4\ub835\ub2e4. union \uc744 \uc0ac\uc6a9\ud55c \ud0c0\uc785 \uc7ac\ud574\uc11d\uc740(type punning)\uc740 \uc624\ub958\uc758 \uc6d0\uc778\uc774\ub2e4. Example, bad union Pun { int x ; unsigned char c [ sizeof ( int )]; }; Pun \ud0c0\uc785\uc758 \uc758\ub3c4\ub294 int \ub97c char \ud615\ud0dc\ub85c \uc811\uadfc\ud558\ub294 \uac83\uc774\ub2e4. void bad ( Pun & u ) { u . x = 'x' ; cout << u . c [ 0 ] << '\\n' ; // undefined behavior } int \uc758 \ubc14\uc774\ud2b8\ub97c \ud655\uc778\ud558\uace0 \uc2f6\ub2e4\uba74, \ud0c0\uc785 \uc774\ub984\uc744 \uc0ac\uc6a9\ud55c \ud615\ubcc0\ud658(named cast)\ub97c \uc0ac\uc6a9\ud558\ub77c: void if_you_must_pun ( int & x ) { auto p = reinterpret_cast < unsigned char *> ( & x ); cout << p [ 0 ] << '\\n' ; // OK; better // ... } reinterpret_cast \uc744 \uc0ac\uc6a9\ud574 \ud0c0\uc785\uc744 \ubc14\uafd4\uc11c \uc811\uadfc\ud558\ub294 \uac83\uc740 \uc815\uc758\ub41c \ud589\ub3d9(defined behavior)\uc774\ub2e4(\ube44\ub85d reinterpret_cast \uc774 \uad8c\uc7a5\ub418\uc9c0\ub294 \uc54a\uc9c0\ub9cc). \uc774\ub7ec\uba74 \ucd5c\uc18c\ud55c \uc2e0\uacbd\uc744 \ub9ce\uc774 \uc368\uc57c\ud558\ub294 \uac83\ub4e4\uc774 \uc0ac\ub77c\uc9c4 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. Note \ubd88\ud589\ud558\uac8c\ub3c4 union \uc740 \ud0c0\uc785 \uc7ac\ud574\uc11d\uc5d0 \uaf64 \ub9ce\uc774 \uc0ac\uc6a9\ub41c\ub2e4. \"\ubcf4\ud1b5\uc758 \uacbd\uc6b0, \uae30\ub300\ud55c \ub300\ub85c \ub3d9\uc791\ud55c\ub2e4\"\ub294 \uac83\uc740 \uac15\ud55c \uc8fc\uc7a5\uc774\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc5c6\ub2e4. C++17 \uc5d0\uc11c\ub294 \uc788\ub294 \uadf8\ub300\ub85c\uc758 \ube44\ud2b8\uc5d0 \ub300\ud574 \uc5f0\uc0b0\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub3c4\ub85d std::byte \ud0c0\uc785\uc744 \ucd94\uac00\ud558\uc600\ub2e4. unsigned char \ud639\uc740 char \ub300\uc2e0\uc5d0 \uc774 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c Enforcement ???","title":"Class"},{"location":"Class/#c","text":"\ud074\ub798\uc2a4\ub294 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc73c\ub85c\uc368, \ud0c0\uc785\uc758 \ud45c\ud604\uacfc \uc5f0\uc0b0, \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc815\uc758\ud560 \uc218 \uc788\ub2e4. \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870\ub294 \uad00\ub828\ub41c \ud074\ub798\uc2a4\ub4e4\uc744 \uacc4\uce35\uc801\uc73c\ub85c \uad6c\uc870\ud654 \ud560 \ub54c \uc0ac\uc6a9\ub41c\ub2e4. \ud074\ub798\uc2a4 \uaddc\uce59 \uc694\uc57d: C.1: \uad00\ub828\ub41c \ub370\uc774\ud130\ub97c \uc870\uc9c1\ud654 \ud558\ub77c ( struct \uc640 class ) C.2: \ud0c0\uc785\uc774 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\uba74, class \ub97c \uc0ac\uc6a9\ud558\ub77c; \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc5d0 \ub300\ud55c \uc81c\uc57d\uc774 \uc790\uc720\ub86d\ub2e4\uba74 struct \ub97c \uc0ac\uc6a9\ud558\ub77c C.3: \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud574 \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc744 \ubd84\ub9ac\ud558\ub77c C.4: \ud074\ub798\uc2a4\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc \ud568\uc218\ub97c \uba64\ubc84\ud568\uc218\ub85c \uc791\uc131\ud558\ub77c C.5: \ubcf4\uc870 \ud568\uc218\ub4e4\uc740 \uad00\ub828 \ud074\ub798\uc2a4\uc640 \uac19\uc740 namespace\uc5d0 \ubc30\uce58\ud558\ub77c C.7: \ud074\ub798\uc2a4 \ub610\ub294 \uc5f4\uac70\ud615\uc5d0 \ub300\ud55c \uc815\uc758\uc640 \ubcc0\uc218 \uc120\uc5b8\uc744 \uac19\uc740 \uad6c\ubb38\uc5d0 \ub123\uc9c0 \ub9d0\uc544\ub77c C.8: non-public \uba64\ubc84\uac00 \uc788\ub2e4\uba74 struct \ubcf4\ub2e8 class \ub97c \uc0ac\uc6a9\ud558\ub77c C.9: \uba64\ubc84\ub4e4\uc758 \ub178\ucd9c\uc744 \ucd5c\uc18c\ud654\ud558\ub77c \ud558\uc704 \uc601\uc5ed: C.concrete: \uc2e4\uc81c \ud0c0\uc785(Concrete types) C.ctor: \uc0dd\uc131\uc790, \ub300\uc785 \uc5f0\uc0b0\uc790, \uc18c\uba78\uc790 C.con: \ucee8\ud14c\uc774\ub108\uc640 \ub9ac\uc18c\uc2a4 \ud578\ub4e4 C.lambdas: \ud568\uc218 \uac1c\uccb4\uc640 \ub78c\ub2e4 \ud45c\ud604\uc2dd C.hier: \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 (OOP) C.over: \uc624\ubc84\ub85c\ub529 C.union: \uacf5\uc6a9\uccb4","title":"C: \ud074\ub798\uc2a4\uc640 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870"},{"location":"Class/#c1-struct-class","text":"","title":"C.1: \uad00\ub828\ub41c \ub370\uc774\ud130\ub97c \uc870\uc9c1\ud654 \ud558\ub77c (struct \uc640 class)"},{"location":"Class/#reason","text":"\uc774\ud574\ud558\uae30 \uc27d\ub2e4. \uadfc\ubcf8\uc801\uc778 \uc774\uc720\ub85c \ub370\uc774\ud130\uac00 \uad00\ub828\uc774 \uc788\ub2e4\uba74, \uadf8 \uc0ac\uc2e4\uc740 \ucf54\ub4dc\uc5d0 \ubc18\uc601\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example","text":"void draw ( int x , int y , int x2 , int y2 ); // BAD: unnecessary implicit relationships void draw ( Point from , Point to ); // better","title":"Example"},{"location":"Class/#note","text":"\uac00\uc0c1 \ud568\uc218\uac00 \uc5c6\ub294 \uac04\ub2e8\ud55c \ud074\ub798\uc2a4\ub294 \uacf5\uac04, \uc2dc\uac04\uc801\uc778 \uc624\ubc84\ud5e4\ub4dc\uac00 \uc5c6\ub2e4.","title":"Note"},{"location":"Class/#note_1","text":"\uc5b8\uc5b4\uc801\uc778 \uad00\uc810\uc5d0\uc11c \ubcfc \ub54c class \uc640 struct \uc758 \ucc28\uc774\ub294 \uba64\ubc84\ub4e4\uc758 \uac00\uc2dc\uc131(visibility)\uc774\ub2e4.","title":"Note"},{"location":"Class/#enforcement","text":"\ud2b9\ubcc4\ud788 \uc5c6\ub2e4. \ub370\uc774\ud130 \ud56d\ubaa9\ub4e4\uc5d0 \ub300\ud55c \uacbd\ud5d8\uc801\uc778 \uad00\uc810\ub4e4\uc774 \ud568\uaed8 \ubc18\uc601\ub420 \uc218\ub294 \uc788\uc744 \uac83\uc774\ub2e4.","title":"Enforcement"},{"location":"Class/#c2-class-struct","text":"","title":"C.2: \ud0c0\uc785\uc774 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\uba74, class\ub97c \uc0ac\uc6a9\ud558\ub77c; \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc5d0 \ub300\ud55c \uc81c\uc57d\uc774 \uc790\uc720\ub86d\ub2e4\uba74 struct\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_1","text":"\uac00\ub3c5\uc131\uc774 \uc88b\uace0 \uc774\ud574\ud558\uae30\ub3c4 \uc27d\ub2e4. class \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368, \ud504\ub85c\uadf8\ub798\uba38\uac00 \ubd88\ubcc0\uc870\uac74(invariant)\uc774 \ud544\uc694\ud558\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c \ub41c\ub2e4. \uc774 \uc810\uc740 \uc720\uc775\ud55c \uad00\uc2b5\uc774\ub2e4.","title":"Reason"},{"location":"Class/#note_2","text":"invariant\ub294 \uac1c\uccb4 \uba64\ubc84\ub4e4\uc758 \ub17c\ub9ac\uc801\uc778 \uc0c1\ud0dc\ub85c\uc368, \uacf5\uac1c \uba64\ubc84 \ud568\uc218\ub4e4\uc774 \uac00\uc815\ud560 \uc218 \uc788\ub3c4\ub85d \uc0dd\uc131\uc790\uac00 \uc124\uc815 \ud574 \uc8fc\uc5b4\uc57c \ud55c\ub2e4. invariant\uac00 \uc124\uc815\ub41c \ud6c4\uc5d0\uc57c (\uc77c\ubc18\uc801\uc73c\ub85c \uc0dd\uc131\uc790\uc5d0 \uc758\ud574) \ubaa8\ub4e0 \uba64\ubc84 \ud568\uc218\ub294 \uac1c\uccb4\ub97c \ud1b5\ud574 \ud638\ucd9c\ub420 \uc218 \uc788\ub2e4. invariant\ub294 \ud615\uc2dd\uc5d0 \uad6c\uc560\ubc1b\uc9c0 \uc54a\uace0 (\uac00\ub839, \uc8fc\uc11d\uc73c\ub85c) \uae30\uc220\ub420 \uc218 \uc788\uc73c\uba70, \ub354 \ud615\uc2dd\uc744 \uac16\ucd98\ub2e4\uba74 Expects \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc774 \uc0c1\ud638\ub3c5\ub9bd\uc801\uc774\ub77c\uba74, \ubd88\ubcc0\uc870\uac74\uc740 \uc874\uc7ac\ud560 \uc218 \uc5c6\ub2e4.","title":"Note"},{"location":"Class/#example_1","text":"struct Pair { // the members can vary independently string name ; int volume ; }; \ud558\uc9c0\ub9cc: class Date { public : // validate that {yy, mm, dd} is a valid date and initialize Date ( int yy , Month mm , char dd ); // ... private : int y ; Month m ; char d ; // day };","title":"Example"},{"location":"Class/#note_3","text":"\ud074\ub798\uc2a4\uac00 \uc5b4\ub5a4 private \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba74, \uc0ac\uc6a9\uc790\ub294 \uc0dd\uc131\uc790 \ud638\ucd9c \uc5c6\uc774 \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud560 \uc218 \uc5c6\ub2e4. \ub530\ub77c\uc11c, \ud074\ub798\uc2a4\ub97c \uc815\uc758\ud558\ub294 \uc0ac\ub78c\uc740 \uc0dd\uc131\uc790\ub97c \uc81c\uacf5\ud558\uace0 \uadf8 \uc758\ubbf8\ub97c \uba85\uc2dc\ud574\uc57c\ub9cc \ud55c\ub2e4. \uc774\ub294 \ud074\ub798\uc2a4 \uc791\uc131\uc790\uac00 invariant\ub97c \uc815\uc758\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.","title":"Note"},{"location":"Class/#see-also","text":"private \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74 class \ub97c \uc0ac\uc6a9\ud558\ub77c \ud074\ub798\uc2a4 \uc815\uc758\uc5d0 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uba3c\uc800 \ubc30\uce58\ud558\ub77c \uba64\ubc84\uc758 \ub178\ucd9c\uc744 \ucd5c\uc18c\ud654\ud558\ub77c protected \ub370\uc774\ud130 \uc0ac\uc6a9\uc744 \uc9c0\uc591\ud558\ub77c","title":"See also"},{"location":"Class/#enforcement_1","text":"private \ub370\uc774\ud130\ub97c \uac00\uc9c4 struct \ub098 public \uba64\ubc84\ub97c \uac00\uc9c4 class \ub4e4\uc744 \ucc3e\uc544\ub0b8\ub2e4.","title":"Enforcement"},{"location":"Class/#c3","text":"","title":"C.3: \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud574 \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc744 \ubd84\ub9ac\ud558\ub77c"},{"location":"Class/#reason_2","text":"\uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc5d0 \ub300\ud55c \ubd84\uba85\ud55c \uad6c\ubd84\uc740 \uac00\ub3c5\uc131\uc744 \ub354 \uc88b\uac8c \ud558\uace0, \uc720\uc9c0 \ubcf4\uc218\ub97c \ub2e8\uc21c\ud558\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_2","text":"class Date { // ... some representation ... public : Date (); // validate that {yy, mm, dd} is a valid date and initialize Date ( int yy , Month mm , char dd ); int day () const ; Month month () const ; // ... }; \uc774\ub7ec\ud55c \uacbd\uc6b0, \uc774\uc81c \uc0ac\uc6a9\uc790\uc5d0\uac8c \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uace0 Date \uc5d0 \ub300\ud55c representation\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. (\ube44\ub85d \ub2e4\uc2dc \ucef4\ud30c\uc77c \ud574\uc57c \ud558\uaca0\uc9c0\ub9cc)","title":"Example"},{"location":"Class/#note_4","text":"\uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uac04\uc758 \uad6c\ubd84\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc720\uc77c\ud55c \ubc29\ubc95\uc740 \uc544\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74, \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud55c \uac1c\ub150\uc73c\ub85c \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc548\uc5d0 \ub3c5\ub9bd\uc801\uc778 \ud568\uc218\ub4e4\uc774\ub098 \ucd94\uc0c1 \uae30\ubcf8 \ud074\ub798\uc2a4 \ud639\uc740 \ud15c\ud50c\ub9bf \ud568\uc218\ub4e4\uc744 \uc120\uc5b8\ud574\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uac00\uc7a5 \uc911\uc694\ud55c \uac83\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc778\ud130\ud398\uc774\uc2a4\uc640 \uadf8\uac83\ub4e4\uc758 \uad6c\ud604 \"\uc138\ubd80\uc0ac\ud56d\"\uc744 \uad6c\ubd84\ud558\ub294 \uac83\uc774\ub2e4. \uc774\uc0c1\uc801\uc73c\ub85c, \uadf8\ub9ac\uace0 \uc77c\ubc18\uc801\uc73c\ub85c, \uc778\ud130\ud398\uc774\uc2a4\ub294 \uadf8 \uad6c\ud604\ub4e4\ubcf4\ub2e4 \ud6e8\uc52c \ub354 \uc548\uc815\uc801\uc774\ub2e4.","title":"Note"},{"location":"Class/#enforcement_2","text":"???","title":"Enforcement"},{"location":"Class/#c4","text":"","title":"C.4: \ud074\ub798\uc2a4\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub9cc \ud568\uc218\ub97c \uba64\ubc84\ud568\uc218\ub85c \uc791\uc131\ud558\ub77c"},{"location":"Class/#reason_3","text":"\uba64\ubc84 \ud568\uc218\uac04 \ucee4\ud50c\ub9c1\uc744 \uc904\uc778\ub2e4. \uac1c\uccb4 \uc0c1\ud0dc \ubcc0\uacbd\uc5d0 \uc758\ud574 \ubb38\uc81c\uac00 \uc0dd\uae30\ub294 \ud568\uc218\ub97c \uc904\uc778\ub2e4. \ud45c\ud604\uc774 \ubcc0\uacbd\ub41c \ud6c4\uc5d0 \uc218\uc815\ub420 \ud544\uc694\uac00 \uc788\ub294 \uba64\ubc84 \ud568\uc218\uc758 \uc218\ub97c \uc904\uc778\ub2e4.","title":"Reason"},{"location":"Class/#example_3","text":"class Date { // ... \uc0c1\ub300\uc801\uc73c\ub85c \uc801\uc740 \uc778\ud130\ud398\uc774\uc2a4 ... }; // helper functions: Date next_weekday ( Date ); bool operator == ( Date , Date ); \"helper functions\"\uc73c\ub85c \ud45c\uc2dc\ub41c \ud568\uc218\ub4e4\uc740 Date \uc758 \ub0b4\ubd80\uc5d0 \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.","title":"Example"},{"location":"Class/#note_5","text":"\"uniform function call\" \uc774 \uac00\ub2a5\ud574\uc9c0\uba74 \ub354 \uc88b\uc544\uc9c8 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Class/#exception","text":"C++ \uc5d0\uc11c\ub294 \uba64\ubc84 \ud568\uc218\ub9cc\uc774 virtual \ud568\uc218\uac00 \ub420 \uc218 \uc788\uc9c0\ub9cc, \ubaa8\ub4e0 virtual \uac00 \uba64\ubc84\uc5d0 \uc811\uadfc\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \ud2b9\ud788 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc740 \uba64\ubc84\uc5d0 \uc811\uadfc\ud558\ub294 \uacbd\uc6b0\uac00 \ub4dc\ubb3c\ub2e4. multi-methods \ub97c \ud655\uc778\ud558\ub77c.","title":"Exception"},{"location":"Class/#exception_1","text":"C++ \uc5b8\uc5b4\uc5d0\uc11c = , () , [] , -> \uc5f0\uc0b0\uc790\ub294 \uba64\ubc84\ud568\uc218\uc5ec\uc57c \ud55c\ub2e4.","title":"Exception"},{"location":"Class/#exception_2","text":"\uc911\ubcf5\uc815\uc758(overload) \uc9d1\ud569\uc5d0 private \ub370\uc774\ud130\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \uba64\ubc84\uac00 \uc788\uc744 \uc218 \uc788\ub2e4: class Foobar { public : void foo ( long x ) { /* manipulate private data */ } void foo ( double x ) { foo ( std :: lround ( x )); } // ... private : // ... }; \uc720\uc0ac\ud558\uac8c, \uc5b4\ub5a4 \ud568\uc218\ub4e4\uc740 \uc5f0\uc18d\uc801\uc73c\ub85c \ud638\ucd9c\ud558\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\uc744 \uc218 \uc788\ub2e4: x . scale ( 0.5 ). rotate ( 45 ). set_color ( Color :: red ); \uc77c\ubc18\uc801\uc73c\ub85c, \uc774\ub7f0 \ud568\uc218\ub4e4 \uc911 \uc77c\ubd80\ub294 private \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud55c\ub2e4.","title":"Exception"},{"location":"Class/#enforcement_3","text":"\ub370\uc774\ud130 \uba64\ubc84\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \ube44 \uac00\uc0c1 \uba64\ubc84 \ud568\uc218\ub97c \ucc3e\uc544\ub0b8\ub2e4. \uc774\ub7f0 \ud568\uc218\ub294 \ub9ce\uc740 \uba64\ubc84 \ud568\uc218\ub4e4\uc774 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uc9c1\uc811 \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc5c6\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4 virtual \ud568\uc218\ub4e4\uc740 \ubb34\uc2dc\ud55c\ub2e4 \uc911\ubcf5\uc815\uc758\ud558\ub294 \ud568\uc218 \uc911 \ud558\ub098 \uc774\uc0c1\uc758 \ud568\uc218\uac00 private \ub370\uc774\ud130 \uba64\ubc84\uc5d0 \uc811\uadfc\ud560 \ub54c, \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \ub2e4\ub978 \ud568\uc218\ub4e4\uc740 \ubb34\uc2dc\ud55c\ub2e4 this \ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub4e4\uc740 \ubb34\uc2dc\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c5-namespace","text":"","title":"C.5: \ubcf4\uc870 \ud568\uc218\ub4e4\uc740 \uad00\ub828 \ud074\ub798\uc2a4\uc640 \uac19\uc740 namespace\uc5d0 \ubc30\uce58\ud558\ub77c"},{"location":"Class/#reason_4","text":"\ubcf4\uc870 \ud568\uc218(helper function)\ub294 (\ubcf4\ud1b5 \ud074\ub798\uc2a4 \uc791\uc131\uc790\uac00 \uc81c\uacf5\ud558\ub294) \ud074\ub798\uc2a4\uc758 \ud45c\ud604\uc5d0 \uc9c1\uc811 \uc811\uadfc\ud560 \ud544\uc694\uac00 \uc5c6\ub294 \ud568\uc218\uc774\uba70, \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uc720\uc6a9\ud55c \uc778\ud130\ud398\uc774\uc2a4 \uc911\uc5d0 \ud558\ub098\ub85c \ubcfc \uc218 \uc788\ub2e4. \ubcf4\uc870 \ud568\uc218\ub4e4\uc744 \uac19\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ub123\uc73c\uba74 \ud568\uc218\uc640 \ud074\ub798\uc2a4\uc758 \uad00\uacc4\uac00 \uba85\ud655\ud574\uc9c0\uace0, Argument Dependent Lookup\uc5d0\uc11c \ubc1c\uacac \ud560 \uc218 \uc788\uac8c \ub41c\ub2e4.","title":"Reason"},{"location":"Class/#example_4","text":"namespace Chrono { // here we keep time-related services class Time { /* ... */ }; class Date { /* ... */ }; // helper functions: bool operator == ( Date , Date ); Date next_weekday ( Date ); // ... }","title":"Example"},{"location":"Class/#note_6","text":"\uc774\ub294 \uc5f0\uc0b0\uc790 \uc624\ubc84\ub85c\ub529 \uc744 \uc704\ud574\uc11c \ub9e4\uc6b0 \uc911\uc694\ud558\ub2e4.","title":"Note"},{"location":"Class/#enforcement_4","text":"\ub2e8\uc77c \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \uc778\uc790 \ud0c0\uc785\uc744 \ucde8\ud558\ub294 \uc804\uc5ed\ud568\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c7","text":"","title":"C.7: \ud074\ub798\uc2a4 \ub610\ub294 \uc5f4\uac70\ud615\uc5d0 \ub300\ud55c \uc815\uc758\uc640 \ubcc0\uc218 \uc120\uc5b8\uc744 \uac19\uc740 \uad6c\ubb38\uc5d0 \ub123\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Class/#reason_5","text":"\ud0c0\uc785\uc5d0 \ub300\ud55c \uc815\uc758\uc640 \ub2e4\ub978 \uac1c\uccb4(entitiy)\uc5d0 \ub300\ud55c \uc815\uc758\ub97c \uac19\uc740 \uad6c\ubb38(statement)\uc5d0 \ub123\ub294 \uac83\uc740 \ud63c\ub3d9\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\uace0, \ubd88\ud544\uc694\ud558\ub2e4.","title":"Reason"},{"location":"Class/#example-bad","text":"struct Data { /*...*/ } data { /*...*/ };","title":"Example; bad"},{"location":"Class/#example-good","text":"struct Data { /*...*/ }; Data data { /*...*/ };","title":"Example; good"},{"location":"Class/#enforcement_5","text":"\ud074\ub798\uc2a4\ub098 \uc5f4\uac70\ud615\uc758 \uc815\uc758\uc5d0 \uc788\ub294 \ub2eb\ub294 \uad04\ud638 } \uc5d0 ; \uc774 \ubc14\ub85c \ub098\ud0c0\ub098\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c8-non-public-struct-class","text":"","title":"C.8: non-public \uba64\ubc84\uac00 \uc788\ub2e4\uba74 struct\ubcf4\ub2e8 class\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_6","text":"\uac00\ub3c5\uc131\uc5d0 \uc88b\ub2e4. \ubb34\uc5c7\uc778\uac00 \uc228\uaca8\uc838 \uc788\uac70\ub098, \ucd94\uc0c1\ud654\ub418\uc5c8\ub2e4\ub294 \uac83\uc744 \ubd84\uba85\ud558\uac8c \ud55c\ub2e4. \uc720\uc775\ud55c \uad00\uc2b5\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_1","text":"struct Date { int d , m ; Date ( int i , Month m ); // ... lots of functions ... private : int y ; // year }; C++ \uc5b8\uc5b4 \uaddc\uce59\uc744 \uace0\ub824\ud588\uc744 \ub54c \uc774 \ucf54\ub4dc\uc5d4 \uc798\ubabb\ub41c \uac83\uc774 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc \ub514\uc790\uc778 \uad00\uc810\uc5d0\uc11c\ub294 \ubaa8\ub4e0\uac8c \uc798\ubabb\ub418\uc5c8\ub2e4. private \ub370\uc774\ud130\uac00 public \ub370\uc774\ud130\uc640 \uba40\ub9ac \ub5a8\uc5b4\uc838 \uc228\uc5b4\uc788\uace0, \ud074\ub798\uc2a4 \uc120\uc5b8\uc758 \ub2e4\ub978 \ubd80\ubd84\ub4e4\ub85c \ubd84\ub9ac\ub418\uc5b4 \uc788\ub2e4. \uc774\ub7f0 \uc694\uc18c\ub4e4\uc740 \uac00\ub3c5\uc131\uc744 \uc800\ud574\ud558\uace0 \uc720\uc9c0\ubcf4\uc218\ub97c \ubcf5\uc7a1\ud558\uac8c \ud55c\ub2e4.","title":"Example, bad"},{"location":"Class/#note_7","text":"\ud074\ub798\uc2a4 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uba3c\uc800 \ubc30\uce58\ud558\ub77c. NL.16\uc744 \ucc38\uace0\ud558\ub77c","title":"Note"},{"location":"Class/#enforcement_6","text":"private \ud639\uc740 protected \uba64\ubc84\ub97c \uac00\uc9c0\uc9c0\ub9cc struct \ub85c \uc120\uc5b8\ub41c \ud074\ub798\uc2a4\ub97c \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c9","text":"","title":"C.9: \uba64\ubc84\ub4e4\uc758 \ub178\ucd9c\uc744 \ucd5c\uc18c\ud654\ud558\ub77c"},{"location":"Class/#reason_7","text":"\ucea1\uc290\ud654. \uc815\ubcf4 \uc740\ub2c9. \uc758\ub3c4\uce58 \uc54a\uc740 \uc811\uadfc\uc744 \ucd5c\uc18c\ud654 \ud558\uace0, \uc720\uc9c0\ubcf4\uc218\ub97c \uc27d\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_5","text":"template < typename T , typename U > struct pair { T a ; U b ; // ... }; // \ubd80\ubd84\uc5d0 \uc5b4\ub5a4 \ucf54\ub4dc\uac00 \uc791\uc131\ub418\uac74, pair \uc758 \uc0ac\uc6a9\uc790\ub294 a \uc640 b \ub97c \ub3c5\ub9bd\uc801\uc73c\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. \ucf54\ub4dc \uaddc\ubaa8\uac00 \ud070 \uacbd\uc6b0, pair \uc758 \uba64\ubc84\uc5d0 \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\ub294\uc9c0 \ucc3e\uae30 \uc5b4\ub835\ub2e4. \ub3c5\ub9bd\uc801\uc73c\ub85c \ubcc0\uacbd\ud558\ub294 \uac83\uc774 \uc758\ub3c4\uc5d0 \ub9de\uc744 \uc218 \uc788\uc9c0\ub9cc, \uba64\ubc84\uac04\uc758 \uad00\uacc4\ub97c \uac15\uc81c\ud558\uace0 \uc2f6\ub2e4\uba74, private \ub85c \ubcc0\uacbd\ud558\uace0 \uadf8 \uad00\uacc4(\ubd88\ubcc0\uc870\uac74)\ub97c \uc0dd\uc131\uc790\uc640 \uba64\ubc84 \ud568\uc218\ub4e4\ub85c \uc9c0\ud0a4\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74: class Distance { public : // ... double meters () const { return magnitude * unit ; } void set_unit ( double u ) { // ... check that u is a factor of 10 ... // ... change magnitude appropriately ... unit = u ; } // ... private : double magnitude ; double unit ; // 1 is meters, 1000 is kilometers, 0.001 is millimeters, etc. };","title":"Example"},{"location":"Class/#note_8","text":"\ub9cc\uc57d \ubcc0\uc218\ub4e4\uc5d0 \uc811\uadfc\ud558\ub294 \ucf54\ub4dc\ub97c \uc27d\uac8c \uacb0\uc815\ud560 \uc218 \uc5c6\ub2e4\uba74, \uadf8 \ud0c0\uc785\uc774\ub098 \uc0ac\uc6a9\uc744 (\uc27d\uac8c) \ubcc0\uacbd\ud558\uac70\ub098 \uac1c\uc120\ud558\uae30 \uc5b4\ub835\ub2e4. public \uacfc protected \ub370\uc774\ud130\ub294 \ubcf4\ud1b5 \uc774 \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4.","title":"Note"},{"location":"Class/#example_6","text":"\ud074\ub798\uc2a4\ub294 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ub450\uac00\uc9c0 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud560 \uc218 \uc788\ub2e4. \ud558\ub098\ub294 \uc0c1\uc18d\ubc1b\ub294 \ud074\ub798\uc2a4\uc5d0\uac8c \uc81c\uacf5\ud558\ub294 protected \uc774\uba70 \ud558\ub098\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c public \uc774\ub2e4. \uc608\ub97c \ub4e4\uba74, \ud558\uc704 \ud074\ub798\uc2a4\ub294 \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ubd88\ubcc0\uc870\uac74\uc774 \uc720\uc9c0\ub41c\ub2e4\ub294 \uac83\uc744 \ud655\uc2e4\ud788 \ud560 \uc218 \uc788\ub2e4\uba74 \uc2e4\ud589\uc2dc\uac04 \uac80\uc0ac\ub97c \uc0dd\ub7b5 \ud560\uc218\ub3c4 \uc788\ub2e4: class Foo { public : int bar ( int x ) { check ( x ); return do_bar ( x ); } // ... protected : int do_bar ( int x ); // do some operation on the data // ... private : // ... data ... }; class Dir : public Foo { //... int mem ( int x , int y ) { /* ... do something ... */ return do_bar ( x + y ); // OK: derived class can bypass check } }; void user ( Foo & x ) { int r1 = x . bar ( 1 ); // OK, will check int r2 = x . do_bar ( 2 ); // error: would bypass check // ... }","title":"Example"},{"location":"Class/#note_9","text":"protected \ub370\uc774\ud130\ub294 \uc88b\uc740 \uc0dd\uac01\uc774 \uc544\ub2c8\ub2e4 .","title":"Note"},{"location":"Class/#note_10","text":"public \uba64\ubc84\ub97c \uac00\uc7a5 \uc55e\uc5d0, protected \uba64\ubc84\ub97c \ub2e4\uc74c\uc5d0, private \uba64\ubc84\ub97c \ub9c8\uc9c0\ub9c9\uc5d0 \ubc30\uce58\ud558\ub77c.","title":"Note"},{"location":"Class/#enforcement_7","text":"protected \ub370\uc774\ud130\ub97c \uc9c0\uc801\ud558\ub77c public \uacfc private \ub370\uc774\ud130\uac00 \ud568\uaed8 \uc0ac\uc6a9\ub41c \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#cconcrete-concrete-types","text":"\uc774\uc0c1\uc801\uc778 \ud074\ub798\uc2a4\ub294 \uc815\uaddc \ud0c0\uc785(Regular Type)\uacfc \uac19\uc544\uc57c \ud55c\ub2e4. \uc27d\uac8c \ub9d0\ud558\uba74 \" int \ucc98\ub7fc \ub3d9\uc791\ud558\ub294 \uac83\"\uc774\ub2e4. \uc2e4\uc81c \ud0c0\uc785(Concrete type)\uc774\ub780 \uac00\uc7a5 \uac04\ub2e8\ud55c \uc885\ub958\uc758 \ud074\ub798\uc2a4\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc5ed\uc8fc: Regular Type\uc740 \ub2e4\uc74c\uc758 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\ub294 \ud0c0\uc785\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. - DefaultConstructible - CopyConstructible, CopyAssignable - MoveConstructible, MoveAssignable - Destructible - Swappable - EqualityComparable \uc608\uc2dc\ub85c \uc5b8\uae09\ub41c int \uc758 \uacbd\uc6b0, \uae30\ubcf8 \uc5f0\uc0b0(\uc0dd\uc131, \ud30c\uad34, \ubcf5\uc0ac, \uc774\ub3d9)\uc744 \uc9c0\uc6d0\ud558\uba74\uc11c \uad50\ud658, \ub3d9\ub4f1\ube44\uad50\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4 \uc815\uaddc \ud0c0\uc785\uc758 \uac12\uc740 \ubcf5\uc0ac \ub420 \uc218 \uc788\uace0, \ubcf5\uc0ac\uc758 \uacb0\uacfc\ub294 \uc6d0\ubcf8\uacfc \uac19\uc740 \uac12\uc744 \uac16\ub294 \ub3c5\ub9bd\uc801\uc778 \uac1c\uccb4\uc774\ub2e4. \ud0c0\uc785\uc774 = \uc640 == \ub97c \ubaa8\ub450 \uac16\ub294\ub2e4\uba74, a = b \ub97c \uc2e4\ud589\ud55c \uc774\ud6c4\uc5d0\ub294 a == b \uc5d0\uc11c true \uac00 \ubc18\ud658\ub418\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \uc2e4\uc81c \ud0c0\uc785\uc774 \ub300\uc785\uacfc \ub3d9\ub4f1 \ube44\uad50\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc9c0\ub9cc, \uadf8\ub7f0 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\ub2e4 (\uac70\uc758 \uc5c6\uc5b4\uc57c \ud55c\ub2e4). C++\uc758 \uc5b8\uc5b4 \ub0b4\uc7a5(built-in) \ud0c0\uc785\ub4e4\uc740 \uc815\uaddc\uc801(Regular)\uc774\uace0, string , vector , map \uac19\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ud074\ub798\uc2a4\ub4e4 \ub610\ud55c \uadf8\ub807\ub2e4. \uc2e4\uc81c \ud0c0\uc785\ub4e4\uc740 \uc885\uc885 \uacc4\uce35\uad6c\uc870\uc758 \uc77c\ubd80\ub85c \uc0ac\uc6a9\ub418\ub294 \ud0c0\uc785\ub4e4\uacfc \uad6c\ubd84\ud558\uc5ec \uac12 \ud0c0\uc785\uc73c\ub85c \uc5b8\uae09\ub41c\ub2e4. \uc2e4\uc81c \ud0c0\uc785 \uaddc\uce59 \uc694\uc57d: C.10: \ud074\ub798\uc2a4 \uacc4\uce35 \ubcf4\ub2e4 \uc2e4\uc81c(Concrete) \ud0c0\uc785\ub4e4\uc744 \uc120\ud638\ud558\ub77c C.11: \uc2e4\uc81c \ud0c0\uc785\ub4e4\uc740 \uc815\uaddc\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub77c","title":"C.concrete: \uc2e4\uc81c \ud0c0\uc785(Concrete types)"},{"location":"Class/#c10-concrete","text":"","title":"C.10: \ud074\ub798\uc2a4 \uacc4\uce35 \ubcf4\ub2e4 \uc2e4\uc81c(Concrete) \ud0c0\uc785\ub4e4\uc744 \uc120\ud638\ud558\ub77c"},{"location":"Class/#reason_8","text":"\uc2e4\uc81c \ud0c0\uc785\uc740 \uadfc\ubcf8\uc801\uc73c\ub85c \uacc4\uce35\uad6c\uc870\ubcf4\ub2e4 \ub2e8\uc21c\ud558\ub2e4: \ub514\uc790\uc778\uc774 \ub354 \uc27d\uace0, \uad6c\ud604\uc774 \ub354 \uc27d\uace0, \uc0ac\uc6a9\ud558\uae30\uac00 \ub354 \uc26c\uc6b0\uba70, \ucd94\ub860\ud558\uae30 \ub354 \uc27d\ub2e4. \ub354 \uc791\uace0 \ub354 \ube60\ub974\uae30\ub3c4 \ud558\ub2e4. \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \ud0c0\ub2f9\ud55c \uc774\uc720\uac00 \uc788\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_7","text":"class Point1 { int x , y ; // ... operations ... // ... no virtual functions ... }; class Point2 { int x , y ; // ... operations, some virtual ... virtual ~ Point2 (); }; void use () { Point1 p11 { 1 , 2 }; // make an object on the stack Point1 p12 { p11 }; // a copy auto p21 = make_unique < Point2 > ( 1 , 2 ); // make an object on the free store auto p22 = p21 . clone (); // make a copy // ... } \ud074\ub798\uc2a4\uac00 \uacc4\uce35\uad6c\uc870\uc758 \uc77c\ubd80\uac00 \ub420 \uc218 \uc788\ub2e4\uba74, \ubc18\ub4dc\uc2dc \ud3ec\uc778\ud130\ub098 \ub808\ud37c\ub7f0\uc2a4\ub85c \uac1c\uccb4\ub97c \ub2e4\ub8e8\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub294 \uac04\uc811 \ucc98\ub9ac\ub97c \uc704\ud574 \ub354 \ub9ce\uc740 \uba54\ubaa8\ub9ac\ub97c \uc0ac\uc6a9\ud558\uac8c \ub418\uace0, \ub354 \ub9ce\uc740 \ud560\ub2f9\uacfc \ud574\uc81c, \uc2e4\ud589\uc2dc\uac04 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubc1c\uc0dd\ud558\uac8c \ub41c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.","title":"Example"},{"location":"Class/#note_11","text":"\uc2e4\uc81c \ud0c0\uc785\uc740 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub420 \uc218 \uc788\uace0, \ub2e4\ub978 \ud074\ub798\uc2a4\uc758 \uba64\ubc84\uac00 \ub420 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Class/#note_12","text":"\uc2e4\ud589\uc2dc\uac04\uc5d0 \ub2e4\ud615\uc801 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc704\ud574 \uac04\uc811\ucc98\ub9ac\ub294 \ud544\uc218\uc801\uc774\ub2e4. \ud560\ub2f9\uacfc \ud574\uc81c\uc758 \ucd94\uac00\ube44\uc6a9\uc740 \uadf8\ub807\uc9c0 \uc54a\ub2e4. (\ub2e8\uc9c0 \uac00\uc7a5 \ud754\ud55c \uc0ac\ub840\uc77c \ubfd0\uc774\ub2e4) \ud30c\uc0dd \ud074\ub798\uc2a4\uc758 \uc81c\ud55c\ub41c(\ud2b9\uc815\ub41c) \uac1c\uccb4\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c\uc368 \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. \ub3d9\uc801 \ud560\ub2f9\uc744 \ud560 \uc218 \uc5c6\uc73c\uba70, \ud50c\ub7ec\uadf8\uc778\uacfc \uac19\uc740 \uac83\ub4e4\uc5d0\uac8c \uc548\uc815\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud558\uace0\uc790 \ud560 \ub54c \uc774\ub807\uac8c \ud560 \uc218 \uc788\ub2e4. (\uc608\ucee8\ub300, hard real-time)","title":"Note"},{"location":"Class/#enforcement_8","text":"???","title":"Enforcement"},{"location":"Class/#c11","text":"","title":"C.11: \uc2e4\uc81c \ud0c0\uc785\ub4e4\uc740 \uc815\uaddc\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Class/#reason_9","text":"\uc77c\ubc18\uc801\uc778(regular) \ud0c0\uc785\uc740 \uc774\ud574\ud558\uace0 \ucd94\ub860(reason)\ud558\uae30 \uc27d\ub2e4. (\uc77c\ubc18\uc801\uc774\uc9c0 \uc54a\uc740 \ud0c0\uc785\ub4e4\uc740 \uc774\ud574\ud558\uace0 \uc0ac\uc6a9\ud558\ub294\ub370 \ucd94\uac00\uc801\uc778 \ub178\ub825\uc744 \ud544\uc694\ub85c \ud55c\ub2e4.)","title":"Reason"},{"location":"Class/#example_8","text":"struct Bundle { string name ; vector < Record > vr ; }; bool operator == ( const Bundle & a , const Bundle & b ) { return a . name == b . name && a . vr == b . vr ; } Bundle b1 { \"my bundle\" , { r1 , r2 , r3 }}; Bundle b2 = b1 ; if ( ! ( b1 == b2 )) error ( \"impossible!\" ); b2 . name = \"the other bundle\" ; if ( b1 == b2 ) error ( \"No!\" ); \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0, \ub9cc\uc57d concrete type\uc774 \ub300\uc785\uc5f0\uc0b0( a = b )\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \ube44\uad50 \uc5f0\uc0b0( a == b )\ub3c4 \uc9c0\uc6d0\ud55c\ub2e4.","title":"Example"},{"location":"Class/#enforcement_9","text":"???","title":"Enforcement"},{"location":"Class/#cctor","text":"\uc774 \ud568\uc218\ub4e4\uc740 \uac1c\uccb4\uc758 \uc0dd\uba85\uc8fc\uae30\ub97c \uc81c\uc5b4 \ud55c\ub2e4: \uc0dd\uc131, \ubcf5\uc0ac, \uc774\ub3d9, \uadf8\ub9ac\uace0 \uc18c\uba78. \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud574\uc11c \ud074\ub798\uc2a4\uc758 \ucd08\uae30\ud654\ub97c \ubcf4\uc7a5\ud558\uace0 \ub2e8\uc21c\ud654 \ud558\ub77c. \uae30\ubcf8 \uc5f0\uc0b0 \uc740 \uc544\ub798\uc640 \uac19\uc740 \uc5f0\uc0b0\ub4e4\uc744 \uc758\ubbf8\ud55c\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790: X() \ubcf5\uc0ac \uc0dd\uc131\uc790: X(const X&) \ubcf5\uc0ac \ub300\uc785 \uc5f0\uc0b0\uc790: operator=(const X&) \uc774\ub3d9 \uc0dd\uc131\uc790: X(X&&) \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790: operator=(X&&) \uc18c\uba78\uc790: ~X() \uc774\uc0c1\uc758 \uc5f0\uc0b0\ub4e4\uc740 \uc815\uc758\ud558\uc9c0 \uc54a\uc544\ub3c4 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0dd\uc131\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uae30\ubcf8\uc5f0\uc0b0\uc744 \uc81c\ud55c\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\ub2e4. \uae30\ubcf8 \uc5f0\uc0b0\uc740 \uac1c\uccb4\uc758 \uc218\uba85\uc8fc\uae30\uc640 \uad00\ub828\ub41c \uc5f0\uc0b0\ub4e4\uc758 \uc9d1\ud569\uc744 \uc758\ubbf8\ud55c\ub2e4. \ucf54\ub4dc\uac00 \uba85\uc2dc\ud558\uc9c0 \uc54a\ub294 \ud55c, C++\uc740 \ud074\ub798\uc2a4\ub97c \uac12 \ud0c0\uc785 \ucc98\ub7fc \ub2e4\ub8e8\uc9c0\ub9cc \ubaa8\ub4e0 \ud0c0\uc785\uc774 \uac12 \ud0c0\uc785\ucc98\ub7fc \ub3d9\uc791\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \uae30\ubcf8 \uc5f0\uc0b0 \uaddc\uce59\ub4e4: C.20: \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uba74 \uadf8\ub807\uac8c \ud558\ub77c C.21: \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758 \ud558\uac70\ub098 =delete \ub85c \uc120\uc5b8\ud588\ub2e4\uba74, \ub098\uba38\uc9c0 \ubaa8\ub450 \uc815\uc758\ud558\uac70\ub098 =delete \ud558\ub77c C.22: \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc740 \uc11c\ub85c \uc870\ud654\ub86d\uac8c \ub3d9\uc791\ud574\uc57c \ud55c\ub2e4 \uc18c\uba78\uc790 \uaddc\uce59\ub4e4: C.30: \uac1c\uccb4\uac00 \uc5c6\uc5b4\uc9c8 \ub54c, \uba85\uc2dc\uc801\uc778 \ub3d9\uc791\uc774 \ud544\uc694\ud560 \uacbd\uc6b0 \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c C.31: \ud074\ub798\uc2a4\uac00 \ud68d\ub4dd\ud55c \ubaa8\ub4e0 \uc790\uc6d0\uc740 \uc18c\uba78\uc790\uc5d0\uc11c \ud574\uc81c\ub418\uc5b4\uc57c \ud55c\ub2e4 C.32: \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130( T* )\ub098 \ucc38\uc870( T& )\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \ucc38\uc870 \ub300\uc0c1\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub294\uc9c0\ub97c \uace0\ub824\ud558\ub77c C.33: \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130\ub85c \ub300\uc0c1\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub2e4\uba74, \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c C.35: \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\ub294 \uacf5\uac1c\ub41c \uac00\uc0c1 \uc18c\uba78\uc790 \ud639\uc740 \uc0c1\uc18d\ub418\ub294 \ube44-\uac00\uc0c1 \ud568\uc218\uc5ec\uc57c \ud55c\ub2e4 C.36: \uc18c\uba78\uc790\ub294 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 C.37: \uc18c\uba78\uc790\ub97c noexcept \ub85c \uc791\uc131\ud558\ub77c \uc0dd\uc131\uc790 \uaddc\uce59\ub4e4: C.40: \ud074\ub798\uc2a4\uac00 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\uba74 \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud558\ub77c C.41: \uc0dd\uc131\uc790\ub294 \uc644\uc804\ud788 \ucd08\uae30\ud654\ub41c \uac1c\uccb4\ub97c \uc0dd\uc131\ud574\uc57c \ud55c\ub2e4 C.42: \uc0dd\uc131\uc790\uac00 \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uc9c0 \ubabb\ud55c\ub2e4\uba74, \uc608\uc678\ub97c \ub358\uc9c0\ub3c4\ub85d \ud558\ub77c C.43: \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud074\ub798\uc2a4(\uac12 \ud0c0\uc785)\ub294 \ubc18\ub4dc\uc2dc \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac16\ub3c4\ub85d \ud558\ub77c C.44: \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uac00\ub2a5\ud55c \ub2e8\uc21c\ud558\uace0 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c C.45: \uba64\ubc84\ub97c \ucd08\uae30\ud654 \ud558\uae30\ub9cc \ud558\ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c; \ub300\uc2e0 \uba64\ubc84\ub4e4\uc774 \uc2a4\uc2a4\ub85c \ucd08\uae30\ud654 \ud558\ub3c4\ub85d \ud558\ub77c C.46: \ub2e8\uc77c \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uc0dd\uc131\uc790\ub294 explicit \uc73c\ub85c \uc120\uc5b8\ud558\ub77c C.47: \uba64\ubc84 \ubcc0\uc218\ub4e4\uc740 \uc120\uc5b8\ub41c \uc21c\uc11c\ub300\ub85c \ucd08\uae30\ud654\ud558\ub77c C.48: \uc0c1\uc218 \ucd08\uae30\ud654\ub294 \uac00\ub2a5\ud55c \ud074\ub798\uc2a4 \ub0b4(in-class) \uba64\ubc84 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c C.49: \uc0dd\uc131\uc790 \uc548\uc5d0\uc11c\uc758 \ub300\uc785 \ubcf4\ub2e4\ub294 \ucd08\uae30\ud654\ub97c \uc120\ud638\ud558\ub77c C.50: \ucd08\uae30\ud654 \uacfc\uc815\uc5d0\uc11c virtual \ub3d9\uc791\uc774 \ud544\uc694\ud558\ub2e4\uba74, \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c C.51: \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub4e4\uc744 \uc704\ud55c \uc77c\ubc18\uc801\uc778 \ub3d9\uc791\uc744 \ud45c\ud604\ud560 \ub54c\ub294 \ub300\ub9ac \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c C.52: \ucd94\uac00\uc801\uc778 \ucd08\uae30\ud654\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \ud30c\uc0dd\ub41c \ud074\ub798\uc2a4\uc5d0\uc11c \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \uc0c1\uc18d \uc0dd\uc131\uc790\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c \ubcf5\uc0ac\uc640 \uc774\ub3d9 \uaddc\uce59\ub4e4: C.60: \ubcf5\uc0ac\uc5f0\uc0b0\uc744 virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c. \ub9e4\uac1c\ubcc0\uc218\ub294 const& \ub85c \ubc1b\uace0, const& \ub85c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c C.61: \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \ubcf5\uc0ac\ub97c \uc218\ud589\ud574\uc57c \ud55c\ub2e4 C.62: \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uac8c \uc791\uc131\ud558\ub77c C.63: \uc774\ub3d9 \uc5f0\uc0b0\uc740 virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c, \ub9e4\uac1c\ubcc0\uc218\ub294 && \ub97c \uc0ac\uc6a9\ud558\uace0, const& \ub85c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c C.64: \uc774\ub3d9 \uc5f0\uc0b0\uc740 \uc774\ub3d9\uc744 \uc218\ud589\ud574\uc57c \ud558\uba70, \uc6d0\ubcf8 \uac1c\uccb4\ub97c \uc720\ud6a8\ud55c \uc0c1\ud0dc\ub85c \ub0a8\uaca8\ub193\uc544\uc57c \ud55c\ub2e4 C.65: \uc774\ub3d9 \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uac8c \uc791\uc131\ud558\ub77c C.66: \uc774\ub3d9 \uc5f0\uc0b0\uc740 noexcept \ub85c \ub9cc\ub4e4\uc5b4\ub77c C.67: \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\ub294 \ubcf5\uc0ac\ub97c \uc81c\ud55c\ud574\uc57c \ud55c\ub2e4 \ub2e4\ub978 \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc5d0 \ub300\ud55c \uaddc\uce59: C.80: \uae30\ubcf8 \uc758\ubbf8\uad6c\uc870(semantic)\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub824\uba74 =default \ub97c \uc0ac\uc6a9\ud558\ub77c C.81: \uae30\ubcf8 \ub3d9\uc791\uc744 (\ub300\uc548\uc744 \uc6d0\ud558\uc9c0 \uc54a\uace0) \uae08\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74 =delete \ub97c \uc0ac\uc6a9\ud558\ub77c C.82: \uc0dd\uc131\uc790 \ub610\ub294 \uc18c\uba78\uc790\uc5d0\uc11c \uac00\uc0c1 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9d0\uc544\ub77c C.83: \uac12 \ud0c0\uc785\ub4e4\uc5d0\ub294, noexcept swap\ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c C.84: swap \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 C.85: swap \uc5f0\uc0b0\uc740 noexcept \ub85c \uc791\uc131\ud558\ub77c C.86: == \uc5f0\uc0b0\uc790\ub294 \ud53c\uc5f0\uc0b0\uc790 \ud0c0\uc785\ub4e4\uc5d0 \ub300\uce6d\uc801\uc774\uace0, noexcept \ub85c \ub9cc\ub4e4\uc5b4\ub77c C.87: \uae30\ubcf8 \ud074\ub798\uc2a4\uc5d0 \uc788\ub294 == \uc5d0 \uc8fc\uc758\ud558\ub77c C.89: hash \ub294 noexcept \ub85c \uc791\uc131\ud558\ub77c C.90: memset \ub610\ub294 memcpy \uac00 \uc544\ub2cc, \uc0dd\uc131\uc790\uc640 \ud560\ub2f9 \uc5f0\uc0b0\uc790\uc5d0 \uc758\uc874\ud558\ub77c","title":"C.ctor: \uc0dd\uc131\uc790, \ub300\uc785 \uc5f0\uc0b0\uc790, \uc18c\uba78\uc790"},{"location":"Class/#cdefop-default-operations","text":"C++ \uc5d0\uc11c\ub294 \uae30\ubcf8\uc801\uc778 \uc758\ubbf8\ub97c \uac00\uc9c4 \uc5f0\uc0b0\ub4e4\uc744 \uc81c\uacf5\ud55c\ub2e4. \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc774 \uc5f0\uc0b0\ub4e4\uc744 \uae08\uc9c0\ud558\uac70\ub098 \uad50\uccb4\ud560 \uc218 \uc788\ub2e4.","title":"C.defop: \uae30\ubcf8 \uc5f0\uc0b0\ub4e4(Default Operations)"},{"location":"Class/#c20","text":"","title":"C.20: \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub418\uba74 \uadf8\ub807\uac8c\ud558\ub77c"},{"location":"Class/#reason_10","text":"\uac00\uc7a5 \ub2e8\uc21c\ud558\uace0, \uba85\ub8cc\ud55c \uc758\ubbf8\ub97c \uc900\ub2e4.","title":"Reason"},{"location":"Class/#example_9","text":"struct Named_map { public : // ... no default operations declared ... private : string name ; map < int , int > rep ; }; Named_map nm ; // default construct Named_map nm2 { nm }; // copy construct std::map \uacfc string \uc740 \ubaa8\ub4e0 \ud2b9\uc218\ud55c \ud568\uc218\ub4e4\uc744 \uac16\uace0 \uc788\ub2e4, \ucd94\uac00\ub85c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.","title":"Example"},{"location":"Class/#note_13","text":"\"The rule of zero\"\ub85c \uc54c\ub824\uc838 \uc788\ub2e4.","title":"Note"},{"location":"Class/#enforcement_10","text":"(Not enforceable) \uc2dc\ud589\ud560 \uc218 \uc5c6\ub354\ub77c\ub3c4, \uc88b\uc740 \uc815\uc801 \ubd84\uc11d\uae30\ub294 \uc774 \uaddc\uce59\uc5d0 \ub9de\ub294 \uac00\ub2a5\ud55c \uac1c\uc120\uc0ac\ud56d\ub4e4\uc744 \uc54c\ub824\uc8fc\ub294 \ud328\ud134\ub4e4\uc744 \ucc3e\uc744 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74, \ud3ec\uc778\ud130\uc640 \ud06c\uae30\ub97c \uba64\ubc84\ub85c \uac16\ub294 \ud074\ub798\uc2a4\uac00 \uc788\uace0 \uc18c\uba78\uc790\uc5d0\uc11c \uadf8 \ud3ec\uc778\ud130\ub97c delete \ud55c\ub2e4\uba74 \uc544\ub9c8\ub3c4 vector \ub85c \ubc14\uafc0 \uc218 \uc788\uc744 \uac83\uc774\ub2e4.","title":"Enforcement"},{"location":"Class/#c21-delete-delete","text":"","title":"C.21: \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc815\uc758 \ud558\uac70\ub098 =delete \ub85c \uc120\uc5b8\ud588\ub2e4\uba74, \ub098\uba38\uc9c0 \ubaa8\ub450 \uc815\uc758\ud558\uac70\ub098 =delete\ud558\ub77c"},{"location":"Class/#reason_11","text":"\uc774 \ud2b9\ubcc4\ud55c \uba64\ubc84 \ud568\uc218\ub4e4 \uc740 \uae30\ubcf8 \uc0dd\uc131\uc790, \ubcf5\uc0ac \uc0dd\uc131\uc790, \ubcf5\uc0ac \ub300\uc785 \uc5f0\uc0b0\uc790, \uc774\ub3d9 \uc0dd\uc131\uc790, \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790, \uc18c\uba78\uc790\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc774\ub4e4\uc758 \uc758\ubbf8\ub294 \uc11c\ub85c \ubc00\uc811\ud558\uac8c \uc5f0\uad00\ub418\uc5b4 \uc788\ub2e4. \ub9cc\uc57d \ud55c \ud568\uc218\uac00 \uae30\ubcf8 \uc81c\uacf5 \ud568\uc218\uac00 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4\uba74(non-default), \ub2e4\ub978 \ud568\uc218\ub4e4\ub3c4 \uc218\uc815\uc774 \ud544\uc694\ud558\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc81c\uc678\ud558\uace0 \uc774 \ud2b9\ubcc4\ud55c \uba64\ubc84 \ud568\uc218\ub4e4 \uc911 \ud558\ub098\ub97c =default \ud639\uc740 =delete \ub85c \uc120\uc5b8\ud560 \uacbd\uc6b0, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774\ub3d9 \uc0dd\uc131\uc790\uc640 \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790\ub97c \ubb35\uc2dc\uc801\uc73c\ub85c \uc120\uc5b8\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub3d9 \uc0dd\uc131\uc790 \ub610\ub294 \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790\ub97c \uc120\uc5b8\ud558\ub294 \uacbd\uc6b0, \ubcf5\uc0ac \uc0dd\uc131\uc790\uc640 \ubcf5\uc0ac \ub300\uc785 \uc5f0\uc0b0\uc790\uac00 \uc774\ub97c \ub530\ub978\ub2e4. \uc774\ub3d9 \uc5f0\uc0b0\uc774 =default \ub85c \uc120\uc5b8\ub41c \uacbd\uc6b0 \ubcf5\uc0ac \uc5f0\uc0b0\uc774 \uc790\ub3d9\uc73c\ub85c \uc815\uc758\ub418\uba70, \uc774\ub3d9 \uc5f0\uc0b0\uc774 =delete \ub85c \uc120\uc5b8\ub41c \uacbd\uc6b0 \ubcf5\uc0ac \uc5f0\uc0b0\ub3c4 =delete \uac00 \uc801\uc6a9\ub41c\ub2e4. \ub530\ub77c\uc11c, \uc774 \ud2b9\ubcc4 \ud568\uc218\ub4e4 \uc911 \ud558\ub098\ub77c\ub3c4 \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74, \uc758\ub3c4\uce58 \uc54a\uc740 \ubcf5\uc0ac\uc640 \uc774\ub3d9\uc5f0\uc0b0\uc744 \ud53c\ud558\uae30 \uc704\ud574 \ub098\uba38\uc9c0 \ud568\uc218\ub4e4\ub3c4 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_2","text":"struct M2 { // bad: incomplete set of default operations public : // ... // ... no copy or move operations ... ~ M2 () { delete [] rep ; } private : pair < int , int >* rep ; // zero-terminated set of pairs }; void use () { M2 x ; M2 y ; // ... x = y ; // the default assignment // ... } \uc5ec\uae30\uc11c\ub294, \uc18c\uba78\uc790\uc5d0 \ub300\ud55c \"\ud2b9\ubcc4\ud55c \uc8fc\uc758\"\uac00 \ud544\uc694\ud558\ub2e4\uace0 \ud55c\ub2e4\uba74, \ubcf5\uc0ac\uc640 \uc774\ub3d9 \ud560\ub2f9(\ub458 \ub2e4 \ubb35\uc2dc\uc801\uc73c\ub85c \uac1c\uccb4\ub97c \uc18c\uba78\ud560 \uac83\uc774\ub2e4)\uc774 \uc815\ud655\ud558\uac8c \ub3d9\uc791\ud560 \uac00\ub2a5\uc131\uc740 \uc801\ub2e4. (\uc5ec\uae30\uc11c\ub294, \ub450\ubc88 delete \ub97c \uc2dc\ub3c4\ud560 \uac83\uc774\ub2e4)","title":"Example, bad"},{"location":"Class/#note_14","text":"\uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc911\uc694\ud558\uac8c \uc0dd\uac01\ud558\ub294\uc9c0\uc5d0 \ub2ec\ub824\uc788\ub294\ub370, \uc774\uac83\uc740 \"The rule of five\" \ud639\uc740 \"The rule of six\" \uc774\ub77c\uace0 \uc54c\ub824\uc838 \uc788\ub2e4.","title":"Note"},{"location":"Class/#note_15","text":"\ub2e4\ub978 \uac83\uc740 \uc815\uc758 \ud558\ub354\ub77c\ub3c4 \uae30\ubcf8 \uc5f0\uc0b0\uc758 \uae30\ubcf8 \uad6c\ud604\uc774 \ud544\uc694\ud558\ub2e4\uba74, =default \uc744 \uc0ac\uc6a9\ud558\uc5ec \ud574\ub2f9 \ud568\uc218\uc5d0 \ub300\ud55c \uc758\ub3c4\ub97c \ud45c\ud604\ud558\ub77c. \uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, =delete \ub97c \uc368\uc11c \uc81c\ud55c\ud558\ub77c.","title":"Note"},{"location":"Class/#example-good_1","text":"\ub2e8\uc21c\ud788 virtual \uc744 \uc704\ud574 \uc18c\uba78\uc790\uac00 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4\uba74, =default \ub97c \uc0ac\uc6a9\ud574 \uc815\uc758\ud560 \uc218 \uc788\ub2e4. \ubb35\uc2dc\uc801\uc73c\ub85c \uc774\ub3d9 \uc5f0\uc0b0\uc774 \uc81c\ud55c\ub418\ub294 \uac83\uc744 \ub9c9\uace0 \uc2f6\ub2e4\uba74 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\uc774 \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d \uc774\ub3d9 \uc5f0\uc0b0\ub9cc \uc9c0\uc6d0\ud558\ub294\uac8c \uc544\ub2c8\ub77c\uba74 (\uc989 \ubcf5\uc0ac\uac00 \uac00\ub2a5\ud574\uc57c \ud55c\ub2e4\uba74) \ubcf5\uc0ac \uc5f0\uc0b0 \uc5ed\uc2dc \uadf8\uc5d0 \ub9de\uac8c \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4: class AbstractBase { public : virtual ~ AbstractBase () = default ; AbstractBase ( const AbstractBase & ) = default ; AbstractBase & operator = ( const AbstractBase & ) = default ; AbstractBase ( AbstractBase && ) = default ; AbstractBase & operator = ( AbstractBase && ) = default ; }; C.67 \uc744 \uace0\ub824\ud574\uc11c \ubcf5\uc0ac \uc808\ub2e8(slicing) \ubb38\uc81c\ub97c \uc608\ubc29\ud558\uae30 \uc704\ud574 \ubcf5\uc0ac\uc640 \uc774\ub3d9\uc5f0\uc0b0\uc744 \uc81c\ud55c\ud560 \uc218\ub3c4 \uc788\ub2e4: class ClonableBase { public : virtual unique_ptr < ClonableBase > clone () const ; virtual ~ ClonableBase () = default ; ClonableBase ( const ClonableBase & ) = delete ; ClonableBase & operator = ( const ClonableBase & ) = delete ; ClonableBase ( ClonableBase && ) = delete ; ClonableBase & operator = ( ClonableBase && ) = delete ; }; \ubcf5\uc0ac\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\uc744 =delete \ub85c \uc815\uc758\ud558\uac70\ub098 \ubcf5\uc0ac\uc5f0\uc0b0\uc744 =delete \ud558\ub294 \uacbd\uc6b0 \ubaa8\ub450 \uac19\uc740 \ud6a8\uacfc\ub97c \uac00\uc9c4\ub2e4. \ud558\uc9c0\ub9cc \ud0c0\uc785\uc758 \uc758\ub3c4\ub97c \ubd84\uba85\ud788 \uc804\ub2ec\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubaa8\ub4e0 \ud2b9\ubcc4 \ud568\uc218\ub4e4\uc744 \uc815\uc758\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.","title":"Example, good"},{"location":"Class/#note_16","text":"\ucef4\ud30c\uc77c\ub7ec\ub294 \uc774 \uaddc\uce59\uc744 \uac15\uc81c\ud558\uace0, \uc774\uc0c1\uc801\uc73c\ub85c\ub294 \uc704\ubc18\uc0ac\ud56d\uc774 \ubc1c\uc0dd\ud558\uba74 \uacbd\uace0\ud55c\ub2e4.","title":"Note"},{"location":"Class/#note_17","text":"\ud074\ub798\uc2a4\uc5d0 \ubb35\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\ub41c \ubcf5\uc0ac \uc5f0\uc0b0\uc5d0 \uc758\uc874\ud558\ub294 \uac83\uc740 \ub354 \uc774\uc0c1 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Class/#note_18","text":"\uc5ec\uc12f\uac1c\uc758 \ud2b9\ubcc4 \ud568\uc218\ub4e4\uc744 \ubaa8\ub450 \uc791\uc131\ud558\ub294 \uac83\uc740 \uc624\ub958\uc5d0 \ucde8\uc57d\ud560 \uc218 \uc788\ub2e4. \uc544\ub798 \uc608\uc2dc\uc758 \uc778\uc790 \ud0c0\uc785\uc5d0 \uc8fc\ubaa9\ud558\ub77c: class X { public : // ... virtual ~ X () = default ; // destructor (virtual if X is meant to be a base class) X ( const X & ) = default ; // copy constructor X & operator = ( const X & ) = default ; // copy assignment X ( X && ) = default ; // move constructor X & operator = ( X && ) = default ; // move assignment }; \uc2a4\ud3a0\ub9c1\uc744 \uc798\ubabb \uc801\uac70\ub098, const \ub97c \ube60\ub728\ub9ac\uac70\ub098, && \ub300\uc2e0 & \uc744 \uc0ac\uc6a9\ud558\uac70\ub098, \ud558\ub098\ub97c \ube60\ub728\ub9ac\ub294 \uac83 \uac19\uc740 \uc0ac\uc18c\ud55c \uc2e4\uc218\uac00 \uc624\ub958\ub098 \uacbd\uace0\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4. \uc774\ub7f0 (\uc9c0\ub8e8\ud55c \ucf54\ub4dc\ub85c \uc778\ud574 \ubc1c\uc0dd\ud558\ub294) \uc624\ub958\ub97c \ud53c\ud558\uace0\uc790 \ud55c\ub2e4\uba74 The rule of zero \ub97c \ub530\ub974\ub294 \uac83\uc744 \uad8c\ud55c\ub2e4.","title":"Note"},{"location":"Class/#enforcement_11","text":"(\uc26c\uc6c0) \ud074\ub798\uc2a4\ub294 \ud2b9\ubcc4\ud55c \ud568\uc218\ub4e4\uc5d0 \ub300\ud55c \uc120\uc5b8( =delete \ub3c4 \ud3ec\ud568\ud558\uc5ec)\uc744 \ubaa8\ub450 \uac16\uac70\ub098 \ud558\ub098\ub3c4 \uc5c6\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c22","text":"","title":"C.22: \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc740 \uc11c\ub85c \uc870\ud654\ub86d\uac8c \ub3d9\uc791\ud574\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_12","text":"\uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc740 \uac1c\ub150\uc801\uc73c\ub85c \uc798 \uc9dc\uc5ec\uc9c4 \uc9d1\ud569\uc774\ub2e4. \uc5f0\uc0b0\ub4e4\uc758 \uc758\ubbf8\ub294 \uc11c\ub85c \uc5f0\uad00\ub418\uc5b4 \uc788\ub2e4. \uc0ac\uc6a9\uc790\ub294 \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uacfc \ubcf5\uc0ac/\uc774\ub3d9 \ud560\ub2f9\uc774 \ub17c\ub9ac\uc801\uc73c\ub85c \ub3d9\uc77c\ud558\uace0, \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uac00 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\uc5d0 \ub300\ud574 \uc77c\uad00\uc801\uc73c\ub85c \ub3d9\uc791\ud558\uba70, \ubcf5\uc0ac\uc640 \uc774\ub3d9\uc774 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uac00 \ub3d9\uc791\ud558\ub294 \ubc29\uc2dd\uc744 \ubc18\uc601\ud55c\ub2e4\ub294 \uac83\uc744 \uae30\ub300 \ud560 \uac83\uc774\ub2e4. \ub9cc\uc57d \ubcf5\uc0ac\uc640 \uc774\ub3d9\uc774 \uc0dd\uc131\uacfc \uc18c\uba78\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc0ac\uc6a9\uc790\uc5d0\uac8c \ud63c\ub780\uc744 \uc904 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_3","text":"class Silly { // BAD: Inconsistent copy operations class Impl { // ... }; shared_ptr < Impl > p ; public : Silly ( const Silly & a ) : p { a . p } { * p = * a . p ; } // deep copy Silly & operator = ( const Silly & a ) { p = a . p ; } // shallow copy // ... }; \uc774 \uc5f0\uc0b0\ub4e4\uc740 \ubcf5\uc0ac \uc5f0\uc0b0\uc5d0 \ub300\ud55c \uc758\ubbf8\uac00 \uc77c\uce58\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub7f0 \ub3d9\uc791\uc740 \ud63c\ub780\uc744 \uc57c\uae30\ud558\uace0 \ubc84\uadf8\ub97c \ub9cc\ub4e4 \uac83\uc774\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_12","text":"(\uc5b4\ub824\uc6c0) \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790\uc640 \uc774\uc5d0 \ub300\uc751\ud558\ub294 \ubcf5\uc0ac/\uc774\ub3d9 \ud560\ub2f9 \uc5f0\uc0b0\uc790\ub294 \ub3d9\uc77c\ud55c \ub808\ubca8\uc5d0\uc11c \ub3d9\uc77c\ud55c \uba64\ubc84 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud558\ub294 \uac83\uc774 \uc88b\ub2e4 (\uc5b4\ub824\uc6c0) \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790\uc5d0\uc11c \ubcc0\uacbd\ud558\ub294 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc740 \ub2e4\ub978 \uc0dd\uc131\uc790\ub4e4\uc5d0\uc11c\ub3c4 \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc774 \uc88b\ub2e4 (\uc5b4\ub824\uc6c0) \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790\ub294 \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub300\ud574 \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc218\ud589\ud558\uace0 \ub098\uc11c, \uc18c\uba78\uc790\ub294 \uba64\ubc84 \ubcc0\uc218\ub97c \uc218\uc815\ud574\uc57c \ud55c\ub2e4 (\uc5b4\ub824\uc6c0) \uc18c\uba78\uc790\uac00 \uba64\ubc84 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud558\uba74, \uadf8 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc740 \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790 \ud639\uc740 \ud560\ub2f9 \uc5f0\uc0b0\uc790\uc5d0\uc11c \uc4f0\uc5ec\uc9c0\ub294 \uac83\uc774 \uc88b\ub2e4","title":"Enforcement"},{"location":"Class/#cdtor","text":"\"\uc774 \ud074\ub798\uc2a4\uc5d0 \uc18c\uba78\uc790\uac00 \ud544\uc694\ud560\uae4c?\"\ub77c\ub294 \uac83\uc740 \uc124\uacc4 \uce21\uba74\uc5d0\uc11c \uad49\uc7a5\ud788 \uac15\ub825\ud55c \uc9c8\ubb38\uc774\ub2e4. \ub300\ubd80\ubd84\uc758 \ud074\ub798\uc2a4\ub4e4\uc5d0 \ub300\ud574\uc11c \ub300\ub2f5\uc740 \"no\"\uc778\ub370, \uadf8 \uc774\uc720\ub294 \ud574\ub2f9 \ud074\ub798\uc2a4\uac00 \uc790\uc6d0\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\uac70\ub098 \uc18c\uba78\uacfc\uc815\uc774 The rule of zero \uc5d0 \uc758\ud574 \ucc98\ub9ac\ub418\uae30 \ub54c\ubb38\uc774\ub2e4. \uc694\ucee8\ub300, \ud074\ub798\uc2a4\uc758 \uba64\ubc84\ub4e4\uc774 \uc2a4\uc2a4\ub85c\uc758 \uc18c\uba78\uc744 \uad00\ub9ac\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \ub300\ub2f5\uc774 \"yes\"\ub77c\uba74, \uadf8 \ud074\ub798\uc2a4 \uc124\uacc4\uc758 \ub300\ubd80\ubd84\uc740 The rule of five \ub97c \ub530\ub974\uac8c \ub41c\ub2e4.","title":"C.dtor: \uc18c\uba78\uc790"},{"location":"Class/#c30","text":"","title":"C.30: \uac1c\uccb4\uac00 \uc5c6\uc5b4\uc9c8 \ub54c, \uba85\uc2dc\uc801\uc778 \ub3d9\uc791\uc774 \ud544\uc694\ud560 \uacbd\uc6b0 \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c"},{"location":"Class/#reason_13","text":"\uc18c\uba78\uc790\ub294 \uc554\ubb35\uc801\uc73c\ub85c \uac1c\uccb4\uc758 \uc0dd\uba85\uc8fc\uae30\uc758 \ub9c8\uc9c0\ub9c9\uc5d0 \ud638\ucd9c\ub41c\ub2e4. \uae30\ubcf8 \uc18c\uba78\uc790\ub85c \ucda9\ubd84\ud558\ub2e4\uba74 \uadf8\uac83\uc744 \uc0ac\uc6a9\ud558\ub77c. \ub2e8\uc21c\ud558\uac8c \uba64\ubc84\uc758 \uc18c\uba78\uc790\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc774 \uc544\ub2cc \ucf54\ub4dc\uac00 \ud544\uc694\ud560 \uacbd\uc6b0 \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c.","title":"Reason"},{"location":"Class/#example_10","text":"template < typename A > struct final_action { // slightly simplified A act ; final_action ( A a ) : act { a } {} ~ final_action () { act (); } }; template < typename A > final_action < A > finally ( A act ) // deduce action type { return final_action < A > { act }; } void test () { auto act = finally ([]{ cout << \"Exit test \\n \" ; }); // establish exit action // ... if ( something ) return ; // act done here // ... } // act done here final_action \uc758 \ubaa9\uc801\uc740 \uc18c\uba78\ud560 \ub54c \uc2e4\ud589\ud560 \ucf54\ub4dc(\ubcf4\ud1b5 \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc744 \uc4f4\ub2e4)\ub97c \uc5bb\ub294 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Class/#note_19","text":"\uc0ac\uc6a9\uc790 \uc815\uc758 \uc18c\uba78\uc790\uac00 \ud544\uc694\ud55c \ud074\ub798\uc2a4\uc5d0\ub294 \ubcf4\ud1b5 \ub450 \uc885\ub958\uac00 \uc788\ub2e4: \ub9ac\uc18c\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \ud074\ub798\uc2a4\uac00 \uc18c\uba78\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0, \uc608\ucee8\ub300 vector \ud639\uc740 \ud2b8\ub79c\uc7ad\uc158 \ucf54\ub4dc \ud2b8\ub808\uc774\uc2f1\uc774\ub098 final_action \ucc98\ub7fc \uc18c\uba78\uc2dc\uae30\uc5d0 \uc5b4\ub5a4 \ub3d9\uc791\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc704\ud55c \ud074\ub798\uc2a4","title":"Note"},{"location":"Class/#example-bad_4","text":"class Foo { // bad; use the default destructor public : // ... ~ Foo () { s = \"\" ; i = 0 ; vi . clear (); } // clean up private : string s ; int i ; vector < int > vi ; }; \uae30\ubcf8 \uc18c\uba78\uc790\uac00 \ub354 \uc798 \ub3d9\uc791\ud558\uace0, \ub354 \ud6a8\uacfc\uc801\uc774\uba70, \ud2c0\ub9ac\uc9c0 \uc54a\ub294\ub2e4.","title":"Example, bad"},{"location":"Class/#note_20","text":"\uae30\ubcf8 \uc18c\uba78\uc790\uac00 \ud544\uc694\ud558\uc9c0\ub9cc, \uc0dd\uc131\ub418\uc9c0 \uc54a\ub3c4\ub85d \ub418\uc5b4 \uc788\ub2e4\uba74 (\uc608, \uc774\ub3d9 \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud55c \uacbd\uc6b0), =default \ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"Class/#enforcement_13","text":"\ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc640 \uac19\uc740 \"\uc554\ubb35\uc801\uc778 \uc790\uc6d0\"\uc774 \ub420 \uc218 \uc788\ub294 \uac83\ub4e4\uc744 \ucc3e\uc544\ubcf4\ub77c. \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\uac00 \uc18c\uba78\uc790\ub97c \uac16\uace0 \uc788\ub354\ub77c\ub3c4, \uc0ac\uc6a9\uc790 \uc9c0\uc815 \uc18c\uba78\uc790\uac00 \uc788\ub294 \ud074\ub798\uc2a4\ub4e4\uc744 \ucc3e\uc544\ubcf4\ub77c.","title":"Enforcement"},{"location":"Class/#c31","text":"","title":"C.31: \ud074\ub798\uc2a4\uac00 \ud68d\ub4dd\ud55c \ubaa8\ub4e0 \uc790\uc6d0\uc740 \uc18c\uba78\uc790\uc5d0\uc11c \ud574\uc81c\ub418\uc5b4\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_14","text":"\ub9ac\uc18c\uc2a4 \ub204\uc218\ub97c \ub9c9\ub294\ub2e4, \ud2b9\ud788 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uc0c1\ud669\uc5d0\uc11c \uadf8\ub807\ub2e4.","title":"Reason"},{"location":"Class/#note_21","text":"\ud074\ub798\uc2a4\ub85c \ud45c\ud604\ub418\ub294 \ub9ac\uc18c\uc2a4\ub4e4\uc774 \uae30\ubcf8 \uc5f0\uc0b0 \uc9d1\ud569\uc744 \uac16\uace0 \uc788\uc744 \ub54c \uc18c\uba78\uc790\uc5d0\uc11c\uc758 \ub9ac\uc18c\uc2a4 \ud574\uc81c\uac00 \uc790\ub3d9\uc73c\ub85c \ubc1c\uc0dd\ud55c\ub2e4.","title":"Note"},{"location":"Class/#example_11","text":"class X { ifstream f ; // may own a file // ... no default operations defined or =deleted ... }; X \uc758 ifstream \uc740 X \uac00 \uc18c\uba78\ub420 \ub54c \ubb35\uc2dc\uc801\uc73c\ub85c \uc5f4\uc5c8\uc744 \uc218 \uc788\ub294 \ud30c\uc77c\uc744 \ub2eb\ub294\ub2e4.","title":"Example"},{"location":"Class/#example-bad_5","text":"class X2 { // bad FILE * f ; // may own a file // ... no default operations defined or =deleted ... }; X2 \uc5d0\uc11c\ub294 \ud30c\uc77c \ud578\ub4e4 \ub204\uc218\uac00 \uc0dd\uae38 \uac83\uc774\ub2e4.","title":"Example, bad"},{"location":"Class/#note_22","text":"\ub2eb\uc9c0 \uc54a\uc740 \uc18c\ucf13\uc740 \uc5b4\ub5a8\uae4c? \uc18c\uba78\uc790, \ub2eb\uae30, \uc815\ub9ac \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uc88b\ub2e4 . \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \ubc1c\uc0dd\ud55c\ub2e4\uba74, \uc88b\uc740 \ud574\uacb0\ucc45\uc744 \ucc3e\uae30 \uc815\ub9d0 \ud798\ub4e0 \ubb38\uc81c\ub97c \ub9c8\uc8fc\uce5c \uac83\uc774\ub2e4. \ucd08\uc2ec\uc790\ub4e4\uc740 \uc18c\uba78\uc790\ub97c \uc791\uc131\ud560 \ub54c \uc65c \uc18c\uba78\uc790\uac00 \ud638\ucd9c\ub418\uace0, \uc608\uc678\ub97c \ub358\uc9d0\uc73c\ub85c\uc368 \"\ucc98\ub9ac\ub97c \uac70\ubd80\"\ub97c \ud560 \uc218 \uc5c6\ub294\uc9c0 \uc54c\uc9c0 \ubabb\ud560 \uac83\uc774\ub2e4. \uc774\uc5d0 \ub300\ud574\uc11c\ub294 \uc18c\uba78\uc790\ub294 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4(\ud1a0\ub860) \ub97c \ucc38\uace0\ud558\ub77c. \ubb38\uc81c\ub97c \uc545\ud654\uc2dc\ud0a4\ub294 \uac83\uc740, \ub9ce\uc740 \"\ub2eb\uae30/\ud574\uc81c\" \uc5f0\uc0b0\ub4e4\uc774 \uc7ac\uc2dc\ub3c4 \ud560 \uc218 \uc5c6\ub3c4\ub85d \ub418\uc5b4\uc788\ub294 \uac83\uc774\ub2e4. \uc774 \ubb38\uc81c\ub97c \ud480\ub824\ub294 \uc2dc\ub3c4\ub294 \ub9ce\uc558\uc9c0\ub9cc, \uc77c\ubc18\uc801\uc778 \ud574\uacb0\ucc45\uc740 \uc54c\ub824\uc9c0\uc9c0 \uc54a\uc558\ub2e4. \ud574\uacb0\ucc45\uc774 \uc5c6\ub2e4\uba74, \ub2eb\uae30/\ud574\uc81c\uc5d0 \ub300\ud55c \uc2e4\ud328\ub97c \ub514\uc790\uc778 \uc624\ub958\ub85c \uac04\uc8fc\ud558\uace0 \uc885\ub8cc\uc2dc\ud0a4\ub294 \uac83\uc744 \uace0\ub824\ud574 \ubcf4\ub77c.","title":"Note"},{"location":"Class/#note_23","text":"\ud074\ub798\uc2a4\uac00 \uc18c\uc720\ud558\uace0 \uc788\uc9c0 \uc54a\uc740 \uac1c\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \uac16\uace0 \uc788\uc744 \uc218 \uc788\ub2e4. \ub2f9\uc5f0\ud558\uc9c0\ub9cc, \uc774 \uac1c\uccb4\ub4e4\uc740 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\uc5d0\uc11c delete \ub418\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74: Preprocessor pp { /* ... */ }; Parser p { pp , /* ... */ }; Type_checker tc { p , /* ... */ }; p \ub294 pp \ub97c \ucc38\uc870\ud558\uc9c0\ub9cc, \uc18c\uc720\ud558\uace0 \uc788\uc9c0 \uc54a\ub2e4.","title":"Note"},{"location":"Class/#enforcement_14","text":"(\uc26c\uc6c0) \ud074\ub798\uc2a4\uac00 \uc18c\uc720\uc790\uc778 \ud3ec\uc778\ud130\ub098 \ucc38\uc870 \uba64\ubc84 \ubcc0\uc218\ub97c \uac16\uace0 \uc788\ub2e4\uba74 (\uac00\ub839, gsl::owner \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc18c\uc720\ud558\ub294 \uacbd\uc6b0), \uc18c\uba78\uc790\uc5d0\uc11c \ucc38\uc870\ub418\ub294 \uac83\uc774 \uc88b\ub2e4 (\uc5b4\ub824\uc6c0) \uc18c\uc720\uad8c\uc5d0 \ub300\ud574 \uba85\uc2dc\uc801\uc73c\ub85c \uae30\uc220\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0, \ud3ec\uc778\ud130\ub098 \ucc38\uc870 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc774 \uc18c\uc720\uc790 \uc778\uc9c0 \ud310\ub2e8\ud558\ub77c (\uc608, \uc0dd\uc131\uc790 \ubcf8\ubb38\uc744 \ud655\uc778\ud55c\ub2e4).","title":"Enforcement"},{"location":"Class/#c32-t-t","text":"","title":"C.32: \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130(T*)\ub098 \ucc38\uc870(T&amp;)\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \ucc38\uc870 \ub300\uc0c1\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub294\uc9c0\ub97c \uace0\ub824\ud558\ub77c"},{"location":"Class/#reason_15","text":"\uc18c\uc720\uad8c\uc5d0 \ub300\ud574\uc11c \uc0c1\uc138\ud558\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub294 \ub9ce\uc774 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example_12","text":"???","title":"Example"},{"location":"Class/#note_24","text":"T* \ud639\uc740 T& \uac00 \uc18c\uc720\ub97c \uc758\ubbf8\ud55c\ub2e4\uba74, \uc18c\uc720\ud55c\ub2e4\ub294 \ud45c\uc2dc\ub97c \ud558\ub77c. T* \uc5d0 \uc18c\uc720\uc758 \uc758\ubbf8\uac00 \uc5c6\ub2e4\uba74 ptr \ub85c \ud45c\uc2dc\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c. \uc774\uac83\uc740 \ubb38\uc11c\ud654\uc640 \ubd84\uc11d\uc5d0 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Class/#enforcement_15","text":"\ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \ucd08\uae30\ud654 \ud560 \ub54c \uc790\uc6d0\ud560\ub2f9\uc774 \ubc1c\uc0dd\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c33","text":"","title":"C.33: \ud074\ub798\uc2a4\uac00 \ud3ec\uc778\ud130\ub85c \ub300\uc0c1\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub2e4\uba74, \uc18c\uba78\uc790\ub97c \uc815\uc758\ud558\ub77c"},{"location":"Class/#reason_16","text":"\uc18c\uc720\ub41c \uac1c\uccb4\ub294 \uadf8\uac83\uc744 \uc18c\uc720\ud55c \uac1c\uccb4\uac00 \uc18c\uba78\ub420 \ub54c delete \ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_13","text":"\ud3ec\uc778\ud130 \uba64\ubc84\ub294 \ub9ac\uc18c\uc2a4\uc77c \uac83\uc774\ub2e4. T* \ub294 \ub9ac\uc18c\uc2a4\uac00 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4 , \uc774\ub294 \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0\uc11c\ub294 \uc77c\ubc18\uc801\uc774\ub2e4. \uac00\ub2a5\ud55c T* \ub97c \uc18c\uc720\uc790\ub77c\uace0 \uace0\ub824\ud558\uace0, \uc758\uc2ec\ud574\ubcf4\ub77c. template < typename T > class Smart_ptr { T * p ; // BAD: *p \uc758 \uc18c\uc720\uac00 \ubd88\ubd84\uba85\ud558\ub2e4 // ... public : // ... \uc0ac\uc6a9\uc790\uac00 \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\uc558\ub2e4 ... }; void use ( Smart_ptr < int > p1 ) { // error: p2.p \uc5d0 \ub204\uc218\uac00 \ubc1c\uc0dd\ud55c\ub2e4. (nullptr\uac00 \uc544\ub2c8\uac70\ub098 \ub2e4\ub978 \ucf54\ub4dc\uc5d0\uc11c \uc18c\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74) auto p2 = p1 ; } \uc18c\uba78\uc790\ub97c \uc815\uc758 \ud55c\ub2e4\uba74, \ubaa8\ub4e0 \uae30\ubcf8 \uc5f0\uc0b0\ub4e4 \uc744 \uc815\uc758\ud558\uac70\ub098 \uc0ad\uc81c\ud574\uc57c \ud55c\ub2e4. template < typename T > class Smart_ptr2 { T * p ; // BAD: *p \uc758 \uc18c\uc720\uac00 \ubd88\ubd84\uba85\ud558\ub2e4 // ... public : // ... \uc0ac\uc6a9\uc790\uac00 \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\uc558\ub2e4 ... ~ Smart_ptr2 () { delete p ; } // p \uac00 \uc790\uc6d0\uc744 \uc18c\uc720\ud558\uace0 \uc788\uc5c8\ub2e4! }; void use ( Smart_ptr2 < int > p1 ) { auto p2 = p1 ; // error: delete\uac00 2\ubc88 \ud638\ucd9c\ub41c\ub2e4. } \uae30\ubcf8 \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \ub2e8\uc9c0 p1.p \ub97c p2.p \ub85c \ubcf5\uc0ac\ud558\uace0, p1.p \uac00 \ub450\ubc88 \uc18c\uba78\ub418\uac8c \ub9cc\ub4e4 \uac83\uc774\ub2e4. \uc18c\uc720\uad8c\uc744 \uba85\uc2dc\ud558\ub77c: template < typename T > class Smart_ptr3 { owner < T *> p ; // OK: \uba85\uc2dc\uc801\uc73c\ub85c *p \uc758 \uc18c\uc720\uad8c\uc744 \uac00\uc9c4\ub2e4. // ... public : // ... // ... \ubcf5\uc0ac\uc640 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4 ... ~ Smart_ptr3 () { delete p ; } }; void use ( Smart_ptr3 < int > p1 ) { auto p2 = p1 ; }","title":"Example"},{"location":"Class/#note_25","text":"\ubcf4\ud1b5 \uc18c\uba78\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uac00\uc7a5 \ub2e8\uc21c\ud55c \ubc29\ubc95\uc740 \ud3ec\uc778\ud130\ub97c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130(\uac00\ub839, std::unique_ptr )\ub85c \uad50\uccb4\ud558\uace0, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc801\uc808\ud55c \uc18c\uba78\uc790\ub97c \uc554\ubb35\uc801\uc73c\ub85c \ud638\ucd9c\ud558\uac8c \ub9cc\ub4e4\ub3c4\ub85d \ub194\ub450\ub294 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Class/#note_26","text":"\uc18c\uc720\ud558\uace0 \uc788\ub294 \ubaa8\ub4e0 \ud3ec\uc778\ud130\ub97c \"\uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\"\ub85c \ubcc0\uacbd\ud558\ub294 \uac83\uc740 \uc5b4\ub5a4\uac00? \ub4dc\ubb3c\uac8c\ub294 \uc911\ub300\ud55c \ucf54\ub4dc \ubcc0\uacbd\uc774 \ud544\uc694\ud574\uc9c0\uace0 ABI \uc5d0 \uc601\ud5a5\uc744 \uc904 \uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Class/#enforcement_16","text":"\ud3ec\uc778\ud130 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uac16\ub294 \ud074\ub798\uc2a4\ub97c \uc758\uc2ec\ud558\ub77c owner<T> \ub97c \uac16\ub294 \ud074\ub798\uc2a4\ub294 \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc744 \uc815\uc758 \ud574\uc57c\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c35-","text":"","title":"C.35: \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\ub294 \uacf5\uac1c\ub41c \uac00\uc0c1 \uc18c\uba78\uc790 \ud639\uc740 \uc0c1\uc18d\ub418\ub294 \ube44-\uac00\uc0c1 \ud568\uc218\uc5ec\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_17","text":"\ubbf8\uc815\uc758 \ub3d9\uc791(undefined behavior)\uc744 \ub9c9\uae30 \uc704\ud55c \uaddc\uce59\uc774\ub2e4. \ub9cc\uc57d \uc18c\uba78\uc790\uac00 public \uc774\uba74, \ud638\ucd9c\ud558\ub294 \ucf54\ub4dc\ub294 \ud30c\uc0dd \ud074\ub798\uc2a4\uac00 \uae30\ubcf8 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uc18c\uba78\ub420 \uac83\uc774\ub77c \uc0dd\uac01\ud55c\ub2e4. \uadf8\ub9ac\uace0 \uae30\ubcf8 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\uac00 virtual \uc774 \uc544\ub2c8\uba74 \uacb0\uacfc\ub294 \ubbf8\uc815\uc758 \ub3d9\uc791\uc73c\ub85c \uc774\uc5b4\uc9c4\ub2e4. \ub9cc\uc57d \uc18c\uba78\uc790\uac00 protected \ub77c\uba74, \ud638\ucd9c\ud558\ub294 \ucf54\ub4dc\ub294 \uae30\ubcf8 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574\uc11c \uc18c\uba78\uc2dc\ud0ac \uc218 \uc5c6\uace0, \ub530\ub77c\uc11c \uc18c\uba78\uc790\ub294 virtual \uc774 \uc544\ub2c8\uc5b4\ub3c4 \ubb38\uc81c\uac00 \uc5c6\ub2e4. private \uac00 \uc544\ub2cc protected \uc5ec\uc57c \ud558\ub294 \uc774\uc720\ub294 \ud30c\uc0dd \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\uac00 \ud638\ucd9c\ud560 \uc218 \uc788\uc5b4\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c, \uae30\ubcf8 \ud074\ub798\uc2a4\uc758 \uc791\uc131\uc790\ub294 \uc18c\uba78 \uacfc\uc815\uc5d0\uc11c \uc5b4\ub5a4 \ub3d9\uc791\uc774 \uc801\ud569\ud55c\uc9c0 \uc54c \uc218 \uc5c6\ub2e4.","title":"Reason"},{"location":"Class/#discussion","text":"\ud1a0\ub860 \uc744 \ud568\uaed8 \uc77d\uc5b4\ubcf4\ub77c.","title":"Discussion"},{"location":"Class/#example-bad_6","text":"struct Base { // BAD: virtual \uc18c\uba78\uc790\uac00 \uc5c6\ub2e4 virtual void f (); }; struct D : Base { string s { \"a resource needing cleanup\" }; ~ D () { /* ... \uc815\ub9ac \uc791\uc5c5\uc744 \ud55c\ub2e4 ... */ } // ... }; void use () { unique_ptr < Base > p = make_unique < D > (); // ... } // p \uc758 \uc18c\uba78\uc740 ~Base()\ub97c \ud638\ucd9c\ud558\uc9c0\ub9cc, ~D() \ub294 \ud638\ucd9c\ud558\uc9c0 \uc54a\ub294\ub2e4. // \ub530\ub77c\uc11c D::s \uc5d0 \ub204\uc218\uac00 \ubc1c\uc0dd\ud558\uace0, \ub2e4\ub978 \uc790\uc6d0\ub4e4\ub3c4 \ub204\uc218\ub420 \uac83\uc774\ub2e4.","title":"Example, bad"},{"location":"Class/#note_27","text":"\uac00\uc0c1( virtual ) \ud568\uc218\ub294 \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0 \ub300\ud574 \uc2e0\uacbd\uc744 \uc4f0\uc9c0 \uc54a\uac8c \ub41c\ub2e4. \ub9cc\uc57d \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc18c\uba78\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \uadf8 \uacfc\uc815\uc740 \uc548\uc804\ud574\uc57c\ub9cc \ud55c\ub2e4.","title":"Note"},{"location":"Class/#note_28","text":"\uc18c\uba78\uc790\ub294 private\uc774 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d \uadf8\ub7f4 \uacbd\uc6b0 \ud574\ub2f9 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uac8c \ub420 \uac83\uc774\ub2e4: class X { ~ X (); // private \uc18c\uba78\uc790 // ... }; void use () { X a ; // error: \uc18c\uba78\uc2dc\ud0ac \uc218 \uc5c6\ub2e4 auto p = make_unique < X > (); // error: \uc18c\uba78\uc2dc\ud0ac \uc218 \uc5c6\ub2e4 }","title":"Note"},{"location":"Class/#exception_3","text":"protected virtual \uc18c\uba78\uc790\ub97c \uc6d0\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \uc0c1\uc0c1\ud574\ubcfc \uc218 \uc788\ub2e4. \ud30c\uc0dd \ud0c0\uc785\uc758 \uac1c\uccb4\uac00 \uae30\ubcf8 \ud0c0\uc785 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 (\uadf8 \uc790\uc2e0\uc774 \uc544\ub2cc) \ub2e4\ub978 \uac1c\uccb4\uc758 \uc18c\uba78\uc744 \ud558\ub3c4\ub85d \ud5c8\uc6a9\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uadf8\ub7ec\ud558\ub2e4. \ud558\uc9c0\ub9cc \uc544\uc9c1\uae4c\uc9c0 \uadf8\ub7f0 \uc0ac\ub840\ub97c \ubcfc \uc218 \uc5c6\uc5c8\ub2e4.","title":"Exception"},{"location":"Class/#enforcement_17","text":"\uac00\uc0c1 \ud568\uc218\ub97c \ud558\ub098\ub77c\ub3c4 \uac00\uc9c0\ub294 \ud074\ub798\uc2a4\ub294 public \ud558\uace0 virtual \ud55c \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4. \ub610\ub294 protected \uc774\uace0 virtual \uc774 \uc544\ub2cc \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c36","text":"","title":"C.36: \uc18c\uba78\uc790\ub294 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4"},{"location":"Class/#reason_18","text":"\uc77c\ubc18\uc801\uc73c\ub85c \uc18c\uba78\uc790\uac00 \uc2e4\ud328\ud560 \ub54c \uc624\ub958 \uc5c6\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \ubc29\ubc95\uc744 \uc54c \uc218 \uc5c6\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \ub2e4\ub8e8\ub294 \ubaa8\ub4e0 \ud074\ub798\uc2a4\ub4e4\uc740 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294 \uc18c\uba78\uc790\ub97c \uc694\uad6c\ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_14","text":"class X { public : ~ X () noexcept ; // ... }; X ::~ X () noexcept { // ... if ( cannot_release_a_resource ) terminate (); // ... }","title":"Example"},{"location":"Class/#note_29","text":"\uc18c\uba78\uc790\uc5d0\uc11c\uc758 \uc2e4\ud328\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 \uc2e4\ud328\ud560 \uc5fc\ub824\uac00 \uc5c6\ub294 \ubc29\ubc95(scheme)\uc744 \ub9ce\uc774 \uace0\uc548\ud574 \uc654\ub2e4. \uc774\uc5d0 \ub300\ud574\uc120 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uc131\uacf5\ud55c \uc608\uac00 \uc5c6\ub2e4. \uc774\uac83\uc740 \uc815\ub9d0 \ud604\uc2e4\uc801\uc778 \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\ub2e4: \uc608\ub97c \ub4e4\uba74, \ub2eb\uc9c0 \uc54a\uc740 \uc18c\ucf13\uc740 \uc5b4\ub5a4\uac00? \uc18c\uba78\uc790\ub97c \uc791\uc131\ud558\ub294 \uc0ac\ub78c\uc740 \uc65c \uc18c\uba78\uc790\uac00 \ud638\ucd9c\ub418\uace0 \uc608\uc678\ub97c \ub358\uc9d0\uc73c\ub85c\uc368 \"\ub3d9\uc791\uc744 \uac70\ubd80\ud558\ub294 \uac83\"\uc744 \ud560 \uc218 \uc5c6\ub294\uc9c0 \ubaa8\ub978\ub2e4. \ud1a0\ub860 \uc744 \ud568\uaed8\ubcf4\ub77c. \ubb38\uc81c\ub97c \uc545\ud654\uc2dc\ud0a4\ub294 \uac83\uc740, \ub9ce\uc740 \"close/release\" \uc5f0\uc0b0\uc774 \uc7ac\uc2dc\ub3c4\ud560 \uc218 \uc5c6\uac8c \ub418\uc5b4\uc788\ub294 \uac83\uc774\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74, close/failure\uc5d0 \ub300\ud55c \uc2e4\ud328\ub97c \uadfc\ubcf8\uc801\uc778 \ub514\uc790\uc778 \uc624\ub958\ub85c \uac04\uc8fc\ud558\uace0 \uc885\ub8cc\uc2dc\ucf1c\ub77c.","title":"Note"},{"location":"Class/#note_30","text":"\uc18c\uba78\uc790\ub97c noexcept \ub85c \uc120\uc5b8\ud558\ub77c. \uc774\uac83\uc740 \uc18c\uba78\uc790\uac00 \uc815\uc0c1\uc801\uc73c\ub85c \uc644\ub8cc\ud588\uac70\ub098 \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\ud55c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc7a5\ud55c\ub2e4.","title":"Note"},{"location":"Class/#note_31","text":"\ub9cc\uc57d \uc790\uc6d0\uc774 \ud574\uc81c\ub420 \uc218 \uc5c6\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud328\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \uc5b4\ub5a4 \ubc29\ubc95\uc73c\ub85c\ub4e0 \uc2dc\uc2a4\ud15c\uc758 \ub098\uba38\uc9c0 \ubd80\ubd84\uc5d0\uc11c \uc2e4\ud328 \ud588\ub2e4\ub294 \uc2e0\ud638\ub97c \ubcf4\ub0b4\ub3c4\ub85d \ud558\ub77c. (\uc804\uc5ed \uc0c1\ud0dc \ubcc0\uc218\ub97c \uc218\uc815\ud558\uace0 \ud504\ub85c\uadf8\ub7a8\uc758 \ub2e4\ub978 \ubd80\ubd84\uc774 \uadf8\uac83\uc744 \ud655\uc778\ud558\uace0 \uc544\ub9c8\ub3c4 \ubb38\uc81c\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4) \uc774 \ubc29\uc2dd\uc740 \ud2b9\ubcc4\ud55c \ubaa9\uc801\uc774 \uc788\uace0, \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4\ub294 \uac83\uc744 \ucda9\ubd84\ud788 \uc774\ud574\ud558\ub77c. \uc608\uc2dc\ub85c \"\ub2eb\ud788\uc9c0 \uc54a\ub294 \uc5f0\uacb0\"\uc744 \uace0\ub824\ud574\ubcf4\uc790. \uc5b4\uca4c\uba74 \uc5f0\uacb0\uc758 \ubc18\ub300\ud3b8\uc5d0 \ubb38\uc81c\uac00 \uc788\uc744 \uc218 \uc788\uace0, \uc774\ub54c \uc591\ucabd\uc758 \uc5f0\uacb0\uc744 \ub2f4\ub2f9\ud558\ub294 \ucf54\ub4dc\ub9cc\uc774 \ubb38\uc81c\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub2e4. \uc18c\uba78\uc790\uac00 (\uc5b4\ub5a4 \ubc29\ubc95\uc73c\ub85c) \uc2dc\uc2a4\ud15c\uc758 \ub2f4\ub2f9(responsible) \ubd80\ubd84\uc5d0 \uba54\uc138\uc9c0\ub97c \ubcf4\ub0b4\uace0, \uc5f0\uacb0\uc774 \ub2eb\ud78c \uac83\uc73c\ub85c \uac04\uc8fc\ud55c \ub4a4, \uc815\uc0c1\uc801\uc73c\ub85c \ubc18\ud658\ud560 \uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Class/#note_32","text":"\uc18c\uba78\uc790\uac00 \uc2e4\ud328\ud560 \uc218\ub3c4 \uc788\ub294 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc608\uc678\ub97c \uc7a1\uc744 \uc218 \uc788\uace0, \uc5b4\ub5a4 \uacbd\uc6b0\uc5d0\ub294 \uc131\uacf5\uc801\uc73c\ub85c \uc644\ub8cc\ud560 \uc218 \uc788\ub2e4. (\uac00\ub839, \uc608\uc678\ub97c \ub358\uc9c4 \uba54\ucee4\ub2c8\uc998\uacfc\ub294 \ub2e4\ub978 \uc815\ub9ac(clean-up) \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4)","title":"Note"},{"location":"Class/#enforcement_18","text":"(\uc26c\uc6c0) \ub9cc\uc57d \uc608\uc678 \ubc1c\uc0dd\uc774 \uac00\ub2a5\ud558\uba74, \uc18c\uba78\uc790\ub294 noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c37-noexcept","text":"","title":"C.37: \uc18c\uba78\uc790\ub97c noexcept\ub85c \uc791\uc131\ud558\ub77c"},{"location":"Class/#reason_19","text":"\uc18c\uba78\uc790\ub294 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 . \ub9cc\uc57d \uc18c\uba78\uc790\uac00 \uc608\uc678\ub85c \uc778\ud574 \uc885\ub8cc\ub418\ub824\uace0 \ud55c\ub2e4\uba74, \uc88b\uc9c0 \uc54a\uc740 \ub514\uc790\uc778 \uc624\ub958\ub85c \ubcf4\uace0 \uc885\ub8cc\ud558\ub294 \ud3b8\uc774 \ub098\uc744 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Class/#note_33","text":"\uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud558\uc600\uac74 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0dd\uc131\ud558\uc600\uac74 \ubaa8\ub4e0 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc758 \uc18c\uba78\uc790\uac00 noexcept \ub77c\uba74 \uc18c\uba78\uc790\ub294 \uc554\ubb35\uc801\uc73c\ub85c noexcept \uac00 \ub41c\ub2e4 (\ud568\uc218\uc758 \ucf54\ub4dc\uac00 \uc5b4\ub5bb\uac8c \uc791\uc131\ub418\uc5c8\ub294\uc9c0\ub294 \uace0\ub824\ub418\uc9c0 \uc54a\ub294\ub2e4). \uba85\uc2dc\uc801\uc73c\ub85c \uc18c\uba78\uc790\ub97c noexcept \ub85c \ud45c\uae30\ud568\uc73c\ub85c\uc368, \uadf8 \ucf54\ub4dc\uc758 \uc791\uc131\uc790\ub294 \ub098\uc911\uc5d0 \uba64\ubc84\uac00 \ucd94\uac00\ub418\uac70\ub098 \ubcc0\uacbd\ub418\uba74\uc11c \uc18c\uba78\uc790\uac00 noexcept(false) \ub85c \ubcc0\ud558\ub294 \uac83\uc744 \ucc28\ub2e8\ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Class/#example_15","text":"\ubaa8\ub4e0 \uc18c\uba78\uc790\uac00 noexcept \ub97c \uae30\ubcf8\uc73c\ub85c \ud558\uc9c0\ub294 \uc54a\ub294\ub2e4; \uc608\uc678\ub97c \ub358\uc9c0\ub294 \ud558\ub098\uc758 \uba64\ubc84\uac00 \ubaa8\ub4e0 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uc5d0 \uc601\ud5a5\uc744 \uc904 \uc218 \uc788\ub2e4. struct X { Details x ; // happens to have a throwing destructor // ... ~ X () { } // implicitly noexcept(false); aka can throw }; \ub9cc\uc57d \uc758\uc2ec\uc774 \uc0dd\uae34\ub2e4\uba74, \uc18c\uba78\uc790\ub294 noexcept \ub85c \uc120\uc5b8\ud558\ub77c.","title":"Example"},{"location":"Class/#note_34","text":"\uc18c\uba78\uc790\ub97c noexcept \ub85c \uc120\uc5b8\ud558\uc9c0 \uc54a\uc744 \uc774\uc720\uac00 \uc5c6\ub2e4. noexcept(false) \ub294 \ub9ce\uc740 \uacbd\uc6b0 -- \ud2b9\ud788 \ub2e8\uc21c\ud55c \ucf54\ub4dc\uc5d0\uc11c -- \ud63c\ub780\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.","title":"Note"},{"location":"Class/#enforcement_19","text":"(\uc26c\uc6c0) \uc18c\uba78\uc790\ub294 noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#cctor_1","text":"\uc0dd\uc131\uc790\ub294 \uac1c\uccb4\uac00 \uc0dd\uc131\ub418\ub294(\ucd08\uae30\ud654\ub418\ub294) \ubc29\ubc95\uc744 \uc815\uc758 \ud55c\ub2e4.","title":"C.ctor: \uc0dd\uc131\uc790"},{"location":"Class/#c40","text":"","title":"C.40: \ud074\ub798\uc2a4\uac00 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\uba74 \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud558\ub77c"},{"location":"Class/#reason_20","text":"\uc0dd\uc131\uc790\uac00 \uc874\uc7ac\ud558\ub294 \uc774\uc720\ub2e4.","title":"Reason"},{"location":"Class/#example_16","text":"class Date { // Date \ud074\ub798\uc2a4\ub294 \uc720\ud6a8\ud55c \ub0a0\uc9dc\ub97c \ud45c\ud604\ud55c\ub2e4 // \ubc94\uc704 : 1900\ub144 1\uc6d4 1\uc77c ~ 2100\ub144 12\uc6d4 31\uc77c Date ( int dd , int mm , int yy ) : d { dd }, m { mm }, y { yy } { if ( ! is_valid ( d , m , y )) throw Bad_date {}; // \ubd88\ubcc0\uc870\uac74\uc744 \uac15\uc81c\ud55c\ub2e4 } // ... private : int d , m , y ; }; \uc0dd\uc131\uc790\uc5d0\uc11c Ensures \ub85c \ubd88\ubcc0\uc870\uac74\uc744 \ud45c\ud604\ud558\ub294 \uac83\ub3c4 \uc88b\uc740 \uc0dd\uac01\uc774\ub2e4.","title":"Example"},{"location":"Class/#note_35","text":"\uc0dd\uc131\uc790\ub294 \ud074\ub798\uc2a4\uac00 \ubd88\ubcc0\uc870\uac74\uc774 \uc544\ub2c8\ub354\ub77c\ub3c4 \ud3b8\uc758\ub97c \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4: struct Rec { string s ; int i { 0 }; Rec ( const string & ss ) : s { ss } {} Rec ( int ii ) : i { ii } {} }; Rec r1 { 7 }; Rec r2 { \"Foo bar\" };","title":"Note"},{"location":"Class/#note_36","text":"C++11 \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8 \uaddc\uce59\uc740 \ub9ce\uc740 \uc0dd\uc131\uc790\uc758 \ud544\uc694\uc131\uc744 \uc81c\uac70\ud55c\ub2e4: struct Rec2 { string s ; int i ; Rec2 ( const string & ss , int ii = 0 ) : s { ss }, i { ii } {} // redundant }; Rec2 r1 { \"Foo\" , 7 }; Rec2 r2 { \"Bar\" }; Rec2 \uc0dd\uc131\uc790\ub294 \uc911\ubcf5\uc801\uc774\ub2e4. \uadf8\ub9ac\uace0, int \uc5d0 \ub300\ud55c \uae30\ubcf8\uac12\uc740 member initializer \ub97c \uc0ac\uc6a9\ud558\ub294 \ud3b8\uc774 \ub0ab\ub2e4.","title":"Note"},{"location":"Class/#see-also_1","text":"\uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\ub77c \uc0dd\uc131\uc790\uac00 \ub358\uc9c0\ub294 \uc608\uc678","title":"See also:"},{"location":"Class/#enforcement_20","text":"\uc0ac\uc6a9\uc790 \uc815\uc758 \ubcf5\uc0ac \uc5f0\uc0b0\uc774 \uc788\uc9c0\ub9cc \uc18c\uba78\uc790\uac00 \uc5c6\ub294 \ud074\ub798\uc2a4\ub97c \uc9c0\uc801\ud55c\ub2e4 (\uc0ac\uc6a9\uc790 \uc815\uc758 \ubcf5\uc0ac\ub294 \ud074\ub798\uc2a4\uac00 \ubd88\ubcc0\uc870\uac74\uc744 \uac00\uc9c4\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc900\ub2e4)","title":"Enforcement"},{"location":"Class/#c41","text":"","title":"C.41: \uc0dd\uc131\uc790\ub294 \uc644\uc804\ud788 \ucd08\uae30\ud654\ub41c \uac1c\uccb4\ub97c \uc0dd\uc131\ud574\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_21","text":"\uc0dd\uc131\uc790\ub294 \ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ubd88\ubcc0\uc870\uac74\uc744 \uc124\uc815\ud55c\ub2e4. \ud074\ub798\uc2a4 \uc0ac\uc6a9\uc790\ub294 \uc0dd\uc131\ub41c \uac1c\uccb4\uac00 \uc0ac\uc6a9\uac00\ub2a5\ud558\ub2e4\ub294 \uac83\uc744 \uac00\uc815\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_7","text":"class X1 { FILE * f ; // \ub2e4\ub978 \ud568\uc218\uc5d0 \uc55e\uc11c init()\uc744 \ud638\ucd9c\ud55c\ub2e4 // ... public : X1 () {} void init (); // \uba64\ubc84 f \ucd08\uae30\ud654 void read (); // \uba64\ubc84 f \ub85c\ubd80\ud130 \uc77d\ub294\ub2e4 // ... }; void f () { X1 file ; file . read (); // crash \ub610\ub294 bad read \uac00 \ubc1c\uc0dd\ud55c\ub2e4. // ... file . init (); // \ucd08\uae30\ud654 \ud558\uae30\uc5d4 \ub108\ubb34 \ub2a6\uc5c8\ub2e4 // ... } \ucef4\ud30c\uc77c\ub7ec\ub294 \uc8fc\uc11d\uc744 \uc77d\uc9c0 \uc54a\ub294\ub2e4.","title":"Example, bad"},{"location":"Class/#exception_4","text":"\uc0dd\uc131\uc790\ub9cc\uc73c\ub85c \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uc27d\uac8c \ub9cc\ub4e4 \uc218 \uc5c6\ub2e4\uba74 \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c","title":"Exception"},{"location":"Class/#enforcement_21","text":"(\ub2e8\uc21c) \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub294 \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uba64\ubc84\ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc57c \ud55c\ub2e4 (\uba85\uc2dc\uc801\uc778 \uc0dd\uc131\uc790 \uc704\uc784 \ud639\uc740 \uae30\ubcf8 \uc0dd\uc131\uc744 \ud1b5\ud574\uc11c) (\ubd88\ubd84\uba85\ud568) \ub9cc\uc57d \uc0dd\uc131\uc790\uac00 Ensures \uacc4\uc57d\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uc0dd\uc131 \ud6c4 \uc870\uac74\uc774 \uc874\uc7ac\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub77c","title":"Enforcement"},{"location":"Class/#note_37","text":"\uc0dd\uc131\uc790\uac00 \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 \uc790\uc6d0\uc744 \uc5bb\ub294\ub2e4\uba74, \ub9ac\uc18c\uc2a4\ub294 \uc18c\uba78\uc790\uc5d0 \uc758\ud574 \ud574\uc81c \ub418\uc5b4\uc57c \ud55c\ub2e4. \uc0dd\uc131\uc790\uc5d0\uc11c \uc790\uc6d0\uc744 \uc5bb\uace0 \uc18c\uba78\uc790\uc5d0\uc11c \uc790\uc6d0\uc744 \ud574\uc81c\ud558\ub294 \uac83\uc744 RAII (\"Resource Acquisitions Is Initialization\") \ub77c\uace0 \ud55c\ub2e4.","title":"Note"},{"location":"Class/#c42","text":"","title":"C.42: \uc0dd\uc131\uc790\uac00 \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uc9c0 \ubabb\ud55c\ub2e4\uba74, \uc608\uc678\ub97c \ub358\uc9c0\ub3c4\ub85d \ud558\ub77c"},{"location":"Class/#reason_22","text":"\uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub97c \ub0a8\uaca8\ub450\ub294 \uac83\uc740 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example_17","text":"class X2 { FILE * f ; // ... public : X2 ( const string & name ) : f { fopen ( name . c_str (), \"r\" )} { if ( ! f ) throw runtime_error { \"could not open\" + name }; // ... } void read (); // \uba64\ubc84 f \ub85c\ubd80\ud130 \uc77d\ub294\ub2e4 // ... }; void f () { X2 file { \"Zeno\" }; // file\uc774 \uc5f4\ub824\uc788\uc9c0 \uc54a\uc73c\uba74 \uc608\uc678\ub97c \ub358\uc9c4\ub2e4 file . read (); // \ubb38\uc81c \uc5c6\ub2e4 // ... }","title":"Example"},{"location":"Class/#example-bad_8","text":"class X3 { // bad: \uc0dd\uc131\uc790\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub97c \ub0a8\uaca8\ub193\uc744 \uc218 \uc788\ub2e4 FILE * f ; // call is_valid() before any other function bool valid ; // ... public : X3 ( const string & name ) : f { fopen ( name . c_str (), \"r\" )}, valid { false } { if ( f ) valid = true ; // ... } bool is_valid () { return valid ; } void read (); // \uba64\ubc84 f \ub85c\ubd80\ud130 \uc77d\ub294\ub2e4 // ... }; void f () { X3 file { \"Heraclides\" }; file . read (); // crash \ub610\ub294 bad read\uac00 \ubc1c\uc0dd\ud55c\ub2e4! // ... if ( file . is_valid ()) { file . read (); // ... } else { // ... \uc624\ub958\ub97c \ucc98\ub9ac\ud55c\ub2e4 ... } // ... }","title":"Example, bad"},{"location":"Class/#note_38","text":"\ubcc0\uc218\ub97c \uc815\uc758\ud560 \ub54c\ub294 (\uac00\ub839, \uc2a4\ud0dd\uc5d0 \ud639\uc740 \ub2e4\ub978 \uac1c\uccb4\uc758 \uba64\ubc84\ub85c\uc368) \uc624\ub958\ucf54\ub4dc\uac00 \ub9ac\ud134\ub418\ub294 \uba85\uc2dc\uc801\uc778 \ud568\uc218 \ud638\ucd9c\uc740 \uc5c6\ub2e4. \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub97c \ub0a8\uaca8\ub450\uace0 \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \uc9c0\uc18d\uc801\uc73c\ub85c is_valid() \ud568\uc218\ub97c \ud638\ucd9c\ud574\uc57c \ud558\ub294 \uac83\uc740 \ubc88\uac70\ub86d\uace0, \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc26c\uc6b0\uba70, \ube44\ud6a8\uc728\uc801 \uc774\ub2e4.","title":"Note"},{"location":"Class/#exception_5","text":"(\ucd94\uac00\uc801\uc778 \ud234 \uc9c0\uc6d0 \uc5c6\uc774) \uc608\uc678 \ucc98\ub9ac\uac00 \uc608\uce21 \uac00\ub2a5\ud55c \uc2dc\uac04 \ub0b4\ub85c \uc218\ud589\ub418\uc5b4\uc57c \ud558\ub294 \uc2e4\uc2dc\uac04 \uc2dc\uc2a4\ud15c(\ube44\ud589\uae30 \uc81c\uc5b4\ub97c \uc0dd\uac01\ud574 \ubcf4\ub77c)\uacfc \uac19\uc740 \ubd84\uc57c\ub3c4 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d4 is_valid() \uc640 \uac19\uc740 \ubc29\ubc95\uc774 \ubc18\ub4dc\uc2dc \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \uc774\uc640 \uac19\uc740 \uacbd\uc6b0 RAII \ucc98\ub7fc \ub3d9\uc791\ud558\ub3c4\ub85d \ud558\uae30 \uc704\ud574 \uc9c0\uc18d\uc801\uc73c\ub85c is_valid() \ub85c \ud655\uc778\ud558\ub77c.","title":"Exception"},{"location":"Class/#alternative","text":"\"\uc0dd\uc131\uc790 \uc774\ud6c4 \ucd08\uae30\ud654\" \ud639\uc740 \"\ub450 \ub2e8\uacc4 \ucd08\uae30\ud654\"\ub97c \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83 \uac19\ub2e4\uba74, \uadf8\ub807\uac8c \ud558\uc9c0 \uc54a\ub3c4\ub85d \ud574\ubcf4\ub77c. \uc815\ub9d0\ub85c \uadf8\ub807\uac8c \ud574\uc57c \ud55c\ub2e4\uba74 \ud329\ud1a0\ub9ac \ud568\uc218 \ub97c \uac80\ud1a0\ud558\ub77c.","title":"Alternative"},{"location":"Class/#note_39","text":"\uc0ac\ub78c\ub4e4\uc774 \uc0dd\uc131\uc790\uc5d0\uc11c \ucd08\uae30\ud654\ub97c \uc218\ud589\ud558\uc9c0 \uc54a\uace0 init() \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc628 \uc774\uc720 \uc911 \ud558\ub098\ub294 \ucf54\ub4dc\uc758 \uc911\ubcf5\uc744 \ub9c9\uae30 \uc704\ud568\uc774\uc5c8\ub2e4. \ub300\ub9ac \uc0dd\uc131\uc790 \uc640 \uae30\ubcf8 \uba64\ubc84 \ucd08\uae30\ud654 \uac00 \uc774\ub7f0 \uc791\uc5c5\uc744 \ub354 \uc798 \ud574\ub0bc \uc218 \uc788\ub2e4. \ub610 \ub2e4\ub978 \uc774\uc720\ub85c\ub294 \uac1c\uccb4\uac00 \ud544\uc694\ud560 \ub54c\uae4c\uc9c0 \ucd08\uae30\ud654\ub97c \uc9c0\uc5f0\uc2dc\ud0a4\ub294 \uac83\uc774\ub2e4; \uc774\ub7ec\ud55c \ud574\ubc95\uc740 \ubcf4\ud1b5 \ubcc0\uc218\uac00 \uc801\uc808\ud558\uac8c \ucd08\uae30\ud654\ub418\uae30 \uc804\uae4c\uc9c0\ub294 \ud574\ub2f9 \ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4 .","title":"Note"},{"location":"Class/#enforcement_22","text":"???","title":"Enforcement"},{"location":"Class/#c43","text":"","title":"C.43: \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud074\ub798\uc2a4(\uac12 \ud0c0\uc785)\ub294 \ubc18\ub4dc\uc2dc \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac16\ub3c4\ub85d \ud558\ub77c"},{"location":"Class/#reason_23","text":"\ub9ce\uc740 \uc5b8\uc5b4\ub098 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \uae30\ubcf8 \uc0dd\uc131\uc790\uc5d0 \uc758\uc874\ud558\uace0 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74, T a[10] \ub098 std::vector<T> v(10) \ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub4e4\uc774 \uac01 \uc694\uc18c\ub97c \ucd08\uae30\ud654 \ud55c\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ubcf4\ud1b5 \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud0c0\uc785\uc774 \uc801\ud569\ud55c \uc774\ub3d9 \ub41c \uc0c1\ud0dc\ub97c \uc815\uc758\ud558\uae30 \uc27d\ub3c4\ub85d \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#note_40","text":"\uac12 \ud0c0\uc785 \uc740 \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud0c0\uc785\uc744 \uc758\ubbf8\ud55c\ub2e4 (\ub9ce\uc740 \uacbd\uc6b0 \ubcf4\ud1b5 \ube44\uad50 \uac00\ub2a5\ud558\ub2e4). EoP \uc640 The Palo Alto TR \uc5d0\uc11c \ub098\uc628 \uc815\uaddc \ud0c0\uc785 \uac1c\ub150\uacfc \ubc00\uc811\ud55c \uad00\ub828\uc774 \uc788\ub2e4.","title":"Note"},{"location":"Class/#example_18","text":"class Date { // BAD: \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \uc5c6\ub2e4 public : Date ( int dd , int mm , int yyyy ); // ... }; vector < Date > vd1 ( 1000 ); // Date\uc758 \uae30\ubcf8 \uac12\uc774 \ud544\uc694\ud558\ub2e4 vector < Date > vd2 ( 1000 , Date { Month :: October , 7 , 1885 }); // \ub300\uc548 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ub2e4\ub978 \uc0ac\uc6a9\uc790 \uc815\uc758 \uc0dd\uc131\uc790\uac00 \uc5c6\uc744 \ub54c\ub9cc \uc790\ub3d9\uc73c\ub85c \uc0dd\uc131\ub41c\ub2e4. \ub54c\ubb38\uc5d0 \uc774\ub7f0 \ucf54\ub4dc\uc640 \uac19\uc740 \uacbd\uc6b0\uc5d4 vd1 \uc744 \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. \uae30\ubcf8\uac12\uc774 \uc5c6\ub2e4\ub294 \uac83\uc740 \uc0ac\uc6a9\uc790\uc5d0\uac8c\ub294 \ub0a0\ubcbc\ub77d \uac19\uc740 \uc0c1\ud669\uc77c \uc218 \uc788\uc73c\uba70 \ud0c0\uc785\uc758 \uc0ac\uc6a9\uc744 \uc5b4\ub835\uac8c \ud55c\ub2e4. \ub54c\ubb38\uc5d0 \ud558\ub098\ub77c\ub3c4 \uc758\ubbf8\uc788\uac8c \uc815\uc758\ud560 \uc218 \uc788\ub2e4\uba74, \uc815\uc758\ub418\uc5b4\uc57c \ud55c\ub2e4. Date \ub97c \ubc14\ud0d5\uc73c\ub85c \uc0dd\uac01\ud574\ubcf4\uc790: \"\uc790\uc5f0\uc801\uc778\" \uae30\ubcf8 \ub0a0\uc9dc\ub77c\ub294 \uac83\uc740 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4 (\ube45\ubc45\uc740 \ub300\ubd80\ubd84\uc758 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \ub108\ubb34 \uc624\ub798 \uc804 \uc774\uc57c\uae30\ub2e4). \uadf8\ub7ec\ub2c8 \uc774 \uc608\uc2dc\ub294 \uc0ac\uc18c\ud55c \uace0\ubbfc\uc740 \uc544\ub2c8\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. {0, 0, 0} \ub294 \ub300\ubd80\ubd84\uc758 \ub2ec\ub825 \uccb4\uacc4\uc5d0\uc11c \uc720\ud6a8\ud55c \ub0a0\uc9dc\uac00 \uc544\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 \uc774 \uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubd80\ub3d9 \uc18c\uc218\uc810\uc5d0\uc11c NaN \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \uac19\ub2e4. \ud558\uc9c0\ub9cc, \ub300\ubd80\ubd84\uc758 \ud604\uc2e4\uc801\uc778 Date \ud074\ub798\uc2a4\ub294 \"\uccab\uc9f8 \ub0a0\" (\uac00\ub839. 1970\ub144 1\uc6d4 1\uc77c\uc774 \ub9ce\uc774 \uc4f0\uc778\ub2e4)\uc744 \uac16\uae30 \ub54c\ubb38\uc5d0 \uc774\uac83\uc744 \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc774\ub2e4. class Date { public : Date ( int dd , int mm , int yyyy ); Date () = default ; // [C.45: \uba64\ubc84\ub97c \ucd08\uae30\ud654 \ud558\uae30\ub9cc \ud558\ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c](#Rc-default) // ... private : int dd = 1 ; int mm = 1 ; int yyyy = 1970 ; // ... }; vector < Date > vd1 ( 1000 );","title":"Example"},{"location":"Class/#note_41","text":"\ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uba64\ubc84\ub4e4\uc774 \uae30\ubcf8 \uc0dd\uc131\uc790\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uc744 \uacbd\uc6b0 \ubb35\uc2dc\uc801\uc73c\ub85c \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c4\ub2e4: struct X { string s ; vector < int > v ; }; X x ; // means X{{}, {}}; that is the empty string and the empty vector \uae30\ubcf8(built-in) \ud0c0\uc785\ub4e4\uc740 \uc801\uc808\ud558\uac8c \uae30\ubcf8 \uc0dd\uc131(default construct)\ub418\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4: struct X { string s ; int i ; }; void f () { X x ; // x.s is initialized to the empty string; x.i is uninitialized cout << x . s << ' ' << x . i << '\\n' ; ++ x . i ; } \uc815\uc801\uc73c\ub85c \ud560\ub2f9\ub41c \ub0b4\uc7a5 \ud0c0\uc785 \uac1c\uccb4\ub4e4\uc740 0 \uc73c\ub85c \ucd08\uae30\ud654 \ub41c\ub2e4. \ud558\uc9c0\ub9cc \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc740 \uadf8\ub807\uc9c0 \uc54a\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uc758 \ucd5c\uc801\ud654 \ube4c\ub4dc\ub294 \ub0b4\uc7a5 \ud0c0\uc785 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c. \ub530\ub77c\uc11c, \uc704\uc758 \uc608\uc2dc\uc640 \uac19\uc740 \ucf54\ub4dc\uac00 \ub098\ud0c0\ub09c\ub2e4\uba74, \ubbf8\uc815\uc758 \ub3d9\uc791\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. \ucd08\uae30\ud654\ub97c \ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uba85\uc2dc\uc801 \uae30\ubcf8 \uc0dd\uc131\uc774 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub2e4: struct X { string s ; int i {}; // \uae30\ubcf8 \ucd08\uae30\ud654 (i\ub294 0 \uc774 \ub41c\ub2e4) };","title":"Note"},{"location":"Class/#notes","text":"\uc801\uc808\ud55c \uae30\ubcf8 \uc0dd\uc131\uc744 \uac00\uc9c0\uc9c0 \uc54a\ub294 \ud074\ub798\uc2a4\ub4e4\uc740 \ubcf4\ud1b5 \ubcf5\uc0ac \ub610\ud55c \ubd88\uac00\ud558\ub2e4. \ub54c\ubb38\uc5d0 \uc774\ub7f0 \uacbd\uc6b0\ub294 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c \ub2e4\ub8e8\uc9c0 \uc54a\ub294\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc0c1\uc704 \ud074\ub798\uc2a4\uac00 \uac12 \ud0c0\uc785\uc774 \uc544\ub2c8\ub77c\uba74 (\uc0c1\uc704 \ud074\ub798\uc2a4\ub4e4\uc740 \ubcf5\uc0ac\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4) \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \ud544\uc218\uc801\uc774\uc9c0 \uc54a\ub2e4: // Shape is an abstract base class, not a copyable value type. // It may or may not need a default constructor. struct Shape { virtual void draw () = 0 ; virtual void rotate ( int ) = 0 ; // =delete copy/move functions // ... }; \ud638\ucd9c\uc790\uac00 \uc81c\uacf5\ud558\ub294 \uc790\uc6d0\uc744 \uc0dd\uc131 \uacfc\uc815\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\ub77c\uba74 \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c8 \uc218 \uc5c6\ub2e4. \uc774 \uacbd\uc6b0\ub3c4 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\ub294\ub370 \ubcf4\ud1b5 \uc774\ub7f0 \ud074\ub798\uc2a4\ub4e4\uc740 \ubcf5\uc0ac\uac00 \ubd88\uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc774\ub2e4: // std::lock_guard is not a copyable value type. // It does not have a default constructor. lock_guard g { mx }; // guard the mutex mx lock_guard g2 ; // error: guarding nothing \ub2e4\ub978 \uc0c1\ud0dc\ub4e4\uacfc \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \ucc98\ub9ac\ub418\uc5b4\uc57c \ud558\ub294 \"\ud2b9\ubcc4\ud55c \uc0c1\ud0dc\"\ub97c \uac00\uc9c0\ub294 \ud074\ub798\uc2a4\ub4e4\uc740 \uc0ac\uc6a9\uc790\uac00 \ub354 \ub9ce\uc740 \uc791\uc5c5\uc744 \ud558\uac8c \ub9cc\ub4e0\ub2e4 (\uadf8 \ub54c\ubb38\uc5d0 \ub354 \ub9ce\uc740 \uc624\ub958\ub97c \ub9cc\ub4e4\uae30\ub3c4 \ud55c\ub2e4). \uadf8\ub7f0 \ud0c0\uc785\uc740 (\ubcf5\uc0ac\uc640 \ubb34\uad00\ud558\uac8c) \ud2b9\ubcc4\ud55c \uc0c1\ud0dc\ub97c \uae30\ubcf8 \uc0dd\uc131 \uc9c1\ud6c4\uc758 \uc0c1\ud0dc\ub85c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. // std::ofstream is not a copyable value type. // It does happen to have a default constructor // that goes along with a special \"not open\" state. ofstream out { \"Foobar\" }; // ... out << log ( time , transaction ); \ubcf5\uc0ac \uac00\ub2a5\ud55c \ud2b9\ubcc4\ud55c \uc0c1\ud0dc\ub97c \uac00\uc9c4 \ud0c0\uc785\uc758 \uc608\uc2dc\ub85c\ub294, \ubcf5\uc0ac \uac00\ub2a5\ud55c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ub4e4 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc11c \uae30\ubcf8 \uc0dd\uc131 \uc0c1\ud0dc(\ud2b9\ubcc4\ud55c \uc0c1\ud0dc)\ub294 nullptr \ub97c \ub4e4\uace0\uc788\ub294 \uc0c1\ud0dc\uac00 \ub41c\ub2e4. \ud558\uc9c0\ub9cc, \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc9c0\uc6d0\ud558\uace0 \uc0dd\uc131 \ud6c4 \uc720\uc758\ubbf8\ud55c \uc0c1\ud0dc\ub97c \uac00\uc9c0\ub294 \uac83\uc774 \uad8c\uc7a5\ub41c\ub2e4. \uc774\ub7f0 \uc608\ub85c\ub294 std::string \uc774 \"\" \ub85c \ucd08\uae30\ud654\ub418\uac70\ub098, std::vector \uac00 \uacf5\ubc31\uc0c1\ud0dc( {} )\ub97c \uac00\uc9c0\ub294 \uac83\uc744 \ub4e4 \uc218 \uc788\ub2e4.","title":"Notes"},{"location":"Class/#enforcement_23","text":"\ud074\ub798\uc2a4\uac00 \uae30\ubcf8 \uc0dd\uc131\uc790 \uc5c6\uc774 \ubcf5\uc0ac \uac00\ub2a5\ud55c \uacbd\uc6b0\ub97c \uc9c0\uc801\ud55c\ub2e4 \ud074\ub798\uc2a4\uac00 \ubcf5\uc0ac\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \ub3d9\ub4f1 \ube44\uad50( == )\uac00 \uac00\ub2a5\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c44","text":"","title":"C.44: \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uac00\ub2a5\ud55c \ub2e8\uc21c\ud558\uace0 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c"},{"location":"Class/#reason_24","text":"\uc2e4\ud328\ud560 \uc218 \uc788\ub294 \uc5f0\uc0b0\uc5c6\uc774 \"\uae30\ubcf8\"\uc801\uc778 \uac12\uc744 \uc124\uc815\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc740 \uc624\ub958 \ucc98\ub9ac\ub97c \ub2e8\uc21c\ud654 \ud558\uace0, \uc774\ub3d9 \uc5f0\uc0b0\uc744 \ucd94\uce21 \ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example-problematic","text":"template < typename T > // elem\uc740 \uacf5\uac04\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub2e4 - new\ub97c \uc0ac\uc6a9\ud574 \uc6d0\uc18c\ub4e4\uc774 \ud560\ub2f9\ub41c\ub2e4. class Vector0 { public : Vector0 () : Vector0 { 0 } {} Vector0 ( int n ) : elem { new T [ n ]}, space { elem + n }, last { elem } {} // ... private : own < T *> elem ; T * space ; T * last ; }; \uc77c\ubc18\uc801\uc774\uc9c0\ub9cc, \uc624\ub958 \uc774\ud6c4 Vector0 \ub97c \uacf5\ubc31\uc73c\ub85c \ub9cc\ub4dc\ub294 \uac83\uc740 \ud560\ub2f9\uacfc \uad00\ub828\uc774 \uc788\uace0, \uc2e4\ud328\ud560 \uc218 \uc788\ub2e4. \ub610, \uae30\ubcf8 Vector \ub97c { new T[0], 0, 0} \uc73c\ub85c \ud45c\ud604\ud558\ub294 \uac83 \uc5ed\uc2dc \ub0ad\ube44\ucc98\ub7fc \ubcf4\uc778\ub2e4 \uc608\ub97c \ub4e4\uba74, Vector0<int> v(100) \uc740 100 \ub9cc\ud07c \ud560\ub2f9\ud558\ub294 \ube44\uc6a9\uc774 \ub4e0\ub2e4.","title":"Example, problematic"},{"location":"Class/#example_19","text":"template < typename T > // elem\uc740 nullptr\uc774\uac70\ub098, new\ub97c \uc0ac\uc6a9\ud574 \ud560\ub2f9\ub41c \uacf5\uac04\uc744 \uac00\ub9ac\ud0a8\ub2e4. class Vector1 { public : // {nullptr, nullptr, nullptr}\uacfc \ub3d9\uc77c\ud558\ub2e4. \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4. Vector1 () noexcept {} Vector1 ( int n ) : elem { new T [ n ]}, space { elem + n }, last { elem } {} // ... private : own < T *> elem = nullptr ; T * space = nullptr ; T * last = nullptr ; }; {nullptr, nullptr, nullptr} \ub294 Vector1{} \ub97c \ub9cc\ub4dc\ub294 \ube44\uc6a9\uc744 \uc904\uc5ec\uc900\ub2e4(cheap). \ud558\uc9c0\ub9cc \uc774\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc774\uace0 \uc2e4\ud589\uc2dc\uac04 \ud3c9\uac00\uac00 \ud544\uc694\ud558\ub2e4. \uc624\ub958\ub97c \ubc1c\uacac\ud558\uace0 Vector1 \ub97c \ube44\uc6b0\ub294 \uac83\uc740 \uac04\ub2e8\ud558\ub2e4.","title":"Example"},{"location":"Class/#enforcement_24","text":"\uc608\uc678\ub97c \ub358\uc9c0\ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c45","text":"","title":"C.45: \uba64\ubc84\ub97c \ucd08\uae30\ud654 \ud558\uae30\ub9cc \ud558\ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c; \ub300\uc2e0 \uba64\ubc84\ub4e4\uc774 \uc2a4\uc2a4\ub85c \ucd08\uae30\ud654 \ud558\ub3c4\ub85d \ud558\ub77c"},{"location":"Class/#reason_25","text":"\uba64\ubc84\ub4e4\uc5d0\uac8c \ucd08\uae30\ud654\ub97c \uc704\uc784\ud558\uba74, \ucef4\ud30c\uc77c\ub7ec\uac00 \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud55c\ub2e4. \ub354 \ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_9","text":"class X1 { // BAD: \uba64\ubc84 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4 string s ; int i ; public : X1 () : s { \"default\" }, i { 1 } { } // ... };","title":"Example, bad"},{"location":"Class/#example_20","text":"class X2 { string s = \"default\" ; int i = 1 ; public : // \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0dd\uc131\ud55c \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud55c\ub2e4. // ... };","title":"Example"},{"location":"Class/#enforcement_25","text":"(\uc26c\uc6c0) \uba85\uc2dc\uc801\uc778 \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ucd08\uae30\ud654 \uc774\uc678\uc758 \ub3d9\uc791\uc744 \ud574\uc57c\ud560 \ub54c \uc4f0\ub294 \uac83\uc774 \uc88b\ub2e4.","title":"Enforcement"},{"location":"Class/#c46-explicit","text":"","title":"C.46: \ub2e8\uc77c \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uc0dd\uc131\uc790\ub294 explicit\uc73c\ub85c \uc120\uc5b8\ud558\ub77c"},{"location":"Class/#reason_26","text":"\uc758\ub3c4\uce58 \uc54a\uc740 \ubcc0\ud658\uc744 \ud53c\ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_10","text":"class String { // ... public : String ( int ); // BAD // ... }; String s = 10 ; // \ub180\ub78d\uac8c\ub3c4... \uae38\uc774\uac00 10\uc778 \ubb38\uc790\uc5f4\uc774 \ub41c\ub2e4","title":"Example, bad"},{"location":"Class/#exception_6","text":"\uc0dd\uc131 \uc778\uc790 \ud0c0\uc785\uc73c\ub85c\ubd80\ud130\uc758 \ubb35\uc2dc\uc801\uc778 \ubcc0\ud658\uc744 \ud5c8\uc6a9\ud55c\ub2e4\uba74 explicit \uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4: class Complex { // ... public : Complex ( double d ); // OK: we want a conversion from d to {d, 0} // ... }; Complex z = 10.7 ; // \uc804\ud600 \uc5b4\uc0c9\ud558\uc9c0 \uc54a\ub2e4","title":"Exception"},{"location":"Class/#see-also_2","text":"Discussion of implicit conversions","title":"See also"},{"location":"Class/#note_42","text":"\ubcf5\uc0ac\uc640 \uc774\ub3d9 \uc0dd\uc131\uc790\ub294 \ubcc0\ud658(conversion)\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 explicit \uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4. \uba85\uc2dc\uc801 \ubcf5\uc0ac/\uc774\ub3d9 \uc0dd\uc131\uc790\ub294 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uac70\ub098 \ubc18\ud658\ud558\ub294 \uac83\uc744 \uc5b4\ub835\uac8c \ud55c\ub2e4.","title":"Note"},{"location":"Class/#enforcement_26","text":"(\uc26c\uc6c0) \ub2e8\uc77c \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uc0dd\uc131\uc790\ub294 explicit \uc73c\ub85c \uc120\uc5b8\ud558\ub3c4\ub85d \ud55c\ub2e4. explicit \uc774 \uc544\ub2c8\uba74\uc11c \uc88b\uc740 \uc0dd\uc131\uc790\ub294 \ub4dc\ubb3c\ub2e4. \ubaa8\ubc94 \uc0ac\ub840\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c47","text":"","title":"C.47: \uba64\ubc84 \ubcc0\uc218\ub4e4\uc740 \uc120\uc5b8\ub41c \uc21c\uc11c\ub300\ub85c \ucd08\uae30\ud654\ud558\ub77c"},{"location":"Class/#reason_27","text":"\ud63c\ub780\uacfc \uc624\ub958\ub97c \ucd5c\uc18c\ud654\ud55c\ub2e4. \uc21c\uc11c\ub300\ub85c \uc9c4\ud589\ud558\ub294 \uac83\uc774 \ucd08\uae30\ud654\uc758 \ubc29\uc2dd\uc774\ub2e4. (\uba64\ubc84 \ubcc0\uc218 \ucd08\uae30\ud654\uc640\ub294 \ubb34\uad00\ud558\ub2e4).","title":"Reason"},{"location":"Class/#example-bad_11","text":"class Foo { int m1 ; int m2 ; public : Foo ( int x ) : m2 { x }, m1 { ++ x } { } // BAD: misleading initializer order // ... }; Foo x ( 1 ); // surprise: x.m1 == x.m2 == 2","title":"Example, bad"},{"location":"Class/#enforcement_27","text":"(\ub2e8\uc21c) \uba64\ubc84 \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8\ub294 \uc120\uc5b8\uacfc \uac19\uc740 \uc21c\uc11c\ub85c \uc9c4\ud589\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#see-also_3","text":"Discussion","title":"See also"},{"location":"Class/#c48-in-class","text":"","title":"C.48: \uc0c1\uc218 \ucd08\uae30\ud654\ub294 \uac00\ub2a5\ud55c \ud074\ub798\uc2a4 \ub0b4(in-class) \uba64\ubc84 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_28","text":"\uac19\uc740 \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub420 \uac83\uc774\ub77c\uace0 \uba85\uc2dc\uc801\uc73c\ub85c \ubcf4\uc5ec\uc900\ub2e4. \uc911\ubcf5\uc801\uc73c\ub85c \uc791\uc131\ud558\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4. \uc720\uc9c0\ubcf4\uc218 \ubb38\uc81c\ub294 \uc5c6\uc564\ub2e4. \uc9e7\uace0 \ud6a8\uc728\uc801\uc778 \ucf54\ub4dc\uac00 \ub41c\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_12","text":"class X { // BAD int i ; string s ; int j ; public : X () : i { 666 }, s { \"qqq\" } { } // j is uninitialized X ( int ii ) : i { ii } {} // s is \"\" and j is uninitialized // ... }; \ucf54\ub4dc\ub97c \uc720\uc9c0\ubcf4\uc218\ud558\ub294 \uc0ac\ub78c\uc774 j \uac00 \uc758\ub3c4\uc801\uc73c\ub85c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4 (\uaf64 \uc774\uc0c1\ud55c \uc0dd\uac01\uc774\uc9c0\ub9cc). \ub610 \uc5b4\ub5a4 \uc758\ub3c4\ub85c s \uc758 \uae30\ubcf8\uac12\uc73c\ub85c \"\" \uc640 qqq \ub97c \uc0ac\uc6a9\ud558\ub294\uc9c0 \uc54c \uc218 \uc788\uc744\uae4c? j \uc640 \uac19\uc774 \uba64\ubc84 \ucd08\uae30\ud654\uac00 \uc0dd\ub7b5\ub418\ub294 \ubb38\uc81c\ub294 \uc774\ubbf8 \uc788\ub294 \ud074\ub798\uc2a4\uc5d0 \uc0c8\ub85c\uc6b4 \uba64\ubc84\uac00 \ucd94\uac00\ub420 \ub54c \ubc1c\uc0dd\ud55c\ub2e4.","title":"Example, bad"},{"location":"Class/#example_21","text":"class X2 { int i { 666 }; string s { \"qqq\" }; int j { 0 }; public : X2 () = default ; // all members are initialized to their defaults X2 ( int ii ) : i { ii } {} // s and j initialized to their defaults // ... };","title":"Example"},{"location":"Class/#alternative_1","text":"\uc0dd\uc131\uc790\uc5d0 \uae30\ubcf8 \uc778\uc790\ub97c \uc8fc\ub294 \uac83\uc744 \uc0dd\uac01\ud574\ubcfc \uc218 \uc788\ub2e4. \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0\uc120 \uaf64 \ud754\ud55c \ubc29\ubc95\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc774\ub294 \uba85\uc2dc\uc801\uc774\uc9c0 \uc54a\uace0, \ub354 \ub9ce\uc740 \uc778\uc790\uac00 \uc804\ub2ec\ub418\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uc0dd\uc131\uc790\uac00 \uc5ec\ub7ff\uc778 \uacbd\uc6b0, \uae30\ubcf8 \uc778\uc790 \ucf54\ub4dc\ub97c \ubc18\ubcf5\uc801\uc73c\ub85c \uc791\uc131\ud574\uc57c \ud55c\ub2e4: class X3 { // BAD: inexplicit, argument passing overhead int i ; string s ; int j ; public : X3 ( int ii = 666 , const string & ss = \"qqq\" , int jj = 0 ) : i { ii }, s { ss }, j { jj } { } // all members are initialized to their defaults // ... };","title":"Alternative"},{"location":"Class/#enforcement_28","text":"(\uc26c\uc6c0) \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub294 \ubaa8\ub4e0 \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \ucd08\uae30\ud654\ud574\uc57c \ud55c\ub2e4 (\uba85\uc2dc\uc801\uc73c\ub85c\ub4e0, \uc0dd\uc131\uc790 \uc704\uc784\uc774\ub4e0, \uae30\ubcf8 \uc0dd\uc131\uc774\ub4e0) (\uc26c\uc6c0) \uc0dd\uc131\uc790\uc758 \uae30\ubcf8\uc778\uc790\ub294 \ud074\ub798\uc2a4 \ub0b4 \ucd08\uae30\ud654\uac00 \uc801\ud569\ud560 \uc218 \uc788\ub2e4","title":"Enforcement"},{"location":"Class/#c49","text":"","title":"C.49: \uc0dd\uc131\uc790 \uc548\uc5d0\uc11c\uc758 \ub300\uc785 \ubcf4\ub2e4\ub294 \ucd08\uae30\ud654\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Class/#reason_29","text":"\ucd08\uae30\ud654\ub294 \ub300\uc785 \ubcf4\ub2e4 \uae54\ub054\ud558\uace0 \uc544\ub984\ub2f5\uac8c \uc218\ud589\ub420 \uc218 \uc788\ub2e4. \uac12\uc744 \uc124\uc815\ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub294 \uc624\ub958(\"use before set\")\ub97c \uc608\ubc29\ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example-good_2","text":"class A { // Good string s1 ; public : A () : s1 { \"Hello, \" } { } // GOOD: directly construct // ... };","title":"Example, good"},{"location":"Class/#example-bad_13","text":"class B { // BAD string s1 ; public : B () { s1 = \"Hello, \" ; } // BAD: default constructor followed by assignment // ... }; class C { // UGLY, aka very bad int * p ; public : C () { cout << * p ; p = new int { 10 }; } // accidental use before initialized // ... };","title":"Example, bad"},{"location":"Class/#example-better-still","text":"\ud568\uc218\uc5d0 \ubb38\uc790\uc5f4 \uc778\uc218\ub97c \uc81c\uc2dc\ud558\ub294 \ubcf4\ub2e4 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95 )\uc73c\ub85c, const char* \ub300\uc2e0\uc5d0 'gsl::string_span' \ub610\ub294 'std::string_view'(C++17)\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. class D { // Good string s1; public: A(string_view v) : s1{v} { } // GOOD: directly construct // ... };","title":"Example, better still"},{"location":"Class/#c50-virtual","text":"","title":"C.50: \ucd08\uae30\ud654 \uacfc\uc815\uc5d0\uc11c virtual \ub3d9\uc791\uc774 \ud544\uc694\ud558\ub2e4\uba74, \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_30","text":"\uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uc0c1\ud0dc\uac00 \ud558\uc704 \uac1c\uccb4\uc5d0 \uc758\ud574 \uacb0\uc815\ub41c\ub2e4\uba74, \ubd88\uc644\uc804\ud558\uac8c \uc0dd\uc131\ub41c \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud560 \uac00\ub2a5\uc131\uc744 \ucd5c\uc18c\ud654 \ud558\uba74\uc11c \uac00\uc0c1 \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#note_43","text":"\ud329\ud1a0\ub9ac \ud568\uc218\uc758 \ubc18\ud658 \ud0c0\uc785\uc740 \ubcf4\ud1b5 unique_ptr \uac00 \uc801\uc808\ud558\ub2e4; \ub9cc\uc57d \uacf5\uc720\ub418\uc5b4\uc57c \ud55c\ub2e4\uba74, \ud568\uc218\ub97c \ud638\ucd9c\ud55c \ucabd\uc5d0\uc11c unique_ptr \ub97c shared_ptr \ub85c \uc774\ub3d9\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ub2e4\ub974\uac8c\ub294, \ud329\ud1a0\ub9ac \ud568\uc218\uc758 \uc791\uc131\uc790\uac00 \ubc18\ud658 \uac1c\uccb4\uac00 \ud56d\uc0c1 \uacf5\uc720\ub41c\ub2e4\ub294 \uac83\uc744 \uc54c\uace0\uc788\ub2e4\uba74, make_shared \ub97c \uc0ac\uc6a9\ud574\uc11c shared_ptr \ub97c \ubc18\ud658\ud558\uace0 \ud560\ub2f9\uc744 \uc904\uc77c \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Class/#example-bad_14","text":"class B { public : B () { // ... f (); // BAD: virtual call in constructor // ... } virtual void f () = 0 ; // ... };","title":"Example, bad"},{"location":"Class/#example_22","text":"class B { protected : B () { /* ... */ } // create an imperfectly initialized object virtual void PostInitialize () // to be called right after construction { // ... f (); // GOOD: virtual dispatch is safe // ... } public : virtual void f () = 0 ; template < class T > static shared_ptr < T > Create () // interface for creating shared objects { auto p = make_shared < T > (); p -> PostInitialize (); return p ; } }; class D : public B { /* ... */ }; // some derived class shared_ptr < D > p = D :: Create < D > (); // creating a D object \uc0dd\uc131\uc790\ub97c protected \ub85c \ub9cc\ub4e6\uc73c\ub85c\uc368, \uac1c\uccb4\uac00 \ubd88\uc644\uc804\ud558\uac8c \uc0dd\uc131\ub41c \ud6c4 \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uc5d0 \ub178\ucd9c\ub418\ub294 \uac83\uc744 \ub9c9\uc744 \uc218 \uc788\ub2e4. \ud329\ud1a0\ub9ac \ud568\uc218 Create() \ub97c \uc9c0\uc6d0\ud558\uba74 (\uc790\uc720 \uc800\uc7a5\uc18c \uc601\uc5ed\uc5d0) \uac1c\uccb4 \uc0dd\uc131\uc744 \uc880 \ub354 \uc27d\uac8c\ud560 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Class/#note_44","text":"\uc804\ud1b5\uc801\uc778 \ud329\ud1a0\ub9ac \ud568\uc218\ub4e4\uc740 \uc2a4\ud0dd\uc774\ub098 \uc778\uc811 \uac1c\uccb4\ubcf4\ub2e4\ub294 \uc790\uc720 \uc800\uc7a5\uc18c\uc5d0 \uc0dd\uc131\ud55c\ub2e4.","title":"Note"},{"location":"Class/#see-also_4","text":"Discussion","title":"See also"},{"location":"Class/#c51","text":"","title":"C.51: \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub4e4\uc744 \uc704\ud55c \uc77c\ubc18\uc801\uc778 \ub3d9\uc791\uc744 \ud45c\ud604\ud560 \ub54c\ub294 \ub300\ub9ac \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_31","text":"\ucf54\ub4dc \uc911\ubcf5\uacfc \uc2e4\uc218\uc5d0 \uc758\ud55c \ucf54\ub4dc \ucc28\uc774\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_15","text":"class Date { // BAD: repetitive int d ; Month m ; int y ; public : Date ( int ii , Month mm , year yy ) : i { ii }, m { mm }, y { yy } { if ( ! valid ( i , m , y )) throw Bad_date {}; } Date ( int ii , Month mm ) : i { ii }, m { mm } y { current_year ()} { if ( ! valid ( i , m , y )) throw Bad_date {}; } // ... }; \ub611\uac19\uc740 \ub3d9\uc791\uc744 \uc791\uc131\ud558\ub294 \uac83\uc740 \uc9c0\ub8e8\ud558\uace0 \uc2e4\uc218\ub85c \uc778\ud574 \ub611\uac19\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4.","title":"Example, bad"},{"location":"Class/#example_23","text":"class Date2 { int d ; Month m ; int y ; public : Date2 ( int ii , Month mm , year yy ) : i { ii }, m { mm }, y { yy } { if ( ! valid ( i , m , y )) throw Bad_date {}; } Date2 ( int ii , Month mm ) : Date2 { ii , mm , current_year ()} {} // ... };","title":"Example"},{"location":"Class/#see-also_5","text":"\ub9cc\uc57d \"\ubc18\ubcf5\ub41c \ub3d9\uc791\"\uc774 \ub2e8\uc21c\ud55c \ucd08\uae30\ud654\ub77c\uba74, \ud074\ub798\uc2a4 \ub0b4 \uba64\ubc84 \ucd08\uae30\ud654 \ub97c \uace0\ub824\ud558\ub77c.","title":"See also"},{"location":"Class/#enforcement_29","text":"(\uc911\uac04) \uc720\uc0ac\ud55c \uc0dd\uc131\uc790 \uad6c\ud604(Body)\uc744 \ucc3e\ub294\ub2e4","title":"Enforcement"},{"location":"Class/#c52","text":"","title":"C.52: \ucd94\uac00\uc801\uc778 \ucd08\uae30\ud654\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uc740 \ud30c\uc0dd\ub41c \ud074\ub798\uc2a4\uc5d0\uc11c \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \uc0c1\uc18d \uc0dd\uc131\uc790\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_32","text":"\ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc744 \uc704\ud55c \uc0dd\uc131\uc790\uac00 \ud544\uc694\ud558\ub2e4\uba74, \uc0dd\uc131\uc790\ub97c \ub2e4\uc2dc \uad6c\ud604\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc740 \uc9c0\ub8e8\ud558\uace0 \uc624\ub958\uc758 \uc18c\uc9c0\uac00 \ub9ce\ub2e4.","title":"Reason"},{"location":"Class/#example_24","text":"std::vector \ub294 \uad49\uc7a5\ud788 \ub9ce\uc740 \uc0dd\uc131\uc790\ub97c \uc9c0\uc6d0\ud55c\ub2e4. \ub54c\ubb38\uc5d0 \uc790\uc2e0\ub9cc\uc758 vector \ub97c \ub9cc\ub4e4\uace0\uc790 \ud55c\ub2e4\uba74, \uadf8 \ub9ce\uc740 \uc0dd\uc131\uc790\ub97c \ub2e4\uc2dc \uc791\uc131\ud558\uace0 \uc2f6\uc9c0\ub294 \uc54a\uc744 \uac83\uc774\ub2e4: class Rec { // ... data and lots of nice constructors ... }; class Oper : public Rec { using Rec :: Rec ; // ... no data members ... // ... lots of nice utility functions ... };","title":"Example"},{"location":"Class/#example-bad_16","text":"struct Rec2 : public Rec { int x ; using Rec :: Rec ; }; Rec2 r { \"foo\" , 7 }; int val = r . x ; // uninitialized","title":"Example, bad"},{"location":"Class/#enforcement_30","text":"\ud558\uc704 \ud074\ub798\uc2a4\uc758 \ubaa8\ub4e0 \uba64\ubc84\ub4e4\uc774 \ucd08\uae30\ud654\ub418\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#ccopy-copy-move","text":"\uac12 \ud0c0\uc785\ub4e4\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ubcf5\uc0ac \uac00\ub2a5\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \ud074\ub798\uc2a4 \uacc4\uce35\uc5d0\uc11c\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc740 \uadf8\ub807\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4. \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc758 \uacbd\uc6b0, \ubcf5\uc0ac\uac00 \uac00\ub2a5\ud560 \uc218\ub3c4, \uadf8\ub807\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\ub2e4. \ud0c0\uc785\ub4e4\uc740 \ub17c\ub9ac\uc801\uc778 \ub610\ub294 \uc131\ub2a5 \uc0c1\uc758 \uc774\uc720\ub85c \uc774\ub3d9\ud558\ub3c4\ub85d \uc815\uc758\ub420 \uc218 \uc788\ub2e4.","title":"C.copy: \ubcf5\uc0ac(Copy)\uc640 \uc774\ub3d9(Move)"},{"location":"Class/#c60-virtual-const-const","text":"","title":"C.60: \ubcf5\uc0ac\uc5f0\uc0b0\uc744 virtual\ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c. \ub9e4\uac1c\ubcc0\uc218\ub294 const&amp;\ub85c \ubc1b\uace0, const&amp;\ub85c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Class/#reason_33","text":"\uc774\ub807\uac8c \ud558\ub294 \uac83\uc774 \uac04\ub2e8\ud558\uace0 \ud6a8\uc728\uc801\uc774\ub2e4. r-value\ub97c \uc704\ud574 \ucd5c\uc801\ud654\ud558\uae38 \uc6d0\ud55c\ub2e4\uba74, && \ub97c \ubc1b\ub294 \ub300\uc785 \uc5f0\uc0b0\uc744 \uc624\ubc84\ub85c\ub4dc\ud558\uc5ec \uc81c\uacf5\ud558\ub77c. ( F.18 \ub97c \ubcf4\ub77c)","title":"Reason"},{"location":"Class/#example_25","text":"class Foo { public : Foo & operator = ( const Foo & x ) { // GOOD: \uc790\uae30\ub300\uc785 \uac80\uc0ac\ub97c \ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. (\uc131\ub2a5\uc740 \uc5b4\ucc0c\ub418\uc5c8\ub4e0) auto tmp = x ; std :: swap ( * this , tmp ); return * this ; } // ... }; Foo a ; Foo b ; Foo f (); a = b ; // l-value \ub300\uc785 : \ubcf5\uc0ac a = f (); // r-value \ub300\uc785 : \uc774\ub3d9\uc77c\uc218\ub3c4 \uc788\ub2e4","title":"Example"},{"location":"Class/#note_45","text":"swap \ud568\uc218\uc758 \uad6c\ud604\uc740 \uac15\ud55c \uc608\uc678 \uc548\uc804\uc131 \ubcf4\uc7a5 \uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4.","title":"Note"},{"location":"Class/#example_26","text":"\ud558\uc9c0\ub9cc \ub9cc\uc57d \uc784\uc2dc \uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uc9c0 \uc54a\uc74c\uc73c\ub85c\uc368 \ud6e8\uc52c \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4\uba74 \uc5b4\ub5a8\uae4c? \ud06c\uace0 \uac19\uc740 \ud06c\uae30\uc758 Vector \ub4e4\uc758 \ub300\uc785\uc774 \ube48\ubc88\ud55c \uc601\uc5ed\uc744 \uc704\ud55c \uac04\ub2e8\ud55c Vector \ub97c \uc0dd\uac01\ud574\ubcf4\ub77c. \uc774 \uacbd\uc6b0, swap \uad6c\ud604 \uae30\ubc95\uc5d0 \uc758\ud55c \uc6d0\uc18c\ub4e4\uc758 \uc0ac\ubcf8\uc740 \uc0c1\ub2f9\ud55c \ube44\uc6a9 \uc99d\uac00\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4: template < typename T > class Vector { public : Vector & operator = ( const Vector & ); // ... private : T * elem ; int sz ; }; Vector & Vector :: operator = ( const Vector & a ) { if ( a . sz > sz ) { // ... swap\ud568\uc218 \uae30\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub7ec\uba74 \ucd5c\uc0c1\uc758 \uad6c\ud604\uc774 \ub41c\ub2e4 ... return * this } // ... copy sz elements from *a.elem to elem ... if ( a . sz < sz ) { // ... *a.elem\uc73c\ub85c\ubd80\ud130 elem\uc73c\ub85c sz\ub9cc\ud07c \uc6d0\uc18c\ub4e4\uc744 \ubcf5\uc0ac\ud55c\ub2e4 ... } return * this ; } \ub300\uc0c1 \uc6d0\uc18c\ub4e4\uc5d0 \uc9c1\uc811 \uc4f0\uae30 \uc5f0\uc0b0\uc744 \ud568\uc73c\ub85c\uc368, swap \uae30\ubc95\uc774 \uc81c\uacf5\ud558\ub294 \uac15\ud55c \uc608\uc678 \ubcf4\uc7a5 \ub300\uc2e0 \uae30\ubcf8\uc801\uc778 \uc608\uc678 \ubcf4\uc7a5 \ub9cc \uc5bb\uac8c \ub420 \uac83\uc774\ub2e4. \uc790\uae30 \ub300\uc785 \uc5d0 \uc8fc\uc758\ud558\ub77c.","title":"Example"},{"location":"Class/#alternatives","text":"\ub9cc\uc57d virtual \ub300\uc785 \uc5f0\uc0b0\uc790\uac00 \ud544\uc694\ud558\ub2e4\uace0 \uc0dd\uac01\ud55c\ub2e4\uba74, \uadf8\ub9ac\uace0 \uadf8\uac83\uc774 \uc5b4\uc9f8\uc11c \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub294\uc9c0 \uc774\ud574\ud55c\ub2e4\uba74, \uadf8 \ud568\uc218\ub294 operator= \ub77c\uace0 \ubd80\ub974\uc9c0 \ub9c8\ub77c. \uc774\ub984\uc744 \ubd80\uc5ec\ud574\uc11c virtual void assign(const Foo&) \ub85c \ub9cc\ub4e4\uc5b4\ub77c. \ubcf5\uc0ac \uc0dd\uc131 vs. clone() \ub97c \ucc38\uc870\ud558\ub77c.","title":"Alternatives"},{"location":"Class/#enforcement_31","text":"(\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 \uac00\uc0c1\ud568\uc218\uc5ec\uc11c\ub294 \uc548\ub41c\ub2e4. \ub4dc\ub798\uace4\ub4e4\ub9cc\ud07c \uc704\ud5d8\ud558\ub2e4! (\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 T& \ub97c \ubc18\ud658\ud558\uba74 \uc548\ub41c\ub2e4. \uc5f0\uc1c4\uc801\uc778 \ud638\ucd9c\uc744 \uc704\ud574\uc120, \ucee8\ud14c\uc774\ub108\ub85c\uc758 \uac1c\uccb4 \ub300\uc785\uacfc \ucf54\ub4dc \uc791\uc131\uc744 \ubc29\ud574\ud558\ub294 const T& \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c. (\uc911\uac04) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 (\uc554\uc2dc\uc801\uc73c\ub85c\ub098 \uba85\uc2dc\uc801\uc73c\ub85c\ub098) \ubaa8\ub4e0 \uae30\ubcf8 \ud074\ub798\uc2a4\uc640 \uba64\ubc84\ub4e4\uc758 \ub300\uc785 \uc5f0\uc0b0\uc790\ub97c \ud638\ucd9c\ud574\uc57c \ud55c\ub2e4. \ud574\ub2f9 \ud0c0\uc785\uc774 \ud3ec\uc778\ud130 \ubb38\ub9e5\uc774\ub098 \uac12 \ubb38\ub9e5\uc744 \uac00\uc9c0\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574 \uc18c\uba78\uc790\ub97c \ud655\uc778\ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c61","text":"","title":"C.61: \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \ubcf5\uc0ac\ub97c \uc218\ud589\ud574\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_34","text":"\uc77c\ubc18\uc801\uc73c\ub85c \uadf8\ub807\uac8c \ud560 \uac83\uc774\ub77c \uc0dd\uac01\ud55c\ub2e4. x = y \uac00 \uc218\ud589\ub41c \ud6c4\uc5d0\ub294, x == y \uc778 \uacb0\uacfc\ub97c \uac00\uc838\uc57c \ud55c\ub2e4. \ubcf5\uc0ac \ud6c4\uc5d0\ub294 x \uc640 y \uac00 \ub3c5\ub9bd\uc801\uc778 \uac1c\uccb4\ub4e4\uc77c \uc218 \uc788\ub2e4. (\uac12 \uc758\ubbf8\uad6c\uc870, \ube44-\ud3ec\uc778\ud130 \uae30\ubcf8 \ud0c0\uc785\ub4e4\uacfc \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud0c0\uc785\ub4e4\uc758 \ub3d9\uc791\ud558\ub294 \ubc29\uc2dd) \ub610\ub294 \uacf5\uc720\ub41c \uac1c\uccb4\ub97c \ucc38\uc870\ud55c\ub2e4(\ud3ec\uc778\ud130 \uc758\ubbf8\uad6c\uc870, \ud3ec\uc778\ud130\ub4e4\uc774 \ub3d9\uc791\ud558\ub294 \ubc29\uc2dd).","title":"Reason"},{"location":"Class/#example_27","text":"class X { // OK: value semantics public : X (); X ( const X & ); // copy X void modify (); // change the value of X // ... ~ X () { delete [] p ; } private : T * p ; int sz ; }; bool operator == ( const X & a , const X & b ) { return a . sz == b . sz && equal ( a . p , a . p + a . sz , b . p , b . p + b . sz ); } X :: X ( const X & a ) : p { new T [ a . sz ]}, sz { a . sz } { copy ( a . p , a . p + sz , p ); } X x ; X y = x ; if ( x != y ) throw Bad {}; x . modify (); if ( x == y ) throw Bad {}; // assume value semantics","title":"Example"},{"location":"Class/#example_28","text":"class X2 { // OK: pointer semantics public : X2 (); X2 ( const X2 & ) = default ; // shallow copy ~ X2 () = default ; void modify (); // change the pointed-to value // ... private : T * p ; int sz ; }; bool operator == ( const X2 & a , const X2 & b ) { return a . sz == b . sz && a . p == b . p ; } X2 x ; X2 y = x ; if ( x != y ) throw Bad {}; x . modify (); if ( x != y ) throw Bad {}; // assume pointer semantics","title":"Example"},{"location":"Class/#note_46","text":"\"\uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\"\ub97c \ub9cc\ub4e4\uace0 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ubcf5\uc0ac \uc758\ubbf8\uad6c\uc870\uc744 \uc120\ud638\ud558\ub77c. \uac12 \uc758\ubbf8\uad6c\uc870\uc740 \uac00\uc7a5 \uac04\ub2e8\ud558\uba70, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uae30\ub2a5\ub4e4\uc774 \uae30\ub300\ud558\ub294 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Class/#enforcement_32","text":"(\ud2b9\ubcc4\ud788 \uc5c6\uc74c)","title":"Enforcement"},{"location":"Class/#c62","text":"","title":"C.62: \ubcf5\uc0ac \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uac8c \uc791\uc131\ud558\ub77c"},{"location":"Class/#reason_35","text":"x = x \uc758 \uc218\ud589\uc774 x \uc758 \uac12\uc744 \ubc14\uafbc\ub2e4\uba74, \uc0ac\ub78c\ub4e4\uc740 \ub180\ub784 \uac83\uc774\uba70 \uc548\uc88b\uc740 \uc5d0\ub7ec\ub4e4\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4 (\uc885\uc885 \uc790\uc6d0 \ub204\uc218\ub97c \ud3ec\ud568\ud558\uae30\ub3c4 \ud55c\ub2e4).","title":"Reason"},{"location":"Class/#example_29","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\ud14c\uc774\ub108\ub4e4\uc740 \uc790\uae30 \ub300\uc785\uc744 \uc6b0\uc544\ud558\uace0 \ud6a8\uc728\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \ucc98\ub9ac\ud55c\ub2e4. std :: vector < int > v = { 3 , 1 , 4 , 1 , 5 , 9 }; v = v ; // the value of v is still {3, 1, 4, 1, 5, 9}","title":"Example"},{"location":"Class/#note_47","text":"\uba64\ubc84\ub4e4\ub85c\ubd80\ud130 \uc0dd\uc131\ub41c \uae30\ubcf8 \ub300\uc785 \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\ub2e4. struct Bar { vector < pair < int , int >> v ; map < string , int > m ; string s ; }; Bar b ; // ... b = b ; // \uc815\ud655\ud558\uace0, \ud6a8\uc728\uc801\uc774\ub2e4","title":"Note"},{"location":"Class/#note_48","text":"\uc790\uae30 \ub300\uc785\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uac80\uc0ac\ud568\uc73c\ub85c\uc368 \ucc98\ub9ac\ud560 \uc218\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc885\uc885 \uadf8\ub7f0 \uac80\uc0ac \uc5c6\uc774\ub3c4 \uc6b0\uc544\ud558\uace0 \ube60\ub974\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4 (\uac00\ub839, swap \uc0ac\uc6a9\ubc95 ). class Foo { string s ; int i ; public : Foo & operator = ( const Foo & a ); // ... }; Foo & Foo :: operator = ( const Foo & a ) // OK, but there is a cost { if ( this == & a ) return * this ; s = a . s ; i = a . i ; return * this ; } \uc774 \ubc29\ubc95\uc740 \ubd84\uba85 \uc548\uc804\ud558\uace0 \ud6a8\uc728\uc801\uc774\ub2e4. \ud558\uc9c0\ub9cc, \ub9cc\uc57d \ubc31\ub9cc\ubc88 \ub9c8\ub2e4 \ud55c\ubc88\uc529 \uc790\uae30 \ub300\uc785\uc744 \ud55c\ub2e4\uba74 \uc5b4\ub5bb\uaca0\ub294\uac00? \uadf8 \ub9d0\uc740 \ubc31\ub9cc\ubc88\uc774\ub098 \uc7a5\ud669\ud55c \uac80\uc0ac\ub97c\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uacfc \uac19\ub2e4 (\ud558\uc9c0\ub9cc \uc790\uae30 \ub300\uc785\uc758 \uacb0\uacfc\ub294 \ubc18\ub4dc\uc2dc \uc790\uc2e0\uacfc \uac19\uc544\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0, \ucef4\ud4e8\ud130\uc758 \ubd84\uae30 \uc608\uce21\uc740 \ub9e4\ubc88 \ub9de\uc544\ub5a8\uc5b4\uc9c8 \uac83\uc774\ub2e4.) \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc0dd\uac01\ud574\ubcfc \uc218 \uc788\ub2e4: Foo & Foo :: operator = ( const Foo & a ) // \uac04\ub2e8\ud558\uace0, \uc544\ub9c8\ub3c4 \ud6e8\uc52c \ub098\uc744 \uac83\uc774\ub2e4. { s = a . s ; i = a . i ; return * this ; } std::string \uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uace0, int \uc5ed\uc2dc \uc548\uc804\ud558\ub2e4. (\ud76c\uc18c\ud558\uac8c \ubc1c\uc0dd\ud558\ub294) \uc790\uae30 \ub300\uc785\uc5d0 \ub300\ud574\uc11c\ub9cc \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud558\uac8c \ub41c\ub2e4.","title":"Note"},{"location":"Class/#enforcement_33","text":"(\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub4e4\uc740 if (this == &a) return *this; \uc640 \uac19\uc740 \ud328\ud134\uc774 \uc788\uc5b4\uc120 \uc548\ub41c\ub2e4.","title":"Enforcement"},{"location":"Class/#c63-virtual-const","text":"","title":"C.63: \uc774\ub3d9 \uc5f0\uc0b0\uc740 virtual\ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c, \ub9e4\uac1c\ubcc0\uc218\ub294 &amp;&amp;\ub97c \uc0ac\uc6a9\ud558\uace0, const&amp;\ub85c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Class/#reason_36","text":"\uac04\ub2e8\ud558\uace0, \ud6a8\uc728\uc801\uc774\ub2e4.","title":"Reason"},{"location":"Class/#see-also_6","text":"\ubcf5\uc0ac \ub300\uc785\uc744 \uc704\ud55c \uaddc\uce59\ub4e4","title":"See also"},{"location":"Class/#enforcement_34","text":"\ubcf5\uc0ac \ub300\uc785 \uc5d0\uc11c\uc640 \ub3d9\uc77c\ud558\ub2e4. (\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 \uac00\uc0c1 \ud568\uc218\uc5ec\uc11c\ub294 \uc548\ub41c\ub2e4. \ub4dc\ub798\uace4\ub4e4\ub9cc\ud07c \uc704\ud5d8\ud558\ub2e4! (\uc26c\uc6c0) \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 T& \ub97c \ubc18\ud658\ud558\uba74 \uc548\ub41c\ub2e4. \uc5f0\uc1c4\uc801\uc778 \ud638\ucd9c\uc744 \uc704\ud574\uc120, \ucee8\ud14c\uc774\ub108\ub85c\uc758 \uac1c\uccb4 \ub300\uc785\uacfc \ucf54\ub4dc \uc791\uc131\uc744 \ubc29\ud574\ud558\ub294 const T& \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c (\uc911\uac04) \uc774\ub3d9 \uc5f0\uc0b0\uc790\ub294 (\uc554\uc2dc\uc801\uc73c\ub85c\ub098 \uba85\uc2dc\uc801\uc73c\ub85c\ub098) \ubaa8\ub4e0 \uae30\ubcf8 \ud074\ub798\uc2a4\uc640 \uba64\ubc84\ub4e4\uc758 \uc774\ub3d9 \uc5f0\uc0b0\uc790\ub97c \ud638\ucd9c\ud574\uc57c \ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c64","text":"","title":"C.64: \uc774\ub3d9 \uc5f0\uc0b0\uc740 \uc774\ub3d9\uc744 \uc218\ud589\ud574\uc57c \ud558\uba70, \uc6d0\ubcf8 \uac1c\uccb4\ub97c \uc720\ud6a8\ud55c \uc0c1\ud0dc\ub85c \ub0a8\uaca8\ub193\uc544\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_37","text":"\uc77c\ubc18\uc801\uc73c\ub85c \uae30\ub300\ud558\ub294 \uc758\ubbf8\uad6c\uc870(semantics)\uc774\ub2e4. x = std::move(y) \ub97c \uc218\ud589\ud55c \ud6c4\uc5d0\ub294, x \uc758 \uac12\uc740 y \uc5ec\uc57c \ud558\uba70, y \ub294 \uc720\ud6a8\ud55c \uc0c1\ud0dc\uc5ec\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_30","text":"template < typename T > class X { // OK: value semantics public : X (); X ( X && a ) noexcept ; // X\ub97c \uc774\ub3d9\ud55c\ub2e4 void modify (); // X\uc758 \uac12\uc744 \ubcc0\uacbd\ud55c\ub2e4 // ... ~ X () { delete [] p ; } private : T * p ; int sz ; }; X :: X ( X && a ) : p { a . p }, sz { a . sz } // \uac12\uc744 \uac00\uc838\uac04\ub2e4 { a . p = nullptr ; // empty \uc0c1\ud0dc\uac00 \ub41c\ub2e4 a . sz = 0 ; } void use () { X x {}; // ... X y = std :: move ( x ); x = X {}; // OK } // OK: x \ub294 \uc18c\uba78 \uac00\ub2a5\ud558\ub2e4","title":"Example"},{"location":"Class/#note_49","text":"\uc774\uc0c1\uc801\uc73c\ub85c\ub294, \uc774\ub3d9\uc5f0\uc0b0\uc744 \ud574\uc900 \uac1c\uccb4\ub294 \ud574\ub2f9 \ud0c0\uc785\uc758 \uae30\ubcf8 \uac12\uc774\uc5b4\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub294\ud55c \uae30\ubcf8 \uac12\uc744 \uac00\uc9c0\ub3c4\ub85d \ud655\uc2e4\ud788 \ud558\ub77c. \ud558\uc9c0\ub9cc, \ubaa8\ub4e0 \ud0c0\uc785\ub4e4\uc774 \uae30\ubcf8 \uac12\uc744 \uac00\uc9c0\ub294 \uac83\uc740 \uc544\ub2c8\uba70, \ub610 \uc77c\ubd80 \ud0c0\uc785\ub4e4\uc5d0\uc11c\ub294 \uae30\ubcf8 \uac12\uc744 \ub9cc\ub4dc\ub294 \uac83\uc774 \ube44\uc2fc \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud560 \uc218\ub3c4 \uc788\ub2e4. \ud45c\uc900\uc5d0\uc11c \uc694\uad6c\ud558\ub294 \uac83\uc740, \uc774\ub3d9\uc5f0\uc0b0\uc744 \ud574\uc900 \uac1c\uccb4\uac00 \ud30c\uad34\ub420 \uc218 \uc788\ub2e4\ub294 \uac83 \ubfd0\uc774\ub2e4. \uc885\uc885, \uc27d\uace0 \ube44\uc6a9\uc774 \ub4e4\uc9c0 \uc54a\ub294 \ubc29\ubc95\uc744 \uc4f8\uc218\ub3c4 \uc788\ub2e4: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uac1c\uccb4\ub85c\ubd80\ud130 \uc774\ub3d9\uc744 \ubc1b\uc744 \uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \uc774\ub3d9\uc744 \ud574\uc8fc\ub294 \uac1c\uccb4\ub294 \uc720\ud6a8\ud55c \uc0c1\ud0dc\ub85c (\ud544\uc694\ud558\ub2e4\uba74 \uba85\uc2dc\ud558\uc5ec) \ub0a8\uaca8\ub193\uc544\ub77c.","title":"Note"},{"location":"Class/#note_50","text":"\uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc801\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud560 \uc608\uc678\uc801\uc778 \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub294 \ud55c, x = std::move(y); y = z; \ub97c \uc0ac\uc6a9\ud558\ub77c. \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\uad6c\uc870\uc5d0 \ubd80\ud569\ud55c\ub2e4.","title":"Note"},{"location":"Class/#enforcement_35","text":"(\uc790\uc720\uc120\ud0dd) \uc774\ub3d9 \uc5f0\uc0b0\uc5d0\uc11c \uba64\ubc84\ub4e4\uc758 \ub300\uc785\uc744 \ud655\uc778\ud574\ubcf4\ub77c. \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \uc788\ub2e4\uba74, \uadf8 \ub300\uc785 \uc5f0\uc0b0\ub4e4\uc744 \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud55c \ucd08\uae30\ud654\uc640 \ube44\uad50\ud574\ubcf4\ub77c.","title":"Enforcement"},{"location":"Class/#c65","text":"","title":"C.65: \uc774\ub3d9 \uc5f0\uc0b0\uc740 \uc790\uae30 \ub300\uc785\uc5d0 \uc548\uc804\ud558\uac8c \uc791\uc131\ud558\ub77c"},{"location":"Class/#reason_38","text":"\ub9cc\uc57d x = x \uac00 x \uc758 \uac12\uc744 \ubc14\uafbc\ub2e4\uba74, \uc0ac\ub78c\ub4e4\uc740 \ub180\ub784 \uac83\uc774\uace0 \uc548\uc88b\uc740 \uc5d0\ub7ec\ub4e4\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \uc0ac\ub78c\ub4e4\uc740 \uc8fc\ub85c \uc790\uae30 \ub300\uc785\uc744 \uc774\ub3d9\uc5f0\uc0b0\uc73c\ub85c \uc791\uc131\ud558\uc9c0 \uc54a\uc9c0\ub9cc, \uadf8\ub7f4 \uc218\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, std::swap \uc740 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\ub85c \uad6c\ud604\ub418\uc5c8\uace0 \ub9cc\uc57d \ub2f9\uc2e0\uc774 \uc6b0\uc5f0\ud788 a \uc640 b \uac00 \uac19\uc740 \uac1c\uccb4\ub97c \ucc38\uc870\ud558\ub294 \uc0c1\ud669\uc5d0\uc11c swap(a, b) \ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc790\uae30-\uc774\ub3d9\uc758 \uc2e4\ud328\ub294 \uc2ec\uac01\ud558\uac70\ub098 \ucc3e\uae30 \uc5b4\ub824\uc6b4(subtle) \uc5d0\ub7ec\uac00 \ub420 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example_31","text":"class Foo { string s ; int i ; public : Foo & operator = ( Foo && a ); // ... }; Foo & Foo :: operator = ( Foo && a ) noexcept // OK, \ud558\uc9c0\ub9cc \ube44\uc6a9\uc774 \ub4e0\ub2e4 { if ( this == & a ) return * this ; // \uc774 \ub77c\uc778\uc740 \ubb34\uc758\ubbf8\ud558\ub2e4 s = std :: move ( a . s ); i = a . i ; return * this ; } \ubc31\ub9cc\ubc88\uc5d0 \ud55c\ubc88 \ubc1c\uc0dd\ud558\ub294 if (this == &a) return *this; \uc5d0 \ub300\ud55c \ub17c\uc7c1\uc774 \uc788\ub2e4. \uc790\uae30 \ub300\uc785 \ud56d\ubaa9\uc5d0\uc11c\uc758 \ub17c\uc758\ub294 \uc790\uae30 \uc774\ub3d9\uacfc \ub354 \uad00\ub828\uc774 \uc788\ub2e4.","title":"Example"},{"location":"Class/#note_51","text":"if (this == &a) return *this; \uc744 \uc4f0\uc9c0 \uc54a\ub294 \ubc29\ubc95\uc740 \uc54c\ub824\uc9c4 \uac83\uc774 \uc5c6\ub2e4. \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc5d0\uc11c \uac80\uc0ac\ub97c \uc218\ud589\ud558\uace0 \uc815\ud655\ud55c \uacb0\uacfc\ub97c \uc5bb\uc73c\ub77c.(\uac00\ub839, x=x \ub97c \uc218\ud589\ud55c \ub4a4\uc5d0 x \uac00 \ubcc0\ud654\ud558\uc9c0 \uc54a\ub294\ub2e4.)","title":"Note"},{"location":"Class/#note_52","text":"ISO \ud45c\uc900\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\ud14c\uc774\ub108\ub4e4\uc5d0 \ub300\ud574 \uc624\uc9c1 \"\uc720\ud6a8\ud558\uc9c0\ub9cc \uba85\uc2dc\ub418\uc9c0\ub294 \uc54a\uc740\" \uc0c1\ud0dc\ub9cc\uc744 \ubcf4\uc7a5\ud55c\ub2e4. \uc774\uac83\uc740 10\uc5ec\ub144\uac04\uc758 \uc2e4\ud5d8\uc801\uc778 \uc0ac\uc6a9\uc774\ub098 \uc0c1\uc6a9 \ud658\uacbd\uc5d0\uc11c \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\uc558\ub2e4. \ub9cc\uc57d \ubc18\ub840\ub97c \ucc3e\uac8c \ub41c\ub2e4\uba74 \uc791\uc131\uc790\uc5d0\uac8c \uc5f0\ub77d\ud558\ub77c. \uc774 \uaddc\uce59\uc740 \uc8fc\uc758\ub97c \ud544\uc694\ub85c \ud558\uba70 \uc644\uc804\ud788 \uc548\uc804\ud574\uc57c \ud55c\ub2e4.","title":"Note"},{"location":"Class/#example_32","text":"\uc544\ub798\ub294 \uac80\uc0ac \uc5c6\uc774 \ud3ec\uc778\ud130\ub97c \uc774\ub3d9\ud558\ub294 \ubc29\ubc95\uc774\ub2e4(\ub9c8\uce58 \uc774\ub3d9 \ub300\uc785\uc744 \uad6c\ud604\ud55c \ucf54\ub4dc\ub77c\uace0 \uc0c1\uc0c1\ud574\ubcf4\ub77c.): // move from other.ptr to this->ptr T * temp = other . ptr ; other . ptr = nullptr ; delete ptr ; ptr = temp ;","title":"Example"},{"location":"Class/#enforcement_36","text":"(\uc911\uac04) \uc774\ub7ec\ud55c \uc790\uae30 \ub300\uc785\uc758 \uacbd\uc6b0, \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 \ub300\uc785 \ubc1b\ub294 \uac1c\uccb4\uc758 \ud3ec\uc778\ud130 \uba64\ubc84\ub97c delete \ub41c \uc0c1\ud0dc \ub610\ub294 nullptr \ub85c \ub0a8\uaca8\ub193\uc544\uc11c\ub294 \uc548\ub41c\ub2e4. (\uc790\uc720\uc120\ud0dd) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\ud14c\uc774\ub108\ub4e4\uc758 \uc0ac\uc6a9\ubc95\uc744 \ubcf4\ub77c( string \uc744 \ud3ec\ud568\ud55c\ub2e4). \uadf8\ub9ac\uace0 \uc77c\ubc18\uc801\uc778(\uac1c\uccb4 \uc218\uba85\uc5d0 \ubbfc\uac10\ud558\uc9c0 \uc54a\uc740) \uc0ac\uc6a9\uc5d0 \uadf8 \ucee8\ud14c\uc774\ub108\ub4e4\uc774 \uc548\uc804\ud558\ub2e4\uace0 \uc0dd\uac01\ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c66-noexcept","text":"","title":"C.66: \uc774\ub3d9 \uc5f0\uc0b0\uc740 noexcept\ub85c \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Class/#reason_39","text":"\uc608\uc678\ub97c \ub358\uc9c0\ub294 \uc774\ub3d9 \uc5f0\uc0b0\uc740 \ub300\ub2e4\uc218\uc758 \uc0ac\ub78c\ub4e4\uc758 \ud0c0\ub2f9\ud55c \uac00\uc815\uc744 \ubb34\ub108\ub728\ub9b0\ub2e4. \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294 \uc774\ub3d9\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \uc5b8\uc5b4 \ud2b9\uc9d5\ub4e4\uc5d0 \uc758\ud574 \ub354 \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example_33","text":"template < typename T > class Vector { // ... Vector ( Vector && a ) noexcept : elem { a . elem }, sz { a . sz } { a . sz = 0 ; a . elem = nullptr ; } Vector & operator = ( Vector && a ) noexcept { elem = a . elem ; sz = a . sz ; a . sz = 0 ; a . elem = nullptr ; } // ... public : T * elem ; int sz ; }; \uc774 \ubcf5\uc0ac \uc5f0\uc0b0\ub4e4\uc740 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4.","title":"Example"},{"location":"Class/#example-bad_17","text":"template < typename T > class Vector2 { // ... Vector2 ( Vector2 && a ) { * this = a ; } // just use the copy Vector2 & operator = ( Vector2 && a ) { * this = a ; } // just use the copy // ... public : T * elem ; int sz ; }; \uc774 Vector2 \ub294 \ube44 \ud6a8\uc728\uc801\uc77c \ubfd0\ub9cc \uc544\ub2c8\ub77c, \ubca1\ud130\uac00 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \uc694\uad6c\ud558\uae30 \ub54c\ubb38\uc5d0 \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc788\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_37","text":"(\uc26c\uc6c0) \uc774\ub3d9\uc5f0\uc0b0\uc740 noexcept \ub85c \ud45c\uc2dc\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c67","text":"","title":"C.67: \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\ub294 \ubcf5\uc0ac\ub97c \uc81c\ud55c\ud574\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_40","text":"\ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4 \ub294 \ud558\ub098 \uc774\uc0c1\uc758 \uac00\uc0c1 \ud568\uc218\ub97c \uc815\uc758\ud558\uac70\ub098 \uc0c1\uc18d\ubc1b\uc740 \ud074\ub798\uc2a4\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub2e4\ub978 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uacfc \uac19\uc774 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \ud1b5\ud574\uc11c \uc0ac\uc6a9\ub420 \uac83\uc774\ub2e4. \ub9cc\uc57d \uc2e4\uc218\ub85c \uc778\ud574 \ubb35\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\ub41c \ubcf5\uc0ac \uc0dd\uc131\uc790/\ub300\uc785 \uc5f0\uc0b0\uc790\uc640 \ud568\uaed8 \uac12\uc73c\ub85c \uc804\ub2ec\ub41c \uacbd\uc6b0, \ubcf5\uc0ac \uc808\ub2e8(slicing)\uc758 \uc704\ud5d8\uc774 \uc788\ub2e4: \ud558\uc704 \uac1c\uccb4\uc5d0\uc11c \uc0c1\uc704 \uac1c\uccb4\uc5d0 \ud574\ub2f9\ud558\ub294 \ubd80\ubd84\ub9cc \ubcf5\uc0ac\ub418\uace0 \ub2e4\ud615\uc131\uc774 \ub9dd\uac00\uc9c4\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_18","text":"class B { // BAD: polymorphic base class doesn't suppress copying public : virtual char m () { return 'B' ; } // ... nothing about copy operations, so uses default ... }; class D : public B { public : char m () override { return 'D' ; } // ... }; void f ( B & b ) { auto b2 = b ; // oops, slices the object; b2.m() will return 'B' } D d ; f ( d );","title":"Example, bad"},{"location":"Class/#example_34","text":"class B { // GOOD: polymorphic class suppresses copying public : B ( const B & ) = delete ; B & operator = ( const B & ) = delete ; virtual char m () { return 'B' ; } // ... }; class D : public B { public : char m () override { return 'D' ; } // ... }; void f ( B & b ) { auto b2 = b ; // ok, compiler will detect inadvertent copying, and protest } D d ; f ( d );","title":"Example"},{"location":"Class/#note_53","text":"\ub2e4\ud615\uc801\uc778 \uac1c\uccb4\uc5d0 \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uba74, clone() \ud568\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c: C.130 \ub97c \ucc38\uace0\ud558\ub77c.","title":"Note"},{"location":"Class/#exception_7","text":"\uc608\uc678 \uac1c\uccb4\ub4e4\uc744 \uc704\ud55c \ud074\ub798\uc2a4\ub294 \ub2e4\ud615\uc801\uc774\uba74\uc11c \ubcf5\uc0ac \uc0dd\uc131\uc774 \uac00\ub2a5\ud574\uc57c \ud55c\ub2e4.","title":"Exception"},{"location":"Class/#enforcement_38","text":"\ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\uc774\uba74\uc11c \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\uc758 \uac1c\uccb4\uac00 \ubcf5\uc0ac\ub418\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#cother","text":"\uc5b8\uc5b4\uac00 \uc81c\uacf5\ud558\ub294 \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc758 \uad6c\ud604 \uc774\uc678\uc5d0\ub3c4, \ube44\uad50, swap , \uadf8\ub9ac\uace0 hash \ucc98\ub7fc \ubcc4\ub3c4\uc758 \uc815\uc758\uac00 \ud544\uc694\ud560 \uc815\ub3c4\ub85c \uae30\ucd08\uc801\uc778 \uba87\uba87 \uc5f0\uc0b0\ub4e4\uc774 \uc788\ub2e4:","title":"C.other: \ub2e4\ub978 \uae30\ubcf8 \uc5f0\uc0b0 \uaddc\uce59\ub4e4"},{"location":"Class/#c80-semantic-default","text":"","title":"C.80: \uae30\ubcf8 \uc758\ubbf8\uad6c\uc870(semantic)\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub824\uba74 =default\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_41","text":"\ucef4\ud30c\uc77c\ub7ec\uac00 \ub354 \uc815\ud655\ud55c \uae30\ubcf8 \uc758\ubbf8\uad6c\uc870\ub97c \uc54c\uace0 \uc788\uc73c\uba70, \uc774\ubcf4\ub2e4 \ub098\uc740 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc5c6\ub2e4.","title":"Reason"},{"location":"Class/#example_35","text":"class Tracer { string message ; public : Tracer ( const string & m ) : message { m } { cerr << \"entering \" << message << '\\n' ; } ~ Tracer () { cerr << \"exiting \" << message << '\\n' ; } Tracer ( const Tracer & ) = default ; Tracer & operator = ( const Tracer & ) = default ; Tracer ( Tracer && ) = default ; Tracer & operator = ( Tracer && ) = default ; }; \uc18c\uba78\uc790\ub97c \uc815\uc758\ud588\uae30 \ub54c\ubb38\uc5d0, \uc6b0\ub9ac\ub294 \ubcf5\uc0ac, \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\uc744 \uc815\uc758\ud574\uc57c\ub9cc \ud55c\ub2e4. \uc774\ub97c \uc704\ud574\uc120 =default \uac00 \uac00\uc7a5 \ucd5c\uc120\uc774\uace0, \uac04\ub2e8\ud55c \ubc29\ubc95\uc774\ub2e4.","title":"Example"},{"location":"Class/#example-bad_19","text":"class Tracer2 { string message ; public : Tracer2 ( const string & m ) : message { m } { cerr << \"entering \" << message << '\\n' ; } ~ Tracer2 () { cerr << \"exiting \" << message << '\\n' ; } Tracer2 ( const Tracer2 & a ) : message { a . message } {} Tracer2 & operator = ( const Tracer2 & a ) { message = a . message ; return * this ; } Tracer2 ( Tracer2 && a ) : message { a . message } {} Tracer2 & operator = ( Tracer2 && a ) { message = a . message ; return * this ; } }; \ubcf5\uc0ac\uc640 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4\uc758 \ud568\uc218\ub4e4\uc744 \uc77c\uc77c\uc774 \uc791\uc131\ud558\ub294 \uac83\uc740 \ubc88\uac70\ub86d\uace0, \uc9c0\ub8e8\ud558\uba70, \uc5d0\ub7ec\uc5d0 \ucde8\uc57d\ud558\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774 \uc791\uc5c5\uc744 \ub354 \uc798 \ud560\uc218\uc788\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_39","text":"(\uc911\uac04) \ud2b9\ubcc4\ud55c \uc5f0\uc0b0\ub4e4\uc740 \uc911\ubcf5\uc744 \ud53c\ud558\uae30 \uc704\ud574 \ucef4\ud30c\uc77c\ub7ec\uac00 \ub9cc\ub4e0 \ud568\uc218\ub4e4\uacfc \uac19\uc740 \uc811\uadfc\uc131, \uc758\ubbf8\uad6c\uc870\ub97c \uac00\uc838\uc11c\ub294 \uc548\ub41c\ub2e4","title":"Enforcement"},{"location":"Class/#c81-delete","text":"","title":"C.81: \uae30\ubcf8 \ub3d9\uc791\uc744 (\ub300\uc548\uc744 \uc6d0\ud558\uc9c0 \uc54a\uace0) \uae08\uc9c0\ud558\uace0 \uc2f6\ub2e4\uba74 =delete\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_42","text":"\ub4dc\ubb3c\uac8c \uae30\ubcf8 \uc5f0\uc0b0\ub4e4\uc774 \ubc14\ub78c\uc9c1\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0\ub3c4 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example_36","text":"class Immortal { public : ~ Immortal () = delete ; // \uc18c\uba78\uc774 \uae08\uc9c0\ub418\uc5c8\ub2e4 // ... }; void use () { Immortal ugh ; // error: ugh\uc740 \uc18c\uba78\ub420 \uc218 \uc5c6\ub2e4 Immortal * p = new Immortal {}; delete p ; // error: *p\ub97c \uc18c\uba78\uc2dc\ud0ac \uc218 \uc5c6\ub2e4 }","title":"Example"},{"location":"Class/#example_37","text":"unique_ptr \ub294 \uc774\ub3d9 \uac00\ub2a5\ud558\uc9c0\ub9cc, \ubcf5\uc0ac\ub294 \ubd88\uac00\ub2a5\ud558\ub2e4. \uc774 \ud074\ub798\uc2a4\uc758 \ubcf5\uc0ac\ub97c \ub9c9\uae30 \uc704\ud574, \ubcf5\uc0ac \uc5f0\uc0b0\ub4e4\uc740 \uc0ad\uc81c\ub418\uc5c8\ub2e4. l-value\ub85c\ubd80\ud130 \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \ub9c9\uae30 \uc704\ud574\uc11c\ub294 =delete \uac00 \ud544\uc694\ud558\ub2e4: template < class T , class D = default_delete < T >> class unique_ptr { public : // ... constexpr unique_ptr () noexcept ; explicit unique_ptr ( pointer p ) noexcept ; // ... unique_ptr ( unique_ptr && u ) noexcept ; // move constructor // ... unique_ptr ( const unique_ptr & ) = delete ; // disable copy from lvalue // ... }; unique_ptr < int > make (); // \"\ubb34\uc5b8\uac00\" \ub9cc\ub4e0 \ub4a4\uc5d0 \uc774\ub3d9\uc73c\ub85c \ubc18\ud658\ud55c\ub2e4 void f () { unique_ptr < int > pi {}; auto pi2 { pi }; // error: l-value\ub85c\ubd80\ud130 \uc0dd\uc131\ud560 \uc218 \uc5c6\ub2e4. auto pi3 { make ()}; // OK, \uc774\ub3d9 \uc0dd\uc131: make()\uc758 \uacb0\uacfc\ub294 r-value\uc774\ub2e4 } delete\ub41c \ud568\uc218\ub4e4\uc774 public\uc774\ub77c\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\ub77c","title":"Example"},{"location":"Class/#enforcement_40","text":"\uae30\ubcf8 \uc5f0\uc0b0\uc744 \uc81c\uac70\ud558\ub294 \uac83\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\uc5d0 \ubd80\ud569\ud558\ub294 \uadfc\uac70\uac00 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uc815\ub9d0 \uc774\uc720\uac00 \uc788\ub294\uc9c0 \uc758\uc2ec\ud558\ub77c. \ud558\uc9c0\ub9cc \uc0ac\ub78c\uc774 \ubcf4\uae30\uc5d0 \ubb38\ub9e5\uc801\uc73c\ub85c \ud0c0\ub2f9\ud558\ub2e4\uace0 \ub2e8\uc5b8(assert)\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c82","text":"","title":"C.82: \uc0dd\uc131\uc790 \ub610\ub294 \uc18c\uba78\uc790\uc5d0\uc11c \uac00\uc0c1 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Class/#reason_43","text":"\ud638\ucd9c\ub41c \ud568\uc218\ub294 \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0\uc11c \uc624\ubc84\ub77c\uc774\ub4dc \ud558\ub294 \ud568\uc218\uac00 \uc544\ub2c8\ub77c, \uc0dd\uc131\ub41c \uac1c\uccb4\uc758 \ud568\uc218\uc774\ub2e4. \uc774\ub7ec\ud55c \ub3d9\uc791\uc740 \ud63c\ub780\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. \ub098\uc058\uac8c\ub294, \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790 \ub0b4\ubd80\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uad6c\ud604\ub418\uc9c0 \uc54a\uc740 \uc21c\uc218 \uac00\uc0c1 \ud568\uc218\uc5d0 \ub300\ud55c \uc9c1\uc811 \ub610\ub294 \uac04\uc811\ud638\ucd9c\uc774 \ube44\uc815\uc758\ub41c \ub3d9\uc791\uc744 \uc77c\uc73c\ud0a8\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_20","text":"class Base { public : virtual void f () = 0 ; // \uad6c\ud604\ub418\uc9c0 \uc54a\uc558\ub2e4 virtual void g (); // \uae30\ubcf8 \ubc84\uc804\uc744 \uad6c\ud604\ud558\uc600\ub2e4 virtual void h (); // \uae30\ubcf8 \ubc84\uc804\uc744 \uad6c\ud604\ud558\uc600\ub2e4 }; class Derived : public Base { public : void g () override ; // \ud30c\uc0dd \uad6c\ud604\uc744 \uc81c\uacf5\ud55c\ub2e4 void h () final ; // \ud30c\uc0dd \uad6c\ud604\uc744 \uc81c\uacf5\ud55c\ub2e4 Derived () { // BAD: \uad6c\ud604\ub418\uc9c0 \uc54a\uc740 \uac00\uc0c1 \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4 f (); // BAD: will call Derived::g, not dispatch further virtually g (); // GOOD: \uc811\uadfc \uac00\ub2a5\ud55c(visible) \ud568\uc218\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ud638\ucd9c\ud55c\ub2e4 Derived :: g (); // ok, \ubb38\uc81c \uc5c6\ub2e4. h\ud568\uc218\ub294 final \uad6c\ud604\uccb4\ub97c \uc758\ubbf8\ud55c\ub2e4 h (); } }; \ud2b9\uc815\ud558\uac8c \uba85\uc2dc\uc801\uc73c\ub85c \ud55c\uc815\ub41c \ud568\uc218\ub294 virtual \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4 \uac00\uc0c1\ud638\ucd9c\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc74c\uc744 \uae30\uc5b5\ud558\ub77c.","title":"Example, bad"},{"location":"Class/#see-also_7","text":"\uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ub3d9\uc791\uc758 \uc704\ud5d8\uc774 \uc5c6\uc774 \ud30c\uc0dd \ud074\ub798\uc2a4\uc758 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \ud6a8\uacfc\ub97c \uc5bb\uae30 \uc704\ud574\uc11c\ub294 \ud329\ud1a0\ub9ac \ud568\uc218 \ud56d\ubaa9\uc744 \ucc38\uace0\ud558\ub77c.","title":"See also"},{"location":"Class/#note_54","text":"\uac00\uc0c1 \ud568\uc218\ub97c \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0\uc11c \ud638\ucd9c\ud558\ub294 \ud589\uc704\uac00 \ubc18\ub4dc\uc2dc \uc798\ubabb\ub41c \uac83\uc740 \uc544\ub2c8\ub2e4. \ubcf4\ud1b5\uc758 \uacbd\uc6b0 \uc774\ub7f0 \ud589\uc704\ub294 \ud0c0\uc785 \uc548\uc804\ud55c \uc758\ubbf8\uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. \ud558\uc9c0\ub9cc, \uacbd\ud5d8\uc801\uc73c\ub85c \uadf8\ub7f0 \uc0ac\uc6a9\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\ub294 \uac70\uc758 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc73c\uba70, \uc720\uc9c0\ubcf4\uc218 \uac1c\ubc1c\uc790\ub97c \ud63c\ub780\uc2a4\ub7fd\uac8c \ud55c\ub2e4. \ucd08\uc2ec\uc790\uac00 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc2e4\uc218\ud558\ub294 \uc6d0\uc778\uc774 \ub420 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Class/#enforcement_41","text":"\uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0\uc11c\uc758 \uac00\uc0c1 \ud568\uc218 \ud638\ucd9c\uc744 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c83-noexcept-swap","text":"","title":"C.83: \uac12 \ud0c0\uc785\ub4e4\uc5d0\ub294, noexcept swap\ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c"},{"location":"Class/#reason_44","text":"swap \ud568\uc218\ub294 \uac1c\uccb4 \ub300\uc785\uc744 \uad6c\ud604\ud560 \ub54c \uc6d0\ud65c\ud558\uac8c \uac1c\uccb4\ub97c \uc774\ub3d9\ud558\ub294 \uac83\uc5d0\uc11c, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\ub294 \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \uac83\uae4c\uc9c0 \uba87\uba87 \ud568\uc218\ub4e4(idioms)\uc744 \uad6c\ud604\ud558\ub294\ub370 \uc720\uc6a9\ud558\ub2e4. swap\ud568\uc218\uc744 \uc774\uc6a9\ud574\uc11c \ubcf5\uc0ac \ub300\uc785\uc744 \uad6c\ud604\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c. \uc18c\uba78\uc790, \uc790\uc6d0 \ud574\uc81c, \uadf8\ub9ac\uace0 swap\uc740 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 .","title":"Reason"},{"location":"Class/#example-good_3","text":"class Foo { // ... public : void swap ( Foo & rhs ) noexcept { m1 . swap ( rhs . m1 ); std :: swap ( m2 , rhs . m2 ); } private : Bar m1 ; int m2 ; }; \ud638\ucd9c\uc790\ub4e4\uc758 \ud3b8\uc758\ub97c \uc704\ud574\uc11c \uac19\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ube44-\uba64\ubc84 swap \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub77c. void swap ( Foo & a , Foo & b ) { a . swap ( b ); }","title":"Example, good"},{"location":"Class/#enforcement_42","text":"(\uc26c\uc6c0) \uac00\uc0c1 \ud568\uc218\ub4e4\uc774 \uc5c6\ub294 \ud074\ub798\uc2a4\ub294 swap \uba64\ubc84 \ud568\uc218 \uc120\uc5b8\uc774 \uc788\uc5b4\uc57c \ud55c\ub2e4 (\uc26c\uc6c0) \ud074\ub798\uc2a4\uac00 swap \uba64\ubc84\ud568\uc218\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uadf8 \ud568\uc218\ub294 noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c84-swap","text":"","title":"C.84: swap \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4"},{"location":"Class/#reason_45","text":"swap \uc5f0\uc0b0\uc740 \ub9ce\uc740 \uacbd\uc6b0 \uc2e4\ud328\ud558\uc9c0 \uc54a\uc744 \uac83\uc73c\ub85c \uc804\uc81c\ud558\uace0 \uc0ac\uc6a9\ub41c\ub2e4. \ub610\ud55c \uc2e4\ud328 \uac00\ub2a5\uc131\uc774 \uc788\ub294 swap \uc5f0\uc0b0\uc73c\ub85c\ub294 \uc815\ud655\ud558\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \ud504\ub85c\uadf8\ub7a8\uc774 \uc791\uc131\ub418\uae30 \uc5b4\ub835\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucee8\ud14c\uc774\ub108\ub4e4\uacfc \uc54c\uace0\ub9ac\uc998\ub4e4\uc740 swap\uc5f0\uc0b0\uc758 \ud0c0\uc785\uc774 \uc2e4\ud328\ud558\uba74 \uc815\ud655\ud558\uac8c \ub3d9\uc791\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_21","text":"void swap ( My_vector & x , My_vector & y ) { auto tmp = x ; // copy elements x = y ; y = tmp ; } \uc774 \uacbd\uc6b0\ub294 \ub290\ub9b4 \ubfd0\ub9cc \uc544\ub2c8\ub77c, tmp \ub0b4\uc758 \uc6d0\uc18c\ub4e4\uc5d0 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc774 \ubc1c\uc0dd\ud558\uba74, \uc774 swap \uc5f0\uc0b0\uc740 \uc608\uc678\ub97c \ub358\uc9c0\uace0 \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 STL \uc54c\uace0\ub9ac\uc998\ub4e4\uc774 \uc2e4\ud328\ud560 \uc218 \uc788\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_43","text":"(\uc26c\uc6c0) \ud074\ub798\uc2a4\uc5d0 swap \uba64\ubc84 \ud568\uc218\uac00 \uc788\uc73c\uba74, noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c85-swap-noexcept","text":"","title":"C.85: swap \uc5f0\uc0b0\uc740 noexcept\ub85c \uc791\uc131\ud558\ub77c"},{"location":"Class/#reason_46","text":"swap \uc5f0\uc0b0\uc740 \uc2e4\ud328\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc791\uc131\ud558\ub77c . swap \uc5f0\uc0b0\uc774 \uc608\uc678\ub97c \ub358\uc9c0\uba74\uc11c \uc885\ub8cc\ud558\ub824 \ud55c\ub2e4\uba74, \uadf8\uac83\uc740 \uc798\ubabb\ub41c \uc124\uacc4 \uc624\ub958\uc774\uba70 \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\ud558\ub294\uac8c \ub0ab\ub2e4.","title":"Reason"},{"location":"Class/#enforcement_44","text":"(\uc26c\uc6c0) \ud074\ub798\uc2a4\uc5d0 swap \uba64\ubc84 \ud568\uc218\uac00 \uc788\uc73c\uba74, noexcept \ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c86-noexcept","text":"","title":"C.86: ==\uc5f0\uc0b0\uc790\ub294 \ud53c\uc5f0\uc0b0\uc790 \ud0c0\uc785\ub4e4\uc5d0 \ub300\uce6d\uc801\uc774\uace0, noexcept\ub85c \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Class/#reason_47","text":"\ud53c\uc5f0\uc0b0\uc790\ub4e4\uc5d0 \ube44\ub300\uce6d\uc801\uc778 \ucc98\ub9ac\ub294 \uae30\ub300\uc5d0 \ubd80\ud569\ud558\uc9c0 \uc54a\uace0, \ud615\ubcc0\ud658\uc774 \uac00\ub2a5\ud55c \uacbd\uc6b0 \uc5d0\ub7ec\ub97c \uc720\ubc1c\ud560 \uc218 \uc788\ub2e4. == \ub294 \uae30\ubcf8\uc801\uc778 \uc5f0\uc0b0\uc774\uba70 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc774 \uc774 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud560 \ub54c \uc5f0\uc0b0 \uc2e4\ud328\uc5d0 \ub300\ud55c \uace0\ubbfc\uc774 \uc5c6\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_38","text":"struct X { string name ; int number ; }; bool operator == ( const X & a , const X & b ) noexcept { return a . name == b . name && a . number == b . number ; }","title":"Example"},{"location":"Class/#example-bad_22","text":"class B { string name ; int number ; bool operator == ( const B & a ) const { return name == a . name && number == a . number ; } // ... }; B \uc758 \ube44\uad50 \uc5f0\uc0b0\uc740 \ub450\ubc88\uc9f8 \ud53c\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574 \ud615\ubcc0\ud658\uc744 \uc6a9\uc778\ud558\uc9c0\ub9cc, \uccab\ubc88\uc9f8 \ud53c\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c\ub294 \uadf8\ub807\uc9c0 \uc54a\ub2e4.","title":"Example, bad"},{"location":"Class/#note_55","text":"\ub9cc\uc57d \ud074\ub798\uc2a4\uac00 double \ud0c0\uc785\uc758 NaN \ucc98\ub7fc \uc2e4\ud328 \uc0c1\ud0dc\ub97c \uac00\uc9c4\ub2e4\uba74, \uc2e4\ud328 \uc0c1\ud0dc\uc640\uc758 \ube44\uad50\uc5d0\uc11c \uc608\uc678\ub97c \ub358\uc9c0\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \uc801\ud569\ud560 \uc218\ub3c4 \uc788\ub2e4. \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294 \uc2e4\ud328 \uc0c1\ud0dc\ub07c\ub9ac\uc758 \ube44\uad50\ub294 \ub3d9\ub4f1\ud558\uac8c \ubcf4\uace0, \uc801\ud569\ud55c \uc0c1\ud0dc\uc640 \uc2e4\ud328 \uc0c1\ud0dc\uc758 \ube44\uad50\uc5d0\uc11c\ub294 \uac70\uc9d3\uc73c\ub85c \ud310\uc815\ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Class/#note_56","text":"\uc774 \uaddc\uce59\uc740 \ubaa8\ub4e0 \uc77c\ubc18 \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4 : != , < , <= , > , >= .","title":"Note"},{"location":"Class/#enforcement_45","text":"\uc778\uc790\uc758 \ud0c0\uc785\uc774 \ub2e4\ub978 operator==() \ub97c \uc9c0\uc801\ud558\ub77c. \ub2e4\ub978 \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub2e4 : != , < , <= , > , >= . \uba64\ubc84\uc778 operator==() \ud568\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c. \ub2e4\ub978 \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub2e4 : != , < , <= , > , >= .","title":"Enforcement"},{"location":"Class/#c87","text":"","title":"C.87: \uae30\ubcf8 \ud074\ub798\uc2a4\uc5d0 \uc788\ub294 ==\uc5d0 \uc8fc\uc758\ud558\ub77c"},{"location":"Class/#reason_48","text":"\uacc4\uce35 \uad6c\uc870\uc5d0\uc11c \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc5b4\ub835\uace0 \uc720\uc6a9\ud55c == \ub97c \uc791\uc131\ud558\ub294 \uac83\uc740 \uc5b4\ub824\uc6b4 \uc77c\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_23","text":"class B { string name ; int number ; virtual bool operator == ( const B & a ) const { return name == a . name && number == a . number ; } // ... }; B \uc758 \ube44\uad50 \uc5f0\uc0b0\uc740 \ub450\ubc88\uc9f8 \ud53c\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c \ud0c0\uc785 \ubcc0\ud658\uc744 \ud5c8\uc6a9\ud558\uc9c0\ub9cc, \uccab\ubc88\uc9f8 \ud53c\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c\ub294 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. class D : B { char character ; virtual bool operator == ( const D & a ) const { return name == a . name && number == a . number && character == a . character ; } // ... }; B b = ... D d = ... b == d ; // compares name and number, ignores d's character d == b ; // error: no == defined D d2 ; d == d2 ; // compares name, number, and character B & b2 = d2 ; b2 == d ; // compares name and number, ignores d2's and d's character \ubb3c\ub860 \uacc4\uce35 \uad6c\uc870 \uc548\uc5d0\uc11c == \uac00 \ub3d9\uc791\ud558\ub3c4\ub85d \ud558\ub294 \ubc29\ubc95\ub4e4\uc774 \uc788\uc9c0\ub9cc, \ub2e8\uc21c\ud55c(naive) \ubc29\ubc95\ub4e4\uc740 \uace0\ub824\ud558\uc9c0 \ub9d0\uc544\ub77c.","title":"Example, bad"},{"location":"Class/#note_57","text":"\uc774 \uaddc\uce59\uc740 \ubaa8\ub4e0 \uc77c\ubc18 \ube44\uad50\uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc77c\ud558\ub2e4 : != , < , <= , > , >=","title":"Note"},{"location":"Class/#enforcement_46","text":"\uac00\uc0c1 \ud568\uc218\uc778 operator==() \ub97c \uc9c0\uc801\ud558\ub77c. \ub2e4\ub978 \ube44\uad50 \uc5f0\uc0b0\uc790\ub4e4\ub3c4 \ub3d9\uc77c\ud558\ub2e4: != , < , <= , > , >= .","title":"Enforcement"},{"location":"Class/#c89-hash-noexcept","text":"","title":"C.89: hash\ub294 noexcept\ub85c \uc791\uc131\ud558\ub77c"},{"location":"Class/#reason_49","text":"\ud574\uc2dc \ucee8\ud14c\uc774\ub108\ub4e4\uc758 \uc0ac\uc6a9\uc790\ub4e4\uc740 hash\ub97c \uac04\uc811\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uba70, \ud574\uc2dc\uac12\uc744 \uc704\ud55c \ub2e8\uc21c\ud55c \uc811\uadfc\uc774 throw\ud558\uc9c0 \uc54a\uc744 \uac83\uc73c\ub85c \uae30\ub300\ud55c\ub2e4. \uc774\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc694\uad6c\uc0ac\ud56d\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_24","text":"template <> struct hash < My_type > { // \uc815\ub9d0\uc815\ub9d0 \uc548\uc88b\uc740 \ud574\uc2dc \ud2b9\uc218\ud654 using result_type = size_t ; using argument_type = My_type ; size_t operator () ( const My_type & x ) const { size_t xs = x . s . size (); if ( xs < 4 ) throw Bad_My_type {}; // \"\uc774\ub7f0 \uc774\ub2e8\uc790 \uac19\uc73c\ub2c8!\" return hash < size_t > ()( x . s . size ()) ^ trim ( x . s ); } }; int main () { unordered_map < My_type , int > m ; My_type mt { \"asdfg\" }; m [ mt ] = 7 ; cout << m [ My_type { \"asdfg\" }] << '\\n' ; } hash \ud2b9\uc218\ud654\ub97c \uc815\uc758\ud560 \ub54c\ub294, \uac04\ub2e8\ud558\uac8c ^ (xor)\uc640 \ud568\uaed8 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 hash \ud2b9\uc218\ud654\uc640 \ud1b5\ud569\ub418\ub3c4\ub85d \ud558\ub77c. \ube44 \uc804\ubb38\uac00\ub4e4\uc744 \uc704\ud574\uc120 \uc774 \ubc29\ubc95\uc774 \ub354 \uc801\ud569\ud558\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_47","text":"\uc608\uc678\ub97c \ub358\uc9c0\ub294 hash \ub4e4\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c90-memset-memcpy","text":"","title":"C.90: memset \ub610\ub294 memcpy\uac00 \uc544\ub2cc, \uc0dd\uc131\uc790\uc640 \ud560\ub2f9 \uc5f0\uc0b0\uc790\uc5d0 \uc758\uc874\ud558\ub77c"},{"location":"Class/#reason_50","text":"\ud0c0\uc785\uc758 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud55c \ud45c\uc900 C++ \uba54\ucee4\ub2c8\uc998\uc740 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc774\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \uba85\uc2dc\ub41c \uac83 \ucc98\ub7fc C.41 : \uc0dd\uc131\uc790\ub294 \uc644\uc804\ud788 \ucd08\uae30\ud654\ub41c \uac1c\uccb4\ub97c \uc0dd\uc131\ud574\uc57c \ud55c\ub2e4. 'memcpy'\uc640 \uac19\uc740 \ucd94\uac00\uc801\uc778 \ucd08\uae30\ud654 \ubc29\uc548\uc740 \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\ub294\ub2e4. \ud0c0\uc785\uc740 \ud074\ub798\uc2a4\uc758 \ubcf5\uc0ac\ubcf8\uc744 \uc801\uc808\ud558\uac8c \ub9cc\ub4dc\ub294 \ubcf5\uc0ac \uc0dd\uc131\uc790\uc640(\ub610\ub294) \ubcf5\uc0ac \ud560\ub2f9 \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud558\uc5ec, \ud0c0\uc785\uc758 \ubd88\ubcc0 \uc870\uac74\uc744 \uc720\uc9c0\ud574\uc57c\ud55c\ub2e4. memcpy\ub97c \ud1b5\ud574 \ubcf5\uc0ac \ubbf8\uc815 \ud0c0\uc785(non-trivially copyable type)\uc744 \ubcf5\uc0ac\ud560 \ub54c, \ubbf8\uc815\uc758 \ub3d9\uc791\uc73c\ub85c \uc774\uc5b4\uc9c4\ub2e4. \uc774\ub85c \uc778\ud574 \ubcf5\uc0ac \uc808\ub2e8 \ub610\ub294 \ub370\uc774\ud130 \uc190\uc0c1\uc774 \uc790\uc8fc \ubc1c\uc0dd\ud55c\ub2e4","title":"Reason"},{"location":"Class/#example-good_4","text":"struct base { virtual void update() = 0; std::shared_ptr<int> sp; }; struct derived : public base { void update() override {} };","title":"Example, good"},{"location":"Class/#example-bad_25","text":"void init(derived& a) { memset(&a, 0, sizeof(derived)); } \ubd88\uc548\uc804\ud55c \ud0c0\uc785\uc774\uba70, \uac00\uc0c1 \ud568\uc218 \ud14c\uc774\ube14\uc774 \uc190\uc0c1(overwrite)\ub41c\ub2e4.","title":"Example, bad"},{"location":"Class/#example-bad_26","text":"void copy(derived& a, derived& b) { memcpy(&a, &b, sizeof(derived)); } \uc774 \ub610\ud55c \ubd88\uc548\uc804\ud55c \ud0c0\uc785\uc774\uba70, \uac00\uc0c1 \ud568\uc218 \ud14c\uc774\ube14\uc774 \uc190\uc0c1(overwrite)\ub41c\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_48","text":"'memset' \ub610\ub294 'memcpy'\uc5d0 \ubcf5\uc0ac \ubbf8\uc815 \ud0c0\uc785(non-trivially copyable type)\uc744 \uc804\ub2ec\ud560 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#ccon","text":"\ucee8\ud14c\uc774\ub108\ub294 \uc784\uc758 \ud0c0\uc785\uc758 \uc5f0\uc18d\ub41c \uac1c\uccb4\ub4e4\uc744 \uac00\uc9c4 \uac1c\uccb4\ub97c \uc758\ubbf8\ud55c\ub2e4; std::vector \ub294 \ub300\ud45c\uc801\uc778 \ucee8\ud14c\uc774\ub108 \ud0c0\uc785\uc774\ub2e4. \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc740 \uc790\uc6d0\uc744 \uc18c\uc720\ud558\ub294 \ud074\ub798\uc2a4\ub97c \uc758\ubbf8\ud55c\ub2e4; std::vector \ub294 \ubcf4\ud1b5 \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc5d0 \ud574\ub2f9\ud55c\ub2e4; \uc774 \uacbd\uc6b0 \uc790\uc6d0\uc740 \uc5f0\uc18d\ub41c \uc6d0\uc18c\ub4e4\uc774\ub2e4. \ucee8\ud14c\uc774\ub108 \uaddc\uce59 \uc694\uc57d: C.100: \ucee8\ud14c\uc774\ub108\ub97c \uc815\uc758\ud560\ub54c\ub294 STL\uc744 \ub530\ub974\ub77c C.101: \uac12 \uc758\ubbf8\uad6c\uc870(value semantics)\ub97c \uc81c\uacf5\ud558\ub77c C.102: \uc774\ub3d9 \uc5f0\uc0b0\uc744 \uc81c\uacf5\ud558\ub77c C.103: \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\uc790\ub97c \uc9c0\uc6d0\ud558\ub77c C.104: \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ube48 \ucee8\ud14c\uc774\ub108\ub97c \ub9cc\ub4e4\ub3c4\ub85d \ud558\ub77c C.109: \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc774 \ud3ec\uc778\ud130 \uc758\ubbf8\uad6c\uc870\ub97c \ub530\ub97c \uacbd\uc6b0\uc5d0\ub294, * \uacfc -> \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud558\ub77c","title":"C.con: \ucee8\ud14c\uc774\ub108\uc640 \ub9ac\uc18c\uc2a4 \ud578\ub4e4"},{"location":"Class/#see-also_8","text":"R: \uc790\uc6d0 \uad00\ub9ac","title":"See also"},{"location":"Class/#c100-stl","text":"","title":"C.100: \ucee8\ud14c\uc774\ub108\ub97c \uc815\uc758\ud560\ub54c\ub294 STL\uc744 \ub530\ub974\ub77c"},{"location":"Class/#reason_51","text":"C++ \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc5d0\uac8c STL \ucee8\ud14c\uc774\ub108\ub294 \uce5c\uc219\ud558\uace0 \uae30\ubcf8\uc801\uc73c\ub85c \uc801\uc808\ud55c(fundamentally sound) \uc124\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#note_58","text":"\ub2e4\ub978 fundamentally sound\ud55c \uc124\uacc4 \ubc29\uc2dd\ub4e4\uc774 \uc788\uace0 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744 \uc774\uc720\uac00 \uc788\uae30\ub3c4 \ud558\uc9c0\ub9cc, \ub2e4\ub978 \ubc29\uc2dd\uc744 \ud0dd\ud574\uc57c \ud560 \ud655\uc2e4\ud55c \uc774\uc720\uac00 \uc5c6\ub2e4\uba74, \uad6c\ud604\uc790\uc640 \uc0ac\uc6a9\uc790 \ubaa8\ub450 \ud45c\uc900\uc744 \ub530\ub974\ub294 \uac83\uc774 \ub2e8\uc21c\ud558\uace0 \uc26c\uc6b4 \ubc29\ubc95\uc774\ub2e4. \ud2b9\ud788, std::vector \uc640 std::map \uc740 \ub2e8\uc21c\ud558\uace0 \uc720\uc6a9\ud55c \ubaa8\ub378\uc744 \uc81c\uacf5\ud55c\ub2e4","title":"Note"},{"location":"Class/#example_39","text":"// simplified (e.g., no allocators): template < typename T > class Sorted_vector { using value_type = T ; // ... iterator types ... Sorted_vector () = default ; Sorted_vector ( initializer_list < T > ); // initializer-list constructor: sort and store Sorted_vector ( const Sorted_vector & ) = default ; Sorted_vector ( Sorted_vector && ) = default ; Sorted_vector & operator = ( const Sorted_vector & ) = default ; // copy assignment Sorted_vector & operator = ( Sorted_vector && ) = default ; // move assignment ~ Sorted_vector () = default ; Sorted_vector ( const std :: vector < T >& v ); // store and sort Sorted_vector ( std :: vector < T >&& v ); // sort and \"steal representation\" const T & operator []( int i ) const { return rep [ i ]; } // no non-const direct access to preserve order void push_back ( const T & ); // insert in the right place (not necessarily at back) void push_back ( T && ); // insert in the right place (not necessarily at back) // ... cbegin(), cend() ... private : std :: vector < T > rep ; // use a std::vector to hold elements }; template < typename T > bool operator == ( const T & ); template < typename T > bool operator != ( const T & ); // ... \uc704 \uc608\uc2dc\uc5d0\uc120, \ud45c\uc900 \ud15c\ud50c\ub9bf \ub77c\uc774\ube0c\ub7ec\ub9ac \uc2a4\ud0c0\uc77c\uc744 \ubd88\uc644\uc804\ud558\uac8c \ub530\ub978\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 \ud754\ud788 \ubcfc \uc218 \uc788\ub2e4. \ucd5c\uc18c\ud55c\uc758 \uae30\ub2a5\ub9cc \uc81c\uacf5\ud558\ub294 \uac83\uc740 \ud2b9\ubcc4\ud788 \uad6c\ud604\ub41c \ucee8\ud14c\uc774\ub108\uc5d0\uac8c\ub294 \ud0c0\ub2f9\ud558\ub2e4. \ud575\uc2ec\uc740 \uadf8 \ucee8\ud14c\uc774\ub108\uc5d0\uac8c \ub9de\uac8c \uc804\ud1b5\uc801\uc778 \uc0dd\uc131\uc790, \ub300\uc785, \uc18c\uba78, \uadf8\ub9ac\uace0 \ubc18\ubcf5\uc790\ub97c \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\uad6c\uc870\ub97c \uc9c0\uc6d0\ud558\ub3c4\ub85d \uc815\uc758\ud558\ub294 \uac83\uc774\ub2e4. \uc774\ub97c \ubc14\ud0d5\uc73c\ub85c, \uadf8 \ucee8\ud14c\uc774\ub108\ub294 \ud544\uc694\ud55c \ub9cc\ud07c \ud655\uc7a5\ub420 \uc218 \uc788\ub2e4. \uc774 \uc608\uc2dc\uc5d0\uc11c\ub294 std::vector \ub97c \uc0ac\uc6a9\ud558\ub294 \ud2b9\ubcc4\ud55c \uc0dd\uc131\uc790\uac00 \ucd94\uac00\ub418\uc5c8\ub2e4.","title":"Example"},{"location":"Class/#enforcement_49","text":"???","title":"Enforcement"},{"location":"Class/#c101-value-semantics","text":"","title":"C.101: \uac12 \uc758\ubbf8\uad6c\uc870(value semantics)\ub97c \uc81c\uacf5\ud558\ub77c"},{"location":"Class/#reason_52","text":"\uc815\uaddc \ud0c0\uc785\uc758 \uac1c\uccb4\ub4e4\uc740 \uace0\ubbfc\uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc0ac\uc6a9\uc790\ub4e4\uc740 \uac12 \uc758\ubbf8\uad6c\uc870\uc5d0 \uc775\uc219\ud558\ub2e4.","title":"Reason"},{"location":"Class/#note_59","text":"\ud544\uc694\ud558\ub2e4\uba74, \ucee8\ud14c\uc774\ub108\ub97c Regular (Concept \uc911 \ud558\ub098)\ud558\uac8c \ub9cc\ub4e4\uc5b4\ub77c. \ud2b9\ud788, \ubcf5\uc0ac\ub41c \uac1c\uccb4\uc640 \uc6d0\ub798 \uac1c\uccb4\ub97c \ube44\uad50\ud588\uc744 \ub54c \uac19\ub3c4\ub85d \ud558\ub77c.","title":"Note"},{"location":"Class/#example_40","text":"void f ( const Sorted_vector < string >& v ) { Sorted_vector < string > v2 { v }; if ( v != v2 ) cout << \"insanity rules! \\n \" ; // ... }","title":"Example"},{"location":"Class/#enforcement_50","text":"???","title":"Enforcement"},{"location":"Class/#c102","text":"","title":"C.102: \uc774\ub3d9 \uc5f0\uc0b0\uc744 \uc81c\uacf5\ud558\ub77c"},{"location":"Class/#reason_53","text":"\ucee8\ud14c\uc774\ub108\ub294 \ud070 \uaddc\ubaa8\ub85c \uc0ac\uc6a9\ub418\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4; \uc774\ub3d9 \uc5f0\uc0b0\uc774 \uc5c6\ub2e4\uba74 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4dc\ub294 \ubcf5\uc0ac\uac00 \uc0ac\uc6a9\ub420 \uac83\uc774\uace0, \uc0ac\ub78c\ub4e4\uc774 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud558\ub3c4\ub85d \ub9cc\ub4e6\uc73c\ub85c\uc368 \uc790\uc6d0 \uad00\ub9ac \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example_41","text":"Sorted_vector < int > read_sorted ( istream & is ) { vector < int > v ; cin >> v ; // assume we have a read operation for vectors Sorted_vector < int > sv = v ; // sorts return sv ; } A user can reasonably assume that returning a standard - like container is cheap .","title":"Example"},{"location":"Class/#enforcement_51","text":"???","title":"Enforcement"},{"location":"Class/#c103","text":"","title":"C.103: \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8 \uc0dd\uc131\uc790\ub97c \uc9c0\uc6d0\ud558\ub77c"},{"location":"Class/#reason_54","text":"\uc0ac\ub78c\ub4e4\uc740 \uac12 \uc9d1\ud569\uc744 \uc0ac\uc6a9\ud574\uc11c \ucee8\ud14c\uc774\ub108 \ucd08\uae30\ud654\uac00 \uac00\ub2a5\ud560 \uac83\uc774\ub77c \uae30\ub300\ud55c\ub2e4. \uc790\uc5f0\uc2a4\ub7fd\ub2e4.","title":"Reason"},{"location":"Class/#example_42","text":"Sorted_vector < int > sv { 1 , 3 , - 1 , 7 , 0 , 0 }; // Sorted_vector sorts elements as needed","title":"Example"},{"location":"Class/#enforcement_52","text":"???","title":"Enforcement"},{"location":"Class/#c104","text":"","title":"C.104: \uae30\ubcf8 \uc0dd\uc131\uc790\ub294 \ube48 \ucee8\ud14c\uc774\ub108\ub97c \ub9cc\ub4e4\ub3c4\ub85d \ud558\ub77c"},{"location":"Class/#reason_55","text":"\ucee8\ud14c\uc774\ub108\ub97c \uc815\uaddc(Regular) \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc900\ub2e4.","title":"Reason"},{"location":"Class/#example_43","text":"vector < Sorted_sequence < string >> vs ( 100 ); // 100 Sorted_sequences each with the value \"\"","title":"Example"},{"location":"Class/#enforcement_53","text":"???","title":"Enforcement"},{"location":"Class/#c109-","text":"","title":"C.109: \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc774 \ud3ec\uc778\ud130 \uc758\ubbf8\uad6c\uc870\ub97c \ub530\ub97c \uacbd\uc6b0\uc5d0\ub294, * \uacfc -&gt; \uc5f0\uc0b0\uc790\ub97c \uc81c\uacf5\ud558\ub77c"},{"location":"Class/#reason_56","text":"\ud3ec\uc778\ud130\uc5d0 \uae30\ub300\ub418\ub294 \uc5f0\uc0b0\ub4e4\uc774\ub2e4. \ud3ec\uc778\ud130 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c\ub294 \uc774\ub7f0 \ud45c\ud604\uc774 \uc775\uc219\ud558\ub2e4.","title":"Reason"},{"location":"Class/#example_44","text":"???","title":"Example"},{"location":"Class/#enforcement_54","text":"???","title":"Enforcement"},{"location":"Class/#clambdas-function-objects-and-lambdas","text":"\ud568\uc218 \uac1c\uccb4\ub294 () \ub97c \uc624\ubc84\ub85c\ub4dc\ud574 \ud638\ucd9c\uc744 \uc9c0\uc6d0\ud558\ub294 \uac1c\uccb4\ub97c \uc758\ubbf8\ud55c\ub2e4. \ub78c\ub2e4 \ud45c\ud604\uc2dd(\uc904\uc5ec\uc11c \"\ub78c\ub2e4\"\ub77c\uace0\ub3c4 \ud55c\ub2e4)\uc740 \ud568\uc218 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\ub3c4\ub85d \ud558\ub294 \ud45c\uae30\ub97c \uc758\ubbf8\ud55c\ub2e4. \ud568\uc218 \uac1c\uccb4\ub294 \uac00\ub2a5\ud55c \ubcf5\uc0ac \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4 (\ub610 \uadf8\ub807\uae30\uc5d0 \uac12\uc5d0 \uc758\ud55c \uc804\ub2ec \uc774 \uc0ac\uc6a9\ub41c\ub2e4). \uc694\uc57d: F.50: \ud568\uc218\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c (\uc9c0\uc5ed \ubcc0\uc218\ub97c \ubcf5\uc0ac\ud558\uac70\ub098, \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ud568\uc218\ub97c \uc791\uc131\ud558\ub294 \uacbd\uc6b0) F.52: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uac70\ub098 \uc54c\uace0\ub9ac\uc998\uc5d0 \uc804\ub2ec\ub41c\ub2e4\uba74 \ub78c\ub2e4 \ucea1\uccd0\ub85c\ub294 \ucc38\uc870\ub97c \uc120\ud638\ud558\ub77c F.53: \ubc18\ud658\ub418\uac70\ub098, \uc678\ubd80\uc5d0 \uc800\uc7a5\ub418\uac70\ub098, \ub2e4\ub978 \uc2a4\ub808\ub4dc\ub85c \uc804\ub2ec\ud558\ub294 \uacbd\uc6b0\ucc98\ub7fc \ube44 \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 \ub78c\ub2e4\uc758 \ucc38\uc870 \ucea1\uccd0\ub97c \uc9c0\uc591\ud558\ub77c ES.28: \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\uc5d0\ub294, \ud2b9\ud788 \uc0c1\uc218 \ubcc0\uc218\ub4e4\uc758 \ucd08\uae30\ud654\uc5d0\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c","title":"C.lambdas: \ud568\uc218 \uac1c\uccb4\uc640 \ub78c\ub2e4 \ud45c\ud604\uc2dd(Function objects and lambdas)"},{"location":"Class/#chier-oop","text":"\ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub294 \uacc4\uce35\uc801\uc73c\ub85c \uc870\uc9c1\ud654\ub41c \uac1c\ub150\ub4e4\uc758 \uc9d1\ud569\uc744 \ud45c\ud604\ud558\uba74\uc11c (\uc624\uc9c1 \uadf8\ub7f0 \uacbd\uc6b0\uc5d0\ub9cc) \uc0dd\uc131\ub41c\ub2e4. \ubcf4\ud1b5 \uc0c1\uc704 \ud074\ub798\uc2a4(base class)\ub4e4\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub85c\uc368 \ub3d9\uc791\ud55c\ub2e4. \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub294 \ub300\ud45c\uc801\uc778 \uc608\ub85c\ub294 2\uac00\uc9c0\uac00 \uc788\ub294\ub370, \uad6c\ud604 \uc0c1\uc18d\uacfc \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc73c\ub85c \ubd88\ub9b0\ub2e4. \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 \uaddc\uce59 \uc694\uc57d: C.120: \uacc4\uce35\uc801\uc778 \uad6c\uc870\ub97c \uac00\uc9c4 \uac1c\ub150\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub9cc \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c C.121: \uc0c1\uc704 \ud074\ub798\uc2a4\uac00 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74, \uc21c\uc218 \uac00\uc0c1 \ud074\ub798\uc2a4\ub85c \ub9cc\ub4e4\uc5b4\ub77c C.122: \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc758 \ubd84\ub9ac\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc744 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0ac\uc6a9\ud558\ub77c \uacc4\uce35 \uad6c\uc870 \ub0b4 \ud074\ub798\uc2a4 \uc124\uacc4 \uaddc\uce59 \uc694\uc57d: C.126: \uc77c\ubc18\uc801\uc73c\ub85c \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \uc0dd\uc131\uc790\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4 C.127: \uac00\uc0c1\ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub294 \uacf5\uac1c(public)\ub41c \uac00\uc0c1(virtual) \ud639\uc740 \uc0c1\uc18d\ub418\ub294(protected) \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4 C.128: \uac00\uc0c1 \ud568\uc218\ub4e4\uc740 virtual , override , \ud639\uc740 final \uc911 \ud558\ub098\ub9cc \uba85\uc2dc\ud574\uc57c \ud55c\ub2e4 C.129: \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \uc815\uc758\ud560 \ub54c\ub294 \uad6c\ud604 \uc0c1\uc18d\uacfc \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc744 \uad6c\ubd84\ud558\ub77c C.130: \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\uc5d0\uc11c \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc9c0\uc6d0\ud558\uac8c \ud558\ub824\uba74 \ubcf5\uc0ac \uc0dd\uc131/\ub300\uc785 \ubcf4\ub2e4\ub294 \uac00\uc0c1 clone \uc744 \uc120\ud638\ud558\ub77c C.131: \uc790\uc798\ud55c getter\uc640 setter\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c C.132: \uc774\uc720\uc5c6\uc774 \ud568\uc218\ub97c virtual \ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c C.133: protected \ub370\uc774\ud130\ub97c \uc9c0\uc591\ud558\ub77c C.134: const \uac00 \uc544\ub2cc \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc774 \uac19\uc740 \uc811\uadfc \ub808\ubca8\uc744 \uac00\uc9c0\ub3c4\ub85d \ud558\ub77c C.135: \uc11c\ub85c \ub2e4\ub978 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub77c C.136: \uad6c\ud604 \ud2b9\uc131(attribute)\uc758 \uacb0\ud569\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub77c C.137: \uc9c0\ub098\uce58\uac8c \uc77c\ubc18\uc801\uc778 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \ud53c\ud558\uae30 \uc704\ud574 virtual \uc744 \uc0ac\uc6a9\ud558\ub77c C.138: using \uc744 \uc0ac\uc6a9\ud574 \uc0c1\uc704/\ud558\uc704 \ud074\ub798\uc2a4\ub97c \uc704\ud55c \uc911\ubcf5 \uc815\uc758 \uc9d1\ud569\uc744 \ub9cc\ub4e4\uc5b4\ub77c C.139: final \uc740 \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc0ac\uc6a9\ud558\ub77c C.140: \uac00\uc0c1 \ud568\uc218\uc640 \uadf8 \uad6c\ud604 \ud568\uc218\uc5d0 \uc11c\ub85c \ub2e4\ub978 \uae30\ubcf8 \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c \uacc4\uce35 \uad6c\uc870 \ub0b4 \uac1c\uccb4 \uc811\uadfc \uaddc\uce59 \uc694\uc57d: C.145: \ub2e4\ud615\uc801\uc778 \uac1c\uccb4\ub4e4\uc740 \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub97c \ud1b5\ud574 \uc811\uadfc\ud558\ub77c C.146: \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 \ud0d0\uc0c9\uc774 \ubd88\uac00\ud53c\ud55c \uacbd\uc6b0\uc5d0\ub9cc dynamic_cast \ub97c \uc0ac\uc6a9\ud558\ub77c C.147: \ud544\uc694\ud55c \ud074\ub798\uc2a4\ub97c \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uac00 \uc624\ub958\uc5d0 \ud574\ub2f9\ud558\ub294 \uacbd\uc6b0 dynamic_cast \ub97c \ucc38\uc870 \ud0c0\uc785\uc5d0 \uc0ac\uc6a9\ud558\ub77c C.148: \ud544\uc694\ud55c \ud074\ub798\uc2a4\ub97c \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uac00 \ub300\uc548\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 dynamic_cast \ub97c \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \uc0ac\uc6a9\ud558\ub77c C.149: \ub3d9\uc801 \ud560\ub2f9\ud55c \uac1c\uccb4\uc758 \uc18c\uba78\uc744 \uc78a\uc9c0 \uc54a\ub3c4\ub85d unique_ptr \ud639\uc740 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c C.150: unique_ptr \ub85c \uc18c\uc720\ub418\ub294 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 make_unique() \ub97c \uc0ac\uc6a9\ud558\ub77c C.151: shared_ptr \ub85c \uc18c\uc720\ub418\ub294 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 make_shared() \ub97c \uc0ac\uc6a9\ud558\ub77c C.152: \uc808\ub300\ub85c \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\uc5d0 \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \ub300\uc785\ud558\uc9c0 \ub9c8\ub77c C.153: \ud0c0\uc785 \uce90\uc2a4\ud305\ubcf4\ub2e4 \uac00\uc0c1 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c","title":"C.hier: \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 (OOP)"},{"location":"Class/#c120","text":"","title":"C.120: \uacc4\uce35\uc801\uc778 \uad6c\uc870\ub97c \uac00\uc9c4 \uac1c\ub150\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub9cc \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_57","text":"\uc0dd\uac01\uc774 \ubc14\ub85c \ucf54\ub4dc\ub85c \ub098\ud0c0\ub098\ub294 \uac83\uc740 \uc774\ud574\uc640 \uc720\uc9c0\ubcf4\uc218\ub97c \uc27d\uac8c \ub9cc\ub4e0\ub2e4. \uc0dd\uac01\uc774 \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \ub098\ud0c0\ub098\uace0 \ud558\uc704 \ud0c0\uc785\uc5d0\uc11c \uc774\ub97c \ub530\ub974\uac8c \ud558\ub77c. \uc774 \ubaa9\uc801\uc744 \ub2f4\uc544\ub0b4\uae30 \uc704\ud55c \ubc29\ubc95\uc73c\ub85c \uc0c1\uc18d\ubcf4\ub2e4 \uc88b\uc740 \ubc29\ubc95\uc740 \uc5c6\ub2e4. \ub370\uc774\ud130 \uba64\ubc84\ub97c \ub2f4\uae30 \uc704\ud55c \ubc29\ubc95\uc73c\ub85c \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud574\uc120 \uc548\ub41c\ub2e4 . \ub9ce\uc740 \uacbd\uc6b0 \uc0c1\uc18d\uc740 \ud558\uc704 \ud0c0\uc785\uc774 \uc0c1\uc704 \uac00\uc0c1 \ud568\uc218\ub97c \uc7ac\uc815\uc758\ud558\uac70\ub098 \uba64\ubc84\uc5d0 \uc811\uadfc\ud560 \ud544\uc694\ud55c \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_45","text":"class DrawableUIElement { public : virtual void render () const = 0 ; // ... }; class AbstractButton : public DrawableUIElement { public : virtual void onClick () = 0 ; // ... }; class PushButton : public AbstractButton { virtual void render () const override ; virtual void onClick () override ; // ... }; class Checkbox : public AbstractButton { // ... };","title":"Example"},{"location":"Class/#example-bad_27","text":"\uacc4\uce35\uc801\uc774\uc9c0 \uc54a\uc740 \uac1c\ub150\uc744 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub85c \ud45c\ud604\ud574\uc120 \uc548\ub41c\ub2e4 . template < typename T > class Container { public : // list operations: virtual T & get () = 0 ; virtual void put ( T & ) = 0 ; virtual void insert ( Position ) = 0 ; // ... // vector operations: virtual T & operator []( int ) = 0 ; virtual void sort () = 0 ; // ... // tree operations: virtual void balance () = 0 ; // ... }; \uc704 \uc608\uc5d0\uc11c \ub300\ubd80\ubd84\uc758 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc740 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uc694\uad6c\ud558\ub294 \ud568\uc218\ub4e4\uc744 \uc798 \uc7ac\uc815\uc758(override)\ud560 \uc218 \uc5c6\ub2e4. \ub54c\ubb38\uc5d0 \uc0c1\uc704 \ud074\ub798\uc2a4\ub294 \uad6c\ud604 \ubd80\ub2f4\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. \ub098\uc544\uac00\uc11c, Container \uc758 \uc0ac\uc6a9\uc790\ub294 \uba64\ubc84 \ud568\uc218\ub4e4\uc774 \uc2e4\uc81c\ub85c \uc720\uc758\ubbf8\ud55c \uc5f0\uc0b0\ub4e4\uc744 \ud6a8\uc728\uc801\uc73c\ub85c \uc2e4\ud589\ud558\ub294\uc9c0 \uc2e0\ub8b0\ud560 \uc218 \uc5c6\ub2e4: \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\uace0 \uc608\uc678\ub97c \ub358\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \uc774 \ub54c\ubb38\uc5d0 \uc720\uc800\ub294 \uc2e4\ud589 \uc2dc\uac04 \uac80\uc0ac\uc5d0 \uc758\uc874\ud558\uac70\ub098 \uc774\uc640 \uac19\uc740 (\uacfc\ub3c4\ud558\uac8c) \uc77c\ubc18\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 ( dynamic_cast \uc640 \uac19\uc740) \uc2e4\ud589\uc2dc\uac04 \ud0c0\uc785 \ud655\uc778\uc744 \uc0ac\uc6a9\ud560 \uac83\uc774\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_55","text":"\uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uace0 \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uba64\ubc84\uac00 \ub9ce\uc740 \ud074\ub798\uc2a4\ub97c \ucc3e\uc544\ub0b8\ub2e4 \uc0c1\uc704 \ud074\ub798\uc2a4 B \uc758 \uac00\uc0c1\ud568\uc218\ub97c \ud558\uc704 \ud074\ub798\uc2a4 D \uac00 \uad6c\ud604\ud558\uc9c0 \uc54a\uac70\ub098 B \uba64\ubc84\uc5d0 \uc811\uadfc\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c. \uc774\ub54c B \ub294 \ub2e4\uc74c\uc5d0 \ud574\ub2f9\ud558\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4: \uba64\ubc84 \ubcc0\uc218\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294\ub2e4. D \uc758 \ud15c\ud50c\ub9bf \uc778\uc790 \ud639\uc740 \uc778\uc790 \ubb36\uc74c(pack)\uc774 \uc544\ub2c8\ub2e4. D \ub97c \uc0ac\uc6a9\ud574 \ud2b9\uc218\ud654\ub41c \ud15c\ud50c\ub9bf\uc774\ub2e4.","title":"Enforcement"},{"location":"Class/#c121","text":"","title":"C.121: \uc0c1\uc704 \ud074\ub798\uc2a4\uac00 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74, \uc21c\uc218 \uac00\uc0c1 \ud074\ub798\uc2a4\ub85c \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Class/#reason_58","text":"\ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc73c\uba74 \ub354 \uc548\uc815\uc801\uc774\ub2e4. \uc778\ud130\ud398\uc774\uc2a4\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc21c\uc218 \uac00\uc0c1 \ud568\uc218\uc640 \uae30\ubcf8/\ube44\uc5b4\uc788\ub294 \uac00\uc0c1 \uc18c\uba78\uc790\ub85c \uad6c\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4","title":"Reason"},{"location":"Class/#example_46","text":"class My_interface { public : // ...only pure virtual functions here ... virtual ~ My_interface () {} // or =default };","title":"Example"},{"location":"Class/#example-bad_28","text":"class Goof { public : // ...only pure virtual functions here ... // no virtual destructor }; class Derived : public Goof { string s ; // ... }; void use () { unique_ptr < Goof > p { new Derived { \"here we go\" }}; f ( p . get ()); // use Derived through the Goof interface g ( p . get ()); // use Derived through the Goof interface } // leak Derived \ud074\ub798\uc2a4\ub294 Goof \ub97c \ud1b5\ud574\uc11c \uc18c\uba78\ub418\uae30 \ub54c\ubb38\uc5d0, \uba64\ubc84 string \uc5d0\uc11c \ub204\uc218\uac00 \ubc1c\uc0dd\ud55c\ub2e4. Goof \uc5d0\uc11c \uac00\uc0c1 \uc18c\uba78\uc790\ub97c \uc81c\uacf5\ud558\uba74 \ubaa8\ub4e0\uac8c \uc6d0\ud65c\ud558\uac8c \ub3cc\uc544\uac04\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_56","text":"\ud074\ub798\uc2a4\uac00 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uac00\uc9c0\uba74\uc11c ( final \uc774 \uc544\ub2cc) \uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c0\uba74 \uacbd\uace0\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c122","text":"","title":"C.122: \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc758 \ubd84\ub9ac\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc744 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_59","text":"\uc608\ub97c \ub4e4\uc5b4 ABI(Application Binary Interface)\ub97c \uc0ac\uc6a9\ud558\ub294 \uc9c0\uc810\uc5d0\uc11c \uc774\ub7f0 \uc791\uc5c5\uc774 \ud544\uc694\ud558\ub2e4.","title":"Reason"},{"location":"Class/#example_47","text":"struct Device { virtual ~ Device () = default ; virtual void write ( span < const char > outbuf ) = 0 ; virtual void read ( span < char > inbuf ) = 0 ; }; class D1 : public Device { // ... data ... void write ( span < const char > outbuf ) override ; void read ( span < char > inbuf ) override ; }; class D2 : public Device { // ... different data ... void write ( span < const char > outbuf ) override ; void read ( span < char > inbuf ) override ; }; \uc704\uc640 \uac19\uc740 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\uc790\ub294 Device \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574\uc11c D1 \uacfc D2 \ub97c \uad50\ud658\ud558\uba74\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub098\uc544\uac00\uc11c, Device \ub97c \ud1b5\ud574\uc11c \uc811\uadfc\ub418\ub294 \ud55c D1 \uacfc D2 \ub97c \uad6c \ubc84\uc804\uacfc \ud638\ud658\ub418\uc9c0 \uc54a\ub3c4\ub85d(not binary compatible) \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Class/#enforcement_57","text":"???","title":"Enforcement"},{"location":"Class/#chierclass","text":"","title":"C.hierclass: \uacc4\uce35 \uad6c\uc870 \ub0b4 \ud074\ub798\uc2a4 \uc124\uacc4"},{"location":"Class/#c126","text":"","title":"C.126: \uc77c\ubc18\uc801\uc73c\ub85c \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \uc0dd\uc131\uc790\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4"},{"location":"Class/#reason_60","text":"\ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uac00\uc9c0\uc9c0 \uc54a\uc73c\uba70 \uc774\ub97c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud55c \uc0dd\uc131\uc790 \ub610\ud55c \uac00\uc9c0\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Class/#example_48","text":"???","title":"Example"},{"location":"Class/#exception_8","text":"\uac1c\uccb4\ub97c \uc5b4\ub518\uac00\uc5d0 \ub4f1\ub85d\ud558\uae30 \uc704\ud55c \uc0c1\uc704 \ud074\ub798\uc2a4 \uc0dd\uc131\uc790\uac00 \ud544\uc694\ud560 \uc218\ub3c4 \uc788\ub2e4 \uadf9\ud788 \ub4dc\ubb38 \uacbd\uc6b0\uc774\uc9c0\ub9cc, \ucd94\uc0c1 \ud074\ub798\uc2a4\uac00 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc774 \uacf5\uc720\ud558\ub294 \ub370\uc774\ud130\ub97c \uac00\uc9c0\ub294 \uac83\uc774 \ud0c0\ub2f9\ud55c \uacbd\uc6b0\uac00 \uc788\uc744 \uc218 \uc788\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, \uc815\uc801 \ub370\uc774\ud130, \ub514\ubc84\uae45 \uc815\ubcf4 \ub4f1); \uadf8\ub7ec\ud55c \ud074\ub798\uc2a4\ub4e4\uc740 \uc0dd\uc131\uc790\ub97c \uac00\uc9c4\ub2e4. \ud558\uc9c0\ub9cc \uc8fc\uc758\ud558\ub77c; \uadf8\ub7f0 \uacbd\uc6b0\ub294 \uac00\uc0c1 \uc0c1\uc18d\uc5d0 \ucde8\uc57d\ud558\ub2e4","title":"Exception"},{"location":"Class/#enforcement_58","text":"\uc0dd\uc131\uc790\ub97c \uac00\uc9c4 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c127-public-virtual-protected","text":"","title":"C.127: \uac00\uc0c1\ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub294 \uacf5\uac1c(public)\ub41c \uac00\uc0c1(virtual) \ud639\uc740 \uc0c1\uc18d\ub418\ub294(protected) \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_61","text":"\uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub4e4\uc740 \ubcf4\ud1b5 \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574\uc11c \uc0ac\uc6a9\ub41c\ub2e4. \ub9ce\uc740 \uacbd\uc6b0, \ub9c8\uc9c0\ub9c9 \uc0ac\uc6a9\uc790\uac00 \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 delete \ud558\uac70\ub098 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud574 \uc18c\uba78\uc2dc\ud0a8\ub2e4. \ub54c\ubb38\uc5d0 \uc18c\uba78\uc790\ub294 public \ubc94\uc704\uc5d0 \uc788\uc73c\uba74\uc11c \uac00\uc0c1 \ud568\uc218\uc5ec\uc57c \ud55c\ub2e4. \ub4dc\ubb3c\uac8c\ub294, \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud55c \uc18c\uba78\uc744 \uc758\ub3c4\uc801\uc73c\ub85c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \uc18c\uba78\uc790\ub294 protected \ubc94\uc704\uc5d0 \uc788\uc73c\uba74\uc11c \uac00\uc0c1 \ud568\uc218\uac00 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4; C.35 \ub97c \ucc38\uace0\ud558\ub77c","title":"Reason"},{"location":"Class/#example-bad_29","text":"struct B { virtual int f () = 0 ; // ... no user-written destructor, defaults to public nonvirtual ... }; // bad: derived from a class without a virtual destructor struct D : B { string s { \"default\" }; }; void use () { unique_ptr < B > p = make_unique < D > (); // ... } // undefined behavior. May call B::~B only and leak the string","title":"Example, bad"},{"location":"Class/#note_60","text":"shared_ptr \ub97c \ud1b5\ud574 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \uc774 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294 \uc0ac\ub78c\ub4e4\ub3c4 \uc788\ub2e4: std::shared_ptr<B> p = std::make_shared<D>(args); \uc774\ub7f0 \uacbd\uc6b0, \uacf5\uc720 \ud3ec\uc778\ud130\uac00 \uc18c\uba78\uc744 \ub2f4\ub2f9\ud560 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub2c8 \ubd80\uc801\uc808\ud55c \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 delete \ub85c \uc778\ud55c \ub204\uc218\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc774\ub97c \uacc4\uc18d\ud558\ub294 \uc0ac\ub78c\ub4e4\uc740 \uc798\ubabb\ub41c \ucf54\ub4dc\ub85c\ubd80\ud130 \uc815\uc0c1\uc801\uc778 \ub3d9\uc791\uc744 \ub9cc\ub4e4\uc5b4\ub0b8\ub2e4 (false positive), \uadf8\ub807\uc9c0\ub9cc \uc774 \uaddc\uce59\uc740 \uc911\uc694\ud558\ub2e4 -- \ub9cc\uc57d \ub204\uad70\uac00 make_unique \ub97c \uc0ac\uc6a9\ud574 \ud560\ub2f9\ud558\uba74 \uc5b4\ub5bb\uac8c \ub420 \uac83\uc778\uac00? B \uc758 \uc791\uc131\uc790\uac00 \ubaa8\ub4e0 \uc0dd\uc131\uc790\ub97c private\ub85c \ub9cc\ub4e4\uace0 make_shared \ub97c \ud1b5\ud574\uc11c\ub9cc \uc0dd\uc131\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc81c\uacf5\ud574\uc11c \uc798\ubabb \uc0ac\uc6a9\ub420 \uac83\uc774\ub77c\uace0 \ubcf4\uc7a5\ud558\uc9c0 \uc54a\ub294 \ud55c, \uc774 \ucf54\ub4dc\ub294 \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4.","title":"Note"},{"location":"Class/#enforcement_59","text":"\uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub294 \uacf5\uac1c(public)\ub41c \uac00\uc0c1(virtual) \ud639\uc740 \uc0c1\uc18d\ub418\ub294(protected) \uc18c\uba78\uc790\ub97c \uac00\uc838\uc57c \ud55c\ub2e4 \uac00\uc0c1 \uc18c\uba78\uc790\ub97c \uac00\uc9c0\uc9c0 \uc54a\uace0 \uac00\uc0c1 \ud568\uc218\ub97c \uc0ac\uc6a9\ud574 delete \ud558\ub294 \ud074\ub798\uc2a4\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c128-virtual-override-final","text":"","title":"C.128: \uac00\uc0c1 \ud568\uc218\ub4e4\uc740 virtual, override, \ud639\uc740 final \uc911 \ud558\ub098\ub9cc \uba85\uc2dc\ud574\uc57c \ud55c\ub2e4"},{"location":"Class/#reason_62","text":"\uac00\ub3c5\uc131. \uc2e4\uc218\ub97c \ubc1c\uacac\ud560 \uc218 \uc788\ub2e4. \uba85\uc2dc\uc801\uc73c\ub85c virtual , override , final \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud568\uc218 \uc790\uccb4\ub97c \ubb38\uc11c\ud654\ud55c\ub2e4. \ub3d9\uc2dc\uc5d0 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0c1\uc704 \ud074\ub798\uc2a4\uc640 \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud0c0\uc785 \ud639\uc740 \uc774\ub984\uc774 \ubd88\uc77c\uce58 \ud558\ub294 \uac83\uc744 \uc7a1\uc544\ub0bc \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub4e4\uc744 \ud558\ub098 \uc774\uc0c1 \uc791\uc131\ud558\ub294 \uac83\uc740 \uc911\ubcf5\uc801\uc774\uba74\uc11c \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \ud558\ub098\ub9cc \uc791\uc131\ud558\ub294 \uac83\uc774 \ub2e8\uc21c\ud558\uace0 \uba85\ud655\ud558\ub2e4: virtual \ub294 \"\uc0c8\ub85c\uc6b4 \uac00\uc0c1 \ud568\uc218\"\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 override \ub294 \"\uc7ac\uc815\uc758 \ub420 \uc218 \uc788\ub294(non- final ) \uc7ac\uc815\uc758 \ud568\uc218\"\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 final \ub294 \"\ub9c8\uc9c0\ub9c9 \uc7ac\uc815\uc758 \ud568\uc218\"\ub77c\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 \ub9cc\uc57d \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uc18c\uba78\uc790\uac00 virtual \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74, \ud558\uc704 \ud074\ub798\uc2a4 \uc18c\uba78\uc790\ub4e4\uc740 virtual \ud639\uc740 override \uac00 \ub41c\ub2e4. \uc5b4\ub5a4 \ucf54\ub4dc \ud639\uc740 \uc9c0\uc6d0\ub3c4\uad6c\uc5d0\uc11c \uc18c\uba78\uc790\uc5d0 override \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uac15\uc694\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c\ub294 \uadf8 \ubc29\ubc95\uc740 \uad8c\ud558\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_30","text":"struct B { void f1 ( int ); virtual void f2 ( int ) const ; virtual void f3 ( int ); // ... }; struct D : B { void f1 ( int ); // bad (hope for a warning): D::f1() hides B::f1() void f2 ( int ) const ; // bad (but conventional and valid): no explicit override void f3 ( double ); // bad (hope for a warning): D::f3() hides B::f3() // ... };","title":"Example, bad"},{"location":"Class/#example-good_5","text":"struct Better : B { void f1 ( int ) override ; // error (caught): D::f1() hides B::f1() void f2 ( int ) const override ; void f3 ( double ) override ; // error (caught): D::f3() hides B::f3() // ... };","title":"Example, good"},{"location":"Class/#discussion_1","text":"\uc6b0\ub9ac\ub294 \uc774 \uaddc\uce59\uc744 \ud1b5\ud574 2\uac00\uc9c0 \uc624\ub958\ub97c \uc5c6\uc560\uace0\uc790 \ud55c\ub2e4: \uc554\ubb35\uc801 \uac00\uc0c1\ud568\uc218 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc554\ubb35\uc801 \uac00\uc0c1 \ud568\uc218\ub97c \uc758\ub3c4\ud588\uc73c\uba70, \uc2e4\uc81c\ub85c \uadf8\uc5d0 \ud574\ub2f9\ud558\ub294 \uacbd\uc6b0 (\ud558\uc9c0\ub9cc \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc740 \uc54c\uc544\ubcfc \uc218 \uc5c6\ub2e4) \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc554\ubb35\uc801 \uac00\uc0c1 \ud568\uc218\ub97c \uc758\ub3c4\ud588\uc73c\ub098 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 (\uc608\ub97c \ub4e4\uc5b4 \uc778\uc790\uac00 \ubbf8\ubb18\ud558\uac8c \ub9de\uc9c0 \uc54a\uc558\ub2e4\uac70\ub098\ud558\ub294 \uc774\uc720\ub85c) \ud504\ub85c\uadf8\ub798\uba38\uac00 \uac00\uc0c1 \ud568\uc218\ub97c \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\uc73c\ub098 \uac00\uc0c1 \ud568\uc218\uac00 \ub41c \uacbd\uc6b0 (\uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uac00\uc0c1 \ud568\uc218\uc640 \uac19\uc740 \uc2dc\uadf8\ub2c8\ucc98\ub97c \uac00\uc9c0\ub294 \ubc14\ub78c\uc5d0) \uc554\ubb35\uc801 \uc7ac\uc815\uc758 \ud504\ub85c\uadf8\ub798\uba38\ub294 \ud568\uc218\uac00 \uc554\ubb35\uc801\uc73c\ub85c \uc7ac\uc815\uc758\ub418\ub294 \uac83\uc744 \uc758\ub3c4\ud588\uace0 \uadf8\ub807\uac8c \ub41c \uacbd\uc6b0 (\ud558\uc9c0\ub9cc \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc740 \uc54c\uc544\ubcfc \uc218 \uc5c6\ub2e4) \ud504\ub85c\uadf8\ub798\uba38\ub294 \ud568\uc218\uac00 \uc554\ubb35\uc801\uc73c\ub85c \uc7ac\uc815\uc758\ub418\ub294 \uac83\uc744 \uc758\ub3c4\ud588\uc73c\ub098 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 (\uc608\ub97c \ub4e4\uc5b4 \uc778\uc790\uac00 \ubbf8\ubb18\ud558\uac8c \ub9de\uc9c0 \uc54a\uc558\ub2e4\uac70\ub098\ud558\ub294 \uc774\uc720\ub85c) \ud504\ub85c\uadf8\ub798\uba38\uac00 \ud568\uc218\uac00 \uc7ac\uc815\uc758 \ub418\ub294 \uac83\uc744 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\uc73c\ub098 \uc7ac\uc815\uc758 \ub41c \uacbd\uc6b0 (\uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uac00\uc0c1 \ud568\uc218\uc640 \uac19\uc740 \uc2dc\uadf8\ub2c8\ucc98\ub97c \uac00\uc9c0\ub294 \ubc14\ub78c\uc5d0 -- \uc774\ub7f0 \uc77c\uc740 \uadf8 \ud568\uc218\uac00 virtual\ub85c \uc120\uc5b8\ub418\uc9c0 \uc54a\uc544\ub3c4 \ubc1c\uc0dd\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c, \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc0c8\ub85c\uc6b4 \uac00\uc0c1 \ud568\uc218\ub97c \ub9cc\ub4e4\uae30\ub97c \uc6d0\ud588\ub294\uc9c0 \ube44 \uac00\uc0c1 \ud568\uc218\ub97c \uc6d0\ud588\ub294\uc9c0 \uc54c \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4)","title":"Discussion"},{"location":"Class/#enforcement_60","text":"\uc0c1\uc704 \ud074\ub798\uc2a4\uc640 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc758 \uc774\ub984\uc744 \ube44\uad50\ud558\uace0 \uac19\uc740 \uc774\ub984\uc744 \uc4f0\uba74\uc11c \uc7ac\uc815\uc758\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c override \uc640 final \uc911 \uc5b4\ub290 \ud558\ub098\ub3c4 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 \uc7ac\uc815\uc758\ub97c \uc9c0\uc801\ud558\ub77c virtual , override , final \uc911 2\uac1c \uc774\uc0c1\uc744 \uc0ac\uc6a9\ud55c \ud568\uc218 \uc120\uc5b8\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c129","text":"","title":"C.129: \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \uc815\uc758\ud560 \ub54c\ub294 \uad6c\ud604 \uc0c1\uc18d\uacfc \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc744 \uad6c\ubd84\ud558\ub77c"},{"location":"Class/#reason_63","text":"\uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uad6c\ud604 \ub0b4\uc6a9\uc744 \uac00\uc9c0\ub294 \uac83\uc740 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub9dd\uac00\uc9c0\uae30 \uc27d\uac8c \ud55c\ub2e4; \ub2ec\ub9ac \ub9d0\ud574, \uc778\ud130\ud398\uc774\uc2a4\uc758 \uc0ac\uc6a9\uc790\ub4e4\uc774 \uad6c\ud604\uc744 \ubc14\uafbc \ub4a4\uc5d0 \ub2e4\uc2dc \ucef4\ud30c\uc77c\ud560 \ub54c \uc601\ud5a5\uc744 \ubc1b\uac8c \ud55c\ub2e4. \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ub370\uc774\ud130\ub294 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \uad6c\ud604\ud558\ub294 \uac83\uc744 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uace0 \ucf54\ub4dc \uc911\ubcf5\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#note_61","text":"\uc815\uc758: \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc740 \uc0ac\uc6a9\uc790 \ucf54\ub4dc\ub97c \uad6c\ud604\uacfc \ubd84\ub9ac\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc73c\uba74\uc11c \ucf54\ub4dc\ub97c \ub354\ud558\uac70\ub098 \ubcc0\uacbd\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4 \uad6c\ud604 \uc0c1\uc18d\uc740 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud574 \uc0c8\ub85c\uc6b4 \uad6c\ud604\ub0b4\uc6a9\uc744 \ud558\uc704 \uad6c\ud604\uccb4\ub4e4\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d\ud558\ub294 \uac83\uc774\ub2e4 (\ubcf4\ud1b5 \"programming by difference\"\ub77c\uace0 \ubd88\ub9b0\ub2e4). \uc21c\uc218\ud55c \uc778\ud130\ud398\uc774\uc2a4 \ud074\ub798\uc2a4\ub294 \uc27d\uac8c\ub9d0\ud574 \uc21c\uc218 \uac00\uc0c1\ud568\uc218\ub4e4\uc758 \uc9d1\ud569\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4; I.25 \ub97c \ucc38\uace0\ud558\ub77c. \ucd08\ucc3d\uae30\uc758 \uac1c\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c\ub294 (1980\ub144\ub3c4\uc640 1990\ub144\ub3c4), \uad6c\ud604 \uc0c1\uc18d\uacfc \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc774 \ud63c\uc7ac\ub418\uc5b4 \uc788\uc5c8\uace0 \uadf8\ub7f0 \uc778\uc2b5\uc774 \uc544\uc9c1\ub3c4 \ub0a8\uc544\uc788\ub2e4. \uc624\ub798\ub41c \ucf54\ub4dc\ub098 \uad50\uc721\uc790\ub8cc\uc5d0\uc11c\ub294 \ud754\ud788 \ubcfc \uc218 \uc788\ub2e4. \uc544\ub798\uc758 \uacbd\uc6b0 2\uac00\uc9c0 \uc0c1\uc18d\uc744 \uad6c\ubd84\ud558\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4 \uacc4\uce35\uad6c\uc870\uc758 \ud06c\uae30\uac00 \ucee4\uc9c4\ub2e4(\uc2ed\uc218\uac1c\uc758 \ud558\uc704 \ud074\ub798\uc2a4\uac00 \uc874\uc7ac\ud55c\ub2e4) \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub294 \uc2dc\uac04\uc774 \uae38\uc5b4\uc9c4\ub2e4 (\uc218\uc2ed\ub144) \uc11c\ub85c \ub2e4\ub978 \uc870\uc9c1\uc774 \uacc4\uce35\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4 (\uc989, \ud769\uc5b4\uc9c4 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \uc5c5\ub370\uc774\ud2b8 \ud558\uae30 \uc5b4\ub835\ub2e4)","title":"Note"},{"location":"Class/#example-bad_31","text":"class Shape { // BAD, mixed interface and implementation public : Shape (); Shape ( Point ce = { 0 , 0 }, Color co = none ) : cent { ce }, col { co } { /* ... */ } Point center () const { return cent ; } Color color () const { return col ; } virtual void rotate ( int ) = 0 ; virtual void move ( Point p ) { cent = p ; redraw (); } virtual void redraw (); // ... private : Point cent ; Color col ; }; class Circle : public Shape { public : Circle ( Point c , int r ) : Shape { c }, rad { r } { /* ... */ } // ... private : int rad ; }; class Triangle : public Shape { public : Triangle ( Point p1 , Point p2 , Point p3 ); // calculate center // ... }; \uc704 \uc608\uc2dc\ub294 \uc544\ub798\uc640 \uac19\uc740 \ubb38\uc81c\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4: \uacc4\uce35\uad6c\uc870\uac00 \ub298\uace0 Shape \uc758 \ub370\uc774\ud130\uac00 \ub298\uc5b4\ub09c\ub2e4. \uc0dd\uc131\uc790\ub97c \uc791\uc131\ud558\uace0 \uad00\ub9ac\ud558\uae30 \uc5b4\ub824\uc6cc\uc9c4\ub2e4 Triangle \uc758 \uc911\uc2ec\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744\uc9c0\ub3c4 \ubaa8\ub974\ub294\ub370 \uacc4\uc0b0\ud560 \ud544\uc694\uac00 \uc788\uc744\uae4c? Shape \uc5d0 \uc0c8\ub85c\uc6b4 \uba64\ubc84\ub97c \ucd94\uac00\ub418\uba74 (\uc608\ucee8\ub300 \uadf8\ub9ac\ub294 \ubc29\ubc95\uc774\ub77c\ub358\uac00 \uadf8\ub9ac\ub294 \uce94\ubc84\uc2a4), \ubaa8\ub4e0 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc774 \ubcc0\ud654\ub418\uba74\uc11c \uc0c8\ub85c \ucef4\ud30c\uc77c \ub418\uc5b4\uc57c \ud55c\ub2e4 Shape::move() \uac00 \uad6c\ud604 \uc0c1\uc18d\uc758 \ud55c \uc0ac\ub840\uc774\ub2e4: \uc0c1\uc704 \ud074\ub798\uc2a4\uc640 \ubaa8\ub4e0 \ud558\uc704 \ud074\ub798\uc2a4\ub97c \uc704\ud574\uc11c move() \ub97c \ud55c\ubc88\ub9cc \uc815\uc758\ud55c\ub2e4. \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ub354 \ub9ce\uc740 \uba64\ubc84\ud568\uc218 \ucf54\ub4dc\uac00 \uc791\uc131\ub420\uc218\ub85d,\ub354 \ub9ce\uc740 \ub370\uc774\ud130\uac00 \uacf5\uc720\ub420\uc218\ub85d, \ucf54\ub4dc\ub97c \uc801\uac8c \uc791\uc131\ud558\ub294 \ud6a8\uc6a9\uc774 \uc0dd\uae30\uc9c0\ub9cc \uacc4\uce35\uad6c\uc870\uac00 \ubd88\uc548\uc815\ud558\uac8c \ub41c\ub2e4.","title":"Example, bad"},{"location":"Class/#example_49","text":"\uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud574 Shape \uacc4\uce35\uc744 \ub2e4\uc2dc \uc791\uc131\ud558\uba74 \uc774\ub807\ub2e4: class Shape { // pure interface public : virtual Point center () const = 0 ; virtual Color color () const = 0 ; virtual void rotate ( int ) = 0 ; virtual void move ( Point p ) = 0 ; virtual void redraw () = 0 ; // ... }; \uc21c\uc218 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc774 \uc0dd\uc131\uc790\ub97c \uac00\uc9c0\ub294 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c: \uc0dd\uc131\ud560 \ub370\uc774\ud130\uac00 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. class Circle : public Shape { public : Circle ( Point c , int r , Color c ) : cent { c }, rad { r }, col { c } { /* ... */ } Point center () const override { return cent ; } Color color () const override { return col ; } // ... private : Point cent ; int rad ; Color col ; }; \uc778\ud130\ud398\uc774\uc2a4\ub294 \uc774\uc81c \uc880 \ub354 \uacac\uace0\ud574\uc84c\uc9c0\ub9cc, \uba64\ubc84 \ud568\uc218\uc758 \uad6c\ud604\uc744 \uc704\ud574 \ub354 \ub9ce\uc740 \uc791\uc5c5\uc744 \ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4, center \ub294 \ubaa8\ub4e0 \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \uc81c\uac01\uae30 \uad6c\ud604\ud574\uc57c \ud55c\ub2e4.","title":"Example"},{"location":"Class/#example-dual-hierarchy","text":"\uc5b4\ub5bb\uac8c \ud558\uba74 \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc5d0 \uc758\ud55c \uc548\uc815\uc801\uc778 \uacc4\uce35\uad6c\uc870\uc640 \uad6c\ud604 \uc0c1\uc18d\uc758 \ud6a8\uc728\uc801\uc778 \uc7ac\uc0ac\uc6a9\uc744 \uacb0\ud569\ud560 \uc218 \uc788\uc744\uae4c? \uad00\ub828\ud574\uc11c \uc720\uba85\ud55c \ubc29\uc2dd \uc911 \ud558\ub098\ub294 \uc774\uc911 \uacc4\uce35(dual hierarchies) \ubc29\uc2dd\uc774\ub2e4. \uc5ec\ub7ec \ubc29\uc2dd\ub4e4\uc774 \uc788\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \ub2e4\uc911 \uc0c1\uc18d \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uccab\ubc88\uc9f8\ub85c \uc778\ud130\ud398\uc774\uc2a4 \uc0c1\uc18d\uc744 \ub9cc\ub4e0\ub2e4: class Shape { // pure interface public : virtual Point center () const = 0 ; virtual Color color () const = 0 ; virtual void rotate ( int ) = 0 ; virtual void move ( Point p ) = 0 ; virtual void redraw () = 0 ; // ... }; class Circle : public Shape { // pure interface public : virtual int radius () = 0 ; // ... }; \uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc720\uc6a9\ud558\uac8c \ub9cc\ub4dc\ub824\uba74, \uad6c\ud604 \ud074\ub798\uc2a4\ub4e4\uac00 \ud544\uc694\ud558\ub2e4. (\uc5ec\uae30\uc11c\ub294 Impl \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \ud074\ub798\uc2a4\ub97c \ud558\ub098 \ub354 \uc815\uc758\ud55c\ub2e4): class Impl :: Shape : public Shape { // implementation public : // constructors, destructor // ... Point center () const override { /* ... */ } Color color () const override { /* ... */ } void rotate ( int ) override { /* ... */ } void move ( Point p ) override { /* ... */ } void redraw () override { /* ... */ } // ... }; \uc774\uc81c Shape \ub294 \uad6c\ud604\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\uc758 \uc9c0\uc800\ubd84\ud55c \uc608\uc2dc\uac00 \ub418\uc5c8\uc9c0\ub9cc, \uc880 \ub354 \ubcf5\uc7a1\ud55c \uacc4\uce35\uad6c\uc870\ub97c \uc704\ud55c \ub2e8\uc21c\ud55c \uc608\uc2dc\uc774\uae30 \ub54c\ubb38\uc5d0 \ucc38\uc544\uc904 \uc218 \uc788\ub2e4. class Impl :: Circle : public Circle , public Impl :: Shape { // implementation public : // constructors, destructor int radius () override { /* ... */ } // ... }; \uc5ec\uae30\uc11c Smiley \ud074\ub798\uc2a4\ub97c \ub354\ud574 \uacc4\uce35\uad6c\uc870\ub97c \ud655\uc7a5\ud574\ubcf4\uc790: class Smiley : public Circle { // pure interface public : // ... }; class Impl :: Smiley : public Smiley , public Impl :: Circle { // implementation public : // constructors, destructor // ... } \uc5ec\uae30\uc5d0\ub294 \ub450 \uacc4\uce35\uad6c\uc870\uac00 \ud63c\ud569\ub418\uc5b4 \uc788\ub2e4: \uc778\ud130\ud398\uc774\uc2a4: Smiley -> Circle -> Shape \uad6c\ud604: Impl::Smiley -> Impl::Circle -> Impl::Shape \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604 \uc591\ucabd\uc5d0\uc11c \uc0c1\uc18d\ubc1b\uae30 \ub54c\ubb38\uc5d0 \uaca9\uc790 \uad6c\uc870(\uc720\ud5a5 \ube44\uc21c\ud658 \uadf8\ub798\ud504)\ub97c \uac00\uc9c0\uac8c \ub41c\ub2e4: Smiley -> Circle -> Shape ^ ^ ^ | | | Impl::Smiley -> Impl::Circle -> Impl::Shape \uc55e\uc11c \uc5b8\uae09\ud55c \uac83\ucc98\ub7fc, \uc774\ub294 \uc774\uc911 \uacc4\uce35\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c \ud55c \ubc29\ubc95\uc77c \ubfd0\uc774\ub2e4. \ucd94\uc0c1 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc544\ub2c8\ub77c \uad6c\ud604 \uacc4\uce35\uc744 \ud1b5\ud574\uc11c \ubc14\ub85c \uc0ac\uc6a9\ub420\uc218\ub3c4 \uc788\ub2e4. void work_with_shape ( Shape & ); int user () { Impl :: Smiley my_smiley { /* args */ }; // create concrete shape // ... my_smiley . some_member (); // use implementation class directly // ... work_with_shape ( my_smiley ); // use implementation through abstract interface // ... } \ucd94\uc0c1 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \uba64\ubc84\ub97c \uad6c\ud604 \ud074\ub798\uc2a4\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub610 \uba64\ubc84\ub97c \uc9c1\uc811 \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \ucd5c\uc801\ud654\uc758 \uac00\ub2a5\uc131\ub3c4 \uc81c\uacf5\ud55c\ub2e4 (\uac00\ub839, \uad6c\ud604 \uba64\ubc84\ud568\uc218\uac00 final \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74)","title":"Example, dual hierarchy"},{"location":"Class/#note_62","text":"\uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc744 \ubd84\ub9ac\ud558\uae30 \uc704\ud55c \ub610 \ub2e4\ub978 (\uad00\ub828\ub41c) \ubc29\ubc95\uc740 Pimpl \uc774\ub2e4.","title":"Note"},{"location":"Class/#note_63","text":"\uacf5\ud1b5\uc801\uc778 \uae30\ub2a5\ub4e4\uc740 (\uc774\ubbf8 \uad6c\ud604\ub41c) \uc0c1\uc704 \ud074\ub798\uc2a4 \ud568\uc218\ub85c \uc81c\uacf5\ud558\uace0 \uad6c\ud604 namespace\uc5d0\uc11c \uc790\uc720\ub86d\uac8c \uc120\ud0dd\ud558\ub3c4\ub85d \ud560\uc218\ub3c4 \uc788\ub2e4. \uc0c1\uc704 \ud074\ub798\uc2a4\ub294 \ub354 \uc9e7\uc740 \ud45c\uae30\ub97c \ud560 \uc218 \uc788\uac8c \ub9cc\ub4e4\uc5b4\uc8fc\uba70, \uae30\ub2a5\uc801\uc778 \uce21\uba74\uc5d0\uc11c(at the cost of the functionality) \uacc4\uce35\uad6c\uc870\uac00 \uacf5\uc720\ud558\ub294 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud558\ub294 \uc720\uc77c\ud55c \uc874\uc7ac\uac00 \ub420 \uc218 \uc788\ub2e4. \uc720\uc77c\ud55c \uc811\uadfc\uc790\uac00 \uc811\uadfc\ud558\uae30\uac00 \uc27d\ub2e4.","title":"Note"},{"location":"Class/#enforcement_61","text":"\ub370\uc774\ud130\uc640 \uac00\uc0c1\ud568\uc218\uc5d0 \ub300\ud574 \ud558\uc704 \ud0c0\uc785\uc5d0\uc11c \uc0c1\uc704 \ud0c0\uc785\uc73c\ub85c\uc758 \ubcc0\ud658\uc744 \uc9c0\uc801\ud558\ub77c (\uc0c1\uc704 \ud074\ub798\uc2a4 \uba64\ubc84 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0) ???","title":"Enforcement"},{"location":"Class/#c130-clone","text":"","title":"C.130: \ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\uc5d0\uc11c \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc9c0\uc6d0\ud558\uac8c \ud558\ub824\uba74 \ubcf5\uc0ac \uc0dd\uc131/\ub300\uc785 \ubcf4\ub2e4\ub294 \uac00\uc0c1 clone\uc744 \uc120\ud638\ud558\ub77c"},{"location":"Class/#reason_64","text":"\ub2e4\ud615\uc801\uc778 \ud074\ub798\uc2a4\ub97c \ubcf5\uc0ac\ud558\ub294 \uac83\uc740 \uc808\ub2e8 \ubb38\uc81c \ub54c\ubb38\uc5d0 \uad8c\ud560\ub9cc\ud55c \uc77c\uc774 \uc544\ub2c8\ub2e4. C.67 \ub97c \ubcf4\ub77c. \ubcf5\uc0ac \ubb38\ub9e5\uc774 \uc815\ub9d0 \ud544\uc694\ud558\ub2e4\uba74, \uae4a\uc740 \ubcf5\uc0ac\ub97c \uc218\ud589\ud558\ub77c: \uac00\uc0c1 clone \ud568\uc218\ub97c \uc81c\uacf5\ud574\uc11c \uc2e4\uc81c \ud558\uc704 \ud0c0\uc785\uc744 \ubcf5\uc0ac\ud558\uace0 \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \uc18c\uc720\ud558\ub294 \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub77c. \uadf8\ub9ac\uace0 \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c\ub294 \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud0c0\uc785\uc744 \ubc18\ud658\ud558\ub77c (\uacf5\ubcc0\uc801\uc778 \ubc18\ud658 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c) \uacf5\ubcc0\uc131: covariance","title":"Reason"},{"location":"Class/#example_50","text":"class B { public : virtual owner < B *> clone () = 0 ; virtual ~ B () = 0 ; B ( const B & ) = delete ; B & operator = ( const B & ) = delete ; }; class D : public B { public : owner < D *> clone () override ; virtual ~ D () override ; }; \ubcf4\ud3b8\uc801\uc778 \uacbd\uc6b0, \uc18c\uc720\uad8c\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uad8c\uc7a5\ub41c\ub2e4.( R.20 \ucc38\uace0). \ud558\uc9c0\ub9cc, \uc5b8\uc5b4 \uaddc\uce59\uc73c\ub85c \uc778\ud574, \uacf5\ubcc0\uc801\uc778 \ubc18\ud658\ud0c0\uc785\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \ub420 \uc218 \uc5c6\ub2e4: D::clone \uc740 unique_ptr<D> \uc744 \ubc18\ud658\ud560 \uc218 \uc5c6\ub294 \ubc18\uba74 B::clone \ub294 unique_ptr<B> \ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub2e4. \uc774\ub85c \uc778\ud574, \ubaa8\ub4e0 \uc7ac\uc815\uc758\uc5d0\uc11c \ud56d\uc0c1 unique_ptr<B> \ud639\uc740 Guidelines Support Library \uc758 owner<> \ub97c \ubc18\ud658\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4.","title":"Example"},{"location":"Class/#c131-getter-setter","text":"","title":"C.131: \uc790\uc798\ud55c getter\uc640 setter\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Class/#reason_65","text":"\uc0ac\uc18c\ud55c \ubaa9\uc801\uc73c\ub85c \uc791\uc131\ub41c getter\uc640 setter\ub294 \uc758\ubbf8\uad6c\uc870\uc801 \uac00\uce58\uac00 \uc5c6\ub2e4; \ub2e8\uc21c\ud788 public \uc73c\ub85c \uacf5\uac1c\ud574\ub3c4 \ub420 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example_51","text":"class Point { // Bad: verbose int x ; int y ; public : Point ( int xx , int yy ) : x { xx }, y { yy } { } int get_x () const { return x ; } void set_x ( int xx ) { x = xx ; } int get_y () const { return y ; } void set_y ( int yy ) { y = yy ; } // no behavioral member functions }; \uc774\ub7f0 \ud074\ub798\uc2a4\ub97c struct \ub85c \ub9cc\ub4dc\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c -- \uc989, \uc5b4\ub5a4 \ud589\uc704\ub3c4 \ud558\uc9c0 \uc54a\ub294 \ubcc0\uc218\ub4e4\uc744 public \ub370\uc774\ud130\ub85c \ub9cc\ub4e4\uace0 \uba64\ubc84\ud568\uc218\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4. struct Point { int x { 0 }; int y { 0 }; }; \uba64\ubc84 \ubcc0\uc218\ub4e4\uc5d0 \uae30\ubcf8 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c: C.49: \uc0dd\uc131\uc790 \uc548\uc5d0\uc11c\uc758 \ub300\uc785 \ubcf4\ub2e4\ub294 \ucd08\uae30\ud654\ub97c \uc120\ud638\ud558\ub77c .","title":"Example"},{"location":"Class/#note_64","text":"\uc774 \uaddc\uce59\uc758 \ud575\uc2ec\uc740 getter/setter\uc758 \uc758\ubbf8\uad6c\uc870\uac00 \uac00\uce58\uc788\ub294\uc9c0 \ud310\ub2e8\ud558\ub294 \uac83\uc774\ub2e4. \uc774\uac83\uc774 \"\uc0ac\uc18c\ud568\"\uc5d0 \ub300\ud55c \uc644\uc804\ud55c \uc815\uc758\ub294 \uc544\ub2c8\uc9c0\ub9cc, \ubb38\ubc95\uc744 \ub118\uc5b4\uc11c getter/setter\uac00 public \ub370\uc774\ud130 \uba64\ubc84\uc600\uc744 \ub54c\ub97c \uace0\ub824\ud574\ubcf4\ub77c. \uc0ac\uc18c\ud558\uc9c0 \uc54a\uc740 \uc758\ubbf8\uad6c\uc870\uc758 \uc608\ub97c \ub4e0\ub2e4\uba74: \ud074\ub798\uc2a4\uc758 \ubd88\ubcc0\uc870\uac74\uc744 \uc720\uc9c0\ud558\uac70\ub098 \ub0b4\ubd80(internal) \ud0c0\uc785\uacfc \uc778\ud130\ud398\uc774\uc2a4 \ud0c0\uc785\uc744 \ubcc0\ud658\ud558\ub294 \uac83\uc744 \uc608\ub85c \ub4e4 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Class/#enforcement_62","text":"\ubcc4\ub2e4\ub978 \uc758\ubbf8\uad6c\uc870 \uc5c6\uc774 \ub2e8\uc21c\ud788 \uba64\ubc84\uc5d0 \uc811\uadfc\ud558\uae30\ub9cc \ud558\ub294 get / set \uba64\ubc84 \ud568\uc218\ub97c \uc5ec\ub7ff \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c132-virtual","text":"","title":"C.132: \uc774\uc720\uc5c6\uc774 \ud568\uc218\ub97c virtual\ub85c \ub9cc\ub4e4\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Class/#reason_66","text":"\uc911\ucca9\ub41c virtual \uc740 \uc2e4\ud589 \uc2dc\uac04\uacfc \uac1c\uccb4\uc758 \ucf54\ub4dc \ud06c\uae30\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4. \uac00\uc0c1 \ud568\uc218\ub294 \uc624\ubc84\ub77c\uc774\ub4dc \ub420 \uc218 \uc788\uace0, \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0\uc11c\uc758 \uc2e4\uc218\uc5d0 \ub178\ucd9c\ub418\uc5b4\uc788\ub2e4. \uac00\uc0c1 \ud568\uc218\ub294 \ud15c\ud50c\ub9bf \uacc4\uce35\uad6c\uc870\uc5d0\uc11c \ucf54\ub4dc \ubcf5\uc81c\ub97c \uc57c\uae30\ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_32","text":"template < class T > class Vector { public : // ... virtual int size () const { return sz ; } // bad: \ud30c\uc0dd \ud074\ub798\uc2a4\uc5d0\uc11c \ub2e4\ub978 \ubb34\uc2a8 \uc77c\uc744 \ud558\uaca0\ub294\uac00? private : T * elem ; // the elements int sz ; // number of elements }; \uc774\ub7f0 \"vector\"\ub294 \uae30\ubcf8 \ud074\ub798\uc2a4\ub85c \uc0ac\uc6a9\ub418\ub294 \uac83\uc744 \uc804\ud600 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\ub2e4.","title":"Example, bad"},{"location":"Class/#enforcement_63","text":"\uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c0\uc9c0\ub9cc \ud30c\uc0dd \ud074\ub798\uc2a4\uac00 \uc5c6\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. \ubaa8\ub4e0 \uba64\ubc84 \ud568\uc218\uac00 \uac00\uc0c1 \ud568\uc218\uc774\uace0 \uad6c\ud604\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c133-protected","text":"","title":"C.133: protected \ub370\uc774\ud130\ub97c \uc9c0\uc591\ud558\ub77c"},{"location":"Class/#reason_67","text":"protected \ub370\uc774\ud130\ub294 \ubcf5\uc7a1\uc131\uacfc \uc5d0\ub7ec\uc758 \uc6d0\uc778\uc774\ub2e4. protected \ub370\uc774\ud130\ub294 \ubd88\ubcc0\uc870\uac74\uc758 \uad6c\ubb38\uc744 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e0\ub2e4. protected \ub370\uc774\ud130\ub294 \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ub370\uc774\ud130\ub97c \ubc30\uce58\ud568\uc73c\ub85c\uc368 \ud544\uc5f0\uc801\uc73c\ub85c \uac00\uc0c1 \uc0c1\uc18d\uc744 \ucc98\ub9ac\ud574\uc57c \ud558\ub294 \uc0c1\ud669\uc73c\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_33","text":"class Shape { public : // ... interface functions ... protected : // data for use in derived classes: Color fill_color ; Color edge_color ; Style st ; }; \uc774 \uc608\uc5d0\uc11c \ubaa8\ub4e0 Shape \uc758 \ud558\uc704 \ud0c0\uc785\ub4e4\uc740 protected \ub370\uc774\ud130\ub97c \uc815\ud655\ud558\uac8c \ubcc0\uacbd\ud574\uc57c\ub9cc \ud55c\ub2e4. \ud754\ud788 \ubcfc\uc218 \uc788\uc73c\uba74\uc11c \uc720\uc9c0\ubcf4\uc218 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a4\ub294 \uc8fc\uc694 \uc6d0\uc778 \uc911 \ud558\ub098\uc5d0 \ud574\ub2f9\ud55c\ub2e4. \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uac00 \ud070 \uacbd\uc6b0, \uc77c\uad00\uc801\uc73c\ub85c protected \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ucf54\ub4dc\uac00 \uc591\uc801\uc73c\ub85c \ub9ce\uace0 \ubd84\uc0b0\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 \uad00\ub9ac\ub418\uae30 \uc5b4\ub835\ub2e4. \uc0c1\uc18d\ub418\ub294 \ub370\uc774\ud130\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4\ub294 \ub354 \ub298\uc5b4\ub0a0 \uc218 \uc788\ub2e4: \uc0c8\ub85c \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc544 protected \ub370\uc774\ud130\ub97c \ubcc0\uacbd\ud558\uae30 \uc2dc\uc791\ud560 \uc218 \uc788\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc120 \ud074\ub798\uc2a4\ub4e4\uc758 \uc804\uccb4 \uc9d1\ud569\uc744 \ucc3e\ub294 \uac83\uc774 \ubd88\uac00\ub2a5\ud560\uc218\ub3c4 \uc788\ub2e4. \uc774\ub85c \uc778\ud574 \ud074\ub798\uc2a4\ub97c \ubcc0\uacbd\ud558\ub294 \uac83\uc744 \uc2e4\ud589\ud560 \uc218 \uc5c6\uc744 \uc218\ub3c4 \uc788\ub2e4. protected \ub370\uc774\ud130\uc5d0\ub294 \ubd88\ubcc0\uc870\uac74\uc744 \uac15\uc694\ud560 \uc218 \uc5c6\ub2e4; \uc804\uc5ed\ubcc0\uc218 \uc9d1\ud569\uacfc \uac19\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4. protected \ub370\uc774\ud130\ub294 \ucf54\ub4dc \uaddc\ubaa8\uac00 \ucee4\uc9c0\uba74 \uc2e4\uc81c\ub85c \uc804\uc5ed\ubcc0\uc218\uac00 \ub41c\ub2e4.","title":"Example, bad"},{"location":"Class/#note_65","text":"\ub370\uc774\ud130\ub97c protected\ub97c \uc0ac\uc6a9\ud574 \uc0c1\uc18d\ud558\ub294 \uac83\uc740 \uc784\uc758\uc801\uc73c\ub85c \uac1c\uc120\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uac8c \ud55c\ub2e4\ub294 \uc810\uc5d0\uc11c \ub9e4\ub825\uc801\uc73c\ub85c \ubcf4\uc77c \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub85c \uc778\ud574 \uc81c\uc5b4\ub418\uc9c0 \uc54a\ub294 \ubcc0\uacbd\uacfc \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uac8c \ub41c\ub2e4. \uc798 \uc815\uc758\ub418\uace0 \ubd88\ubcc0\uc870\uac74\uc744 \uac15\uc694\ud558\ub3c4\ub85d private \ub370\uc774\ud130\ub97c \uc120\ud638\ud558\ub77c \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294, \uc778\ud130\ud398\uc774\uc2a4 \ud074\ub798\uc2a4\ub294 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c .","title":"Note"},{"location":"Class/#note_66","text":"protected \uba64\ubc84 \ud568\uc218\uc5d0\ub294 \ubb38\uc81c\uac00 \uc5c6\ub2e4.","title":"Note"},{"location":"Class/#enforcement_64","text":"protected \ub370\uc774\ud130\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c134-const","text":"","title":"C.134: const\uac00 \uc544\ub2cc \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc774 \uac19\uc740 \uc811\uadfc \ub808\ubca8\uc744 \uac00\uc9c0\ub3c4\ub85d \ud558\ub77c"},{"location":"Class/#reason_68","text":"\uc0dd\uac01\ud558\uae30\uc5d0 \ud63c\ub780\uc2a4\ub7fd\uc9c0 \uc54a\uc544 \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. const \uba64\ubc84\ub4e4\uc774 \uc11c\ub85c \ub2e4\ub978 \uc811\uadfc \ub808\ubca8\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\uba74, \uadf8 \ud0c0\uc785\uc774 \uc5b4\ub5a4 \uc77c\uc744 \ud558\ub294 \uac83\uc778\uc9c0 \ud63c\ub780\uc2a4\ub7ec\uc6b8 \uac83\uc774\ub2e4. \ud0c0\uc785\uc774 \ubd88\ubcc0\uc870\uac74\uc744 \uc720\uc9c0\ud558\uae30 \uc704\ud55c \uac83\uc778\uac00? \ud639\uc740 \ub2e8\uc21c\ud788 \uac12\uc758 \uc9d1\ud569\uc744 \ud45c\ud604\ud55c \uac83\uc778\uac00?","title":"Reason"},{"location":"Class/#discussion_2","text":"\ud558\ub098\uc758 \ubcc0\uc218\uc5d0 \ub300\ud574 \uc5b4\ub5a4 \ucf54\ub4dc\uac00 \uc720\uc758\ubbf8\ud558\uace0 \uc815\ud655\ud55c \uac12\uc744 \uad00\ub9ac\ud558\ub294 \ucc45\uc784\uc774 \uc788\ub294\uc9c0 \uace0\ubbfc\ud574\uc57c \ud55c\ub2e4. \ub370\uc774\ud130 \uba64\ubc84\uc5d0\ub294 2\uac00\uc9c0 \uc885\ub958\uac00 \uc788\ub2e4: A: \uac1c\uccb4\uc758 \ubd88\ubcc0\uc870\uac74\uacfc \ubb34\uad00\ud55c \uacbd\uc6b0. \uc774 \uba64\ubc84\ub4e4\uc774 \uc5b4\ub5a4 \uac12(\ud639\uc740 \uac12\uc758 \uc870\ud569)\uc744 \uac00\uc838\ub3c4 \uc720\ud6a8\ud558\ub2e4 B: \uac1c\uccb4\uc758 \ubd88\ubcc0\uc870\uac74\uc73c\ub85c \uae30\ub2a5\ud558\ub294 \uacbd\uc6b0, \ubaa8\ub4e0 \uac12\uc758 \uc870\ud569\uc774 \uc758\ubbf8\ub97c \uac00\uc9c0\uc9c0\ub294 \uc54a\ub294\ub2e4. \ub530\ub77c\uc11c \uc774 \ubcc0\uc218\ub4e4\uc758 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \ubaa8\ub4e0 \ucf54\ub4dc\ub294 \ubd88\ubcc0\uc870\uac74\uc744 \uc54c\uace0, \uc720\uc9c0\ud558\uae30 \uc704\ud55c \uaddc\uce59\ub4e4\uc744 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. A \uadf8\ub8f9\uc5d0 \uc18d\ud558\ub294 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc740 \ub2e8\uc21c\ud788 public (\ud639\uc740, \ub4dc\ubb3c\uc9c0\ub9cc \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \ubcfc \uc218 \uc788\ub3c4\ub85d protected )\uc774\uba74 \ub41c\ub2e4. \ucea1\uc290\ud654\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4. \uba64\ubc84\ub97c \ubcfc \uc218 \uc788\ub294 \ucf54\ub4dc\ub294 \uc774\ub4e4\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. B \uadf8\ub8f9\uc5d0 \uc18d\ud558\ub294 \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc740 private \ud639\uc740 const \uc5ec\uc57c \ud55c\ub2e4. \uc774 \uacbd\uc6b0\uc5d0\ub294 \ucea1\uc290\ud654\uac00 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub4e4\uc774 private \uc774\ub098 const \uac00 \uc544\ub2c8\ub77c\ub294 \uac83\uc740 \uac1c\uccb4\uac00 \uc790\uc2e0\uc758 \uc0c1\ud0dc\ub97c \uad00\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc758\ubbf8\uac00 \ub41c\ub2e4: \ud074\ub798\uc2a4\uc758 \ub2e4\ub978 \ucf54\ub4dc\ub4e4\uc774 \ubd88\ubcc0\uc870\uac74\uc744 \uc54c\uace0 \uc815\ud655\ud558\uac8c \uc720\uc9c0\ud574\uc57c \ud55c\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub7f0 \ucf54\ub4dc\uac00 \uc81c\ud55c\uc5c6\uc774 \ub298\uc5b4\ub0a0 \uc218 \uc788\ub2e4. \uc774 \ubcc0\uc218\ub4e4\uc774 public \uc774 \ub418\uba74 \ubaa8\ub4e0 \uc0ac\uc6a9 \ucf54\ub4dc\uac00 \ubd88\ubcc0\uc870\uac74\uc744 \uace0\ub824\ud574\uc57c \ud558\uba70, protected \uc774\ub77c\uba74 (\ud604\uc7ac\uc640 \ubbf8\ub798\uc758) \ubaa8\ub4e0 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc774 \ud3ec\ud568\ub41c\ub2e4. \uc774\ub294 \ub9dd\uac00\uc9c0\uae30 \uc27d\uace0 \uac15\ud558\uac8c \uacb0\ud569\ub41c \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uac8c \ub41c\ub2e4. \uc720\uc9c0\ubcf4\uc218\uac00 \uc545\ubabd\uacfc \uac19\uc744 \uac83\uc774\ub2e4. \uc758\ub3c4\uce58 \uc54a\uac8c \uc5b4\ub5a4 \ucf54\ub4dc\uac00 \ub370\uc774\ud130 \uba64\ubc84\ub97c \uc798\ubabb\ub41c(invalid) \uac12\uc73c\ub85c \ub9cc\ub4e4\uba74 \uac1c\uccb4\uc758 \ud604\uc7ac \uc0c1\ud0dc\uc640 \uc774\ud6c4\uc758 \uc0ac\uc6a9\uc5d0 \uc601\ud5a5\uc744 \uc904 \uac83\uc774\ub2e4. \ub300\ubd80\ubd84\uc758 \ud074\ub798\uc2a4\ub4e4\uc740 A\uc640 B\ub85c \uad6c\ubd84\ub41c\ub2e4: All public : \ubcc0\uc218\ub4e4\uc758 \ubd88\ubcc0\uc870\uac74\uc774 \uc5c6\ub294 \uc9d1\ud569\uc744 \ub9cc\ub4e0\ub2e4\uba74 \ubaa8\ub4e0 \ubcc0\uc218\uac00 public \uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 class \ubcf4\ub2e4\ub294 struct \ub85c \uc120\uc5b8\ud558\ub77c All private : \ubd88\ubcc0\uc870\uac74\uc774 \uc788\ub2e4\uba74, \ubaa8\ub4e0 const \uac00 \uc544\ub2cc \ubcc0\uc218\ub4e4\uc740 private \uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4 -- \ucea1\uc290\ud654 \ud558\ub77c","title":"Discussion"},{"location":"Class/#exception_9","text":"\uacbd\uc6b0\uc5d0 \ub530\ub77c\uc120 \ud074\ub798\uc2a4\ub4e4\uc774 \ub514\ubc84\uae45\uc744 \uc704\ud574 A\uc640 B\ub97c \ud63c\ud569\ud560 \uc218\ub3c4 \uc788\ub2e4. \ucea1\uc290\ud654\ub41c \uac1c\uccb4\uac00 const \uac00 \uc544\ub2cc \ub514\ubc84\uae45 \uc815\ubcf4\ub97c \ud3ec\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub294 \ubd88\ubcc0\uc870\uac74\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\uace0 -- \uac1c\uccb4\uac00 \uad00\ub9ac\ud558\ub294 \uac12\uc758 \uc77c\ubd80\uac00 \uc544\ub2c8\uace0 \uad00\ucc30\ub418\uc5b4\uc57c \ud558\ub294 \ubd80\ubd84\uc774 \uc544\ub2c8\uae30 \ub54c\ubb38\uc5d0 A\uc5d0 \uc18d\ud55c\ub2e4. \uc774\ub54c\ub294 A\uc5d0 \ud574\ub2f9\ud558\ub294 \uc601\uc5ed ( public \ud639\uc740 protected )\uc740 A \ucc98\ub7fc, \ub098\uba38\uc9c0 \uc601\uc5ed\uc740( private or const ) B \uadf8\ub8f9 \ucc98\ub7fc \uad00\ub9ac\ud558\uba74 \ub41c\ub2e4.","title":"Exception"},{"location":"Class/#enforcement_65","text":"const \uac00 \uc544\ub2cc \ub370\uc774\ud130 \uba64\ubc84\ub4e4\uc774 \uc11c\ub85c \ub2e4\ub978 \uc811\uadfc\ub808\ubca8\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\ub97c \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c135","text":"","title":"C.135: \uc11c\ub85c \ub2e4\ub978 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_69","text":"\ubaa8\ub4e0 \ud074\ub798\uc2a4\ub4e4\uc774 \ubaa8\ub4e0 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc744 \uc9c0\uc6d0\ud558\uc9c0\ub294 \uc54a\uc744 \uac83\uc774\ub2e4. \uadf8\ub9ac\uace0 \ubaa8\ub4e0 \ud638\ucd9c\uc790(caller)\ub4e4\uc774 \ubaa8\ub4e0 \uc5f0\uc0b0\ub4e4\uc744 \uc0ac\uc6a9\ud558\uae38 \uc6d0\ud558\uc9c0\ub3c4 \uc54a\uc744 \uac83\uc774\ub2e4. (\ub2e4\uc911 \uc0c1\uc18d\uc740) \ud2b9\ubcc4\ud788 \ub2e8\uc77c\ud55c(monolitic) \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc744 \ud30c\uc0dd \ud074\ub798\uc2a4\uac00 \uc9c0\uc6d0\ud558\ub294 \ub3d9\uc791\uc758 \"\uce21\uba74\"\ub4e4\ub85c \ub098\ub20c\ub54c \uc0ac\uc6a9\ud558\ub77c.","title":"Reason"},{"location":"Class/#example_52","text":"class iostream : public istream , public ostream { // \uad49\uc7a5\ud788 \ub2e8\uc21c\ud558\ub2e4 // ... }; istream \uc740 \uc785\ub825 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. ostream \uc740 \ucd9c\ub825 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. iostream \uc740 istream \uacfc ostream \uc778\ud130\ud398\uc774\uc2a4\ub97c \uacb0\ud569\ud558\uba74\uc11c \ub2e8\uc77c \uc2a4\ud2b8\ub9bc\uc5d0\uc11c\uc758 \uc785\ucd9c\ub825 \ub3d9\uae30\ud654\ub97c \uc81c\uacf5\ud55c\ub2e4.","title":"Example"},{"location":"Class/#note_67","text":"\ud558\ub098\uc758 \uad6c\ud604\uc5d0 \ub300\ud574 \uc5ec\ub7ec \ub2e4\ub978 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud544\uc694\ud55c \uacbd\uc6b0 \uc27d\uac8c \ubcfc \uc218 \uc788\ub2e4. \uadf8\ub7f0 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc740 \ud558\ub098\uc758 \uacc4\uce35\uad6c\uc870\ub85c \uc870\uc9c1\ud654\ud558\uae30 \uc27d\uc9c0 \uc54a\ub2e4.","title":"Note"},{"location":"Class/#note_68","text":"\uc774\ub7f0 \uc778\ud130\ud398\uc774\uc2a4\ub4e4\uc740 \ubcf4\ud1b5 \ucd94\uc0c1 \ud074\ub798\uc2a4\ub4e4\uc774\ub2e4.","title":"Note"},{"location":"Class/#enforcement_66","text":"???","title":"Enforcement"},{"location":"Class/#c136-attribute","text":"","title":"C.136: \uad6c\ud604 \ud2b9\uc131(attribute)\uc758 \uacb0\ud569\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_70","text":"Some forms of mixins have state and often operations on that state. If the operations are virtual the use of inheritance is necessary, if not using inheritance can avoid boilerplate and forwarding.","title":"Reason"},{"location":"Class/#example_53","text":"class iostream : public istream , public ostream { // very simplified // ... }; istream \uc740 \uc785\ub825 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. ostream \uc740 \ucd9c\ub825 \uc5f0\uc0b0\uc5d0 \ud544\uc694\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. iostream \uc740 istream \uacfc ostream \uc778\ud130\ud398\uc774\uc2a4\ub97c \uacb0\ud569\ud558\uba74\uc11c \ub2e8\uc77c \uc2a4\ud2b8\ub9bc\uc5d0\uc11c\uc758 \uc785\ucd9c\ub825 \ub3d9\uae30\ud654\ub97c \uc81c\uacf5\ud55c\ub2e4.","title":"Example"},{"location":"Class/#note_69","text":"\uc774\uac83\uc740 \uc0c1\ub300\uc801\uc73c\ub85c \ub4dc\ubb38 \uacbd\uc6b0\uc778\ub370, \uad6c\ud604\uc740 \uc885\uc885 \ub2e8\uc77c\ub8e8\ud2b8(single-root) \uacc4\uce35\uc73c\ub85c \uc870\uc9c1\ud654\ub420 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4.","title":"Note"},{"location":"Class/#example_54","text":"\uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 \"\uad6c\ud604 \ud2b9\uc131(implementation attribute)\"\uc774 \uad6c\ud604\uccb4\uc758 \ud589\uc704\ub97c \uacb0\uc815\ud558\uace0 \uad6c\ud604\uccb4\uac00 \uc694\uad6c\ubc1b\ub294 \uc815\ucc45\uc744 \ub530\ub974\ub3c4\ub85d \uba64\ubc84\ub97c \uc8fc\uc785\ud558\ub294 \"\ud63c\ud569(mixin)\" \ucc98\ub7fc \ubcf4\uc778\ub2e4. std::enable_shared_from_this \ud639\uc740 boost.intrusive\uc758 list_base_hook \ud639\uc740 intrusive_ref_counter \ub97c \uc608\ub85c \ub4e4 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Class/#enforcement_67","text":"???","title":"Enforcement"},{"location":"Class/#c137-virtual","text":"","title":"C.137: \uc9c0\ub098\uce58\uac8c \uc77c\ubc18\uc801\uc778 \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \ud53c\ud558\uae30 \uc704\ud574 virtual\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_71","text":"\uacf5\uc720 \ub370\uc774\ud130\uc640 \uc778\ud130\ud398\uc774\uc2a4\uc758 \ubd84\ub9ac\uac00 \uac00\ub2a5\ud558\uac8c \ub9cc\ub4e0\ub2e4. \uacf5\uc720 \ub370\uc774\ud130\uac00 \ucd5c\uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ubc30\uce58\ub418\ub294 \uac83\uc744 \ub9c9\ub294\ub2e4.","title":"Reason"},{"location":"Class/#example_55","text":"struct Interface { virtual void f (); virtual int g (); // ... no data here ... }; class Utility { // with data void utility1 (); virtual void utility2 (); // customization point public : int x ; int y ; }; class Derive1 : public Interface , virtual protected Utility { // override Interface functions // Maybe override Utility virtual functions // ... }; class Derive2 : public Interface , virtual protected Utility { // override Interface functions // Maybe override Utility virtual functions // ... }; Utility \ub97c \ucd94\ucd9c\ud558\ub294 \uac83\uc740 \uc218\ub9ce\uc740 \ud558\uc704 \ud074\ub798\uc2a4\ub4e4\uc774 \"\uad6c\ud604 \ub0b4\uc6a9(implementation details)\"\uc758 \ub9ce\uc740 \ubd80\ubd84\uc744 \uacf5\uc720\ud55c\ub2e4\uba74 \uc774\uce58\uc5d0 \ub9de\ub294 \uc791\uc5c5\uc774\ub2e4.","title":"Example"},{"location":"Class/#note_70","text":"\uc774 \uc608\uc2dc\ub294 \uba85\ubc31\ud788 \ub108\ubb34 \"\uc774\ub860\uc801\"\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc791\uc740 \uaddc\ubaa8 \uc758 \uc2e4\uc81c\uc801\uc778 \uc608\uc2dc\ub97c \ucc3e\uae30\ub294 \uc5b4\ub835\ub2e4. Interface \ub294 \uc778\ud130\ud398\uc774\uc2a4 \uacc4\uce35 \uc758 \uc815\uc810\uc774\uace0, Utility \ub294 \uad6c\ud604 \uacc4\uce35 \uc758 \uc815\uc810\uc774\ub2e4. \uc124\uba85\uc744 \ud3ec\ud568\ud55c \uc880 \ub354 \uc0ac\uc2e4\uc801\uc778 \uc608\uc2dc\ub294 \uc5ec\uae30\uc5d0 \uc788\ub2e4 .","title":"Note"},{"location":"Class/#note_71","text":"\ub54c\ub85c\ub294 \uacc4\uce35\uc744 \uc120\ud615\ud654(linearization)\ud558\ub294 \uac83\uc774 \ub098\uc740 \ubc29\ubc95\uc77c \uc218 \uc788\ub2e4","title":"Note"},{"location":"Class/#enforcement_68","text":"\uc778\ud130\ud398\uc774\uc2a4 \uacc4\uce35\uacfc \uad6c\ud604 \uacc4\uce35\uc774 \ud63c\uc7ac\ub41c \uacbd\uc6b0 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c138-using","text":"","title":"C.138: using\uc744 \uc0ac\uc6a9\ud574 \uc0c1\uc704/\ud558\uc704 \ud074\ub798\uc2a4\ub97c \uc704\ud55c \uc911\ubcf5 \uc815\uc758 \uc9d1\ud569\uc744 \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Class/#reason_72","text":"using \uc120\uc5b8\uc774 \uc5c6\uc73c\uba74, \ud558\uc704 \ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ud568\uc218\ub4e4\uc774 \uc0c1\uc18d\ubc1b\uc740 \uc911\ubcf5\uc815\uc758 \uc9d1\ud569\uc744 \ub36e\uc5b4\uc4f4\ub2e4(hide).","title":"Reason"},{"location":"Class/#example-bad_34","text":"#include <iostream> class B { public : virtual int f ( int i ) { std :: cout << \"f(int): \" ; return i ; } virtual double f ( double d ) { std :: cout << \"f(double): \" ; return d ; } }; class D : public B { public : int f ( int i ) override { std :: cout << \"f(int): \" ; return i + 1 ; } }; int main () { D d ; std :: cout << d . f ( 2 ) << '\\n' ; // prints \"f(int): 3\" std :: cout << d . f ( 2.3 ) << '\\n' ; // prints \"f(int): 3\" }","title":"Example, bad"},{"location":"Class/#example-good_6","text":"class D : public B { public : int f ( int i ) override { std :: cout << \"f(int): \" ; return i + 1 ; } using B :: f ; // exposes f(double) };","title":"Example, good"},{"location":"Class/#note_72","text":"\uc774 \uc774\uc288\ub294 \uac00\uc0c1/\ube44 \uac00\uc0c1 \uba64\ubc84 \ud568\uc218 \ubaa8\ub450\uc5d0 \uc801\uc6a9\ub41c\ub2e4. \uc0c1\uc704 \ud074\ub798\uc2a4\ub97c \uac00\ubcc0\uc801\uc73c\ub85c \uacb0\uc815\ud560 \uc218 \uc788\ub3c4\ub85d, C++17\uc740 \uac00\ubcc0 using \uc120\uc5b8\uc744 \ucd94\uac00\ud588\ub2e4(introduced). template < class ... Ts > struct Overloader : Ts ... { using Ts :: operator ()...; // exposes operator() from every base };","title":"Note"},{"location":"Class/#enforcement_69","text":"\uc774\ub984\uc744 \ub36e\uc5b4\uc4f0\ub294 \uacbd\uc6b0\ub97c \ucc3e\uc544\ub0b8\ub2e4","title":"Enforcement"},{"location":"Class/#c139-final","text":"","title":"C.139: final\uc740 \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_73","text":"final \uc740 \uacc4\uce35\uad6c\uc870\uc758 \ud655\uc7a5\uc131\uc744 \uc800\ud574\ud55c\ub2e4\ub294 \uc810 \ub54c\ubb38\uc5d0 \ud544\uc694\ud55c \uacbd\uc6b0\uac00 \uac70\uc758 \uc5c6\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_35","text":"class Widget { /* ... */ }; // nobody will ever want to improve My_widget (or so you thought) class My_widget final : public Widget { /* ... */ }; class My_improved_widget : public My_widget { /* ... */ }; // error: can't do that","title":"Example, bad"},{"location":"Class/#note_73","text":"\ubaa8\ub4e0 \ud074\ub798\uc2a4\uac00 \uc0c1\uc704 \ud074\ub798\uc2a4\ub85c\uc368 \uc791\uc131\ub418\uc9c0\ub294 \uc54a\ub294\ub2e4. \ub300\ubd80\ubd84\uc758 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud074\ub798\uc2a4\ub4e4\uc774 \uc774\ub7f0 \uacbd\uc6b0\uc5d0 \uc18d\ud55c\ub2e4 (\uc608\ucee8\ub300, std::vector \uc640 std::string \ub294 \ud558\uc704 \ud074\ub798\uc2a4\ub97c \uace0\ub824\ud558\uc9c0 \uc54a\ub294\ub2e4). \uc774 \uaddc\uce59\uc740 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 \ub0b4\uc5d0\uc11c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ub3d9\uc791\ud558\ub294 \uac00\uc0c1 \ud568\uc218\ub4e4\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\ub4e4\uc5d0 final \uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uc5d0 \ub300\ud55c \uac83\uc774\ub2e4.","title":"Note"},{"location":"Class/#note_74","text":"\uac00\uc0c1 \ud568\uc218\ub4e4\uc744 final \ub85c \ub9c8\uac10\ud558\ub294 \uac83\uc740 final \uc774 \ud568\uc218\ub4e4\uc758 \uc815\uc758/\uc7ac\uc815\uc758\ub97c \ucc3e\uc544\ub0b4\uc9c0 \ubabb\ud558\ub3c4\ub85d \ud558\uae30 \ub54c\ubb38\uc5d0 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \uc6b4\uc88b\uac8c\ub3c4, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774\ub7f0 \uc2e4\uc218\ub97c \ucc3e\uc544\ub0b8\ub2e4: \ud558\uc704 \ud074\ub798\uc2a4\uc758 final \uc744 \ub2e4\uc2dc \uc120\uc5b8\ud558\uac70\ub098 \uc7ac\uc815\uc758\ud560 \uc218 \uc5c6\ub2e4.","title":"Note"},{"location":"Class/#note_75","text":"final \ub85c \uc131\ub2a5\uc774 \uac1c\uc120\ub420 \uac83\uc774\ub77c\ub294 \uc8fc\uc7a5\uc5d0\ub294 \uadfc\uac70\uac00 \uc5c6\ub2e4. \ub300\ubd80\ubd84 \uadf8\ub7f0 \uc8fc\uc7a5\uc740 \ucd94\uce21\uc774\uac70\ub098 \ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c\uc758 \uacbd\ud5d8\uc5d0 \uadfc\uac70\ud55c \uac83\uc774\ub2e4. final \uc774 \ub17c\ub9ac\uc801\uc778 \uc774\uc720\uc640 \uc131\ub2a5 \uce21\uba74\uc5d0\uc11c \uc911\uc694\ud55c \uc608\uc2dc\uac00 \uc788\ub2e4. \ucef4\ud30c\uc77c\ub7ec\ub098 \uc5b8\uc5b4 \ubd84\uc11d \ub3c4\uad6c\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 (\uc131\ub2a5\uae30\uc900\uc774 \ub192\uc740) AST \uacc4\uce35 \uc2dc\uac04\uc774 \uc9c0\ub098\ub3c4 \uc0c8\ub85c\uc6b4 \ud558\uc704 \ud074\ub798\uc2a4\uac00 \ucd94\uac00\ub418\uc9c0 \uc54a\uace0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uad6c\ud604\uc790\uc5d0 \uc758\ud574\uc11c\ub9cc \ucd94\uac00\ub41c\ub2e4 \ud558\uc9c0\ub9cc \uc798\ubabb \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uac00 \ud6e8\uc52c \ub354 \ub9ce\ub2e4.","title":"Note"},{"location":"Class/#enforcement_70","text":"final \uc744 \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c140","text":"","title":"C.140: \uac00\uc0c1 \ud568\uc218\uc640 \uadf8 \uad6c\ud604 \ud568\uc218\uc5d0 \uc11c\ub85c \ub2e4\ub978 \uae30\ubcf8 \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Class/#reason_74","text":"\ud63c\ub780\uc744 \uc77c\uc73c\ud0a8\ub2e4: \uc7ac\uc815\uc758\ud55c \ucf54\ub4dc\uac00 \uae30\ubcf8 \uc778\uc790\ub97c \uc0c1\uc18d\ubc1b\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_36","text":"class Base { public : virtual int multiply ( int value , int factor = 2 ) = 0 ; }; class Derived : public Base { public : int multiply ( int value , int factor = 10 ) override ; }; Derived d ; Base & b = d ; b . multiply ( 10 ); // these two calls will call the same function but d . multiply ( 10 ); // with different arguments and so different results","title":"Example, bad"},{"location":"Class/#enforcement_71","text":"\uac00\uc0c1\ud568\uc218\uc758 \uae30\ubcf8\uc778\uc790\uac00 \uc0c1\uc704/\ud558\uc704 \ud074\ub798\uc2a4\uc758 \uc120\uc5b8\uc5d0\uc11c \uc11c\ub85c \ub2e4\ub974\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#chier-access","text":"","title":"C.hier-access: \uacc4\uce35 \uad6c\uc870 \ub0b4 \uac1c\uccb4 \uc811\uadfc"},{"location":"Class/#c145","text":"","title":"C.145: \ub2e4\ud615\uc801\uc778 \uac1c\uccb4\ub4e4\uc740 \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub97c \ud1b5\ud574 \uc811\uadfc\ud558\ub77c"},{"location":"Class/#reason_75","text":"\uac00\uc0c1 \ud568\uc218\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\uac00 \uc788\ub2e4\uba74, \ub2f9\uc2e0\uc740 (\uc77c\ubc18\uc801\uc73c\ub85c) \uc5b4\ub5a4 \ud074\ub798\uc2a4\uac00 \uc2e4\ud589\ub420 \ud568\uc218\ub97c \uc81c\uacf5\ud560\uc9c0 \uc54c \uc218 \uc5c6\ub2e4.","title":"Reason"},{"location":"Class/#example_56","text":"struct B { int a ; virtual int f (); }; struct D : B { int b ; int f () override ; }; void use ( B b ) { D d ; B b2 = d ; // \ubcf5\uc0ac \uc190\uc2e4(slice) B b3 = b ; } void use2 () { D d ; use ( d ); // \ubcf5\uc0ac \uc190\uc2e4(slice) } Both d s are sliced.","title":"Example"},{"location":"Class/#exception_10","text":"\uac1c\uccb4\uac00 \uc815\uc758\ub41c \ubc94\uc704 \uc548\uc5d0\uc11c\ub294 \uc774\ub984\uc774 \uc788\ub294 \ub2e4\ud615\uc801 \uac1c\uccb4\uc5d0 \uc548\uc804\ud558\uac8c \uc811\uadfc\ud560 \uc218 \uc788\ub2e4. \ub2e8\uc9c0 \ubcf5\uc0ac \uc190\uc2e4\uc774 \uc0dd\uae30\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c. void use3 () { D d ; d . f (); // OK }","title":"Exception"},{"location":"Class/#enforcement_72","text":"\ubaa8\ub4e0 \uc808\ub2e8(slicing)\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c146-dynamic_cast","text":"","title":"C.146: \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 \ud0d0\uc0c9\uc774 \ubd88\uac00\ud53c\ud55c \uacbd\uc6b0\uc5d0\ub9cc dynamic_cast\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_76","text":"dynamic_cast \ub294 \uc2e4\ud589\uc2dc\uac04\uc5d0 \uac80\uc0ac\ub41c\ub2e4.","title":"Reason"},{"location":"Class/#example_57","text":"struct B { // \uc778\ud130\ud398\uc774\uc2a4 virtual void f (); virtual void g (); }; struct D : B { // \ud655\uc7a5\ub41c \uc778\ud130\ud398\uc774\uc2a4 void f () override ; virtual void h (); }; void user ( B * pb ) { if ( D * pd = dynamic_cast < D *> ( pb )) { // ... D\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4 ... } else { // ... B\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4 ... } } \ub2e4\ub978 \uce90\uc2a4\ud305 \ubc29\ubc95\uc740 \ud0c0\uc785 \uc548\uc804\uc131\uc744 \ud574\uce58\uace0 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\uc81c\ub85c X \uc778 \ubcc0\uc218\ub97c Z \ucc98\ub7fc \uc0ac\uc6a9\ud558\uac8c \ub9cc\ub4e0\ub2e4: void user2 ( B * pb ) // bad { D * pd = static_cast < D *> ( pb ); // I know that pb really points to a D; trust me // ... use D's interface ... } void user3 ( B * pb ) // unsafe { if ( some_condition ) { D * pd = static_cast < D *> ( pb ); // I know that pb really points to a D; trust me // ... use D's interface ... } else { // ... make do with B's interface ... } } void f () { B b ; user ( & b ); // OK user2 ( & b ); // bad error user3 ( & b ); // OK *if* the programmer got the some_condition check right }","title":"Example"},{"location":"Class/#note_76","text":"\ub2e4\ub978 \ubaa8\ub4e0 \uce90\uc2a4\ud305\ucc98\ub7fc, dynamic_cast \ub294 \ub108\ubb34 \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4. \uce90\uc2a4\ud305 \ubcf4\ub2e4\ub294 \uac00\uc0c1 \ud568\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c . \uac00\ub2a5\ud55c \ud55c \ud074\ub798\uc2a4 \uacc4\uce35\uc744 \ud0d0\uc0c9\ud558\ub294 \uac83\ubcf4\ub2e4 \uc815\uc801 \ub2e4\ud615\uc131(\ub9c1\ud06c \uc5c6\uc74c) \uc744 \uc120\ud638\ud558\ub77c. \uc774\ub807\uac8c \ud558\uba74 \uc2e4\ud589\uc2dc\uac04 \uacb0\uc815\uc774 \ud544\uc694\uc5c6\ub2e4. \uadf8\ub9ac\uace0 \ucda9\ubd84\ud788 \ud3b8\ub9ac\ud558\ub2e4.","title":"Note"},{"location":"Class/#note_77","text":"typeid \uac00 \ub354 \uc801\uc808\ud55c\ub370 dynamic_cast \ub97c \uc4f0\ub294 \uc0ac\ub78c\ub4e4\uc774 \uc788\ub2e4; dynamic_cast \ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uc54c\ub824\uc9c4 (\uac1c\uccb4\uc5d0 \uac00\uc7a5 \uc801\ud569\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \ucc3e\uae30 \uc704\ud55c) \"is kind of\" \uc5f0\uc0b0\uc774\ub2e4. \ubc18\uba74 typeid \ub294 \"\uc774 \uac1c\uccb4\uc758 \uc815\ud655\ud55c \ud0c0\uc785\uc744 \ucc3e\ub294\" \uc5f0\uc0b0\uc774\ub2e4. \ud6c4\uc790\ub294 \ub2e8\uc21c\ud558\uace0 \ub354 \ube60\ub974\uac8c \ucc98\ub9ac\ub420 \uac83\uc774 \ubd84\uba85\ud558\ub2e4. typeid \ub294 \ud544\uc694\ud558\ub2e4\uba74 \uc27d\uac8c \uc791\uc131\ud560 \uc218 \uc788\ub2e4(\ubaa8\uc885\uc758 \uc774\uc720\ub85c RTTI\uac00 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74). dynamic_cast \ub294 \ubcf4\ud1b5 \uc815\ud655\ud558\uac8c \uad6c\ud604\ud558\uae30 \ud6e8\uc52c \uc5b4\ub835\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uc608\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: struct B { const char * name { \"B\" }; // if pb1->id() == pb2->id() *pb1 is the same type as *pb2 virtual const char * id () const { return name ; } // ... }; struct D : B { const char * name { \"D\" }; const char * id () const override { return name ; } // ... }; void use () { B * pb1 = new B ; B * pb2 = new D ; cout << pb1 -> id (); // \"B\" cout << pb2 -> id (); // \"D\" if ( pb1 -> id () == \"D\" ) { // looks innocent D * pd = static_cast < D *> ( pb1 ); // ... } // ... } pb2->id() == \"D\" \uc758 \uacb0\uacfc\ub294 \uc2e4\uc81c\ub85c\ub294 \uad6c\ud604\uc5d0 \uc758\ud574 \uacb0\uc815\ub41c \uac83\uc774\ub2e4. \uc774\ub294 \uc9c1\uc811 \uc791\uc131\ud55c RTTI\uc758 \uc704\ud5d8\uc744 \uacbd\uace0\ud558\uae30 \uc704\ud55c \uc608\uc2dc\ub2e4. \uc218\ub144\uac04 \uc774 \ucf54\ub4dc\uac00 \uae30\ub300\ud55c \ub300\ub85c \ub3d9\uc791\ud560\uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc0c8\ub85c\uc6b4 \uae30\uacc4, \ucef4\ud30c\uc77c\ub7ec, \ud639\uc740 \ub9c1\ucee4\uc5d0\uc11c \uc18c\uc2a4\ucf54\ub4dc \ub0b4 \ubb38\uc790(character literals)\ub97c \ud1b5\uc77c\ud558\uc9c0 \uc54a\uc73c\uba74 \uc2e4\ud328\ud558\uac8c \ub41c\ub2e4. RTTI\ub97c \uc9c1\uc811 \uad6c\ud604\ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc8fc\uc758\ud558\ub77c.","title":"Note"},{"location":"Class/#exception_11","text":"\ub9cc\uc57d \ub2f9\uc2e0\uc758 \uad6c\ud604 \ucf54\ub4dc\uc5d0 \uc815\ub9d0\ub85c \ub290\ub9b0 dynamic_cast \uac00 \uc788\ub2e4\uba74, \ub2e4\ub978 \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c \ud560 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc815\uc801\uc73c\ub85c \ud074\ub798\uc2a4\ub97c \uacb0\uc815\ud560 \uc218 \uc5c6\ub294 \ubaa8\ub4e0 \ub300\uc548\uc740 \uba85\uc2dc\uc801 \uce90\uc2a4\ud305(\uc77c\ubc18\uc801\uc73c\ub85c static_cast )\uc744 \ud3ec\ud568\ud558\uace0, \uc5d0\ub7ec\uc5d0 \ucde8\uc57d\ud558\ub2e4. \ub2f9\uc2e0\ub9cc\uc758 \ud2b9\ubcc4\ud55c dynamic_cast \ub97c \ub9cc\ub4e4\uc218\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub2c8, dynamic_cast \uac00 \uc815\ub9d0\ub85c \ub2f9\uc2e0\uc774 \uc0dd\uac01\ud558\ub294 \uac83 \ub9cc\ud07c \ub290\ub9ac\ub2e4\ub294 \uac83\uc744 \ud655\uc2e4\ud788\ud558\ub77c. (\uadfc\uac70 \uc5c6\ub294 \ub8e8\uba38\ub4e4\uc774 \uaf64 \uc788\ub2e4.) \uadf8\ub9ac\uace0 dynamic_cast \uc758 \uc0ac\uc6a9\uc774 \uc815\ub9d0\ub85c \uc131\ub2a5\uc5d0 \uce58\uba85\uc801\uc774\ub77c\ub294 \uac83 \ub610\ud55c \ud655\uc778\ud558\ub77c. \uc774\ub294 dynamic_cast \uc758 \ud604\uc7ac \uad6c\ud604\uc774 \ubd88\ud544\uc694\ud558\uac8c \ub290\ub9b0 \uacbd\uc6b0\uc5d0 \ub300\ud55c \uac83\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc801\uc808\ud55c \uc870\uac74 \ud558\uc5d0\uc11c\ub294, dynamic_cast \ub97c O(1)\uc2dc\uac04 \ub0b4\ub85c \uc218\ud589 \ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc, \ucd5c\uc801\ud654\ub97c \uc704\ud574 \ub178\ub825\ud560 \uac00\uce58\uac00 \uc788\ub2e4\ub294\ub370 \ubaa8\ub450\uac00 \ub3d9\uc758\ud558\uc9c0 \uc54a\uc73c\uba74 \ud638\ud658\uc131\uc740 \ucf54\ub4dc \ubcc0\uacbd\uc744 \uc5b4\ub835\uac8c \ud55c\ub2e4. \ub9e4\uc6b0 \ub4dc\ubb3c\uac8c, dynamic_cast \uc758 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubb38\uc81c\uac00 \ub41c\ub2e4\uba74, \ud558\ud5a5 \uce90\uc2a4\ud305\uc774 \uc131\uacf5\ud55c\ub2e4\uace0 \uc815\uc801\uc73c\ub85c \ubcf4\uc7a5\ub418\ub294 \ub2e4\ub978 \ubc29\ubc95\uc744 \uc4f8 \uc218\ub3c4 \uc788\ub2e4 (\uc608\ub97c \ub4e4\uc5b4 Curiously Recurring Template Pattern\uc744 \uc8fc\uc758\ud574\uc11c \uc4f0\ub294 \ubc29\ubc95\ucc98\ub7fc). \uac00\uc0c1 \uc0c1\uc18d\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ud655\uc2e4\ud55c \uc8fc\uc11d\uacfc \ud568\uaed8 static_cast \uc5d0 \uc758\uc874\ud558\uac70\ub098 \uc2dc\uc2a4\ud15c\uc774 \uc815\ud655\uc131\uc744 \uac80\uc99d\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc720\uc9c0\ubcf4\uc218\uc5d0 \uc0ac\ub78c\uc774 \ud544\uc694\ud558\ub2e4\ub294 \uc870\ud56d\uc744 \uc791\uc131\ud558\ub77c. \uadf8\ub807\uac8c \ud558\ub354\ub77c\ub3c4, \uc6b0\ub9ac \uacbd\ud5d8\uc73c\ub85c \ubbf8\ub8e8\uc5b4 \"\ub098\ub294 \uc9c0\uae08 \ubb58 \ud558\ub294\uc9c0 \ubab0\ub77c\uc694\"\ub294 \ubc84\uadf8\uc758 \uadfc\uc6d0\uc774\ub2e4.","title":"Exception"},{"location":"Class/#exception_12","text":"\ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub294 \uc608\uc678\ub85c \ubcfc \uc218 \uc788\ub2e4: template < typename B > class Dx : B { // ... };","title":"Exception"},{"location":"Class/#enforcement_73","text":"\ubaa8\ub4e0 \ud558\uc704 \ud0c0\uc785\uc73c\ub85c\uc758 static_cast \ub97c \uc9c0\uc801\ud558\ub77c. static_cast \ub97c \uc218\ud589\ud558\ub294 C \uc2a4\ud0c0\uc77c \ubcc0\ud658\ub3c4 \ud3ec\ud568\ud558\ub77c \uc774 \uaddc\uce59\uc740 \ud0c0\uc785 \uc548\uc804\uc131 \uaddc\uce59\ub4e4\uc758 \uc77c\ubd80\uc774\ub2e4","title":"Enforcement"},{"location":"Class/#c147-dynamic_cast","text":"","title":"C.147: \ud544\uc694\ud55c \ud074\ub798\uc2a4\ub97c \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uac00 \uc624\ub958\uc5d0 \ud574\ub2f9\ud558\ub294 \uacbd\uc6b0 dynamic_cast\ub97c \ucc38\uc870 \ud0c0\uc785\uc5d0 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_77","text":"\ucc38\uc870\uc790\uc5d0 \ub300\ud55c \uce90\uc2a4\ud305\uc740 \ub2f9\uc2e0\uc774 \uc815\uc0c1\uc801\uc778 \uac1c\uccb4\ub97c \uc5bb\ub294 \uac83\uc744 \uc758\ub3c4\ud588\uc74c\uc744 \ud45c\ud604\ud55c\ub2e4. \ub530\ub77c\uc11c \uce90\uc2a4\ud305\uc740 \ubc18\ub4dc\uc2dc \uc131\uacf5\ud574\uc57c\ub9cc \ud55c\ub2e4. dynamic_cast \ub294 \ub9cc\uc57d \uc2e4\ud328\ud55c\ub2e4\uba74 \uc608\uc678\ub97c \ub358\uc9c8 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example_58","text":"???","title":"Example"},{"location":"Class/#enforcement_74","text":"???","title":"Enforcement"},{"location":"Class/#c148-dynamic_cast","text":"","title":"C.148: \ud544\uc694\ud55c \ud074\ub798\uc2a4\ub97c \ucc3e\uc9c0 \ubabb\ud55c \uacbd\uc6b0\uac00 \ub300\uc548\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 dynamic_cast\ub97c \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_78","text":"dynamic_cast \ub294 \ud3ec\uc778\ud130\uac00 \uacc4\uce35\uad6c\uc870 \ub0b4\uc5d0\uc11c \ub2e4\ud615\uc801 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\ub294\uc9c0 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc900\ub2e4. \ud574\ub2f9 \ud074\ub798\uc2a4\ub97c \ucc3e\ub294\ub370 \uc2e4\ud328\ud560 \uacbd\uc6b0 \ub2e8\uc21c\ud788 null \uac12\uc744 \ubc18\ud658\ud558\uae30 \ub54c\ubb38\uc5d0, \uc2e4\ud589\uc2dc\uac04\uc5d0 \uac80\uc0ac\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\ub2e4. \uc774 \ub355\ubd84\uc5d0 \ucc38\uc0c9 \uacb0\uacfc\uc5d0 \ub530\ub77c \ub2e4\ub978 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud558\ub2e4. C.147 \ud56d\ubaa9\uacfc \ubc18\ub300\ub85c, \ud0d0\uc0c9 \uc2e4\ud328\uac00 \uc624\ub958\ub77c\uba74, \uc870\uac74\ubd80 \uc2e4\ud589\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4.","title":"Reason"},{"location":"Class/#example_59","text":"\uc544\ub798\uc758 \uc608\uc2dc\ub294 Shape_owner \uc758 add \ud568\uc218\uac00 \uc0dd\uc131\ub41c Shape \uc758 \uc18c\uc720\uad8c\uc744 \uac00\uc838\uac00\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uac1c\uccb4\ub4e4\uc740 \uae30\ud558\ud559\uc801 \ud2b9\uc131\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c\ub2e4. \uc774 \uc608\uc2dc\uc5d0\uc120, Shape \ub294 Geometric_attributes \ub97c \uc0c1\uc18d\ud558\uc9c0 \uc54a\ub294\ub2e4. void add ( Shape * const item ) { // Ownership is always taken owned_shapes . emplace_back ( item ); // Check the Geometric_attributes and add the shape to none/one/some/all of the views if ( auto even = dynamic_cast < Even_sided *> ( item )) { view_of_evens . emplace_back ( even ); } if ( auto trisym = dynamic_cast < Trilaterally_symmetrical *> ( item )) { view_of_trisyms . emplace_back ( trisym ); } }","title":"Example"},{"location":"Class/#notes_1","text":"\ud0d0\uc0c9 \uc2e4\ud328\ub85c \uc778\ud574 dynamic_cast \uc774 null\uc744 \ubc18\ud658\ud558\uae30 \ub54c\ubb38\uc5d0, null \ud3ec\uc778\ud130 \ucc38\uc870\uac00 \ubc1c\uc0dd\ud558\uace0 \ubbf8\uc815\uc758 \ub3d9\uc791\uc73c\ub85c \uc774\uc5b4\uc9c8 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c dynamic_cast \uc758 \uacb0\uacfc\ub294 \ud56d\uc0c1 null \uac12\uc778\uc9c0 \uac80\uc0ac\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Notes"},{"location":"Class/#enforcement_75","text":"(\ubcf5\uc7a1\ud568) dynamic_cast \uc758 \ud3ec\uc778\ud130 \ud0c0\uc785 \ubc18\ud658\uc744 \uac80\uc0ac\ud558\ub294 \ucf54\ub4dc\uac00 \uc5c6\uc73c\uba74, \uadf8 \ud3ec\uc778\ud130\uc758 \uc0ac\uc6a9\uc744 \uacbd\uace0\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c149-unique_ptr-shared_ptr","text":"","title":"C.149: \ub3d9\uc801 \ud560\ub2f9\ud55c \uac1c\uccb4\uc758 \uc18c\uba78\uc744 \uc78a\uc9c0 \uc54a\ub3c4\ub85d unique_ptr \ud639\uc740 shared_ptr\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_79","text":"\uc790\uc6d0 \ub204\uc218\ub97c \ubc29\uc9c0\ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_60","text":"void use ( int i ) { auto p = new int { 7 }; // bad: initialize local pointers with new auto q = make_unique < int > ( 9 ); // ok: guarantee the release of the memory-allocated for 9 if ( 0 < i ) return ; // maybe return and leak delete p ; // too late }","title":"Example"},{"location":"Class/#enforcement_76","text":"new \ub97c \uc0ac\uc6a9\ud55c \uc77c\ubc18(naked) \ud3ec\uc778\ud130\uc758 \ucd08\uae30\ud654\ub97c \uc9c0\uc801\ud558\ub77c \uc9c0\uc5ed \ubcc0\uc218\uc758 delete \ucc98\ub9ac\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c150-unique_ptr-make_unique","text":"","title":"C.150: unique_ptr\ub85c \uc18c\uc720\ub418\ub294 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 make_unique()\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_80","text":"make_unique \ub294 \uc0dd\uc131\uc5d0 \ub300\ud55c \ubcf4\ub2e4 \uc815\ud655\ud55c \uad6c\ubb38\uc744 \uc81c\uacf5\ud55c\ub2e4. \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\uc5d0\uc11c \uc608\uc678 \uc548\uc804\uc131\uc744 \ubcf4\uc7a5\ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_61","text":"unique_ptr < Foo > p { new < Foo > { 7 }}; // OK: but repetitive auto q = make_unique < Foo > ( 7 ); // Better: no repetition of Foo // Not exception-safe: the compiler may interleave the computations of arguments as follows: // // 1. allocate memory for Foo, // 2. construct Foo, // 3. call bar, // 4. construct unique_ptr<Foo>. // // If bar throws, Foo will not be destroyed, and the memory-allocated for it will leak. f ( unique_ptr < Foo > ( new Foo ()), bar ()); // Exception-safe: calls to functions are never interleaved. f ( make_unique < Foo > (), bar ());","title":"Example"},{"location":"Class/#enforcement_77","text":"\ubc18\ubcf5\uc801\uc778 \ud15c\ud50c\ub9bf \ud2b9\uc218\ud654 <Foo> \uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud55c\ub2e4 unique_ptr<Foo> \ub85c \uc120\uc5b8\ub41c \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c151-shared_ptr-make_shared","text":"","title":"C.151: shared_ptr\ub85c \uc18c\uc720\ub418\ub294 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 make_shared()\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_81","text":"make_shared \ub294 \uc0dd\uc131\uc5d0 \ub300\ud55c \ubcf4\ub2e4 \uc815\ud655\ud55c \uad6c\ubb38\uc744 \uc81c\uacf5\ud55c\ub2e4. \ucc38\uc870 \uce74\uc6b4\ud2b8\uc5d0 \ub300\ud55c \ubcc4\ub3c4\uc758 \uacf5\uac04 \ud560\ub2f9\uc774 \ud544\uc694\uc5c6\uac8c \ub41c\ub2e4. shared_ptr \ub294 \uac1c\uccb4\uc758 \uc606(\ub2e4\uc74c \uc601\uc5ed)\uc5d0 \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \ubc30\uce58\ud574 \uc0ac\uc6a9\ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_62","text":"void test () { // OK: but repetitive; and separate allocations for the Bar and shared_ptr's use count shared_ptr < Bar > p { new < Bar > { 7 }}; auto q = make_shared < Bar > ( 7 ); // Better: no repetition of Bar; one object }","title":"Example"},{"location":"Class/#enforcement_78","text":"\ubc18\ubcf5\uc801\uc778 \ud15c\ud50c\ub9bf \ud2b9\uc218\ud654 <Bar> \uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud55c\ub2e4 shared_ptr<Bar> \ub85c \uc120\uc5b8\ub41c \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c152","text":"","title":"C.152: \uc808\ub300\ub85c \ud558\uc704 \ud074\ub798\uc2a4\uc758 \ud3ec\uc778\ud130\uc5d0 \uc0c1\uc704 \ud074\ub798\uc2a4 \ud3ec\uc778\ud130\ub97c \ub300\uc785\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Class/#reason_82","text":"\uc0c1\uc704 \ud0c0\uc785 \ud3ec\uc778\ud130\ub97c \ub300\uc785\ud558\uba74 \ubd80\uc801\uc808\ud55c \uac1c\uccb4 \uc811\uadfc\uc774 \ubc1c\uc0dd\ud558\uace0 \uc544\ub9c8\ub3c4 \uba54\ubaa8\ub9ac \uc190\uc0c1\uc744 \uc77c\uc73c\ud0ac \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example_63","text":"struct B { int x ; }; struct D : B { int y ; }; void use ( B * ); D a [] = {{ 1 , 2 }, { 3 , 4 }, { 5 , 6 }}; B * p = a ; // bad: a decays to &a[0] which is converted to a B* p [ 1 ]. x = 7 ; // overwrite D[0].y use ( a ); // bad: a decays to &a[0] which is converted to a B*","title":"Example"},{"location":"Class/#enforcement_79","text":"\ubc30\uc5f4 \ud3ec\uc778\ud130\uc758 \ubcc0\ud658\uc774\ub098 \uc0c1\uc704 \ud0c0\uc785\uc5d0\uc11c \ud558\uc704 \ud0c0\uc785\uc73c\ub85c\uc758 \ubcc0\ud658\uc744 \uc9c0\uc801\ud55c\ub2e4 \ubc30\uc5f4\uc740 \ud3ec\uc778\ud130\ubcf4\ub2e4\ub294 span \uc744 \uc0ac\uc6a9\ud574\uc11c \uc804\ub2ec\ud558\ub77c. \uadf8\ub9ac\uace0 span \uc744 \uc0dd\uc131\ud558\uae30 \uc804\uae4c\uc9c0\ub294 \ud558\uc704 \ud0c0\uc785\uc5d0\uc11c \uc0c1\uc704 \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c","title":"Enforcement"},{"location":"Class/#c153","text":"","title":"C.153: \ud0c0\uc785 \uce90\uc2a4\ud305\ubcf4\ub2e4 \uac00\uc0c1 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Class/#reason_83","text":"\ud0c0\uc785 \uce90\uc2a4\ud305\uc774 \uc624\ub958\uc5d0 \ucde8\uc57d\ud55c \ubc18\uba74 \uac00\uc0c1\ud568\uc218 \ud638\ucd9c\uc740 \uc548\uc804\ud558\ub514. \uac00\uc0c1 \ud568\uc218 \ud638\ucd9c\uc740 \ucd5c\uc885 \uad6c\ud604\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc18\uba74, \ud0c0\uc785 \uce90\uc2a4\ud305\uc740 \uc911\uac04 \ud074\ub798\uc2a4\uc5d0 \uc801\uc6a9\ub420\uc218\ub3c4 \uc788\ub2e4. \uc774\ub85c \uc778\ud574 \uc798\ubabb\ub41c \uacb0\uacfc\ub97c \ubc18\ud658\ud560 \uc218 \uc788\ub2e4 (\uacc4\uce35 \uad6c\uc870\uac00 \uc720\uc9c0\ubcf4\uc218 \uacfc\uc815\uc5d0\uc11c \ubcc0\uacbd\ub418\uc5c8\ub2e4\uba74).","title":"Reason"},{"location":"Class/#example_64","text":"???","title":"Example"},{"location":"Class/#enforcement_80","text":"C.146 \ub97c \ucc38\uace0\ud558\ub77c","title":"Enforcement"},{"location":"Class/#cover-overloading","text":"\uc77c\ubc18 \ud568\uc218, \ud15c\ud50c\ub9bf \ud568\uc218, \uc5f0\uc0b0\uc790\ub97c \uc911\ubcf5 \uc815\uc758\ud560 \uc218 \uc788\ub2e4. \ud568\uc218 \uac1c\uccb4\ub294 \uc911\ubcf5\uc815\uc758\ud560 \uc218 \uc5c6\ub2e4. \uc911\ubcf5\uc815\uc758 \uaddc\uce59 \uc694\uc57d: C.160: \uc5f0\uc0b0\uc790\ub97c \uc815\uc758\ud560\ub54c\ub294 \uc804\ud1b5\uc801\uc778 \uc0ac\uc6a9\uc744 \ubaa8\ubc29\ud558\ub77c C.161: \ub300\uce6d\uc801\uc778 \uc5f0\uc0b0\uc790\ub294 \ube44\uba64\ubc84 \ud568\uc218\ub85c \uc815\uc758\ud558\ub77c C.162: \uac70\uc758 \ub3d9\ub4f1\ud55c \uc5f0\uc0b0\ub4e4\uc744 \uc911\ubcf5\uc815\uc758\ud558\ub77c C.163: \uac70\uc758 \ub3d9\ub4f1\ud55c \uc5f0\uc0b0\ub4e4'\ub9cc' \uc911\ubcf5\uc815\uc758\ud558\ub77c C.164: \uc554\ubb35\uc801 \ud615\ubcc0\ud658 \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc9c0\uc591\ud558\ub77c C.165: \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc774 \ud544\uc694\ud558\uba74 using \uc744 \uc0ac\uc6a9\ud558\ub77c C.166: \ub2e8\ud56d \uc5f0\uc0b0\uc790 & \ub294 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc640 \ucc38\uc870 \uccb4\uacc4\ub97c \ub530\ub974\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc911\ubcf5\uc815\uc758\ud558\ub77c C.167: \uc5f0\uc0b0\uc790\ub294 \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\ub97c \uc218\ud589\ud558\ub294\ub370 \uc0ac\uc6a9\ud558\ub77c C.168: \uc5f0\uc0b0\uc790\ub97c \uc911\ubcf5\uc815\uc758\ub294 \ud53c\uc5f0\uc0b0\uc790\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ud558\ub77c C.170: \ub78c\ub2e4\ub97c \uc911\ubcf5 \uc815\uc758\ud558\uace0 \uc2f6\ub2e4\uba74, \uc81c\ub124\ub9ad \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c","title":"C.over: \uc911\ubcf5\uc815\uc758(Overloading)"},{"location":"Class/#c160","text":"","title":"C.160: \uc5f0\uc0b0\uc790\ub97c \uc815\uc758\ud560\ub54c\ub294 \uc804\ud1b5\uc801\uc778 \uc0ac\uc6a9\uc744 \ubaa8\ubc29\ud558\ub77c"},{"location":"Class/#reason_84","text":"\uc608\uc0c1\uc744 \ubc97\uc5b4\ub098\uc9c0 \uc54a\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#example_65","text":"class X { public : // ... X & operator = ( const X & ); // member function defining assignment friend bool operator == ( const X & , const X & ); // == needs access to representation // after a = b we have a == b // ... }; \uc774 \uc608\uc2dc\uc5d0\uc120 \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\uad6c\uc870\ub97c \ub530\ub978\ub2e4: \ubcf5\uc0ac\ub41c \uac1c\uccb4\ub294 \ub3d9\ub4f1\ud55c \uac12\uc744 \uac00\uc9c4\ub2e4 .","title":"Example"},{"location":"Class/#example-bad_37","text":"X operator + ( X a , X b ) { return a . v - b . v ; } // bad: makes + subtract","title":"Example, bad"},{"location":"Class/#note_78","text":"\uba64\ubc84\uac00 \uc544\ub2cc \uc5f0\uc0b0\uc790\ub4e4\uc740 friend\uc774\uac70\ub098 \ud53c\uc5f0\uc0b0\uc790\ub4e4\uacfc \uac19\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc815\uc758\ub418\uc5b4\uc57c \ud55c\ub2e4 . \uc774\ud56d \uc5f0\uc0b0\uc790\ub4e4\uc740 \ud53c\uc5f0\uc0b0\uc790\ub97c \ub3d9\ub4f1\ud558\uac8c \ub2e4\ub904\uc57c \ud55c\ub2e4 .","title":"Note"},{"location":"Class/#enforcement_81","text":"\uac70\uc758 \ubd88\uac00\ub2a5\ud558\ub2e4","title":"Enforcement"},{"location":"Class/#c161","text":"","title":"C.161: \ub300\uce6d\uc801\uc778 \uc5f0\uc0b0\uc790\ub294 \ube44\uba64\ubc84 \ud568\uc218\ub85c \uc815\uc758\ud558\ub77c"},{"location":"Class/#reason_85","text":"\uc5f0\uc0b0\uc790 \uc815\uc758\uc5d0 \uba64\ubc84\ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \ud53c\uc5f0\uc0b0\uc790 \ud0c0\uc785\ub9c8\ub2e4 \uba64\ubc84\ud568\uc218\uac00 \ud544\uc694\ud558\ub2e4. \uac00\ub839 == \uc5f0\uc0b0\uc790\uc5d0 \ube44 \uba64\ubc84 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, a == b \uc640 b == a \uac00 \ubbf8\ubb18\ud558\uac8c \ub2e4\ub97c \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example_66","text":"bool operator == ( Point a , Point b ) { return a . x == b . x && a . y == b . y ; }","title":"Example"},{"location":"Class/#enforcement_82","text":"\uba64\ubc84 \ud568\uc218\uc778 \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Class/#c162","text":"","title":"C.162: \uac70\uc758 \ub3d9\ub4f1\ud55c \uc5f0\uc0b0\ub4e4\uc744 \uc911\ubcf5\uc815\uc758\ud558\ub77c"},{"location":"Class/#reason_86","text":"\ub17c\ub9ac\uc801\uc73c\ub85c \uac19\uc740 \uc5f0\uc0b0\uc774 \ub2e4\ub978 \ud0c0\uc785\uc5d0 \ub2e4\ub978 \uc774\ub984\uc744 \uac00\uc9c0\ub294 \uac83\uc740 \ud63c\ub780\uc2a4\ub7fd\uace0, \ud0c0\uc785 \uc815\ubcf4\ub97c \ud568\uc218 \uc774\ub984\uc5d0 \uc9d1\uc5b4\ub123\uac8c \ub41c\ub2e4. \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\ub3c4 \ubc29\ud574\ub41c\ub2e4.","title":"Reason"},{"location":"Class/#example_67","text":"\ub2e4\uc74c\uacfc \uac19\uc740 \uc608\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void print ( int a ); void print ( int a , int base ); void print ( const string & ); \uc774 \uc138 \ud568\uc218\ub4e4\uc740 \uc778\uc790\ub97c \ucd9c\ub825\ud55c\ub2e4. \ub2e4\ub978 \uacbd\uc6b0: void print_int ( int a ); void print_based ( int a , int base ); void print_string ( const string & ); \uc774 \uc138 \ud568\uc218\ub4e4\uc740 \uc778\uc790\ub97c \ucd9c\ub825\ud55c\ub2e4. \uc778\uc790 \ud0c0\uc785\uc744 \uc774\ub984\uc5d0 \ubd99\uc774\ub294 \uac83\uc740 \ubd88\ud544\uc694\ud558\uace0 \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ubabb\ud558\uac8c \ud55c\ub2e4.","title":"Example"},{"location":"Class/#enforcement_83","text":"???","title":"Enforcement"},{"location":"Class/#c163","text":"","title":"C.163: \uac70\uc758 \ub3d9\ub4f1\ud55c \uc5f0\uc0b0\ub4e4'\ub9cc' \uc911\ubcf5\uc815\uc758\ud558\ub77c"},{"location":"Class/#reason_87","text":"\ub17c\ub9ac\uc801\uc73c\ub85c \ub2e4\ub978 \ud568\uc218\uac00 \uac19\uc740 \uc774\ub984\uc744 \uac00\uc9c0\ub294 \uac83\uc740 \ud63c\ub780\uc744 \uc77c\uc73c\ud0a4\uace0 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c \uc624\ub958\ub85c \uc774\uc5b4\uc9c4\ub2e4.","title":"Reason"},{"location":"Class/#example_68","text":"\ub2e4\uc74c\uacfc \uac19\uc740 \uc608\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void open_gate ( Gate & g ); // remove obstacle from garage exit lane void fopen ( const char * name , const char * mode ); // open file \uc774 \ub450 \ud568\uc218\ub294 \uadfc\ubcf8\uc801\uc73c\ub85c \ub2e4\ub974\uace0 \uc5f0\uad00\uc131\uc774 \uc5c6\ub2e4. \ub530\ub77c\uc11c \ub2e4\ub978 \uc774\ub984\uc744 \uac00\uc9c0\ub294 \uac83\uc774 \uc88b\ub2e4. \ub2e4\ub978 \uacbd\uc6b0: void open ( Gate & g ); // remove obstacle from garage exit lane void open ( const char * name , const char * mode = \"r\" ); // open file \uc774 \ub450 \uc5f0\uc0b0\uc740 \uc5ec\uc804\ud788 \uadfc\ubcf8\uc801\uc73c\ub85c \ub2e4\ub974\uace0 \uc5f0\uad00\uc131\uc744 \uac00\uc9c0\uc9c0 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub984\uc774 \ucd95\uc57d\ub418\uc5c8\uace0 \ud63c\ub780\uc758 \uac00\ub2a5\uc131\uc744 \ub9cc\ub4e0\ub2e4. \ub2e4\ud589\ud788\ub3c4, \uc774\ub4e4\uc758 \uc2dc\uadf8\ub2c8\ucc98\uac00 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \ud0c0\uc785\uc2dc\uc2a4\ud15c\uc774 \uc2e4\uc218\ub97c \uc7a1\uc544\ub0bc \uac83\uc774\ub2e4.","title":"Example"},{"location":"Class/#note_79","text":"open , move , + , == \uacfc \uac19\uc774 \uc77c\ubc18\uc801\uc774\uace0 \ub9ce\uc774 \uc4f0\uc774\ub294 \uc774\ub984\uc5d0\ub294 \ud2b9\ud788 \uc8fc\uc758\ud558\ub77c.","title":"Note"},{"location":"Class/#enforcement_84","text":"???","title":"Enforcement"},{"location":"Class/#c164","text":"","title":"C.164: \uc554\ubb35\uc801 \ud615\ubcc0\ud658 \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc9c0\uc591\ud558\ub77c"},{"location":"Class/#reason_88","text":"\ubb35\uc2dc\uc801 \ubcc0\ud658\uc774 \ud544\uc218\uc801\uc77c \uc218 \uc788\ub2e4 ( double \uc5d0\uc11c int \ub85c \ubc14\uafbc\ub2e4\ub358\uc9c0). \ud558\uc9c0\ub9cc ( String \uc5d0\uc11c C-style \ubb38\uc790\uc5f4\uc774 \ub418\ub294 \uac83\ucc98\ub7fc) \uc758\ub3c4\uce58 \uc54a\uc740 \ub3d9\uc791\uc774 \uc0dd\uae30\uae30\ub3c4 \ud55c\ub2e4.","title":"Reason"},{"location":"Class/#note_80","text":"\uc815\ub9d0 \ud544\uc694\ud55c \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uba85\uc2dc\uc801 \ubcc0\ud658\uc744 \uc120\ud638\ud558\ub77c. \"\uc815\ub9d0 \ud544\uc694\ud55c\"\uc740 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc758 \uc601\uc5ed\uc5d0\uc11c \uae30\ubcf8\uc801\uc774\uace0 \uc790\uc5f0\uc2a4\ub7ec\uc6b0\uba70 \uc790\uc8fc \ud544\uc694\ud55c \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4. (\uac00\ub839 \uc815\uc218\ub97c \ubcf5\uc18c\uc218\ub85c \ubcc0\ud658\ud558\ub294 \uac83\ucc98\ub7fc) (\ubcc0\ud658 \uc5f0\uc0b0\uc790 \ub610\ub294 \uc554\ubb35\uc801 \uc0dd\uc131\uc790\ub97c \ud1b5\ud574\uc11c) \uc554\ubb35\uc801 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uc57d\uac04\uc758 \ud3b8\uc548\ud568\ub9cc \uc5bb\uc744 \uc218 \uc788\uc744 \ubfd0\uc774\ub2e4.","title":"Note"},{"location":"Class/#example_69","text":"struct S1 { string s ; // ... operator char * () { return s . data (); } // BAD, likely to cause surprises }; struct S2 { string s ; // ... explicit operator char * () { return s . data (); } }; void f ( S1 s1 , S2 s2 ) { char * x1 = s1 ; // OK, but can cause surprises in many contexts char * x2 = s2 ; // error (and that's usually a good thing) char * x3 = static_cast < char *> ( s2 ); // we can be explicit (on your head be it) } \uc774\ub7f0 \ub180\ub78d\uace0 \uc7a0\uc7ac\uc801 \ud53c\ud574\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \uc554\ubb35\uc801 \ubcc0\ud658\uc740 \ucc3e\uc544\ub0b4\uae30 \uc5b4\ub824\uc6b4 \ubb38\ub9e5 \uc18d\uc5d0\uc11c \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, S1 ff (); char * g () { return ff (); } ff() \uc5d0\uc11c \ubc18\ud658\ub41c \ubb38\uc790\uc5f4\uc774 \ud3ec\uc778\ud130\uac00 \uc0ac\uc6a9\ub418\uae30 \uc804\uc5d0 \ud30c\uad34\ub41c\ub2e4.","title":"Example"},{"location":"Class/#enforcement_85","text":"\ubaa8\ub4e0 \ud615\ubcc0\ud658 \uc5f0\uc0b0\uc790\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Class/#c165-using","text":"","title":"C.165: \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc774 \ud544\uc694\ud558\uba74 using\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_89","text":"\ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc704\uce58\ud55c \ud568\uc218 \uac1c\uccb4\uc640 \ud568\uc218\ub4e4\uc744 \ucc3e\uace0 \ubcf4\ud3b8\uc801\uc778 \ud568\uc218\ub85c \"\ucee4\uc2a4\ud130\ub9c8\uc774\uc988\" \ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example_70","text":"swap \uc744 \uc0dd\uac01\ud574\ubcf4\ub77c. \uc774 \ud568\uc218\ub294 \uc77c\ubc18\uc801\uc778 (\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac) \ud568\uc218\uc774\uace0, \uc5b4\ub5a4 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub3c4 \ub3d9\uc791\ud55c\ub2e4. \ud558\uc9c0\ub9cc, \uc5b4\ub5a4 \ud0c0\uc785\ub4e4\uc740 \ud2b9\ubcc4\ud55c swap() \uc744 \uc815\uc758\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc77c\ubc18\uc801\uc778 vector \uc758 swap() \uc740 \ucee8\ud14c\uc774\ub108 \ub0b4 \uc6d0\uc18c\ub4e4\uc744 \ubcf5\uc0ac\ud55c\ub2e4. \uc88b\uc740 \uad6c\ud604\uc774\ub77c\uba74 \ubcf5\uc0ac\ub97c \uc218\ud589\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. namespace N { My_type X { /* ... */ }; void swap ( X & , X & ); // optimized swap for N::X // ... } void f1 ( N :: X & a , N :: X & b ) { std :: swap ( a , b ); // probably not what we wanted: calls std::swap() } f1() \ud568\uc218 \uc548\uc5d0\uc11c std::swap() \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ucf54\ub4dc \uadf8\ub300\ub85c \uc2e4\ud589\ub41c\ub2e4: std \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc758 swap() \uc744 \ud638\ucd9c\ud560 \uac83\uc774\ub2e4. \ubd88\ud589\ud788\ub3c4, \uadf8\uac8c \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. N::X \ud0c0\uc785\uc5d0 \ub9de\uac8c \ud638\ucd9c\ub418\uac8c \ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c \ud560\uae4c? void f2 ( N :: X & a , N :: X & b ) { swap ( a , b ); // calls N::swap } \uc774 \ubc29\ubc95\uc740 \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \uc77c\ubc18\ud654\ub41c \ucf54\ub4dc\uac00 \uc544\ub2d0 \uc218 \uc788\ub2e4. \uc6b0\ub9ac\ub294 \ubcf4\ud1b5 \ud2b9\ubcc4\ud788 \uc791\uc131\ub41c \ud568\uc218\uac00 \uc788\uc73c\uba74 \uadf8 \ud568\uc218\ub97c \uc4f0\uace0 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uc5d0\ub294 \ubc94\uc6a9 \ud568\uc218(general function)\ub97c \ud638\ucd9c\ud558\uae30\ub97c \uc6d0\ud55c\ub2e4. \uc774\ub294 \ud568\uc218 \ud0d0\uc0c9\uc5d0 \ubc94\uc6a9 \ud568\uc218\ub97c \ud3ec\ud568\ud558\ub294 \uac83\uc73c\ub85c \ud574\uacb0\ud560 \uc218 \uc788\ub2e4: void f3 ( N :: X & a , N :: X & b ) { using std :: swap ; // std::swap\uc774 \ud0d0\uc0c9\ub418\ub3c4\ub85d \ud55c\ub2e4 swap ( a , b ); // N \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 swap\uc774 \uc874\uc7ac\ud558\uba74 \ud638\ucd9c\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 std::swap\uc744 \ud638\ucd9c\ud55c\ub2e4 }","title":"Example"},{"location":"Class/#enforcement_86","text":"swap \uac19\uc774 \uc798 \uc54c\ub824\uc9c4 \ucee4\uc2a4\ud130\ub9c8\uc774\uc9d5\uc744 \uc81c\uc678\ud558\uba74 \ud560 \uc218 \uc788\ub294\uac8c \uac70\uc758 \uc5c6\ub2e4. \ubb38\uc81c\ub294 qualified \ud0d0\uc0c9\uacfc unqualified \ud0d0\uc0c9\uc774 \ud568\uaed8 \uc0ac\uc6a9\ub41c\ub2e4\ub294 \uac83\uc774\ub2e4. \uc5ed\uc8fc: \uc774\ub984 \ud0d0\uc0c9 - C++ Korea Template Study","title":"Enforcement"},{"location":"Class/#c166","text":"","title":"C.166: \ub2e8\ud56d \uc5f0\uc0b0\uc790 &amp;\ub294 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc640 \ucc38\uc870 \uccb4\uacc4\ub97c \ub530\ub974\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc911\ubcf5\uc815\uc758\ud558\ub77c"},{"location":"Class/#reason_90","text":"& \uc5f0\uc0b0\uc790\ub294 C++\uc5d0\uc11c \ud544\uc218\uc801\uc774\ub2e4. C++ \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc758\ubbf8\uad6c\uc870\uc758 \ub9ce\uc740 \ubd80\ubd84\uc774 \uae30\ubcf8\uc801\uc778 \uc758\ubbf8\ub97c \uc804\uc81c\ud558\uace0 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example_71","text":"class Ptr { // a somewhat smart pointer Ptr ( X * pp ) : p ( pp ) { /* check */ } X * operator -> () { /* check */ return p ; } X operator []( int i ); X operator * (); private : T * p ; }; class X { Ptr operator & () { return Ptr { this }; } // ... };","title":"Example"},{"location":"Class/#note_81","text":"& \uc5f0\uc0b0\uc790\ub85c \"\ubb54\uac00 \ud558\ub824\uba74\" -> , [] , * , . \uc5f0\uc0b0\uc790\ub4e4\uc5d0 \uc801\ud569\ud55c \uc815\uc758(\ubc18\ud658 \ud0c0\uc785)\ub97c \uac00\uc9c0\ub3c4\ub85d \ud558\ub77c. . \uc5f0\uc0b0\uc790\ub294 \ud604\uc7ac\ub85c\uc368\ub294 \uc911\ubcf5\uc815\uc758\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc644\ubcbd\ud55c \uccb4\uacc4\ub97c \uac16\ucd94\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. \ub2e4\uc74c \ubb38\uc11c\ub97c \ubcf4\uae30\ub97c \uad8c\ud55c\ub2e4: http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2015/n4477.pdf . std::addressof() \ub294 \ud56d\uc0c1 \ub0b4\uc7a5 \ud3ec\uc778\ud130 \ud0c0\uc785\uc744 \ubc18\ud658\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c.","title":"Note"},{"location":"Class/#enforcement_87","text":"\uae4c\ub2e4\ub86d\ub2e4. & \uc5f0\uc0b0\uc790\uac00 -> \uc640 \ud568\uaed8 \uc0ac\uc6a9\uc790 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\ub2e4\uba74 \uacbd\uace0\ud55c\ub2e4.","title":"Enforcement"},{"location":"Class/#c167","text":"","title":"C.167: \uc5f0\uc0b0\uc790\ub294 \uc804\ud1b5\uc801\uc778 \uc758\ubbf8\ub97c \uc218\ud589\ud558\ub294\ub370 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_91","text":"\uac00\ub3c5\uc131, \uad00\ub840\uc801 \uc758\ubbf8, \uc7ac\uc0ac\uc6a9\uc131, \uc77c\ubc18\ud654\ub41c \ucf54\ub4dc\uc5d0 \ub3c4\uc6c0\uc774 \ub41c\ub2e4","title":"Reason"},{"location":"Class/#example_72","text":"void cout_my_class ( const My_class & c ) // confusing, not conventional,not generic { std :: cout << /* class members here */ ; } std :: ostream & operator << ( std :: ostream & os , const my_class & c ) // OK { return os << /* class members here */ ; } \uadf8 \uc790\uccb4\ub85c, cout_my_class \ub294 \ubb38\uc81c\uac00 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc \uad00\ub840\uc801\uc73c\ub85c \ucd9c\ub825\uc5d0 \uc0ac\uc6a9\ud558\ub294 << \uc5f0\uc0b0\uc790\uc5d0 \ub9de\uac8c \uc791\uc131\ud560 \uc218 \uc5c6\ub2e4: My_class var { /* ... */ }; // ... cout << \"var = \" << var << '\\n' ;","title":"Example"},{"location":"Class/#note_82","text":"\ub300\ubd80\ubd84\uc758 \uc5f0\uc0b0\uc790\ub4e4\uc740 \uac15\ub825\ud558\uace0 \ud754\ud788 \uc0ac\uc6a9\ub418\ub294 \uc758\ubbf8\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4 \ube44\uad50 ( == , != , < , <= , > , >= ), \uc0b0\uc220 \uc5f0\uc0b0 ( + , - , * , / , % ) \uc811\uadfc \uc5f0\uc0b0 ( . , -> , \ub2e8\ud56d * , [] ) \ub300\uc785 ( = ) \uad00\ub840\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc5b4\uc628 \uc758\ubbf8\uc640 \ub2e4\ub974\uac8c \uc815\uc758\ud558\uac70\ub098 \uc0c8\ub86d\uac8c \uc758\ubbf8\ub97c \ubd80\uc5ec\ud574\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c.","title":"Note"},{"location":"Class/#enforcement_88","text":"\uae4c\ub2e4\ub86d\ub2e4. \uc758\ubbf8\uad6c\uc870\uc5d0 \ub300\ud55c \ud1b5\ucc30\uc774 \ud544\uc694\ud558\ub2e4.","title":"Enforcement"},{"location":"Class/#c168","text":"","title":"C.168: \uc5f0\uc0b0\uc790\ub97c \uc911\ubcf5\uc815\uc758\ub294 \ud53c\uc5f0\uc0b0\uc790\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ud558\ub77c"},{"location":"Class/#reason_92","text":"\uac00\ub3c5\uc131. \uc778\uc790 \uae30\ubc18 \ud0d0\uc0c9(ADL)\uc774 \uac00\ub2a5\ud558\ub2e4. \ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc815\uc758\ud558\ub294 \uac83\uc740 \uc77c\uad00\uc801\uc774\uc9c0 \uc54a\ub2e4.","title":"Reason"},{"location":"Class/#example_73","text":"struct S { }; bool operator == ( S , S ); // OK: in the same namespace as S, and even next to S S s ; bool x = ( s == s ); \uae30\ubcf8\uc801\uc778 == \uc5f0\uc0b0\uc790\uac00 \ud558\ub294 \uc77c\uc774\ub2e4.","title":"Example"},{"location":"Class/#example_74","text":"namespace N { struct S { }; bool operator == ( S , S ); // OK: in the same namespace as S, and even next to S } N :: S s ; bool x = ( s == s ); // finds N::operator==() by ADL","title":"Example"},{"location":"Class/#example-bad_38","text":"struct S { }; S s ; namespace N { S :: operator ! ( S a ) { return true ; } S not_s = ! s ; } namespace M { S :: operator ! ( S a ) { return false ; } S not_s = ! s ; } \ub124\uc784\uc2a4\ud398\uc774\uc2a4 N \uacfc M \uc5d0\uc11c !s \uc758 \uc758\ubbf8\uac00 \ub2ec\ub77c\uc9c4\ub2e4. \uad49\uc7a5\ud788 \ud63c\ub780\uc2a4\ub7ec\uc6b8 \uc218 \uc788\ub2e4. namespace M \uc758 \uc815\uc758\ub97c \uc81c\uac70\ud558\uba74 \uc2e4\uc218\uac00 \ubc1c\uc0dd\ud560 \uac00\ub2a5\uc131\uc758 \uc0ac\ub77c\uc9c4\ub2e4.","title":"Example, bad"},{"location":"Class/#note_83","text":"\uc774\ud56d \uc5f0\uc0b0\uc790\uac00 \ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc788\ub294 \ub450 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c \uc815\uc758\ub418\uc5c8\ub2e4\uba74, \uc774 \uaddc\uce59\uc744 \ub530\ub97c \uc218 \uc5c6\ub2e4. \uc608\ub97c \ub4e4\uc5b4: Vec :: Vector operator * ( const Vec :: Vector & , const Mat :: Matrix & ); \uc774\ub7f0 \uacbd\uc6b0\ub294 \ud53c\ud558\ub294 \uac83\uc774 \ucd5c\uc120\uc774\ub2e4.","title":"Note"},{"location":"Class/#see-also_9","text":"\ubcf4\uc870 \ud568\uc218\ub4e4\uc740 \uad00\ub828 \ud074\ub798\uc2a4\uc640 \uac19\uc740 namespace\uc5d0 \ubc30\uce58\ud558\ub77c \ub294 \uaddc\uce59\uc758 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4","title":"See also"},{"location":"Class/#enforcement_89","text":"\ud53c\uc5f0\uc0b0\uc790\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc704\uce58\ud558\uc9c0 \uc54a\uc740 \uc5f0\uc0b0\uc790 \uc815\uc758\ub97c \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Class/#c170","text":"","title":"C.170: \ub78c\ub2e4\ub97c \uc911\ubcf5 \uc815\uc758\ud558\uace0 \uc2f6\ub2e4\uba74, \uc81c\ub124\ub9ad \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_93","text":"\uac19\uc740 \uc774\ub984\uc73c\ub85c \ub450\uac1c\uc758 \uc11c\ub85c \ub2e4\ub978 \ub78c\ub2e4\ub97c \uc911\ubcf5 \uc815\uc758\ud560 \uc218 \uc5c6\ub2e4.","title":"Reason"},{"location":"Class/#example_75","text":"void f ( int ); void f ( double ); auto f = []( char ); // error: cannot overload variable and function auto g = []( int ) { /* ... */ }; auto g = []( double ) { /* ... */ }; // error: cannot overload variables auto h = []( auto ) { /* ... */ }; // OK","title":"Example"},{"location":"Class/#enforcement_90","text":"\ucef4\ud30c\uc77c\ub7ec\uac00 \ub78c\ub2e4\ub97c \uc911\ubcf5 \uc815\uc758\ud558\ub824\ub294 \uc2dc\ub3c4\ub97c \uc7a1\uc544\ub0b8\ub2e4.","title":"Enforcement"},{"location":"Class/#cunion-union","text":"union \uc740 \ubaa8\ub4e0 \uba64\ubc84\uac00 \uac19\uc740 \uc8fc\uc18c\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 struct \ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud55c \uc2dc\uc810\uc5d0 \ud558\ub098\uc758 \uba64\ubc84\ub9cc \uac00\uc9c0\uace0 \uc788\ub2e4. union \uc740 \uc5b4\ub5a4 \uba64\ubc84\uac00 \uc800\uc7a5\ub418\uc5c8\ub294\uc9c0 \ucd94\uc801\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc815\ud655\ud558\uac8c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4; \uc774\ub294 \ud544\uc5f0\uc801\uc73c\ub85c \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uc9c0\ub9cc, \uc774\ub97c \ubcf4\uc644\ud560 \ubc29\ubc95\uc740 \uc788\ub2e4 union \uc5d0 \uc5b4\ub5a4 \uba64\ubc84\uac00 \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uc9c0 \uc54c\ub824\uc8fc\ub3c4\ub85d \ud45c\uc9c0(indicator)\uac00 \ucd94\uac00\ub41c \uac83\uc744 tagged union , discriminated union , \ud639\uc740 variant \uc774\ub77c\uace0 \ubd80\ub978\ub2e4. \uacf5\uc6a9\uccb4(Unions) \uaddc\uce59 \uc694\uc57d: C.180: union \uc740 \uba54\ubaa8\ub9ac\ub97c \uc808\uc57d\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub77c C.181: \ud45c\uc9c0 \uc5c6\ub294(naked) union \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c C.182: Tagged union \uad6c\ud604\uc5d0\ub294 \uc775\uba85 union \uc744 \uc0ac\uc6a9\ud558\ub77c C.183: \ud0c0\uc785 \uc7ac\ud574\uc11d(type punning)\uc744 \uc704\ud574 union \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c ???","title":"C.union: \uacf5\uc6a9\uccb4(Union)"},{"location":"Class/#c180-union","text":"","title":"C.180: union\uc740 \uba54\ubaa8\ub9ac\ub97c \uc808\uc57d\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_94","text":"union \uc740 \ud558\ub098\uc758 \uba54\ubaa8\ub9ac \uc870\uac01\uc774 \ub2e4\ub978 \uc2dc\uac01\uc5d0 \ub2e4\ub978 \ud0c0\uc785\uc758 \uac1c\uccb4\ub4e4\ub85c \uc0ac\uc6a9\ub420 \uc218 \uc788\ub3c4\ub85d \ud574\uc900\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c, \ub2e4\ub978 \uac1c\uccb4\ub4e4\uc774 \ub3d9\uc2dc\uc5d0 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \uba54\ubaa8\ub9ac\ub97c \uc808\uc57d\ud558\ub294\ub370 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Class/#example_76","text":"union Value { int x ; double d ; }; Value v = { 123 }; // now v holds an int cout << v . x << '\\n' ; // write 123 v . d = 987.654 ; // now v holds a double cout << v . d << '\\n' ; // write 987.654 \ud558\uc9c0\ub9cc \uacbd\uace0\ub97c \uc720\uc2ec\ud788 \ubcf4\ub77c: \ud45c\uc9c0 \uc5c6\ub294(naked) union \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c","title":"Example"},{"location":"Class/#example_77","text":"// Short-string optimization constexpr size_t buffer_size = 16 ; // Slightly larger than the size of a pointer class Immutable_string { public : Immutable_string ( const char * str ) : size ( strlen ( str )) { if ( size < buffer_size ) strcpy_s ( string_buffer , buffer_size , str ); else { string_ptr = new char [ size + 1 ]; strcpy_s ( string_ptr , size + 1 , str ); } } ~ Immutable_string () { if ( size >= buffer_size ) delete string_ptr ; } const char * get_str () const { return ( size < buffer_size ) ? string_buffer : string_ptr ; } private : // If the string is short enough, we store the string itself // instead of a pointer to the string. union { char * string_ptr ; char string_buffer [ buffer_size ]; }; const size_t size ; };","title":"Example"},{"location":"Class/#enforcement_91","text":"???","title":"Enforcement"},{"location":"Class/#c181-naked-union","text":"","title":"C.181: \ud45c\uc9c0 \uc5c6\ub294(naked) union\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Class/#reason_95","text":"\ud45c\uc9c0 \uc5c6\ub294(naked) union \uc740 \uc5b4\ub5a4 \uba64\ubc84\ub97c \uc0ac\uc6a9\ud558\ub294\uc9c0 \uc54c \uc218 \uc5c6\ub294 union\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774\ub7f0 \uacbd\uc6b0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uacc4\uc18d \ucd94\uc801\ud574\uc57c \ud55c\ub2e4. \ud0c0\uc785 \uc624\ub958\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_39","text":"union Value { int x ; double d ; }; Value v ; v . d = 987.654 ; // v holds a double \uc5ec\uae30\uae4c\uc9c4 \ubb38\uc81c\uac00 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc union \uc740 \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4: cout << v . x << '\\n' ; // BAD, undefined behavior: v holds a double, but we read it as an int \uba85\uc2dc\uc801 \ubcc0\ud658\uc774 \uc5c6\uc74c\uc5d0\ub3c4 \ud0c0\uc785 \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c \uc810\uc5d0 \uc8fc\ubaa9\ud558\ub77c. \ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc774 \ud504\ub85c\uadf8\ub7a8\uc744 \ud14c\uc2a4\ud2b8 \ud588\uc744\ub584 \ucd9c\ub825\ub41c \uac12\uc740 987.654 \uc758 \ube44\ud2b8 \ud328\ud134\uc744 \uc815\uc218\ub85c \ud574\uc11d\ud55c 1683627180 \uc774\uc5c8\ub2e4. \uc774 \uc608\uc2dc\uc5d0\uc11c\ub294 \ucf54\ub4dc\uc5d0\ub294 \ubb38\uc81c \uc5c6\uc5b4 \ubcf4\uc774\uc9c0\ub9cc \"\ubcf4\uc774\uc9c0 \uc54a\ub294(invisible)\" \ud0c0\uc785 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uadf8\ub9ac\uace0, \"\ubcf4\uc774\uc9c0 \uc54a\ub294\" \uc624\ub958\ub85c, \uc774 \ucf54\ub4dc\ub294 \uc544\ubb34\uac83\ub3c4 \ucd9c\ub825\ud558\uc9c0 \uc54a\ub294\ub2e4: v . x = 123 ; cout << v . d << '\\n' ; // BAD: undefined behavior","title":"Example, bad"},{"location":"Class/#alternative_2","text":"\ud0c0\uc785 \ud544\ub4dc\ub97c \ucd94\uac00\ud574\uc11c union \uc744 \ud074\ub798\uc2a4\ub85c \uac10\uc2fc\ub2e4. <variant> \ud5e4\ub354\uc758 \ud45c\uc900 variant \ud0c0\uc785\uc774 \uc774 \uc77c\uc744 \ub300\uc2e0 \ud574\uc900\ub2e4: variant < int , double > v ; v = 123 ; // v holds an int int x = get < int > ( v ); v = 123.456 ; // v holds a double w = get < double > ( v );","title":"Alternative"},{"location":"Class/#enforcement_92","text":"???","title":"Enforcement"},{"location":"Class/#c182-tagged-union-union","text":"","title":"C.182: Tagged union \uad6c\ud604\uc5d0\ub294 \uc775\uba85 union\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Class/#reason_96","text":"\uc798 \uc124\uacc4\ub41c Tagged union\uc740 \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \uc775\uba85(anonymous) union\uc740 (tag, union) \ud615\ud0dc\uc758 \ud074\ub798\uc2a4 \uc815\uc758\ub97c \uc27d\uac8c \ub9cc\ub4e4\uc5b4\uc900\ub2e4.","title":"Reason"},{"location":"Class/#example_78","text":"\uc774 \uc608\uc81c\ub294 \ub300\ubd80\ubd84 TC++PL4 pp216-218 \uc5d0\uc11c \ubc1c\ucdcc\ud55c \uac83\uc774\ub2e4. \uc124\uba85\uc744 \uc6d0\ud55c\ub2e4\uba74 \ud574\ub2f9 \ubb38\uc11c\ub97c \ucc38\uace0\ud558\ub77c. \uc608\uc2dc \ucf54\ub4dc\ub294 \uc0c1\uc138\ud55c \ud3b8\uc774\ub2e4. \uc774 \ud0c0\uc785\uc5d0\uc11c \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \ub300\uc785 \uc5f0\uc0b0\uacfc \uc18c\uba78\uc790\ub97c \ub2e4\ub8e8\ub294 \uac83\uc740 \uaf64 \uc2e0\uacbd\uc368\uc57c \ud558\ub294 \uc791\uc5c5\uc774\ub2e4. \uc774\ub7f0 \uc791\uc5c5\uc744 \ud504\ub85c\uadf8\ub798\uba38\uac00 \ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub294 \uac83\uc774 variant \uac00 \ud45c\uc900\uc5d0 \ucd94\uac00\ub41c \uc774\uc720 \uc911 \ud558\ub098\ub2e4. class Value { // two alternative representations represented as a union private : enum class Tag { number , text }; Tag type ; // discriminant union { // representation (note: anonymous union) int i ; string s ; // string has default constructor, copy operations, and destructor }; public : struct Bad_entry { }; // used for exceptions ~ Value (); Value & operator = ( const Value & ); // necessary because of the string variant Value ( const Value & ); // ... int number () const ; string text () const ; void set_number ( int n ); void set_text ( const string & ); // ... }; int Value :: number () const { if ( type != Tag :: number ) throw Bad_entry {}; return i ; } string Value :: text () const { if ( type != Tag :: text ) throw Bad_entry {}; return s ; } void Value :: set_number ( int n ) { if ( type == Tag :: text ) { s . ~ string (); // explicitly destroy string type = Tag :: number ; } i = n ; } void Value :: set_text ( const string & ss ) { if ( type == Tag :: text ) s = ss ; else { new ( & s ) string { ss }; // placement new: explicitly construct string type = Tag :: text ; } } Value & Value :: operator = ( const Value & e ) // necessary because of the string variant { if ( type == Tag :: text && e . type == Tag :: text ) { s = e . s ; // usual string assignment return * this ; } if ( type == Tag :: text ) s . ~ string (); // explicit destroy switch ( e . type ) { case Tag :: number : i = e . i ; break ; case Tag :: text : new ( & s )( e . s ); // placement new: explicit construct type = e . type ; } return * this ; } Value ::~ Value () { if ( type == Tag :: text ) s . ~ string (); // explicit destroy }","title":"Example"},{"location":"Class/#enforcement_93","text":"???","title":"Enforcement"},{"location":"Class/#c183-type-punning-union","text":"","title":"C.183: \ud0c0\uc785 \uc7ac\ud574\uc11d(type punning)\uc744 \uc704\ud574 union\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Class/#reason_97","text":"union \uc758 \uba64\ubc84\ub97c \ud55c \ud0c0\uc785\uc73c\ub85c \uac12\uc744 \uc4f0\uace0 \ub2e4\ub978 \ud0c0\uc785\uc73c\ub85c \uc77d\ub294 \uac83\uc740 \ubbf8\uc815\uc758 \ub3d9\uc791(undefined behavior)\uc774\ub2e4. \uc774\ub7f0 \ud574\uc11d\uc740 \ubcf4\uc774\uc9c0 \uc54a\uace0, \ud0c0\uc785 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \ucc3e\uc544\ub0b4\uae30 \uc5b4\ub835\ub2e4. union \uc744 \uc0ac\uc6a9\ud55c \ud0c0\uc785 \uc7ac\ud574\uc11d\uc740(type punning)\uc740 \uc624\ub958\uc758 \uc6d0\uc778\uc774\ub2e4.","title":"Reason"},{"location":"Class/#example-bad_40","text":"union Pun { int x ; unsigned char c [ sizeof ( int )]; }; Pun \ud0c0\uc785\uc758 \uc758\ub3c4\ub294 int \ub97c char \ud615\ud0dc\ub85c \uc811\uadfc\ud558\ub294 \uac83\uc774\ub2e4. void bad ( Pun & u ) { u . x = 'x' ; cout << u . c [ 0 ] << '\\n' ; // undefined behavior } int \uc758 \ubc14\uc774\ud2b8\ub97c \ud655\uc778\ud558\uace0 \uc2f6\ub2e4\uba74, \ud0c0\uc785 \uc774\ub984\uc744 \uc0ac\uc6a9\ud55c \ud615\ubcc0\ud658(named cast)\ub97c \uc0ac\uc6a9\ud558\ub77c: void if_you_must_pun ( int & x ) { auto p = reinterpret_cast < unsigned char *> ( & x ); cout << p [ 0 ] << '\\n' ; // OK; better // ... } reinterpret_cast \uc744 \uc0ac\uc6a9\ud574 \ud0c0\uc785\uc744 \ubc14\uafd4\uc11c \uc811\uadfc\ud558\ub294 \uac83\uc740 \uc815\uc758\ub41c \ud589\ub3d9(defined behavior)\uc774\ub2e4(\ube44\ub85d reinterpret_cast \uc774 \uad8c\uc7a5\ub418\uc9c0\ub294 \uc54a\uc9c0\ub9cc). \uc774\ub7ec\uba74 \ucd5c\uc18c\ud55c \uc2e0\uacbd\uc744 \ub9ce\uc774 \uc368\uc57c\ud558\ub294 \uac83\ub4e4\uc774 \uc0ac\ub77c\uc9c4 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4.","title":"Example, bad"},{"location":"Class/#note_84","text":"\ubd88\ud589\ud558\uac8c\ub3c4 union \uc740 \ud0c0\uc785 \uc7ac\ud574\uc11d\uc5d0 \uaf64 \ub9ce\uc774 \uc0ac\uc6a9\ub41c\ub2e4. \"\ubcf4\ud1b5\uc758 \uacbd\uc6b0, \uae30\ub300\ud55c \ub300\ub85c \ub3d9\uc791\ud55c\ub2e4\"\ub294 \uac83\uc740 \uac15\ud55c \uc8fc\uc7a5\uc774\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc5c6\ub2e4. C++17 \uc5d0\uc11c\ub294 \uc788\ub294 \uadf8\ub300\ub85c\uc758 \ube44\ud2b8\uc5d0 \ub300\ud574 \uc5f0\uc0b0\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub3c4\ub85d std::byte \ud0c0\uc785\uc744 \ucd94\uac00\ud558\uc600\ub2e4. unsigned char \ud639\uc740 char \ub300\uc2e0\uc5d0 \uc774 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c","title":"Note"},{"location":"Class/#enforcement_94","text":"???","title":"Enforcement"},{"location":"Concurrency/","text":"CP: \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uc885\uc885 \uc6b0\ub9ac \ucef4\ud4e8\ud130\uac00 \ub3d9\uc2dc\uc5d0 \ub9ce\uc740 \uc791\uc5c5\ub4e4\uc744 \ud574\uc8fc\uae38 (\ucd5c\uc18c\ud55c \uadf8\ub807\uac8c \ubcf4\uc774\uae30\ub97c) \uc6d0\ud560 \ub54c\uac00 \uc788\uc8e0. \uc774\uc720\ub294 \ub2e4\uc591\ud569\ub2c8\ub2e4. (\uc608\ub97c \ub4e4\uba74, \ub2e8\uc77c \ud504\ub85c\uc138\uc11c\ub9cc \uc4f0\uba74\uc11c \uc5ec\ub7ec \uc774\ubca4\ud2b8\ub97c \uae30\ub2e4\ub9ac\uae30\ub97c \uc6d0\ud558\uac70\ub098, \ub3d9\uc2dc\uc5d0 \ub2e4\uc218\uc758 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc\uc744 \ucc98\ub9ac\ud558\uae38 \uc6d0\ud558\uac70\ub098, \ub610\ub294 \ud558\ub4dc\uc6e8\uc5b4 \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud558\uae38 \uc6d0\ud560 \uc218\ub3c4 \uc788\uaca0\uc8e0.) \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud55c \uae30\ubcf8 \uae30\ub2a5\ub4e4 \ub610\ud55c \uadf8\ub7ec\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294, ISO \ud45c\uc900 C++\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ucd08\uc801\uc778 \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131\uc744 \uc704\ud55c \uae30\ub2a5\uc5d0 \uad00\ud55c \uba87\uba87 \uc77c\ubc18\uc801\uc778 \uc6d0\uce59\uacfc \uaddc\uce59\uc5d0 \ub300\ud574\uc11c \uae30\uc220\ud569\ub2c8\ub2e4. \ub3d9\uc2dc\uc801\uc774\uace0 \ubcd1\ub82c\uc801\uc778 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \uae30\uacc4 \uc218\uc900\uc758 \uc9c0\uc6d0(The core machine support)\uc740 \ubc14\ub85c \uc2a4\ub808\ub4dc\uc785\ub2c8\ub2e4. \uc2a4\ub808\ub4dc\ub4e4\uc744 \uac19\uc740 \uba54\ubaa8\ub9ac\ub97c \uacf5\uc720\ud558\uba74\uc11c\ub3c4 \ub2e4\uc218\uc758 \ud504\ub85c\uadf8\ub7a8\ub4e4\uc744 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc90d\ub2c8\ub2e4. \ub9ce\uc740 \uc774\uc720\ub85c \uc778\ud574 \ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uae4c\ub2e4\ub85c\uc6b4\ub370, \ubb34\uc5c7\ubcf4\ub2e4\ub3c4 \uc2a4\ub808\ub4dc\ub4e4 \uc0ac\uc774\uc5d0 \uc801\uc808\ud55c \ub3d9\uae30\ud654(synchronization)\uac00 \uc5c6\ub2e4\uba74 \ud55c \uc2a4\ub808\ub4dc\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc77d\ub294 \ub3d9\uc548 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uac19\uc740 \ub370\uc774\ud130\ub97c \ub36e\uc5b4\uc4f8 \ub54c\uc758 \ub3d9\uc791\uc744 \uc815\uc758\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38(undefined behavior)\uc785\ub2c8\ub2e4. \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ub2e8\uc77c \uc2a4\ub808\ub4dc \ucf54\ub4dc\ub294 std::async \ub610\ub294 std::thread \ub97c \uc804\ub7b5\uc801\uc73c\ub85c \ucd94\uac00\ud558\ub294 \uac83\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \ubcd1\ub82c\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ub294 \ucf54\ub4dc \uc804\uccb4\ub97c \uc644\uc804\ud788 \ub2e4\uc2dc \uc791\uc131\ud574\uc57c \ud560 \uc218\ub3c4 \uc788\uc8e0. \uc774\ub294 \uc6d0\ub798\uc758 \ucf54\ub4dc\uac00 \uc2a4\ub808\ub4dc\uc5d0 \uc801\ud569\ud558\uac8c(thread-friendly) \uc791\uc131\ub418\uc5c8\ub290\ub0d0\uc5d0 \ub530\ub77c \ub2e4\ub985\ub2c8\ub2e4. \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ub3d9\uc2dc\uc131/\ubcd1\ub82c\uc131 \uaddc\uce59\ub4e4\uc740 3\uac00\uc9c0 \ubaa9\ud45c\ub97c \uac00\uc9c0\uace0 \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4: \uba40\ud2f0\uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uac83 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc2a4\ub808\ub4dc \uae30\ubcf8\uc5f0\uc0b0(primitives)\uc744 \uc0ac\uc6a9\ud558\ub294 \uae54\ub054\ud558\uace0, \uc548\uc804\ud55c \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uac83 \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131\uc774 \uae30\ub300\ub9cc\ud07c\uc758 \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uac00\uc838\uc624\uc9c0 \ubabb\ud560 \ub54c\uc758 \uac00\uc774\ub4dc\ub97c \uc81c\uacf5\ud558\ub294 \uac83 C++\uc5d0\uc11c\uc758 \ub3d9\uc2dc\uc131\uc740 \uc544\uc9c1 \uc9c4\ud589 \uc911\uc774\ub77c\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uae38 \ubc14\ub78d\ub2c8\ub2e4. C++ 11\uc5d0\uc11c\ub294 \ub9ce\uc740 \ub3d9\uc2dc\uc131 \uae30\ubcf8\uc5f0\uc0b0\uc744 \uc18c\uac1c\ud588\uc5c8\uace0, C++14\uc640 C++17\uc5d0\uc11c\ub294 \ubc1c\uc804\uc774 \uc774\ub8e8\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. C++\ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc2dc\uc801\uc778(concurrent) \ud504\ub85c\uadf8\ub7a8\ub4e4\uc744 \uc27d\uac8c \uc791\uc131\ud558\ub294 \uac83\uc5d0 \ub300\ud55c \uad00\uc2ec\ub3c4 \ub298\uc5b4\ub0ac\uc8e0. \uc774 \ubb38\uc11c\uc5d0 \uc788\ub294 \uc77c\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \uad00\ub828\ub41c \uac00\uc774\ub4dc\ub3c4 \uc2dc\uac04\uc774 \uc9c0\ub0a8\uc5d0 \ub530\ub77c \uacc4\uc18d \ubc14\ub00c\uae30\ub97c \uae30\ub300\ud569\ub2c8\ub2e4. (\ub2f9\uc5f0\ud558\uac8c\ub3c4) \uc774 \ubd80\ubd84\uc740 \ub9ce\uc740 \uc791\uc5c5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc804\ubb38\uac00\uac00 \uc544\ub2cc \uc0ac\ub78c\ub4e4\uc744 \uc704\ud55c \uaddc\uce59\uc73c\ub85c \uc2dc\uc791\ud55c\ub2e4\ub294 \uc810\uc744 \uc720\uc758\ud574\uc8fc\uc2ed\uc2dc\uc624. \ub2f9\uc2e0\uc774 \uc804\ubb38\uac00\ub77c\uba74, \uc870\uae08 \ub354 \uae30\ub2e4\ub9ac\uc154\uc57c \ud560\uac81\ub2c8\ub2e4; \uc774 \ubb38\uc11c\uc5d0 \uae30\uc5ec\ud558\ub294 \uac83\ub3c4 \uc88b\uad6c\uc694. \ud558\uc9c0\ub9cc \uc815\ud655\ud558\uace0, \ube60\ub978 \ub3d9\uc2dc\uc801\uc778 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uae38 \uc6d0\ud558\ub294 \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc744 \uc0dd\uac01\ud574 \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uaddc\uce59 \uc694\uc57d: CP.1: \ucf54\ub4dc\uac00 \uba40\ud2f0\uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\ub85c \ub3d9\uc791\ud560 \uac83\uc774\ub77c \uac00\uc815\ud558\ub77c CP.2: \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \ud53c\ud558\ub77c CP.3: \uc4f0\uae30 \uac00\ub2a5\ud55c \ub370\uc774\ud130\uc758 \uba85\uc2dc\uc801\uc778 \uacf5\uc720\ub97c \ucd5c\uc18c\ud654\ud558\ub77c CP.4: \uc2a4\ub808\ub4dc\ubcf4\ub2e8 \uc791\uc5c5 \ub2e8\uc704\ub85c \uc0dd\uac01\ud558\ub77c CP.8: \ub3d9\uae30\ud654\ub97c \uc704\ud574 volatile \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c CP.9: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0, \ub3c4\uad6c (tool) \ub97c \uc774\uc6a9\ud558\uc5ec \uc790\uc2e0\uc758 \ubcd1\ud589 \uc2e4\ud589 \ucf54\ub4dc\ub97c \uac80\uc99d\ud558\ub77c \ucc38\uace0 : CP.con: \ub3d9\uc2dc\uc131(Concurrency) CP.par: \ubcd1\ub82c\uc131(Parallelism) CP.mess: \uba54\uc138\uc9c0 \uc804\ub2ec(Message passing) CP.vec: \ubca1\ud130\ud654(Vectorization) CP.free: \ubb34\uc7a0\uae08 \ud504\ub85c\uadf8\ub798\ubc0d(Lock-free programming) CP.etc: \uae30\ud0c0 \ub3d9\uc2dc\uc131 \uaddc\uce59\ub4e4 CP.1: \ucf54\ub4dc\uac00 \uba40\ud2f0\uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\ub85c \ub3d9\uc791\ud560 \uac83\uc774\ub77c \uac00\uc815\ud558\ub77c Reason \ub3d9\uc2dc\uc131\uc774 \uc9c0\uae08, \uadf8\ub9ac\uace0 \ubbf8\ub798\uc758 \uc5b8\uc820\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc744 \uac83\uc774\ub77c\uace0 \ud655\uc815\ud558\uae30 \uc5b4\ub835\ub2e4. \ucf54\ub4dc\ub294 \uc7ac\uc0ac\uc6a9\ub41c\ub2e4. \uc2a4\ub808\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc740 \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\ub85c \uc0ac\uc6a9\ub418\uae30 \ub9c8\ub828\uc774\ub2e4. \uc774 \uaddc\uce59\uc740 \ub2e8\uc77c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\ubcf4\ub2e4\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucf54\ub4dc\uc5d0 \ub354 \uc2dc\uae09\ud558\uac8c \uc801\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc, Ctrl C, V\uc758 \ub9c8\ubc95 \ub355\ubd84\uc5d0, \ucf54\ub4dc\uac00 \uc608\uc0c1\uce58 \uc54a\uc740 \uacf3\uc5d0\uc11c \ub098\ud0c0\ub0a0 \uc218 \uc788\ub2e4. Example double cached_computation ( double x ) { static double cached_x = 0.0 ; static double cached_result = COMPUTATION_OF_ZERO ; double result ; if ( cached_x == x ) return cached_result ; result = computation ( x ); cached_x = x ; cached_result = result ; return result ; } \ube44\ub85d cached_computation \ud568\uc218\ub294 \ub2e8\uc77c \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc120 \uc644\ubcbd\ud558\uac8c \ub3d9\uc791\ud558\uc9c0\ub9cc, \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc120 \ub450 \uac1c\uc758 static \ubcc0\uc218\ub4e4\uc774 \ub370\uc774\ud130 \uacbd\uc7c1\uc73c\ub85c \uc774\uc5b4\uc9c0\uace0, \ube44\uc815\uc758 \ub3d9\uc791(undefined behavior)\uc744 \uc720\ubc1c\ud560 \uac83\uc774\ub2e4. \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc548\uc804\ud558\uac8c \ubc14\uafc0 \uc218 \uc788\ub294 \ubc29\ubc95\ub4e4\uc774 \uc788\ub2e4: \ub3d9\uc2dc\uc131\uc5d0 \ub300\ud55c \uc0ac\ud56d\uc744 \uc0c1\uc704 \ud638\ucd9c\uc790\uc5d0\uac8c \uc704\uc784\ud558\ub77c static \ubcc0\uc218\ub4e4\uc744 thread_local \ub85c \ub9cc\ub4e4\uc5b4\ub77c (\uc544\ub9c8 \uce90\uc2f1\uc744 \ub35c \ud6a8\uc728\uc801\uc73c\ub85c \ub9cc\ub4e4 \uc218\ub3c4 \uc788\ub2e4) \ub3d9\uc2dc\uc801\uc778 \uc81c\uc5b4\ub97c \uad6c\ud604\ud558\ub77c, \uc608\ucee8\ub300, \ub450 static \ubcc0\uc218\ub97c static \uc7a0\uae08\uc73c\ub85c \ubcf4\ud638\ud558\ub77c (\uc131\ub2a5\uc744 \uac10\uc18c\uc2dc\ud0ac \uc218 \uc788\ub2e4) \ud638\ucd9c\uc790\uac00 \uce90\uc2dc\ub85c \uc0ac\uc6a9\ud560 \uba54\ubaa8\ub9ac\ub97c \uc81c\uacf5\ud558\ub3c4\ub85d \ud558\ub77c. \uadf8\ub807\uac8c \ud568\uc73c\ub85c\uc368 \uba54\ubaa8\ub9ac \ud560\ub2f9\uacfc \ub3d9\uc2dc\uc131\uc5d0 \ub300\ud55c \ubb38\uc81c\ub97c \ud638\ucd9c\uc790\uc5d0\uac8c \uc704\uc784\ud558\ub77c \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c\uc758 \ube4c\ub4dc, \uc2e4\ud589\uc744 \uac70\ubd80\ud558\ub77c \ub450 \uac00\uc9c0 \uad6c\ud604\uc744 \uc9c0\uc6d0\ud558\ub77c. \ub2e8\uc77c \uc2a4\ub808\ub4dc \ud658\uacbd\uc744 \uc704\ud55c \uad6c\ud604\uacfc \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc744 \uc704\ud55c \uac83 \ubaa8\ub450 Exception \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc808\ub300 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc744 \ucf54\ub4dc. \uc8fc\uc758: \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc808\ub300\ub85c \ub3cc\uc544\uac00\uc9c0 \uc54a\uc744 \uc904 \"\uc54c\uc558\ub358\" \ucf54\ub4dc\ub4e4\uc774 \uba87\ub144 \ub4a4\uc5d4 \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\uac00 \ub41c \uc0ac\ub840\ub294 \ub9ce\uc774 \uc788\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c, \uadf8\ub7f0 \ud504\ub85c\uadf8\ub7a8\ub4e4\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \uc5c6\uc560\uae30 \uc704\ud55c \uace0\ud1b5\uc2a4\ub7ec\uc6b4 \ub178\ub825\uc73c\ub85c \uc774\uc5b4\uc9c4\ub2e4. \ub54c\ubb38\uc5d0, \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uac83\uc744 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub4e4\uc740 \ubd84\uba85\ud558\uac8c \ud574\ub2f9 \uc0ac\ud56d\uc774 \uae30\uc220\ub418\uc5b4\uc57c \ud558\uace0, \uc774\uc0c1\uc801\uc73c\ub85c\ub294 \ucef4\ud30c\uc77c \ub610\ub294 \uc2e4\ud589\uc2dc\uac04\uc5d0 \ubc84\uadf8\ub97c \uc77c\ucc0d \ucc3e\uc744 \uc218 \uc788\ub294 \uba54\ucee4\ub2c8\uc998\uc774 \ud568\uaed8 \uc0ac\uc6a9\ub418\ub418\uc5b4\uc57c \ud55c\ub2e4. CP.2: \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \ud53c\ud558\ub77c Reason \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc788\uc73c\uba74, \uc544\ubb34\uac83\ub3c4 \ubcf4\uc7a5\ud560 \uc218 \uc5c6\uc73c\uba70 \ubbf8\ubb18\ud55c \uc5d0\ub7ec\ub4e4\uc774 \uacc4\uc18d\ub420 \uac83\uc774\ub2e4. Note \uc27d\uac8c \ub9d0\ud574\uc11c, \ub9cc\uc57d \ub450 \uc2a4\ub808\ub4dc\uac00 \uac19\uc740 \uac1d\uccb4\ub97c (\ub3d9\uae30\ud654 \uc5c6\uc774) \ub3d9\uc2dc\uc801\uc73c\ub85c \uc811\uadfc\ud560 \uc218 \uc788\ub2e4\uba74, \uadf8\ub9ac\uace0 \ud55c \uc2a4\ub808\ub4dc\uac00 \uc4f0\uae30(non- const \uc5f0\uc0b0)\ub97c \uc218\ud589\ud55c\ub2e4\uba74, \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc788\ub294 \uac83\uc774\ub2e4. \uc5b4\ub5bb\uac8c \ub3d9\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\uace0 \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \uc5c6\uc568 \uac83\uc778\uc9c0 \ub354 \uc54c\uace0 \uc2f6\ub2e4\uba74 \ub3d9\uc2dc\uc131\uc5d0 \ub300\ud55c \uc88b\uc740 \ucc45\ub4e4\uc744 \ucc38\uace0\ud558\ub77c. Example, bad \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc874\uc7ac\ud558\ub294 \uc608\uc2dc\ub294 \ub9ce\ub2e4. \uc9c0\uae08 \uc774 \uc21c\uac04 \uc2e4\ud589 \uc911\uc778 production \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub4e4 \uc911\uc5d0\ub3c4 \uc874\uc7ac\ud560 \uac83\uc774\ub2e4. \uac04\ub2e8\ud55c \uc608\uc2dc\ub97c \ub4e4\uc790\uba74: int get_id () { static int id = 1 ; return id ++ ; } \uc5ec\uae30\uc11c \uc99d\uac00 \uc5f0\uc0b0\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc758 \uc608\uc2dc\ub2e4. \uc774 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc798\ubabb\ub420 \uc218 \uc788\ub2e4: \uc2a4\ub808\ub4dc A\uac00 id \ub97c \ub85c\ub4dc\ud558\uace0, OS\uac00 A\ub97c \uc911\uc9c0\uc2dc\ud0a8\ub2e4. \uadf8 \uc0ac\uc774 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 ID\ub97c \uc218\ubc31 \uac1c \uc0dd\uc131\ud55c\ub2e4. \uadf8 \ud6c4\uc5d0 A\ub294 \ub2e4\uc2dc \uc2e4\ud589\ub418\uace0, A\uc758 \ubb38\ub9e5\uc5d0\uc11c \uc99d\uac00\ud55c id \uac12\uc774 \ub2e4\uc2dc \uc368\uc9c0\uac8c \ub41c\ub2e4. \uc2a4\ub808\ub4dc A\uc640 B\uac00 id \ub97c \ub85c\ub4dc\ud558\uace0 \ub3d9\uc2dc\uc5d0 \uc99d\uac00\uc2dc\ud0a8\ub2e4. \uadf8 \uacb0\uacfc \ub450 \uc2a4\ub808\ub4dc\ub294 \uac19\uc740 ID\uac12\uc744 \uac00\uc9c4\ub2e4. \uc9c0\uc5ed \uc815\uc801 \ubcc0\uc218\ub4e4\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc758 \uc77c\ubc18\uc801\uc778 \uc6d0\uc778\uc774\ub2e4. Example, bad: void f ( fstream & fs , regex pat ) { array < double , max > buf ; int sz = read_vec ( fs , buf , max ); // read from fs into buf gsl :: span < double > s { buf }; // ... auto h1 = async ([ & ]{ sort ( par , s ); }); // spawn a task to sort // ... auto h2 = async ([ & ]{ return find_all ( buf , sz , pat ); }); // spawn a task to find matches // ... } \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294, buf \uc758 \uc6d0\uc18c\ub4e4\uc5d0 \ub300\ud55c \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc788\ub2e4. ( sort \uac00 \uc77d\uae30/\uc4f0\uae30 \ubaa8\ub450 \uc218\ud589\ud560 \uac83\uc774\ub2e4). \uc88b\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc774\ub780 \uc5c6\ub2e4. \uc774 \ucf54\ub4dc\uc5d0\uc120 \uc2a4\ud0dd\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \ubc1c\uc0dd\ud558\ub294\ub370, \ubaa8\ub4e0 \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc774\ucc98\ub7fc \ucc3e\uc544\ub0b4\uae30 \uc27d\uc9c0\ub294 \uc54a\ub2e4. Example, bad: // code not controlled by a lock unsigned val ; if ( val < 5 ) { // ... other thread can change val here ... switch ( val ) { case 0 : // ... case 1 : // ... case 2 : // ... case 3 : // ... case 4 : // ... } } \uc774 \uacbd\uc6b0, val \uc774 \ubc14\ub014\uc218\ub3c4 \uc788\ub2e4\ub294 \uac83\uc744 \ubaa8\ub974\ub294 \ucef4\ud30c\uc77c\ub7ec\ub294 switch \ub97c 5\uac1c\uc758 \uc5d4\ud2b8\ub9ac\ub97c \uc9c0\ub2cc \uc810\ud504 \ud14c\uc774\ube14\ub85c \uad6c\ud604\ud560 \uac83\uc774\ub2e4. \uadf8\ub7ec\uba74, [0..4] \ubc94\uc704 \ubc16\uc758 \uac12\uc744 \uac00\uc9c4 val \uc740 \ud504\ub85c\uadf8\ub7a8\uc758 \uc5b4\ub518\uac00\ub85c \uc810\ud504\ub97c \ud560 \uac83\uc774\uace0, \uadf8 \uc9c0\uc810\ubd80\ud130 \uc2e4\ud589\ub420 \uac83\uc774\ub2e4. \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc788\uc73c\uba74 \uadf8 \ubb34\uc5c7\ub3c4 \uc7a5\ub2f4\ud560 \uc218 \uc5c6\ub2e4. \uc2e4\uc81c\ub85c, \ub354 \uc548\uc88b\uc740 \uacb0\uacfc\ub85c \uc774\uc5b4\uc9c8 \uc218\ub3c4 \uc788\ub2e4: \ucef4\ud30c\uc77c \uacb0\uacfc \ucf54\ub4dc\ub97c \ubcf4\uba74\uc11c \uae38\uc783\uc740 \uc810\ud504\uac00 \ud2b9\uc815 \uac12\uc5d0 \ub530\ub77c\uc11c \uc5b4\ub514\ub85c \uac08\uc9c0 \uc54c \uc218 \uc788\uc744\uc9c0\ub3c4 \ubaa8\ub974\uc9c0\ub9cc, \uc774\ub294 \ubcf4\uc548 \uc704\ud5d8\uc774 \ub420\uc218\ub3c4 \uc788\ub2e4. Enforcement \ucd5c\uc18c\ud55c \ubb34\uc5c7\uc774\ub77c\ub3c4 \ud558\ub77c. \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \uc0c1\uc5c5\uc6a9 \uadf8\ub9ac\uace0 \uc624\ud508\uc18c\uc2a4 \ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c. \ud558\uc9c0\ub9cc \uc815\uc801 \ub3c4\uad6c\ub4e4\uc740 \uc885\uc885 \uc798\ubabb\ub41c \ucf54\ub4dc\ub97c \uc6a9\uc778\ud560\uc218\ub3c4 \uc788\ub2e4. \ub610 \ub7f0\ud0c0\uc784 \ub3c4\uad6c\ub4e4\uc740 \uc885\uc885 \uc0c1\ub2f9\ud55c \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. \ub354 \ub098\uc740 \ub3c4\uad6c\ub4e4\uc774 \ub098\uc624\uae30\ub97c \ubc14\ub780\ub2e4. \uc5ec\ub7ec \ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ud558\ub098\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \ub9ce\uc740 \ubb38\uc81c\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \ub370\uc774\ud130 \uacbd\uc7c1 \ubb38\uc81c\ub97c \uc644\ud654\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc774 \uba87\uac00\uc9c0 \uc788\ub2e4: \ub354 \uc801\uc740 \uc804\uc5ed \ub370\uc774\ud130 \ub354 \uc801\uc740 static \ubcc0\uc218\ub4e4 \uc2a4\ud0dd \uba54\ubaa8\ub9ac \uc911\uc2ec\uc758 \uc0ac\uc6a9 (\ud3ec\uc778\ud130\ub4e4\uc744 \ub108\ubb34 \ub9ce\uc774 \ub358\uc9c0\uc9c0 \ub9d0\uc544\ub77c) \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \ub370\uc774\ud130\ub97c \ub354 \ub9ce\uc774 \uc368\ub77c. (\ub9ac\ud130\ub7f4, constexpr , const ) CP.3: \uc4f0\uae30 \uac00\ub2a5\ud55c \ub370\uc774\ud130\uc758 \uba85\uc2dc\uc801\uc778 \uacf5\uc720\ub97c \ucd5c\uc18c\ud654\ud558\ub77c Reason \uc4f0\uae30 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uacf5\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \uc6d0\ucc9c\uc801\uc73c\ub85c \ub9c9\uc744 \uc218 \uc788\ub2e4. \uacf5\uc720\ub97c \uc904\uc77c \uc218\ub85d, \ub3d9\uae30\ud654 \uc811\uadfc\uacfc \ub370\uc774\ud130 \uacbd\uc7c1\uc758 \uac00\ub2a5\uc131\uc744 \uc904\uc77c \uc218 \uc788\ub2e4. \ub354\ud574\uc11c, \ub300\uae30\uc640 \uc7a0\uae08 \uc5ed\uc2dc \uc904\uc5b4\ub4e0\ub2e4. (\ub530\ub77c\uc11c \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub420 \uac83\uc774\ub2e4) Example bool validate ( const vector < Reading >& ); Graph < Temp_node > temperature_gradiants ( const vector < Reading >& ); Image altitude_map ( const vector < Reading >& ); // ... void process_readings ( const vector < Reading >& surface_readings ) { auto h1 = async ([ & ] { if ( ! validate ( surface_readings )) throw Invalid_data {}; }); auto h2 = async ([ & ] { return temperature_gradiants ( surface_readings ); }); auto h3 = async ([ & ] { return altitude_map ( surface_readings ); }); // ... h1 . get (); auto v2 = h2 . get (); auto v3 = h3 . get (); // ... } \uc704 \ucf54\ub4dc\uc5d0\uc11c const \ub4e4\uc774 \uc5c6\ub2e4\uba74, surface_readings \uc5d0 \ub300\ud55c \uc7a0\uc7ac\uc801 \ub370\uc774\ud130 \uacbd\uc7c1 \ub54c\ubb38\uc5d0 \ubaa8\ub4e0 \ube44\ub3d9\uae30\uc801\uc778 \ud568\uc218 \ud638\ucd9c\uc744 \ub2e4\uc2dc \uc810\uac80\ud574\uc57c \ud560 \uac83\uc774\ub2e4. surface_readings \uc744 (\uc774 \ud568\uc218\uc5d0 \ub300\ud574\uc11c) const \ub85c \ub9cc\ub4e4\uba74 \ubb38\uc81c \uc601\uc5ed\uc744 \ud568\uc218 \uc548\ucabd\uc73c\ub85c \ud55c\uc815\ud560 \uc218 \uc788\ub2e4. Note \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \ub370\uc774\ud130\ub294 \uc548\uc804\ud558\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \uacf5\uc720\ub420 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d4 \uc7a0\uae08\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4: \uc0c1\uc218\uc5d0 \ub300\ud574\uc11c\ub294 \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. CP.mess: Message Passing \uc640 CP.31: prefer pass by value \ub97c \ud568\uaed8 \ud655\uc778\ud558\ub77c. Enforcement ??? CP.4: \uc2a4\ub808\ub4dc\ubcf4\ub2e8 \uc791\uc5c5 \ub2e8\uc704\ub85c \uc0dd\uac01\ud558\ub77c Reason thread \uc790\uccb4\ub294 \uad6c\ud604\uc5d0 \ub300\ud55c \uac1c\ub150\uc774\ub2e4. \uc774\ub294 \uae30\uacc4\uc5d0 \ub300\ud574\uc11c \uc0dd\uac01\ud558\ub294 \uac83\uc774\ub2e4. \uc791\uc5c5\uc740 \ud504\ub85c\uadf8\ub7a8((Application)\uc5d0 \ub300\ud574\uc11c \uc0dd\uac01\ud558\ub294 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc758 \uc0dd\uac01\uacfc \ub354 \uac00\uae4c\uc6b8 \uac83\uc774\uace0, \uc544\ub9c8\ub3c4 \ub2e4\ub978 \uc791\uc5c5\ub4e4\uacfc \ub3d9\uc2dc\uc801\uc77c \uac83\uc774\ub2e4. \uc751\uc6a9\uac1c\ub150\uc740 \ucd94\ub860\ud558\uae30\ub3c4 \uc27d\ub2e4. Example void some_fun () { std :: string msg , msg2 ; std :: thread publisher ([ & ] { msg = \"Hello\" ; }); // bad: less expressive // and more error-prone auto pubtask = std :: async ([ & ] { msg2 = \"Hello\" ; }); // OK // ... publisher . join (); } Note async() \ub97c \uc81c\uc678\ud558\uba74, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uae30\ub2a5\ub4e4\uc740 \uc800-\ub808\ubca8\uc5d0, \uae30\uacc4 \uc911\uc2ec\uc801(machine-oriented)\uc774\uace0, \uc2a4\ub808\ub4dc-\uc7a0\uae08 \ub808\ubca8\uc5d0 \uc704\uce58\ud55c\ub2e4. \uc774 \uae30\ub2a5\ub4e4\uc740 \ud544\uc218\uc801\uc774\uc9c0\ub9cc, \uc6b0\ub9ac\ub294 \uc0dd\uc0b0\uc131, \uc2e0\ub8b0\uc131, \uadf8\ub9ac\uace0 \uc131\ub2a5\uc744 \uc704\ud574\uc11c \ucd94\uc0c1\ud654\uc758 \uc218\uc900\uc744 \ub354 \ub192\uc77c \ud544\uc694\uac00 \uc788\ub2e4. \uc0c1\uc704 \ub808\ubca8\uc758, \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \uc911\uc2ec\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc5d0 \ub300\ud574\uc120 \ub17c\uc758\uc758 \uc5ec\uc9c0\uac00 \uc788\ub2e4. (\uac00\ub2a5\ud558\ub2e4\uba74 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c). Enforcement ??? CP.8: \ub3d9\uae30\ud654\ub97c \uc704\ud574 volatile \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Reason C++ \uc5d0\uc120, \ub2e4\ub978 \uc5b8\uc5b4\uc640\ub294 \ub2e4\ub974\uac8c, volatile \uc774 \uc6d0\uc790\uc131\uacfc \uc2a4\ub808\ub4dc\uac04 \ub3d9\uae30\ud654\ub97c \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub610\ud55c volatile \uc740 \uba85\ub839\uc5b4 \uc7ac\ubc30\uce58(\ucef4\ud30c\uc77c\ub7ec\uc640 \ud558\ub4dc\uc6e8\uc5b4 \ubaa8\ub450)\ub97c \uc81c\ud55c\ud558\uc9c0\ub3c4 \uc54a\ub294\ub2e4. volatile \uc740 \ub3d9\uc2dc\uc131\uacfc \ubb34\uad00\ud558\ub2e4. Example, bad: int free_slots = max_slots ; // current source of memory for objects Pool * use () { if ( int n = free_slots -- ) return & pool [ n ]; } \uc774 \ucf54\ub4dc\uc5d4 \ubb38\uc81c\uac00 \uc788\ub2e4: \ub2e8\uc77c \uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc774\ub77c\uba74, \uc774 \ucf54\ub4dc\ub294 \uc544\ubb34\ub7f0 \ubb38\uc81c\uac00 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc \ub450 \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud55c\ub2e4\uba74, free_slots \uc5d0 \ub300\ud55c \uacbd\uc7c1 \uc0c1\ud0dc\uac00 \ubc1c\uc0dd\ud55c\ub2e4. \ub530\ub77c\uc11c \ub450 \uc2a4\ub808\ub4dc\ub294 \uac19\uc740 free_slots \uac12\uc744 \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub294 (\uba85\ubc31\ud558\uac8c) \uc798\ubabb\ub41c \uacb0\uacfc\ub85c \uc774\uc5b4\uc9c4\ub2e4. \ub2e4\ub978 \uc5b8\uc5b4\ub4e4\uc5d0 \uc775\uc219\ud55c \uc0ac\ub78c\ub4e4\uc740 \uc774 \ucf54\ub4dc\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc218\uc815\ud560 \uac83\uc774\ub2e4.: volatile int free_slots = max_slots ; // current source of memory for objects Pool * use () { if ( int n = free_slots -- ) return & pool [ n ]; } volatile \ub85c \ubc14\uafe8\uc9c0\ub9cc, \ub3d9\uae30\ud654\uc5d4 \uc544\ubb34\ub7f0 \uc601\ud5a5\uc774 \uc5c6\ub2e4. \uc774 \ucf54\ub4dc\uc5d4 \uc5ec\uc804\ud788 \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc874\uc7ac\ud55c\ub2e4! C++ \uc5d0\uc120, \ub3d9\uae30\ud654\ub97c \uc6d0\ud55c\ub2e4\uba74 atomic \ud0c0\uc785\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4: atomic < int > free_slots = max_slots ; // current source of memory for objects Pool * use () { if ( int n = free_slots -- ) return & pool [ n ]; } \uc774\uc81c -- \uc5f0\uc0b0\uc740 \uc6d0\uc790\uc801\uc774\ub2e4. \uc774\ub294 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \ub07c\uc5ec\ub4e4 \uc5ec\uc9c0\uac00 \uc788\ub294 \uc77d\uae30-\uc99d\uac00-\uc4f0\uae30 \uacfc\uc815\uacfc\ub294 \ub2e4\ub974\ub2e4. Alternative \ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c volatile \uc744 \uc0ac\uc6a9\ud588\ub2e4\uba74, C++\uc5d0\uc120 atomic \uc744 \uc0ac\uc6a9\ud558\ub77c. \ub354 \ubcf5\uc7a1\ud55c \uacbd\uc6b0\ub77c\uba74 mutex \ub97c \uc0ac\uc6a9\ud558\ub77c. See also volatile \uc758 \uc801\uc808\ud55c \uc0ac\uc6a9 CP.9: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0, \ub3c4\uad6c (tool) \ub97c \uc774\uc6a9\ud558\uc5ec \uc790\uc2e0\uc758 \ubcd1\ud589 \uc2e4\ud589 \ucf54\ub4dc\ub97c \uac80\uc99d\ud558\ub77c \uacbd\ud5d8\uc774 \ubcf4\uc5ec\uc8fc\ub4ef, \ubcd1\ud589 \uc2e4\ud589 \ucf54\ub4dc\ub294 \uc62c\ubc14\ub974\uac8c \uc791\uc131\ud558\uae30\uac00 \uadf9\ud788 \uc5b4\ub824\uc6b0\uba70, \ucef4\ud30c\uc77c \uc2dc\uc810 \uc810\uac80, \uc2e4\ud589 \uc2dc\uc810 \uc810\uac80 \ubc0f \ud14c\uc2a4\ud305\uc744 \ud1b5\ud55c \ubcd1\ud589 \uc2e4\ud589 \ubb38\uc81c\ub97c \uac80\ucd9c\ud558\ub294 \uac83\uc774 \uc21c\ucc28\uc801\uc778 \ucf54\ub4dc\uc5d0\uc11c \uc77c\ubc18\uc801\uc778 \ubb38\uc81c\uc810\uc744 \ucc3e\ub294 \uac83\ub9cc\ud07c \ud6a8\uacfc\uc801\uc774\uc9c0 \uc54a\ub2e4. \ubbf8\ubb18\ud55c \ubcd1\ud589 \uc2e4\ud589 \uc624\ub958\ub4e4\uc740 \uba54\ubaa8\ub9ac \uc190\uc0c1\uc774\ub098 \uad50\ucc29 \uc0c1\ud0dc\uc640 \uac19\uc740 \uc2ec\uac01\ud55c \ud3d0\ud574\ub97c \uac00\uc838\uc62c \uc218 \uc788\ub2e4. Example ??? Note \uc2a4\ub808\ub4dc \uc548\uc804\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4dc\ub294 \uac83\uc740 \uc219\ub2ec\ub41c \uac1c\ubc1c\uc790\ub4e4\uc870\ucc28 \uc885\uc885 \uace4\ub780\ud558\uac8c \ub9cc\ub4dc\ub294 \ub9cc\ub9cc\ucc2e\uc740 \uc791\uc5c5\uc774\ub2e4: \uc801\uc808\ud55c \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc774\ub7ec\ud55c \uc704\ud5d8\uc744 \ub35c \uc218 \uc788\ub294 \uc911\uc694\ud55c \uc804\ub7b5\uc774\ub2e4. \uc774\ub7ec\ud55c \ub3c4\uad6c\ub4e4\uc740 \uc0c1\uc6a9 / \uc624\ud508\uc18c\uc2a4 \uc640 \uc5f0\uad6c\uc6a9 / \uc0dd\uc0b0\uc6a9\uc744 \uac00\ub9ac\uc9c0 \uc54a\uace0 \ub2e4\uc591\ud55c \ud615\ud0dc\uc758 \uc218\ub9ce\uc740 \uc885\ub958\uac00 \uc81c\uacf5\ub418\uace0 \uc788\ub2e4. \uc548\ud0c0\uae5d\uac8c\ub3c4, \uac01\uc790\uc758 \uc694\uad6c \uc0ac\ud56d\uacfc \uc81c\uc57d\uc0ac\ud56d\uc774 \ubaa8\ub450 \ub2e4\ub974\ubbc0\ub85c, \ud2b9\uc815 \ub3c4\uad6c\ub97c \ucd94\ucc9c\ud558\uae30\ub294 \uc5b4\ub824\uc6b0\ub098, \uba87 \uac00\uc9c0\ub97c \uac70\ub860\ud560 \uc218\ub294 \uc788\ub2e4: \uc815\uc801 \uc9c0\uce68 \ub3c4\uad6c: clang \uacfc GCC \uc758 \uba87\uba87 \uc9c0\ub09c \ubc84\uc804\ub4e4\uc740 \uc2a4\ub808\ub4dc \uc548\uc804\uc758 \ud2b9\uc131\uacfc \uad00\ub828\ub41c \uba87 \uac00\uc9c0 \uc815\uc801 \uc8fc\ud574\ubb38 (static annotation) \uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub7ec\ud55c \uae30\ubc95\uc758 \uc77c\uad00\uc131 \uc788\ub294 \uc0ac\uc6a9\uc740 \ub2e4\uc591\ud55c \uc885\ub958\uc758 \uc2a4\ub808\ub4dc \uc548\uc804 \uad00\ub828 \uc624\ub958\ub97c \ucef4\ud30c\uc77c \uc2dc\uc810 \uc624\ub958\ub85c \ub9cc\ub4e4\uc5b4\uc900\ub2e4. \uc774\ub7ec\ud55c \uc8fc\ud574\ubb38\ub4e4\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uc9c0\uc5ed\uc801\uc774\uba70 (\ud2b9\uc815 \uba64\ubc84 \ubcc0\uc218\ub97c \ud2b9\uc815 \ubba4\ud14d\uc2a4\ub97c \ud1b5\ud574 \ubcf4\ud638\ub418\uac8c \ud45c\uc2dc\ud568\uc73c\ub85c\uc368), \ub300\uac1c\uc758 \uacbd\uc6b0 \uc27d\uac8c \ubc30\uc6b8 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub098, \ub2e4\ub978 \ub9ce\uc740 \uc815\uc801 \ub3c4\uad6c\ub4e4\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c, \ubcf8\ub514 \uac80\ucd9c\ub418\uc5b4\uc57c \ud558\ub098 \ud5c8\uc6a9 \ucc98\ub9ac\ub418\ub294 \uc798\ubabb\ub41c \uac70\uc9d3 \uc74c\uc131 (false negative) \uacb0\uacfc\ub97c \uc885\uc885 \uc81c\ucd9c\ud560 \uc218\ub3c4 \uc788\ub2e4. \ub3d9\uc801 \uc9c0\uce68 \ub3c4\uad6c: Clang \uc758 Thread Sanitizer (aka TSAN) \uc740 \uac15\ub825\ud55c \ub3d9\uc801 \ub3c4\uad6c\uc758 \ud55c \uc608\uc774\ub2e4: \uc774 \ub3c4\uad6c\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \uba54\ubaa8\ub9ac \uc811\uadfc\uc744 \uc7a5\ubd80\uc5d0 \uae30\ub85d\ud560 \uc218 \uc788\ub3c4\ub85d \ube4c\ub4dc \ubc0f \uc2e4\ud589\uc744 \ubcc0\uacbd\ud558\uc5ec, \ud574\ub2f9 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc2dc \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \ud655\uc2e4\ud788 \uac80\ucd9c\ud574 \ub0bc \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. \uc774\ub97c \uc704\ud574\uc11c\ub294 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub791 (\ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 5-10\ubc30) \uacfc CPU \uc131\ub2a5 \uc800\ud558 (2-20\ubc30) \ub97c \ube44\uc6a9\uc73c\ub85c \uc9c0\ubd88\ud574\uc57c \ud55c\ub2e4. \uc774\ub7ec\ud55c \ub3d9\uc801 \ub3c4\uad6c\ub4e4\uc740 \ud1b5\ud569 \ud14c\uc2a4\ud2b8\ub098 \uce74\ub098\ub9ac\uc544 \ud14c\uc2a4\ud2b8 \ud639\uc740 \ubcf5\uc218\uc758 \uc2a4\ub808\ub4dc\uc0c1\uc5d0\uc11c \uc791\ub3d9\ud558\ub294 \ub2e8\uc704 \ud14c\uc2a4\ud2b8\uc5d0 \uc801\uc6a9\ud558\uae30 \uac00\uc7a5 \uc54c\ub9de\ub2e4. \uc791\uc5c5\ub7c9\uc774 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4: TSAN \uc774 \uac80\ucd9c\ud574 \ub0b8 \ubb38\uc81c\uc810\uc740 \uac70\uc758 \ud56d\uc0c1 \uc2e4\uc9c8\uc801\uc778 \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \uc815\ud655\ud558\uac8c \uc9da\uc5b4 \ub0b4\uc9c0\ub9cc, \ud574\ub2f9 \uc2e4\ud589 \uacfc\uc815 \uc911\uc5d0 \ubc1c\uacac\ub41c \ubb38\uc81c\ub9cc\uc774 \uac80\ucd9c \uac00\ub2a5\ud558\ub2e4. Enforcement \ud2b9\uc815 \ud504\ub85c\uadf8\ub7a8\ub4e4\uc5d0 \uc788\uc5b4\uc11c \uc5b4\ub5a4 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud560 \uac83\uc778\uc9c0 \uace0\ub974\ub294 \uac83\uc740 \ud574\ub2f9 \ud504\ub85c\uadf8\ub7a8 \uc81c\uc791\uc790\uc5d0\uac8c \ub2ec\ub824 \uc788\ub2e4. CP.con: \ub3d9\uc2dc\uc131 \uc774 Section\uc740 \ub2e4\uc218\uc758 \uc2a4\ub808\ub4dc\ub4e4\uc774 \uacf5\uc720 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud574 \ud1b5\uc2e0\ud558\ub294 \ubd80\ubd84\uc5d0 \ub300\ud574 \ub2e4\ub8f9\ub2c8\ub2e4. \ubcd1\ub82c \uc54c\uace0\ub9ac\uc998\uc740 parallelism \ub97c \ucc38\uc870\ud558\uc138\uc694 \uba85\uc2dc\uc801\uc778 \uacf5\uc720\uc5c6\ub294 \uc791\uc5c5\uac04 \ud1b5\uc2e0\ubc29\ubc95\uc740 messaging \uc744 \ucc38\uc870\ud558\uc138\uc694 For vector parallel code, see vectorization \ubb34\uc7a0\uae08 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 lock free \ub97c \ucc38\uc870\ud558\uc138\uc694 \ub3d9\uc2dc\uc131 \uaddc\uce59 \uc694\uc57d: CP.20: lock() / unlock() \ub300\uc2e0 RAII\ub97c \uc0ac\uc6a9\ud558\ub77c CP.21: \ubcf5\uc218\uc758 mutex \ud68d\ub4dd\uc744 \uc704\ud574\uc11c\ub294 std::lock() \uc774\ub098 std::scoped_lock \uc744 \uc0ac\uc6a9\ud558\ub77c CP.22: lock \uc744 \uc0ac\uc6a9 \uc911\uc77c \ub54c\ub294 \uc54c \uc218 \uc5c6\ub294 \ucf54\ub4dc\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9d0\uc544\ub77c(\uc608: callback) CP.23: join \ud558\ub294 thread \ub97c \uc720\ud6a8\ubc94\uc704 \uc548\uc758 \ucee8\ud14c\uc774\ub108\ucc98\ub7fc \uc0dd\uac01\ud558\ub77c CP.24: thread \ub97c \uc804\uc5ed \ucee8\ud14c\uc774\ub108\ucc98\ub7fc \uc0dd\uac01\ud558\ub77c CP.25: std::thread \ubcf4\ub2e4\ub294 gsl::joining_thread \uc0ac\uc6a9\uc744 \uc6b0\uc120\ud558\uc5ec \uace0\ub824\ud558\ub77c CP.26: \uc2a4\ub808\ub4dc\ub97c detach() \ud558\uc9c0 \ub9d0\uc544\ub77c CP.31: \uc2a4\ub808\ub4dc\ub4e4 \uac04\uc758 \uc791\uc740 \ub370\uc774\ud130 \uc804\ub2ec\uc740 \ucc38\uc870\ub098 \ud3ec\uc778\ud130\ubcf4\ub2e4\ub294 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\ub77c CP.32: \uad00\ub828 \uc5c6\ub294 thread \uac04\uc758 \uc18c\uc720\uad8c \uacf5\uc720\ub294 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c CP.40: \ubb38\ub9e5 \uad50\ud658\uc744 \ucd5c\uc18c\ud654\ud558\ub77c CP.41: \uc2a4\ub808\ub4dc \uc0dd\uc131\uacfc \uc18c\uba78\uc744 \ucd5c\uc18c\ud654\ud558\ub77c CP.42: \uc870\uac74 \uc5c6\uc774 wait \ud558\uc9c0 \ub9d0\uc544\ub77c CP.43: \uc784\uacc4 \uc601\uc5ed(Critical Section)\uc5d0\uc11c\uc758 \uc2dc\uac04\uc744 \ucd5c\uc18c\ud654\ud558\ub77c CP.44: lock_guard \uacfc unique_lock \uc5d0\ub294 \uc774\ub984\uc744 \ubd99\uc5ec\ub77c CP.50: mutex \ub97c \ubcf4\ud638(guard) \ud574\uc57c \ud558\ub294 \ub370\uc774\ud130\uc640 \ud568\uaed8 \uc120\uc5b8\ud558\ub77c. \uac00\ub2a5\ud55c \uacbd\uc6b0\uc5d0\ub294 synchronized_value<T> \ub97c \uc0ac\uc6a9\ud558\ub77c ??? \uc5b8\uc81c \uc2a4\ud540\ub77d(spinlock)\uc744 \uc0ac\uc6a9\ud558\ub294\uac00 ??? \uc5b8\uc81c try_lock() \uc744 \uc0ac\uc6a9\ud558\ub294\uac00 ??? \uc5b8\uc81c unique_lock \ubcf4\ub2e4 lock_guard \ub97c \uc4f0\ub294\uac00 ??? Time multiplexing ??? \uc5b8\uc81c/\uc5b4\ub5bb\uac8c new thread \ub97c \uc0ac\uc6a9\ud558\ub294\uac00 CP.20: lock() / unlock() \ub300\uc2e0 RAII\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc7a0\uae08\uc744 \ud574\uc81c\ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c \uc778\ud55c \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. Example, bad mutex mtx ; void do_stuff () { mtx . lock (); // ... do stuff ... mtx . unlock (); } \uc5bc\ub9c8 \ud6c4 \ub610\ub294 \ub098\uc911\uc5d0, \ub204\uad70\uac00 mtx.unlock() \uc744 \uc78a\uc5b4\ubc84\ub9b0\ub2e4. \uadf8\ub9ac\uace4 return \uc744 ... do stuff ... \uc5d0 \ubd99\uc774\uac70\ub098, \uc608\uc678\ub098 \ubb34\uc5b8\uac00\ub97c \ub358\uc9c4\ub2e4. mutex mtx ; void do_stuff () { unique_lock < mutex > lck { mtx }; // ... do stuff ... } Enforcement lock() \uacfc unlock() \uc758 \ud638\ucd9c\uc5d0 \ud45c\uc2dd\uc744 \ub0a8\uaca8\ub77c ??? CP.21: \ubcf5\uc218\uc758 mutex \ud68d\ub4dd\uc744 \uc704\ud574\uc11c\ub294 std::lock() \uc774\ub098 std::scoped_lock \uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ubcf5\uc218\uc758 mutex \ub85c \uc778\ud55c \uad50\ucc29\uc0c1\ud0dc\ub97c \ubc29\uc9c0\ud55c\ub2e4. Example \ub2e4\uc74c \ucf54\ub4dc\ub294 \uad50\ucc29 \uc0c1\ud0dc\ub97c \uc720\ubc1c\ud55c\ub2e4: // thread 1 lock_guard < mutex > lck1 ( m1 ); lock_guard < mutex > lck2 ( m2 ); // thread 2 lock_guard < mutex > lck2 ( m2 ); lock_guard < mutex > lck1 ( m1 ); \ub300\uc2e0\ud558\uc5ec lock() \uc744 \uc0ac\uc6a9\ud558\ub77c : // thread 1 lock ( m1 , m2 ); lock_guard < mutex > lck1 ( m1 , adopt_lock ); lock_guard < mutex > lck2 ( m2 , adopt_lock ); // thread 2 lock ( m2 , m1 ); lock_guard < mutex > lck2 ( m2 , adopt_lock ); lock_guard < mutex > lck1 ( m1 , adopt_lock ); \ud639\uc740 (\ub354 \uc88b\uc740 \ubc29\ubc95\uc774\uc9c0\ub9cc, C++17 \uc5d0\uc11c\ub9cc \uac00\ub2a5\ud55c): // thread 1 scoped_lock < mutex , mutex > lck1 ( m1 , m2 ); // thread 2 scoped_lock < mutex , mutex > lck2 ( m2 , m1 ); \uc704 \ucf54\ub4dc\uc5d0\uc11c, thread1 \uacfc thread2 \uc758 \uc791\uc131\uc790\ub4e4\uc740 \uc5ec\uc804\ud788 mutex \ub4e4\uc758 \uc21c\uc11c\uc5d0 \ud569\uc758\ud558\uc9c0\ub294 \ubabb\ud588\uc9c0\ub9cc, \uadf8 \uc21c\uc11c\ub294 \ub354 \uc774\uc0c1 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4. Note \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294, mutex \ub4e4\uc774 \uc11c\ub85c \uac04\uc758 \uc758\ub3c4\ub41c \uad00\uacc4\ub098 \uc758\ub3c4\ub41c \ud68d\ub4dd \uc21c\uc11c\ub97c \ud504\ub85c\uadf8\ub798\uba38\uc5d0\uac8c \uc27d\uac8c \uc0c1\uae30\uc2dc\ud0ac \uc218 \uc788\ub3c4\ub85d \uba85\uba85\ub3fc \uc788\ub294 \uacbd\uc6b0\uac00 \ub4dc\ubb3c\ub2e4. \ub610\ud55c \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294, mutex \ub4e4\uc774 \ud3b8\ub9ac\ud558\uac8c\ub3c4 \ud56d\uc0c1 \uc5f0\uc18d\ub41c \uc904\uc5d0 \ud68d\ub4dd\uc774 \uc774\ub8e8\uc5b4\uc9c0\uc9c0\ub294 \uc54a\ub294\ub2e4. C++17 \uc5d0\uc11c\ub294 \uac04\ub2e8\ud788 \uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud558\uc5ec lock_guard lck1 ( m1 , adopt_lock ); mutex \ud0c0\uc785\uc744 \uc790\ub3d9\uc73c\ub85c \ucd94\ub860\ub418\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4. Enforcement \ubcf5\uc218\uc758 mutex \ud68d\ub4dd\uc744 \uac80\ucd9c\ud574 \ub0b4\ub77c. \uc77c\ubc18\uc801\uc73c\ub85c \uc774\ub294 \ud310\ubcc4\uc774 \uc5b4\ub824\uc6b4 \uacbd\uc6b0\uac00 \ub9ce\uc9c0\ub9cc, \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \uac04\ub2e8\ud55c (\uc0c1\ub2e8\uc758 \uc608\uc81c\uc640 \uac19\uc740) \uc0ac\ub840\ub97c \uc7a1\uc544\ub0b4\ub294 \uac83\uc740 \uc5b4\ub835\uc9c0 \uc54a\ub2e4. CP.22: lock \uc744 \uc0ac\uc6a9 \uc911\uc77c \ub54c\ub294 \uc54c \uc218 \uc5c6\ub294 \ucf54\ub4dc\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9d0\uc544\ub77c (\uc608: callback) Reason \uc5b4\ub5a4 \ub3d9\uc791\uc744 \ud560\uc9c0 \ud655\uc2e4\uce58 \uc54a\uc740 \ucf54\ub4dc\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc740 \uad50\ucc29 \uc0c1\ud0dc\ub97c \uc720\ubc1c\ud560 \uc704\ud5d8\uc744 \uac10\uc218\ud558\ub294 \uac83\uc774\ub2e4. Example void do_this ( Foo * p ) { lock_guard < mutex > lck { my_mutex }; // ... do something ... p -> act ( my_data ); // ... } \ub9cc\uc57d \ub2f9\uc2e0\uc774 Foo::act \uac00 \uc5b4\ub5a4 \uc791\uc5c5\uc744 \ud558\ub294\uc9c0 \ubaa8\ub978\ub2e4\uba74 (\ud574\ub2f9 \ud568\uc218\ub294 \uc544\uc9c1 \uc791\uc131\ub418\uc9c0 \uc54a\uc740 \ud30c\uc0dd \ud074\ub798\uc2a4\uc758 \uba64\ubc84\ub97c \ud638\ucd9c\ud558\ub294 \uac00\uc0c1 \ud568\uc218\uc77c \uc218 \uc788\ub2e4), do_this \ud568\uc218\ub97c (\uc7ac\uadc0\uc801\uc73c\ub85c) \ubd80\ub97c \uc218\ub3c4 \uc788\uc5b4 my_mutex \uc5d0 \uad50\ucc29\uc0c1\ud0dc\ub97c \uc720\ubc1c\ud560 \uc218 \uc788\ub2e4. \uc544\ub2c8\uba74 \ud574\ub2f9 \ud568\uc218\uac00 \ub2e4\ub978 \ubba4\ud14d\uc2a4\ub97c \uc7a0\uadf8\uace0 \uc801\uc808\ud55c \uc2dc\uac04 \uc548\uc5d0 \ud574\uc81c\ub97c \ud558\uc9c0 \uc54a\uc544, do_this \ub97c \ud638\ucd9c\ud558\ub294 \ub2e4\ub978 \ucf54\ub4dc\uc5d0 \uc788\uc5b4 \uc9c0\uc5f0\uc744 \uc720\ubc1c\ud560 \uc218\ub3c4 \uc788\ub2e4. Example \"\ubbf8\uc9c0\uc758 \ucf54\ub4dc \ud638\ucd9c\" \ubb38\uc81c\uc758 \ud754\ud55c \uc0ac\ub840\ub294 \ub3d9\uc77c\ud55c \uac1d\uccb4\uc5d0 \ub300\ud574 \uc7a0\uae08 \uad8c\ud55c\uc744 \uc5bb\uc73c\ub824 \ud558\ub294 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uacbd\uc6b0\uc774\ub2e4. \uc774\ub7ec\ud55c \ud638\ucd9c \ubb38\uc81c\ub294 recursive_mutex \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uc885\uc885 \ud574\uacb0\uc774 \uac00\ub2a5\ud558\ub2e4. \uc608\ub97c \ub4e4\uc5b4: recursive_mutex my_mutex ; template < typename Action > void do_something ( Action f ) { unique_lock < recursive_mutex > lck { my_mutex }; // ... do something ... f ( this ); // f will do something to *this // ... } \ub9cc\uc57d, \uc544\ub9c8\ub3c4 \uadf8\ub7ec\ud558\uaca0\uc9c0\ub9cc, f() \uac00 *this \uc5d0 \ub300\ud574\uc11c \uc5b4\ub5a4 \uc791\uc5c5\uc744 \uc218\ud589\ud55c\ub2e4\uace0 \ud558\uba74, \ud574\ub2f9 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uae30 \uc804\uc5d0 \uac1d\uccb4\uc758 \ubd88\ubcc0 \uc870\uac74 (invariant) \uc774 \uc720\uc9c0\ub418\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud55c\ub2e4. Enforcement \uc7ac\uadc0 \uc6a9\uc774 \uc544\ub2cc mutex \ub97c \uc7a0\uadfc \ud6c4 \ud638\ucd9c\ud558\ub294 \uac00\uc0c1 \ud568\uc218 \ud638\ucd9c\uc744 \uc9c0\uc801\ud558\ub77c \uc7ac\uadc0 \uc6a9\uc774 \uc544\ub2cc mutex \ub97c \uc7a0\uadfc \ud6c4 \ud638\ucd9c\ud558\ub294 \ucf5c\ubc31 \ud568\uc218 \ud638\ucd9c\uc744 \uc9c0\uc801\ud558\ub77c CP.23: join \ud558\ub294 thread \ub97c \uc720\ud6a8\ubc94\uc704 \uc548\uc758 \ucee8\ud14c\uc774\ub108\ucc98\ub7fc \uc0dd\uac01\ud558\ub77c Reason \ud3ec\uc778\ud130 \uc0ac\uc6a9\uc758 \uc548\uc804\uc131\uacfc \uba54\ubaa8\ub9ac \ub204\uc218 \ubc29\uc9c0\ub97c \uc704\ud558\uc5ec, \uc5b4\ub5a4 \ud3ec\uc778\ud130\ub4e4\uc774 thread \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294\uc9c0 \uc8fc\uc758 \uae4a\uac8c \uc0b4\ud3b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d thread \uac00 join \ud55c\ub2e4\uace0 \ud558\uba74, thread \uc758 \uc720\ud6a8\ubc94\uc704 \ubc0f \ud3ec\ud568\ub418\ub294 \uc720\ud6a8\ubc94\uc704 \ub0b4\uc758 \uac1d\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc548\uc804\ud558\uac8c \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4. Example void f ( int * p ) { // ... * p = 99 ; // ... } int glob = 33 ; void some_fct ( int * p ) { int x = 77 ; joining_thread t0 ( f , & x ); // OK joining_thread t1 ( f , p ); // OK joining_thread t2 ( f , & glob ); // OK auto q = make_unique < int > ( 99 ); joining_thread t3 ( f , q . get ()); // OK // ... } gsl::joining_thread \ub294 join \ud558\ub294 \uc18c\uba78\uc790\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70 detached() \ub420 \uc218 \uc5c6\ub294 std::thread \uc774\ub2e4. \"OK\" \ub77c\uace0 \ud568\uc740 thread \uac00 \uc804\ub2ec\ubc1b\uc740 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud55c, \ud574\ub2f9 \uac1d\uccb4\uac00 \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0 (\"\uc0b4\uc544\") \uc788\uc744 \uac83\uc784\uc744 \uc758\ubbf8\ud55c\ub2e4. thread \ub4e4\uc774 \ubcd1\ud589 \uc2e4\ud589\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uc774 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc874\uc18d \uae30\uac04\uc774\ub098 \uc18c\uc720\uad8c \uad00\ub828 \ubb38\uc81c\uc5d0 \uc788\uc5b4\uc11c \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\ub294\ub2e4; \uc774 thread \ub4e4\uc740 \ub2e8\uc21c\ud788 some_fct \ub85c\ubd80\ud130 \ud638\ucd9c\ub418\ub294 \ud568\uc218 \uac1d\uccb4\ub4e4\ub85c \ubcfc \uc218 \uc788\ub2e4. Enforcement joining_thread \uac00 detach() \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud655\uc778\ud558\ub77c. \ud655\uc778\uc774 \ub05d\ub09c \ud6c4\uc5d0\ub294, (\uc9c0\uc5ed \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c) \ud1b5\uc0c1\uc801\uc778 \uc874\uc18d \uae30\uac04\uacfc \uc18c\uc720\uad8c \uc801\uc6a9 \ubc29\uc2dd\uc744 \ub530\ub978\ub2e4. CP.24: thread \ub97c \uc804\uc5ed \ucee8\ud14c\uc774\ub108\ucc98\ub7fc \uc0dd\uac01\ud558\ub77c Reason \ud3ec\uc778\ud130\ub97c \uc548\uc804\ud558\uac8c \ub0a8\uaca8\ub450\uace0 \ub204\uc218(leak)\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574\uc120, \uc5b4\ub5a4 \ud3ec\uc778\ud130\ub4e4\uc774 thread \uc5d0 \uc758\ud574\uc11c \uc0ac\uc6a9\ub418\ub294\uc9c0 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \ub9cc\uc57d thread \uac00 detach\ub418\uc5c8\ub2e4\uba74, \uc815\uc801 \uac1d\uccb4 \ub610\ub294 \uc790\uc720 \uc601\uc5ed\uc5d0 \uc788\ub294 \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub9cc \uc548\uc804\ud558\uac8c \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4. Example void f ( int * p ) { // ... * p = 99 ; // ... } int glob = 33 ; void some_fct ( int * p ) { int x = 77 ; std :: thread t0 ( f , & x ); // bad std :: thread t1 ( f , p ); // bad std :: thread t2 ( f , & glob ); // OK auto q = make_unique < int > ( 99 ); std :: thread t3 ( f , q . get ()); // bad // ... t0 . detach (); t1 . detach (); t2 . detach (); t3 . detach (); // ... } \"OK\" \ub77c\uace0 \ud568\uc740 thread \uac00 \uc804\ub2ec\ubc1b\uc740 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud55c, \ud574\ub2f9 \uac1d\uccb4\uac00 \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0 (\"\uc0b4\uc544\") \uc788\uc744 \uac83\uc784\uc744 \uc758\ubbf8\ud55c\ub2e4. \"bad\" \ub77c\uace0 \ud568\uc740 thread \uac00 \uc804\ub2ec\ubc1b\uc740 \ud3ec\uc778\ud130\uac00 \uac00\ub9ac\ud0a4\ub294 \uac1d\uccb4\uac00 \uc18c\uba78\ub41c \uc774\ud6c4\uc5d0 \ud574\ub2f9 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4. thread \ub4e4\uc774 \ubcd1\ud589 \uc2e4\ud589\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uc774 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc874\uc18d \uae30\uac04\uc774\ub098 \uc18c\uc720\uad8c \uad00\ub828 \ubb38\uc81c\uc5d0 \uc788\uc5b4\uc11c \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\ub294\ub2e4; \uc774 thread \ub4e4\uc740 \ub2e8\uc21c\ud788 some_fct \ub85c\ubd80\ud130 \ud638\ucd9c\ub418\ub294 \ud568\uc218 \uac1d\uccb4\ub4e4\ub85c \ubcfc \uc218 \uc788\ub2e4. Note \uc815\uc801 \uc800\uc7a5\uc18c \uc874\uc18d \uae30\uac04\uc744 \uac00\uc9c4 \uac1d\uccb4\ub4e4\ub3c4 detach \ub41c \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc0ac\uc6a9 \uc2dc \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4: \uc2a4\ub808\ub4dc\uac00 \ud504\ub85c\uadf8\ub7a8\uc758 \uc885\ub8cc \uc2dc\uc810\uae4c\uc9c0 \uc218\ud589\ub41c\ub2e4\uba74, \uc815\uc801 \uc800\uc7a5\uc18c \uc874\uc18d \uae30\uac04\uc744 \uac00\uc9c4 \uac1d\uccb4\ub4e4\uc758 \uc18c\uba78 \uc2dc\uc810\uae4c\uc9c0 \ubcd1\ud589 \uc2e4\ud589\ub420 \uc218 \uc788\uc73c\uba70, \uadf8\ub85c \uc778\ud574 \ud574\ub2f9 \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c \uc811\uadfc\uc5d0 \uc788\uc5b4 \uacbd\uc7c1\uc774 \uc720\ubc1c\ub420 \uc218 \uc788\ub2e4. Note \uc774 \uaddc\uce59\uc740 don't detach() and use gsl::joining_thread \ub97c \ub530\ub978\ub2e4\uba74 \ubd88\ud544\uc694\ud558\ub2e4. \uadf8\ub7ec\ub098, \ud574\ub2f9 \uc9c0\uce68\uc744 \ub530\ub974\uae30 \uc704\ud574\uc11c \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\ub294 \uac83\uc774 \uc5b4\ub835\uac70\ub098 \ud639\uc740 \uc11c\ub4dc\ud30c\ud2f0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc544\uc608 \ubd88\uac00\ub2a5\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0\ub294, \uc774 \uaddc\uce59\uc774 \uc874\uc18d\uae30\uac04 \ubc0f \ud0c0\uc785 \uc548\uc804\uc5d0 \ud544\uc218\uc801\uc77c \uc218 \uc788\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c detach() \uac00 \ud2b9\uc815 thread \uc5d0 \ub300\ud574 \uc218\ud589\ub418\ub294\uc9c0\ub294 \ud310\ubcc4\uc774 \uc5b4\ub824\uc6b4 \uacbd\uc6b0\uac00 \ub9ce\uc9c0\ub9cc, \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \uac04\ub2e8\ud55c \uc0ac\ub840\ub294 \uc190\uc27d\uac8c \uac80\ucd9c\ud574 \ub0bc \uc218 \uc788\ub2e4. \ub9cc\uc57d \ud2b9\uc815 thread \uac00 detach() \ud558\uc9c0 \uc54a\uc74c\uc744 \uc785\uc99d\ud560 \uc218 \uc5c6\ub2e4\uba74, \ud574\ub2f9 \uc2a4\ub808\ub4dc\ub294 detach() \ud558\uba70 \ucd5c\ucd08 \uc0dd\uc131\ub41c \uc720\ud6a8 \ubc94\uc704\ub97c \ub118\uc5b4\uc11c\uae4c\uc9c0 \uc720\uc9c0\ub420 \uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud574\uc57c \ud55c\ub2e4; \ud655\uc778\uc774 \ub05d\ub09c \ud6c4\uc5d0\ub294, (\uc804\uc5ed \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c) \ud1b5\uc0c1\uc801\uc778 \uc874\uc18d\uae30\uac04\uacfc \uc18c\uc720\uad8c \uc801\uc6a9 \ubc29\uc2dd\uc744 \ub530\ub978\ub2e4. Enforcement \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc744 detach() \ud560\uc9c0\ub3c4 \ubaa8\ub974\ub294 \uc2a4\ub808\ub4dc\uc5d0 \uc804\ub2ec\ud558\ub294 \uc2dc\ub3c4\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c. CP.25: std::thread \ubcf4\ub2e4\ub294 gsl::joining_thread \uc0ac\uc6a9\uc744 \uc6b0\uc120\ud558\uc5ec \uace0\ub824\ud558\ub77c Reason joining_thread \ub294 \uc720\ud6a8 \ubc94\uc704\uac00 \ub05d\ub0a0 \ub54c join \ud55c\ub2e4. Detach\ud55c \uc2a4\ub808\ub4dc\ub4e4\uc740 \uad00\ucc30(monitor)\ud558\uae30\uac00 \uc5b4\ub835\ub2e4. (\uc7a0\uc7ac\uc801\uc73c\ub85c detach\ud560 \uc2a4\ub808\ub4dc\ub97c \ud3ec\ud568\ud574\uc11c) \uc774 \uc2a4\ub808\ub4dc\ub4e4\uc5d0\uc11c \uc624\ub958\uac00 \uc5c6\ub2e4\uace0 \ud655\uc2e0\ud558\uae30 \uc5b4\ub835\ub2e4. Example, bad void f () { std :: cout << \"Hello \" ; } struct F { void operator ()() { std :: cout << \"parallel world \" ; } }; int main () { std :: thread t1 { f }; // f() executes in separate thread std :: thread t2 { F ()}; // F()() executes in separate thread } // spot the bugs Example void f () { std :: cout << \"Hello \" ; } struct F { void operator ()() { std :: cout << \"parallel world \" ; } }; int main () { std :: thread t1 { f }; // f() executes in separate thread std :: thread t2 { F ()}; // F()() executes in separate thread t1 . join (); t2 . join (); } // one bad bug left Example, bad join() \ud639\uc740 detach() \ud560\uc9c0\ub97c \uacb0\uc815\ud558\ub294 \ucf54\ub4dc\ub294 \ub9e4\uc6b0 \ubcf5\uc7a1\ud560 \uc218 \uc788\uc73c\uba70 \uc2ec\uc9c0\uc5b4\ub294 \ud574\ub2f9 \uc2a4\ub808\ub4dc\uac00 \ud638\ucd9c\ud558\ub294 \ud568\uc218 \ub0b4\uc5d0\uc11c \uacb0\uc815\ub418\uac70\ub098 \ud574\ub2f9 \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ud55c \ud568\uc218\uac00 \ud638\ucd9c\ud558\ub294 \ub2e4\ub978 \ud568\uc218\uc5d0 \uc758\ud574\uc11c \uacb0\uc815\ub420 \uc218\ub3c4 \uc788\ub2e4: void tricky ( thread * t , int n ) { // ... if ( is_odd ( n )) t -> detach (); // ... } void use ( int n ) { thread t { tricky , this , n }; // ... // ... should I join here? ... } \uc774\ub294 \uc874\uc18d\uae30\uac04 \ubd84\uc11d\uc744 \uc2ec\uac01\ud560 \uc815\ub3c4\ub85c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uba70, \uc2e4\uc81c \uc77c\uc5b4\ub0a0 \uc218\ub3c4 \uc788\ub294 \uc5b4\ub5a4 \uacbd\uc6b0\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \ubd84\uc11d \uc790\uccb4\ub97c \ubd88\uac00\ub2a5\ud558\uac8c\ub3c4 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc774\ub294 \uc6b0\ub9ac\uac00 \uc2a4\ub808\ub4dc \ub0b4\ubd80\uc5d0\uc11c use() \ud568\uc218 \ub0b4\uc758 \uc9c0\uc5ed \uac1d\uccb4\ub4e4\uc744 \ucc38\uc870\ud558\uac70\ub098 use() \ud568\uc218\uc5d0\uc11c \ud574\ub2f9 \uc2a4\ub808\ub4dc \ub0b4\uc758 \uc9c0\uc5ed \uac1d\uccb4\ub97c \ucc38\uc870\ud558\ub294 \uac83\uc774 \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. Note \"\uc885\ub8cc\ub418\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \uc2a4\ub808\ub4dc\" \ub4e4\uc740 detach() \ud558\uae30\ubcf4\ub2e4\ub294, \uc804\uc5ed\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \ud3ec\ud568\ub418\ub294 \uc720\ud6a8 \ubc94\uc704 \ub0b4\uc5d0\ub098 \ud639\uc740 \uc790\uc720 \uc601\uc5ed\uc5d0 \uc704\uce58\uc2dc\ud0a4\ub3c4\ub85d \ud558\ub77c. don't detach . Note std::thread \ub97c \uc0ac\uc6a9\ud558\ub294 \uc624\ub798\ub41c \ucf54\ub4dc\ub098 \uc11c\ub4dc\ud30c\ud2f0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\ub85c \uc778\ud574 \uc774 \uaddc\uce59\uc740 \ub3c4\uc785\ud558\uae30\uac00 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4. Enforcement std::thread \uc774 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c: gsl::joining_thread \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud55c\ub2e4. \ub9cc\uc57d detach \ud558\ub294 \uacbd\uc6b0\ub77c\uba74, \ud3ec\ud568\ub418\ub294 \uc720\ud6a8 \ubc94\uc704\uc5d0 \"exporting ownership\" \ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4. join \uc744 \ud558\ub294\uc9c0 detach \ub97c \ud558\ub294\uc9c0 \uba85\ud655\ud558\uc9c0 \uc54a\ub2e4\uba74 \uc2ec\uac01\ud558\uac8c \uacbd\uace0\ud558\ub77c. CP.26: \uc2a4\ub808\ub4dc\ub97c detach() \ud558\uc9c0 \ub9d0\uc544\ub77c Reason \ubcf4\ud1b5, \uc0dd\uc131\ub41c \uc720\ud6a8\ubc94\uc704\ub97c \ub118\uc5b4\uc11c\uc11c \uc2e4\ud589\uc774 \uc720\uc9c0\ub418\uc5b4\uc57c \ud558\ub294 \ud544\uc694\uc131\uc740 thread \uc758 \ub0b4\uc7ac\ub41c \uc791\uc5c5 \ud2b9\uc131\uc774\ub098, \ud574\ub2f9 \ud2b9\uc131\uc744 detach \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uad6c\ud604\ud558\ub294 \uac83\uc740 \ucd94\uc801 \uad00\ucc30 (monitor) \ubc0f \ud574\ub2f9 \uc2a4\ub808\ub4dc\uc640\uc758 \ud1b5\uc2e0\uc744 \uc5b4\ub835\uac8c \ub9cc\ub4e0\ub2e4. \ud2b9\ud788, (\ubb3c\ub860 \ubd88\uac00\ub2a5\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc) \uc2a4\ub808\ub4dc\uac00 \uc608\uc0c1\ub41c \uc2dc\uc810\uae4c\uc9c0 \uc2e4\ud589\uc774 \uc644\ub8cc\ub418\uae30\ub97c \ubcf4\uc7a5\ud558\uac70\ub098 \uc608\uc0c1\ub41c \uc2dc\uc810\uae4c\uc9c0 \uc2e4\ud589\uc774 \uc720\uc9c0\ub418\uae30\ub97c \ubcf4\uc7a5\ud558\ub294 \uac83\uc740 \ub354\uc6b1 \uc5b4\ub835\ub2e4. Example void heartbeat (); void use () { std :: thread t ( heartbeat ); // don't join; heartbeat is meant to run forever t . detach (); // ... } \uc774\ub294 detach() \uac00 \ud754\ud788 \uc0ac\uc6a9\ub418\ub294, \uc2a4\ub808\ub4dc\uc758 \ud569\ub9ac\uc801\uc778 \uc0ac\uc6a9 \uc608\uc774\ub2e4. \uadf8\ub7ec\ub098, \uc5ec\uc804\ud788 \ubb38\uc81c\uac00 \uc788\ub2e4. \uc6b0\ub9ac\uac00 detach \ub41c \uc2a4\ub808\ub4dc\uac00 \uc5ec\uc804\ud788 \uc2e4\ud589\ub418\uace0 \uc788\ub294\uc9c0 \uc5b4\ub5bb\uac8c \ucd94\uc801 \uad00\ucc30\ud560 \uc218 \uc788\ub294\uac00? \ub54c\ub54c\ub85c heartbeat \uc0c1\uc5d0 \uc5b4\ub5a4 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc73c\uba70, heartbeat \ub97c \uc783\ub294 \uac83\uc740 \uadf8\uac83\uc744 \ud544\uc694\ud558\ub294 \uc2dc\uc2a4\ud15c \uc0c1\uc5d0\uc11c\ub294 \uc2ec\uac01\ud55c \ubb38\uc81c\uc77c \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c, \uc6b0\ub9ac\ub294 \ud574\ub2f9 \uc2a4\ub808\ub4dc\uc640 \ud1b5\uc2e0\uc744 \ud560 \ud544\uc694\uac00 \uc788\ub2e4 (e.g., \uba54\uc2dc\uc9c0 \uc2a4\ud2b8\ub9bc\uc774\ub098 condition_variable \uc744 \uc774\uc6a9\ud55c \uc54c\ub9bc \uc774\ubca4\ud2b8\ub97c \ud1b5\ud574\uc11c). \ub9ce\uc740 \uacbd\uc6b0\uc5d0 \ub354 \uc6b0\uc6d4\ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\ub294 \ub300\uc548\uc73c\ub85c\ub294 \ud574\ub2f9 \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ub418\ub294 (\ud639\uc740 \ud65c\uc131\ud654\ub418\ub294) \uc720\ud6a8 \ubc94\uc704 \ubc16\uc5d0 \ubc30\uce58\ud568\uc73c\ub85c\uc368 \uc874\uc18d \uae30\uac04\uc744 \uc81c\uc5b4\ud558\ub294 \uac83\uc774\ub2e4. \uc608\uc81c: void heartbeat (); gsl :: joining_thread t ( heartbeat ); // heartbeat is meant to run \"forever\" \uc774 heartbeat (\uc5d0\ub7ec\ub098 \ud558\ub4dc\uc6e8\uc5b4 \ubb38\uc81c \ub4f1\uc744 \ubc29\uc9c0\ud558\ub294) \ub294 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \uc720\uc9c0\ub420 \uac83\uc774\ub2e4. \ub54c\ub85c\ub294, \uc0dd\uc131 \uc2dc\uc810\uacfc \uc18c\uc720\uad8c \uc2dc\uc810\uc744 \ubd84\ub9ac\ud560 \ud544\uc694\uac00 \uc788\ub2e4: void heartbeat (); unique_ptr < gsl :: joining_thread > tick_tock { nullptr }; void use () { // heartbeat is meant to run as long as tick_tock lives tick_tock = make_unique < gsl :: joining_thread > ( heartbeat ); // ... } Enforcement detach() \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud558\ub77c. CP.31: \uc2a4\ub808\ub4dc\ub4e4 \uac04\uc758 \uc791\uc740 \ub370\uc774\ud130 \uc804\ub2ec\uc740 \ucc38\uc870\ub098 \ud3ec\uc778\ud130\ubcf4\ub2e4\ub294 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\ub77c Reason \uc18c\ub7c9\uc758 \ub370\uc774\ud130 \ubcf5\uc0ac\ub294 \uc7a0\uae08\uc7a5\uce58\ub97c \uc774\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \ubcf5\uc0ac \ubc0f \uc811\uadfc \ube44\uc6a9\uc774 \uc800\ub834\ud558\ub2e4. \ubcf5\uc0ac\ub294 \uc790\uc5f0\ud788\ub3c4 \uc720\uc77c\ud55c \uc18c\uc720\uad8c\uc744 \uc81c\uacf5\ud558\uba70(\ucf54\ub4dc\ub97c \ub2e8\uc21c\ud654\ud560 \uc218 \uc788\ub2e4) \ub370\uc774\ud130 \uacbd\uc7c1\uc758 \uac00\ub2a5\uc131\uc744 \uc81c\uac70\ud55c\ub2e4. Note \"\uc18c\ub7c9\" \uc774 \uc815\ud655\ud558\uac8c \uc5b4\ub290 \uc815\ub3c4\uc778\uc9c0\ub97c \uc815\uc758\ud558\uae30\ub294 \ubd88\uac00\ub2a5\ud558\ub2e4. Example string modify1 ( string ); void modify2 ( string & ); void fct ( string & s ) { auto res = async ( modify1 , s ); async ( modify2 , s ); } modify1 \ud638\ucd9c\uc740 \ub450 \ubc88\uc758 string \uac12 \ubcf5\uc0ac\ub97c \ud544\uc694\ub85c \ud558\uc9c0\ub9cc, modify2 \ud638\ucd9c\uc740 \uac12 \ubcf5\uc0ac\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\ub294\ub2e4. \ubc18\uba74\uc5d0 modify1 \uc758 \uad6c\ud604\uc740 \uc6b0\ub9ac\uac00 \ub2e8\uc77c \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc791\uc131\ud588\uc744 \ubc95\ud55c \ucf54\ub4dc\uc640 \uc815\ud655\ud788 \ub3d9\uc77c\ud558\ub098, modify2 \uc758 \uad6c\ud604\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \uc77c\uc815 \ud615\ud0dc\uc758 \uc7a0\uae08 \uae30\ubc95\uc744 \uc774\uc6a9\ud574\uc57c \ud55c\ub2e4. \ubb38\uc790\uc5f4\uc774 \uc9e7\ub2e4\uba74 (10 \uae00\uc790 \uc815\ub3c4), modify1 \ud638\ucd9c\uc740 \ub180\ub77c\uc6b8 \uc815\ub3c4\ub85c \ube60\ub97c\uac83\uc774\ub2e4; \uadfc\ubcf8\uc801\uc73c\ub85c \ubaa8\ub4e0 \ud544\uc694\ud55c \ube44\uc6a9\uc740 thread \uc804\ud658\uc5d0 \ub4e4\uc5b4\uac08 \ubfd0\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d \ubb38\uc790\uc5f4\uc774 \uae38\ub2e4\uba74 (1,000,000 \uae00\uc790 \uc815\ub3c4), \uc774\ub97c \ub450 \ubc88\uc774\ub098 \ubcf5\uc0ac\ud558\ub294 \uac83\uc740 \uc88b\uc740 \uc120\ud0dd\uc774 \uc544\ub2d0 \uac83\uc774\ub2e4. \uc774 \ub17c\uc758\ub294 async \ub4f1\uc758 \uc0ac\uc6a9\uacfc\ub294 \uc544\ubb34 \uc5f0\uad00\uc774 \uc5c6\uc74c\uc744 \uc720\uc758\ud558\ub77c. \uc774\ub294 \uba54\uc2dc\uc9c0 \uc804\ub2ec \ubc29\uc2dd \ud639\uc740 \uacf5\uc720 \uba54\ubaa8\ub9ac \ubc29\uc2dd\uc744 \uc0ac\uc6a9\uc744 \uace0\ub824\ud560 \ub54c\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ub41c\ub2e4. Enforcement ??? CP.32: \uad00\ub828 \uc5c6\ub294 thread \uac04\uc758 \uc18c\uc720\uad8c \uacf5\uc720\ub294 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ub9cc\uc57d \uc2a4\ub808\ub4dc\ub4e4\uc774 \uc11c\ub85c \ubb34\uad00\ud558\ub2e4\uba74 (\ub2ec\ub9ac \ub9d0\ud574, \uac19\uc740 \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0 \uc5c6\uac70\ub098 \ud55c \uc2a4\ub808\ub4dc\uac00 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc758 \uc0dd\uc560\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0), \uadf8\ub9ac\uace0 \uc18c\uba78\ub418\uc5b4\uc57c \ud558\ub294 \uc790\uc720 \uc601\uc5ed \uba54\ubaa8\ub9ac\ub97c \uacf5\uc720\ud560 \ud544\uc694\uac00 \uc788\ub2e4\uba74, shared_ptr \ub610\ub294 \ub3d9\ub4f1\ud55c \uac83\uc774 \uc18c\uba78\uc744 \ubcf4\uc7a5\ud560 \uc218 \uc788\ub2e4. Example ??? Note \uc815\uc801(\uc608\ucee8\ub300 \uc804\uc5ed) \uac1d\uccb4\ub294 \ud55c \uc2a4\ub808\ub4dc\uac00 \uac1d\uccb4\uc758 \uc18c\uba78\uc5d0 \ucc45\uc784\uc774 \uc788\ub2e4\ub294 \uc810\uc5d0\uc11c \uacf5\uc720\ud560 \uc218 \uc788\ub2e4 \uc18c\uba78\ub418\uc9c0 \uc54a\ub294 \uc790\uc720 \uc601\uc5ed\uc758 \uac1d\uccb4\ub294 \uacf5\uc720\ud560 \uc218 \uc788\ub2e4. \ud55c \uc2a4\ub808\ub4dc\uac00 \uac1d\uccb4\ub97c \uc18c\uc720\ud558\uace0, \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uc18c\uc720\uc790 \uc2a4\ub808\ub4dc\ubcf4\ub2e4 \uc624\ub798 \uc0b4\uc544\ub0a8\uc9c0 \uc54a\uc73c\uba74 \uac1d\uccb4\ub97c \uc548\uc804\ud558\uac8c \uacf5\uc720\ud560 \uc218 \uc788\ub2e4. Enforcement ??? CP.40: \ubb38\ub9e5 \uad50\ud658\uc744 \ucd5c\uc18c\ud654\ud558\ub77c Reason \ubb38\ub9e5 \uad50\ud658(Context switches)\uc740 \ub9e4\uc6b0 \ub192\uc740 \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. Example ??? Enforcement ??? CP.41: \uc2a4\ub808\ub4dc \uc0dd\uc131\uacfc \uc18c\uba78\uc744 \ucd5c\uc18c\ud654\ud558\ub77c Reason \uc2a4\ub808\ub4dc \uc0dd\uc131\uc740 \ub9e4\uc6b0 \ub192\uc740 \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. Example void worker ( Message m ) { // process } void master ( istream & is ) { for ( Message m ; is >> m ; ) run_list . push_back ( new thread ( worker , m )); } \uc774 \ucf54\ub4dc\ub294 \uba54\uc138\uc9c0\ub9c8\ub2e4 thread \ub97c \uc0dd\uc131\ud55c\ub2e4. \uadf8\ub9ac\uace0 run_list \ub294 \uc544\ub9c8\ub3c4 \uc791\uc5c5\ub4e4\uc774 \ub05d\ub098\uba74 \uc2a4\ub808\ub4dc\ub97c \ud30c\uad34\ud560 \uac83\uc774\ub2e4. \ub300\uc2e0, \ubbf8\ub9ac \ub9cc\ub4e4\uc5b4\ub454 \uc791\uc5c5\uc790(worker) \uc2a4\ub808\ub4dc\ub4e4\uc774 \uba54\uc138\uc9c0\ub97c \ucc98\ub9ac\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4. Sync_queue < Message > work ; void master ( istream & is ) { for ( Message m ; is >> m ; ) work . put ( m ); } void worker () { for ( Message m ; m = work . get (); ) { // process } } void workers () // set up worker threads (specifically 4 worker threads) { joining_thread w1 { worker }; joining_thread w2 { worker }; joining_thread w3 { worker }; joining_thread w4 { worker }; } Note \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc798 \ub9cc\ub4e0 \uc2a4\ub808\ub4dc \ud480\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \uadf8\uac83\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc798 \ub9cc\ub4e0 \uba54\uc138\uc9c0 \ud050\ub97c \uc9c0\uc6d0\ud558\uba74, \uadf8\uac83\uc744 \uc0ac\uc6a9\ud558\ub77c. Enforcement ??? CP.42: \uc870\uac74 \uc5c6\uc774 wait \ud558\uc9c0 \ub9d0\uc544\ub77c Reason \uc870\uac74\uc744 \uc8fc\uc9c0 \uc54a\uace0 wait \ud558\ub294 \uac83\uc740 \uc791\uc5c5\uc744 \uc704\ud574 \uae68\uc5b4\ub098\ub294 \uac83(wakeup) \ub610\ub294 \ub2e8\uc21c\ud788 \uc791\uc5c5\uc774 \uc5c6\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud558\uae30 \uc704\ud574 \uae68\uc5b4\ub098\ub294 \uac83\uc744 \ub193\uce58\uac8c \ud55c\ub2e4. Example, bad std :: condition_variable cv ; std :: mutex mx ; void thread1 () { while ( true ) { // do some work ... std :: unique_lock < std :: mutex > lock ( mx ); cv . notify_one (); // wake other thread } } void thread2 () { while ( true ) { std :: unique_lock < std :: mutex > lock ( mx ); cv . wait ( lock ); // might block forever // do work ... } } \uc5ec\uae30\uc11c, \ucf54\ub4dc\uc5d0 \ud45c\ud604\ub418\uc9c0 \uc54a\uc740 \ub2e4\ub978 thread \uac00 \ub2e4\ub978 thread1 \uc758 \uc54c\ub9bc(notification)\uc744 \uc18c\ube44\ud558\uba74, thread2 \ub294 \uc601\uc6d0\ud788 \ub300\uae30\ud560 \uc218\ub3c4 \uc788\ub2e4. Example template < typename T > class Sync_queue { public : void put ( const T & val ); void put ( T && val ); void get ( T & val ); private : mutex mtx ; condition_variable cond ; // this controls access list < T > q ; }; template < typename T > void Sync_queue < T >:: put ( const T & val ) { lock_guard < mutex > lck ( mtx ); q . push_back ( val ); cond . notify_one (); } template < typename T > void Sync_queue < T >:: get ( T & val ) { unique_lock < mutex > lck ( mtx ); cond . wait ( lck , [ this ]{ return ! q . empty (); }); // prevent spurious wakeup val = q . front (); q . pop_front (); } \uc774\uc81c \ub9cc\uc57d \ud050\uac00 \ube44\uc5b4\uc788\ub294 \uc0c1\ud0dc\uc5d0\uc11c get() \uc744 \uc2e4\ud589\ud558\ub294 \uc2a4\ub808\ub4dc\uac00 \uae68\uc5b4\ub098\uac8c \ub41c\ub2e4\uba74(\uc608\ub97c \ub4e4\uba74 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uba3c\uc800 get() \uc744 \uc2e4\ud589\ud574\uc11c \uac00\uc838\uac14\ub2e4\uac70\ub098), \ud574\ub2f9 \uc2a4\ub808\ub4dc\ub294 \uadf8\ub300\ub85c \ub2e4\uc2dc sleep \uc0c1\ud0dc\uac00 \ub420 \uac83\uc774\ub2e4. Enforcement \uc870\uac74\uc774 \uc5c6\ub294 \ubaa8\ub4e0 waits \ub97c \uc9c0\uc801\ud558\ub77c. CP.43: \uc784\uacc4 \uc601\uc5ed(Critical Section)\uc5d0\uc11c\uc758 \uc2dc\uac04\uc744 \ucd5c\uc18c\ud654\ud558\ub77c Reason mutex \ub97c \uac00\uc9c4 \uc2dc\uac04\uc774 \uc9e7\uc744 \uc218\ub85d, \ub2e4\ub978 thread \uac00 \ub300\uae30\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc904\uc5b4\ub4e4 \uac83\uc774\ub2e4. \uadf8\ub9ac\uace0 thread \uc758 \uc911\uc9c0(suspection)\uc640 \uc7ac\uc2e4\ud589(resumption)\uc740 \ub9ce\uc740 \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. Example void do_something () // bad { unique_lock < mutex > lck ( my_lock ); do0 (); // preparation: does not need lock do1 (); // transaction: needs locking do2 (); // cleanup: does not need locking } \uc774 \ucf54\ub4dc\uc5d0\uc120 \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \uc624\ub7ab\ub3d9\uc548 \uc7a0\uae08\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub2e4: \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\uba74 \uc7a0\uae08\uc744 \uac00\uc838\uc11c\ub294 \uc548\ub418\uba70, \uc815\ub9ac\ub97c \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc7a0\uae08\uc744 \ud574\uc81c\ud574\uc57c \ud55c\ub2e4. \uc774\ub807\uac8c \ub2e4\uc2dc \uc791\uc131\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. void do_something () // bad { do0 (); // preparation: does not need lock my_lock . lock (); do1 (); // transaction: needs locking my_lock . unlock (); do2 (); // cleanup: does not need locking } \ud558\uc9c0\ub9cc \uc774\ub7ec\ud55c \ucf54\ub4dc\ub294 \uc548\uc804\uc131\uc5d0 \ub300\ud574\uc11c \ud0c0\ud611\ud560 \ubfd0\uc774\uace0, RAII\ub97c \uc0ac\uc6a9\ud558\ub77c \uaddc\uce59\uc744 \uc704\ubc18\ud55c\ub2e4. \ub300\uc2e0, \uc784\uacc4\uc601\uc5ed\uc5d0 \uc720\ud6a8\ubc94\uc704 \ube14\ub85d\uc744 \ucd94\uac00\ud558\ub77c: void do_something () // OK { do0 (); // preparation: does not need lock { unique_lock < mutex > lck ( my_lock ); do1 (); // transaction: needs locking } do2 (); // cleanup: does not need locking } Enforcement \uc77c\ubc18\uc801\uc73c\ub85c \ubd88\uac00\ub2a5\ud558\ub2e4. RAII\ub97c \uc801\uc6a9\ud558\uc9c0 \uc54a\uc740 lock() \uacfc unlock() \uc744 \uc9c0\uc801\ud558\ub77c. CP.44: lock_guard \uacfc unique_lock \uc5d0\ub294 \uc774\ub984\uc744 \ubd99\uc5ec\ub77c Reason \uc774\ub984\uc774 \uc5c6\ub294 \uc9c0\uc5ed \uac1c\uccb4\ub4e4\uc740 \uc77c\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\ub418\uace0 \uc989\uc2dc \uc18c\uba78\ub41c\ub2e4 Example unique_lock < mutex > ( m1 ); lock_guard < mutex > { m2 }; lock ( m1 , m2 ); \uc774 \ucf54\ub4dc\ub294 \ubcc4\ub85c \ubb38\uc81c \uc5c6\uc5b4 \ubcf4\uc774\uc9c0\ub9cc, \uadf8\ub807\uc9c0 \uc54a\ub2e4. Enforcement \uc774\ub984\uc744 \ubd80\uc5ec\ud558\uc9c0 \uc54a\uc740 lock_guard \uc640 unique_lock \uc744 \uc9c0\uc801\ud558\ub77c CP.50: mutex \ub97c \ubcf4\ud638(guard) \ud574\uc57c \ud558\ub294 \ub370\uc774\ud130\uc640 \ud568\uaed8 \uc120\uc5b8\ud558\ub77c. \uac00\ub2a5\ud55c \uacbd\uc6b0\uc5d0\ub294 synchronized_value<T> \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc788\uc5b4 \ub370\uc774\ud130\uac00 \ubcf4\ud638\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uacfc \uc5b4\ub5bb\uac8c \ubcf4\ud638\ub420\uc9c0\ub97c \ubd84\uba85\ud788 \uc804\ub2ec\ud55c\ub2e4. \uc774\ub294 \ubba4\ud14d\uc2a4\ub97c \uc7a0\uadf8\uc9c0 \uc54a\uac70\ub098 \uc5c9\ub6b1\ud55c \ubba4\ud14d\uc2a4\ub97c \uc7a0\uae00 \ud655\ub960\uc744 \ub0ae\ucd98\ub2e4. synchronized_value<T> \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud574\ub2f9 \ub370\uc774\ud130\uac00 \ubba4\ud14d\uc2a4\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, \ub370\uc774\ud130 \uc811\uadfc \uc2dc \ud574\ub2f9\ub418\ub294 \uc62c\ubc14\ub978 \ubba4\ud14d\uc2a4\uac00 \uc7a0\uae38 \uac83\uc784\uc744 \ubcf4\uc7a5\ud55c\ub2e4. synchronized_value \ub97c \uc774\ud6c4\uc758 TS \ub098 C++ \ud45c\uc900\uc5d0 \ucd94\uac00\ud558\uae30 \uc704\ud55c WG21 proposal ) \uc744 \ucc38\uace0\ud558\ub77c. Example struct Record { std :: mutex m ; // take this mutex before accessing other members // ... }; class MyClass { struct DataRecord { // ... }; synchronized_value < DataRecord > data ; // Protect the data with a mutex }; Enforcement ??? \uac00\ub2a5\ud55c\uac00? CP.par: \ubcd1\ub82c\uc131(Parallelism) \uc5ec\uae30\uc11c \ubcd1\ub82c\uc131(parallelism)\uc740 \ub9ce\uc740 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \ub3d9\uc2dc\uc5d0 \ud55c \uc791\uc5c5\uc744 \ubcd1\ub82c\uc801\uc73c\ub85c \uc218\ud589\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \ubcd1\ub82c\uc131 \uaddc\uce59 \uc694\uc57d: ??? ??? \uc801\ud569\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\uba74, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubcd1\ub82c \uc54c\uace0\ub9ac\uc998\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c. \ubcd1\ub82c\uc131\uc744 \uc704\ud574 \uc124\uacc4\ub41c \uc54c\uace0\ub9ac\uc998\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c. \ubd88\ud544\uc694\ud55c \uc758\uc874\uc131\uc744 \uc9c0\ub2cc \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c. CP.mess: \uba54\uc138\uc9c0 \uc804\ub2ec(Message passing) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\ub4e4\uc740 \uc800\uc218\uc900\uc5d0 \uc18d\ud55c\ub2e4. \uc989, thread , mutex , atomic \uc744 \uc0ac\uc6a9\ud55c \ud558\ub4dc\uc6e8\uc5b4\uc640 \uac00\uae4c\uc6b4 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \ucd08\uc810\uc744 \ub450\uace0 \uc788\ub2e4. \ub300\ubd80\ubd84\uc758 \uc0ac\ub78c\ub4e4\uc740 \uc774 \ub808\ubca8\uc5d0\uc11c \uc791\uc5c5\ud574\uc120 \uc548\ub41c\ub2e4: \uc5d0\ub7ec\ub97c \ub9cc\ub4e4\uae30 \uc27d\uace0, \uac1c\ubc1c\uc774 \ub290\ub9ac\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74 \uba54\uc138\uc9d5 \ub77c\uc774\ube0c\ub7ec\ub9ac, \ubcd1\ub82c \uc54c\uace0\ub9ac\uc998, \uadf8\ub9ac\uace0 \ubca1\ud130\ud654\uac19\uc740 \uc0c1\uc704 \ub808\ubca8\uc758 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc774 \uc601\uc5ed\uc5d0\uc120 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uba85\uc2dc\uc801\uc73c\ub85c \ub3d9\uae30\ud654 \ud560 \ud544\uc694\uac00 \uc5c6\ub294 \uba54\uc138\uc9c0 \uc804\ub2ec\uc5d0 \ub300\ud574 \uc0b4\ud3b4\ubcf8\ub2e4. \uba54\uc138\uc9c0 \uc804\ub2ec \uaddc\uce59 \uc694\uc57d: CP.60: \ub3d9\uc2dc\uc801\uc778 \uc791\uc5c5\uc73c\ub85c\ubd80\ud130 \ubc18\ud658\uac12\uc744 \ubc1b\ub294\ub370 future \ub97c \uc0ac\uc6a9\ud558\ub77c CP.61: \ub3d9\uc2dc\uc801\uc778 \uc791\uc5c5\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc120 async() \ub97c \uc0ac\uc6a9\ud558\ub77c \uba54\uc138\uc9c0 \ud050 \uba54\uc138\uc9d5 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4 ???? should there be a \"use X rather than std::async \" where X is something that would use a better specified thread pool? ??? Is std::async worth using in light of future (and even existing, as libraries) parallelism facilities? What should the guidelines recommend if someone wants to parallelize, e.g., std::accumulate (with the additional precondition of commutativity), or merge sort? CP.60: \ub3d9\uc2dc\uc801\uc778 \uc791\uc5c5\uc73c\ub85c\ubd80\ud130 \ubc18\ud658\uac12\uc744 \ubc1b\ub294\ub370 future \ub97c \uc0ac\uc6a9\ud558\ub77c Reason future \ub294 \ube44\ub3d9\uae30 \uc791\uc5c5\uc5d0 \ub300\ud55c \uc77c\ubc18\uc801\uc778 \ud568\uc218 \ud638\ucd9c-\ubc18\ud658 \ubb38\ub9e5\uc744 \ub0a8\uaca8\ub450\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4. \uba85\uc2dc\uc801\uc778 \uc7a0\uae08\uc774 \uc5c6\uace0 \uc815\ud655\ud55c \ubc18\ud658\uac12\uacfc \uc5d0\ub7ec(\uc608\uc678) \ubc18\ud658 \ubaa8\ub450 \uac04\ub2e8\ud788 \ucc98\ub9ac\ub41c\ub2e4. Example ??? Note ??? Enforcement ??? CP.61: \ub3d9\uc2dc\uc801\uc778 \uc791\uc5c5\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc120 async() \ub97c \uc0ac\uc6a9\ud558\ub77c Reason (\uc6d0\ubb38 \uc624\uae30\ub85c \uc778\ud55c \ub0b4\uc6a9 \uc5c6\uc74c) Example ??? Note \ubd88\ud589\ud558\uac8c\ub3c4 async() \ub294 \uc644\ubcbd\ud558\uc9c0 \uc54a\ub2e4. \uc608\ub97c \ub4e4\uba74, \uc2a4\ub808\ub4dc\uc758 \uc0dd\uc131\uc744 \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \uc2a4\ub808\ub4dc \ud480\uc774 \uc0ac\uc6a9\ub41c\ub2e4\ub294 \ubcf4\uc7a5\uc744 \ud558\uc9c0 \uc54a\ub294\ub2e4. \uc2e4\uc81c\ub85c, \ub300\ubd80\ubd84\uc758 \ub3d9\uc2dc\uc801\uc778 async() \ub4e4\uc740 \uc2a4\ub808\ub4dc \ud480\uc744 \uad6c\ud604\ud558\uace0 \uc788\uc9c0 \uc54a\ub2e4. \uadf8\ub807\uc9c0\ub9cc, async() \ub294 \ub2e8\uc21c\ud558\uace0 \ub17c\ub9ac\uc801\uc73c\ub85c \uc815\ud655\ud558\ub2e4. \ub354 \ub098\uc740 \ubb34\uc5b8\uac00\uac00 \ub098\uc624\uac70\ub098 \ub9ce\uc740 \ube44\ub3d9\uae30\uc801\uc778 \uc791\uc5c5\ub4e4\uc744 \ucd5c\uc801\ud654 \ud574\uc57c\ub9cc \ud558\uc9c0 \uc54a\ub2e4\uba74, async() \ub97c \uacc4\uc18d \uc368\ub3c4 \ubb34\ubc29\ud558\ub2e4. Enforcement ??? CP.vec: \ubca1\ud130\ud654(Vectorization) \ubca1\ud130\ud654\ub780 \uba85\uc2dc\uc801\uc778 \ub3d9\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uba87\uac1c\uc758 \uc791\uc5c5\ub4e4\uc744 \ub3d9\uc2dc\uc801\uc73c\ub85c \uc218\ud589\ud558\ub294 \uae30\uc220\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc5f0\uc0b0\uc740 \ub2e8\uc21c\ud558\uac8c \uc790\ub8cc\uad6c\uc870(\ubca1\ud130, \ubc30\uc5f4 \ub4f1\ub4f1)\uc758 \uc6d0\uc18c\ub4e4\uc5d0 \ubcd1\ub82c\uc801\uc73c\ub85c \uc791\uc6a9\ub41c\ub2e4. \ubca1\ud130\ud654\ub294 \ube44 \uc9c0\uc5ed\uc801 \ubcc0\ud654\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc810\uc5d0\uc11c \ud765\ubbf8\ub85c\uc6b4 \uc18d\uc131\uc744 \uc9c0\ub2cc\ub2e4. \ud558\uc9c0\ub9cc, \ubca1\ud130\ud654\ub294 \ub2e8\uc21c\ud55c \uc790\ub8cc\uad6c\uc870\ub4e4\uacfc \ubcd1\ub82c\uc801 \uc5f0\uc0b0\uc744 \uac00\ub2a5\ud558\uac8c \ud558\ub294 \ud2b9\ubcc4\ud55c \uc54c\uace0\ub9ac\uc998\uc774 \ud568\uaed8 \uc368\uc57c \ucd5c\uc801\uc758 \uc131\ub2a5\uc744 \ubcf4\uc778\ub2e4. \ubca1\ud130\ud654 \uaddc\uce59 \uc694\uc57d: ??? ??? CP.free: \ubb34\uc7a0\uae08(Lock-free) \ud504\ub85c\uadf8\ub798\ubc0d mutex \uc640 condition_variable \ub97c \uc0ac\uc6a9\ud55c \ub3d9\uae30\ud654\ub294 \uc0c1\ub300\uc801\uc73c\ub85c \ub192\uc740 \ube44\uc6a9\uc744 \uc9c0\ubd88\ud574\uc57c \ud560 \uc218 \uc788\ub2e4. \ub098\uc544\uac00\uc11c, \ub370\ub4dc\ub77d(deadlock)\uc73c\ub85c \uc774\uc5b4\uc9c8 \uac00\ub2a5\uc131 \ub610\ud55c \uc874\uc7ac\ud55c\ub2e4. \ub54c\ub54c\ub85c, \uc131\ub2a5\uacfc \ub370\ub4dc\ub77d\uc758 \uac00\ub2a5\uc131\uc744 \uc5c6\uc560\uae30 \uc704\ud574\uc120, \uae4c\ub2e4\ub85c\uc6b4 \uc800-\uc218\uc900\uc758 \"\ubb34\uc7a0\uae08\" \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc774 \uae30\ub2a5\ub4e4\uc740 \uc77c\uc2dc\uc801\uc73c\ub85c \ubc30\ud0c0\uc801\uc778(\uc6d0\uc790\uc801\uc778) \uba54\ubaa8\ub9ac \uc811\uadfc\uc744 \uc0ac\uc6a9\ud55c\ub2e4. Lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc740 thread , mutex \uc640 \uac19\uc740 \uc0c1\uc704\ub808\ubca8\uc758 \ub3d9\uc2dc\uc131 \uba54\ucee4\ub2c8\uc998\uc744 \uad6c\ud604\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\uae30\ub3c4 \ud55c\ub2e4. Lock-free \ud504\ub85c\uadf8\ub798\ubc0d \uaddc\uce59 \uc694\uc57d: CP.100: \uc815\ub9d0 \ud544\uc694\ud560 \ub54c\ub9cc lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c CP.101: \ud558\ub4dc\uc6e8\uc5b4/\ucef4\ud30c\uc77c\ub7ec \uc870\ud569\uc744 \ubd88\uc2e0\ud558\ub77c CP.102: \ubb38\ud5cc\uc744 \uc138\uc2ec\ud558\uac00 \uacf5\ubd80\ud558\ub77c \uc5b8\uc81c/\uc5b4\ub5bb\uac8c atomic\uc744 \uc0ac\uc6a9\ud560 \uac83\uc778\uac00 \uae30\uc544\uc0c1\ud0dc\ub97c \ud68c\ud53c\ud558\ub77c \uc815\uad50\ud558\uac8c \uc870\uc791\ud55c lock-free \uba54\ubaa8\ub9ac \uc811\uadfc\ubcf4\ub2e4\ub294 lock-free \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c CP.110: Do not write your own double-checked locking for initialization CP.111: Use a conventional pattern if you really need double-checked locking \uc5b8\uc81c/\uc5b4\ub5bb\uac8c CAS(Compare And Swap) \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub294\uac00 CP.100: \uc815\ub9d0 \ud544\uc694\ud560 \ub54c\ub9cc lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c Reason lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc27d\uace0 \uc5b8\uc5b4 \uae30\ub2a5, \uba38\uc2e0 \uc544\ud0a4\ud14d\ucc98, \uc790\ub8cc\uad6c\uc870\uc5d0 \ub300\ud55c \uc804\ubb38\uac00 \uc218\uc900\uc758 \uc9c0\uc2dd\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. Example, bad // \uacf5\uc720\ub418\ub294 \uc5f0\uacb0\ub9ac\uc2a4\ud2b8\uc758 \ud5e4\ub4dc(\uc2dc\uc791\uc810) extern atomic < Link *> head ; Link * nh = new Link ( data , nullptr ); // \ub9c1\ud06c\uc5d0 \uc0bd\uc785\ud560 \uc900\ube44\ub97c \ud55c\ub2e4 Link * h = head . load (); // \ub9ac\uc2a4\ud2b8\uc758 \uacf5\uc720 head\ub97c \uc77d\ub294\ub2e4 do { // \uc870\uac74\uc744 \ucda9\uc871\ud558\uba74, \ub2e4\ub978 \uacf3\uc5d0 \uc0bd\uc785\ud55c\ub2e4. if ( h -> data <= data ) break ; // \ub2e4\uc74c \uc6d0\uc18c\ub294 \uc774\uc804\uc758 head\uc774\ub2e4 nh -> next = h ; } while ( ! head . compare_exchange_weak ( h , nh )); // nh\ub97c h \ub610\ub294 head\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \ubc84\uadf8\ub97c \ucc3e\uc544\ubcf4\ub77c. \ud14c\uc2a4\ud305\uc744 \ud1b5\ud574\uc11c \ucc3e\uae30 \uc815\ub9d0\uc815\ub9d0 \uc5b4\ub824\uc6b8 \uac83\uc774\ub2e4. ABA \ubb38\uc81c\uc5d0 \ub300\ud574\uc11c \uc77d\uc5b4\ubcf4\ub77c. Exception \uae30\ubcf8\uc801\uc73c\ub85c \uc801\uc6a9\ub418\ub294 \uc21c\ucc28 \ubb34\ubaa8\uc21c \uba54\ubaa8\ub9ac \ubaa8\ub378 ( memory_order_seq_cst )\uc744 \uc0ac\uc6a9\ud558\ub294 \ud55c, \uc6d0\uc790\uc801 \ubcc0\uc218\ub4e4 \ub2e8\uc21c\uc131\uacfc \uc548\uc804\uc131\uc744 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. Note \uc0c1\uc704 \ub808\ubca8 \ub3d9\uc2dc\uc131 \uba54\ucee4\ub2c8\uc998\ub4e4\uc740 thread \uc640 mutex \uac19\uc740 lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc73c\ub85c \uad6c\ud604\ub418\uc5c8\ub2e4. Alternative : \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc5d0 \uc758\ud574\uc11c \uad6c\ud604\ub418\uc5c8\uac70\ub098 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc77c\ubd80\ub85c \uc874\uc7ac\ud558\ub294 lock-free \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c. CP.101: \ud558\ub4dc\uc6e8\uc5b4/\ucef4\ud30c\uc77c\ub7ec \uc870\ud569\uc744 \ubd88\uc2e0\ud558\ub77c Reason lock-free\ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc800-\uc218\uc900 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ud398\uc774\uc2a4\ub294 \uac00\uc7a5 \uad6c\ud604\ud558\uae30 \uc5b4\ub835\uace0 \ubbf8\ubb18\ud55c \uc774\uc2dd\uc131 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \uc131\ub2a5\uc744 \uc704\ud574 lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, \uc624\ud788\ub824 \uc131\ub2a5 \uc800\ud558(regression)\uac00 \uc788\uc9c0\ub294 \uc54a\uc740\uc9c0 \ud655\uc778\ud574\uc57c \ud55c\ub2e4. Note (\uc815\uc801/\ub3d9\uc801) \uba85\ub839\uc5b4 \uc7ac\ubc30\uce58(Instruction Reordering) \ub54c\ubb38\uc5d0 \uc774 \ub808\ubca8\uc5d0\uc11c\ub294 \ud6a8\uc728\uc801\uc73c\ub85c \uc0dd\uac01\ud558\ub294 \uac83\uc774 \uc5b4\ub835\ub2e4 (\ud2b9\ud788 relaxed \uba54\ubaa8\ub9ac \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74). \uacbd\ud5d8\uacfc, (\uc900)\ud615\uc2dd\uc801\uc778 lock-free \ubaa8\ub378\ub4e4, \uadf8\ub7f0 \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud55c \uc810\uac80\uc774 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4. \ud14c\uc2a4\ud305 - \uc885\uc885 \uc5c4\uccad\ub098\uac8c \ub113\uc740 \uc601\uc5ed\uc5d0 \ub300\ud55c - \uc740 \ud544\uc218\uc801\uc774\ub2e4. \"Don't fly too close to the wind.\" Enforcement \ud558\ub4dc\uc6e8\uc5b4, \uc6b4\uc601\uccb4\uc81c, \ucef4\ud30c\uc77c\ub7ec, \uadf8\ub9ac\uace0 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubaa8\ub4e0 \ubcc0\ud654\ub97c \ud3ec\ud568\ud558\ub294 \uac15\ub825\ud55c \ud14c\uc2a4\ud305 \uaddc\uce59\uc744 \uc138\uc6cc\ub77c. CP.102: \ubb38\ud5cc\uc744 \uc138\uc2ec\ud558\uac8c \uacf5\ubd80\ud558\ub77c Reason atomic\uc5d0\uc11c\uc758 \uc608\uc678\uc640 \ud45c\uc900\uc801\uc778 \ud328\ud134\ub4e4, lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc628\uc804\ud788 \uc804\ubb38\uac00\ub97c \uc704\ud55c \ub0b4\uc6a9\uc774\ub2e4. lock-free \ucf54\ub4dc\ub97c \uc801\uc6a9\ud558\uae30\uc5d0 \uc55e\uc11c\uc11c \uc804\ubb38\uac00\uac00 \ub418\uc5b4\ub77c. References Anthony Williams: C++ concurrency in action. Manning Publications. Boehm, Adve, You Don't Know Jack About Shared Variables or Memory Models , Communications of the ACM, Feb 2012. Boehm, \"Threads Basics\", HPL TR 2009-259. Adve, Boehm, \"Memory Models: A Case for Rethinking Parallel Languages and Hardware\", Communications of the ACM, August 2010. Boehm, Adve, \"Foundations of the C++ Concurrency Memory Model\", PLDI 08. Mark Batty, Scott Owens, Susmit Sarkar, Peter Sewell, and Tjark Weber, \"Mathematizing C++ Concurrency\", POPL 2011. Damian Dechev, Peter Pirkelbauer, and Bjarne Stroustrup: Understanding and Effectively Preventing the ABA Problem in Descriptor-based Lock-free Designs. 13th IEEE Computer Society ISORC 2010 Symposium. May 2010. Damian Dechev and Bjarne Stroustrup: Scalable Non-blocking Concurrent Objects for Mission Critical Code. ACM OOPSLA'09. October 2009 Damian Dechev, Peter Pirkelbauer, Nicolas Rouquette, and Bjarne Stroustrup: Semantically Enhanced Containers for Concurrent Real-Time Systems. Proc. 16th Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems (IEEE ECBS). April 2009. CP.110: \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 (double-checked locking) \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9d0\ub77c Reason C++11 \uc774\ud6c4\ubd80\ud130\ub294, \uc815\uc801 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc774 \uc2a4\ub808\ub4dc \uc548\uc804 (thread-safe) \ud55c \ubc29\uc2dd\uc73c\ub85c \ucd08\uae30\ud654\ub41c\ub2e4. \ub530\ub77c\uc11c RAII \ud328\ud134\uacfc \ud568\uaed8 \uc0ac\uc6a9 \uc2dc, \uc815\uc801 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc758 \uc0ac\uc6a9\uc740 \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 (double-checked locking) \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc57c \ud560 \ud544\uc694\uc131\uc744 \ub300\uccb4\ud55c\ub2e4. \ub610\ud55c std::call_once \uc0ac\uc6a9 \uc5ed\uc2dc \ub3d9\uc77c\ud55c \ubaa9\uc801\uc744 \ub2ec\uc131\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uae30\ubcf4\ub2e4\ub294 C++11 \uc758 \uc815\uc801 \uc9c0\uc5ed \ubcc0\uc218\ub098 std::call_once \uc744 \uc0ac\uc6a9\ud558\ub77c. Example std::call_once \ub97c \uc0ac\uc6a9\ud558\ub294 \uc608\uc81c. void f () { static std :: once_flag my_once_flag ; std :: call_once ( my_once_flag , []() { // do this only once }); // ... } C++11 \uc758 \uc2a4\ub808\ub4dc \uc548\uc804\ud55c \uc815\uc801 \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uc608\uc81c. void f () { // Assuming the compiler is compliant with C++11 static My_class my_object ; // Constructor called only once // ... } class My_class { public : My_class () { // do this only once } }; Enforcement ??? \uc800 idiom \ud655\uc778\ud560 \uc218 \uc788\ub294 \uac74\uac00\uc694? CP.111: \uc774\uc911 \ud655\uc778 \uc7a0\uae08\uc774 \uaf2d \ud544\uc694\ud560 \uacbd\uc6b0\uc5d0\ub294 \uc804\ud1b5\uc801\uc778 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub294 \uc5c9\ub9dd\uc73c\ub85c \ub9cc\ub4e4\uae30 \uc27d\ub2e4. CP.110: \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9d0\ub77c \ubc0f CP.100: \uc815\ub9d0 \ud544\uc694\ud560 \ub54c\ub9cc lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c \uacfc \uac19\uc740 \uaddc\uce59\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \uc804\ud1b5\uc801\uc778 \ud328\ud134\uc744 \uc774\uc6a9\ud574\uc11c \uc791\uc131\ud558\ub3c4\ub85d \ud558\ub77c. \uc2a4\ub808\ub4dc \uc548\uc804\ud558\uc9c0 \uc54a\uc740 (non-thread-safe) \ud2b9\uc815 \ub3d9\uc791\uc5d0 \uc788\uc5b4, \ub3d9\uc791 \uc790\uccb4\uac00 \ubcf5\uc7a1\ud558\uace0\ub3c4 \uc218\ud589 \ube48\ub3c4\uac00 \ub0ae\uc73c\uba70 \ud574\ub2f9 \ub3d9\uc791\uc758 \uc218\ud589\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\ub294 (\uadf8 \ubc18\ub300\uc758 \uacbd\uc6b0\ub97c \ubcf4\uc7a5\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294) \uc2e0\uc18d\ud558\uace0\ub3c4 \uc2a4\ub808\ub4dc-\uc548\uc804\ud55c \uc2dc\ud5d8 \ubc29\ubc95\uc774 \uc874\uc7ac\ud558\ub294 \uc0c1\ud669\uc5d0\uc11c\uc758 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ud328\ud134\uc758 \uc0ac\uc6a9\uc774 CP.110: \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9d0\ub77c \uc744 \uc704\ubc18\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4. Example, bad volatile \uc758 \uc0ac\uc6a9\uc744 \ud1b5\ud55c \uc544\ub798\uc758 \uccab \ubc88\uc9f8 \uc2dc\ud5d8\uc740 \uc2a4\ub808\ub4dc \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4. CP.200: volatile \uc740 C++\uac00 \uc544\ub2cc \uba54\ubaa8\ub9ac\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c \uc744 \ucc38\uace0\ud558\ub77c. mutex action_mutex ; volatile bool action_needed ; if ( action_needed ) { std :: lock_guard < std :: mutex > lock ( action_mutex ); if ( action_needed ) { take_action (); action_needed = false ; } } Example, good mutex action_mutex ; atomic < bool > action_needed ; if ( action_needed ) { std :: lock_guard < std :: mutex > lock ( action_mutex ); if ( action_needed ) { take_action (); action_needed = false ; } } \ud68d\ub4dd \uc801\uc7ac (acquire load) \ubc29\uc2dd\uc774 \uc21c\ucc28 \uc77c\uad00 \uc801\uc7ac (sequentially-consistent load) \ubc29\uc2dd\ubcf4\ub2e4 \ud6a8\uc728\uc801\uc778 \uacbd\uc6b0, \ubbf8\uc138 \uc870\uc815\ub41c \uba54\ubaa8\ub9ac \uc21c\uc11c (memory order) \ub97c \ud1b5\ud574 \uc131\ub2a5\uc0c1 \uc774\uc810\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. mutex action_mutex ; atomic < bool > action_needed ; if ( action_needed . load ( memory_order_acquire )) { lock_guard < std :: mutex > lock ( action_mutex ); if ( action_needed . load ( memory_order_relaxed )) { take_action (); action_needed . store ( false , memory_order_release ); } } Enforcement ??? \ud574\ub2f9 idiom \uc774 \ud0d0\uc9c0 \uac00\ub2a5\ud55c\uac00? CP.etc: \uae30\ud0c0 \ub3d9\uc2dc\uc131 \uaddc\uce59\ub4e4 \uc774 \uaddc\uce59\ub4e4\uc740 \ubd84\ub958\ub97c \uc801\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4: CP.200: volatile \uc740 C++\uac00 \uc544\ub2cc \uba54\ubaa8\ub9ac\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c CP.201: ??? \uc2dc\uadf8\ub110 CP.200: volatile \uc740 C++\uac00 \uc544\ub2cc \uba54\ubaa8\ub9ac\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c Reason volatile \uc740 \"C++\uac00 \uc544\ub2cc\" \ucf54\ub4dc \ub610\ub294 C++ \uba54\ubaa8\ub9ac \ubaa8\ub378\uc744 \ub530\ub974\uc9c0 \uc54a\ub294 \ud558\ub4dc\uc6e8\uc5b4\uc5d0 \uc788\ub294 \uac1d\uccb4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub41c\ub2e4. Example const volatile long clock ; \uc774 \ucf54\ub4dc\ub294 \uc2dc\uacc4 \ud68c\ub85c\uac00 \uc9c0\uc18d\uc801\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ub808\uc9c0\uc2a4\ud130\ub97c \uc758\ubbf8\ud55c\ub2e4. clock \uc740 volatile \uc778\ub370, \uc774\ub294 C++ \ud504\ub85c\uadf8\ub7a8 \ub0b4\uc5d0\uc11c\ub294 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uc558\uc9c0\ub9cc \uac12\uc774 \ubc14\ub014 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc608\ucee8\ub300, clock \uc744 \ub450\ubc88 \uc77d\ub294 \uac83\uc740 \ub2e4\ub978 \uac12\uc744 \ubc18\ud658\ud560 \uc218\ub3c4 \uc788\ub2e4, \ub54c\ubb38\uc5d0 \ucd5c\uc801\ud654\uae30(optimizer)\ub294 \ubc18\ubcf5\ub41c \uc77d\uae30 \uacfc\uc815\uc744 \ucd5c\uc801\ud654\ud574\uc11c \uc5c6\uc560\uc9c0 \uc54a\ub294 \uac83\uc774 \ub098\uc744 \uac83\uc774\ub2e4: long t1 = clock ; // ... no use of clock here ... long t2 = clock ; clock \uc740 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uac12\uc744 \uc4f0\ub824\uace0 \ud558\uba74 \uc548\ub418\uae30 \ub54c\ubb38\uc5d0 const \ub85c \uc0ac\uc6a9\ub41c\ub2e4. Note \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc9c1\uc811 \uc870\uc791\ud558\ub294 \ucd5c\uc800 \ub808\ubca8\uc758 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac8c \uc544\ub2c8\ub77c\uba74, volatile \ub294 \ud53c\ud558\ub294\uac8c \uc88b\uc740 \ub09c\ud574\ud55c(esoteric) \uae30\ub2a5\uc774\ub77c\uace0 \uc0dd\uac01\ud558\ub77c. Example \uc77c\ubc18\uc801\uc73c\ub85c C++ \ucf54\ub4dc\ub294 \ub2e4\ub978 \uc5b4\ub518\uac00(\ud558\ub4dc\uc6e8\uc5b4 \ub610\ub294 \ub2e4\ub978 \uc5b8\uc5b4)\uc5d0 \uc18d\ud55c \uba54\ubaa8\ub9ac\ub97c \uac00\uc838\uc62c \ub54c volatile \uc744 \uc0ac\uc6a9\ud55c\ub2e4: int volatile * vi = get_hardware_memory_location (); // note: we get a pointer to someone else's memory here // volatile says \"treat this with extra respect\" \ub54c\ub54c\ub85c C++ \ucf54\ub4dc\ub294 volatile \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud558\uace0 \uc758\ub3c4\uc801\uc73c\ub85c \ud3ec\uc778\ud130\ub97c \ub2e4\ub978 \uc5b4\ub518\uac00(\ud558\ub4dc\uc6e8\uc5b4 \ub610\ub294 \ub2e4\ub978\uc5b8\uc5b4)\uc640 \uacf5\uc720\ud558\uae30\ub3c4 \ud55c\ub2e4: static volatile long vl ; please_use_this ( & vl ); // escape a reference to this to \"elsewhere\" (not C++) Example; bad volatile \uc9c0\uc5ed\ubcc0\uc218\ub4e4\uc740 \uac70\uc758 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc798\ubabb \uc0ac\uc6a9\ub41c \uac83\uc774\ub2e4 -- local variables are nearly always wrong -- \uadf8 \ubcc0\uc218\ub4e4\uc774 \uc77c\uc2dc\uc801(emphemeral)\uc774\ub77c\uba74 \uc5b4\ub5bb\uac8c \ub2e4\ub978 \uc5b8\uc5b4/\uae30\uacc4\ub4e4\uacfc \uacf5\uc720\ub420 \uc218 \uc788\uaca0\ub294\uac00? \uba64\ubc84 \ubcc0\uc218\ub4e4\uc758 \uacbd\uc6b0\ub3c4 \uac19\uc740 \uc774\uc720\ub85c volatile \uc758 \uc798\ubabb\ub41c \uc0ac\uc6a9\uc77c \uc218 \uc788\ub2e4. void f () { volatile int i = 0 ; // bad, volatile local variable // etc. } class My_type { volatile int i = 0 ; // suspicious, volatile member variable // etc. }; Note C++ \uc5d0\uc11c\ub294, \ub2e4\ub978 \uc5b8\uc5b4\uc640\ub294 \ub2ec\ub9ac, volatile \uc740 \ub3d9\uae30\ud654\uc640 \uad00\ub828\ud574 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\ub294\ub2e4 . Enforcement volatile T \uc744 \uc0ac\uc6a9\ud558\ub294 \uc9c0\uc5ed, \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c; \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 atomic<T> \ub97c \uc758\ub3c4\ud588\uc744 \uac83\uc774\ub2e4. ??? CP.201: ??? \uc2dc\uadf8\ub110 ???UNIX signal handling???. May be worth reminding how little is async-signal-safe, and how to communicate with a signal handler (best is probably \"not at all\")","title":"Concurrency"},{"location":"Concurrency/#cp","text":"\uc885\uc885 \uc6b0\ub9ac \ucef4\ud4e8\ud130\uac00 \ub3d9\uc2dc\uc5d0 \ub9ce\uc740 \uc791\uc5c5\ub4e4\uc744 \ud574\uc8fc\uae38 (\ucd5c\uc18c\ud55c \uadf8\ub807\uac8c \ubcf4\uc774\uae30\ub97c) \uc6d0\ud560 \ub54c\uac00 \uc788\uc8e0. \uc774\uc720\ub294 \ub2e4\uc591\ud569\ub2c8\ub2e4. (\uc608\ub97c \ub4e4\uba74, \ub2e8\uc77c \ud504\ub85c\uc138\uc11c\ub9cc \uc4f0\uba74\uc11c \uc5ec\ub7ec \uc774\ubca4\ud2b8\ub97c \uae30\ub2e4\ub9ac\uae30\ub97c \uc6d0\ud558\uac70\ub098, \ub3d9\uc2dc\uc5d0 \ub2e4\uc218\uc758 \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc\uc744 \ucc98\ub9ac\ud558\uae38 \uc6d0\ud558\uac70\ub098, \ub610\ub294 \ud558\ub4dc\uc6e8\uc5b4 \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud558\uae38 \uc6d0\ud560 \uc218\ub3c4 \uc788\uaca0\uc8e0.) \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud55c \uae30\ubcf8 \uae30\ub2a5\ub4e4 \ub610\ud55c \uadf8\ub7ec\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294, ISO \ud45c\uc900 C++\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ucd08\uc801\uc778 \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131\uc744 \uc704\ud55c \uae30\ub2a5\uc5d0 \uad00\ud55c \uba87\uba87 \uc77c\ubc18\uc801\uc778 \uc6d0\uce59\uacfc \uaddc\uce59\uc5d0 \ub300\ud574\uc11c \uae30\uc220\ud569\ub2c8\ub2e4. \ub3d9\uc2dc\uc801\uc774\uace0 \ubcd1\ub82c\uc801\uc778 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \uae30\uacc4 \uc218\uc900\uc758 \uc9c0\uc6d0(The core machine support)\uc740 \ubc14\ub85c \uc2a4\ub808\ub4dc\uc785\ub2c8\ub2e4. \uc2a4\ub808\ub4dc\ub4e4\uc744 \uac19\uc740 \uba54\ubaa8\ub9ac\ub97c \uacf5\uc720\ud558\uba74\uc11c\ub3c4 \ub2e4\uc218\uc758 \ud504\ub85c\uadf8\ub7a8\ub4e4\uc744 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc2e4\ud589\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc90d\ub2c8\ub2e4. \ub9ce\uc740 \uc774\uc720\ub85c \uc778\ud574 \ub3d9\uc2dc\uc131 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uae4c\ub2e4\ub85c\uc6b4\ub370, \ubb34\uc5c7\ubcf4\ub2e4\ub3c4 \uc2a4\ub808\ub4dc\ub4e4 \uc0ac\uc774\uc5d0 \uc801\uc808\ud55c \ub3d9\uae30\ud654(synchronization)\uac00 \uc5c6\ub2e4\uba74 \ud55c \uc2a4\ub808\ub4dc\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc77d\ub294 \ub3d9\uc548 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc5d0\uc11c \uac19\uc740 \ub370\uc774\ud130\ub97c \ub36e\uc5b4\uc4f8 \ub54c\uc758 \ub3d9\uc791\uc744 \uc815\uc758\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38(undefined behavior)\uc785\ub2c8\ub2e4. \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ub2e8\uc77c \uc2a4\ub808\ub4dc \ucf54\ub4dc\ub294 std::async \ub610\ub294 std::thread \ub97c \uc804\ub7b5\uc801\uc73c\ub85c \ucd94\uac00\ud558\ub294 \uac83\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \ubcd1\ub82c\ud654\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ub294 \ucf54\ub4dc \uc804\uccb4\ub97c \uc644\uc804\ud788 \ub2e4\uc2dc \uc791\uc131\ud574\uc57c \ud560 \uc218\ub3c4 \uc788\uc8e0. \uc774\ub294 \uc6d0\ub798\uc758 \ucf54\ub4dc\uac00 \uc2a4\ub808\ub4dc\uc5d0 \uc801\ud569\ud558\uac8c(thread-friendly) \uc791\uc131\ub418\uc5c8\ub290\ub0d0\uc5d0 \ub530\ub77c \ub2e4\ub985\ub2c8\ub2e4. \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ub3d9\uc2dc\uc131/\ubcd1\ub82c\uc131 \uaddc\uce59\ub4e4\uc740 3\uac00\uc9c0 \ubaa9\ud45c\ub97c \uac00\uc9c0\uace0 \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4: \uba40\ud2f0\uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uac83 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc2a4\ub808\ub4dc \uae30\ubcf8\uc5f0\uc0b0(primitives)\uc744 \uc0ac\uc6a9\ud558\ub294 \uae54\ub054\ud558\uace0, \uc548\uc804\ud55c \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc8fc\ub294 \uac83 \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131\uc774 \uae30\ub300\ub9cc\ud07c\uc758 \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uac00\uc838\uc624\uc9c0 \ubabb\ud560 \ub54c\uc758 \uac00\uc774\ub4dc\ub97c \uc81c\uacf5\ud558\ub294 \uac83 C++\uc5d0\uc11c\uc758 \ub3d9\uc2dc\uc131\uc740 \uc544\uc9c1 \uc9c4\ud589 \uc911\uc774\ub77c\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uae38 \ubc14\ub78d\ub2c8\ub2e4. C++ 11\uc5d0\uc11c\ub294 \ub9ce\uc740 \ub3d9\uc2dc\uc131 \uae30\ubcf8\uc5f0\uc0b0\uc744 \uc18c\uac1c\ud588\uc5c8\uace0, C++14\uc640 C++17\uc5d0\uc11c\ub294 \ubc1c\uc804\uc774 \uc774\ub8e8\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. C++\ub97c \uc0ac\uc6a9\ud55c \ub3d9\uc2dc\uc801\uc778(concurrent) \ud504\ub85c\uadf8\ub7a8\ub4e4\uc744 \uc27d\uac8c \uc791\uc131\ud558\ub294 \uac83\uc5d0 \ub300\ud55c \uad00\uc2ec\ub3c4 \ub298\uc5b4\ub0ac\uc8e0. \uc774 \ubb38\uc11c\uc5d0 \uc788\ub294 \uc77c\ubd80 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \uad00\ub828\ub41c \uac00\uc774\ub4dc\ub3c4 \uc2dc\uac04\uc774 \uc9c0\ub0a8\uc5d0 \ub530\ub77c \uacc4\uc18d \ubc14\ub00c\uae30\ub97c \uae30\ub300\ud569\ub2c8\ub2e4. (\ub2f9\uc5f0\ud558\uac8c\ub3c4) \uc774 \ubd80\ubd84\uc740 \ub9ce\uc740 \uc791\uc5c5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc804\ubb38\uac00\uac00 \uc544\ub2cc \uc0ac\ub78c\ub4e4\uc744 \uc704\ud55c \uaddc\uce59\uc73c\ub85c \uc2dc\uc791\ud55c\ub2e4\ub294 \uc810\uc744 \uc720\uc758\ud574\uc8fc\uc2ed\uc2dc\uc624. \ub2f9\uc2e0\uc774 \uc804\ubb38\uac00\ub77c\uba74, \uc870\uae08 \ub354 \uae30\ub2e4\ub9ac\uc154\uc57c \ud560\uac81\ub2c8\ub2e4; \uc774 \ubb38\uc11c\uc5d0 \uae30\uc5ec\ud558\ub294 \uac83\ub3c4 \uc88b\uad6c\uc694. \ud558\uc9c0\ub9cc \uc815\ud655\ud558\uace0, \ube60\ub978 \ub3d9\uc2dc\uc801\uc778 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uae38 \uc6d0\ud558\ub294 \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc744 \uc0dd\uac01\ud574 \uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131 \uaddc\uce59 \uc694\uc57d: CP.1: \ucf54\ub4dc\uac00 \uba40\ud2f0\uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\ub85c \ub3d9\uc791\ud560 \uac83\uc774\ub77c \uac00\uc815\ud558\ub77c CP.2: \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \ud53c\ud558\ub77c CP.3: \uc4f0\uae30 \uac00\ub2a5\ud55c \ub370\uc774\ud130\uc758 \uba85\uc2dc\uc801\uc778 \uacf5\uc720\ub97c \ucd5c\uc18c\ud654\ud558\ub77c CP.4: \uc2a4\ub808\ub4dc\ubcf4\ub2e8 \uc791\uc5c5 \ub2e8\uc704\ub85c \uc0dd\uac01\ud558\ub77c CP.8: \ub3d9\uae30\ud654\ub97c \uc704\ud574 volatile \uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c CP.9: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0, \ub3c4\uad6c (tool) \ub97c \uc774\uc6a9\ud558\uc5ec \uc790\uc2e0\uc758 \ubcd1\ud589 \uc2e4\ud589 \ucf54\ub4dc\ub97c \uac80\uc99d\ud558\ub77c \ucc38\uace0 : CP.con: \ub3d9\uc2dc\uc131(Concurrency) CP.par: \ubcd1\ub82c\uc131(Parallelism) CP.mess: \uba54\uc138\uc9c0 \uc804\ub2ec(Message passing) CP.vec: \ubca1\ud130\ud654(Vectorization) CP.free: \ubb34\uc7a0\uae08 \ud504\ub85c\uadf8\ub798\ubc0d(Lock-free programming) CP.etc: \uae30\ud0c0 \ub3d9\uc2dc\uc131 \uaddc\uce59\ub4e4","title":"CP: \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\uc131"},{"location":"Concurrency/#cp1","text":"","title":"CP.1: \ucf54\ub4dc\uac00 \uba40\ud2f0\uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\ub85c \ub3d9\uc791\ud560 \uac83\uc774\ub77c \uac00\uc815\ud558\ub77c"},{"location":"Concurrency/#reason","text":"\ub3d9\uc2dc\uc131\uc774 \uc9c0\uae08, \uadf8\ub9ac\uace0 \ubbf8\ub798\uc758 \uc5b8\uc820\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc744 \uac83\uc774\ub77c\uace0 \ud655\uc815\ud558\uae30 \uc5b4\ub835\ub2e4. \ucf54\ub4dc\ub294 \uc7ac\uc0ac\uc6a9\ub41c\ub2e4. \uc2a4\ub808\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc740 \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\ub85c \uc0ac\uc6a9\ub418\uae30 \ub9c8\ub828\uc774\ub2e4. \uc774 \uaddc\uce59\uc740 \ub2e8\uc77c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\ubcf4\ub2e4\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucf54\ub4dc\uc5d0 \ub354 \uc2dc\uae09\ud558\uac8c \uc801\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc, Ctrl C, V\uc758 \ub9c8\ubc95 \ub355\ubd84\uc5d0, \ucf54\ub4dc\uac00 \uc608\uc0c1\uce58 \uc54a\uc740 \uacf3\uc5d0\uc11c \ub098\ud0c0\ub0a0 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Concurrency/#example","text":"double cached_computation ( double x ) { static double cached_x = 0.0 ; static double cached_result = COMPUTATION_OF_ZERO ; double result ; if ( cached_x == x ) return cached_result ; result = computation ( x ); cached_x = x ; cached_result = result ; return result ; } \ube44\ub85d cached_computation \ud568\uc218\ub294 \ub2e8\uc77c \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc120 \uc644\ubcbd\ud558\uac8c \ub3d9\uc791\ud558\uc9c0\ub9cc, \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc120 \ub450 \uac1c\uc758 static \ubcc0\uc218\ub4e4\uc774 \ub370\uc774\ud130 \uacbd\uc7c1\uc73c\ub85c \uc774\uc5b4\uc9c0\uace0, \ube44\uc815\uc758 \ub3d9\uc791(undefined behavior)\uc744 \uc720\ubc1c\ud560 \uac83\uc774\ub2e4. \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc548\uc804\ud558\uac8c \ubc14\uafc0 \uc218 \uc788\ub294 \ubc29\ubc95\ub4e4\uc774 \uc788\ub2e4: \ub3d9\uc2dc\uc131\uc5d0 \ub300\ud55c \uc0ac\ud56d\uc744 \uc0c1\uc704 \ud638\ucd9c\uc790\uc5d0\uac8c \uc704\uc784\ud558\ub77c static \ubcc0\uc218\ub4e4\uc744 thread_local \ub85c \ub9cc\ub4e4\uc5b4\ub77c (\uc544\ub9c8 \uce90\uc2f1\uc744 \ub35c \ud6a8\uc728\uc801\uc73c\ub85c \ub9cc\ub4e4 \uc218\ub3c4 \uc788\ub2e4) \ub3d9\uc2dc\uc801\uc778 \uc81c\uc5b4\ub97c \uad6c\ud604\ud558\ub77c, \uc608\ucee8\ub300, \ub450 static \ubcc0\uc218\ub97c static \uc7a0\uae08\uc73c\ub85c \ubcf4\ud638\ud558\ub77c (\uc131\ub2a5\uc744 \uac10\uc18c\uc2dc\ud0ac \uc218 \uc788\ub2e4) \ud638\ucd9c\uc790\uac00 \uce90\uc2dc\ub85c \uc0ac\uc6a9\ud560 \uba54\ubaa8\ub9ac\ub97c \uc81c\uacf5\ud558\ub3c4\ub85d \ud558\ub77c. \uadf8\ub807\uac8c \ud568\uc73c\ub85c\uc368 \uba54\ubaa8\ub9ac \ud560\ub2f9\uacfc \ub3d9\uc2dc\uc131\uc5d0 \ub300\ud55c \ubb38\uc81c\ub97c \ud638\ucd9c\uc790\uc5d0\uac8c \uc704\uc784\ud558\ub77c \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c\uc758 \ube4c\ub4dc, \uc2e4\ud589\uc744 \uac70\ubd80\ud558\ub77c \ub450 \uac00\uc9c0 \uad6c\ud604\uc744 \uc9c0\uc6d0\ud558\ub77c. \ub2e8\uc77c \uc2a4\ub808\ub4dc \ud658\uacbd\uc744 \uc704\ud55c \uad6c\ud604\uacfc \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc744 \uc704\ud55c \uac83 \ubaa8\ub450","title":"Example"},{"location":"Concurrency/#exception","text":"\uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc808\ub300 \uc2e4\ud589\ub418\uc9c0 \uc54a\uc744 \ucf54\ub4dc. \uc8fc\uc758: \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc808\ub300\ub85c \ub3cc\uc544\uac00\uc9c0 \uc54a\uc744 \uc904 \"\uc54c\uc558\ub358\" \ucf54\ub4dc\ub4e4\uc774 \uba87\ub144 \ub4a4\uc5d4 \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\uac00 \ub41c \uc0ac\ub840\ub294 \ub9ce\uc774 \uc788\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c, \uadf8\ub7f0 \ud504\ub85c\uadf8\ub7a8\ub4e4\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \uc5c6\uc560\uae30 \uc704\ud55c \uace0\ud1b5\uc2a4\ub7ec\uc6b4 \ub178\ub825\uc73c\ub85c \uc774\uc5b4\uc9c4\ub2e4. \ub54c\ubb38\uc5d0, \uba40\ud2f0 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \uac83\uc744 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub4e4\uc740 \ubd84\uba85\ud558\uac8c \ud574\ub2f9 \uc0ac\ud56d\uc774 \uae30\uc220\ub418\uc5b4\uc57c \ud558\uace0, \uc774\uc0c1\uc801\uc73c\ub85c\ub294 \ucef4\ud30c\uc77c \ub610\ub294 \uc2e4\ud589\uc2dc\uac04\uc5d0 \ubc84\uadf8\ub97c \uc77c\ucc0d \ucc3e\uc744 \uc218 \uc788\ub294 \uba54\ucee4\ub2c8\uc998\uc774 \ud568\uaed8 \uc0ac\uc6a9\ub418\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Exception"},{"location":"Concurrency/#cp2","text":"","title":"CP.2: \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \ud53c\ud558\ub77c"},{"location":"Concurrency/#reason_1","text":"\ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc788\uc73c\uba74, \uc544\ubb34\uac83\ub3c4 \ubcf4\uc7a5\ud560 \uc218 \uc5c6\uc73c\uba70 \ubbf8\ubb18\ud55c \uc5d0\ub7ec\ub4e4\uc774 \uacc4\uc18d\ub420 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Concurrency/#note","text":"\uc27d\uac8c \ub9d0\ud574\uc11c, \ub9cc\uc57d \ub450 \uc2a4\ub808\ub4dc\uac00 \uac19\uc740 \uac1d\uccb4\ub97c (\ub3d9\uae30\ud654 \uc5c6\uc774) \ub3d9\uc2dc\uc801\uc73c\ub85c \uc811\uadfc\ud560 \uc218 \uc788\ub2e4\uba74, \uadf8\ub9ac\uace0 \ud55c \uc2a4\ub808\ub4dc\uac00 \uc4f0\uae30(non- const \uc5f0\uc0b0)\ub97c \uc218\ud589\ud55c\ub2e4\uba74, \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc788\ub294 \uac83\uc774\ub2e4. \uc5b4\ub5bb\uac8c \ub3d9\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\uace0 \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \uc5c6\uc568 \uac83\uc778\uc9c0 \ub354 \uc54c\uace0 \uc2f6\ub2e4\uba74 \ub3d9\uc2dc\uc131\uc5d0 \ub300\ud55c \uc88b\uc740 \ucc45\ub4e4\uc744 \ucc38\uace0\ud558\ub77c.","title":"Note"},{"location":"Concurrency/#example-bad","text":"\ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc874\uc7ac\ud558\ub294 \uc608\uc2dc\ub294 \ub9ce\ub2e4. \uc9c0\uae08 \uc774 \uc21c\uac04 \uc2e4\ud589 \uc911\uc778 production \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub4e4 \uc911\uc5d0\ub3c4 \uc874\uc7ac\ud560 \uac83\uc774\ub2e4. \uac04\ub2e8\ud55c \uc608\uc2dc\ub97c \ub4e4\uc790\uba74: int get_id () { static int id = 1 ; return id ++ ; } \uc5ec\uae30\uc11c \uc99d\uac00 \uc5f0\uc0b0\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc758 \uc608\uc2dc\ub2e4. \uc774 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc798\ubabb\ub420 \uc218 \uc788\ub2e4: \uc2a4\ub808\ub4dc A\uac00 id \ub97c \ub85c\ub4dc\ud558\uace0, OS\uac00 A\ub97c \uc911\uc9c0\uc2dc\ud0a8\ub2e4. \uadf8 \uc0ac\uc774 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 ID\ub97c \uc218\ubc31 \uac1c \uc0dd\uc131\ud55c\ub2e4. \uadf8 \ud6c4\uc5d0 A\ub294 \ub2e4\uc2dc \uc2e4\ud589\ub418\uace0, A\uc758 \ubb38\ub9e5\uc5d0\uc11c \uc99d\uac00\ud55c id \uac12\uc774 \ub2e4\uc2dc \uc368\uc9c0\uac8c \ub41c\ub2e4. \uc2a4\ub808\ub4dc A\uc640 B\uac00 id \ub97c \ub85c\ub4dc\ud558\uace0 \ub3d9\uc2dc\uc5d0 \uc99d\uac00\uc2dc\ud0a8\ub2e4. \uadf8 \uacb0\uacfc \ub450 \uc2a4\ub808\ub4dc\ub294 \uac19\uc740 ID\uac12\uc744 \uac00\uc9c4\ub2e4. \uc9c0\uc5ed \uc815\uc801 \ubcc0\uc218\ub4e4\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc758 \uc77c\ubc18\uc801\uc778 \uc6d0\uc778\uc774\ub2e4.","title":"Example, bad"},{"location":"Concurrency/#example-bad_1","text":"void f ( fstream & fs , regex pat ) { array < double , max > buf ; int sz = read_vec ( fs , buf , max ); // read from fs into buf gsl :: span < double > s { buf }; // ... auto h1 = async ([ & ]{ sort ( par , s ); }); // spawn a task to sort // ... auto h2 = async ([ & ]{ return find_all ( buf , sz , pat ); }); // spawn a task to find matches // ... } \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294, buf \uc758 \uc6d0\uc18c\ub4e4\uc5d0 \ub300\ud55c \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc788\ub2e4. ( sort \uac00 \uc77d\uae30/\uc4f0\uae30 \ubaa8\ub450 \uc218\ud589\ud560 \uac83\uc774\ub2e4). \uc88b\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc774\ub780 \uc5c6\ub2e4. \uc774 \ucf54\ub4dc\uc5d0\uc120 \uc2a4\ud0dd\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \ubc1c\uc0dd\ud558\ub294\ub370, \ubaa8\ub4e0 \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc774\ucc98\ub7fc \ucc3e\uc544\ub0b4\uae30 \uc27d\uc9c0\ub294 \uc54a\ub2e4.","title":"Example, bad:"},{"location":"Concurrency/#example-bad_2","text":"// code not controlled by a lock unsigned val ; if ( val < 5 ) { // ... other thread can change val here ... switch ( val ) { case 0 : // ... case 1 : // ... case 2 : // ... case 3 : // ... case 4 : // ... } } \uc774 \uacbd\uc6b0, val \uc774 \ubc14\ub014\uc218\ub3c4 \uc788\ub2e4\ub294 \uac83\uc744 \ubaa8\ub974\ub294 \ucef4\ud30c\uc77c\ub7ec\ub294 switch \ub97c 5\uac1c\uc758 \uc5d4\ud2b8\ub9ac\ub97c \uc9c0\ub2cc \uc810\ud504 \ud14c\uc774\ube14\ub85c \uad6c\ud604\ud560 \uac83\uc774\ub2e4. \uadf8\ub7ec\uba74, [0..4] \ubc94\uc704 \ubc16\uc758 \uac12\uc744 \uac00\uc9c4 val \uc740 \ud504\ub85c\uadf8\ub7a8\uc758 \uc5b4\ub518\uac00\ub85c \uc810\ud504\ub97c \ud560 \uac83\uc774\uace0, \uadf8 \uc9c0\uc810\ubd80\ud130 \uc2e4\ud589\ub420 \uac83\uc774\ub2e4. \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc788\uc73c\uba74 \uadf8 \ubb34\uc5c7\ub3c4 \uc7a5\ub2f4\ud560 \uc218 \uc5c6\ub2e4. \uc2e4\uc81c\ub85c, \ub354 \uc548\uc88b\uc740 \uacb0\uacfc\ub85c \uc774\uc5b4\uc9c8 \uc218\ub3c4 \uc788\ub2e4: \ucef4\ud30c\uc77c \uacb0\uacfc \ucf54\ub4dc\ub97c \ubcf4\uba74\uc11c \uae38\uc783\uc740 \uc810\ud504\uac00 \ud2b9\uc815 \uac12\uc5d0 \ub530\ub77c\uc11c \uc5b4\ub514\ub85c \uac08\uc9c0 \uc54c \uc218 \uc788\uc744\uc9c0\ub3c4 \ubaa8\ub974\uc9c0\ub9cc, \uc774\ub294 \ubcf4\uc548 \uc704\ud5d8\uc774 \ub420\uc218\ub3c4 \uc788\ub2e4.","title":"Example, bad:"},{"location":"Concurrency/#enforcement","text":"\ucd5c\uc18c\ud55c \ubb34\uc5c7\uc774\ub77c\ub3c4 \ud558\ub77c. \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \uc0c1\uc5c5\uc6a9 \uadf8\ub9ac\uace0 \uc624\ud508\uc18c\uc2a4 \ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c. \ud558\uc9c0\ub9cc \uc815\uc801 \ub3c4\uad6c\ub4e4\uc740 \uc885\uc885 \uc798\ubabb\ub41c \ucf54\ub4dc\ub97c \uc6a9\uc778\ud560\uc218\ub3c4 \uc788\ub2e4. \ub610 \ub7f0\ud0c0\uc784 \ub3c4\uad6c\ub4e4\uc740 \uc885\uc885 \uc0c1\ub2f9\ud55c \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. \ub354 \ub098\uc740 \ub3c4\uad6c\ub4e4\uc774 \ub098\uc624\uae30\ub97c \ubc14\ub780\ub2e4. \uc5ec\ub7ec \ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ud558\ub098\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \ub9ce\uc740 \ubb38\uc81c\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \ub370\uc774\ud130 \uacbd\uc7c1 \ubb38\uc81c\ub97c \uc644\ud654\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc774 \uba87\uac00\uc9c0 \uc788\ub2e4: \ub354 \uc801\uc740 \uc804\uc5ed \ub370\uc774\ud130 \ub354 \uc801\uc740 static \ubcc0\uc218\ub4e4 \uc2a4\ud0dd \uba54\ubaa8\ub9ac \uc911\uc2ec\uc758 \uc0ac\uc6a9 (\ud3ec\uc778\ud130\ub4e4\uc744 \ub108\ubb34 \ub9ce\uc774 \ub358\uc9c0\uc9c0 \ub9d0\uc544\ub77c) \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \ub370\uc774\ud130\ub97c \ub354 \ub9ce\uc774 \uc368\ub77c. (\ub9ac\ud130\ub7f4, constexpr , const )","title":"Enforcement"},{"location":"Concurrency/#cp3","text":"","title":"CP.3: \uc4f0\uae30 \uac00\ub2a5\ud55c \ub370\uc774\ud130\uc758 \uba85\uc2dc\uc801\uc778 \uacf5\uc720\ub97c \ucd5c\uc18c\ud654\ud558\ub77c"},{"location":"Concurrency/#reason_2","text":"\uc4f0\uae30 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \uacf5\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \uc6d0\ucc9c\uc801\uc73c\ub85c \ub9c9\uc744 \uc218 \uc788\ub2e4. \uacf5\uc720\ub97c \uc904\uc77c \uc218\ub85d, \ub3d9\uae30\ud654 \uc811\uadfc\uacfc \ub370\uc774\ud130 \uacbd\uc7c1\uc758 \uac00\ub2a5\uc131\uc744 \uc904\uc77c \uc218 \uc788\ub2e4. \ub354\ud574\uc11c, \ub300\uae30\uc640 \uc7a0\uae08 \uc5ed\uc2dc \uc904\uc5b4\ub4e0\ub2e4. (\ub530\ub77c\uc11c \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub420 \uac83\uc774\ub2e4)","title":"Reason"},{"location":"Concurrency/#example_1","text":"bool validate ( const vector < Reading >& ); Graph < Temp_node > temperature_gradiants ( const vector < Reading >& ); Image altitude_map ( const vector < Reading >& ); // ... void process_readings ( const vector < Reading >& surface_readings ) { auto h1 = async ([ & ] { if ( ! validate ( surface_readings )) throw Invalid_data {}; }); auto h2 = async ([ & ] { return temperature_gradiants ( surface_readings ); }); auto h3 = async ([ & ] { return altitude_map ( surface_readings ); }); // ... h1 . get (); auto v2 = h2 . get (); auto v3 = h3 . get (); // ... } \uc704 \ucf54\ub4dc\uc5d0\uc11c const \ub4e4\uc774 \uc5c6\ub2e4\uba74, surface_readings \uc5d0 \ub300\ud55c \uc7a0\uc7ac\uc801 \ub370\uc774\ud130 \uacbd\uc7c1 \ub54c\ubb38\uc5d0 \ubaa8\ub4e0 \ube44\ub3d9\uae30\uc801\uc778 \ud568\uc218 \ud638\ucd9c\uc744 \ub2e4\uc2dc \uc810\uac80\ud574\uc57c \ud560 \uac83\uc774\ub2e4. surface_readings \uc744 (\uc774 \ud568\uc218\uc5d0 \ub300\ud574\uc11c) const \ub85c \ub9cc\ub4e4\uba74 \ubb38\uc81c \uc601\uc5ed\uc744 \ud568\uc218 \uc548\ucabd\uc73c\ub85c \ud55c\uc815\ud560 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Concurrency/#note_1","text":"\ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \ub370\uc774\ud130\ub294 \uc548\uc804\ud558\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \uacf5\uc720\ub420 \uc218 \uc788\ub2e4. \uc5ec\uae30\uc5d4 \uc7a0\uae08\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4: \uc0c1\uc218\uc5d0 \ub300\ud574\uc11c\ub294 \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. CP.mess: Message Passing \uc640 CP.31: prefer pass by value \ub97c \ud568\uaed8 \ud655\uc778\ud558\ub77c.","title":"Note"},{"location":"Concurrency/#enforcement_1","text":"???","title":"Enforcement"},{"location":"Concurrency/#cp4","text":"","title":"CP.4: \uc2a4\ub808\ub4dc\ubcf4\ub2e8 \uc791\uc5c5 \ub2e8\uc704\ub85c \uc0dd\uac01\ud558\ub77c"},{"location":"Concurrency/#reason_3","text":"thread \uc790\uccb4\ub294 \uad6c\ud604\uc5d0 \ub300\ud55c \uac1c\ub150\uc774\ub2e4. \uc774\ub294 \uae30\uacc4\uc5d0 \ub300\ud574\uc11c \uc0dd\uac01\ud558\ub294 \uac83\uc774\ub2e4. \uc791\uc5c5\uc740 \ud504\ub85c\uadf8\ub7a8((Application)\uc5d0 \ub300\ud574\uc11c \uc0dd\uac01\ud558\ub294 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc758 \uc0dd\uac01\uacfc \ub354 \uac00\uae4c\uc6b8 \uac83\uc774\uace0, \uc544\ub9c8\ub3c4 \ub2e4\ub978 \uc791\uc5c5\ub4e4\uacfc \ub3d9\uc2dc\uc801\uc77c \uac83\uc774\ub2e4. \uc751\uc6a9\uac1c\ub150\uc740 \ucd94\ub860\ud558\uae30\ub3c4 \uc27d\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_2","text":"void some_fun () { std :: string msg , msg2 ; std :: thread publisher ([ & ] { msg = \"Hello\" ; }); // bad: less expressive // and more error-prone auto pubtask = std :: async ([ & ] { msg2 = \"Hello\" ; }); // OK // ... publisher . join (); }","title":"Example"},{"location":"Concurrency/#note_2","text":"async() \ub97c \uc81c\uc678\ud558\uba74, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uae30\ub2a5\ub4e4\uc740 \uc800-\ub808\ubca8\uc5d0, \uae30\uacc4 \uc911\uc2ec\uc801(machine-oriented)\uc774\uace0, \uc2a4\ub808\ub4dc-\uc7a0\uae08 \ub808\ubca8\uc5d0 \uc704\uce58\ud55c\ub2e4. \uc774 \uae30\ub2a5\ub4e4\uc740 \ud544\uc218\uc801\uc774\uc9c0\ub9cc, \uc6b0\ub9ac\ub294 \uc0dd\uc0b0\uc131, \uc2e0\ub8b0\uc131, \uadf8\ub9ac\uace0 \uc131\ub2a5\uc744 \uc704\ud574\uc11c \ucd94\uc0c1\ud654\uc758 \uc218\uc900\uc744 \ub354 \ub192\uc77c \ud544\uc694\uac00 \uc788\ub2e4. \uc0c1\uc704 \ub808\ubca8\uc758, \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \uc911\uc2ec\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc5d0 \ub300\ud574\uc120 \ub17c\uc758\uc758 \uc5ec\uc9c0\uac00 \uc788\ub2e4. (\uac00\ub2a5\ud558\ub2e4\uba74 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c).","title":"Note"},{"location":"Concurrency/#enforcement_2","text":"???","title":"Enforcement"},{"location":"Concurrency/#cp8-volatile","text":"","title":"CP.8: \ub3d9\uae30\ud654\ub97c \uc704\ud574 volatile\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Concurrency/#reason_4","text":"C++ \uc5d0\uc120, \ub2e4\ub978 \uc5b8\uc5b4\uc640\ub294 \ub2e4\ub974\uac8c, volatile \uc774 \uc6d0\uc790\uc131\uacfc \uc2a4\ub808\ub4dc\uac04 \ub3d9\uae30\ud654\ub97c \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub610\ud55c volatile \uc740 \uba85\ub839\uc5b4 \uc7ac\ubc30\uce58(\ucef4\ud30c\uc77c\ub7ec\uc640 \ud558\ub4dc\uc6e8\uc5b4 \ubaa8\ub450)\ub97c \uc81c\ud55c\ud558\uc9c0\ub3c4 \uc54a\ub294\ub2e4. volatile \uc740 \ub3d9\uc2dc\uc131\uacfc \ubb34\uad00\ud558\ub2e4.","title":"Reason"},{"location":"Concurrency/#example-bad_3","text":"int free_slots = max_slots ; // current source of memory for objects Pool * use () { if ( int n = free_slots -- ) return & pool [ n ]; } \uc774 \ucf54\ub4dc\uc5d4 \ubb38\uc81c\uac00 \uc788\ub2e4: \ub2e8\uc77c \uc2a4\ub808\ub4dc \ud504\ub85c\uadf8\ub7a8\uc774\ub77c\uba74, \uc774 \ucf54\ub4dc\ub294 \uc544\ubb34\ub7f0 \ubb38\uc81c\uac00 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc \ub450 \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud55c\ub2e4\uba74, free_slots \uc5d0 \ub300\ud55c \uacbd\uc7c1 \uc0c1\ud0dc\uac00 \ubc1c\uc0dd\ud55c\ub2e4. \ub530\ub77c\uc11c \ub450 \uc2a4\ub808\ub4dc\ub294 \uac19\uc740 free_slots \uac12\uc744 \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub294 (\uba85\ubc31\ud558\uac8c) \uc798\ubabb\ub41c \uacb0\uacfc\ub85c \uc774\uc5b4\uc9c4\ub2e4. \ub2e4\ub978 \uc5b8\uc5b4\ub4e4\uc5d0 \uc775\uc219\ud55c \uc0ac\ub78c\ub4e4\uc740 \uc774 \ucf54\ub4dc\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc218\uc815\ud560 \uac83\uc774\ub2e4.: volatile int free_slots = max_slots ; // current source of memory for objects Pool * use () { if ( int n = free_slots -- ) return & pool [ n ]; } volatile \ub85c \ubc14\uafe8\uc9c0\ub9cc, \ub3d9\uae30\ud654\uc5d4 \uc544\ubb34\ub7f0 \uc601\ud5a5\uc774 \uc5c6\ub2e4. \uc774 \ucf54\ub4dc\uc5d4 \uc5ec\uc804\ud788 \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \uc874\uc7ac\ud55c\ub2e4! C++ \uc5d0\uc120, \ub3d9\uae30\ud654\ub97c \uc6d0\ud55c\ub2e4\uba74 atomic \ud0c0\uc785\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4: atomic < int > free_slots = max_slots ; // current source of memory for objects Pool * use () { if ( int n = free_slots -- ) return & pool [ n ]; } \uc774\uc81c -- \uc5f0\uc0b0\uc740 \uc6d0\uc790\uc801\uc774\ub2e4. \uc774\ub294 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \ub07c\uc5ec\ub4e4 \uc5ec\uc9c0\uac00 \uc788\ub294 \uc77d\uae30-\uc99d\uac00-\uc4f0\uae30 \uacfc\uc815\uacfc\ub294 \ub2e4\ub974\ub2e4.","title":"Example, bad:"},{"location":"Concurrency/#alternative","text":"\ub2e4\ub978 \uc5b8\uc5b4\uc5d0\uc11c volatile \uc744 \uc0ac\uc6a9\ud588\ub2e4\uba74, C++\uc5d0\uc120 atomic \uc744 \uc0ac\uc6a9\ud558\ub77c. \ub354 \ubcf5\uc7a1\ud55c \uacbd\uc6b0\ub77c\uba74 mutex \ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Alternative"},{"location":"Concurrency/#see-also","text":"volatile \uc758 \uc801\uc808\ud55c \uc0ac\uc6a9","title":"See also"},{"location":"Concurrency/#cp9-tool","text":"\uacbd\ud5d8\uc774 \ubcf4\uc5ec\uc8fc\ub4ef, \ubcd1\ud589 \uc2e4\ud589 \ucf54\ub4dc\ub294 \uc62c\ubc14\ub974\uac8c \uc791\uc131\ud558\uae30\uac00 \uadf9\ud788 \uc5b4\ub824\uc6b0\uba70, \ucef4\ud30c\uc77c \uc2dc\uc810 \uc810\uac80, \uc2e4\ud589 \uc2dc\uc810 \uc810\uac80 \ubc0f \ud14c\uc2a4\ud305\uc744 \ud1b5\ud55c \ubcd1\ud589 \uc2e4\ud589 \ubb38\uc81c\ub97c \uac80\ucd9c\ud558\ub294 \uac83\uc774 \uc21c\ucc28\uc801\uc778 \ucf54\ub4dc\uc5d0\uc11c \uc77c\ubc18\uc801\uc778 \ubb38\uc81c\uc810\uc744 \ucc3e\ub294 \uac83\ub9cc\ud07c \ud6a8\uacfc\uc801\uc774\uc9c0 \uc54a\ub2e4. \ubbf8\ubb18\ud55c \ubcd1\ud589 \uc2e4\ud589 \uc624\ub958\ub4e4\uc740 \uba54\ubaa8\ub9ac \uc190\uc0c1\uc774\ub098 \uad50\ucc29 \uc0c1\ud0dc\uc640 \uac19\uc740 \uc2ec\uac01\ud55c \ud3d0\ud574\ub97c \uac00\uc838\uc62c \uc218 \uc788\ub2e4.","title":"CP.9: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0, \ub3c4\uad6c (tool) \ub97c \uc774\uc6a9\ud558\uc5ec \uc790\uc2e0\uc758 \ubcd1\ud589 \uc2e4\ud589 \ucf54\ub4dc\ub97c \uac80\uc99d\ud558\ub77c"},{"location":"Concurrency/#example_3","text":"???","title":"Example"},{"location":"Concurrency/#note_3","text":"\uc2a4\ub808\ub4dc \uc548\uc804\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4dc\ub294 \uac83\uc740 \uc219\ub2ec\ub41c \uac1c\ubc1c\uc790\ub4e4\uc870\ucc28 \uc885\uc885 \uace4\ub780\ud558\uac8c \ub9cc\ub4dc\ub294 \ub9cc\ub9cc\ucc2e\uc740 \uc791\uc5c5\uc774\ub2e4: \uc801\uc808\ud55c \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc774\ub7ec\ud55c \uc704\ud5d8\uc744 \ub35c \uc218 \uc788\ub294 \uc911\uc694\ud55c \uc804\ub7b5\uc774\ub2e4. \uc774\ub7ec\ud55c \ub3c4\uad6c\ub4e4\uc740 \uc0c1\uc6a9 / \uc624\ud508\uc18c\uc2a4 \uc640 \uc5f0\uad6c\uc6a9 / \uc0dd\uc0b0\uc6a9\uc744 \uac00\ub9ac\uc9c0 \uc54a\uace0 \ub2e4\uc591\ud55c \ud615\ud0dc\uc758 \uc218\ub9ce\uc740 \uc885\ub958\uac00 \uc81c\uacf5\ub418\uace0 \uc788\ub2e4. \uc548\ud0c0\uae5d\uac8c\ub3c4, \uac01\uc790\uc758 \uc694\uad6c \uc0ac\ud56d\uacfc \uc81c\uc57d\uc0ac\ud56d\uc774 \ubaa8\ub450 \ub2e4\ub974\ubbc0\ub85c, \ud2b9\uc815 \ub3c4\uad6c\ub97c \ucd94\ucc9c\ud558\uae30\ub294 \uc5b4\ub824\uc6b0\ub098, \uba87 \uac00\uc9c0\ub97c \uac70\ub860\ud560 \uc218\ub294 \uc788\ub2e4: \uc815\uc801 \uc9c0\uce68 \ub3c4\uad6c: clang \uacfc GCC \uc758 \uba87\uba87 \uc9c0\ub09c \ubc84\uc804\ub4e4\uc740 \uc2a4\ub808\ub4dc \uc548\uc804\uc758 \ud2b9\uc131\uacfc \uad00\ub828\ub41c \uba87 \uac00\uc9c0 \uc815\uc801 \uc8fc\ud574\ubb38 (static annotation) \uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub7ec\ud55c \uae30\ubc95\uc758 \uc77c\uad00\uc131 \uc788\ub294 \uc0ac\uc6a9\uc740 \ub2e4\uc591\ud55c \uc885\ub958\uc758 \uc2a4\ub808\ub4dc \uc548\uc804 \uad00\ub828 \uc624\ub958\ub97c \ucef4\ud30c\uc77c \uc2dc\uc810 \uc624\ub958\ub85c \ub9cc\ub4e4\uc5b4\uc900\ub2e4. \uc774\ub7ec\ud55c \uc8fc\ud574\ubb38\ub4e4\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uc9c0\uc5ed\uc801\uc774\uba70 (\ud2b9\uc815 \uba64\ubc84 \ubcc0\uc218\ub97c \ud2b9\uc815 \ubba4\ud14d\uc2a4\ub97c \ud1b5\ud574 \ubcf4\ud638\ub418\uac8c \ud45c\uc2dc\ud568\uc73c\ub85c\uc368), \ub300\uac1c\uc758 \uacbd\uc6b0 \uc27d\uac8c \ubc30\uc6b8 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub098, \ub2e4\ub978 \ub9ce\uc740 \uc815\uc801 \ub3c4\uad6c\ub4e4\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c, \ubcf8\ub514 \uac80\ucd9c\ub418\uc5b4\uc57c \ud558\ub098 \ud5c8\uc6a9 \ucc98\ub9ac\ub418\ub294 \uc798\ubabb\ub41c \uac70\uc9d3 \uc74c\uc131 (false negative) \uacb0\uacfc\ub97c \uc885\uc885 \uc81c\ucd9c\ud560 \uc218\ub3c4 \uc788\ub2e4. \ub3d9\uc801 \uc9c0\uce68 \ub3c4\uad6c: Clang \uc758 Thread Sanitizer (aka TSAN) \uc740 \uac15\ub825\ud55c \ub3d9\uc801 \ub3c4\uad6c\uc758 \ud55c \uc608\uc774\ub2e4: \uc774 \ub3c4\uad6c\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \uba54\ubaa8\ub9ac \uc811\uadfc\uc744 \uc7a5\ubd80\uc5d0 \uae30\ub85d\ud560 \uc218 \uc788\ub3c4\ub85d \ube4c\ub4dc \ubc0f \uc2e4\ud589\uc744 \ubcc0\uacbd\ud558\uc5ec, \ud574\ub2f9 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc2dc \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \ud655\uc2e4\ud788 \uac80\ucd9c\ud574 \ub0bc \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. \uc774\ub97c \uc704\ud574\uc11c\ub294 \uba54\ubaa8\ub9ac \uc0ac\uc6a9\ub791 (\ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 5-10\ubc30) \uacfc CPU \uc131\ub2a5 \uc800\ud558 (2-20\ubc30) \ub97c \ube44\uc6a9\uc73c\ub85c \uc9c0\ubd88\ud574\uc57c \ud55c\ub2e4. \uc774\ub7ec\ud55c \ub3d9\uc801 \ub3c4\uad6c\ub4e4\uc740 \ud1b5\ud569 \ud14c\uc2a4\ud2b8\ub098 \uce74\ub098\ub9ac\uc544 \ud14c\uc2a4\ud2b8 \ud639\uc740 \ubcf5\uc218\uc758 \uc2a4\ub808\ub4dc\uc0c1\uc5d0\uc11c \uc791\ub3d9\ud558\ub294 \ub2e8\uc704 \ud14c\uc2a4\ud2b8\uc5d0 \uc801\uc6a9\ud558\uae30 \uac00\uc7a5 \uc54c\ub9de\ub2e4. \uc791\uc5c5\ub7c9\uc774 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4: TSAN \uc774 \uac80\ucd9c\ud574 \ub0b8 \ubb38\uc81c\uc810\uc740 \uac70\uc758 \ud56d\uc0c1 \uc2e4\uc9c8\uc801\uc778 \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \uc815\ud655\ud558\uac8c \uc9da\uc5b4 \ub0b4\uc9c0\ub9cc, \ud574\ub2f9 \uc2e4\ud589 \uacfc\uc815 \uc911\uc5d0 \ubc1c\uacac\ub41c \ubb38\uc81c\ub9cc\uc774 \uac80\ucd9c \uac00\ub2a5\ud558\ub2e4.","title":"Note"},{"location":"Concurrency/#enforcement_3","text":"\ud2b9\uc815 \ud504\ub85c\uadf8\ub7a8\ub4e4\uc5d0 \uc788\uc5b4\uc11c \uc5b4\ub5a4 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud560 \uac83\uc778\uc9c0 \uace0\ub974\ub294 \uac83\uc740 \ud574\ub2f9 \ud504\ub85c\uadf8\ub7a8 \uc81c\uc791\uc790\uc5d0\uac8c \ub2ec\ub824 \uc788\ub2e4.","title":"Enforcement"},{"location":"Concurrency/#cpcon","text":"\uc774 Section\uc740 \ub2e4\uc218\uc758 \uc2a4\ub808\ub4dc\ub4e4\uc774 \uacf5\uc720 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud574 \ud1b5\uc2e0\ud558\ub294 \ubd80\ubd84\uc5d0 \ub300\ud574 \ub2e4\ub8f9\ub2c8\ub2e4. \ubcd1\ub82c \uc54c\uace0\ub9ac\uc998\uc740 parallelism \ub97c \ucc38\uc870\ud558\uc138\uc694 \uba85\uc2dc\uc801\uc778 \uacf5\uc720\uc5c6\ub294 \uc791\uc5c5\uac04 \ud1b5\uc2e0\ubc29\ubc95\uc740 messaging \uc744 \ucc38\uc870\ud558\uc138\uc694 For vector parallel code, see vectorization \ubb34\uc7a0\uae08 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 lock free \ub97c \ucc38\uc870\ud558\uc138\uc694 \ub3d9\uc2dc\uc131 \uaddc\uce59 \uc694\uc57d: CP.20: lock() / unlock() \ub300\uc2e0 RAII\ub97c \uc0ac\uc6a9\ud558\ub77c CP.21: \ubcf5\uc218\uc758 mutex \ud68d\ub4dd\uc744 \uc704\ud574\uc11c\ub294 std::lock() \uc774\ub098 std::scoped_lock \uc744 \uc0ac\uc6a9\ud558\ub77c CP.22: lock \uc744 \uc0ac\uc6a9 \uc911\uc77c \ub54c\ub294 \uc54c \uc218 \uc5c6\ub294 \ucf54\ub4dc\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9d0\uc544\ub77c(\uc608: callback) CP.23: join \ud558\ub294 thread \ub97c \uc720\ud6a8\ubc94\uc704 \uc548\uc758 \ucee8\ud14c\uc774\ub108\ucc98\ub7fc \uc0dd\uac01\ud558\ub77c CP.24: thread \ub97c \uc804\uc5ed \ucee8\ud14c\uc774\ub108\ucc98\ub7fc \uc0dd\uac01\ud558\ub77c CP.25: std::thread \ubcf4\ub2e4\ub294 gsl::joining_thread \uc0ac\uc6a9\uc744 \uc6b0\uc120\ud558\uc5ec \uace0\ub824\ud558\ub77c CP.26: \uc2a4\ub808\ub4dc\ub97c detach() \ud558\uc9c0 \ub9d0\uc544\ub77c CP.31: \uc2a4\ub808\ub4dc\ub4e4 \uac04\uc758 \uc791\uc740 \ub370\uc774\ud130 \uc804\ub2ec\uc740 \ucc38\uc870\ub098 \ud3ec\uc778\ud130\ubcf4\ub2e4\ub294 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\ub77c CP.32: \uad00\ub828 \uc5c6\ub294 thread \uac04\uc758 \uc18c\uc720\uad8c \uacf5\uc720\ub294 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c CP.40: \ubb38\ub9e5 \uad50\ud658\uc744 \ucd5c\uc18c\ud654\ud558\ub77c CP.41: \uc2a4\ub808\ub4dc \uc0dd\uc131\uacfc \uc18c\uba78\uc744 \ucd5c\uc18c\ud654\ud558\ub77c CP.42: \uc870\uac74 \uc5c6\uc774 wait \ud558\uc9c0 \ub9d0\uc544\ub77c CP.43: \uc784\uacc4 \uc601\uc5ed(Critical Section)\uc5d0\uc11c\uc758 \uc2dc\uac04\uc744 \ucd5c\uc18c\ud654\ud558\ub77c CP.44: lock_guard \uacfc unique_lock \uc5d0\ub294 \uc774\ub984\uc744 \ubd99\uc5ec\ub77c CP.50: mutex \ub97c \ubcf4\ud638(guard) \ud574\uc57c \ud558\ub294 \ub370\uc774\ud130\uc640 \ud568\uaed8 \uc120\uc5b8\ud558\ub77c. \uac00\ub2a5\ud55c \uacbd\uc6b0\uc5d0\ub294 synchronized_value<T> \ub97c \uc0ac\uc6a9\ud558\ub77c ??? \uc5b8\uc81c \uc2a4\ud540\ub77d(spinlock)\uc744 \uc0ac\uc6a9\ud558\ub294\uac00 ??? \uc5b8\uc81c try_lock() \uc744 \uc0ac\uc6a9\ud558\ub294\uac00 ??? \uc5b8\uc81c unique_lock \ubcf4\ub2e4 lock_guard \ub97c \uc4f0\ub294\uac00 ??? Time multiplexing ??? \uc5b8\uc81c/\uc5b4\ub5bb\uac8c new thread \ub97c \uc0ac\uc6a9\ud558\ub294\uac00","title":"CP.con: \ub3d9\uc2dc\uc131"},{"location":"Concurrency/#cp20-lockunlock-raii","text":"","title":"CP.20: lock()/unlock() \ub300\uc2e0 RAII\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_5","text":"\uc7a0\uae08\uc744 \ud574\uc81c\ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c \uc778\ud55c \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example-bad_4","text":"mutex mtx ; void do_stuff () { mtx . lock (); // ... do stuff ... mtx . unlock (); } \uc5bc\ub9c8 \ud6c4 \ub610\ub294 \ub098\uc911\uc5d0, \ub204\uad70\uac00 mtx.unlock() \uc744 \uc78a\uc5b4\ubc84\ub9b0\ub2e4. \uadf8\ub9ac\uace4 return \uc744 ... do stuff ... \uc5d0 \ubd99\uc774\uac70\ub098, \uc608\uc678\ub098 \ubb34\uc5b8\uac00\ub97c \ub358\uc9c4\ub2e4. mutex mtx ; void do_stuff () { unique_lock < mutex > lck { mtx }; // ... do stuff ... }","title":"Example, bad"},{"location":"Concurrency/#enforcement_4","text":"lock() \uacfc unlock() \uc758 \ud638\ucd9c\uc5d0 \ud45c\uc2dd\uc744 \ub0a8\uaca8\ub77c ???","title":"Enforcement"},{"location":"Concurrency/#cp21-mutex-stdlock-stdscoped_lock","text":"","title":"CP.21: \ubcf5\uc218\uc758 mutex \ud68d\ub4dd\uc744 \uc704\ud574\uc11c\ub294 std::lock() \uc774\ub098 std::scoped_lock \uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_6","text":"\ubcf5\uc218\uc758 mutex \ub85c \uc778\ud55c \uad50\ucc29\uc0c1\ud0dc\ub97c \ubc29\uc9c0\ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_4","text":"\ub2e4\uc74c \ucf54\ub4dc\ub294 \uad50\ucc29 \uc0c1\ud0dc\ub97c \uc720\ubc1c\ud55c\ub2e4: // thread 1 lock_guard < mutex > lck1 ( m1 ); lock_guard < mutex > lck2 ( m2 ); // thread 2 lock_guard < mutex > lck2 ( m2 ); lock_guard < mutex > lck1 ( m1 ); \ub300\uc2e0\ud558\uc5ec lock() \uc744 \uc0ac\uc6a9\ud558\ub77c : // thread 1 lock ( m1 , m2 ); lock_guard < mutex > lck1 ( m1 , adopt_lock ); lock_guard < mutex > lck2 ( m2 , adopt_lock ); // thread 2 lock ( m2 , m1 ); lock_guard < mutex > lck2 ( m2 , adopt_lock ); lock_guard < mutex > lck1 ( m1 , adopt_lock ); \ud639\uc740 (\ub354 \uc88b\uc740 \ubc29\ubc95\uc774\uc9c0\ub9cc, C++17 \uc5d0\uc11c\ub9cc \uac00\ub2a5\ud55c): // thread 1 scoped_lock < mutex , mutex > lck1 ( m1 , m2 ); // thread 2 scoped_lock < mutex , mutex > lck2 ( m2 , m1 ); \uc704 \ucf54\ub4dc\uc5d0\uc11c, thread1 \uacfc thread2 \uc758 \uc791\uc131\uc790\ub4e4\uc740 \uc5ec\uc804\ud788 mutex \ub4e4\uc758 \uc21c\uc11c\uc5d0 \ud569\uc758\ud558\uc9c0\ub294 \ubabb\ud588\uc9c0\ub9cc, \uadf8 \uc21c\uc11c\ub294 \ub354 \uc774\uc0c1 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"Example"},{"location":"Concurrency/#note_4","text":"\uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294, mutex \ub4e4\uc774 \uc11c\ub85c \uac04\uc758 \uc758\ub3c4\ub41c \uad00\uacc4\ub098 \uc758\ub3c4\ub41c \ud68d\ub4dd \uc21c\uc11c\ub97c \ud504\ub85c\uadf8\ub798\uba38\uc5d0\uac8c \uc27d\uac8c \uc0c1\uae30\uc2dc\ud0ac \uc218 \uc788\ub3c4\ub85d \uba85\uba85\ub3fc \uc788\ub294 \uacbd\uc6b0\uac00 \ub4dc\ubb3c\ub2e4. \ub610\ud55c \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294, mutex \ub4e4\uc774 \ud3b8\ub9ac\ud558\uac8c\ub3c4 \ud56d\uc0c1 \uc5f0\uc18d\ub41c \uc904\uc5d0 \ud68d\ub4dd\uc774 \uc774\ub8e8\uc5b4\uc9c0\uc9c0\ub294 \uc54a\ub294\ub2e4. C++17 \uc5d0\uc11c\ub294 \uac04\ub2e8\ud788 \uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud558\uc5ec lock_guard lck1 ( m1 , adopt_lock ); mutex \ud0c0\uc785\uc744 \uc790\ub3d9\uc73c\ub85c \ucd94\ub860\ub418\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Concurrency/#enforcement_5","text":"\ubcf5\uc218\uc758 mutex \ud68d\ub4dd\uc744 \uac80\ucd9c\ud574 \ub0b4\ub77c. \uc77c\ubc18\uc801\uc73c\ub85c \uc774\ub294 \ud310\ubcc4\uc774 \uc5b4\ub824\uc6b4 \uacbd\uc6b0\uac00 \ub9ce\uc9c0\ub9cc, \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \uac04\ub2e8\ud55c (\uc0c1\ub2e8\uc758 \uc608\uc81c\uc640 \uac19\uc740) \uc0ac\ub840\ub97c \uc7a1\uc544\ub0b4\ub294 \uac83\uc740 \uc5b4\ub835\uc9c0 \uc54a\ub2e4.","title":"Enforcement"},{"location":"Concurrency/#cp22-lock-callback","text":"","title":"CP.22: lock \uc744 \uc0ac\uc6a9 \uc911\uc77c \ub54c\ub294 \uc54c \uc218 \uc5c6\ub294 \ucf54\ub4dc\ub97c \ud638\ucd9c\ud558\uc9c0 \ub9d0\uc544\ub77c (\uc608: callback)"},{"location":"Concurrency/#reason_7","text":"\uc5b4\ub5a4 \ub3d9\uc791\uc744 \ud560\uc9c0 \ud655\uc2e4\uce58 \uc54a\uc740 \ucf54\ub4dc\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc740 \uad50\ucc29 \uc0c1\ud0dc\ub97c \uc720\ubc1c\ud560 \uc704\ud5d8\uc744 \uac10\uc218\ud558\ub294 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_5","text":"void do_this ( Foo * p ) { lock_guard < mutex > lck { my_mutex }; // ... do something ... p -> act ( my_data ); // ... } \ub9cc\uc57d \ub2f9\uc2e0\uc774 Foo::act \uac00 \uc5b4\ub5a4 \uc791\uc5c5\uc744 \ud558\ub294\uc9c0 \ubaa8\ub978\ub2e4\uba74 (\ud574\ub2f9 \ud568\uc218\ub294 \uc544\uc9c1 \uc791\uc131\ub418\uc9c0 \uc54a\uc740 \ud30c\uc0dd \ud074\ub798\uc2a4\uc758 \uba64\ubc84\ub97c \ud638\ucd9c\ud558\ub294 \uac00\uc0c1 \ud568\uc218\uc77c \uc218 \uc788\ub2e4), do_this \ud568\uc218\ub97c (\uc7ac\uadc0\uc801\uc73c\ub85c) \ubd80\ub97c \uc218\ub3c4 \uc788\uc5b4 my_mutex \uc5d0 \uad50\ucc29\uc0c1\ud0dc\ub97c \uc720\ubc1c\ud560 \uc218 \uc788\ub2e4. \uc544\ub2c8\uba74 \ud574\ub2f9 \ud568\uc218\uac00 \ub2e4\ub978 \ubba4\ud14d\uc2a4\ub97c \uc7a0\uadf8\uace0 \uc801\uc808\ud55c \uc2dc\uac04 \uc548\uc5d0 \ud574\uc81c\ub97c \ud558\uc9c0 \uc54a\uc544, do_this \ub97c \ud638\ucd9c\ud558\ub294 \ub2e4\ub978 \ucf54\ub4dc\uc5d0 \uc788\uc5b4 \uc9c0\uc5f0\uc744 \uc720\ubc1c\ud560 \uc218\ub3c4 \uc788\ub2e4.","title":"Example"},{"location":"Concurrency/#example_6","text":"\"\ubbf8\uc9c0\uc758 \ucf54\ub4dc \ud638\ucd9c\" \ubb38\uc81c\uc758 \ud754\ud55c \uc0ac\ub840\ub294 \ub3d9\uc77c\ud55c \uac1d\uccb4\uc5d0 \ub300\ud574 \uc7a0\uae08 \uad8c\ud55c\uc744 \uc5bb\uc73c\ub824 \ud558\ub294 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uacbd\uc6b0\uc774\ub2e4. \uc774\ub7ec\ud55c \ud638\ucd9c \ubb38\uc81c\ub294 recursive_mutex \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uc885\uc885 \ud574\uacb0\uc774 \uac00\ub2a5\ud558\ub2e4. \uc608\ub97c \ub4e4\uc5b4: recursive_mutex my_mutex ; template < typename Action > void do_something ( Action f ) { unique_lock < recursive_mutex > lck { my_mutex }; // ... do something ... f ( this ); // f will do something to *this // ... } \ub9cc\uc57d, \uc544\ub9c8\ub3c4 \uadf8\ub7ec\ud558\uaca0\uc9c0\ub9cc, f() \uac00 *this \uc5d0 \ub300\ud574\uc11c \uc5b4\ub5a4 \uc791\uc5c5\uc744 \uc218\ud589\ud55c\ub2e4\uace0 \ud558\uba74, \ud574\ub2f9 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uae30 \uc804\uc5d0 \uac1d\uccb4\uc758 \ubd88\ubcc0 \uc870\uac74 (invariant) \uc774 \uc720\uc9c0\ub418\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud55c\ub2e4.","title":"Example"},{"location":"Concurrency/#enforcement_6","text":"\uc7ac\uadc0 \uc6a9\uc774 \uc544\ub2cc mutex \ub97c \uc7a0\uadfc \ud6c4 \ud638\ucd9c\ud558\ub294 \uac00\uc0c1 \ud568\uc218 \ud638\ucd9c\uc744 \uc9c0\uc801\ud558\ub77c \uc7ac\uadc0 \uc6a9\uc774 \uc544\ub2cc mutex \ub97c \uc7a0\uadfc \ud6c4 \ud638\ucd9c\ud558\ub294 \ucf5c\ubc31 \ud568\uc218 \ud638\ucd9c\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Concurrency/#cp23-join-thread","text":"","title":"CP.23: join \ud558\ub294 thread\ub97c \uc720\ud6a8\ubc94\uc704 \uc548\uc758 \ucee8\ud14c\uc774\ub108\ucc98\ub7fc \uc0dd\uac01\ud558\ub77c"},{"location":"Concurrency/#reason_8","text":"\ud3ec\uc778\ud130 \uc0ac\uc6a9\uc758 \uc548\uc804\uc131\uacfc \uba54\ubaa8\ub9ac \ub204\uc218 \ubc29\uc9c0\ub97c \uc704\ud558\uc5ec, \uc5b4\ub5a4 \ud3ec\uc778\ud130\ub4e4\uc774 thread \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294\uc9c0 \uc8fc\uc758 \uae4a\uac8c \uc0b4\ud3b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d thread \uac00 join \ud55c\ub2e4\uace0 \ud558\uba74, thread \uc758 \uc720\ud6a8\ubc94\uc704 \ubc0f \ud3ec\ud568\ub418\ub294 \uc720\ud6a8\ubc94\uc704 \ub0b4\uc758 \uac1d\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uc548\uc804\ud558\uac8c \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_7","text":"void f ( int * p ) { // ... * p = 99 ; // ... } int glob = 33 ; void some_fct ( int * p ) { int x = 77 ; joining_thread t0 ( f , & x ); // OK joining_thread t1 ( f , p ); // OK joining_thread t2 ( f , & glob ); // OK auto q = make_unique < int > ( 99 ); joining_thread t3 ( f , q . get ()); // OK // ... } gsl::joining_thread \ub294 join \ud558\ub294 \uc18c\uba78\uc790\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70 detached() \ub420 \uc218 \uc5c6\ub294 std::thread \uc774\ub2e4. \"OK\" \ub77c\uace0 \ud568\uc740 thread \uac00 \uc804\ub2ec\ubc1b\uc740 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud55c, \ud574\ub2f9 \uac1d\uccb4\uac00 \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0 (\"\uc0b4\uc544\") \uc788\uc744 \uac83\uc784\uc744 \uc758\ubbf8\ud55c\ub2e4. thread \ub4e4\uc774 \ubcd1\ud589 \uc2e4\ud589\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uc774 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc874\uc18d \uae30\uac04\uc774\ub098 \uc18c\uc720\uad8c \uad00\ub828 \ubb38\uc81c\uc5d0 \uc788\uc5b4\uc11c \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\ub294\ub2e4; \uc774 thread \ub4e4\uc740 \ub2e8\uc21c\ud788 some_fct \ub85c\ubd80\ud130 \ud638\ucd9c\ub418\ub294 \ud568\uc218 \uac1d\uccb4\ub4e4\ub85c \ubcfc \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Concurrency/#enforcement_7","text":"joining_thread \uac00 detach() \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud655\uc778\ud558\ub77c. \ud655\uc778\uc774 \ub05d\ub09c \ud6c4\uc5d0\ub294, (\uc9c0\uc5ed \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c) \ud1b5\uc0c1\uc801\uc778 \uc874\uc18d \uae30\uac04\uacfc \uc18c\uc720\uad8c \uc801\uc6a9 \ubc29\uc2dd\uc744 \ub530\ub978\ub2e4.","title":"Enforcement"},{"location":"Concurrency/#cp24-thread","text":"","title":"CP.24: thread\ub97c \uc804\uc5ed \ucee8\ud14c\uc774\ub108\ucc98\ub7fc \uc0dd\uac01\ud558\ub77c"},{"location":"Concurrency/#reason_9","text":"\ud3ec\uc778\ud130\ub97c \uc548\uc804\ud558\uac8c \ub0a8\uaca8\ub450\uace0 \ub204\uc218(leak)\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574\uc120, \uc5b4\ub5a4 \ud3ec\uc778\ud130\ub4e4\uc774 thread \uc5d0 \uc758\ud574\uc11c \uc0ac\uc6a9\ub418\ub294\uc9c0 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \ub9cc\uc57d thread \uac00 detach\ub418\uc5c8\ub2e4\uba74, \uc815\uc801 \uac1d\uccb4 \ub610\ub294 \uc790\uc720 \uc601\uc5ed\uc5d0 \uc788\ub294 \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub9cc \uc548\uc804\ud558\uac8c \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_8","text":"void f ( int * p ) { // ... * p = 99 ; // ... } int glob = 33 ; void some_fct ( int * p ) { int x = 77 ; std :: thread t0 ( f , & x ); // bad std :: thread t1 ( f , p ); // bad std :: thread t2 ( f , & glob ); // OK auto q = make_unique < int > ( 99 ); std :: thread t3 ( f , q . get ()); // bad // ... t0 . detach (); t1 . detach (); t2 . detach (); t3 . detach (); // ... } \"OK\" \ub77c\uace0 \ud568\uc740 thread \uac00 \uc804\ub2ec\ubc1b\uc740 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ud55c, \ud574\ub2f9 \uac1d\uccb4\uac00 \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0 (\"\uc0b4\uc544\") \uc788\uc744 \uac83\uc784\uc744 \uc758\ubbf8\ud55c\ub2e4. \"bad\" \ub77c\uace0 \ud568\uc740 thread \uac00 \uc804\ub2ec\ubc1b\uc740 \ud3ec\uc778\ud130\uac00 \uac00\ub9ac\ud0a4\ub294 \uac1d\uccb4\uac00 \uc18c\uba78\ub41c \uc774\ud6c4\uc5d0 \ud574\ub2f9 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4. thread \ub4e4\uc774 \ubcd1\ud589 \uc2e4\ud589\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uc774 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc874\uc18d \uae30\uac04\uc774\ub098 \uc18c\uc720\uad8c \uad00\ub828 \ubb38\uc81c\uc5d0 \uc788\uc5b4\uc11c \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\ub294\ub2e4; \uc774 thread \ub4e4\uc740 \ub2e8\uc21c\ud788 some_fct \ub85c\ubd80\ud130 \ud638\ucd9c\ub418\ub294 \ud568\uc218 \uac1d\uccb4\ub4e4\ub85c \ubcfc \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Concurrency/#note_5","text":"\uc815\uc801 \uc800\uc7a5\uc18c \uc874\uc18d \uae30\uac04\uc744 \uac00\uc9c4 \uac1d\uccb4\ub4e4\ub3c4 detach \ub41c \uc2a4\ub808\ub4dc\uc5d0\uc11c \uc0ac\uc6a9 \uc2dc \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4: \uc2a4\ub808\ub4dc\uac00 \ud504\ub85c\uadf8\ub7a8\uc758 \uc885\ub8cc \uc2dc\uc810\uae4c\uc9c0 \uc218\ud589\ub41c\ub2e4\uba74, \uc815\uc801 \uc800\uc7a5\uc18c \uc874\uc18d \uae30\uac04\uc744 \uac00\uc9c4 \uac1d\uccb4\ub4e4\uc758 \uc18c\uba78 \uc2dc\uc810\uae4c\uc9c0 \ubcd1\ud589 \uc2e4\ud589\ub420 \uc218 \uc788\uc73c\uba70, \uadf8\ub85c \uc778\ud574 \ud574\ub2f9 \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c \uc811\uadfc\uc5d0 \uc788\uc5b4 \uacbd\uc7c1\uc774 \uc720\ubc1c\ub420 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Concurrency/#note_6","text":"\uc774 \uaddc\uce59\uc740 don't detach() and use gsl::joining_thread \ub97c \ub530\ub978\ub2e4\uba74 \ubd88\ud544\uc694\ud558\ub2e4. \uadf8\ub7ec\ub098, \ud574\ub2f9 \uc9c0\uce68\uc744 \ub530\ub974\uae30 \uc704\ud574\uc11c \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\ub294 \uac83\uc774 \uc5b4\ub835\uac70\ub098 \ud639\uc740 \uc11c\ub4dc\ud30c\ud2f0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc544\uc608 \ubd88\uac00\ub2a5\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub7ec\ud55c \uacbd\uc6b0\uc5d0\ub294, \uc774 \uaddc\uce59\uc774 \uc874\uc18d\uae30\uac04 \ubc0f \ud0c0\uc785 \uc548\uc804\uc5d0 \ud544\uc218\uc801\uc77c \uc218 \uc788\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c detach() \uac00 \ud2b9\uc815 thread \uc5d0 \ub300\ud574 \uc218\ud589\ub418\ub294\uc9c0\ub294 \ud310\ubcc4\uc774 \uc5b4\ub824\uc6b4 \uacbd\uc6b0\uac00 \ub9ce\uc9c0\ub9cc, \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \uac04\ub2e8\ud55c \uc0ac\ub840\ub294 \uc190\uc27d\uac8c \uac80\ucd9c\ud574 \ub0bc \uc218 \uc788\ub2e4. \ub9cc\uc57d \ud2b9\uc815 thread \uac00 detach() \ud558\uc9c0 \uc54a\uc74c\uc744 \uc785\uc99d\ud560 \uc218 \uc5c6\ub2e4\uba74, \ud574\ub2f9 \uc2a4\ub808\ub4dc\ub294 detach() \ud558\uba70 \ucd5c\ucd08 \uc0dd\uc131\ub41c \uc720\ud6a8 \ubc94\uc704\ub97c \ub118\uc5b4\uc11c\uae4c\uc9c0 \uc720\uc9c0\ub420 \uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud574\uc57c \ud55c\ub2e4; \ud655\uc778\uc774 \ub05d\ub09c \ud6c4\uc5d0\ub294, (\uc804\uc5ed \uac1d\uccb4\ub4e4\uc5d0 \ub300\ud55c) \ud1b5\uc0c1\uc801\uc778 \uc874\uc18d\uae30\uac04\uacfc \uc18c\uc720\uad8c \uc801\uc6a9 \ubc29\uc2dd\uc744 \ub530\ub978\ub2e4.","title":"Note"},{"location":"Concurrency/#enforcement_8","text":"\uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc744 detach() \ud560\uc9c0\ub3c4 \ubaa8\ub974\ub294 \uc2a4\ub808\ub4dc\uc5d0 \uc804\ub2ec\ud558\ub294 \uc2dc\ub3c4\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Concurrency/#cp25-stdthread-gsljoining_thread","text":"","title":"CP.25: std::thread \ubcf4\ub2e4\ub294 gsl::joining_thread \uc0ac\uc6a9\uc744 \uc6b0\uc120\ud558\uc5ec \uace0\ub824\ud558\ub77c"},{"location":"Concurrency/#reason_10","text":"joining_thread \ub294 \uc720\ud6a8 \ubc94\uc704\uac00 \ub05d\ub0a0 \ub54c join \ud55c\ub2e4. Detach\ud55c \uc2a4\ub808\ub4dc\ub4e4\uc740 \uad00\ucc30(monitor)\ud558\uae30\uac00 \uc5b4\ub835\ub2e4. (\uc7a0\uc7ac\uc801\uc73c\ub85c detach\ud560 \uc2a4\ub808\ub4dc\ub97c \ud3ec\ud568\ud574\uc11c) \uc774 \uc2a4\ub808\ub4dc\ub4e4\uc5d0\uc11c \uc624\ub958\uac00 \uc5c6\ub2e4\uace0 \ud655\uc2e0\ud558\uae30 \uc5b4\ub835\ub2e4.","title":"Reason"},{"location":"Concurrency/#example-bad_5","text":"void f () { std :: cout << \"Hello \" ; } struct F { void operator ()() { std :: cout << \"parallel world \" ; } }; int main () { std :: thread t1 { f }; // f() executes in separate thread std :: thread t2 { F ()}; // F()() executes in separate thread } // spot the bugs","title":"Example, bad"},{"location":"Concurrency/#example_9","text":"void f () { std :: cout << \"Hello \" ; } struct F { void operator ()() { std :: cout << \"parallel world \" ; } }; int main () { std :: thread t1 { f }; // f() executes in separate thread std :: thread t2 { F ()}; // F()() executes in separate thread t1 . join (); t2 . join (); } // one bad bug left","title":"Example"},{"location":"Concurrency/#example-bad_6","text":"join() \ud639\uc740 detach() \ud560\uc9c0\ub97c \uacb0\uc815\ud558\ub294 \ucf54\ub4dc\ub294 \ub9e4\uc6b0 \ubcf5\uc7a1\ud560 \uc218 \uc788\uc73c\uba70 \uc2ec\uc9c0\uc5b4\ub294 \ud574\ub2f9 \uc2a4\ub808\ub4dc\uac00 \ud638\ucd9c\ud558\ub294 \ud568\uc218 \ub0b4\uc5d0\uc11c \uacb0\uc815\ub418\uac70\ub098 \ud574\ub2f9 \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ud55c \ud568\uc218\uac00 \ud638\ucd9c\ud558\ub294 \ub2e4\ub978 \ud568\uc218\uc5d0 \uc758\ud574\uc11c \uacb0\uc815\ub420 \uc218\ub3c4 \uc788\ub2e4: void tricky ( thread * t , int n ) { // ... if ( is_odd ( n )) t -> detach (); // ... } void use ( int n ) { thread t { tricky , this , n }; // ... // ... should I join here? ... } \uc774\ub294 \uc874\uc18d\uae30\uac04 \ubd84\uc11d\uc744 \uc2ec\uac01\ud560 \uc815\ub3c4\ub85c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uba70, \uc2e4\uc81c \uc77c\uc5b4\ub0a0 \uc218\ub3c4 \uc788\ub294 \uc5b4\ub5a4 \uacbd\uc6b0\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \ubd84\uc11d \uc790\uccb4\ub97c \ubd88\uac00\ub2a5\ud558\uac8c\ub3c4 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc774\ub294 \uc6b0\ub9ac\uac00 \uc2a4\ub808\ub4dc \ub0b4\ubd80\uc5d0\uc11c use() \ud568\uc218 \ub0b4\uc758 \uc9c0\uc5ed \uac1d\uccb4\ub4e4\uc744 \ucc38\uc870\ud558\uac70\ub098 use() \ud568\uc218\uc5d0\uc11c \ud574\ub2f9 \uc2a4\ub808\ub4dc \ub0b4\uc758 \uc9c0\uc5ed \uac1d\uccb4\ub97c \ucc38\uc870\ud558\ub294 \uac83\uc774 \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.","title":"Example, bad"},{"location":"Concurrency/#note_7","text":"\"\uc885\ub8cc\ub418\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \uc2a4\ub808\ub4dc\" \ub4e4\uc740 detach() \ud558\uae30\ubcf4\ub2e4\ub294, \uc804\uc5ed\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \ud3ec\ud568\ub418\ub294 \uc720\ud6a8 \ubc94\uc704 \ub0b4\uc5d0\ub098 \ud639\uc740 \uc790\uc720 \uc601\uc5ed\uc5d0 \uc704\uce58\uc2dc\ud0a4\ub3c4\ub85d \ud558\ub77c. don't detach .","title":"Note"},{"location":"Concurrency/#note_8","text":"std::thread \ub97c \uc0ac\uc6a9\ud558\ub294 \uc624\ub798\ub41c \ucf54\ub4dc\ub098 \uc11c\ub4dc\ud30c\ud2f0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\ub85c \uc778\ud574 \uc774 \uaddc\uce59\uc740 \ub3c4\uc785\ud558\uae30\uac00 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Concurrency/#enforcement_9","text":"std::thread \uc774 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c: gsl::joining_thread \uc0ac\uc6a9\uc744 \uad8c\uc7a5\ud55c\ub2e4. \ub9cc\uc57d detach \ud558\ub294 \uacbd\uc6b0\ub77c\uba74, \ud3ec\ud568\ub418\ub294 \uc720\ud6a8 \ubc94\uc704\uc5d0 \"exporting ownership\" \ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4. join \uc744 \ud558\ub294\uc9c0 detach \ub97c \ud558\ub294\uc9c0 \uba85\ud655\ud558\uc9c0 \uc54a\ub2e4\uba74 \uc2ec\uac01\ud558\uac8c \uacbd\uace0\ud558\ub77c.","title":"Enforcement"},{"location":"Concurrency/#cp26-detach","text":"","title":"CP.26: \uc2a4\ub808\ub4dc\ub97c detach() \ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Concurrency/#reason_11","text":"\ubcf4\ud1b5, \uc0dd\uc131\ub41c \uc720\ud6a8\ubc94\uc704\ub97c \ub118\uc5b4\uc11c\uc11c \uc2e4\ud589\uc774 \uc720\uc9c0\ub418\uc5b4\uc57c \ud558\ub294 \ud544\uc694\uc131\uc740 thread \uc758 \ub0b4\uc7ac\ub41c \uc791\uc5c5 \ud2b9\uc131\uc774\ub098, \ud574\ub2f9 \ud2b9\uc131\uc744 detach \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \uad6c\ud604\ud558\ub294 \uac83\uc740 \ucd94\uc801 \uad00\ucc30 (monitor) \ubc0f \ud574\ub2f9 \uc2a4\ub808\ub4dc\uc640\uc758 \ud1b5\uc2e0\uc744 \uc5b4\ub835\uac8c \ub9cc\ub4e0\ub2e4. \ud2b9\ud788, (\ubb3c\ub860 \ubd88\uac00\ub2a5\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc) \uc2a4\ub808\ub4dc\uac00 \uc608\uc0c1\ub41c \uc2dc\uc810\uae4c\uc9c0 \uc2e4\ud589\uc774 \uc644\ub8cc\ub418\uae30\ub97c \ubcf4\uc7a5\ud558\uac70\ub098 \uc608\uc0c1\ub41c \uc2dc\uc810\uae4c\uc9c0 \uc2e4\ud589\uc774 \uc720\uc9c0\ub418\uae30\ub97c \ubcf4\uc7a5\ud558\ub294 \uac83\uc740 \ub354\uc6b1 \uc5b4\ub835\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_10","text":"void heartbeat (); void use () { std :: thread t ( heartbeat ); // don't join; heartbeat is meant to run forever t . detach (); // ... } \uc774\ub294 detach() \uac00 \ud754\ud788 \uc0ac\uc6a9\ub418\ub294, \uc2a4\ub808\ub4dc\uc758 \ud569\ub9ac\uc801\uc778 \uc0ac\uc6a9 \uc608\uc774\ub2e4. \uadf8\ub7ec\ub098, \uc5ec\uc804\ud788 \ubb38\uc81c\uac00 \uc788\ub2e4. \uc6b0\ub9ac\uac00 detach \ub41c \uc2a4\ub808\ub4dc\uac00 \uc5ec\uc804\ud788 \uc2e4\ud589\ub418\uace0 \uc788\ub294\uc9c0 \uc5b4\ub5bb\uac8c \ucd94\uc801 \uad00\ucc30\ud560 \uc218 \uc788\ub294\uac00? \ub54c\ub54c\ub85c heartbeat \uc0c1\uc5d0 \uc5b4\ub5a4 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc73c\uba70, heartbeat \ub97c \uc783\ub294 \uac83\uc740 \uadf8\uac83\uc744 \ud544\uc694\ud558\ub294 \uc2dc\uc2a4\ud15c \uc0c1\uc5d0\uc11c\ub294 \uc2ec\uac01\ud55c \ubb38\uc81c\uc77c \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c, \uc6b0\ub9ac\ub294 \ud574\ub2f9 \uc2a4\ub808\ub4dc\uc640 \ud1b5\uc2e0\uc744 \ud560 \ud544\uc694\uac00 \uc788\ub2e4 (e.g., \uba54\uc2dc\uc9c0 \uc2a4\ud2b8\ub9bc\uc774\ub098 condition_variable \uc744 \uc774\uc6a9\ud55c \uc54c\ub9bc \uc774\ubca4\ud2b8\ub97c \ud1b5\ud574\uc11c). \ub9ce\uc740 \uacbd\uc6b0\uc5d0 \ub354 \uc6b0\uc6d4\ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\ub294 \ub300\uc548\uc73c\ub85c\ub294 \ud574\ub2f9 \uc2a4\ub808\ub4dc\ub97c \uc0dd\uc131\ub418\ub294 (\ud639\uc740 \ud65c\uc131\ud654\ub418\ub294) \uc720\ud6a8 \ubc94\uc704 \ubc16\uc5d0 \ubc30\uce58\ud568\uc73c\ub85c\uc368 \uc874\uc18d \uae30\uac04\uc744 \uc81c\uc5b4\ud558\ub294 \uac83\uc774\ub2e4. \uc608\uc81c: void heartbeat (); gsl :: joining_thread t ( heartbeat ); // heartbeat is meant to run \"forever\" \uc774 heartbeat (\uc5d0\ub7ec\ub098 \ud558\ub4dc\uc6e8\uc5b4 \ubb38\uc81c \ub4f1\uc744 \ubc29\uc9c0\ud558\ub294) \ub294 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \uc720\uc9c0\ub420 \uac83\uc774\ub2e4. \ub54c\ub85c\ub294, \uc0dd\uc131 \uc2dc\uc810\uacfc \uc18c\uc720\uad8c \uc2dc\uc810\uc744 \ubd84\ub9ac\ud560 \ud544\uc694\uac00 \uc788\ub2e4: void heartbeat (); unique_ptr < gsl :: joining_thread > tick_tock { nullptr }; void use () { // heartbeat is meant to run as long as tick_tock lives tick_tock = make_unique < gsl :: joining_thread > ( heartbeat ); // ... }","title":"Example"},{"location":"Concurrency/#enforcement_10","text":"detach() \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Concurrency/#cp31","text":"","title":"CP.31: \uc2a4\ub808\ub4dc\ub4e4 \uac04\uc758 \uc791\uc740 \ub370\uc774\ud130 \uc804\ub2ec\uc740 \ucc38\uc870\ub098 \ud3ec\uc778\ud130\ubcf4\ub2e4\ub294 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\ub77c"},{"location":"Concurrency/#reason_12","text":"\uc18c\ub7c9\uc758 \ub370\uc774\ud130 \ubcf5\uc0ac\ub294 \uc7a0\uae08\uc7a5\uce58\ub97c \uc774\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \ubcf5\uc0ac \ubc0f \uc811\uadfc \ube44\uc6a9\uc774 \uc800\ub834\ud558\ub2e4. \ubcf5\uc0ac\ub294 \uc790\uc5f0\ud788\ub3c4 \uc720\uc77c\ud55c \uc18c\uc720\uad8c\uc744 \uc81c\uacf5\ud558\uba70(\ucf54\ub4dc\ub97c \ub2e8\uc21c\ud654\ud560 \uc218 \uc788\ub2e4) \ub370\uc774\ud130 \uacbd\uc7c1\uc758 \uac00\ub2a5\uc131\uc744 \uc81c\uac70\ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#note_9","text":"\"\uc18c\ub7c9\" \uc774 \uc815\ud655\ud558\uac8c \uc5b4\ub290 \uc815\ub3c4\uc778\uc9c0\ub97c \uc815\uc758\ud558\uae30\ub294 \ubd88\uac00\ub2a5\ud558\ub2e4.","title":"Note"},{"location":"Concurrency/#example_11","text":"string modify1 ( string ); void modify2 ( string & ); void fct ( string & s ) { auto res = async ( modify1 , s ); async ( modify2 , s ); } modify1 \ud638\ucd9c\uc740 \ub450 \ubc88\uc758 string \uac12 \ubcf5\uc0ac\ub97c \ud544\uc694\ub85c \ud558\uc9c0\ub9cc, modify2 \ud638\ucd9c\uc740 \uac12 \ubcf5\uc0ac\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\ub294\ub2e4. \ubc18\uba74\uc5d0 modify1 \uc758 \uad6c\ud604\uc740 \uc6b0\ub9ac\uac00 \ub2e8\uc77c \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc791\uc131\ud588\uc744 \ubc95\ud55c \ucf54\ub4dc\uc640 \uc815\ud655\ud788 \ub3d9\uc77c\ud558\ub098, modify2 \uc758 \uad6c\ud604\uc740 \ub370\uc774\ud130 \uacbd\uc7c1\uc744 \ud53c\ud558\uae30 \uc704\ud558\uc5ec \uc77c\uc815 \ud615\ud0dc\uc758 \uc7a0\uae08 \uae30\ubc95\uc744 \uc774\uc6a9\ud574\uc57c \ud55c\ub2e4. \ubb38\uc790\uc5f4\uc774 \uc9e7\ub2e4\uba74 (10 \uae00\uc790 \uc815\ub3c4), modify1 \ud638\ucd9c\uc740 \ub180\ub77c\uc6b8 \uc815\ub3c4\ub85c \ube60\ub97c\uac83\uc774\ub2e4; \uadfc\ubcf8\uc801\uc73c\ub85c \ubaa8\ub4e0 \ud544\uc694\ud55c \ube44\uc6a9\uc740 thread \uc804\ud658\uc5d0 \ub4e4\uc5b4\uac08 \ubfd0\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9cc\uc57d \ubb38\uc790\uc5f4\uc774 \uae38\ub2e4\uba74 (1,000,000 \uae00\uc790 \uc815\ub3c4), \uc774\ub97c \ub450 \ubc88\uc774\ub098 \ubcf5\uc0ac\ud558\ub294 \uac83\uc740 \uc88b\uc740 \uc120\ud0dd\uc774 \uc544\ub2d0 \uac83\uc774\ub2e4. \uc774 \ub17c\uc758\ub294 async \ub4f1\uc758 \uc0ac\uc6a9\uacfc\ub294 \uc544\ubb34 \uc5f0\uad00\uc774 \uc5c6\uc74c\uc744 \uc720\uc758\ud558\ub77c. \uc774\ub294 \uba54\uc2dc\uc9c0 \uc804\ub2ec \ubc29\uc2dd \ud639\uc740 \uacf5\uc720 \uba54\ubaa8\ub9ac \ubc29\uc2dd\uc744 \uc0ac\uc6a9\uc744 \uace0\ub824\ud560 \ub54c\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ub41c\ub2e4.","title":"Example"},{"location":"Concurrency/#enforcement_11","text":"???","title":"Enforcement"},{"location":"Concurrency/#cp32-thread-shared_ptr","text":"","title":"CP.32: \uad00\ub828 \uc5c6\ub294 thread\uac04\uc758 \uc18c\uc720\uad8c \uacf5\uc720\ub294 shared_ptr\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_13","text":"\ub9cc\uc57d \uc2a4\ub808\ub4dc\ub4e4\uc774 \uc11c\ub85c \ubb34\uad00\ud558\ub2e4\uba74 (\ub2ec\ub9ac \ub9d0\ud574, \uac19\uc740 \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0 \uc5c6\uac70\ub098 \ud55c \uc2a4\ub808\ub4dc\uac00 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uc758 \uc0dd\uc560\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0), \uadf8\ub9ac\uace0 \uc18c\uba78\ub418\uc5b4\uc57c \ud558\ub294 \uc790\uc720 \uc601\uc5ed \uba54\ubaa8\ub9ac\ub97c \uacf5\uc720\ud560 \ud544\uc694\uac00 \uc788\ub2e4\uba74, shared_ptr \ub610\ub294 \ub3d9\ub4f1\ud55c \uac83\uc774 \uc18c\uba78\uc744 \ubcf4\uc7a5\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_12","text":"???","title":"Example"},{"location":"Concurrency/#note_10","text":"\uc815\uc801(\uc608\ucee8\ub300 \uc804\uc5ed) \uac1d\uccb4\ub294 \ud55c \uc2a4\ub808\ub4dc\uac00 \uac1d\uccb4\uc758 \uc18c\uba78\uc5d0 \ucc45\uc784\uc774 \uc788\ub2e4\ub294 \uc810\uc5d0\uc11c \uacf5\uc720\ud560 \uc218 \uc788\ub2e4 \uc18c\uba78\ub418\uc9c0 \uc54a\ub294 \uc790\uc720 \uc601\uc5ed\uc758 \uac1d\uccb4\ub294 \uacf5\uc720\ud560 \uc218 \uc788\ub2e4. \ud55c \uc2a4\ub808\ub4dc\uac00 \uac1d\uccb4\ub97c \uc18c\uc720\ud558\uace0, \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uc18c\uc720\uc790 \uc2a4\ub808\ub4dc\ubcf4\ub2e4 \uc624\ub798 \uc0b4\uc544\ub0a8\uc9c0 \uc54a\uc73c\uba74 \uac1d\uccb4\ub97c \uc548\uc804\ud558\uac8c \uacf5\uc720\ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Concurrency/#enforcement_12","text":"???","title":"Enforcement"},{"location":"Concurrency/#cp40","text":"","title":"CP.40: \ubb38\ub9e5 \uad50\ud658\uc744 \ucd5c\uc18c\ud654\ud558\ub77c"},{"location":"Concurrency/#reason_14","text":"\ubb38\ub9e5 \uad50\ud658(Context switches)\uc740 \ub9e4\uc6b0 \ub192\uc740 \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_13","text":"???","title":"Example"},{"location":"Concurrency/#enforcement_13","text":"???","title":"Enforcement"},{"location":"Concurrency/#cp41","text":"","title":"CP.41: \uc2a4\ub808\ub4dc \uc0dd\uc131\uacfc \uc18c\uba78\uc744 \ucd5c\uc18c\ud654\ud558\ub77c"},{"location":"Concurrency/#reason_15","text":"\uc2a4\ub808\ub4dc \uc0dd\uc131\uc740 \ub9e4\uc6b0 \ub192\uc740 \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_14","text":"void worker ( Message m ) { // process } void master ( istream & is ) { for ( Message m ; is >> m ; ) run_list . push_back ( new thread ( worker , m )); } \uc774 \ucf54\ub4dc\ub294 \uba54\uc138\uc9c0\ub9c8\ub2e4 thread \ub97c \uc0dd\uc131\ud55c\ub2e4. \uadf8\ub9ac\uace0 run_list \ub294 \uc544\ub9c8\ub3c4 \uc791\uc5c5\ub4e4\uc774 \ub05d\ub098\uba74 \uc2a4\ub808\ub4dc\ub97c \ud30c\uad34\ud560 \uac83\uc774\ub2e4. \ub300\uc2e0, \ubbf8\ub9ac \ub9cc\ub4e4\uc5b4\ub454 \uc791\uc5c5\uc790(worker) \uc2a4\ub808\ub4dc\ub4e4\uc774 \uba54\uc138\uc9c0\ub97c \ucc98\ub9ac\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\ub2e4. Sync_queue < Message > work ; void master ( istream & is ) { for ( Message m ; is >> m ; ) work . put ( m ); } void worker () { for ( Message m ; m = work . get (); ) { // process } } void workers () // set up worker threads (specifically 4 worker threads) { joining_thread w1 { worker }; joining_thread w2 { worker }; joining_thread w3 { worker }; joining_thread w4 { worker }; }","title":"Example"},{"location":"Concurrency/#note_11","text":"\uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc798 \ub9cc\ub4e0 \uc2a4\ub808\ub4dc \ud480\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uba74, \uadf8\uac83\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc798 \ub9cc\ub4e0 \uba54\uc138\uc9c0 \ud050\ub97c \uc9c0\uc6d0\ud558\uba74, \uadf8\uac83\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"Concurrency/#enforcement_14","text":"???","title":"Enforcement"},{"location":"Concurrency/#cp42-wait","text":"","title":"CP.42: \uc870\uac74 \uc5c6\uc774 wait\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Concurrency/#reason_16","text":"\uc870\uac74\uc744 \uc8fc\uc9c0 \uc54a\uace0 wait \ud558\ub294 \uac83\uc740 \uc791\uc5c5\uc744 \uc704\ud574 \uae68\uc5b4\ub098\ub294 \uac83(wakeup) \ub610\ub294 \ub2e8\uc21c\ud788 \uc791\uc5c5\uc774 \uc5c6\ub2e4\ub294 \uac83\uc744 \ud655\uc778\ud558\uae30 \uc704\ud574 \uae68\uc5b4\ub098\ub294 \uac83\uc744 \ub193\uce58\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example-bad_7","text":"std :: condition_variable cv ; std :: mutex mx ; void thread1 () { while ( true ) { // do some work ... std :: unique_lock < std :: mutex > lock ( mx ); cv . notify_one (); // wake other thread } } void thread2 () { while ( true ) { std :: unique_lock < std :: mutex > lock ( mx ); cv . wait ( lock ); // might block forever // do work ... } } \uc5ec\uae30\uc11c, \ucf54\ub4dc\uc5d0 \ud45c\ud604\ub418\uc9c0 \uc54a\uc740 \ub2e4\ub978 thread \uac00 \ub2e4\ub978 thread1 \uc758 \uc54c\ub9bc(notification)\uc744 \uc18c\ube44\ud558\uba74, thread2 \ub294 \uc601\uc6d0\ud788 \ub300\uae30\ud560 \uc218\ub3c4 \uc788\ub2e4.","title":"Example, bad"},{"location":"Concurrency/#example_15","text":"template < typename T > class Sync_queue { public : void put ( const T & val ); void put ( T && val ); void get ( T & val ); private : mutex mtx ; condition_variable cond ; // this controls access list < T > q ; }; template < typename T > void Sync_queue < T >:: put ( const T & val ) { lock_guard < mutex > lck ( mtx ); q . push_back ( val ); cond . notify_one (); } template < typename T > void Sync_queue < T >:: get ( T & val ) { unique_lock < mutex > lck ( mtx ); cond . wait ( lck , [ this ]{ return ! q . empty (); }); // prevent spurious wakeup val = q . front (); q . pop_front (); } \uc774\uc81c \ub9cc\uc57d \ud050\uac00 \ube44\uc5b4\uc788\ub294 \uc0c1\ud0dc\uc5d0\uc11c get() \uc744 \uc2e4\ud589\ud558\ub294 \uc2a4\ub808\ub4dc\uac00 \uae68\uc5b4\ub098\uac8c \ub41c\ub2e4\uba74(\uc608\ub97c \ub4e4\uba74 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uba3c\uc800 get() \uc744 \uc2e4\ud589\ud574\uc11c \uac00\uc838\uac14\ub2e4\uac70\ub098), \ud574\ub2f9 \uc2a4\ub808\ub4dc\ub294 \uadf8\ub300\ub85c \ub2e4\uc2dc sleep \uc0c1\ud0dc\uac00 \ub420 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Concurrency/#enforcement_15","text":"\uc870\uac74\uc774 \uc5c6\ub294 \ubaa8\ub4e0 waits \ub97c \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Concurrency/#cp43-critical-section","text":"","title":"CP.43: \uc784\uacc4 \uc601\uc5ed(Critical Section)\uc5d0\uc11c\uc758 \uc2dc\uac04\uc744 \ucd5c\uc18c\ud654\ud558\ub77c"},{"location":"Concurrency/#reason_17","text":"mutex \ub97c \uac00\uc9c4 \uc2dc\uac04\uc774 \uc9e7\uc744 \uc218\ub85d, \ub2e4\ub978 thread \uac00 \ub300\uae30\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uc904\uc5b4\ub4e4 \uac83\uc774\ub2e4. \uadf8\ub9ac\uace0 thread \uc758 \uc911\uc9c0(suspection)\uc640 \uc7ac\uc2e4\ud589(resumption)\uc740 \ub9ce\uc740 \ube44\uc6a9\uc744 \ud544\uc694\ub85c \ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_16","text":"void do_something () // bad { unique_lock < mutex > lck ( my_lock ); do0 (); // preparation: does not need lock do1 (); // transaction: needs locking do2 (); // cleanup: does not need locking } \uc774 \ucf54\ub4dc\uc5d0\uc120 \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \uc624\ub7ab\ub3d9\uc548 \uc7a0\uae08\uc744 \uc18c\uc720\ud558\uace0 \uc788\ub2e4: \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\uba74 \uc7a0\uae08\uc744 \uac00\uc838\uc11c\ub294 \uc548\ub418\uba70, \uc815\ub9ac\ub97c \uc2dc\uc791\ud558\uae30 \uc804\uc5d0 \uc7a0\uae08\uc744 \ud574\uc81c\ud574\uc57c \ud55c\ub2e4. \uc774\ub807\uac8c \ub2e4\uc2dc \uc791\uc131\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. void do_something () // bad { do0 (); // preparation: does not need lock my_lock . lock (); do1 (); // transaction: needs locking my_lock . unlock (); do2 (); // cleanup: does not need locking } \ud558\uc9c0\ub9cc \uc774\ub7ec\ud55c \ucf54\ub4dc\ub294 \uc548\uc804\uc131\uc5d0 \ub300\ud574\uc11c \ud0c0\ud611\ud560 \ubfd0\uc774\uace0, RAII\ub97c \uc0ac\uc6a9\ud558\ub77c \uaddc\uce59\uc744 \uc704\ubc18\ud55c\ub2e4. \ub300\uc2e0, \uc784\uacc4\uc601\uc5ed\uc5d0 \uc720\ud6a8\ubc94\uc704 \ube14\ub85d\uc744 \ucd94\uac00\ud558\ub77c: void do_something () // OK { do0 (); // preparation: does not need lock { unique_lock < mutex > lck ( my_lock ); do1 (); // transaction: needs locking } do2 (); // cleanup: does not need locking }","title":"Example"},{"location":"Concurrency/#enforcement_16","text":"\uc77c\ubc18\uc801\uc73c\ub85c \ubd88\uac00\ub2a5\ud558\ub2e4. RAII\ub97c \uc801\uc6a9\ud558\uc9c0 \uc54a\uc740 lock() \uacfc unlock() \uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Concurrency/#cp44-lock_guard-unique_lock","text":"","title":"CP.44: lock_guard\uacfc unique_lock\uc5d0\ub294 \uc774\ub984\uc744 \ubd99\uc5ec\ub77c"},{"location":"Concurrency/#reason_18","text":"\uc774\ub984\uc774 \uc5c6\ub294 \uc9c0\uc5ed \uac1c\uccb4\ub4e4\uc740 \uc77c\uc2dc\uc801\uc73c\ub85c \uc0dd\uc131\ub418\uace0 \uc989\uc2dc \uc18c\uba78\ub41c\ub2e4","title":"Reason"},{"location":"Concurrency/#example_17","text":"unique_lock < mutex > ( m1 ); lock_guard < mutex > { m2 }; lock ( m1 , m2 ); \uc774 \ucf54\ub4dc\ub294 \ubcc4\ub85c \ubb38\uc81c \uc5c6\uc5b4 \ubcf4\uc774\uc9c0\ub9cc, \uadf8\ub807\uc9c0 \uc54a\ub2e4.","title":"Example"},{"location":"Concurrency/#enforcement_17","text":"\uc774\ub984\uc744 \ubd80\uc5ec\ud558\uc9c0 \uc54a\uc740 lock_guard \uc640 unique_lock \uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Concurrency/#cp50-mutex-guard-synchronized_valuet","text":"","title":"CP.50: mutex \ub97c \ubcf4\ud638(guard) \ud574\uc57c \ud558\ub294 \ub370\uc774\ud130\uc640 \ud568\uaed8 \uc120\uc5b8\ud558\ub77c. \uac00\ub2a5\ud55c \uacbd\uc6b0\uc5d0\ub294  synchronized_value&lt;T&gt; \ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_19","text":"\ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc5d0\uac8c \uc788\uc5b4 \ub370\uc774\ud130\uac00 \ubcf4\ud638\ub41c\ub2e4\ub294 \uc0ac\uc2e4\uacfc \uc5b4\ub5bb\uac8c \ubcf4\ud638\ub420\uc9c0\ub97c \ubd84\uba85\ud788 \uc804\ub2ec\ud55c\ub2e4. \uc774\ub294 \ubba4\ud14d\uc2a4\ub97c \uc7a0\uadf8\uc9c0 \uc54a\uac70\ub098 \uc5c9\ub6b1\ud55c \ubba4\ud14d\uc2a4\ub97c \uc7a0\uae00 \ud655\ub960\uc744 \ub0ae\ucd98\ub2e4. synchronized_value<T> \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud574\ub2f9 \ub370\uc774\ud130\uac00 \ubba4\ud14d\uc2a4\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba70, \ub370\uc774\ud130 \uc811\uadfc \uc2dc \ud574\ub2f9\ub418\ub294 \uc62c\ubc14\ub978 \ubba4\ud14d\uc2a4\uac00 \uc7a0\uae38 \uac83\uc784\uc744 \ubcf4\uc7a5\ud55c\ub2e4. synchronized_value \ub97c \uc774\ud6c4\uc758 TS \ub098 C++ \ud45c\uc900\uc5d0 \ucd94\uac00\ud558\uae30 \uc704\ud55c WG21 proposal ) \uc744 \ucc38\uace0\ud558\ub77c.","title":"Reason"},{"location":"Concurrency/#example_18","text":"struct Record { std :: mutex m ; // take this mutex before accessing other members // ... }; class MyClass { struct DataRecord { // ... }; synchronized_value < DataRecord > data ; // Protect the data with a mutex };","title":"Example"},{"location":"Concurrency/#enforcement_18","text":"??? \uac00\ub2a5\ud55c\uac00?","title":"Enforcement"},{"location":"Concurrency/#cppar-parallelism","text":"\uc5ec\uae30\uc11c \ubcd1\ub82c\uc131(parallelism)\uc740 \ub9ce\uc740 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \ub3d9\uc2dc\uc5d0 \ud55c \uc791\uc5c5\uc744 \ubcd1\ub82c\uc801\uc73c\ub85c \uc218\ud589\ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \ubcd1\ub82c\uc131 \uaddc\uce59 \uc694\uc57d: ??? ??? \uc801\ud569\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\uba74, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubcd1\ub82c \uc54c\uace0\ub9ac\uc998\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c. \ubcd1\ub82c\uc131\uc744 \uc704\ud574 \uc124\uacc4\ub41c \uc54c\uace0\ub9ac\uc998\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c. \ubd88\ud544\uc694\ud55c \uc758\uc874\uc131\uc744 \uc9c0\ub2cc \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c.","title":"CP.par: \ubcd1\ub82c\uc131(Parallelism)"},{"location":"Concurrency/#cpmess-message-passing","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\ub4e4\uc740 \uc800\uc218\uc900\uc5d0 \uc18d\ud55c\ub2e4. \uc989, thread , mutex , atomic \uc744 \uc0ac\uc6a9\ud55c \ud558\ub4dc\uc6e8\uc5b4\uc640 \uac00\uae4c\uc6b4 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \ucd08\uc810\uc744 \ub450\uace0 \uc788\ub2e4. \ub300\ubd80\ubd84\uc758 \uc0ac\ub78c\ub4e4\uc740 \uc774 \ub808\ubca8\uc5d0\uc11c \uc791\uc5c5\ud574\uc120 \uc548\ub41c\ub2e4: \uc5d0\ub7ec\ub97c \ub9cc\ub4e4\uae30 \uc27d\uace0, \uac1c\ubc1c\uc774 \ub290\ub9ac\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74 \uba54\uc138\uc9d5 \ub77c\uc774\ube0c\ub7ec\ub9ac, \ubcd1\ub82c \uc54c\uace0\ub9ac\uc998, \uadf8\ub9ac\uace0 \ubca1\ud130\ud654\uac19\uc740 \uc0c1\uc704 \ub808\ubca8\uc758 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc774 \uc601\uc5ed\uc5d0\uc120 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uba85\uc2dc\uc801\uc73c\ub85c \ub3d9\uae30\ud654 \ud560 \ud544\uc694\uac00 \uc5c6\ub294 \uba54\uc138\uc9c0 \uc804\ub2ec\uc5d0 \ub300\ud574 \uc0b4\ud3b4\ubcf8\ub2e4. \uba54\uc138\uc9c0 \uc804\ub2ec \uaddc\uce59 \uc694\uc57d: CP.60: \ub3d9\uc2dc\uc801\uc778 \uc791\uc5c5\uc73c\ub85c\ubd80\ud130 \ubc18\ud658\uac12\uc744 \ubc1b\ub294\ub370 future \ub97c \uc0ac\uc6a9\ud558\ub77c CP.61: \ub3d9\uc2dc\uc801\uc778 \uc791\uc5c5\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc120 async() \ub97c \uc0ac\uc6a9\ud558\ub77c \uba54\uc138\uc9c0 \ud050 \uba54\uc138\uc9d5 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4 ???? should there be a \"use X rather than std::async \" where X is something that would use a better specified thread pool? ??? Is std::async worth using in light of future (and even existing, as libraries) parallelism facilities? What should the guidelines recommend if someone wants to parallelize, e.g., std::accumulate (with the additional precondition of commutativity), or merge sort?","title":"CP.mess: \uba54\uc138\uc9c0 \uc804\ub2ec(Message passing)"},{"location":"Concurrency/#cp60-future","text":"","title":"CP.60: \ub3d9\uc2dc\uc801\uc778 \uc791\uc5c5\uc73c\ub85c\ubd80\ud130 \ubc18\ud658\uac12\uc744 \ubc1b\ub294\ub370 future\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_20","text":"future \ub294 \ube44\ub3d9\uae30 \uc791\uc5c5\uc5d0 \ub300\ud55c \uc77c\ubc18\uc801\uc778 \ud568\uc218 \ud638\ucd9c-\ubc18\ud658 \ubb38\ub9e5\uc744 \ub0a8\uaca8\ub450\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4. \uba85\uc2dc\uc801\uc778 \uc7a0\uae08\uc774 \uc5c6\uace0 \uc815\ud655\ud55c \ubc18\ud658\uac12\uacfc \uc5d0\ub7ec(\uc608\uc678) \ubc18\ud658 \ubaa8\ub450 \uac04\ub2e8\ud788 \ucc98\ub9ac\ub41c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_19","text":"???","title":"Example"},{"location":"Concurrency/#note_12","text":"???","title":"Note"},{"location":"Concurrency/#enforcement_19","text":"???","title":"Enforcement"},{"location":"Concurrency/#cp61-async","text":"","title":"CP.61: \ub3d9\uc2dc\uc801\uc778 \uc791\uc5c5\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud574\uc120 async()\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_21","text":"(\uc6d0\ubb38 \uc624\uae30\ub85c \uc778\ud55c \ub0b4\uc6a9 \uc5c6\uc74c)","title":"Reason"},{"location":"Concurrency/#example_20","text":"???","title":"Example"},{"location":"Concurrency/#note_13","text":"\ubd88\ud589\ud558\uac8c\ub3c4 async() \ub294 \uc644\ubcbd\ud558\uc9c0 \uc54a\ub2e4. \uc608\ub97c \ub4e4\uba74, \uc2a4\ub808\ub4dc\uc758 \uc0dd\uc131\uc744 \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \uc2a4\ub808\ub4dc \ud480\uc774 \uc0ac\uc6a9\ub41c\ub2e4\ub294 \ubcf4\uc7a5\uc744 \ud558\uc9c0 \uc54a\ub294\ub2e4. \uc2e4\uc81c\ub85c, \ub300\ubd80\ubd84\uc758 \ub3d9\uc2dc\uc801\uc778 async() \ub4e4\uc740 \uc2a4\ub808\ub4dc \ud480\uc744 \uad6c\ud604\ud558\uace0 \uc788\uc9c0 \uc54a\ub2e4. \uadf8\ub807\uc9c0\ub9cc, async() \ub294 \ub2e8\uc21c\ud558\uace0 \ub17c\ub9ac\uc801\uc73c\ub85c \uc815\ud655\ud558\ub2e4. \ub354 \ub098\uc740 \ubb34\uc5b8\uac00\uac00 \ub098\uc624\uac70\ub098 \ub9ce\uc740 \ube44\ub3d9\uae30\uc801\uc778 \uc791\uc5c5\ub4e4\uc744 \ucd5c\uc801\ud654 \ud574\uc57c\ub9cc \ud558\uc9c0 \uc54a\ub2e4\uba74, async() \ub97c \uacc4\uc18d \uc368\ub3c4 \ubb34\ubc29\ud558\ub2e4.","title":"Note"},{"location":"Concurrency/#enforcement_20","text":"???","title":"Enforcement"},{"location":"Concurrency/#cpvec-vectorization","text":"\ubca1\ud130\ud654\ub780 \uba85\uc2dc\uc801\uc778 \ub3d9\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uba87\uac1c\uc758 \uc791\uc5c5\ub4e4\uc744 \ub3d9\uc2dc\uc801\uc73c\ub85c \uc218\ud589\ud558\ub294 \uae30\uc220\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc5f0\uc0b0\uc740 \ub2e8\uc21c\ud558\uac8c \uc790\ub8cc\uad6c\uc870(\ubca1\ud130, \ubc30\uc5f4 \ub4f1\ub4f1)\uc758 \uc6d0\uc18c\ub4e4\uc5d0 \ubcd1\ub82c\uc801\uc73c\ub85c \uc791\uc6a9\ub41c\ub2e4. \ubca1\ud130\ud654\ub294 \ube44 \uc9c0\uc5ed\uc801 \ubcc0\ud654\ub97c \ud544\uc694\ub85c \ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc810\uc5d0\uc11c \ud765\ubbf8\ub85c\uc6b4 \uc18d\uc131\uc744 \uc9c0\ub2cc\ub2e4. \ud558\uc9c0\ub9cc, \ubca1\ud130\ud654\ub294 \ub2e8\uc21c\ud55c \uc790\ub8cc\uad6c\uc870\ub4e4\uacfc \ubcd1\ub82c\uc801 \uc5f0\uc0b0\uc744 \uac00\ub2a5\ud558\uac8c \ud558\ub294 \ud2b9\ubcc4\ud55c \uc54c\uace0\ub9ac\uc998\uc774 \ud568\uaed8 \uc368\uc57c \ucd5c\uc801\uc758 \uc131\ub2a5\uc744 \ubcf4\uc778\ub2e4. \ubca1\ud130\ud654 \uaddc\uce59 \uc694\uc57d: ??? ???","title":"CP.vec: \ubca1\ud130\ud654(Vectorization)"},{"location":"Concurrency/#cpfree-lock-free","text":"mutex \uc640 condition_variable \ub97c \uc0ac\uc6a9\ud55c \ub3d9\uae30\ud654\ub294 \uc0c1\ub300\uc801\uc73c\ub85c \ub192\uc740 \ube44\uc6a9\uc744 \uc9c0\ubd88\ud574\uc57c \ud560 \uc218 \uc788\ub2e4. \ub098\uc544\uac00\uc11c, \ub370\ub4dc\ub77d(deadlock)\uc73c\ub85c \uc774\uc5b4\uc9c8 \uac00\ub2a5\uc131 \ub610\ud55c \uc874\uc7ac\ud55c\ub2e4. \ub54c\ub54c\ub85c, \uc131\ub2a5\uacfc \ub370\ub4dc\ub77d\uc758 \uac00\ub2a5\uc131\uc744 \uc5c6\uc560\uae30 \uc704\ud574\uc120, \uae4c\ub2e4\ub85c\uc6b4 \uc800-\uc218\uc900\uc758 \"\ubb34\uc7a0\uae08\" \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc774 \uae30\ub2a5\ub4e4\uc740 \uc77c\uc2dc\uc801\uc73c\ub85c \ubc30\ud0c0\uc801\uc778(\uc6d0\uc790\uc801\uc778) \uba54\ubaa8\ub9ac \uc811\uadfc\uc744 \uc0ac\uc6a9\ud55c\ub2e4. Lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc740 thread , mutex \uc640 \uac19\uc740 \uc0c1\uc704\ub808\ubca8\uc758 \ub3d9\uc2dc\uc131 \uba54\ucee4\ub2c8\uc998\uc744 \uad6c\ud604\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\uae30\ub3c4 \ud55c\ub2e4. Lock-free \ud504\ub85c\uadf8\ub798\ubc0d \uaddc\uce59 \uc694\uc57d: CP.100: \uc815\ub9d0 \ud544\uc694\ud560 \ub54c\ub9cc lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c CP.101: \ud558\ub4dc\uc6e8\uc5b4/\ucef4\ud30c\uc77c\ub7ec \uc870\ud569\uc744 \ubd88\uc2e0\ud558\ub77c CP.102: \ubb38\ud5cc\uc744 \uc138\uc2ec\ud558\uac00 \uacf5\ubd80\ud558\ub77c \uc5b8\uc81c/\uc5b4\ub5bb\uac8c atomic\uc744 \uc0ac\uc6a9\ud560 \uac83\uc778\uac00 \uae30\uc544\uc0c1\ud0dc\ub97c \ud68c\ud53c\ud558\ub77c \uc815\uad50\ud558\uac8c \uc870\uc791\ud55c lock-free \uba54\ubaa8\ub9ac \uc811\uadfc\ubcf4\ub2e4\ub294 lock-free \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c CP.110: Do not write your own double-checked locking for initialization CP.111: Use a conventional pattern if you really need double-checked locking \uc5b8\uc81c/\uc5b4\ub5bb\uac8c CAS(Compare And Swap) \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub294\uac00","title":"CP.free: \ubb34\uc7a0\uae08(Lock-free) \ud504\ub85c\uadf8\ub798\ubc0d"},{"location":"Concurrency/#cp100-lock-free","text":"","title":"CP.100: \uc815\ub9d0 \ud544\uc694\ud560 \ub54c\ub9cc lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_22","text":"lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc27d\uace0 \uc5b8\uc5b4 \uae30\ub2a5, \uba38\uc2e0 \uc544\ud0a4\ud14d\ucc98, \uc790\ub8cc\uad6c\uc870\uc5d0 \ub300\ud55c \uc804\ubb38\uac00 \uc218\uc900\uc758 \uc9c0\uc2dd\uc744 \ud544\uc694\ub85c \ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example-bad_8","text":"// \uacf5\uc720\ub418\ub294 \uc5f0\uacb0\ub9ac\uc2a4\ud2b8\uc758 \ud5e4\ub4dc(\uc2dc\uc791\uc810) extern atomic < Link *> head ; Link * nh = new Link ( data , nullptr ); // \ub9c1\ud06c\uc5d0 \uc0bd\uc785\ud560 \uc900\ube44\ub97c \ud55c\ub2e4 Link * h = head . load (); // \ub9ac\uc2a4\ud2b8\uc758 \uacf5\uc720 head\ub97c \uc77d\ub294\ub2e4 do { // \uc870\uac74\uc744 \ucda9\uc871\ud558\uba74, \ub2e4\ub978 \uacf3\uc5d0 \uc0bd\uc785\ud55c\ub2e4. if ( h -> data <= data ) break ; // \ub2e4\uc74c \uc6d0\uc18c\ub294 \uc774\uc804\uc758 head\uc774\ub2e4 nh -> next = h ; } while ( ! head . compare_exchange_weak ( h , nh )); // nh\ub97c h \ub610\ub294 head\uc5d0 \uc0bd\uc785\ud55c\ub2e4. \ubc84\uadf8\ub97c \ucc3e\uc544\ubcf4\ub77c. \ud14c\uc2a4\ud305\uc744 \ud1b5\ud574\uc11c \ucc3e\uae30 \uc815\ub9d0\uc815\ub9d0 \uc5b4\ub824\uc6b8 \uac83\uc774\ub2e4. ABA \ubb38\uc81c\uc5d0 \ub300\ud574\uc11c \uc77d\uc5b4\ubcf4\ub77c.","title":"Example, bad"},{"location":"Concurrency/#exception_1","text":"\uae30\ubcf8\uc801\uc73c\ub85c \uc801\uc6a9\ub418\ub294 \uc21c\ucc28 \ubb34\ubaa8\uc21c \uba54\ubaa8\ub9ac \ubaa8\ub378 ( memory_order_seq_cst )\uc744 \uc0ac\uc6a9\ud558\ub294 \ud55c, \uc6d0\uc790\uc801 \ubcc0\uc218\ub4e4 \ub2e8\uc21c\uc131\uacfc \uc548\uc804\uc131\uc744 \uc704\ud574 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4.","title":"Exception"},{"location":"Concurrency/#note_14","text":"\uc0c1\uc704 \ub808\ubca8 \ub3d9\uc2dc\uc131 \uba54\ucee4\ub2c8\uc998\ub4e4\uc740 thread \uc640 mutex \uac19\uc740 lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc73c\ub85c \uad6c\ud604\ub418\uc5c8\ub2e4. Alternative : \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc5d0 \uc758\ud574\uc11c \uad6c\ud604\ub418\uc5c8\uac70\ub098 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc77c\ubd80\ub85c \uc874\uc7ac\ud558\ub294 lock-free \uc790\ub8cc\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"Concurrency/#cp101","text":"","title":"CP.101: \ud558\ub4dc\uc6e8\uc5b4/\ucef4\ud30c\uc77c\ub7ec \uc870\ud569\uc744 \ubd88\uc2e0\ud558\ub77c"},{"location":"Concurrency/#reason_23","text":"lock-free\ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc800-\uc218\uc900 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ud398\uc774\uc2a4\ub294 \uac00\uc7a5 \uad6c\ud604\ud558\uae30 \uc5b4\ub835\uace0 \ubbf8\ubb18\ud55c \uc774\uc2dd\uc131 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \uc131\ub2a5\uc744 \uc704\ud574 lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, \uc624\ud788\ub824 \uc131\ub2a5 \uc800\ud558(regression)\uac00 \uc788\uc9c0\ub294 \uc54a\uc740\uc9c0 \ud655\uc778\ud574\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#note_15","text":"(\uc815\uc801/\ub3d9\uc801) \uba85\ub839\uc5b4 \uc7ac\ubc30\uce58(Instruction Reordering) \ub54c\ubb38\uc5d0 \uc774 \ub808\ubca8\uc5d0\uc11c\ub294 \ud6a8\uc728\uc801\uc73c\ub85c \uc0dd\uac01\ud558\ub294 \uac83\uc774 \uc5b4\ub835\ub2e4 (\ud2b9\ud788 relaxed \uba54\ubaa8\ub9ac \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74). \uacbd\ud5d8\uacfc, (\uc900)\ud615\uc2dd\uc801\uc778 lock-free \ubaa8\ub378\ub4e4, \uadf8\ub7f0 \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud55c \uc810\uac80\uc774 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4. \ud14c\uc2a4\ud305 - \uc885\uc885 \uc5c4\uccad\ub098\uac8c \ub113\uc740 \uc601\uc5ed\uc5d0 \ub300\ud55c - \uc740 \ud544\uc218\uc801\uc774\ub2e4. \"Don't fly too close to the wind.\"","title":"Note"},{"location":"Concurrency/#enforcement_21","text":"\ud558\ub4dc\uc6e8\uc5b4, \uc6b4\uc601\uccb4\uc81c, \ucef4\ud30c\uc77c\ub7ec, \uadf8\ub9ac\uace0 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubaa8\ub4e0 \ubcc0\ud654\ub97c \ud3ec\ud568\ud558\ub294 \uac15\ub825\ud55c \ud14c\uc2a4\ud305 \uaddc\uce59\uc744 \uc138\uc6cc\ub77c.","title":"Enforcement"},{"location":"Concurrency/#cp102","text":"","title":"CP.102: \ubb38\ud5cc\uc744 \uc138\uc2ec\ud558\uac8c \uacf5\ubd80\ud558\ub77c"},{"location":"Concurrency/#reason_24","text":"atomic\uc5d0\uc11c\uc758 \uc608\uc678\uc640 \ud45c\uc900\uc801\uc778 \ud328\ud134\ub4e4, lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc628\uc804\ud788 \uc804\ubb38\uac00\ub97c \uc704\ud55c \ub0b4\uc6a9\uc774\ub2e4. lock-free \ucf54\ub4dc\ub97c \uc801\uc6a9\ud558\uae30\uc5d0 \uc55e\uc11c\uc11c \uc804\ubb38\uac00\uac00 \ub418\uc5b4\ub77c.","title":"Reason"},{"location":"Concurrency/#references","text":"Anthony Williams: C++ concurrency in action. Manning Publications. Boehm, Adve, You Don't Know Jack About Shared Variables or Memory Models , Communications of the ACM, Feb 2012. Boehm, \"Threads Basics\", HPL TR 2009-259. Adve, Boehm, \"Memory Models: A Case for Rethinking Parallel Languages and Hardware\", Communications of the ACM, August 2010. Boehm, Adve, \"Foundations of the C++ Concurrency Memory Model\", PLDI 08. Mark Batty, Scott Owens, Susmit Sarkar, Peter Sewell, and Tjark Weber, \"Mathematizing C++ Concurrency\", POPL 2011. Damian Dechev, Peter Pirkelbauer, and Bjarne Stroustrup: Understanding and Effectively Preventing the ABA Problem in Descriptor-based Lock-free Designs. 13th IEEE Computer Society ISORC 2010 Symposium. May 2010. Damian Dechev and Bjarne Stroustrup: Scalable Non-blocking Concurrent Objects for Mission Critical Code. ACM OOPSLA'09. October 2009 Damian Dechev, Peter Pirkelbauer, Nicolas Rouquette, and Bjarne Stroustrup: Semantically Enhanced Containers for Concurrent Real-Time Systems. Proc. 16th Annual IEEE International Conference and Workshop on the Engineering of Computer Based Systems (IEEE ECBS). April 2009.","title":"References"},{"location":"Concurrency/#cp110-double-checked-locking","text":"","title":"CP.110: \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 (double-checked locking) \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9d0\ub77c"},{"location":"Concurrency/#reason_25","text":"C++11 \uc774\ud6c4\ubd80\ud130\ub294, \uc815\uc801 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc774 \uc2a4\ub808\ub4dc \uc548\uc804 (thread-safe) \ud55c \ubc29\uc2dd\uc73c\ub85c \ucd08\uae30\ud654\ub41c\ub2e4. \ub530\ub77c\uc11c RAII \ud328\ud134\uacfc \ud568\uaed8 \uc0ac\uc6a9 \uc2dc, \uc815\uc801 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc758 \uc0ac\uc6a9\uc740 \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 (double-checked locking) \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc57c \ud560 \ud544\uc694\uc131\uc744 \ub300\uccb4\ud55c\ub2e4. \ub610\ud55c std::call_once \uc0ac\uc6a9 \uc5ed\uc2dc \ub3d9\uc77c\ud55c \ubaa9\uc801\uc744 \ub2ec\uc131\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uae30\ubcf4\ub2e4\ub294 C++11 \uc758 \uc815\uc801 \uc9c0\uc5ed \ubcc0\uc218\ub098 std::call_once \uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Reason"},{"location":"Concurrency/#example_21","text":"std::call_once \ub97c \uc0ac\uc6a9\ud558\ub294 \uc608\uc81c. void f () { static std :: once_flag my_once_flag ; std :: call_once ( my_once_flag , []() { // do this only once }); // ... } C++11 \uc758 \uc2a4\ub808\ub4dc \uc548\uc804\ud55c \uc815\uc801 \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uc608\uc81c. void f () { // Assuming the compiler is compliant with C++11 static My_class my_object ; // Constructor called only once // ... } class My_class { public : My_class () { // do this only once } };","title":"Example"},{"location":"Concurrency/#enforcement_22","text":"??? \uc800 idiom \ud655\uc778\ud560 \uc218 \uc788\ub294 \uac74\uac00\uc694?","title":"Enforcement"},{"location":"Concurrency/#cp111","text":"","title":"CP.111: \uc774\uc911 \ud655\uc778 \uc7a0\uae08\uc774 \uaf2d \ud544\uc694\ud560 \uacbd\uc6b0\uc5d0\ub294 \uc804\ud1b5\uc801\uc778 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_26","text":"\uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub294 \uc5c9\ub9dd\uc73c\ub85c \ub9cc\ub4e4\uae30 \uc27d\ub2e4. CP.110: \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9d0\ub77c \ubc0f CP.100: \uc815\ub9d0 \ud544\uc694\ud560 \ub54c\ub9cc lock-free \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c \uacfc \uac19\uc740 \uaddc\uce59\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \uc804\ud1b5\uc801\uc778 \ud328\ud134\uc744 \uc774\uc6a9\ud574\uc11c \uc791\uc131\ud558\ub3c4\ub85d \ud558\ub77c. \uc2a4\ub808\ub4dc \uc548\uc804\ud558\uc9c0 \uc54a\uc740 (non-thread-safe) \ud2b9\uc815 \ub3d9\uc791\uc5d0 \uc788\uc5b4, \ub3d9\uc791 \uc790\uccb4\uac00 \ubcf5\uc7a1\ud558\uace0\ub3c4 \uc218\ud589 \ube48\ub3c4\uac00 \ub0ae\uc73c\uba70 \ud574\ub2f9 \ub3d9\uc791\uc758 \uc218\ud589\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\ub294 (\uadf8 \ubc18\ub300\uc758 \uacbd\uc6b0\ub97c \ubcf4\uc7a5\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294) \uc2e0\uc18d\ud558\uace0\ub3c4 \uc2a4\ub808\ub4dc-\uc548\uc804\ud55c \uc2dc\ud5d8 \ubc29\ubc95\uc774 \uc874\uc7ac\ud558\ub294 \uc0c1\ud669\uc5d0\uc11c\uc758 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ud328\ud134\uc758 \uc0ac\uc6a9\uc774 CP.110: \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub3c5\uc790\uc801\uc778 \uc774\uc911 \ud655\uc778 \uc7a0\uae08 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9d0\ub77c \uc744 \uc704\ubc18\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc5d0 \ud574\ub2f9\ud55c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example-bad_9","text":"volatile \uc758 \uc0ac\uc6a9\uc744 \ud1b5\ud55c \uc544\ub798\uc758 \uccab \ubc88\uc9f8 \uc2dc\ud5d8\uc740 \uc2a4\ub808\ub4dc \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4. CP.200: volatile \uc740 C++\uac00 \uc544\ub2cc \uba54\ubaa8\ub9ac\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c \uc744 \ucc38\uace0\ud558\ub77c. mutex action_mutex ; volatile bool action_needed ; if ( action_needed ) { std :: lock_guard < std :: mutex > lock ( action_mutex ); if ( action_needed ) { take_action (); action_needed = false ; } }","title":"Example, bad"},{"location":"Concurrency/#example-good","text":"mutex action_mutex ; atomic < bool > action_needed ; if ( action_needed ) { std :: lock_guard < std :: mutex > lock ( action_mutex ); if ( action_needed ) { take_action (); action_needed = false ; } } \ud68d\ub4dd \uc801\uc7ac (acquire load) \ubc29\uc2dd\uc774 \uc21c\ucc28 \uc77c\uad00 \uc801\uc7ac (sequentially-consistent load) \ubc29\uc2dd\ubcf4\ub2e4 \ud6a8\uc728\uc801\uc778 \uacbd\uc6b0, \ubbf8\uc138 \uc870\uc815\ub41c \uba54\ubaa8\ub9ac \uc21c\uc11c (memory order) \ub97c \ud1b5\ud574 \uc131\ub2a5\uc0c1 \uc774\uc810\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. mutex action_mutex ; atomic < bool > action_needed ; if ( action_needed . load ( memory_order_acquire )) { lock_guard < std :: mutex > lock ( action_mutex ); if ( action_needed . load ( memory_order_relaxed )) { take_action (); action_needed . store ( false , memory_order_release ); } }","title":"Example, good"},{"location":"Concurrency/#enforcement_23","text":"??? \ud574\ub2f9 idiom \uc774 \ud0d0\uc9c0 \uac00\ub2a5\ud55c\uac00?","title":"Enforcement"},{"location":"Concurrency/#cpetc","text":"\uc774 \uaddc\uce59\ub4e4\uc740 \ubd84\ub958\ub97c \uc801\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4: CP.200: volatile \uc740 C++\uac00 \uc544\ub2cc \uba54\ubaa8\ub9ac\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c CP.201: ??? \uc2dc\uadf8\ub110","title":"CP.etc: \uae30\ud0c0 \ub3d9\uc2dc\uc131 \uaddc\uce59\ub4e4"},{"location":"Concurrency/#cp200-volatile-c","text":"","title":"CP.200: volatile\uc740 C++\uac00 \uc544\ub2cc \uba54\ubaa8\ub9ac\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c"},{"location":"Concurrency/#reason_27","text":"volatile \uc740 \"C++\uac00 \uc544\ub2cc\" \ucf54\ub4dc \ub610\ub294 C++ \uba54\ubaa8\ub9ac \ubaa8\ub378\uc744 \ub530\ub974\uc9c0 \uc54a\ub294 \ud558\ub4dc\uc6e8\uc5b4\uc5d0 \uc788\ub294 \uac1d\uccb4\ub97c \ucc38\uc870\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub41c\ub2e4.","title":"Reason"},{"location":"Concurrency/#example_22","text":"const volatile long clock ; \uc774 \ucf54\ub4dc\ub294 \uc2dc\uacc4 \ud68c\ub85c\uac00 \uc9c0\uc18d\uc801\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\ud558\ub294 \ub808\uc9c0\uc2a4\ud130\ub97c \uc758\ubbf8\ud55c\ub2e4. clock \uc740 volatile \uc778\ub370, \uc774\ub294 C++ \ud504\ub85c\uadf8\ub7a8 \ub0b4\uc5d0\uc11c\ub294 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uc558\uc9c0\ub9cc \uac12\uc774 \ubc14\ub014 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc608\ucee8\ub300, clock \uc744 \ub450\ubc88 \uc77d\ub294 \uac83\uc740 \ub2e4\ub978 \uac12\uc744 \ubc18\ud658\ud560 \uc218\ub3c4 \uc788\ub2e4, \ub54c\ubb38\uc5d0 \ucd5c\uc801\ud654\uae30(optimizer)\ub294 \ubc18\ubcf5\ub41c \uc77d\uae30 \uacfc\uc815\uc744 \ucd5c\uc801\ud654\ud574\uc11c \uc5c6\uc560\uc9c0 \uc54a\ub294 \uac83\uc774 \ub098\uc744 \uac83\uc774\ub2e4: long t1 = clock ; // ... no use of clock here ... long t2 = clock ; clock \uc740 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uac12\uc744 \uc4f0\ub824\uace0 \ud558\uba74 \uc548\ub418\uae30 \ub54c\ubb38\uc5d0 const \ub85c \uc0ac\uc6a9\ub41c\ub2e4.","title":"Example"},{"location":"Concurrency/#note_16","text":"\ud558\ub4dc\uc6e8\uc5b4\ub97c \uc9c1\uc811 \uc870\uc791\ud558\ub294 \ucd5c\uc800 \ub808\ubca8\uc758 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac8c \uc544\ub2c8\ub77c\uba74, volatile \ub294 \ud53c\ud558\ub294\uac8c \uc88b\uc740 \ub09c\ud574\ud55c(esoteric) \uae30\ub2a5\uc774\ub77c\uace0 \uc0dd\uac01\ud558\ub77c.","title":"Note"},{"location":"Concurrency/#example_23","text":"\uc77c\ubc18\uc801\uc73c\ub85c C++ \ucf54\ub4dc\ub294 \ub2e4\ub978 \uc5b4\ub518\uac00(\ud558\ub4dc\uc6e8\uc5b4 \ub610\ub294 \ub2e4\ub978 \uc5b8\uc5b4)\uc5d0 \uc18d\ud55c \uba54\ubaa8\ub9ac\ub97c \uac00\uc838\uc62c \ub54c volatile \uc744 \uc0ac\uc6a9\ud55c\ub2e4: int volatile * vi = get_hardware_memory_location (); // note: we get a pointer to someone else's memory here // volatile says \"treat this with extra respect\" \ub54c\ub54c\ub85c C++ \ucf54\ub4dc\ub294 volatile \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud558\uace0 \uc758\ub3c4\uc801\uc73c\ub85c \ud3ec\uc778\ud130\ub97c \ub2e4\ub978 \uc5b4\ub518\uac00(\ud558\ub4dc\uc6e8\uc5b4 \ub610\ub294 \ub2e4\ub978\uc5b8\uc5b4)\uc640 \uacf5\uc720\ud558\uae30\ub3c4 \ud55c\ub2e4: static volatile long vl ; please_use_this ( & vl ); // escape a reference to this to \"elsewhere\" (not C++)","title":"Example"},{"location":"Concurrency/#example-bad_10","text":"volatile \uc9c0\uc5ed\ubcc0\uc218\ub4e4\uc740 \uac70\uc758 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc798\ubabb \uc0ac\uc6a9\ub41c \uac83\uc774\ub2e4 -- local variables are nearly always wrong -- \uadf8 \ubcc0\uc218\ub4e4\uc774 \uc77c\uc2dc\uc801(emphemeral)\uc774\ub77c\uba74 \uc5b4\ub5bb\uac8c \ub2e4\ub978 \uc5b8\uc5b4/\uae30\uacc4\ub4e4\uacfc \uacf5\uc720\ub420 \uc218 \uc788\uaca0\ub294\uac00? \uba64\ubc84 \ubcc0\uc218\ub4e4\uc758 \uacbd\uc6b0\ub3c4 \uac19\uc740 \uc774\uc720\ub85c volatile \uc758 \uc798\ubabb\ub41c \uc0ac\uc6a9\uc77c \uc218 \uc788\ub2e4. void f () { volatile int i = 0 ; // bad, volatile local variable // etc. } class My_type { volatile int i = 0 ; // suspicious, volatile member variable // etc. };","title":"Example; bad"},{"location":"Concurrency/#note_17","text":"C++ \uc5d0\uc11c\ub294, \ub2e4\ub978 \uc5b8\uc5b4\uc640\ub294 \ub2ec\ub9ac, volatile \uc740 \ub3d9\uae30\ud654\uc640 \uad00\ub828\ud574 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\ub294\ub2e4 .","title":"Note"},{"location":"Concurrency/#enforcement_24","text":"volatile T \uc744 \uc0ac\uc6a9\ud558\ub294 \uc9c0\uc5ed, \uba64\ubc84 \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c; \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 atomic<T> \ub97c \uc758\ub3c4\ud588\uc744 \uac83\uc774\ub2e4. ???","title":"Enforcement"},{"location":"Concurrency/#cp201","text":"???UNIX signal handling???. May be worth reminding how little is async-signal-safe, and how to communicate with a signal handler (best is probably \"not at all\")","title":"CP.201: ??? \uc2dc\uadf8\ub110"},{"location":"Const/","text":"Con: \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 \uc0c1\uc218\uc5d0 \ub300\ud574\uc11c\ub294 \uacbd\uc7c1 \uc0c1\ud0dc\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. \ud504\ub85c\uadf8\ub7a8 \ub0b4\uc758 \uac1d\uccb4 \uc911 \uadf8 \uac12\uc774 \ubc14\ub014 \uc218 \uc5c6\ub294 \uac83\uc774 \ub9ce\ub2e4\uba74 \ud574\uc11d\ud558\uae30\uac00 \uc26c\uc6b8 \uac83\uc774\ub2e4. \uc778\uc790\ub85c \ub118\uc5b4\uac00\ub294 \uac1c\uccb4\uc758 \uc0c1\ud0dc\uac00 \ubc14\ub00c\uc9c0 \uc54a\ub294 \uac83\uc744 \ubcf4\uc7a5\ud55c\ub2e4\uba74 \uadf8 \uc778\ud130\ud398\uc774\uc2a4\ub294 \uac00\ub3c5\uc131\uc774 \uad49\uc7a5\ud788 \ub192\uc744 \uac83\uc774\ub2e4. \uc0c1\uc218 \uaddc\uce59 \uc694\uc57d: Con.1: \uae30\ubcf8\uc801\uc73c\ub85c \uac1d\uccb4\ub97c \ubcc0\uacbd \ubd88\uac00\ub2a5\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c Con.2: \uae30\ubcf8\uc801\uc73c\ub85c \uba64\ubc84 \ud568\uc218\ub4e4\uc740 const \ub85c \ub9cc\ub4e4\uc5b4\ub77c Con.3: \uae30\ubcf8\uc801\uc73c\ub85c \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub294 const \ub85c \uc804\ub2ec\ud558\ub77c Con.4: \uac1c\uccb4 \uc0dd\uc131 \uc774\ud6c4 \ubcc0\ud558\uc9c0 \uc54a\ub294 \uac12\uc740 const \ub85c \uc815\uc758\ud558\ub77c Con.5: \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uacc4\uc0b0\ub420 \uc218 \uc788\ub294 \uac12\uc740 constexpr \uc744 \uc0ac\uc6a9\ud558\ub77c Con.1: \uae30\ubcf8\uc801\uc73c\ub85c \uac1d\uccb4\ub97c \ubcc0\uacbd \ubd88\uac00\ub2a5\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c Reason \ubcc0\ud558\uc9c0 \uc54a\ub294 \uac1c\uccb4\ub294 \uc774\ud574\ud558\uae30\uac00 \ub354 \uc27d\ub2e4. \uac12\uc744 \ubc14\uafc0 \ud544\uc694\uac00 \uc788\uc744 \ub54c\uc5d0\ub9cc \uac1c\uccb4\ub97c \ube44- const \ub85c \ub9cc\ub4e4\uc5b4\ub77c. \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\uac70\ub098 \uc54c\uc544\ucc28\ub9ac\uae30 \uc5b4\ub824\uc6b4 \uac12 \ubcc0\uacbd\uc744 \uc608\ubc29\ud55c\ub2e4. Example for ( const int i : c ) cout << i << '\\n' ; // just reading: const for ( int i : c ) cout << i << '\\n' ; // BAD: just reading Exception \ud568\uc218\uc758 \uc778\uc790\ub4e4\uc758 \uac12\uc774 \ubcc0\uacbd\ub418\ub294 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\uc9c0\ub9cc, \ub610\ud55c \uc774\ub4e4\uc774 const \ub85c \uc120\uc5b8\ub418\ub294 \uacbd\uc6b0 \uc5ed\uc2dc \ub4dc\ubb3c\ub2e4. \ud63c\ub3d9\uacfc \uc218\ub9ce\uc740 \uac70\uc9d3 \uc591\uc131 (false positives) \ud14c\uc2a4\ud2b8 \uacb0\uacfc\ub97c \ud53c\ud558\uae30 \uc704\ud574, \uc774 \uaddc\uce59\uc740 \ud568\uc218\uc758 \uc778\uc790\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \uc801\uc6a9\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4. void f ( const char * const p ); // pedantic void g ( const int i ); // pedantic \ud568\uc218 \ub0b4\ubd80\uc758 \ubcc0\uc218\ub294 \uc9c0\uc5ed \ubcc0\uc218\uc774\ubbc0\ub85c \uc774\ub97c \ubcc0\uacbd\ud558\ub294 \uc601\ud5a5\ub3c4 \uc9c0\uc5ed\uc801\uc784\uc744 \uc9da\uace0 \uac00\uc790. Enforcement \uac12\uc774 \ubcc0\uacbd\ub418\uc9c0 \uc54a\ub294 \ube44- const \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c (\uc218\ub9ce\uc740 \uac70\uc9d3 \uc591\uc131 \ud14c\uc2a4\ud2b8 \uacb0\uacfc\ub97c \ud53c\ud558\uae30 \uc704\ud574 \uc778\uc790\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \uc608\uc678\ub85c \ud55c\ub2e4) Con.2: \uae30\ubcf8\uc801\uc73c\ub85c \uba64\ubc84 \ud568\uc218\ub4e4\uc740 const \ub85c \ub9cc\ub4e4\uc5b4\ub77c Reason \uba64\ubc84 \ud568\uc218\uac00 \ud574\ub2f9 \uac1d\uccb4\uc758 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 const \ub85c \ud45c\uc2dc\ud558\ub3c4\ub85d \ud55c\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \ub514\uc790\uc778 \uc758\ub3c4\ub97c \ub354\uc6b1 \uba85\ud655\ud558\uac8c \ub4dc\ub7ec\ub0b4\uace0, \uac00\ub3c5\uc131\uc744 \ub192\uc774\uba70, \ucef4\ud30c\uc77c\ub7ec\uac00 \ub354 \ub9ce\uc740 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\uac8c \ub3c4\uc6b0\uba70, \ub54c\uc5d0 \ub530\ub77c\uc11c\ub294 \ucd5c\uc801\ud654\ub97c \ub354 \uc798 \ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. Example; bad class Point { int x , y ; public : int getx () { return x ; } // BAD, should be const as it doesn't modify the object's state // ... }; void f ( const Point & pt ) { int x = pt . getx (); // ERROR, doesn't compile because getx was not marked const } Note \ube44- const \ud615\uc2dd\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc790\ub97c \uc804\ub2ec\ud558\ub294 \uac83 \uc790\uccb4\uac00 \uadfc\ubcf8\uc801\uc73c\ub85c \ub098\uc05c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc774\ub294 \ud638\ucd9c\ub418\ub294 \ud568\uc218\uac00 \ud574\ub2f9 \uac1d\uccb4\ub97c \uc218\uc815\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc218\ud589\ub418\uc5b4\uc57c \ud55c\ub2e4. \ucf54\ub4dc\ub97c \uc77d\ub294 \ub3c5\uc790\ub294 \"plain\" T* \ub098 T& \ub97c \uc804\ub2ec\ubc1b\ub294 \ud568\uc218\uac00 \ud574\ub2f9 \ucc38\uc870\uac00 \uac00\ub9ac\ud0a4\ub294 \uac1d\uccb4\ub97c \uc218\uc815\ud560 \uac83\uc774\ub77c\uace0 \uac00\uc815\ud574\uc57c \ud55c\ub2e4. \ube44\ub85d \ub2f9\uc7a5 \ud604\uc7ac\uc5d0\ub294 \uac1d\uccb4\ub97c \uc218\uc815\uc744 \ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4, \uc774\ud6c4\uc5d0 \uc7ac\ucef4\ud30c\uc77c\uc744 \uac15\uc81c\ud558\uc9c0 \uc54a\uace0\ub3c4 \uac1d\uccb4\ub97c \uc218\uc815\ud558\ub3c4\ub85d \ubcc0\uacbd\ub420 \uc218 \uc788\ub2e4. Note \uae30\uc874 \ucf54\ub4dc/\ub77c\uc774\ube0c\ub7ec\ub9ac \uc911 \uc77c\ubd80\ub294 \ud568\uc218 \ub0b4\uc5d0\uc11c T \ub97c \uc218\uc815\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c\ub3c4 T* \ub85c \uc120\uc5b8\ub41c \ud568\uc218\ub97c \uc81c\uacf5\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc774\ub294 \ucf54\ub4dc\ub97c \"\ud604\ub300\ud654(modernizing)\" \ud558\ub824\ub294 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\ub2e4. \ub2e4\uc74c \ubc29\ubc95\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 \uc815\ud655\ud558\uac8c const \ub97c \uc774\uc6a9\ud558\ub3c4\ub85d \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4; \uc7a5\uae30\uc801\uc778 \ub300\uc548\uc73c\ub85c \uc88b\ub2e4 \" const \uc18d\uc131\uc744 \ud0c0\uc785 \ubcc0\ud658(cast)\uc744 \ud1b5\ud574 \ud574\uc9c0\ud55c\ub2e4\"; \uac00\ub2a5\ud55c \ud53c\ud558\ub294 \uac83\uc774 \uc88b\ub2e4 wrapper \ud568\uc218\ub97c \uc81c\uacf5\ud55c\ub2e4 Example: void f ( int * p ); // old code: f() does not modify `*p` void f ( const int * p ) { f ( const_cast < int *> ( p )); } // wrapper \uc774\ub807\uac8c wrapper\ub97c \uc774\uc6a9\ud558\ub294 \ud574\uacb0\ucc45\uc740(\ub77c\uc774\ube0c\ub7ec\ub9ac \uc548\uc5d0 \ub4e4\uc5b4 \uc788\uc5b4 \uc9c1\uc811 \uc218\uc815\ud560 \uc218 \uc5c6\ub2e4\ub4e0\uac00 \ud558\ub294 \uc774\uc720\ub85c) f()\uc758 \uc120\uc5b8\uc744 \uc218\uc815\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uc784\uc2dc\ubc29\ud3b8\uc784\uc5d0 \uc720\uc758\ud558\ub77c. Note const \uba64\ubc84 \ud568\uc218\ub3c4 mutable \ud558\uac70\ub098 \ud3ec\uc778\ud130 \uba64\ubc84\ub97c \ud1b5\ud574 \uc811\uadfc\ub418\ub294 \uac1d\uccb4\uc5d0 \ub300\ud574\uc11c\ub294 \uac12\uc744 \uc218\uc815\ud560 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \ubc29\uc2dd\uc758 \ud754\ud55c \uc608\ub294 \ubcf5\uc7a1\ud55c \uacc4\uc0b0\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \ud558\uc9c0 \uc54a\uae30 \uc704\ud574 \uce90\uc2dc\ub97c \uc720\uc9c0\ud558\ub294 \uacbd\uc6b0\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc544\ub798 Date \ub294 \ubc18\ubcf5\uc801\uc778 \uc0ac\uc6a9\uc744 \ub2e8\uc21c\ud654\ud558\uae30 \uc704\ud574 \ub0a0\uc9dc\uc758 \ubb38\uc790\uc5f4 \ud45c\ud604\uc744 \uce90\uc2dc(\uae30\uc5b5) \ud558\uace0 \uc788\ub2e4: class Date { public : // ... const string & string_ref () const { if ( string_val == \"\" ) compute_string_rep (); return string_val ; } // ... private : void compute_string_rep () const ; // compute string representation and place it in string_val mutable string string_val ; // ... }; \uc774\uc5d0 \ub300\ud574\uc11c \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \uc774\uc57c\uae30\ud558\uba74, const \ud568\uc740 \uc804\uc774\uc801(transitive) \uc774\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc774\ub2e4. const \uba64\ubc84 \ud568\uc218\uc5d0\uac8c \uc788\uc5b4 mutable \ud55c \uba64\ubc84\uc758 \uac12\uacfc \ube44- const \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uc811\uadfc\ud558\ub294 \uac1d\uccb4\uc758 \uac12\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ud074\ub798\uc2a4\uac00 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \uc81c\uacf5\ud558\ub294 \uc758\ubbf8\ub860(\ubd88\ubcc0 \uc870\uac74)\uc5d0 \uc758\uac70\ud558\uc5ec \ud0c0\ub2f9\ud558\ub2e4\uace0 \uc5ec\uaca8\uc9c8 \uacbd\uc6b0\uc5d0\ub9cc \uc774\ub7ec\ud55c \uac12 \ubcc0\uacbd\uc774 \uc774\ub8e8\uc5b4\uc9c8 \uc218 \uc788\ub3c4\ub85d \ubcf4\uc7a5\ud558\ub294 \uac83\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uc5ed\ud560\uc774\ub2e4. See also : Pimpl Enforcement const \ud45c\uc2dc\uac00 \ub418\uc5b4 \uc788\uc9c0 \uc54a\uc9c0\ub9cc, \uc5b4\ub5a0\ud55c \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c\ub3c4 \ube44- const \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\ub294 \uba64\ubc84 \ud568\uc218\ub97c \uc9c0\uc801\ud558\ub77c Con.3: \uae30\ubcf8\uc801\uc73c\ub85c \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub294 const \ub85c \uc804\ub2ec\ud558\ub77c Reason \ud638\ucd9c\ub418\ub294 \ud568\uc218\uac00 \uc608\uc0c1\uce58 \ubabb\ud558\uac8c \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud55c\ub2e4. \ud638\ucd9c\ub418\ub294 \ud568\uc218\uac00 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc758 \ub3d9\uc791\uc744 \uc608\uc0c1\ud558\uae30\uac00 \ud6e8\uc52c \uc218\uc6d4\ud558\ub2e4. Example void f ( char * p ); // does f modify *p? (assume it does) void g ( const char * p ); // g does not modify *p Note \ube44- const \ud615\uc2dd\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc790\ub97c \uc804\ub2ec\ud558\ub294 \uac83 \uc790\uccb4\uac00 \uadfc\ubcf8\uc801\uc73c\ub85c \ub098\uc05c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc774\ub294 \ud638\ucd9c\ub418\ub294 \ud568\uc218\uac00 \ud574\ub2f9 \uac1d\uccb4\ub97c \uc218\uc815\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc218\ud589\ub418\uc5b4\uc57c \ud55c\ub2e4. Note const \uc18d\uc131\uc744 \ud0c0\uc785 \ubcc0\ud658\uc744 \ud1b5\ud574 \uc5c6\uc560\uc9c0 \ub9d0\ub77c . Enforcement \uac1d\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc790\ub97c \ube44- const \ud615\uc2dd\uc73c\ub85c \uc804\ub2ec\ubc1b\uc9c0\ub9cc \ud574\ub2f9 \uac1d\uccb4\ub97c \uc218\uc815\ud558\uc9c0\ub294 \uc54a\ub294 \ud568\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c \uac1d\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc790\ub97c const \ud615\uc2dd\uc73c\ub85c \uc804\ub2ec\ubc1b\uc9c0\ub9cc (\ud0c0\uc785 \ubcc0\ud658\uc744 \ud1b5\ud574) \ud574\ub2f9 \uac1d\uccb4\ub97c \uc218\uc815\ud558\ub294 \ud568\uc218\ub97c \uc9c0\uc801\ud558\ub77c Con.4: \uac1c\uccb4 \uc0dd\uc131 \uc774\ud6c4 \ubcc0\ud558\uc9c0 \uc54a\ub294 \uac12\uc740 const \ub85c \uc815\uc758\ud558\ub77c Reason \uc608\uae30\uce58 \uc54a\uc740 \uac1d\uccb4\uc758 \uac12 \ubcc0\uacbd\uc73c\ub85c \uc778\ud574 \ub73b\ubc16\uc758 \uacb0\uacfc\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud55c\ub2e4. Example void f () { int x = 7 ; const int y = 9 ; for (;;) { // ... } // ... } x \uac00 const \ud615\uc2dd\uc73c\ub85c \uc120\uc5b8\ub418\uc9c0 \uc54a\uc558\uc73c\ubbc0\ub85c, \ud574\ub2f9 \ubcc0\uc218\ub294 \ubc18\ubcf5\ubb38 \ub0b4 \uc5b4\ub514\uc120\uac00 \uac12\uc774 \ubcc0\uacbd\ub41c\ub2e4\uace0 \uac00\uc815\ud574\uc57c \ud55c\ub2e4. Enforcement \ubcc0\uacbd\ub418\uc9c0 \uc54a\ub294 \ube44- const \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c. Con.5: \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uacc4\uc0b0\ub420 \uc218 \uc788\ub294 \uac12\uc740 constexpr \uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uc131\ub2a5\uc774 \ud5a5\uc0c1\ub418\uace0, \ucef4\ud30c\uc77c-\uc2dc\uc810 \uac80\uc0ac\uac00 \uc6d0\ud65c\ud574\uc9c0\uba70, \ucef4\ud30c\uc77c-\uc2dc\uc810 \uc5f0\uc0b0(evaluation)\uc774 \ubcf4\uc7a5\ub418\uba70, \uacbd\ud569 \uc870\uac74 (race condition) \uc704\ud5d8\ub3c4 \ud53c\ud560 \uc218 \uc788\ub2e4. Example double x = f ( 2 ); // possible run-time evaluation const double y = f ( 2 ); // possible run-time evaluation constexpr double z = f ( 2 ); // error unless f(2) can be evaluated at compile time Note See F.4. Enforcement \uc0c1\uc218 \ud45c\ud604\uc2dd\uc744 \ud1b5\ud574 \ucd08\uae30\ud654\ub418\ub294 const \uc120\uc5b8\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Const"},{"location":"Const/#con","text":"\uc0c1\uc218\uc5d0 \ub300\ud574\uc11c\ub294 \uacbd\uc7c1 \uc0c1\ud0dc\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. \ud504\ub85c\uadf8\ub7a8 \ub0b4\uc758 \uac1d\uccb4 \uc911 \uadf8 \uac12\uc774 \ubc14\ub014 \uc218 \uc5c6\ub294 \uac83\uc774 \ub9ce\ub2e4\uba74 \ud574\uc11d\ud558\uae30\uac00 \uc26c\uc6b8 \uac83\uc774\ub2e4. \uc778\uc790\ub85c \ub118\uc5b4\uac00\ub294 \uac1c\uccb4\uc758 \uc0c1\ud0dc\uac00 \ubc14\ub00c\uc9c0 \uc54a\ub294 \uac83\uc744 \ubcf4\uc7a5\ud55c\ub2e4\uba74 \uadf8 \uc778\ud130\ud398\uc774\uc2a4\ub294 \uac00\ub3c5\uc131\uc774 \uad49\uc7a5\ud788 \ub192\uc744 \uac83\uc774\ub2e4. \uc0c1\uc218 \uaddc\uce59 \uc694\uc57d: Con.1: \uae30\ubcf8\uc801\uc73c\ub85c \uac1d\uccb4\ub97c \ubcc0\uacbd \ubd88\uac00\ub2a5\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c Con.2: \uae30\ubcf8\uc801\uc73c\ub85c \uba64\ubc84 \ud568\uc218\ub4e4\uc740 const \ub85c \ub9cc\ub4e4\uc5b4\ub77c Con.3: \uae30\ubcf8\uc801\uc73c\ub85c \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub294 const \ub85c \uc804\ub2ec\ud558\ub77c Con.4: \uac1c\uccb4 \uc0dd\uc131 \uc774\ud6c4 \ubcc0\ud558\uc9c0 \uc54a\ub294 \uac12\uc740 const \ub85c \uc815\uc758\ud558\ub77c Con.5: \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uacc4\uc0b0\ub420 \uc218 \uc788\ub294 \uac12\uc740 constexpr \uc744 \uc0ac\uc6a9\ud558\ub77c","title":"Con: \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131"},{"location":"Const/#con1","text":"","title":"Con.1: \uae30\ubcf8\uc801\uc73c\ub85c \uac1d\uccb4\ub97c \ubcc0\uacbd \ubd88\uac00\ub2a5\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Const/#reason","text":"\ubcc0\ud558\uc9c0 \uc54a\ub294 \uac1c\uccb4\ub294 \uc774\ud574\ud558\uae30\uac00 \ub354 \uc27d\ub2e4. \uac12\uc744 \ubc14\uafc0 \ud544\uc694\uac00 \uc788\uc744 \ub54c\uc5d0\ub9cc \uac1c\uccb4\ub97c \ube44- const \ub85c \ub9cc\ub4e4\uc5b4\ub77c. \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\uac70\ub098 \uc54c\uc544\ucc28\ub9ac\uae30 \uc5b4\ub824\uc6b4 \uac12 \ubcc0\uacbd\uc744 \uc608\ubc29\ud55c\ub2e4.","title":"Reason"},{"location":"Const/#example","text":"for ( const int i : c ) cout << i << '\\n' ; // just reading: const for ( int i : c ) cout << i << '\\n' ; // BAD: just reading","title":"Example"},{"location":"Const/#exception","text":"\ud568\uc218\uc758 \uc778\uc790\ub4e4\uc758 \uac12\uc774 \ubcc0\uacbd\ub418\ub294 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\uc9c0\ub9cc, \ub610\ud55c \uc774\ub4e4\uc774 const \ub85c \uc120\uc5b8\ub418\ub294 \uacbd\uc6b0 \uc5ed\uc2dc \ub4dc\ubb3c\ub2e4. \ud63c\ub3d9\uacfc \uc218\ub9ce\uc740 \uac70\uc9d3 \uc591\uc131 (false positives) \ud14c\uc2a4\ud2b8 \uacb0\uacfc\ub97c \ud53c\ud558\uae30 \uc704\ud574, \uc774 \uaddc\uce59\uc740 \ud568\uc218\uc758 \uc778\uc790\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \uc801\uc6a9\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4. void f ( const char * const p ); // pedantic void g ( const int i ); // pedantic \ud568\uc218 \ub0b4\ubd80\uc758 \ubcc0\uc218\ub294 \uc9c0\uc5ed \ubcc0\uc218\uc774\ubbc0\ub85c \uc774\ub97c \ubcc0\uacbd\ud558\ub294 \uc601\ud5a5\ub3c4 \uc9c0\uc5ed\uc801\uc784\uc744 \uc9da\uace0 \uac00\uc790.","title":"Exception"},{"location":"Const/#enforcement","text":"\uac12\uc774 \ubcc0\uacbd\ub418\uc9c0 \uc54a\ub294 \ube44- const \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c (\uc218\ub9ce\uc740 \uac70\uc9d3 \uc591\uc131 \ud14c\uc2a4\ud2b8 \uacb0\uacfc\ub97c \ud53c\ud558\uae30 \uc704\ud574 \uc778\uc790\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 \uc608\uc678\ub85c \ud55c\ub2e4)","title":"Enforcement"},{"location":"Const/#con2-const","text":"","title":"Con.2: \uae30\ubcf8\uc801\uc73c\ub85c \uba64\ubc84 \ud568\uc218\ub4e4\uc740 const\ub85c \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Const/#reason_1","text":"\uba64\ubc84 \ud568\uc218\uac00 \ud574\ub2f9 \uac1d\uccb4\uc758 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 const \ub85c \ud45c\uc2dc\ud558\ub3c4\ub85d \ud55c\ub2e4. \uc774\ub807\uac8c \ud558\uba74 \ub514\uc790\uc778 \uc758\ub3c4\ub97c \ub354\uc6b1 \uba85\ud655\ud558\uac8c \ub4dc\ub7ec\ub0b4\uace0, \uac00\ub3c5\uc131\uc744 \ub192\uc774\uba70, \ucef4\ud30c\uc77c\ub7ec\uac00 \ub354 \ub9ce\uc740 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\uac8c \ub3c4\uc6b0\uba70, \ub54c\uc5d0 \ub530\ub77c\uc11c\ub294 \ucd5c\uc801\ud654\ub97c \ub354 \uc798 \ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4.","title":"Reason"},{"location":"Const/#example-bad","text":"class Point { int x , y ; public : int getx () { return x ; } // BAD, should be const as it doesn't modify the object's state // ... }; void f ( const Point & pt ) { int x = pt . getx (); // ERROR, doesn't compile because getx was not marked const }","title":"Example; bad"},{"location":"Const/#note","text":"\ube44- const \ud615\uc2dd\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc790\ub97c \uc804\ub2ec\ud558\ub294 \uac83 \uc790\uccb4\uac00 \uadfc\ubcf8\uc801\uc73c\ub85c \ub098\uc05c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc774\ub294 \ud638\ucd9c\ub418\ub294 \ud568\uc218\uac00 \ud574\ub2f9 \uac1d\uccb4\ub97c \uc218\uc815\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc218\ud589\ub418\uc5b4\uc57c \ud55c\ub2e4. \ucf54\ub4dc\ub97c \uc77d\ub294 \ub3c5\uc790\ub294 \"plain\" T* \ub098 T& \ub97c \uc804\ub2ec\ubc1b\ub294 \ud568\uc218\uac00 \ud574\ub2f9 \ucc38\uc870\uac00 \uac00\ub9ac\ud0a4\ub294 \uac1d\uccb4\ub97c \uc218\uc815\ud560 \uac83\uc774\ub77c\uace0 \uac00\uc815\ud574\uc57c \ud55c\ub2e4. \ube44\ub85d \ub2f9\uc7a5 \ud604\uc7ac\uc5d0\ub294 \uac1d\uccb4\ub97c \uc218\uc815\uc744 \ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4, \uc774\ud6c4\uc5d0 \uc7ac\ucef4\ud30c\uc77c\uc744 \uac15\uc81c\ud558\uc9c0 \uc54a\uace0\ub3c4 \uac1d\uccb4\ub97c \uc218\uc815\ud558\ub3c4\ub85d \ubcc0\uacbd\ub420 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Const/#note_1","text":"\uae30\uc874 \ucf54\ub4dc/\ub77c\uc774\ube0c\ub7ec\ub9ac \uc911 \uc77c\ubd80\ub294 \ud568\uc218 \ub0b4\uc5d0\uc11c T \ub97c \uc218\uc815\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c\ub3c4 T* \ub85c \uc120\uc5b8\ub41c \ud568\uc218\ub97c \uc81c\uacf5\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc774\ub294 \ucf54\ub4dc\ub97c \"\ud604\ub300\ud654(modernizing)\" \ud558\ub824\ub294 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\ub2e4. \ub2e4\uc74c \ubc29\ubc95\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 \uc815\ud655\ud558\uac8c const \ub97c \uc774\uc6a9\ud558\ub3c4\ub85d \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc5c5\ub370\uc774\ud2b8\ud55c\ub2e4; \uc7a5\uae30\uc801\uc778 \ub300\uc548\uc73c\ub85c \uc88b\ub2e4 \" const \uc18d\uc131\uc744 \ud0c0\uc785 \ubcc0\ud658(cast)\uc744 \ud1b5\ud574 \ud574\uc9c0\ud55c\ub2e4\"; \uac00\ub2a5\ud55c \ud53c\ud558\ub294 \uac83\uc774 \uc88b\ub2e4 wrapper \ud568\uc218\ub97c \uc81c\uacf5\ud55c\ub2e4 Example: void f ( int * p ); // old code: f() does not modify `*p` void f ( const int * p ) { f ( const_cast < int *> ( p )); } // wrapper \uc774\ub807\uac8c wrapper\ub97c \uc774\uc6a9\ud558\ub294 \ud574\uacb0\ucc45\uc740(\ub77c\uc774\ube0c\ub7ec\ub9ac \uc548\uc5d0 \ub4e4\uc5b4 \uc788\uc5b4 \uc9c1\uc811 \uc218\uc815\ud560 \uc218 \uc5c6\ub2e4\ub4e0\uac00 \ud558\ub294 \uc774\uc720\ub85c) f()\uc758 \uc120\uc5b8\uc744 \uc218\uc815\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \uc784\uc2dc\ubc29\ud3b8\uc784\uc5d0 \uc720\uc758\ud558\ub77c.","title":"Note"},{"location":"Const/#note_2","text":"const \uba64\ubc84 \ud568\uc218\ub3c4 mutable \ud558\uac70\ub098 \ud3ec\uc778\ud130 \uba64\ubc84\ub97c \ud1b5\ud574 \uc811\uadfc\ub418\ub294 \uac1d\uccb4\uc5d0 \ub300\ud574\uc11c\ub294 \uac12\uc744 \uc218\uc815\ud560 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \ubc29\uc2dd\uc758 \ud754\ud55c \uc608\ub294 \ubcf5\uc7a1\ud55c \uacc4\uc0b0\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \ud558\uc9c0 \uc54a\uae30 \uc704\ud574 \uce90\uc2dc\ub97c \uc720\uc9c0\ud558\ub294 \uacbd\uc6b0\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc544\ub798 Date \ub294 \ubc18\ubcf5\uc801\uc778 \uc0ac\uc6a9\uc744 \ub2e8\uc21c\ud654\ud558\uae30 \uc704\ud574 \ub0a0\uc9dc\uc758 \ubb38\uc790\uc5f4 \ud45c\ud604\uc744 \uce90\uc2dc(\uae30\uc5b5) \ud558\uace0 \uc788\ub2e4: class Date { public : // ... const string & string_ref () const { if ( string_val == \"\" ) compute_string_rep (); return string_val ; } // ... private : void compute_string_rep () const ; // compute string representation and place it in string_val mutable string string_val ; // ... }; \uc774\uc5d0 \ub300\ud574\uc11c \ub2e4\ub978 \ubc29\uc2dd\uc73c\ub85c \uc774\uc57c\uae30\ud558\uba74, const \ud568\uc740 \uc804\uc774\uc801(transitive) \uc774\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc774\ub2e4. const \uba64\ubc84 \ud568\uc218\uc5d0\uac8c \uc788\uc5b4 mutable \ud55c \uba64\ubc84\uc758 \uac12\uacfc \ube44- const \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uc811\uadfc\ud558\ub294 \uac1d\uccb4\uc758 \uac12\uc744 \ubcc0\uacbd\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ud074\ub798\uc2a4\uac00 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \uc81c\uacf5\ud558\ub294 \uc758\ubbf8\ub860(\ubd88\ubcc0 \uc870\uac74)\uc5d0 \uc758\uac70\ud558\uc5ec \ud0c0\ub2f9\ud558\ub2e4\uace0 \uc5ec\uaca8\uc9c8 \uacbd\uc6b0\uc5d0\ub9cc \uc774\ub7ec\ud55c \uac12 \ubcc0\uacbd\uc774 \uc774\ub8e8\uc5b4\uc9c8 \uc218 \uc788\ub3c4\ub85d \ubcf4\uc7a5\ud558\ub294 \uac83\uc740 \ud574\ub2f9 \ud074\ub798\uc2a4\uc758 \uc5ed\ud560\uc774\ub2e4. See also : Pimpl","title":"Note"},{"location":"Const/#enforcement_1","text":"const \ud45c\uc2dc\uac00 \ub418\uc5b4 \uc788\uc9c0 \uc54a\uc9c0\ub9cc, \uc5b4\ub5a0\ud55c \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c\ub3c4 \ube44- const \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\ub294 \uba64\ubc84 \ud568\uc218\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Const/#con3-const","text":"","title":"Con.3: \uae30\ubcf8\uc801\uc73c\ub85c \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub294 const\ub85c \uc804\ub2ec\ud558\ub77c"},{"location":"Const/#reason_2","text":"\ud638\ucd9c\ub418\ub294 \ud568\uc218\uac00 \uc608\uc0c1\uce58 \ubabb\ud558\uac8c \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud55c\ub2e4. \ud638\ucd9c\ub418\ub294 \ud568\uc218\uac00 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc758 \ub3d9\uc791\uc744 \uc608\uc0c1\ud558\uae30\uac00 \ud6e8\uc52c \uc218\uc6d4\ud558\ub2e4.","title":"Reason"},{"location":"Const/#example_1","text":"void f ( char * p ); // does f modify *p? (assume it does) void g ( const char * p ); // g does not modify *p","title":"Example"},{"location":"Const/#note_3","text":"\ube44- const \ud615\uc2dd\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc790\ub97c \uc804\ub2ec\ud558\ub294 \uac83 \uc790\uccb4\uac00 \uadfc\ubcf8\uc801\uc73c\ub85c \ub098\uc05c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc774\ub294 \ud638\ucd9c\ub418\ub294 \ud568\uc218\uac00 \ud574\ub2f9 \uac1d\uccb4\ub97c \uc218\uc815\ud558\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc218\ud589\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Note"},{"location":"Const/#note_4","text":"const \uc18d\uc131\uc744 \ud0c0\uc785 \ubcc0\ud658\uc744 \ud1b5\ud574 \uc5c6\uc560\uc9c0 \ub9d0\ub77c .","title":"Note"},{"location":"Const/#enforcement_2","text":"\uac1d\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc790\ub97c \ube44- const \ud615\uc2dd\uc73c\ub85c \uc804\ub2ec\ubc1b\uc9c0\ub9cc \ud574\ub2f9 \uac1d\uccb4\ub97c \uc218\uc815\ud558\uc9c0\ub294 \uc54a\ub294 \ud568\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c \uac1d\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\uc790\ub97c const \ud615\uc2dd\uc73c\ub85c \uc804\ub2ec\ubc1b\uc9c0\ub9cc (\ud0c0\uc785 \ubcc0\ud658\uc744 \ud1b5\ud574) \ud574\ub2f9 \uac1d\uccb4\ub97c \uc218\uc815\ud558\ub294 \ud568\uc218\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Const/#con4-const","text":"","title":"Con.4: \uac1c\uccb4 \uc0dd\uc131 \uc774\ud6c4 \ubcc0\ud558\uc9c0 \uc54a\ub294 \uac12\uc740 const\ub85c \uc815\uc758\ud558\ub77c"},{"location":"Const/#reason_3","text":"\uc608\uae30\uce58 \uc54a\uc740 \uac1d\uccb4\uc758 \uac12 \ubcc0\uacbd\uc73c\ub85c \uc778\ud574 \ub73b\ubc16\uc758 \uacb0\uacfc\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\uc744 \ubc29\uc9c0\ud55c\ub2e4.","title":"Reason"},{"location":"Const/#example_2","text":"void f () { int x = 7 ; const int y = 9 ; for (;;) { // ... } // ... } x \uac00 const \ud615\uc2dd\uc73c\ub85c \uc120\uc5b8\ub418\uc9c0 \uc54a\uc558\uc73c\ubbc0\ub85c, \ud574\ub2f9 \ubcc0\uc218\ub294 \ubc18\ubcf5\ubb38 \ub0b4 \uc5b4\ub514\uc120\uac00 \uac12\uc774 \ubcc0\uacbd\ub41c\ub2e4\uace0 \uac00\uc815\ud574\uc57c \ud55c\ub2e4.","title":"Example"},{"location":"Const/#enforcement_3","text":"\ubcc0\uacbd\ub418\uc9c0 \uc54a\ub294 \ube44- const \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Const/#con5-constexpr","text":"","title":"Con.5: \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uacc4\uc0b0\ub420 \uc218 \uc788\ub294 \uac12\uc740 constexpr\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Const/#reason_4","text":"\uc131\ub2a5\uc774 \ud5a5\uc0c1\ub418\uace0, \ucef4\ud30c\uc77c-\uc2dc\uc810 \uac80\uc0ac\uac00 \uc6d0\ud65c\ud574\uc9c0\uba70, \ucef4\ud30c\uc77c-\uc2dc\uc810 \uc5f0\uc0b0(evaluation)\uc774 \ubcf4\uc7a5\ub418\uba70, \uacbd\ud569 \uc870\uac74 (race condition) \uc704\ud5d8\ub3c4 \ud53c\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Const/#example_3","text":"double x = f ( 2 ); // possible run-time evaluation const double y = f ( 2 ); // possible run-time evaluation constexpr double z = f ( 2 ); // error unless f(2) can be evaluated at compile time","title":"Example"},{"location":"Const/#note_5","text":"See F.4.","title":"Note"},{"location":"Const/#enforcement_4","text":"\uc0c1\uc218 \ud45c\ud604\uc2dd\uc744 \ud1b5\ud574 \ucd08\uae30\ud654\ub418\ub294 const \uc120\uc5b8\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Enum/","text":"Enum: \uc5f4\uac70\ud615 \uc5ed\uc8fc : \uc5f4\uac70\ud615(enumeration) \uc5ed\uc8fc : \uc5f4\uac70\uccb4(enumerator) \uc5ed\uc8fc : \uc5f4\uac70\uac12(enumerator value) \uc5f4\uac70\ud615\uc740 \uc815\uc218 \uac12\uc758 \uc9d1\ud569\uc744 \uc815\uc758\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\uba70, \uadf8\ub7f0 \uac12\ub4e4\uc758 \uc9d1\ud569\uc744 \ud0c0\uc785\uc73c\ub85c \uc815\uc758\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4. \uc5f4\uac70\ud615\uc5d0\ub294 \ub450 \uc885\ub958\uac00 \uc788\ub294\ub370, \"\ub2e8\uc21c\ud55c\" enum \uacfc class enum \uc774\ub2e4. \uc5f4\uac70\ud615 \uaddc\uce59 \uc694\uc57d: Enum.1: \ub9e4\ud06c\ub85c\ubcf4\ub2e4 \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud558\ub77c Enum.2: \uc11c\ub85c \uad00\ub828\uc788\ub294 \uc0c1\uc218\ub4e4\uc758 \uc9d1\ud569\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud558\ub77c Enum.3: \ub2e8\uc21c\ud55c enum \ubcf4\ub2e4 enum class \ub97c \uc120\ud638\ud558\ub77c Enum.4: \uc548\uc804\ud558\uace0 \ub2e8\uc21c\ud55c \uc0ac\uc6a9\uc744 \uc704\ud574 \uc5f4\uac70\ud615\ub4e4\uc744 \uc704\ud55c \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\ub77c Enum.5: \uc5f4\uac70\uccb4\ub4e4\uc744 ALL_CAPS \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Enum.6: \uc774\ub984\uc5c6\ub294 \uc5f4\uac70\ud615\uc744 \uc9c0\uc591\ud558\ub77c Enum.7: \ud544\uc694\ud560 \ub54c\ub9cc \uae30\ubcf8 \ud0c0\uc785\uc744 \uba85\uc2dc\ud558\ub77c Enum.8: \uc5f4\uac70\uccb4\ub4e4\uc758 \uac12\uc740 \ud544\uc694\ud560\ub54c\ub9cc \uba85\uc2dc\ud558\ub77c Enum.1: \ub9e4\ud06c\ub85c\ubcf4\ub2e4 \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ub9e4\ud06c\ub85c\ub294 \uc720\ud6a8\ubc94\uc704 \ub610\ub294 \ud0c0\uc785 \uaddc\uce59\ub4e4\uc744 \ubb34\uc2dc\ud55c\ub2e4. \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c \uc18c\uba78\ub418\uae30 \ub54c\ubb38\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c \ub514\ubc84\uae45 \ub3c4\uad6c\uc5d0\uc11c\ub294 \ud655\uc778\ud560 \uc218 \uc5c6\ub2e4. Example \uc624\ub798\ub41c, \ub098\uc05c \ucf54\ub4dc\ub97c \uba3c\uc800 \ubcf4\uc790. // webcolors.h (3rd party header) #define RED 0xFF0000 #define GREEN 0x00FF00 #define BLUE 0x0000FF // productinfo.h // \uc5ec\uae30\uc11c\ub294 \uc81c\ud488\uc758 \uc0c9\uc5d0 \ub530\ub978 \ubcf4\uc870 \ud0c0\uc785\uc744 \uc815\uc758\ud55c\ub2e4 #define RED 0 #define PURPLE 1 #define BLUE 2 int webby = BLUE ; // webby == 2; \uc5c9\ub6b1\ud55c \uac12\uc774 \uc0ac\uc6a9\ub41c\ub2e4 enum \ub300\uc2e0 \uc774\ub807\uac8c \uc791\uc131\ud560 \uc218 \uc788\ub2e4: enum class Web_color { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF }; enum class Product_info { red = 0 , purple = 1 , blue = 2 }; int webby = blue ; // \uc5d0\ub7ec: enum class\ub97c \uba85\uc2dc\ud574\uc57c\ud55c\ub2e4 Web_color webby = Web_color :: blue ; \uc774\ub984\uc758 \ucda9\ub3cc\uc744 \ub9c9\uae30 \uc704\ud574\uc11c enum class \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 Enforcement \uc815\uc218 \uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \ub9e4\ud06c\ub85c\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c Enum.2: \uc11c\ub85c \uad00\ub828\uc788\ub294 \uc0c1\uc218\ub4e4\uc758 \uc9d1\ud569\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ubaa8\ub4e0 \uc5f4\uac70\ud615\ub4e4\uc740 \uc5f4\uac70\uccb4\ub4e4\uc774 \ud2b9\uc815\ud55c \ud0c0\uc785\uc73c\ub85c \ubb36\uc77c \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 Example enum class Web_color { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF }; Note \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud574 switch \ud558\ub294 \uac83\uc740 \uc77c\ubc18\uc801\uc774\uba70, \ube44\uc815\uc0c1\uc801\uc778 case \uc5d0 \ub300\ud574 \ucef4\ud30c\uc77c\ub7ec\uac00 \uacbd\uace0\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74: enum class Product_info { red = 0 , purple = 1 , blue = 2 }; void print ( Product_info inf ) { // default\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0, // case\uac00 \ubaa8\ub4e0 enumerator\ub4e4\uc744 \uac80\ucd9c\ud558\uc9c0\ub3c4 \uc54a\ub294\ub2e4. switch ( inf ) { case Product_info :: red : cout << \"red\" ; break ; case Product_info :: purple : cout << \"purple\" ; break ; } } \uc774\ucc98\ub7fc \ud55c\uac1c \ubaa8\uc790\ub780(off-by-one) switch \uad6c\ubb38\uc740 \ubcf4\ud1b5 \uc5f4\uac70\uccb4\uac00 \ucd94\uac00\ub418\uc5c8\uac70\ub098 \ucda9\ubd84\ud55c \ud14c\uc2a4\ud2b8\uac00 \uc5c6\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ubc1c\uc0dd\ud55c\ub2e4. Enforcement case \uac00 \ubaa8\ub4e0 \uc5f4\uac70\uccb4\ub4e4\uc744 \uace0\ub824\ud558\uc9c0 \uc54a\ub294 switch \uad6c\ubb38\uc744 \uc9c0\uc801\ud558\ub77c case \uac00 \uc77c\ubd80 \uc5f4\uac70\uccb4\ub9cc \uc0ac\uc6a9\ud558\uace0, default \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c Enum.3: \ub2e8\uc21c\ud55c enum \ubcf4\ub2e4 enum class \ub97c \uc120\ud638\ud558\ub77c Reason \uc624\ud574\uc758 \uc18c\uc9c0\uac00 \uc5c6\ub2e4. \uc804\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c enum\uc740 int\uc640 \ub2e4\ub97c \uac83\uc774 \uc5c6\ub2e4. Example void Print_color ( int color ); enum Web_color { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF }; enum Product_info { Red = 0 , Purple = 1 , Blue = 2 }; Web_color webby = Web_color :: blue ; // \ubd84\uba85 \uc774 \ub458\uc911 \ud558\ub098\ub294 \ubc84\uadf8\ub97c \uc77c\uc73c\ud0ac \uac83\uc774\ub2e4 Print_color ( webby ); Print_color ( Product_info :: Blue ); \ub300\uc2e0, enum class \uc0ac\uc6a9\ud558\uba74: void Print_color ( int color ); enum class Web_color { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF }; enum class Product_info { red = 0 , purple = 1 , blue = 2 }; Web_color webby = Web_color :: blue ; Print_color ( webby ); // Error: cannot convert Web_color to int. Print_color ( Product_info :: Red ); // Error: cannot convert Product_info to int. Enforcement (\uc26c\uc6c0) \ud074\ub798\uc2a4\uac00 \uc544\ub2cc enum \uc815\uc758\ub97c \uc870\uc2ec\ud558\ub77c. Enum.4: \uc548\uc804\ud558\uace0 \ub2e8\uc21c\ud55c \uc0ac\uc6a9\uc744 \uc704\ud574 \uc5f4\uac70\ud615\ub4e4\uc744 \uc704\ud55c \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\ub77c Reason \uc5d0\ub7ec\ub97c \ubc29\uc9c0\ud558\ub294\ub370 \ud3b8\ub9ac\ud558\ub2e4 Example enum class Day { mon , tue , wed , thu , fri , sat , sun }; Day operator ++ ( Day & d ) { return d == Day :: sun ? Day :: mon : Day { ++ d }; } Day today = Day :: sat ; Day tomorrow = ++ today ; Enforcement Flag repeated expressions cast back into an enumeration. Enum.5: \uc5f4\uac70\uccb4\ub4e4\uc744 ALL_CAPS \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \ub9e4\ud06c\ub85c\ub4e4\uc758 \ucda9\ub3cc\uc744 \ubc29\uc9c0\ud55c\ub2e4 Example, bad // webcolors.h (third party header) #define RED 0xFF0000 #define GREEN 0x00FF00 #define BLUE 0x0000FF // productinfo.h // \ub9e4\ud06c\ub85c\uac00 \ubb38\ubc95\uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4 enum class Product_info { RED , PURPLE , BLUE }; Enforcement \ub300\ubb38\uc790\ub9cc\uc73c\ub85c \uad6c\uc131\ub41c \uc5f4\uac70\uccb4\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c Enum.6: \uc774\ub984\uc5c6\ub294 \uc5f4\uac70\ud615\uc744 \uc9c0\uc591\ud558\ub77c Reason \uc5f4\uac70\ud615\uc5d0 \uc774\ub984\uc744 \ubd99\uc77c \uc218 \uc5c6\ub2e4\uba74, \uc11c\ub85c \uc0c1\uad00\uc5c6\ub294 \uac12\ub4e4\uc774\ub2e4. Example, bad enum { red = 0xFF0000 , scale = 4 , is_signed = 1 }; \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc815\uc218 \uc0c1\uc218\ub4e4\uc744 \uc815\uc758\ud558\ub294 \ud3b8\ub9ac\ud55c \ubc29\ubc95\uc774 \ub098\ud0c0\ub098\uae30 \uc804\uae4c\uc9c4 \uc77c\ubc18\uc801\uc774\uc5c8\ub2e4. Alternative \ub300\uc2e0 constexpr \ub97c \uc0ac\uc6a9\ud558\ub77c : constexpr int red = 0xFF0000 ; constexpr short scale = 4 ; constexpr bool is_signed = true ; Enforcement \uc774\ub984\uc5c6\ub294 \uc5f4\uac70\ud615\uc744 \uc9c0\uc801\ud558\ub77c Enum.7: \ud544\uc694\ud560 \ub54c\ub9cc \uae30\ubcf8 \ud0c0\uc785\uc744 \uba85\uc2dc\ud558\ub77c Reason \uae30\ubcf8 \ud0c0\uc785\uc740 \uc77d\uace0 \uc4f0\uae30\uc5d0 \uc27d\ub2e4. int \ub294 \uae30\ubcf8 \uc815\uc218 \ud0c0\uc785\uc774\uba70, C \uc5b8\uc5b4\uc758 enum \uacfc \ud638\ud658\ub41c\ub2e4. Example // \uae30\ubcf8 \ud0c0\uc785(char)\uac00 \uacf5\uac04\uc744 \uc808\uc57d\ud574\uc900\ub2e4 enum class Direction : char { n , s , e , w , ne , nw , se , sw }; // \uae30\ubcf8 \ud0c0\uc785(int)\uac00 \uacf5\uac04\uc744 \uc18c\ubaa8\ud55c\ub2e4.(redundant) enum class Web_color : int { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF }; Note \uae30\ubcf8 \ud0c0\uc785\uc744 \uc815\uc758\ud558\ub294 \uac83\uc740 \uc804\ubc29 \uc120\uc5b8\uc774 \ud544\uc694\ud55c \uacbd\uc6b0 \ud544\uc218\uc801\uc774\ub2e4. \uc5ed\uc8fc : \uc804\ubc29 \uc120\uc5b8(forward declaration) // Forward declaration enum Flags : char ; void f ( Flags ); // .... // Definition enum flags : char { /* ... */ }; Enforcement ???? Enum.8: \uc5f4\uac70\uccb4\ub4e4\uc758 \uac12\uc740 \ud544\uc694\ud560\ub54c\ub9cc \uba85\uc2dc\ud558\ub77c Reason \uc774\ub294 \uac00\uc7a5 \ub2e8\uc21c\ud55c \ubc29\ubc95\uc774\uba70, \uc5f4\uac70\uac12\uc758 \uc911\ubcf5\uc744 \ubc29\uc9c0\ud55c\ub2e4. \uc5f4\uac70\uccb4\ub4e4\uc774 \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud558\uba74 \uc5f0\uc18d\ub41c \uac12\uc744 \uc0ac\uc6a9\ud558\uac8c \ub418\ubbc0\ub85c switch \uad6c\ubb38\uc758 \uad6c\ud604\uc5d0 \uc88b\ub2e4. Example enum class Col1 { red , yellow , blue }; enum class Col2 { red = 1 , yellow = 2 , blue = 2 }; // typo enum class Month { jan = 1 , feb , mar , apr , may , jun , jul , august , sep , oct , nov , dec }; // \ub2ec\ub825\uc740 1\uc6d4\ubd80\ud130 \uc2dc\uc791\ud55c\ub2e4 enum class Base_flag { dec = 1 , oct = dec << 1 , hex = dec << 2 }; // \ube44\ud2b8\ub4e4\uc758 \uc9d1\ud569 ( Month \uc640 \uac19\uc774) \uad00\uc2b5\uc801\uc778 \uac12\uc774 \ud544\uc694\ud55c \uacbd\uc6b0, \ub610\ub294 ( Base_flag \uc758 \ud2b9\uc815 \ube44\ud2b8 \ucc98\ub7fc)\uc5f0\uc18d\uc801\uc778 \uac12\uc774 \uc801\ud569\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uac12\uc744 \uba85\uc2dc\ud558\ub77c. Enforcement \uc911\ubcf5\ub41c \uc5f4\uac70\uac12\uc5d0\ub294 \uc9c0\uc801\ud558\ub77c \uc5f0\uc18d\uc801\uc778 \uc5f4\uac70\uac12\uc744 \uba85\uc2dc\ud558\ub294 \uacbd\uc6b0\ub294 \uc9c0\uc801\ud558\ub77c","title":"Enum"},{"location":"Enum/#enum","text":"\uc5ed\uc8fc : \uc5f4\uac70\ud615(enumeration) \uc5ed\uc8fc : \uc5f4\uac70\uccb4(enumerator) \uc5ed\uc8fc : \uc5f4\uac70\uac12(enumerator value) \uc5f4\uac70\ud615\uc740 \uc815\uc218 \uac12\uc758 \uc9d1\ud569\uc744 \uc815\uc758\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\uba70, \uadf8\ub7f0 \uac12\ub4e4\uc758 \uc9d1\ud569\uc744 \ud0c0\uc785\uc73c\ub85c \uc815\uc758\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4. \uc5f4\uac70\ud615\uc5d0\ub294 \ub450 \uc885\ub958\uac00 \uc788\ub294\ub370, \"\ub2e8\uc21c\ud55c\" enum \uacfc class enum \uc774\ub2e4. \uc5f4\uac70\ud615 \uaddc\uce59 \uc694\uc57d: Enum.1: \ub9e4\ud06c\ub85c\ubcf4\ub2e4 \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud558\ub77c Enum.2: \uc11c\ub85c \uad00\ub828\uc788\ub294 \uc0c1\uc218\ub4e4\uc758 \uc9d1\ud569\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud558\ub77c Enum.3: \ub2e8\uc21c\ud55c enum \ubcf4\ub2e4 enum class \ub97c \uc120\ud638\ud558\ub77c Enum.4: \uc548\uc804\ud558\uace0 \ub2e8\uc21c\ud55c \uc0ac\uc6a9\uc744 \uc704\ud574 \uc5f4\uac70\ud615\ub4e4\uc744 \uc704\ud55c \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\ub77c Enum.5: \uc5f4\uac70\uccb4\ub4e4\uc744 ALL_CAPS \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Enum.6: \uc774\ub984\uc5c6\ub294 \uc5f4\uac70\ud615\uc744 \uc9c0\uc591\ud558\ub77c Enum.7: \ud544\uc694\ud560 \ub54c\ub9cc \uae30\ubcf8 \ud0c0\uc785\uc744 \uba85\uc2dc\ud558\ub77c Enum.8: \uc5f4\uac70\uccb4\ub4e4\uc758 \uac12\uc740 \ud544\uc694\ud560\ub54c\ub9cc \uba85\uc2dc\ud558\ub77c","title":"Enum: \uc5f4\uac70\ud615"},{"location":"Enum/#enum1","text":"","title":"Enum.1: \ub9e4\ud06c\ub85c\ubcf4\ub2e4 \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Enum/#reason","text":"\ub9e4\ud06c\ub85c\ub294 \uc720\ud6a8\ubc94\uc704 \ub610\ub294 \ud0c0\uc785 \uaddc\uce59\ub4e4\uc744 \ubb34\uc2dc\ud55c\ub2e4. \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c \uc18c\uba78\ub418\uae30 \ub54c\ubb38\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c \ub514\ubc84\uae45 \ub3c4\uad6c\uc5d0\uc11c\ub294 \ud655\uc778\ud560 \uc218 \uc5c6\ub2e4.","title":"Reason"},{"location":"Enum/#example","text":"\uc624\ub798\ub41c, \ub098\uc05c \ucf54\ub4dc\ub97c \uba3c\uc800 \ubcf4\uc790. // webcolors.h (3rd party header) #define RED 0xFF0000 #define GREEN 0x00FF00 #define BLUE 0x0000FF // productinfo.h // \uc5ec\uae30\uc11c\ub294 \uc81c\ud488\uc758 \uc0c9\uc5d0 \ub530\ub978 \ubcf4\uc870 \ud0c0\uc785\uc744 \uc815\uc758\ud55c\ub2e4 #define RED 0 #define PURPLE 1 #define BLUE 2 int webby = BLUE ; // webby == 2; \uc5c9\ub6b1\ud55c \uac12\uc774 \uc0ac\uc6a9\ub41c\ub2e4 enum \ub300\uc2e0 \uc774\ub807\uac8c \uc791\uc131\ud560 \uc218 \uc788\ub2e4: enum class Web_color { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF }; enum class Product_info { red = 0 , purple = 1 , blue = 2 }; int webby = blue ; // \uc5d0\ub7ec: enum class\ub97c \uba85\uc2dc\ud574\uc57c\ud55c\ub2e4 Web_color webby = Web_color :: blue ; \uc774\ub984\uc758 \ucda9\ub3cc\uc744 \ub9c9\uae30 \uc704\ud574\uc11c enum class \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4","title":"Example"},{"location":"Enum/#enforcement","text":"\uc815\uc218 \uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \ub9e4\ud06c\ub85c\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Enum/#enum2","text":"","title":"Enum.2: \uc11c\ub85c \uad00\ub828\uc788\ub294 \uc0c1\uc218\ub4e4\uc758 \uc9d1\ud569\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Enum/#reason_1","text":"\ubaa8\ub4e0 \uc5f4\uac70\ud615\ub4e4\uc740 \uc5f4\uac70\uccb4\ub4e4\uc774 \ud2b9\uc815\ud55c \ud0c0\uc785\uc73c\ub85c \ubb36\uc77c \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4","title":"Reason"},{"location":"Enum/#example_1","text":"enum class Web_color { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF };","title":"Example"},{"location":"Enum/#note","text":"\uc5f4\uac70\ud615\uc744 \uc0ac\uc6a9\ud574 switch \ud558\ub294 \uac83\uc740 \uc77c\ubc18\uc801\uc774\uba70, \ube44\uc815\uc0c1\uc801\uc778 case \uc5d0 \ub300\ud574 \ucef4\ud30c\uc77c\ub7ec\uac00 \uacbd\uace0\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74: enum class Product_info { red = 0 , purple = 1 , blue = 2 }; void print ( Product_info inf ) { // default\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0, // case\uac00 \ubaa8\ub4e0 enumerator\ub4e4\uc744 \uac80\ucd9c\ud558\uc9c0\ub3c4 \uc54a\ub294\ub2e4. switch ( inf ) { case Product_info :: red : cout << \"red\" ; break ; case Product_info :: purple : cout << \"purple\" ; break ; } } \uc774\ucc98\ub7fc \ud55c\uac1c \ubaa8\uc790\ub780(off-by-one) switch \uad6c\ubb38\uc740 \ubcf4\ud1b5 \uc5f4\uac70\uccb4\uac00 \ucd94\uac00\ub418\uc5c8\uac70\ub098 \ucda9\ubd84\ud55c \ud14c\uc2a4\ud2b8\uac00 \uc5c6\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ubc1c\uc0dd\ud55c\ub2e4.","title":"Note"},{"location":"Enum/#enforcement_1","text":"case \uac00 \ubaa8\ub4e0 \uc5f4\uac70\uccb4\ub4e4\uc744 \uace0\ub824\ud558\uc9c0 \uc54a\ub294 switch \uad6c\ubb38\uc744 \uc9c0\uc801\ud558\ub77c case \uac00 \uc77c\ubd80 \uc5f4\uac70\uccb4\ub9cc \uc0ac\uc6a9\ud558\uace0, default \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Enum/#enum3-enum-enum-class","text":"","title":"Enum.3: \ub2e8\uc21c\ud55c enum\ubcf4\ub2e4 enum class\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Enum/#reason_2","text":"\uc624\ud574\uc758 \uc18c\uc9c0\uac00 \uc5c6\ub2e4. \uc804\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c enum\uc740 int\uc640 \ub2e4\ub97c \uac83\uc774 \uc5c6\ub2e4.","title":"Reason"},{"location":"Enum/#example_2","text":"void Print_color ( int color ); enum Web_color { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF }; enum Product_info { Red = 0 , Purple = 1 , Blue = 2 }; Web_color webby = Web_color :: blue ; // \ubd84\uba85 \uc774 \ub458\uc911 \ud558\ub098\ub294 \ubc84\uadf8\ub97c \uc77c\uc73c\ud0ac \uac83\uc774\ub2e4 Print_color ( webby ); Print_color ( Product_info :: Blue ); \ub300\uc2e0, enum class \uc0ac\uc6a9\ud558\uba74: void Print_color ( int color ); enum class Web_color { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF }; enum class Product_info { red = 0 , purple = 1 , blue = 2 }; Web_color webby = Web_color :: blue ; Print_color ( webby ); // Error: cannot convert Web_color to int. Print_color ( Product_info :: Red ); // Error: cannot convert Product_info to int.","title":"Example"},{"location":"Enum/#enforcement_2","text":"(\uc26c\uc6c0) \ud074\ub798\uc2a4\uac00 \uc544\ub2cc enum \uc815\uc758\ub97c \uc870\uc2ec\ud558\ub77c.","title":"Enforcement"},{"location":"Enum/#enum4","text":"","title":"Enum.4: \uc548\uc804\ud558\uace0 \ub2e8\uc21c\ud55c \uc0ac\uc6a9\uc744 \uc704\ud574 \uc5f4\uac70\ud615\ub4e4\uc744 \uc704\ud55c \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\ub77c"},{"location":"Enum/#reason_3","text":"\uc5d0\ub7ec\ub97c \ubc29\uc9c0\ud558\ub294\ub370 \ud3b8\ub9ac\ud558\ub2e4","title":"Reason"},{"location":"Enum/#example_3","text":"enum class Day { mon , tue , wed , thu , fri , sat , sun }; Day operator ++ ( Day & d ) { return d == Day :: sun ? Day :: mon : Day { ++ d }; } Day today = Day :: sat ; Day tomorrow = ++ today ;","title":"Example"},{"location":"Enum/#enforcement_3","text":"Flag repeated expressions cast back into an enumeration.","title":"Enforcement"},{"location":"Enum/#enum5-all_caps","text":"","title":"Enum.5: \uc5f4\uac70\uccb4\ub4e4\uc744 ALL_CAPS\ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Enum/#reason_4","text":"\ub9e4\ud06c\ub85c\ub4e4\uc758 \ucda9\ub3cc\uc744 \ubc29\uc9c0\ud55c\ub2e4","title":"Reason"},{"location":"Enum/#example-bad","text":"// webcolors.h (third party header) #define RED 0xFF0000 #define GREEN 0x00FF00 #define BLUE 0x0000FF // productinfo.h // \ub9e4\ud06c\ub85c\uac00 \ubb38\ubc95\uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4 enum class Product_info { RED , PURPLE , BLUE };","title":"Example, bad"},{"location":"Enum/#enforcement_4","text":"\ub300\ubb38\uc790\ub9cc\uc73c\ub85c \uad6c\uc131\ub41c \uc5f4\uac70\uccb4\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Enum/#enum6","text":"","title":"Enum.6: \uc774\ub984\uc5c6\ub294 \uc5f4\uac70\ud615\uc744 \uc9c0\uc591\ud558\ub77c"},{"location":"Enum/#reason_5","text":"\uc5f4\uac70\ud615\uc5d0 \uc774\ub984\uc744 \ubd99\uc77c \uc218 \uc5c6\ub2e4\uba74, \uc11c\ub85c \uc0c1\uad00\uc5c6\ub294 \uac12\ub4e4\uc774\ub2e4.","title":"Reason"},{"location":"Enum/#example-bad_1","text":"enum { red = 0xFF0000 , scale = 4 , is_signed = 1 }; \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc815\uc218 \uc0c1\uc218\ub4e4\uc744 \uc815\uc758\ud558\ub294 \ud3b8\ub9ac\ud55c \ubc29\ubc95\uc774 \ub098\ud0c0\ub098\uae30 \uc804\uae4c\uc9c4 \uc77c\ubc18\uc801\uc774\uc5c8\ub2e4.","title":"Example, bad"},{"location":"Enum/#alternative","text":"\ub300\uc2e0 constexpr \ub97c \uc0ac\uc6a9\ud558\ub77c : constexpr int red = 0xFF0000 ; constexpr short scale = 4 ; constexpr bool is_signed = true ;","title":"Alternative"},{"location":"Enum/#enforcement_5","text":"\uc774\ub984\uc5c6\ub294 \uc5f4\uac70\ud615\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Enum/#enum7","text":"","title":"Enum.7: \ud544\uc694\ud560 \ub54c\ub9cc \uae30\ubcf8 \ud0c0\uc785\uc744 \uba85\uc2dc\ud558\ub77c"},{"location":"Enum/#reason_6","text":"\uae30\ubcf8 \ud0c0\uc785\uc740 \uc77d\uace0 \uc4f0\uae30\uc5d0 \uc27d\ub2e4. int \ub294 \uae30\ubcf8 \uc815\uc218 \ud0c0\uc785\uc774\uba70, C \uc5b8\uc5b4\uc758 enum \uacfc \ud638\ud658\ub41c\ub2e4.","title":"Reason"},{"location":"Enum/#example_4","text":"// \uae30\ubcf8 \ud0c0\uc785(char)\uac00 \uacf5\uac04\uc744 \uc808\uc57d\ud574\uc900\ub2e4 enum class Direction : char { n , s , e , w , ne , nw , se , sw }; // \uae30\ubcf8 \ud0c0\uc785(int)\uac00 \uacf5\uac04\uc744 \uc18c\ubaa8\ud55c\ub2e4.(redundant) enum class Web_color : int { red = 0xFF0000 , green = 0x00FF00 , blue = 0x0000FF };","title":"Example"},{"location":"Enum/#note_1","text":"\uae30\ubcf8 \ud0c0\uc785\uc744 \uc815\uc758\ud558\ub294 \uac83\uc740 \uc804\ubc29 \uc120\uc5b8\uc774 \ud544\uc694\ud55c \uacbd\uc6b0 \ud544\uc218\uc801\uc774\ub2e4. \uc5ed\uc8fc : \uc804\ubc29 \uc120\uc5b8(forward declaration) // Forward declaration enum Flags : char ; void f ( Flags ); // .... // Definition enum flags : char { /* ... */ };","title":"Note"},{"location":"Enum/#enforcement_6","text":"????","title":"Enforcement"},{"location":"Enum/#enum8","text":"","title":"Enum.8: \uc5f4\uac70\uccb4\ub4e4\uc758 \uac12\uc740 \ud544\uc694\ud560\ub54c\ub9cc \uba85\uc2dc\ud558\ub77c"},{"location":"Enum/#reason_7","text":"\uc774\ub294 \uac00\uc7a5 \ub2e8\uc21c\ud55c \ubc29\ubc95\uc774\uba70, \uc5f4\uac70\uac12\uc758 \uc911\ubcf5\uc744 \ubc29\uc9c0\ud55c\ub2e4. \uc5f4\uac70\uccb4\ub4e4\uc774 \uae30\ubcf8\uac12\uc744 \uc0ac\uc6a9\ud558\uba74 \uc5f0\uc18d\ub41c \uac12\uc744 \uc0ac\uc6a9\ud558\uac8c \ub418\ubbc0\ub85c switch \uad6c\ubb38\uc758 \uad6c\ud604\uc5d0 \uc88b\ub2e4.","title":"Reason"},{"location":"Enum/#example_5","text":"enum class Col1 { red , yellow , blue }; enum class Col2 { red = 1 , yellow = 2 , blue = 2 }; // typo enum class Month { jan = 1 , feb , mar , apr , may , jun , jul , august , sep , oct , nov , dec }; // \ub2ec\ub825\uc740 1\uc6d4\ubd80\ud130 \uc2dc\uc791\ud55c\ub2e4 enum class Base_flag { dec = 1 , oct = dec << 1 , hex = dec << 2 }; // \ube44\ud2b8\ub4e4\uc758 \uc9d1\ud569 ( Month \uc640 \uac19\uc774) \uad00\uc2b5\uc801\uc778 \uac12\uc774 \ud544\uc694\ud55c \uacbd\uc6b0, \ub610\ub294 ( Base_flag \uc758 \ud2b9\uc815 \ube44\ud2b8 \ucc98\ub7fc)\uc5f0\uc18d\uc801\uc778 \uac12\uc774 \uc801\ud569\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uac12\uc744 \uba85\uc2dc\ud558\ub77c.","title":"Example"},{"location":"Enum/#enforcement_7","text":"\uc911\ubcf5\ub41c \uc5f4\uac70\uac12\uc5d0\ub294 \uc9c0\uc801\ud558\ub77c \uc5f0\uc18d\uc801\uc778 \uc5f4\uac70\uac12\uc744 \uba85\uc2dc\ud558\ub294 \uacbd\uc6b0\ub294 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Errors/","text":"E: \uc624\ub958 \ucc98\ub9ac \uc624\ub958 \ucc98\ub9ac\ub294 \ub2e4\uc74c\uc744 \ud3ec\ud568\ud55c\ub2e4: \uc624\ub958\ub97c \ubc1c\uacac \uc624\ub958\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \ucc98\ub9ac\ud558\ub294 \ubd80\ubd84\uc73c\ub85c \uc804\ub2ec \ud504\ub85c\uadf8\ub7a8\uc744 \uc720\ud6a8\ud55c \uc0c1\ud0dc\ub85c \uc720\uc9c0 \ub9ac\uc18c\uc2a4 \ub204\uc218\ub97c \ubc29\uc9c0 \ubaa8\ub4e0 \uc624\ub958\ub97c \ubcf5\uad6c\ud558\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. \ub9cc\uc57d \uc5b4\ub5a4 \uc624\ub958\uc758 \ubcf5\uad6c\uac00 \ubd88\uac00\ub2a5 \ud558\ub2e4\uba74, \uc798 \uc815\uc758\ub41c \ubc29\ubc95\uc73c\ub85c \ube60\ub974\uac8c \"\ube60\uc838\ub098\uac00\ub294\" \uac83\uc774 \uc911\uc694\ud558\ub2e4. \uc624\ub958\ub97c \ucc98\ub9ac\ud558\ub294 \uc804\ub7b5\uc740 \ub2e8\uc21c\ud574\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ub354 \uc545\ud654\ub41c \uc624\ub958\ub4e4\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. \uac80\uc99d\ub418\uc9c0 \uc54a\uace0 \ub4dc\ubb3c\uac8c \uc218\ud589\ub418\ub294 \uc624\ub958 \ucc98\ub9ac \ucf54\ub4dc\ub294 \uadf8 \uc790\uccb4\ub85c \ub9ce\uc740 \ubc84\uadf8\ub4e4\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. \uc774 \uc7a5\uc758 \uaddc\uce59\ub4e4\uc740 \uba87\uba87 \uc885\ub958\uc758 \uc624\ub958\ub4e4\uc744 \ud53c\ud558\ub294 \uac83\uc5d0 \ub3c4\uc6c0\uc744 \uc8fc\uae30 \uc704\ud574 \uc124\uacc4\ub418\uc5c8\ub2e4: \ud0c0\uc785 \uc704\ubc18\ub4e4 ( \uacf5\uc6a9\uccb4 \uc640 \ud615\ubcc0\ud658\uc758 \uc624\uc6a9) \ub9ac\uc18c\uc2a4 \ub204\uc218 (\uba54\ubaa8\ub9ac \ub204\uc218\ub97c \ud3ec\ud568) \ud55c\uacc4 \uc624\ub958 \uc218\uba85 \uc624\ub958 ( delete \ub41c \uac1d\uccb4\uc5d0 \uc811\uadfc) \ubcf5\uc7a1\uc131 \uc624\ub958 (\uc9c0\ub098\uce58\uac8c \ubcf5\uc7a1\ud55c \ud45c\ud604\uc73c\ub85c \uc544\uc774\ub514\uc5b4\ub4e4\uc744 \ud45c\ud604\ud568\uc73c\ub85c \uc778\ud574 \ubc1c\uc0dd\ud558\ub294 \ub17c\ub9ac\uc801 \uc5d0\ub7ec) \uc778\ud130\ud398\uc774\uc2a4 \uc624\ub958 (\uc608\uc0c1\uce58 \ubabb\ud55c \uac12\uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \uc804\ub2ec\ub428) \uc624\ub958 \ucc98\ub9ac \uaddc\uce59 \uc694\uc57d: E.1: \uc124\uacc4 \uacfc\uc815 \ucd08\uae30\uc5d0 \uc624\ub958 \ucc98\ub9ac\uc5d0 \ub300\ud55c \uc804\ub7b5\uc744 \uc218\ub9bd\ud558\ub77c E.2: \ud568\uc218\uac00 \ub9e1\uc740 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc54c\ub9ac\uae30 \uc704\ud574 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c E.3: \uc608\uc678\ub294 \uc624\ub958 \ucc98\ub9ac\uc5d0\ub9cc \uc0ac\uc6a9\ud558\ub77c E.4: \ubd88\ubcc0\uc870\uac74\uc744 \uc911\uc2ec\uc73c\ub85c \uc624\ub958 \ucc98\ub9ac \uc804\ub7b5\uc744 \uc124\uacc4\ud558\ub77c E.5: \uc0dd\uc131\uc790\uc5d0\uc11c \ubd88\ubcc0\uc870\uac74\uc744 \uc124\uc815\ud558\ub3c4\ub85d \ud558\uace0, \uadf8\ub807\uac8c \ud560 \uc218 \uc5c6\uc73c\uba74 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c E.6: RAII\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub204\uc218\ub97c \ubc29\uc9c0\ud558\ub77c E.7: \uc120\ud589\uc870\uac74\uc744 \uae30\uc220\ud558\ub77c E.8: \ud6c4\ud589\uc870\uac74\uc744 \uae30\uc220\ud558\ub77c E.12: throw \ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uac70\ub098 \ubd88\uac00\ub2a5\ud55c \ud568\uc218\uc5d0\ub294 noexcept \ub97c \uc0ac\uc6a9\ud558\ub77c E.13: \uac1d\uccb4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc18c\uc720\ud558\ub294 \uc911\uc5d0\ub294 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\uc120 \uc548\ub41c\ub2e4 E.14: \ubaa9\uc801\uc5d0 \ub9de\uac8c \uc124\uacc4\ub41c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc744 \uc608\uc678\ub85c \uc0ac\uc6a9\ud558\ub77c (\ub0b4\uc7a5 \ud0c0\uc785\uc740 \uc548\ub41c\ub2e4) E.15: \uacc4\uce35 \uad6c\uc870\uac00 \uc788\ub294 \uc608\uc678\ub294 \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574\uc11c \uc7a1\uc544\ub77c E.16: \uc18c\uba78\uc790, \uc790\uc6d0\ud574\uc81c, swap \uc740 \uc808\ub300 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 E.17: \uac01\uac01\uc758 \ud568\uc218\ub4e4\uc5d0\uc11c \ubaa8\ub4e0 \uc608\uc678\ub97c \ucc98\ub9ac\ud558\ub824\uace0 \ud558\uc9c0 \ub9c8\ub77c E.18: \uba85\uc2dc\uc801\uc778 try / catch \ubb38\uc758 \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c E.19: \uc801\ub2f9\ud55c \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74 \ud574\uc81c\ubc29\ubc95\uc744 \ub098\ud0c0\ub0bc final_action \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud558\ub77c E.25: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \uc790\uc6d0\uad00\ub9ac\ub97c \uc704\ud574 RAII\ub97c \uc2dc\ubbac\ub808\uc774\uc158 \ud558\ub77c E.26: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \ube60\ub978 \uc2e4\ud328 \uc804\ub7b5\uc744 \uace0\ub824\ud558\ub77c E.27: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \uccb4\uacc4\uc801\uc73c\ub85c \uc5d0\ub7ec \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c E.28: \uc804\uc5ed \uc0c1\ud0dc\uc5d0 \uae30\ubc18\ud55c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \uc9c0\uc591\ud558\ub77c( errno \ucc98\ub7fc) E.30: \uc608\uc678 \uba85\uc138\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c E.31: \uc801\ud569\ud55c \uc21c\uc11c\ub85c catch \ub97c \ubc30\uce58\ud558\ub77c E.1: \uc124\uacc4 \uacfc\uc815 \ucd08\uae30\uc5d0 \uc624\ub958 \ucc98\ub9ac\uc5d0 \ub300\ud55c \uc804\ub7b5\uc744 \uc218\ub9bd\ud558\ub77c Reason \uc624\ub958\ub4e4\uacfc \ub9ac\uc18c\uc2a4 \ub204\uc218\ub4e4\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \uc77c\uad00\uc801\uc774\uace0 \uc644\uc804\ud55c \uc804\ub7b5\uc740 \uc2dc\uc2a4\ud15c\uc5d0 \uc0c8\ub85c \ucd94\uac00\ud558\uae30\uac00 \uc544\uc8fc \uc5b4\ub835\ub2e4. E.2: \ud568\uc218\uac00 \ub9e1\uc740 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc54c\ub9ac\uae30 \uc704\ud574 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c Reason \uc624\ub958 \ucc98\ub9ac\uac00 \uccb4\uacc4\uc801\uc774\uace0, \uacac\uace0\ud558\uba70, \ubc18\ubcf5\uc801\uc774\uc9c0 \uc54a\uac8c \ub41c\ub2e4. Example struct Foo { vector < Thing > v ; File_handle f ; string s ; }; void use () { Foo bar {{ Thing { 1 }, Thing { 2 }, Thing { monkey }}, { \"my_file\" , \"r\" }, \"Here we go!\" }; // ... } \uc5ec\uae30\uc11c, vector \uc640 string \uc758 \uc0dd\uc131\uc790\ub294 \uc5d8\ub9ac\uba3c\ud2b8\ub4e4\uc774 \ud544\uc694\ub85c \ud558\ub294 \ucda9\ubd84\ud55c \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ubc1b\uc9c0 \ubabb\ud560 \uc218 \uc788\uc73c\uba70, vector \uc758 \uc0dd\uc131\uc790\ub294 \ucd08\uae30\ud654 \ubaa9\ub85d\uc758 Thing \uc744 \ubcf5\uc0ac\ud560 \uc218 \uc5c6\uc744 \uc218 \uc788\uace0, File_handle \uc740 \ud544\uc694\ud55c \ud30c\uc77c\uc744 \uc5f4\uc9c0 \ubabb\ud560 \uc218 \uc788\ub2e4. \uac01\uac01\uc758 \uacbd\uc6b0, use() \uc758 \ud638\ucd9c\uc790\uac00 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. \ub9cc\uc57d\uc5d0 use() \uac00 bar \uc0dd\uc131 \uc2e4\ud328\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc73c\uba74 try / catch \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc81c\uc5b4\ud560 \uc218 \uc788\ub2e4. \uc5b4\ub290 \uacbd\uc6b0\ub4e0, Foo \uc758 \uc0dd\uc131\uc790\ub294 \uc81c\uc5b4\uad8c\uc744 \ub118\uae30\uae30\uc804\uc5d0 Foo \ub97c \ub9cc\ub4e4\ub824\uace0 \uc2dc\ub3c4\ud55c \ubaa8\ub4e0 \uc0dd\uc131\ub41c \uba64\ubc84\ub4e4\uc744 \uc62c\ubc14\ub974\uac8c \uc18c\uba78\uc2dc\ud0a8\ub2e4. \uc774 \ub54c\ub294 \uc624\ub958 \ucf54\ub4dc\ub97c \ud3ec\ud568\ud55c \ubc18\ud658 \uac12\uc774 \uc5c6\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c. File_handle \uc758 \uc0dd\uc131\uc790\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\uc77c \uc218 \uc788\ub2e4: File_handle :: File_handle ( const string & name , const string & mode ) : f { fopen ( name . c_str (), mode . c_str ())} { if ( ! f ) throw runtime_error { \"File_handle: could not open \" + name + \" as \" + mode }; } Note \uc608\uc678\uc758 \uc758\ub3c4\ub294 \uc608\uc678\uc801\uc778 \uc0ac\uac74\uc774\ub098 \uc2e4\ud328\ub97c \uc54c\ub9ac\ub294\ub370 \uc788\ub2e4. \ud558\uc9c0\ub9cc \"\ubb34\uc5c7\uc774 \uc608\uc678\uc801\uc778\uac00?\"\ub77c\ub294 \uc810\uc5d0\uc11c \uc21c\ud658\uc801\uc778 \uc758\ubbf8\ub97c \uac00\uc9c4\ub2e4. \uc608\ub97c \ub4e4\uba74: \ucda9\uc871\ub418\uc9c0 \uc54a\uc740 \uc120\ud589\uc870\uac74 \uac1d\uccb4\ub97c \uc0dd\uc131\ud560 \uc218 \uc5c6\ub294 \uc0dd\uc131\uc790 (\ud074\ub798\uc2a4\uc758 \ubd88\ubcc0\uc870\uac74 \uc124\uc815 \uc2e4\ud328) \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\ub294(out-of-range) \uc5d0\ub7ec. (\uc608\ucee8\ub300 v[v.size()] = 7 ) \uc790\uc6d0 \ud68d\ub4dd\uc758 \uc2e4\ud328(\uc608: \ub124\ud2b8\uc6cc\ud06c \ub2e4\uc6b4) \uc774\uc640 \ubc18\ub300\ub85c, \uc77c\ubc18\uc801\uc778 \ub8e8\ud504\uc758 \uc885\ub8cc\ub294 \uc608\uc678\uc801\uc774\uc9c0 \uc54a\ub2e4. \ubb34\ud55c \ub8e8\ud504\uac00 \uc544\ub2c8\ub77c\uba74, \ub8e8\ud504\uac00 \uc885\ub8cc\ud558\ub294 \uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uae30\ub300\ud558\ub294 \uac83\uc774\ub2e4. Note \ud568\uc218\uac00 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc73c\ub85c throw \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Exception \uba87\uba87 \uc81c\uc57d\uc774 \uc2ec\ud55c \uc2dc\uc2a4\ud15c\ub4e4\uc740, \uc2e4\ud589\ub418\uae30 \uc804\uc5d0 (\uc77c\ubc18\uc801\uc73c\ub85c \uc9e7\uc740) \uace0\uc815\ub41c \ucd5c\ub300 \ucc98\ub9ac\uc2dc\uac04\uc744 \ubcf4\uc7a5\ud574\uc57c \ud55c\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 throw \ub85c\ubd80\ud130 \ubcf5\uc6d0\ud558\uae30 \uc704\ud55c \uc815\ud655\ud55c \uc2dc\uac04\uc744 \uc608\uce21\ud558\ub294 \ub3c4\uad6c\uac00 \uc788\uc5b4\uc57c\ub9cc \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. See also : RAII See also : discussion Note \uc608\uc678\ub97c \uc0ac\uc6a9\ud55c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \uc88b\uc544\ud558\uc9c0 \uc54a\uac70\ub098 \uacb0\uc815\uc744 \ub0b4\ub9b4 \uc218 \uc5c6\ub2e4\uba74, \ub300\uc548\ub4e4 \uc744 \uac80\ud1a0\ud574\ubcf4\ub77c. \uc5d0\ub7ec \ucc98\ub9ac \ubc29\ubc95\ub4e4\uc740 \uc81c\uac01\uae30 \ubcf5\uc7a1\ud55c \ubd80\ubd84\uacfc \ubb38\uc81c\uac00 \uc788\uae30 \ub9c8\ub828\uc774\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74, \ucc98\ub9ac \ubc29\ubc95\uc758 \ud6a8\uc728\uc131\uc5d0 \ub300\ud574\uc11c \uce21\uc815\uc744 \ud574\ubcf4\ub77c. E.3: \uc608\uc678\ub294 \uc624\ub958 \ucc98\ub9ac\uc5d0\ub9cc \uc0ac\uc6a9\ud558\ub77c Reason \"\uc815\uc0c1\uc801\uc778 \ucf54\ub4dc\"\uc640 \uc624\ub958 \ucc98\ub9ac\ub97c \ubd84\ub9ac\ud558\ub3c4\ub85d \ud574\uc900\ub2e4. C++\uc5d0\uc11c\ub294 \uc608\uc678\uac00 \ub4dc\ubb3c\uac8c \ubc1c\uc0dd\ud558\ub2e4\ub294 \uc804\uc81c \ud558\uc5d0 \ucd5c\uc801\ud654\ub97c \uc801\uc6a9\ud55c\ub2e4. Example, don't // exception\uc774 \uc5d0\ub7ec \ucc98\ub9ac\ub97c \uc704\ud574 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uace0 \uc788\ub2e4. int find_index ( vector < string >& vec , const string & x ) { try { for ( gsl :: index i = 0 ; i < vec . size (); ++ i ) if ( vec [ i ] == x ) throw i ; // found x } catch ( int i ) { return i ; } return - 1 ; // not found } \uc774\ub7f0 \ucf54\ub4dc\ub294 \ubcf5\uc7a1\ud558\uace0 \uc77c\ubc18\uc801\uc778 for\ubb38 \ubcf4\ub2e4 \ud6e8\uc52c \ub290\ub9b4 \uac83\uc774\ub2e4. vector \uc5d0\uc11c \uac12\uc744 \ucc3e\ub294\ub370 \uc608\uc678\uc801\uc778 \uc0c1\ud669\uc740 \uc5c6\ub2e4. Enforcement \uacbd\ud5d8\uc801\uc73c\ub85c \uc811\uadfc\ud574\uc57c\ud55c\ub2e4. catch \uad6c\ubb38\uc774 \uc608\uc678 \uac12\uc744 \"\uc7a1\uc9c0 \ubabb\ud558\ub294\uc9c0\" \ud655\uc778\ud574\ubcf4\ub77c. E.4: \ubd88\ubcc0\uc870\uac74\uc744 \uc911\uc2ec\uc73c\ub85c \uc624\ub958 \ucc98\ub9ac \uc804\ub7b5\uc744 \uc124\uacc4\ud558\ub77c Reason \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \uadf8 \uac1c\uccb4\ub294 (\ubd88\ubcc0\uc870\uac74\uc744 \uc0ac\uc6a9\ud574\uc11c \uc815\uc758\ub41c) \uc62c\ubc14\ub978 \uc0c1\ud0dc\uc5d0 \uc788\uc5b4\uc57c \ud55c\ub2e4. \ub610 \uc624\ub958\ub85c\ubd80\ud130 \uac1c\uccb4\ub4e4\uc744 \ubcf5\uc6d0\ud558\ub824\uba74, \ud30c\uad34\ub418\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub4e4\uc740 \uc62c\ubc14\ub978 \uc0c1\ud0dc\uc5d0 \uc788\uc5b4\uc57c \ud55c\ub2e4. Note \ubd88\ubcc0\uc870\uac74(invariant) \uc740 \uc0dd\uc131\uc790\uac00 \uc218\ub9bd\ud574\uc57c \ud558\ub294 \uac1c\uccb4 \uba64\ubc84\ub4e4\uc5d0 \ub300\ud55c \ub17c\ub9ac\uc801 \uc870\uac74\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774\ub7f0 \uc870\uac74\ub4e4\uc740 public \uba64\ubc84 \ud568\uc218\ub4e4\uc5d0\uc11c \uac00\uc815\ud558\ub294 \uac83\ub4e4\uc774\ub2e4. Enforcement ??? E.5: \uc0dd\uc131\uc790\uc5d0\uc11c \ubd88\ubcc0\uc870\uac74\uc744 \uc124\uc815\ud558\ub3c4\ub85d \ud558\uace0, \uadf8\ub807\uac8c \ud560 \uc218 \uc5c6\uc73c\uba74 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c Reason \uc870\uac74\uc744 \ub9cc\uc871\ud558\uc9c0 \uc54a\ub294 \uac1c\uccb4\ub97c \uad6c\uc131\ud558\uba74 \ubb38\uc81c\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \uba64\ubc84 \ud568\uc218 \uc911 \uc77c\ubd80\ub9cc \ud638\ucd9c\ud560 \uc218 \uc788\ub2e4. Example class Vector { // very simplified vector of doubles // if elem != nullptr then elem points to sz doubles public : Vector () : elem { nullptr }, sz { 0 }{} Vector ( int s ) : elem { new double [ s ]}, sz { s } { /* initialize elements */ } ~ Vector () { delete [] elem ; } double & operator []( int s ) { return elem [ s ]; } // ... private : owner < double *> elem ; int sz ; }; \uc8fc\uc11d\uc73c\ub85c \ud45c\uae30\ub41c \uc774 \ud074\ub798\uc2a4\uc758 \ubd88\ubcc0\uc870\uac74\uc740 \uc0dd\uc131\uc790\uc5d0\uc11c \uc124\uc815\ub41c\ub2e4. new \ub294 \uc694\uad6c\ubc1b\uc740 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud558\uc9c0 \ubabb\ud560 \uacbd\uc6b0 \uc608\uc678\ub97c \ub358\uc9c4\ub2e4. \uc5ec\uae30\uc11c operator [] \ub294 \ubd88\ubcc0\uc870\uac74\uc5d0 \uc758\uc874\ud558\uac8c \ub41c\ub2e4. See also : \uc0dd\uc131\uc790\uac00 \uc62c\ubc14\ub978 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uc9c0 \ubabb\ud55c\ub2e4\uba74, \uc608\uc678\ub97c \ub358\uc838\ub77c Enforcement \uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ud074\ub798\uc2a4\ub294 \uc811\uadfc \uc9c0\uc815\uc790 private \uc73c\ub85c \uc9c0\uc815\ud558\ub3c4\ub85d \ud45c\uc2dc\ud55c\ub2e4. E.6: RAII\ub97c \uc0ac\uc6a9\ud574 \ub204\uc218\ub97c \ubc29\uc9c0\ud558\ub77c Reason \uc77c\ubc18\uc801\uc73c\ub85c \ub204\uc218\ub294 \ud5c8\uc6a9\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4.RAII(\uc790\uc6d0 \ud68d\ub4dd\uc740 \ucd08\uae30\ud654)\ub294 \ub204\uc218\ub97c \ubc29\uc9c0\ud558\ub294 \uac04\ub2e8\ud558\uace0, \uac00\uc7a5 \uccb4\uacc4\uc801\uc778 \ubc29\ubc95\uc774\ub2e4. Example void f1 ( int i ) // Bad: possibly leak { int * p = new int [ 12 ]; // ... if ( i < 17 ) throw Bad { \"in f()\" , i }; // ... } \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc804\uc5d0 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud560 \uc218\ub3c4 \uc788\ub2e4: void f2 ( int i ) // Clumsy and error-prone: explicit release { int * p = new int [ 12 ]; // ... if ( i < 17 ) { delete [] p ; throw Bad { \"in f()\" , i }; } // ... } \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc9c0\uc800\ubd84\ud558\ub2e4. \ub2e4\uc218\uc758 throw \uac00 \uac00\ub2a5\ud55c \uacbd\uc6b0, \uba85\uc2dc\uc801\uc778 \ud574\uc81c\ub294 \ubc18\ubcf5\uc801\uc774\uace0, \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\ub2e4. void f3 ( int i ) // OK: resource management done by a handle (but see below) { auto p = make_unique < int [] > ( 12 ); // ... if ( i < 17 ) throw Bad { \"in f()\" , i }; // ... } RAII\ub294 \ud638\ucd9c\ubc1b\uc740 \ud568\uc218\uc5d0\uc11c \ubb35\uc2dc\uc801\uc73c\ub85c throw \ud558\ub294 \uc0c1\ud669\uc5d0\uc11c\ub3c4 \ub3d9\uc791\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c: void f4 ( int i ) // OK: resource management done by a handle (but see below) { auto p = make_unique < int [] > ( 12 ); // ... helper ( i ); // may throw // ... } \ud3ec\uc778\ud130\uac00 \ubc18\ub4dc\uc2dc \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\uba74, \uc9c0\uc5ed \ubcc0\uc218\ub85c \ucc98\ub9ac\ud558\ub77c: void f5 ( int i ) // OK: resource management done by local object { vector < int > v ( 12 ); // ... helper ( i ); // may throw // ... } \ub354 \uac04\ub2e8\ud558\uace0 \uc548\uc804\ud558\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc120 \ub354 \ud6a8\uc728\uc801\uc774\uae30\ub3c4 \ud558\ub2e4. Note \uc790\uc6d0\uc744 \ud574\uc81c\ud574\uc8fc\ub294 \ub9ac\uc18c\uc2a4 \ud578\ub4e4 \uac1c\uccb4\uac00 \uc5c6\ub2e4\uba74 \ud639\uc740 \uc801\ud569\ud55c RAII \uac1c\uccb4/\ud578\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ubd88\uac00\ud558\ub2e4\uba74, \uc790\uc6d0\ud574\uc81c \ub3d9\uc791\ub4e4\uc740 final_action \uac1c\uccb4 \ub97c \uc0ac\uc6a9\ud574\uc11c \uc218\ud589\ud560 \uc218\ub3c4 \uc788\ub2e4. Note \uadf8\ub7ec\ub098 \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud55c\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c \ud560\uae4c? \ud55c\ubc88 \uadf8 \uc0dd\uac01\uc5d0 \ub3c4\uc804\ud574 \ubcf4\uc790; \uc608\uc678\ub97c \ubc18\ub300\ud558\ub294 \ub9ce\uc740 \uc758\uacac\uc774 \uc788\uc744 \uac83\uc774\ub2e4. \uadf8 \uc911\uc5d0 \uba87\uba87 \ud0c0\ub2f9\ud55c \uc758\uacac\ub4e4\uc5d0 \ub300\ud574 \uc54c\uc544 \ubcf4\uc790: \uc608\uc678\ub97c \uc801\uc6a9\ud558\ub824\uba74 \uba54\ubaa8\ub9ac\ub97c \ub2e4 \uc368\ubc84\ub9ac\ub294 \uc544\uc8fc \uc791\uc740(2K\ubcf4\ub2e4 \uc791\uc740) \uc2dc\uc2a4\ud15c \uc0c1\uc5d0 \uc788\ub2e4. \uc81c\ud55c \uc2dc\uac04 \uc548\uc5d0 \ubc18\ub4dc\uc2dc \uc751\ub2f5\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294 \uacbd\uc6b0, \uc694\uad6c\ub41c \uc2dc\uac04 \uc548\uc5d0 \uc608\uc678\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\ub2e4. \ub09c\ud574\ud55c \ubc29\uc2dd\uc73c\ub85c \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \uc5c4\uccad\ub09c \uc591\uc758 \ub808\uac70\uc2dc \ucf54\ub4dc\ub97c \uac00\uc9c4 \uc2dc\uc2a4\ud15c \uc0c1\uc5d0 \uc788\ub2e4. (\ud2b9\ud788 \uc18c\uc720\uad8c \uad00\ub828\ub41c \uc815\ucc45\uc774 \ubcf4\uc774\uc9c0 \uc54a\uc544\uc11c) \uc608\uc678\uac00 \uba54\ubaa8\ub9ac \ub204\uc218\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. C++ \uc608\uc678 \uba54\ucee4\ub2c8\uc998\uc744 \uad6c\ud604\ud55c \uac83\uc774 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4.(\uc18d\ub3c4, \uba54\ubaa8\ub9ac \uc18c\ube44, DLL\uc5d0\uc11c\uc758 \ubd88\ubd84\uba85\ud55c \ucc98\ub9ac\uc2e4\ud328 \ub4f1) (\uc608\uc678 \uad6c\ud604\uc744 \uc81c\uacf5\ud55c \ucabd\uc5d0 \ud56d\uc758\ud558\ub77c; \ubd88\ud3c9\uc774 \uc5c6\ub2e4\uba74 \uac1c\uc120\ub3c4 \uc5c6\ub2e4.) \ub9e4\ub2c8\uc800\uac00 \uac00\uc9c4 \uc624\ub798\ub41c \uc9c0\uc2dd\uc5d0 \ub3c4\uc804\ud558\uba74 \ud574\uace0\ub2f9\ud55c\ub2e4 \uc5ec\uae30\uc11c \uccab\ubc88\uc9f8 \uc774\uc720\ub9cc\uc774 \uadfc\ubcf8\uc801\uc778 \uacbd\uc6b0\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74, RAII\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uac70\ub098, RAII \uac1c\uccb4\ub4e4\uc774 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a4\uc9c0 \uc54a\ub3c4\ub85d \uc124\uacc4\ud558\ub77c. \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74, RAII\ub97c \ud749\ub0b4\ub77c\ub3c4 \ub0b4\ub77c. \uc989, \uccb4\uacc4\uc801\uc73c\ub85c \uac1c\uccb4\uac00 \uc0dd\uc131\ub41c \ud6c4 \uc720\ud6a8\ud55c\uc9c0 \uac80\uc0ac\ud558\uace0 \uc18c\uba78\uc790\uc5d0\uc11c \uc790\uc6d0\uc744 \ubaa8\ub450 \ud574\uc81c\ud558\ub77c. valid() \uc5f0\uc0b0\uc744 \ucd94\uac00\ud558\ub294 \uac83\uc774 \uc88b\uc744 \uc218\ub3c4 \uc788\ub2e4. void f () { vector < string > vs ( 100 ); // not std::vector: valid() added if ( ! vs . valid ()) { // handle error or exit } ifstream fs ( \"foo\" ); // not std::ifstream: valid() added if ( ! fs . valid ()) { // handle error or exit } // ... } // destructors clean up as usual \uc774\ub7f0 \ubc29\ubc95\uc740 \ucf54\ub4dc\uc758 \uae38\uc774\uac00 \ub298\uc5b4\ub098\uc9c0\ub9cc, \"exception\"\uc774 \uc804\ud30c\ub418\ub294 \uac83\uc744 valid() \uac80\uc0ac\ub97c \ud1b5\ud574\uc11c \ubc29\uc9c0\ud55c\ub2e4. valid() \uac80\uc0ac\uac00 \uc2e4\uc218\ub85c \uc78a\ud600\uc9c8 \uc218 \uc788\uc73c\ub2c8 \uac00\ub2a5\ud558\ub2e4\uba74 \uc608\uc678\ub97c \uc120\ud638\ud558\ub77c. See also : noexcept \uc758 \uc0ac\uc6a9 Enforcement ??? E.7: \uc120\ud589\uc870\uac74\uc744 \uae30\uc220\ud558\ub77c Reason \uc778\ud130\ud398\uc774\uc2a4 \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. See also : precondition rule E.8: \ud6c4\ud589\uc870\uac74\uc744 \uae30\uc220\ud558\ub77c Reason \uc778\ud130\ud398\uc774\uc2a4 \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. See also : postcondition rule E.12: throw \ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uac70\ub098 \ubd88\uac00\ub2a5\ud55c \ud568\uc218\uc5d0\ub294 noexcept \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc624\ub958 \ucc98\ub9ac\ub97c \uccb4\uacc4\uc801\uc774\uace0, \uacac\uace0\ud558\uba70, \ud6a8\uc728\uc801\uc73c\ub85c \ub9cc\ub4e0\ub2e4. Example double compute ( double d ) noexcept { return log ( sqrt ( d <= 0 ? 1 : d )); } \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 compute \ud568\uc218\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \uc791\uc131\ub418\uc5c8\ub2e8 \uc0ac\uc2e4\uc744 \uc54c\uc218 \uc788\ub2e4. noexcept \ub85c \uc120\uc5b8\ud568\uc73c\ub85c\uc368, \uc6b0\ub9ac\ub294 \ucef4\ud30c\uc77c\ub7ec\uc640 \ub2e4\ub978 \uc774\ub4e4\uc5d0\uac8c compute \ud568\uc218\ub97c \uc774\ud574\ud558\uace0 \ubcc0\uacbd\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\ub2e4. Note C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \"\uc2b9\uacc4\ub41c\" \ub9ce\uc740 C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub4e4\uc740 noexcept \ub85c \uc815\uc758\ub418\uc5b4\uc788\ub2e4. Example vector < double > munge ( const vector < double >& v ) noexcept { vector < double > v2 ( v . size ()); // ... do something ... } \uc774 \ucf54\ub4dc\uc5d0\uc11c noexcept \ub294 \uc9c0\uc5ed\ubcc0\uc218 vector \uc758 \uc0dd\uc131\uc774 \uc2e4\ud328\ud558\ub294 \uc0c1\ud669\uc744 \ucc98\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \ud45c\ud604\ud558\uace0 \uc788\ub2e4. \uc774 \ub9d0\uc778 \uc989, \uba54\ubaa8\ub9ac \uace0\uac08\uc744 (\ud558\ub4dc\uc6e8\uc5b4 \uc2e4\ud328\uc640 \uac19\uc740)\uc2ec\uac01\ud55c \uc124\uacc4 \uc624\ub958\ub85c \uac04\uc8fc\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \uc608\uc678\uac00 \ubc1c\uc0dd\ud55c\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \ud06c\ub798\uc2dc\ub97c \uc77c\uc73c\ud0ac \uac83\uc774\ub2e4. Note \uc804\ud1b5\uc801\uc778 \uc608\uc678 \uba85\uc138\ubc95 \uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c See also discussion . E.13: \uac1c\uccb4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc18c\uc720\ud558\ub294 \uc911\uc5d0\ub294 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\uc120 \uc548\ub41c\ub2e4 Reason \uc790\uc6d0 \ub204\uc218\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. Example void leak ( int x ) // don't: may leak { auto p = new int { 7 }; if ( x < 0 ) throw Get_me_out_of_here {}; // may leak *p // ... delete p ; // we may never get here } \uc774\ub7f0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c \uc77c\uad00\uc801\uc73c\ub85c \uc790\uc6d0 \ud578\ub4e4(resource handle)\uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4: void no_leak ( int x ) { auto p = make_unique < int > ( 7 ); if ( x < 0 ) throw Get_me_out_of_here {}; // will delete *p if necessary // ... // no need for delete p } \ub2e4\ub978 (\ub354 \ub098\uc740) \ud574\uacb0\ucc45\uc740 \ud3ec\uc778\ud130\ub97c \ub300\uc2e0\ud574 \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4: void no_leak_simplified ( int x ) { vector < int > v ( 7 ); // ... } Note \uc815\ub9ac \uc791\uc5c5\uc774 \ud544\uc694\ud558\uc9c0\ub9cc \uc18c\uba78\uc790\uac00 \uc5c6\ub294 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc774 \uc788\ub2e4\uba74, \uadf8 \uc791\uc5c5\ub4e4\uc740 throw \uc5d0 \uc55e\uc11c \uc218\ud589\ub418\uc5b4\uc57c \ud55c\ub2e4. finally() \ub294 \uadf8\uc640 \uac19\uc740 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ub204\ub77d\ub420 \uc218 \uc788\ub294 \uc791\uc5c5\ub4e4\uc744 \uc880 \ub354 \uad00\ub9ac\ud558\uae30 \uc27d\uac8c \ud574\uc900\ub2e4. E.14:\ubaa9\uc801\uc5d0 \ub9de\uac8c \uc124\uacc4\ub41c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc744 \uc608\uc678\ub85c \uc0ac\uc6a9\ud558\ub77c (\ub0b4\uc7a5 \ud0c0\uc785\uc740 \uc548\ub41c\ub2e4) Reason \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc815\uc758\ud55c \ud0c0\uc785\ub4e4\uc740 \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uc608\uc678\uc640 \ucda9\ub3cc\ud560 \uac00\ub2a5\uc131\uc774 \uc801\ub2e4. Example void my_code () { // ... throw Moonphase_error {}; // ... } void your_code () { try { // ... my_code (); // ... } catch ( const Bufferpool_exhausted & ) { // ... } } Example, don't void my_code () // Don't { // ... throw 7 ; // 7 means \"moon in the 4th quarter\" // ... } void your_code () // Don't { try { // ... my_code (); // ... } catch ( int i ) { // i == 7 means \"input buffer too small\" // ... } } Note \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc608\uc678 \ud074\ub798\uc2a4\ub4e4\uc740 std::exception \uc744 \uc0c1\uc18d\ud558\uace0 \uc788\ub2e4. \uc774\ub4e4\uc5d0 \ub300\ud55c \uc624\ub958 \ucc98\ub9ac\ub294 std::exception \ub610\ub294 \"\uc77c\ubc18\uc801\uc778\" \ucc98\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud55c\ub2e4. \ub0b4\uc7a5 \ud0c0\uc785\ub4e4\uc744 \uc608\uc678 \uac1c\uccb4\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\uc758 \ucf54\ub4dc\uc640 \ucda9\ub3cc\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. Example, don't void my_code () // Don't { // ... throw runtime_error { \"moon in the 4th quarter\" }; // ... } void your_code () // Don't { try { // ... my_code (); // ... } catch ( const runtime_error & ) { // runtime_error means \"input buffer too small\" // ... } } See also : Discussion Enforcement \ub0b4\uc7a5 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 throw \uc640 catch \ub97c \uc7a1\uc544\ub0b4\ub77c. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 std::exception \uae30\ubc18\uc758 \uacc4\uce35\uad6c\uc870\uc5d0 \ud3ec\ud568\ub41c \uc608\uc678 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ub0ab\ub2e4. E.15: \uacc4\uce35 \uad6c\uc870\uac00 \uc788\ub294 \uc608\uc678\ub294 \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574\uc11c \ucc98\ub9ac\ud558\ub77c Reason \uc608\uc678 \uac1c\uccb4\uc758 \ubcf5\uc0ac \uc190\uc2e4\uc744 \ubc29\uc9c0\ud55c\ub2e4. Example void f () { try { // ... } catch ( exception e ) { // don't: may slice // ... } } \ub300\uc2e0 \ucc38\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c: catch ( exception & e ) { /* ... */ } const \ucc38\uc870\ub97c \uc0ac\uc6a9\ud558\uba74 \ub354 \uc88b\ub2e4: catch ( const exception & e ) { /* ... */ } Most handlers do not modify their exception and in general we recommend use of const . Note To rethrow a caught exception use throw; not throw e; . Using throw e; would throw a new copy of e (sliced to the static type std::exception ) instead of rethrowing the original exception of type std::runtime_error . (But keep Don't try to catch every exception in every function and Minimize the use of explicit try / catch in mind.) Enforcement \uac12\uc73c\ub85c \uc608\uc678\ub97c \ucc98\ub9ac\ud558\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c. \uc644\ubcbd\ud788 \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc120 \uc804\uccb4 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud55c \ubd84\uc11d\uc774 \ud544\uc694\ud560 \uc218 \uc788\ub2e4. E.16: \uc18c\uba78\uc790, \uc790\uc6d0\ud574\uc81c, swap \uc740 \uc808\ub300 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 Reason \uc18c\uba78\uc790, \uba54\ubaa8\ub9ac \ud574\uc81c, swap \uc774 \uc2e4\ud328\ud55c\ub2e4\uba74 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud560 \uc218 \uc5c6\ub2e4; \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uac70\ub098 \ud574\uc57c \ud560 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\uace0 \uc885\ub8cc\ud558\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. Example, don't class Connection { // ... public : ~ Connection () // Don't: very bad destructor { if ( cannot_disconnect ()) throw I_give_up { information }; // ... } }; Note \uc608\uc2dc\uc5d0 \ub098\uc628 \"close\ub97c \uac70\ubd80\ud558\ub294\" \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 \ud074\ub798\uc2a4\ucc98\ub7fc, \ub9ce\uc740 \uc774\ub4e4\uc774 \uc774 \uaddc\uce59\uc744 \uc704\ubc18\ud558\uba74\uc11c \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub824\uace0 \uc2dc\ub3c4\ud574\uc654\ub2e4. \uc6b0\ub9ac\uac00 \uc544\ub294 \uc120\uc5d0\uc11c \ub204\uad6c\ub3c4 \uc774\ub97c \uc77c\ubc18\ud654\ud558\uc9c0 \ubabb\ud588\ub2e4. \ub54c\ub54c\ub85c, \uc544\uc8fc \uc608\uc678\uc801\uc778 \uacbd\uc6b0, \ub098\uc911\uc5d0 \uc815\ub9ac\uc791\uc5c5\uc744 \ud558\uae30 \uc704\ud578 \uc0c1\ud0dc\ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud560 \uac83\uc774\ub2e4. \uc608\ucee8\ub300, close\ud558\uae38 \uc6d0\ud558\uc9c0 \uc54a\ub294 \uc18c\ucf13\uc740 \"\ubb38\uc81c\uc788\ub294 \uc18c\ucf13\"\ubaa9\ub85d\uc5d0 \ucd94\uac00\ud558\uace0 \uc815\uae30\uc801\uc73c\ub85c sweep\ud560\uc218\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. \uc5ec\ud0dc\uaecf \uc774 \uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294 \uc0ac\ub840\ub4e4\uc740 \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\uac70\ub098, \ud2b9\ubcc4\ud558\uac70\ub098, \ub54c\ub85c\ub294 \ubc84\uadf8\ud22c\uc131\uc774\uc600\ub2e4. Note \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc18c\uba78\uc790, ( operator delete \uac19\uc740) \uc790\uc6d0 \ud574\uc81c \ud568\uc218, swap \ud568\uc218\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \uc608\uc678\ub97c \ub358\uc9c4\ub2e4\uba74, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \ubd88\ubcc0\uc870\uac74\uc774 \ucda9\uc871\ub418\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. Note operator delete \uc640 \uac19\uc740 \ud574\uc81c \ud568\uc218\ub294 \ubc18\ub4dc\uc2dc noexcept \uc5ec\uc57c \ud55c\ub2e4. swap \ud568\uc218\ub294 \ubc18\ub4dc\uc2dc noexcept \uc5ec\uc57c \ud55c\ub2e4. \uc18c\uba78\uc790\ub4e4\uc740 \ud45c\uae30\ud558\uc9c0 \uc54a\uc544\ub3c4 \uae30\ubcf8\uc801\uc73c\ub85c noexcept \ub85c \uac04\uc8fc\ub41c\ub2e4. move \uc5f0\uc0b0\ub3c4 noexcept \ub85c \ub9cc\ub4e4\uc5b4\ub77c . Enforcement \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uc18c\uba78\uc790, \uc790\uc6d0\ud574\uc81c \ud568\uc218, swap \uc744 \uc7a1\uc544\ub0b4\ub77c. \ube44\uc2b7\ud55c \uc5ed\ud560\uc744 \ud558\ub294 \ud568\uc218\ub4e4\uc774 noexcept \uac00 \uc544\ub2cc \uacbd\uc6b0\uc5d0\ub3c4 \uc7a1\uc544\ub0b4\uc57c \ud55c\ub2e4. See also : discussion E.17: \uac01\uac01\uc758 \ud568\uc218\ub4e4\uc5d0\uc11c \ubaa8\ub4e0 \uc608\uc678\ub97c \ucc98\ub9ac\ud558\ub824\uace0 \ud558\uc9c0 \ub9c8\ub77c Reason \ud568\uc218 \ub0b4\uc5d0\uc11c \uc608\uc678\ub97c catch\ud558\ub294 \uac83\uc740 \uc720\uc758\ubbf8\ud55c \ubcf5\uad6c \uc791\uc5c5\uc744 \ud558\uae30 \uc5b4\ub824\uc6b0\uba70, \ubcf5\uc7a1\uc131\uc744 \ub192\uc774\uace0 \ub0ad\ube44\uac00 \ub420 \uc218 \uc788\ub2e4. \uc608\uc678\ub97c \ub358\uc9c8 \ub54c\ub294 \uadf8 \uc608\uc678\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub85c \uc804\ud30c\ub418\ub3c4\ub85d \ub0a8\uaca8\ub450\uc5b4\ub77c. \uc774\ub54c \uc815\ub9ac\uc791\uc5c5\uc640 \ud638\ucd9c\uc2a4\ud0dd \ub418\uac10\uae30\ub294 RAII \uc5d0\uac8c \ub9e1\uaca8\ub77c. Example, don't void f () // bad { try { // ... } catch (...) { // no action throw ; // propagate exception } } Enforcement \uc911\ucca9\ub41c try \uad6c\ubb38\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c \ud568\uc218\uc5d0 \uc9c0\ub098\uce58\uac8c \ube48\ubc88\ud55c try \ube14\ub7ed\ub4e4\uc744 \uc0ac\uc6a9\ud55c \uc18c\uc2a4 \ucf54\ub4dc\ub97c \uc9c0\uc801\ud558\ub77c ( \"\uc9c0\ub098\uce58\uac8c \ube48\ubc88\ud55c\"\uc744 \uc815\uc758\ud560 \uc218 \uc788\ub294\uac00??) E.18: \uba85\uc2dc\uc801\uc778 try / catch \ubb38\uc758 \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c Reason try / catch \ub294 \ubc88\uac70\ub86d\uace0 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30\ub3c4 \uc27d\ub2e4. try / catch \ub294 \uc800\ub808\ubca8 \uc790\uc6d0 \uad00\ub9ac \ub610\ub294 \uc624\ub958 \ucc98\ub9ac\uac00 \uccb4\uacc4\uc801\uc774\uc9c0 \uc54a\ub2e4\ub294 \uc2e0\ud638\uc77c \uc218 \uc788\ub2e4. Example, Bad void f ( zstring s ) { Gadget * p ; try { p = new Gadget ( s ); // ... delete p ; } catch ( Gadget_construction_failure ) { delete p ; throw ; } } \uc9c0\uc800\ubd84\ud55c \ucf54\ub4dc\ub2e4. try \ube14\ub85d \ub0b4\uc5d0 \uc788\ub294 \ud3ec\uc778\ud130 p \uc5d0\uc11c \ub204\uc218\uac00 \ubc1c\uc0c1\ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 \uc608\uc678\ub97c \ucc98\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc628\uc804\ud788 \uc0dd\uc131\ub418\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub97c delete \ud558\ub294 \uac83\uc740 \uc798\ubabb\ub41c \uc0ac\uc6a9\ubc95\uc774\ub2e4. \ub354 \ub098\uc740 \uc0dd\uc131\ubc29\ubc95: void f2 ( zstring s ) { Gadget g { s }; } Alternatives \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uacfc RAII \ub97c \uc0ac\uc6a9\ud558\ub77c finally Enforcement ??? \uc5b4\ub835\ub2e4. \uacbd\ud5d8\uc801\uc778(Heuristic) \uc811\uadfc\uc774 \ud544\uc694\ud558\ub2e4. E.19: \uc801\ub2f9\ud55c \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74 \ud574\uc81c\ubc29\ubc95\uc744 \ub098\ud0c0\ub0bc final_action \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub77c Reason finally \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub35c \ubc88\uac70\ub86d\uace0, try / catch \uc5d0 \ube44\ud574 \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc5b4\ub835\ub2e4. Example void f ( int n ) { void * p = malloc ( 1 , n ); auto _ = finally ([ p ] { free ( p ); }); // ... } Note finally \ub294 try / catch \ub9cc\ud07c \uc9c0\uc800\ubd84\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc, \uc784\uc2dc\uc801\uc778(ad-hoc) \ubc29\ubc95\uc774\ub2e4. \uc801\ud569\ud55c \ub9ac\uc18c\uc2a4 \uad00\ub9ac \uac1c\uccb4 \ub97c \uc0ac\uc6a9\ud558\ub77c. finally \ub294 \ucd5c\ud6c4\uc758 \ubc29\ubc95\uc73c\ub85c \uc0dd\uac01\ud558\ub77c. Note goto exit; \ubc29\ubc95 \uacfc \ube44\uad50\ud558\uba74 finally \ub294 \uc5b8\uc5b4 \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud558\ub294 \uccb4\uacc4\uc801\uc774\uace0 \uae54\ub054\ud55c \ub300\uc548\uc774\ub2e4. Enforcement \uacbd\ud5d8\uc801\uc774\ub2e4 : goto exit; \uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub77c E.25: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub294 \uacbd\uc6b0, RAII\ub85c \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub77c Reason \uc608\uc678\uac00 \uc5c6\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4, RAII \ub294 \ubcf4\ud1b5 \uc790\uc6d0\uc744 \ub2e4\ub8e8\ub294 \ucd5c\uace0\uc758, \uac00\uc7a5 \uccb4\uacc4\uc801\uc778 \ubc29\ubc95\uc774\ub2e4. Note C++\uc5d0\uc11c \uc608\uc678\ub97c \uc774\uc6a9\ud55c \uc624\ub958\ucc98\ub9ac\ub294 \uc9c0\uc5ed\uc801\uc774\uc9c0 \uc54a\uc740 \uc624\ub958\ub97c \ub2e4\ub8e8\uae30 \uc704\ud55c \ubc29\ubc95\uc774\ub2e4. \ud2b9\ud788 \uac1c\uccb4 \uc0dd\uc131\uc5d0\uc11c \ube44-\uce68\uc2b5\uc801\uc73c\ub85c \uc0dd\uc131 \uc2e4\ud328\ub97c \uc54c\ub9ac\ub294 \ub370\ub294 \uc608\uc678\uac00 \ud544\uc694\ud558\ub2e4. \uc624\ub958\uc758 \ubc1c\uc0dd\uc744 \uc54c\ub9ac\ub294(signaling) \uac83\uc774 \ubb34\uc2dc\ub418\uc9c0 \ubabb\ud558\uac8c \ud558\uae30 \uc704\ud574\uc120 \uc608\uc678\uac00 \ud544\uc694\ud558\ub2e4. \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74, \ub2f9\uc2e0\uc774 \ud560 \uc218 \uc788\ub294 \ud55c \uadf8\uc640 \uc720\uc0ac\ud55c \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc608\uc678\uc5d0 \ub300\ud55c \ub9ce\uc740 \uc6b0\ub824\ub4e4\uc740 \uc798\ubabb\ub41c \uac83\uc774\ub2e4. \ud3ec\uc778\ud130\ub098 \ubcf5\uc7a1\ud55c \uc81c\uc5b4 \uad6c\uc870\ub4e4\ub85c \uc778\ud574 \ub09c\uc7a1\ud558\uc9c0 \uc54a\uc740 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ub420\ub54c\ub294 \uc608\uc678\ub294 \uac70\uc758 \uc5b8\uc81c\ub098 (\uc2dc\uac04\uacfc \uacf5\uac04\uc801\uc778 \uce21\uba74\uc5d0\uc11c) \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774\uace0, \ub354 \ub098\uc740 \ucf54\ub4dc\ub85c \uc774\uc5b4\uc9c4\ub2e4. \uc774\ub294 \ubaa8\ub4e0 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ud574\ub2f9\ud558\uc9c4 \uc54a\uc9c0\ub9cc \uc608\uc678 \ucc98\ub9ac \uba54\ucee4\ub2c8\uc998\uc774 \uc798 \uad6c\ud604\ub41c \uac83\uc744 \uc804\uc81c\ud55c\ub2e4. \uc704\uc640 \uac19\uc740 \ubb38\uc81c\ub97c \uc801\uc6a9\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. \uc9e7\uc740 \uc2dc\uac04 \ub0b4\uc5d0 \uc751\ub2f5\uc744 \ubcf4\uc7a5\ud574\uc57c\ud558\ub294(Hard-real-time) \uc2dc\uc2a4\ud15c\ub4e4\uc774 \uadf8\ub7f0 \uacbd\uc6b0\uc778\ub370, \uc815\ud574\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \uc624\ub958\ub098 \uc815\ud655\ud55c \ub2f5\uc744 \uc0b0\ucd9c\ud574\uc57c\ub9cc \ud558\ub294 \uc5f0\uc0b0\ub4e4 \ub54c\ubb38\uc774\ub2e4. \uc2dc\uac04\uc744 \uce21\uc815\ud560 \uc218 \uc788\ub294 \uc801\ud569\ud55c \ub3c4\uad6c\uac00 \uc5c6\ub2e4\uba74, \uc608\uc678\uac00 \uc774\ub97c \ucda9\uc871\uc2dc\ud0a4\uae30\ub294 \uc5b4\ub835\ub2e4. \uadf8\ub7f0 \uc2dc\uc2a4\ud15c(\uac00\ub839, \ube44\ud589\uae30 \uc870\uc885 \uc18c\ud504\ud2b8\uc6e8\uc5b4)\uc5d0\uc11c\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub3d9\uc801(heap) \uba54\ubaa8\ub9ac \uc0ac\uc6a9 \ub610\ud55c \ubc30\uc81c\ub418\uae30\ub3c4 \ud55c\ub2e4. \uacb0\uad6d, \uc624\ub958 \ucc98\ub9ac\uc5d0 \ub300\ud55c \ucd5c\uc6b0\uc120 \uac00\uc774\ub4dc\ub294 \uc774\ub807\ub2e4. \"\uc608\uc678\uc640 RAII \ub97c \uc0ac\uc6a9\ud558\ub77c\". \uc774 \ubd80\ubd84\uc5d0\uc11c\ub294 \uc608\uc678\uc758 \uad6c\ud604\uc774\ub098 \uc608\uc678\uac00 \ud6a8\uc728\uc801\uc774\uc9c0 \uc54a\uc740 \uacbd\uc6b0, \uc624\ub798\ub41c \ucf54\ub4dc\uc758 \ucc98\ub9ac \uc2a4\ud0c0\uc77c\ub4f1 \uc608\uc678 \ucc98\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 \uc0c1\ud669\ub3c4 \uace0\ub824\ud55c\ub2e4. (\uac00\ub839, \uc5c4\uccad\ub09c \uc218\uc758 \ud3ec\uc778\ud130, \uc798\ubabb \uc815\uc758\ub41c \uc18c\uc720\uad8c, \uc624\ub958\ucf54\ub4dc \uac80\uc0ac\uc5d0 \uae30\ubc18\ud55c \uccb4\uacc4\uc801\uc774\uc9c0 \uc54a\uc740 \uc624\ub958\ucc98\ub9ac\ub4e4 \ub4f1\ub4f1) \uacb0\uad6d, \uc624\ub958 \ucc98\ub9ac\uc5d0 \ub300\ud55c \ucd5c\uc6b0\uc120 \uac00\uc774\ub4dc\ub294 \uc774\ub807\ub2e4. \"\uc608\uc678\uc640 RAII \ub97c \uc0ac\uc6a9\ud558\ub77c\". \uc774 \ubd80\ubd84\uc5d0\uc11c\ub294 \uc608\uc678\uc758 \uad6c\ud604\uc774\ub098 \uc608\uc678\uac00 \ud6a8\uc728\uc801\uc774\uc9c0 \uc54a\uc740 \uacbd\uc6b0, \uc624\ub798\ub41c \ucf54\ub4dc\uc758 \ucc98\ub9ac \uc2a4\ud0c0\uc77c\ub4f1 \uc608\uc678 \ucc98\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 \uc0c1\ud669\ub3c4 \uace0\ub824\ud55c\ub2e4. (\uac00\ub839, \uc5c4\uccad\ub09c \uc218\uc758 \ud3ec\uc778\ud130, \uc798\ubabb \uc815\uc758\ub41c \uc18c\uc720\uad8c, \uc624\ub958\ucf54\ub4dc \uac80\uc0ac\uc5d0 \uae30\ubc18\ud55c \uccb4\uacc4\uc801\uc774\uc9c0 \uc54a\uc740 \uc624\ub958\ucc98\ub9ac\ub4e4 \ub4f1\ub4f1) \uc608\uc678\uc640 \uadf8 \ube44\uc6a9\uc5d0 \ub300\ud574 \ube44\ub09c\ud558\uae30 \uc804\uc5d0, error codes \uc5d0 \uc788\ub294 \uc0ac\ub840\ub4e4\uc744 \uace0\ub824\ud574\ubcf4\ub77c. \ube44\uc6a9\uacfc \uc624\ub958 \ucf54\ub4dc\ub97c \ub2e4\ub8f0\ub54c\uc758 \ubcf5\uc7a1\ud568\uc744 \ubaa8\ub450 \uace0\ub824\ud558\ub77c. \uc131\ub2a5\uc774 \uac71\uc815\ub41c\ub2e4\uba74, \uce21\uc815\ud558\ub77c. Example \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uace0 \ud558\uc790. void func ( zstring arg ) { Gadget g { arg }; // ... } gadget \uc774 \uc81c\ub300\ub85c \uc0dd\uc131\ub418\uc9c0 \uc54a\uc558\ub2e4\uba74, func \ub294 \uc608\uc678\ub97c \ub358\uc9c0\uba70 \uc885\ub8cc\ud55c\ub2e4. \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, gadget \uc5d0 valid() \uba64\ubc84 \ud568\uc218\ub97c \ucd94\uac00\ud568\uc73c\ub85c\uc368 RAII\ucc98\ub7fc \uc790\uc6d0\uc744 \ucc98\ub9ac\ud560 \uc218\ub3c4 \uc788\ub2e4: error_indicator func ( zstring arg ) { Gadget g { arg }; if ( ! g . valid ()) return gadget_construction_error ; // ... return 0 ; // zero indicates \"good\" } \uc774 \uacbd\uc6b0 \ud638\ucd9c\uc790(caller)\ub294 \ub2f9\uc5f0\ud788 \ubc18\ud658\uac12 \uac80\uc0ac\uac00 \ud544\uc694\ud558\ub2e4\ub294 \uac83\uc744 \uc54c\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4. See also : Discussion Enforcement \ud2b9\ubcc4\ud55c \uacbd\uc6b0: \uc608\ucee8\ub300, \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc758 \uc0dd\uc131\uc744 valid() \ub85c \uc2dc\uc2a4\ud15c\uc801\uc73c\ub85c \uac80\uc0ac\ud558\ub294 \ub4f1\uc758 \ubc29\ubc95\uc774 \uac00\ub2a5\ud558\ub2e4 E.26: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \ube60\ub978 \uc2e4\ud328 \uc804\ub7b5\uc744 \uace0\ub824\ud558\ub77c Reason \uc624\ub958\ub85c\ubd80\ud130 \ubcf5\uc6d0\ud558\ub294 \uc791\uc5c5\uc744 \uc81c\ub300\ub85c \uc218\ud589\ud560 \uc218 \uc5c6\ub2e4\uba74, \ucd5c\uc18c\ud55c \ubb38\uc81c\uac00 \ub354 \ucee4\uc9c0\uae30 \uc804\uc5d0 \ud0c8\ucd9c\ud560 \uc218\ub294 \uc788\ub2e4. See also : Simulating RAII Note \uc9c0\uc5ed\uc801\uc778 \uc624\ub958 \ucc98\ub9ac\ub97c \uc81c\ub300\ub85c \ud560 \uc218 \uc5c6\ub2e4\uba74, \"\ud06c\ub798\uc2dc \ubc1c\uc0dd\"\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcf4\ub77c. \uc774\ub294 \uc624\ub958\ub97c \ud655\uc778\ud55c \ubb38\ub9e5\uc5d0\uc11c \ubcf5\uad6c\ud558\uac70\ub098 \uc9c0\uc5ed\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4. abort() \ub098 quick_exit() \ub97c \ud638\ucd9c\ud558\ub77c. \ub610\ub294 \uc2dc\uc2a4\ud15c\uc774 \uc7ac\uc2dc\uc791\ud558\ub3c4\ub85d \ud558\ub294 \ube44\uc2b7\ud55c \uae30\ub2a5\uc758 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub77c. \ub2e4\uc218\uc758 \ud504\ub85c\uc138\uc2a4\ub098 \ucef4\ud4e8\ud130\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \uc5b4\ucc0c\ub418\uc5c8\uac74 \uce58\uba85\uc801\uc778 \ud06c\ub798\uc2dc\ub97c \ucc98\ub9ac\ud558\ub294 \uacbd\uc6b0\ub97c \uc608\uc0c1\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \ud558\ub4dc\uc6e8\uc5b4\uc5d0\uc11c \ubb38\uc81c\uac00 \uc0dd\uae38 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0, \"\ud06c\ub798\uc2dc \ubc1c\uc0dd\"\uc740 \ub2e8\uc21c\ud788 \uc624\ub958 \ucc98\ub9ac\ub97c \uc2dc\uc2a4\ud15c\uc758 \ub2e4\uc74c \ub808\ubca8\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \ub41c\ub2e4. Example void f ( int n ) { // ... p = static_cast < X *> ( malloc ( n , X )); if ( ! p ) abort (); // abort if memory is exhausted // ... } \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub7a8\uc740 \uba54\ubaa8\ub9ac \uace0\uac08\uc744 \uc544\ub984\ub2f5\uac8c \ud574\uacb0\ud558\uae30 \uc5b4\ub835\ub2e4. \uc774\ub294 \ub2e4\uc74c \ucf54\ub4dc\uc5d0\uc11c\ub3c4 \ub3d9\uc77c\ud558\ub2e4. void f ( int n ) { // ... p = new X [ n ]; // throw if memory is exhausted (by default, terminate) // ... } \uc77c\ubc18\uc801\uc73c\ub85c, \"\ud06c\ub798\uc2dc\"\uac00 \ubc1c\uc0dd\ud574\uc11c \uc885\ub8cc\ud558\uae30 \uc804 \ubc1c\uc0dd \uc6d0\uc778\uc5d0 \ub300\ud574 \ub85c\uadf8\ub97c \ub0a8\uae30\ub294 \uac83\uc740 \ud604\uba85\ud55c \uc0dd\uac01\uc774\ub2e4. Enforcement Awkward E.27: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \uccb4\uacc4\uc801\uc73c\ub85c \uc624\ub958 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc624\ub958 \ud578\ub4e4\ub9c1 \uc815\ucc45\uc744 \uccb4\uacc4\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc624\ub958 \ucc98\ub9ac\ub97c \uc78a\uc5b4\ubc84\ub9b4 \uac00\ub2a5\uc131\uc744 \ucd5c\uc18c\ud654\ud55c\ub2e4. See also : RAII Note \uba87\uac00\uc9c0 \uc774\uc288\uac00 \uc788\ub2e4: \ud568\uc218 \ubc14\uae65\uc5d0\uc11c \uc624\ub958 \uc54c\ub9bc\uc744 \uc5b4\ub5bb\uac8c \uc804\ub2ec\ud560 \uac83\uc778\uac00? \uc624\ub958\ub85c \uc885\ub8cc\ud558\uae30 \uc774\uc804\uc5d0 \ud568\uc218\uc5d0\uc11c\uc758 \uc790\uc6d0 \ud574\uc81c\ub294 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud558\ub294\uac00? \uc624\ub958\uc758 \uc9c0\ud45c(error indicator)\ub85c\uc11c \ubb34\uc5c7\uc744 \uc0ac\uc6a9\ud558\ub294\uac00? \uc77c\ubc18\uc801\uc73c\ub85c, \uc624\ub958 \uc9c0\ud45c\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc740 2\uac00\uc9c0 \uac12\uc744 \ubc18\ud658\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4: \uc815\uc0c1\uc801\uc778 \uacb0\uacfc\uc640 \uc624\ub958 \uc9c0\ud45c. \uc624\ub958 \uc9c0\ud45c\ub294 valid() \ud568\uc218\ub97c \uac00\uc9c4 \uacbd\uc6b0\ucc98\ub7fc \uac1c\uccb4\uc758 \uc77c\ubd80\uac00 \ub420\uc218\ub3c4 \uc788\ub2e4. \ub610\ub294 \ud568\uc218\uac00 \ud55c\ubc88\uc5d0 2\uac1c\uc758 \uac12\ub4e4\uc744 \ubc18\ud658\ud560\uc218\ub3c4 \uc788\ub2e4. Example Gadget make_gadget ( int n ) { // ... } void user () { Gadget g = make_gadget ( 17 ); if ( ! g . valid ()) { // error handling } // ... } \uc774 \uc811\uadfc\ubc95\uc740 RAII\ucc98\ub7fc \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub77c \ud56d\ubaa9\uc5d0 \ubd80\ud569\ud55c\ub2e4. This approach fits with simulated RAII resource management . valid() \ud568\uc218\ub294 error_indicator \ub97c \ubc18\ud658\ud560\uc218\ub3c4 \uc788\ub2e4. (\uc608\ucee8\ub300, error_indicator \uc5f4\uac70\ud615 \uc911\uc5d0\uc11c \ud558\ub098\uc758 \uac12\uc744 \ubc18\ud658\ud55c\ub2e4). Example Gadget \ud0c0\uc785\uc744 \ubcc0\uacbd\ud558\uae38 \uc6d0\ud558\uc9c0 \uc54a\uac70\ub098, \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\ub294 \uc5b4\ub5a8\uae4c? \uadf8\ub7f0 \uacbd\uc6b0\uc5d4, \ud55c \uc30d\uc758 \uac12\uc744 \ubc18\ud658\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. \uc608\ub97c \ub4e4\uba74: std :: pair < Gadget , error_indicator > make_gadget ( int n ) { // ... } void user () { auto r = make_gadget ( 17 ); if ( ! r . second ) { // error handling } Gadget & g = r . first ; // ... } \uc774\ucc98\ub7fc, std::pair \uac00 \ubc18\ud658\ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. \uc77c\ubd80\ub294 \ud2b9\ubcc4\ud55c \ud0c0\uc785\uc744 \uc120\ud638\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74: Gval make_gadget ( int n ) { // ... } void user () { auto r = make_gadget ( 17 ); if ( ! r . err ) { // error handling } Gadget & g = r . val ; // ... } \ud2b9\ubcc4\ud55c \ud0c0\uc785\uc744 \uc120\ud638\ud558\ub294 \uc774\uc720\uc911\uc758 \ud558\ub098\ub85c\ub294 first \ub098 second \uac19\uc740 \ube44\ubc00\uc2a4\ub7ec\uc6b4 \uc774\ub984\ubcf4\ub2e4\ub294 \uba64\ubc84\ucc98\ub7fc \uc0ac\uc6a9\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc740 std::pair \uc758 \ub2e4\ub978 \uc0ac\uc6a9\ubc95\uacfc \ud63c\ub3d9\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud55c\ub2e4. Example \uc77c\ubc18\uc801\uc73c\ub85c, \uc624\ub958\ub85c \uc778\ud574 \uc885\ub8cc\ud558\uae30 \uc804 \uc815\ub9ac \uc791\uc5c5\uc744 \ud558\uac8c \ub41c\ub2e4. \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc9c0\uc800\ubd84\ud558\ub2e4: std :: pair < int , error_indicator > user () { Gadget g1 = make_gadget ( 17 ); if ( ! g1 . valid ()) { return { 0 , g1_error }; } Gadget g2 = make_gadget ( 17 ); if ( ! g2 . valid ()) { cleanup ( g1 ); return { 0 , g2_error }; } // ... if ( all_foobar ( g1 , g2 )) { cleanup ( g1 ); cleanup ( g2 ); return { 0 , foobar_error }; // ... cleanup ( g1 ); cleanup ( g2 ); return { res , 0 }; } RAII\ucc98\ub7fc \ub3d9\uc791\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc740 \ud568\uc218 \ub0b4\uc5d0\uc11c \ub2e4\uc218\uc758 \uc790\uc6d0\uacfc \ub2e4\uc591\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc744 \uacbd\uc6b0 \ub354\uc6b1 \uc911\uc694\ud558\ub2e4. \ub4dc\ubb3c\uac8c \uc0ac\uc6a9\ub418\ub294 \ud574\ubc95 \uc911 \ud558\ub098\ub294 \ubc18\ubcf5\uc744 \ud53c\ud558\uae30 \uc704\ud574 \ud568\uc218\uc758 \ub05d\ubd80\ubd84\uc5d0 \uc815\ub9ac \uc791\uc5c5\uc744 \ubaa8\uc544\ub193\ub294 \uac83\uc774\ub2e4 ( goto \uac00 \ucef4\ud30c\uc77c \ub418\ub824\uba74 g2 \uadfc\ucc98\uc5d0\uc11c \ubd88\uac00\ud53c\ud558\uac8c \ucd94\uac00\ub85c \uc720\ud6a8 \ubc94\uc704\ub97c \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4): std :: pair < int , error_indicator > user () { error_indicator err = 0 ; Gadget g1 = make_gadget ( 17 ); if ( ! g1 . valid ()) { err = g1_error ; goto exit ; } { Gadget g2 = make_gadget ( 17 ); if ( ! g2 . valid ()) { err = g2_error ; goto exit ; } if ( all_foobar ( g1 , g2 )) { err = foobar_error ; goto exit ; } // ... } exit : if ( g1 . valid ()) cleanup ( g1 ); if ( g2 . valid ()) cleanup ( g2 ); return { res , err }; } \ud568\uc218\uac00 \uaf64 \ud06c\ub2e4\uba74, \uc774\ub7f0 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uac8c \ub420 \uac00\ub2a5\uc131\uc774 \ud06c\ub2e4. finally \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc880 \ub354 \uc26c\uc6b8 \uc218 \uc788\ub2e4 . \ub610\ud55c, \ud504\ub85c\uadf8\ub7a8\uc774 \ucee4\uc9c8\uc218\ub85d \uccb4\uacc4\uc801\uc73c\ub85c \uc624\ub958 \uc9c0\ud45c(error indicator)\ub97c \uc0ac\uc6a9\ud55c \uc624\ub958 \ucc98\ub9ac \uc804\ub7b5\uc744 \uccb4\uacc4\uc801\uc73c\ub85c \uc801\uc6a9\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4. \uc608\uc678 \uae30\ubc18 \uc624\ub958 \ucc98\ub9ac \ub97c \uc120\ud638\ud558\uba70, \ud568\uc218\ub294 \uc9e7\uac8c \uc791\uc131\ud558\uae30\ub97c \uad8c\ud55c\ub2e4. See also : Discussion See also : \ub2e4\uc218\uc758 \uac12\uc744 \ubc18\ud658 Enforcement Awkward. E.28: \uc804\uc5ed \uc0c1\ud0dc\ub97c \uc0ac\uc6a9\ud55c \uc624\ub958 \ucc98\ub9ac\ub97c \uc9c0\uc591\ud558\ub77c( errno \ucc98\ub7fc) Reason \uc804\uc5ed \uc0c1\ud0dc\ub294 \uad00\ub9ac\ud558\uae30 \uc5b4\ub835\uace0, \ud655\uc778\ud558\ub294 \uac83\uc744 \uc78a\uc5b4\ubc84\ub9ac\uae30 \uc27d\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c printf() \uc758 \ubc18\ud658\uac12\uc744 \ud655\uc778\ud55c \uac83\uc774 \uc5b8\uc81c\uc778\uac00? See also : RAII Example, bad ??? Note C \uc2a4\ud0c0\uc77c \uc624\ub958\ucc98\ub9ac\ub294 \uc804\uc5ed \ubcc0\uc218 errno \uc5d0 \uc758\uc874\ud55c\ub2e4, \ub54c\ubb38\uc5d0 \uc774 \uac00\uc774\ub4dc\ub97c \ub530\ub974\ub294 \uac83\uc774 \ud544\uc5f0\uc801\uc73c\ub85c \ubd88\uac00\ud560\uc218\ub3c4 \uc788\ub2e4. Enforcement Awkward. E.30: \uc608\uc678 \uba85\uc138\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \uc608\uc678 \uba85\uc138\ub294 \uc624\ub958 \ucc98\ub9ac\ub97c \uae68\uc9c0\uae30 \uc27d\uac8c \ub9cc\ub4e4\uace0, \uc2e4\ud589\uc2dc\uac04 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\uba70, C++ \ud45c\uc900\uc5d0\uc11c\ub294 \uc81c\uac70\ub418\uc5c8\ub2e4. Example int use ( int arg ) throw ( X , Y ) { // ... auto x = f ( arg ); // ... } f() \uac00 X \ub098 Y \uac00 \uc544\ub2cc \ub2e4\ub978 \uc608\uc678\ub97c \ub358\uc9c4\ub2e4\uba74 \uc5c9\ub6b1\ud55c \uc624\ub958 \ucc98\ub9ac \ub8e8\ud2f4\uc774 \ud638\ucd9c\ub41c\ub2e4. \ub9cc\uc57d \uc544\ubb34\uac83\ub3c4 \uc5c6\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc740 \uc885\ub8cc\ub41c\ub2e4. \uc774\ub7f0 \uc885\ub8cc \uc790\uccb4\ub294 \uad1c\ucc2e\uc9c0\ub9cc f() \uac00 \uc0c8\ub85c\uc6b4 \uc608\uc678 Z \ub97c \ub358\uc9c0\ub3c4\ub85d \ubcc0\uacbd\ub418\uc5c8\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uc790, use() \ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294 \ud55c \uacc4\uc18d \ud504\ub85c\uadf8\ub7a8\uc774 \uac15\uc81c\ub85c \uc885\ub8cc\ub420 \uac83\uc774\ub2e4 (\uacb0\uad6d \ubaa8\ub450 \uc0c8\ub85c \ud14c\uc2a4\ud2b8 \ud574\ubd10\uc57c \ud55c\ub2e4). f() \uac00 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ud568\uc218\ub77c\uc11c \uc190\ub308 \uc218 \uc5c6\uc73c\uba74 use() \ub294 \ub09c\ucc98\ud574\uc9c4\ub2e4. use() \uac00 Z \ub97c \uc804\ub2ec\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uc9c0\ub9cc, use() \ub97c \ud638\ucd9c\ud558\ub294 \ucabd\uc5d0\uc11c\ub3c4 \ubcc0\uacbd\uc774 \ud544\uc694\ud558\ub2e4. \ubb38\uc81c\uac00 \uc21c\uc2dd\uac04\uc5d0 \ub2e4\ub8f0 \uc218 \uc5c6\uac8c \ub418\uc5b4\ubc84\ub9b0\ub2e4. \ub300\uc548\uc774 \uc788\ub2e4\uba74, use() \uc5d0\uc11c try - catch \ub97c \uc0ac\uc6a9\ud574 Z \ub97c \ub2e4\ub978 \uc608\uc678\ub85c \ucc98\ub9ac\ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ubc29\ubc95 \ub610\ud55c \ubb38\uc81c\ub97c \ud0a4\uc6b0\uac8c \ub41c\ub2e4. \ubc1c\uc0dd \uac00\ub2a5\ud55c \uc608\uc678\ub4e4\uc774 \ub2ec\ub77c\uc9c0\ub294 \uacbd\uc6b0\uac00 \uc2dc\uc2a4\ud15c\uc758 \uc800\uc218\uc900\uc5d0\uc11c \uc77c\uc5b4\ub09c\ub2e4\ub294 \uc810\uc774 \uc911\uc694\ud558\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, \ub124\ud2b8\uc6cc\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \ubbf8\ub4e4\uc6e8\uc5b4\uac00 \ubcc0\uacbd\ub418\uc5c8\ub2e4\uac70\ub098). \uc774 \uacbd\uc6b0, \ubb38\uc81c\uac00 \uc5ec\ub7ec \uc218\uc900\uc758 \ub9ce\uc740 \ud568\uc218\ub4e4\uc744 \uac70\uccd0\uc11c \ub098\ud0c0\ub098\uac8c \ub41c\ub2e4 \ucf54\ub4dc\uc758 \uaddc\ubaa8\uac00 \ud06c\ub2e4\uba74, \uc774\ub294 \ub9c8\uc9c0\ub9c9 \uc0ac\uc6a9\uc790\uac00 \ubcc0\uacbd\ud558\uae30 \uc804\uae4c\uc9c0 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc5c6\uac8c \ub41c\ub2e4. \ub9cc\uc57d use() \uac00 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc77c\ubd80\ub77c\uba74, \uc54c\uc218 \uc5c6\ub294 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \ubbf8\uce58\ub294 \uc601\ud5a5\ub54c\ubb38\uc5d0 \uc5c5\ub370\uc774\ud2b8\ub97c \ud560 \uc218 \uc5c6\uac8c \ub41c\ub2e4. \uc608\uc678\uac00 \uc804\ud30c\ub418\ub3c4\ub85d \ud558\ub294 \uc804\ub7b5\uc740 \uc774\ub7f0 \uacbd\uc6b0\uc5d0 \ub300\uc751\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc774 \uc9c0\ub09c \uc218\ub144\uac04\uc758 \uacbd\ud5d8\uc73c\ub85c \uc99d\uba85\ub418\uc5c8\ub2e4. Note No. This would not be any better had exception specifications been statically enforced. \uadf8 \uc608\ub85c Stroustrup94 \ub97c \ucc38\uace0\ud558\ub77c. Note \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, noexcept \ub97c \uc9c0\uc815\ud558\ub77c. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 throw() \uc640 \ub3d9\uc77c\ud558\ub2e4. Enforcement \uc608\uc678 \uba85\uc138\uac00 \uc0ac\uc6a9\ub41c \ubd80\ubd84\uc744 \uc9c0\uc801\ud55c\ub2e4. E.31: \uc801\ud569\ud55c \uc21c\uc11c\ub85c catch \ub97c \ubc30\uce58\ud558\ub77c Reason catch \uad6c\uc808\uc740 \uc21c\uc11c\ub300\ub85c \ud3c9\uac00\ub418\uae30 \ub54c\ubb38\uc5d0 \ub2e4\ub978 \uad6c\uc808\uc5d0 \ub3c4\ub2ec\ud558\uc9c0 \ubabb\ud560 \uc218\ub3c4 \uc788\ub2e4. Example void f () { // ... try { // ... } catch ( Base & b ) { /* ... */ } catch ( Derived & d ) { /* ... */ } catch (...) { /* ... */ } catch ( std :: exception & e ){ /* ... */ } } Derived \uac00 Base \ub97c \uc0c1\uc18d\ubc1b\uc740 \uacbd\uc6b0, Derived \ub97c \ucc98\ub9ac\ud558\ub294 \ubd80\ubd84\uc740 \uc808\ub300\ub85c \ud638\ucd9c\ub418\uc9c0 \uc54a\ub294\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \"\ubaa8\ub4e0 \uac83\"\uc744 \uc7a1\ub294 \ud578\ub4e4\ub7ec\ub85c \uc778\ud574 std::exception \ub294 \ud638\ucd9c\ub418\uc9c0 \uc54a\uac8c \ub41c\ub2e4. Enforcement \ub2e4\ub978 \ud578\ub4e4\ub7ec\ub97c \uc228\uae30\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud55c\ub2e4.","title":"Errors"},{"location":"Errors/#e","text":"\uc624\ub958 \ucc98\ub9ac\ub294 \ub2e4\uc74c\uc744 \ud3ec\ud568\ud55c\ub2e4: \uc624\ub958\ub97c \ubc1c\uacac \uc624\ub958\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \ucc98\ub9ac\ud558\ub294 \ubd80\ubd84\uc73c\ub85c \uc804\ub2ec \ud504\ub85c\uadf8\ub7a8\uc744 \uc720\ud6a8\ud55c \uc0c1\ud0dc\ub85c \uc720\uc9c0 \ub9ac\uc18c\uc2a4 \ub204\uc218\ub97c \ubc29\uc9c0 \ubaa8\ub4e0 \uc624\ub958\ub97c \ubcf5\uad6c\ud558\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. \ub9cc\uc57d \uc5b4\ub5a4 \uc624\ub958\uc758 \ubcf5\uad6c\uac00 \ubd88\uac00\ub2a5 \ud558\ub2e4\uba74, \uc798 \uc815\uc758\ub41c \ubc29\ubc95\uc73c\ub85c \ube60\ub974\uac8c \"\ube60\uc838\ub098\uac00\ub294\" \uac83\uc774 \uc911\uc694\ud558\ub2e4. \uc624\ub958\ub97c \ucc98\ub9ac\ud558\ub294 \uc804\ub7b5\uc740 \ub2e8\uc21c\ud574\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ub354 \uc545\ud654\ub41c \uc624\ub958\ub4e4\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. \uac80\uc99d\ub418\uc9c0 \uc54a\uace0 \ub4dc\ubb3c\uac8c \uc218\ud589\ub418\ub294 \uc624\ub958 \ucc98\ub9ac \ucf54\ub4dc\ub294 \uadf8 \uc790\uccb4\ub85c \ub9ce\uc740 \ubc84\uadf8\ub4e4\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. \uc774 \uc7a5\uc758 \uaddc\uce59\ub4e4\uc740 \uba87\uba87 \uc885\ub958\uc758 \uc624\ub958\ub4e4\uc744 \ud53c\ud558\ub294 \uac83\uc5d0 \ub3c4\uc6c0\uc744 \uc8fc\uae30 \uc704\ud574 \uc124\uacc4\ub418\uc5c8\ub2e4: \ud0c0\uc785 \uc704\ubc18\ub4e4 ( \uacf5\uc6a9\uccb4 \uc640 \ud615\ubcc0\ud658\uc758 \uc624\uc6a9) \ub9ac\uc18c\uc2a4 \ub204\uc218 (\uba54\ubaa8\ub9ac \ub204\uc218\ub97c \ud3ec\ud568) \ud55c\uacc4 \uc624\ub958 \uc218\uba85 \uc624\ub958 ( delete \ub41c \uac1d\uccb4\uc5d0 \uc811\uadfc) \ubcf5\uc7a1\uc131 \uc624\ub958 (\uc9c0\ub098\uce58\uac8c \ubcf5\uc7a1\ud55c \ud45c\ud604\uc73c\ub85c \uc544\uc774\ub514\uc5b4\ub4e4\uc744 \ud45c\ud604\ud568\uc73c\ub85c \uc778\ud574 \ubc1c\uc0dd\ud558\ub294 \ub17c\ub9ac\uc801 \uc5d0\ub7ec) \uc778\ud130\ud398\uc774\uc2a4 \uc624\ub958 (\uc608\uc0c1\uce58 \ubabb\ud55c \uac12\uc774 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \uc804\ub2ec\ub428) \uc624\ub958 \ucc98\ub9ac \uaddc\uce59 \uc694\uc57d: E.1: \uc124\uacc4 \uacfc\uc815 \ucd08\uae30\uc5d0 \uc624\ub958 \ucc98\ub9ac\uc5d0 \ub300\ud55c \uc804\ub7b5\uc744 \uc218\ub9bd\ud558\ub77c E.2: \ud568\uc218\uac00 \ub9e1\uc740 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc54c\ub9ac\uae30 \uc704\ud574 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c E.3: \uc608\uc678\ub294 \uc624\ub958 \ucc98\ub9ac\uc5d0\ub9cc \uc0ac\uc6a9\ud558\ub77c E.4: \ubd88\ubcc0\uc870\uac74\uc744 \uc911\uc2ec\uc73c\ub85c \uc624\ub958 \ucc98\ub9ac \uc804\ub7b5\uc744 \uc124\uacc4\ud558\ub77c E.5: \uc0dd\uc131\uc790\uc5d0\uc11c \ubd88\ubcc0\uc870\uac74\uc744 \uc124\uc815\ud558\ub3c4\ub85d \ud558\uace0, \uadf8\ub807\uac8c \ud560 \uc218 \uc5c6\uc73c\uba74 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c E.6: RAII\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub204\uc218\ub97c \ubc29\uc9c0\ud558\ub77c E.7: \uc120\ud589\uc870\uac74\uc744 \uae30\uc220\ud558\ub77c E.8: \ud6c4\ud589\uc870\uac74\uc744 \uae30\uc220\ud558\ub77c E.12: throw \ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uac70\ub098 \ubd88\uac00\ub2a5\ud55c \ud568\uc218\uc5d0\ub294 noexcept \ub97c \uc0ac\uc6a9\ud558\ub77c E.13: \uac1d\uccb4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc18c\uc720\ud558\ub294 \uc911\uc5d0\ub294 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\uc120 \uc548\ub41c\ub2e4 E.14: \ubaa9\uc801\uc5d0 \ub9de\uac8c \uc124\uacc4\ub41c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc744 \uc608\uc678\ub85c \uc0ac\uc6a9\ud558\ub77c (\ub0b4\uc7a5 \ud0c0\uc785\uc740 \uc548\ub41c\ub2e4) E.15: \uacc4\uce35 \uad6c\uc870\uac00 \uc788\ub294 \uc608\uc678\ub294 \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574\uc11c \uc7a1\uc544\ub77c E.16: \uc18c\uba78\uc790, \uc790\uc6d0\ud574\uc81c, swap \uc740 \uc808\ub300 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4 E.17: \uac01\uac01\uc758 \ud568\uc218\ub4e4\uc5d0\uc11c \ubaa8\ub4e0 \uc608\uc678\ub97c \ucc98\ub9ac\ud558\ub824\uace0 \ud558\uc9c0 \ub9c8\ub77c E.18: \uba85\uc2dc\uc801\uc778 try / catch \ubb38\uc758 \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c E.19: \uc801\ub2f9\ud55c \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74 \ud574\uc81c\ubc29\ubc95\uc744 \ub098\ud0c0\ub0bc final_action \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud558\ub77c E.25: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \uc790\uc6d0\uad00\ub9ac\ub97c \uc704\ud574 RAII\ub97c \uc2dc\ubbac\ub808\uc774\uc158 \ud558\ub77c E.26: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \ube60\ub978 \uc2e4\ud328 \uc804\ub7b5\uc744 \uace0\ub824\ud558\ub77c E.27: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \uccb4\uacc4\uc801\uc73c\ub85c \uc5d0\ub7ec \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c E.28: \uc804\uc5ed \uc0c1\ud0dc\uc5d0 \uae30\ubc18\ud55c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \uc9c0\uc591\ud558\ub77c( errno \ucc98\ub7fc) E.30: \uc608\uc678 \uba85\uc138\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c E.31: \uc801\ud569\ud55c \uc21c\uc11c\ub85c catch \ub97c \ubc30\uce58\ud558\ub77c","title":"E: \uc624\ub958 \ucc98\ub9ac"},{"location":"Errors/#e1","text":"","title":"E.1: \uc124\uacc4 \uacfc\uc815 \ucd08\uae30\uc5d0 \uc624\ub958 \ucc98\ub9ac\uc5d0 \ub300\ud55c \uc804\ub7b5\uc744 \uc218\ub9bd\ud558\ub77c"},{"location":"Errors/#reason","text":"\uc624\ub958\ub4e4\uacfc \ub9ac\uc18c\uc2a4 \ub204\uc218\ub4e4\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud55c \uc77c\uad00\uc801\uc774\uace0 \uc644\uc804\ud55c \uc804\ub7b5\uc740 \uc2dc\uc2a4\ud15c\uc5d0 \uc0c8\ub85c \ucd94\uac00\ud558\uae30\uac00 \uc544\uc8fc \uc5b4\ub835\ub2e4.","title":"Reason"},{"location":"Errors/#e2","text":"","title":"E.2: \ud568\uc218\uac00 \ub9e1\uc740 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc54c\ub9ac\uae30 \uc704\ud574 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c"},{"location":"Errors/#reason_1","text":"\uc624\ub958 \ucc98\ub9ac\uac00 \uccb4\uacc4\uc801\uc774\uace0, \uacac\uace0\ud558\uba70, \ubc18\ubcf5\uc801\uc774\uc9c0 \uc54a\uac8c \ub41c\ub2e4.","title":"Reason"},{"location":"Errors/#example","text":"struct Foo { vector < Thing > v ; File_handle f ; string s ; }; void use () { Foo bar {{ Thing { 1 }, Thing { 2 }, Thing { monkey }}, { \"my_file\" , \"r\" }, \"Here we go!\" }; // ... } \uc5ec\uae30\uc11c, vector \uc640 string \uc758 \uc0dd\uc131\uc790\ub294 \uc5d8\ub9ac\uba3c\ud2b8\ub4e4\uc774 \ud544\uc694\ub85c \ud558\ub294 \ucda9\ubd84\ud55c \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ubc1b\uc9c0 \ubabb\ud560 \uc218 \uc788\uc73c\uba70, vector \uc758 \uc0dd\uc131\uc790\ub294 \ucd08\uae30\ud654 \ubaa9\ub85d\uc758 Thing \uc744 \ubcf5\uc0ac\ud560 \uc218 \uc5c6\uc744 \uc218 \uc788\uace0, File_handle \uc740 \ud544\uc694\ud55c \ud30c\uc77c\uc744 \uc5f4\uc9c0 \ubabb\ud560 \uc218 \uc788\ub2e4. \uac01\uac01\uc758 \uacbd\uc6b0, use() \uc758 \ud638\ucd9c\uc790\uac00 \ucc98\ub9ac\ud560 \uc218 \uc788\ub3c4\ub85d \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. \ub9cc\uc57d\uc5d0 use() \uac00 bar \uc0dd\uc131 \uc2e4\ud328\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\uc73c\uba74 try / catch \ub97c \uc0ac\uc6a9\ud558\uc5ec \uc81c\uc5b4\ud560 \uc218 \uc788\ub2e4. \uc5b4\ub290 \uacbd\uc6b0\ub4e0, Foo \uc758 \uc0dd\uc131\uc790\ub294 \uc81c\uc5b4\uad8c\uc744 \ub118\uae30\uae30\uc804\uc5d0 Foo \ub97c \ub9cc\ub4e4\ub824\uace0 \uc2dc\ub3c4\ud55c \ubaa8\ub4e0 \uc0dd\uc131\ub41c \uba64\ubc84\ub4e4\uc744 \uc62c\ubc14\ub974\uac8c \uc18c\uba78\uc2dc\ud0a8\ub2e4. \uc774 \ub54c\ub294 \uc624\ub958 \ucf54\ub4dc\ub97c \ud3ec\ud568\ud55c \ubc18\ud658 \uac12\uc774 \uc5c6\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c. File_handle \uc758 \uc0dd\uc131\uc790\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\uc77c \uc218 \uc788\ub2e4: File_handle :: File_handle ( const string & name , const string & mode ) : f { fopen ( name . c_str (), mode . c_str ())} { if ( ! f ) throw runtime_error { \"File_handle: could not open \" + name + \" as \" + mode }; }","title":"Example"},{"location":"Errors/#note","text":"\uc608\uc678\uc758 \uc758\ub3c4\ub294 \uc608\uc678\uc801\uc778 \uc0ac\uac74\uc774\ub098 \uc2e4\ud328\ub97c \uc54c\ub9ac\ub294\ub370 \uc788\ub2e4. \ud558\uc9c0\ub9cc \"\ubb34\uc5c7\uc774 \uc608\uc678\uc801\uc778\uac00?\"\ub77c\ub294 \uc810\uc5d0\uc11c \uc21c\ud658\uc801\uc778 \uc758\ubbf8\ub97c \uac00\uc9c4\ub2e4. \uc608\ub97c \ub4e4\uba74: \ucda9\uc871\ub418\uc9c0 \uc54a\uc740 \uc120\ud589\uc870\uac74 \uac1d\uccb4\ub97c \uc0dd\uc131\ud560 \uc218 \uc5c6\ub294 \uc0dd\uc131\uc790 (\ud074\ub798\uc2a4\uc758 \ubd88\ubcc0\uc870\uac74 \uc124\uc815 \uc2e4\ud328) \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\ub294(out-of-range) \uc5d0\ub7ec. (\uc608\ucee8\ub300 v[v.size()] = 7 ) \uc790\uc6d0 \ud68d\ub4dd\uc758 \uc2e4\ud328(\uc608: \ub124\ud2b8\uc6cc\ud06c \ub2e4\uc6b4) \uc774\uc640 \ubc18\ub300\ub85c, \uc77c\ubc18\uc801\uc778 \ub8e8\ud504\uc758 \uc885\ub8cc\ub294 \uc608\uc678\uc801\uc774\uc9c0 \uc54a\ub2e4. \ubb34\ud55c \ub8e8\ud504\uac00 \uc544\ub2c8\ub77c\uba74, \ub8e8\ud504\uac00 \uc885\ub8cc\ud558\ub294 \uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uae30\ub300\ud558\ub294 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Errors/#note_1","text":"\ud568\uc218\uac00 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc73c\ub85c throw \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c.","title":"Note"},{"location":"Errors/#exception","text":"\uba87\uba87 \uc81c\uc57d\uc774 \uc2ec\ud55c \uc2dc\uc2a4\ud15c\ub4e4\uc740, \uc2e4\ud589\ub418\uae30 \uc804\uc5d0 (\uc77c\ubc18\uc801\uc73c\ub85c \uc9e7\uc740) \uace0\uc815\ub41c \ucd5c\ub300 \ucc98\ub9ac\uc2dc\uac04\uc744 \ubcf4\uc7a5\ud574\uc57c \ud55c\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 throw \ub85c\ubd80\ud130 \ubcf5\uc6d0\ud558\uae30 \uc704\ud55c \uc815\ud655\ud55c \uc2dc\uac04\uc744 \uc608\uce21\ud558\ub294 \ub3c4\uad6c\uac00 \uc788\uc5b4\uc57c\ub9cc \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. See also : RAII See also : discussion","title":"Exception"},{"location":"Errors/#note_2","text":"\uc608\uc678\ub97c \uc0ac\uc6a9\ud55c \uc5d0\ub7ec \ucc98\ub9ac\ub97c \uc88b\uc544\ud558\uc9c0 \uc54a\uac70\ub098 \uacb0\uc815\uc744 \ub0b4\ub9b4 \uc218 \uc5c6\ub2e4\uba74, \ub300\uc548\ub4e4 \uc744 \uac80\ud1a0\ud574\ubcf4\ub77c. \uc5d0\ub7ec \ucc98\ub9ac \ubc29\ubc95\ub4e4\uc740 \uc81c\uac01\uae30 \ubcf5\uc7a1\ud55c \ubd80\ubd84\uacfc \ubb38\uc81c\uac00 \uc788\uae30 \ub9c8\ub828\uc774\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74, \ucc98\ub9ac \ubc29\ubc95\uc758 \ud6a8\uc728\uc131\uc5d0 \ub300\ud574\uc11c \uce21\uc815\uc744 \ud574\ubcf4\ub77c.","title":"Note"},{"location":"Errors/#e3","text":"","title":"E.3: \uc608\uc678\ub294 \uc624\ub958 \ucc98\ub9ac\uc5d0\ub9cc \uc0ac\uc6a9\ud558\ub77c"},{"location":"Errors/#reason_2","text":"\"\uc815\uc0c1\uc801\uc778 \ucf54\ub4dc\"\uc640 \uc624\ub958 \ucc98\ub9ac\ub97c \ubd84\ub9ac\ud558\ub3c4\ub85d \ud574\uc900\ub2e4. C++\uc5d0\uc11c\ub294 \uc608\uc678\uac00 \ub4dc\ubb3c\uac8c \ubc1c\uc0dd\ud558\ub2e4\ub294 \uc804\uc81c \ud558\uc5d0 \ucd5c\uc801\ud654\ub97c \uc801\uc6a9\ud55c\ub2e4.","title":"Reason"},{"location":"Errors/#example-dont","text":"// exception\uc774 \uc5d0\ub7ec \ucc98\ub9ac\ub97c \uc704\ud574 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uace0 \uc788\ub2e4. int find_index ( vector < string >& vec , const string & x ) { try { for ( gsl :: index i = 0 ; i < vec . size (); ++ i ) if ( vec [ i ] == x ) throw i ; // found x } catch ( int i ) { return i ; } return - 1 ; // not found } \uc774\ub7f0 \ucf54\ub4dc\ub294 \ubcf5\uc7a1\ud558\uace0 \uc77c\ubc18\uc801\uc778 for\ubb38 \ubcf4\ub2e4 \ud6e8\uc52c \ub290\ub9b4 \uac83\uc774\ub2e4. vector \uc5d0\uc11c \uac12\uc744 \ucc3e\ub294\ub370 \uc608\uc678\uc801\uc778 \uc0c1\ud669\uc740 \uc5c6\ub2e4.","title":"Example, don't"},{"location":"Errors/#enforcement","text":"\uacbd\ud5d8\uc801\uc73c\ub85c \uc811\uadfc\ud574\uc57c\ud55c\ub2e4. catch \uad6c\ubb38\uc774 \uc608\uc678 \uac12\uc744 \"\uc7a1\uc9c0 \ubabb\ud558\ub294\uc9c0\" \ud655\uc778\ud574\ubcf4\ub77c.","title":"Enforcement"},{"location":"Errors/#e4","text":"","title":"E.4: \ubd88\ubcc0\uc870\uac74\uc744 \uc911\uc2ec\uc73c\ub85c \uc624\ub958 \ucc98\ub9ac \uc804\ub7b5\uc744 \uc124\uacc4\ud558\ub77c"},{"location":"Errors/#reason_3","text":"\uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 \uadf8 \uac1c\uccb4\ub294 (\ubd88\ubcc0\uc870\uac74\uc744 \uc0ac\uc6a9\ud574\uc11c \uc815\uc758\ub41c) \uc62c\ubc14\ub978 \uc0c1\ud0dc\uc5d0 \uc788\uc5b4\uc57c \ud55c\ub2e4. \ub610 \uc624\ub958\ub85c\ubd80\ud130 \uac1c\uccb4\ub4e4\uc744 \ubcf5\uc6d0\ud558\ub824\uba74, \ud30c\uad34\ub418\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub4e4\uc740 \uc62c\ubc14\ub978 \uc0c1\ud0dc\uc5d0 \uc788\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Errors/#note_3","text":"\ubd88\ubcc0\uc870\uac74(invariant) \uc740 \uc0dd\uc131\uc790\uac00 \uc218\ub9bd\ud574\uc57c \ud558\ub294 \uac1c\uccb4 \uba64\ubc84\ub4e4\uc5d0 \ub300\ud55c \ub17c\ub9ac\uc801 \uc870\uac74\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc774\ub7f0 \uc870\uac74\ub4e4\uc740 public \uba64\ubc84 \ud568\uc218\ub4e4\uc5d0\uc11c \uac00\uc815\ud558\ub294 \uac83\ub4e4\uc774\ub2e4.","title":"Note"},{"location":"Errors/#enforcement_1","text":"???","title":"Enforcement"},{"location":"Errors/#e5","text":"","title":"E.5: \uc0dd\uc131\uc790\uc5d0\uc11c \ubd88\ubcc0\uc870\uac74\uc744 \uc124\uc815\ud558\ub3c4\ub85d \ud558\uace0, \uadf8\ub807\uac8c \ud560 \uc218 \uc5c6\uc73c\uba74 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c"},{"location":"Errors/#reason_4","text":"\uc870\uac74\uc744 \ub9cc\uc871\ud558\uc9c0 \uc54a\ub294 \uac1c\uccb4\ub97c \uad6c\uc131\ud558\uba74 \ubb38\uc81c\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \uba64\ubc84 \ud568\uc218 \uc911 \uc77c\ubd80\ub9cc \ud638\ucd9c\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Errors/#example_1","text":"class Vector { // very simplified vector of doubles // if elem != nullptr then elem points to sz doubles public : Vector () : elem { nullptr }, sz { 0 }{} Vector ( int s ) : elem { new double [ s ]}, sz { s } { /* initialize elements */ } ~ Vector () { delete [] elem ; } double & operator []( int s ) { return elem [ s ]; } // ... private : owner < double *> elem ; int sz ; }; \uc8fc\uc11d\uc73c\ub85c \ud45c\uae30\ub41c \uc774 \ud074\ub798\uc2a4\uc758 \ubd88\ubcc0\uc870\uac74\uc740 \uc0dd\uc131\uc790\uc5d0\uc11c \uc124\uc815\ub41c\ub2e4. new \ub294 \uc694\uad6c\ubc1b\uc740 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud558\uc9c0 \ubabb\ud560 \uacbd\uc6b0 \uc608\uc678\ub97c \ub358\uc9c4\ub2e4. \uc5ec\uae30\uc11c operator [] \ub294 \ubd88\ubcc0\uc870\uac74\uc5d0 \uc758\uc874\ud558\uac8c \ub41c\ub2e4. See also : \uc0dd\uc131\uc790\uac00 \uc62c\ubc14\ub978 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\uc9c0 \ubabb\ud55c\ub2e4\uba74, \uc608\uc678\ub97c \ub358\uc838\ub77c","title":"Example"},{"location":"Errors/#enforcement_2","text":"\uc0dd\uc131\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ud074\ub798\uc2a4\ub294 \uc811\uadfc \uc9c0\uc815\uc790 private \uc73c\ub85c \uc9c0\uc815\ud558\ub3c4\ub85d \ud45c\uc2dc\ud55c\ub2e4.","title":"Enforcement"},{"location":"Errors/#e6-raii","text":"","title":"E.6: RAII\ub97c \uc0ac\uc6a9\ud574 \ub204\uc218\ub97c \ubc29\uc9c0\ud558\ub77c"},{"location":"Errors/#reason_5","text":"\uc77c\ubc18\uc801\uc73c\ub85c \ub204\uc218\ub294 \ud5c8\uc6a9\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4.RAII(\uc790\uc6d0 \ud68d\ub4dd\uc740 \ucd08\uae30\ud654)\ub294 \ub204\uc218\ub97c \ubc29\uc9c0\ud558\ub294 \uac04\ub2e8\ud558\uace0, \uac00\uc7a5 \uccb4\uacc4\uc801\uc778 \ubc29\ubc95\uc774\ub2e4.","title":"Reason"},{"location":"Errors/#example_2","text":"void f1 ( int i ) // Bad: possibly leak { int * p = new int [ 12 ]; // ... if ( i < 17 ) throw Bad { \"in f()\" , i }; // ... } \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc804\uc5d0 \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud560 \uc218\ub3c4 \uc788\ub2e4: void f2 ( int i ) // Clumsy and error-prone: explicit release { int * p = new int [ 12 ]; // ... if ( i < 17 ) { delete [] p ; throw Bad { \"in f()\" , i }; } // ... } \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc9c0\uc800\ubd84\ud558\ub2e4. \ub2e4\uc218\uc758 throw \uac00 \uac00\ub2a5\ud55c \uacbd\uc6b0, \uba85\uc2dc\uc801\uc778 \ud574\uc81c\ub294 \ubc18\ubcf5\uc801\uc774\uace0, \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\ub2e4. void f3 ( int i ) // OK: resource management done by a handle (but see below) { auto p = make_unique < int [] > ( 12 ); // ... if ( i < 17 ) throw Bad { \"in f()\" , i }; // ... } RAII\ub294 \ud638\ucd9c\ubc1b\uc740 \ud568\uc218\uc5d0\uc11c \ubb35\uc2dc\uc801\uc73c\ub85c throw \ud558\ub294 \uc0c1\ud669\uc5d0\uc11c\ub3c4 \ub3d9\uc791\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c: void f4 ( int i ) // OK: resource management done by a handle (but see below) { auto p = make_unique < int [] > ( 12 ); // ... helper ( i ); // may throw // ... } \ud3ec\uc778\ud130\uac00 \ubc18\ub4dc\uc2dc \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\uba74, \uc9c0\uc5ed \ubcc0\uc218\ub85c \ucc98\ub9ac\ud558\ub77c: void f5 ( int i ) // OK: resource management done by local object { vector < int > v ( 12 ); // ... helper ( i ); // may throw // ... } \ub354 \uac04\ub2e8\ud558\uace0 \uc548\uc804\ud558\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc120 \ub354 \ud6a8\uc728\uc801\uc774\uae30\ub3c4 \ud558\ub2e4.","title":"Example"},{"location":"Errors/#note_4","text":"\uc790\uc6d0\uc744 \ud574\uc81c\ud574\uc8fc\ub294 \ub9ac\uc18c\uc2a4 \ud578\ub4e4 \uac1c\uccb4\uac00 \uc5c6\ub2e4\uba74 \ud639\uc740 \uc801\ud569\ud55c RAII \uac1c\uccb4/\ud578\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ubd88\uac00\ud558\ub2e4\uba74, \uc790\uc6d0\ud574\uc81c \ub3d9\uc791\ub4e4\uc740 final_action \uac1c\uccb4 \ub97c \uc0ac\uc6a9\ud574\uc11c \uc218\ud589\ud560 \uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Errors/#note_5","text":"\uadf8\ub7ec\ub098 \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud55c\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c \ud560\uae4c? \ud55c\ubc88 \uadf8 \uc0dd\uac01\uc5d0 \ub3c4\uc804\ud574 \ubcf4\uc790; \uc608\uc678\ub97c \ubc18\ub300\ud558\ub294 \ub9ce\uc740 \uc758\uacac\uc774 \uc788\uc744 \uac83\uc774\ub2e4. \uadf8 \uc911\uc5d0 \uba87\uba87 \ud0c0\ub2f9\ud55c \uc758\uacac\ub4e4\uc5d0 \ub300\ud574 \uc54c\uc544 \ubcf4\uc790: \uc608\uc678\ub97c \uc801\uc6a9\ud558\ub824\uba74 \uba54\ubaa8\ub9ac\ub97c \ub2e4 \uc368\ubc84\ub9ac\ub294 \uc544\uc8fc \uc791\uc740(2K\ubcf4\ub2e4 \uc791\uc740) \uc2dc\uc2a4\ud15c \uc0c1\uc5d0 \uc788\ub2e4. \uc81c\ud55c \uc2dc\uac04 \uc548\uc5d0 \ubc18\ub4dc\uc2dc \uc751\ub2f5\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294 \uacbd\uc6b0, \uc694\uad6c\ub41c \uc2dc\uac04 \uc548\uc5d0 \uc608\uc678\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\ub2e4. \ub09c\ud574\ud55c \ubc29\uc2dd\uc73c\ub85c \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub294 \uc5c4\uccad\ub09c \uc591\uc758 \ub808\uac70\uc2dc \ucf54\ub4dc\ub97c \uac00\uc9c4 \uc2dc\uc2a4\ud15c \uc0c1\uc5d0 \uc788\ub2e4. (\ud2b9\ud788 \uc18c\uc720\uad8c \uad00\ub828\ub41c \uc815\ucc45\uc774 \ubcf4\uc774\uc9c0 \uc54a\uc544\uc11c) \uc608\uc678\uac00 \uba54\ubaa8\ub9ac \ub204\uc218\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. C++ \uc608\uc678 \uba54\ucee4\ub2c8\uc998\uc744 \uad6c\ud604\ud55c \uac83\uc774 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4.(\uc18d\ub3c4, \uba54\ubaa8\ub9ac \uc18c\ube44, DLL\uc5d0\uc11c\uc758 \ubd88\ubd84\uba85\ud55c \ucc98\ub9ac\uc2e4\ud328 \ub4f1) (\uc608\uc678 \uad6c\ud604\uc744 \uc81c\uacf5\ud55c \ucabd\uc5d0 \ud56d\uc758\ud558\ub77c; \ubd88\ud3c9\uc774 \uc5c6\ub2e4\uba74 \uac1c\uc120\ub3c4 \uc5c6\ub2e4.) \ub9e4\ub2c8\uc800\uac00 \uac00\uc9c4 \uc624\ub798\ub41c \uc9c0\uc2dd\uc5d0 \ub3c4\uc804\ud558\uba74 \ud574\uace0\ub2f9\ud55c\ub2e4 \uc5ec\uae30\uc11c \uccab\ubc88\uc9f8 \uc774\uc720\ub9cc\uc774 \uadfc\ubcf8\uc801\uc778 \uacbd\uc6b0\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74, RAII\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uac70\ub098, RAII \uac1c\uccb4\ub4e4\uc774 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a4\uc9c0 \uc54a\ub3c4\ub85d \uc124\uacc4\ud558\ub77c. \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74, RAII\ub97c \ud749\ub0b4\ub77c\ub3c4 \ub0b4\ub77c. \uc989, \uccb4\uacc4\uc801\uc73c\ub85c \uac1c\uccb4\uac00 \uc0dd\uc131\ub41c \ud6c4 \uc720\ud6a8\ud55c\uc9c0 \uac80\uc0ac\ud558\uace0 \uc18c\uba78\uc790\uc5d0\uc11c \uc790\uc6d0\uc744 \ubaa8\ub450 \ud574\uc81c\ud558\ub77c. valid() \uc5f0\uc0b0\uc744 \ucd94\uac00\ud558\ub294 \uac83\uc774 \uc88b\uc744 \uc218\ub3c4 \uc788\ub2e4. void f () { vector < string > vs ( 100 ); // not std::vector: valid() added if ( ! vs . valid ()) { // handle error or exit } ifstream fs ( \"foo\" ); // not std::ifstream: valid() added if ( ! fs . valid ()) { // handle error or exit } // ... } // destructors clean up as usual \uc774\ub7f0 \ubc29\ubc95\uc740 \ucf54\ub4dc\uc758 \uae38\uc774\uac00 \ub298\uc5b4\ub098\uc9c0\ub9cc, \"exception\"\uc774 \uc804\ud30c\ub418\ub294 \uac83\uc744 valid() \uac80\uc0ac\ub97c \ud1b5\ud574\uc11c \ubc29\uc9c0\ud55c\ub2e4. valid() \uac80\uc0ac\uac00 \uc2e4\uc218\ub85c \uc78a\ud600\uc9c8 \uc218 \uc788\uc73c\ub2c8 \uac00\ub2a5\ud558\ub2e4\uba74 \uc608\uc678\ub97c \uc120\ud638\ud558\ub77c. See also : noexcept \uc758 \uc0ac\uc6a9","title":"Note"},{"location":"Errors/#enforcement_3","text":"???","title":"Enforcement"},{"location":"Errors/#e7","text":"","title":"E.7: \uc120\ud589\uc870\uac74\uc744 \uae30\uc220\ud558\ub77c"},{"location":"Errors/#reason_6","text":"\uc778\ud130\ud398\uc774\uc2a4 \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. See also : precondition rule","title":"Reason"},{"location":"Errors/#e8","text":"","title":"E.8: \ud6c4\ud589\uc870\uac74\uc744 \uae30\uc220\ud558\ub77c"},{"location":"Errors/#reason_7","text":"\uc778\ud130\ud398\uc774\uc2a4 \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. See also : postcondition rule","title":"Reason"},{"location":"Errors/#e12-throw-noexcept","text":"","title":"E.12: throw\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uac70\ub098 \ubd88\uac00\ub2a5\ud55c \ud568\uc218\uc5d0\ub294 noexcept\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Errors/#reason_8","text":"\uc624\ub958 \ucc98\ub9ac\ub97c \uccb4\uacc4\uc801\uc774\uace0, \uacac\uace0\ud558\uba70, \ud6a8\uc728\uc801\uc73c\ub85c \ub9cc\ub4e0\ub2e4.","title":"Reason"},{"location":"Errors/#example_3","text":"double compute ( double d ) noexcept { return log ( sqrt ( d <= 0 ? 1 : d )); } \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 compute \ud568\uc218\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \uc791\uc131\ub418\uc5c8\ub2e8 \uc0ac\uc2e4\uc744 \uc54c\uc218 \uc788\ub2e4. noexcept \ub85c \uc120\uc5b8\ud568\uc73c\ub85c\uc368, \uc6b0\ub9ac\ub294 \ucef4\ud30c\uc77c\ub7ec\uc640 \ub2e4\ub978 \uc774\ub4e4\uc5d0\uac8c compute \ud568\uc218\ub97c \uc774\ud574\ud558\uace0 \ubcc0\uacbd\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Errors/#note_6","text":"C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \"\uc2b9\uacc4\ub41c\" \ub9ce\uc740 C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub4e4\uc740 noexcept \ub85c \uc815\uc758\ub418\uc5b4\uc788\ub2e4.","title":"Note"},{"location":"Errors/#example_4","text":"vector < double > munge ( const vector < double >& v ) noexcept { vector < double > v2 ( v . size ()); // ... do something ... } \uc774 \ucf54\ub4dc\uc5d0\uc11c noexcept \ub294 \uc9c0\uc5ed\ubcc0\uc218 vector \uc758 \uc0dd\uc131\uc774 \uc2e4\ud328\ud558\ub294 \uc0c1\ud669\uc744 \ucc98\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \ud45c\ud604\ud558\uace0 \uc788\ub2e4. \uc774 \ub9d0\uc778 \uc989, \uba54\ubaa8\ub9ac \uace0\uac08\uc744 (\ud558\ub4dc\uc6e8\uc5b4 \uc2e4\ud328\uc640 \uac19\uc740)\uc2ec\uac01\ud55c \uc124\uacc4 \uc624\ub958\ub85c \uac04\uc8fc\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \uc608\uc678\uac00 \ubc1c\uc0dd\ud55c\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \ud06c\ub798\uc2dc\ub97c \uc77c\uc73c\ud0ac \uac83\uc774\ub2e4.","title":"Example"},{"location":"Errors/#note_7","text":"\uc804\ud1b5\uc801\uc778 \uc608\uc678 \uba85\uc138\ubc95 \uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c","title":"Note"},{"location":"Errors/#see-also","text":"discussion .","title":"See also"},{"location":"Errors/#e13","text":"","title":"E.13: \uac1c\uccb4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \uc18c\uc720\ud558\ub294 \uc911\uc5d0\ub294 \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\uc120 \uc548\ub41c\ub2e4"},{"location":"Errors/#reason_9","text":"\uc790\uc6d0 \ub204\uc218\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Errors/#example_5","text":"void leak ( int x ) // don't: may leak { auto p = new int { 7 }; if ( x < 0 ) throw Get_me_out_of_here {}; // may leak *p // ... delete p ; // we may never get here } \uc774\ub7f0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c \uc77c\uad00\uc801\uc73c\ub85c \uc790\uc6d0 \ud578\ub4e4(resource handle)\uc744 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4: void no_leak ( int x ) { auto p = make_unique < int > ( 7 ); if ( x < 0 ) throw Get_me_out_of_here {}; // will delete *p if necessary // ... // no need for delete p } \ub2e4\ub978 (\ub354 \ub098\uc740) \ud574\uacb0\ucc45\uc740 \ud3ec\uc778\ud130\ub97c \ub300\uc2e0\ud574 \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4: void no_leak_simplified ( int x ) { vector < int > v ( 7 ); // ... }","title":"Example"},{"location":"Errors/#note_8","text":"\uc815\ub9ac \uc791\uc5c5\uc774 \ud544\uc694\ud558\uc9c0\ub9cc \uc18c\uba78\uc790\uac00 \uc5c6\ub294 \uc9c0\uc5ed \ubcc0\uc218\ub4e4\uc774 \uc788\ub2e4\uba74, \uadf8 \uc791\uc5c5\ub4e4\uc740 throw \uc5d0 \uc55e\uc11c \uc218\ud589\ub418\uc5b4\uc57c \ud55c\ub2e4. finally() \ub294 \uadf8\uc640 \uac19\uc740 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ub204\ub77d\ub420 \uc218 \uc788\ub294 \uc791\uc5c5\ub4e4\uc744 \uc880 \ub354 \uad00\ub9ac\ud558\uae30 \uc27d\uac8c \ud574\uc900\ub2e4.","title":"Note"},{"location":"Errors/#e14","text":"","title":"E.14:\ubaa9\uc801\uc5d0 \ub9de\uac8c \uc124\uacc4\ub41c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc744 \uc608\uc678\ub85c \uc0ac\uc6a9\ud558\ub77c (\ub0b4\uc7a5 \ud0c0\uc785\uc740 \uc548\ub41c\ub2e4)"},{"location":"Errors/#reason_10","text":"\ud504\ub85c\uadf8\ub798\uba38\uac00 \uc815\uc758\ud55c \ud0c0\uc785\ub4e4\uc740 \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uc608\uc678\uc640 \ucda9\ub3cc\ud560 \uac00\ub2a5\uc131\uc774 \uc801\ub2e4.","title":"Reason"},{"location":"Errors/#example_6","text":"void my_code () { // ... throw Moonphase_error {}; // ... } void your_code () { try { // ... my_code (); // ... } catch ( const Bufferpool_exhausted & ) { // ... } }","title":"Example"},{"location":"Errors/#example-dont_1","text":"void my_code () // Don't { // ... throw 7 ; // 7 means \"moon in the 4th quarter\" // ... } void your_code () // Don't { try { // ... my_code (); // ... } catch ( int i ) { // i == 7 means \"input buffer too small\" // ... } }","title":"Example, don't"},{"location":"Errors/#note_9","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc608\uc678 \ud074\ub798\uc2a4\ub4e4\uc740 std::exception \uc744 \uc0c1\uc18d\ud558\uace0 \uc788\ub2e4. \uc774\ub4e4\uc5d0 \ub300\ud55c \uc624\ub958 \ucc98\ub9ac\ub294 std::exception \ub610\ub294 \"\uc77c\ubc18\uc801\uc778\" \ucc98\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud55c\ub2e4. \ub0b4\uc7a5 \ud0c0\uc785\ub4e4\uc744 \uc608\uc678 \uac1c\uccb4\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ub2e4\ub978 \uc0ac\uc6a9\uc790\ub4e4\uc758 \ucf54\ub4dc\uc640 \ucda9\ub3cc\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Errors/#example-dont_2","text":"void my_code () // Don't { // ... throw runtime_error { \"moon in the 4th quarter\" }; // ... } void your_code () // Don't { try { // ... my_code (); // ... } catch ( const runtime_error & ) { // runtime_error means \"input buffer too small\" // ... } } See also : Discussion","title":"Example, don't"},{"location":"Errors/#enforcement_4","text":"\ub0b4\uc7a5 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 throw \uc640 catch \ub97c \uc7a1\uc544\ub0b4\ub77c. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 std::exception \uae30\ubc18\uc758 \uacc4\uce35\uad6c\uc870\uc5d0 \ud3ec\ud568\ub41c \uc608\uc678 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \ub0ab\ub2e4.","title":"Enforcement"},{"location":"Errors/#e15","text":"","title":"E.15: \uacc4\uce35 \uad6c\uc870\uac00 \uc788\ub294 \uc608\uc678\ub294 \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574\uc11c \ucc98\ub9ac\ud558\ub77c"},{"location":"Errors/#reason_11","text":"\uc608\uc678 \uac1c\uccb4\uc758 \ubcf5\uc0ac \uc190\uc2e4\uc744 \ubc29\uc9c0\ud55c\ub2e4.","title":"Reason"},{"location":"Errors/#example_7","text":"void f () { try { // ... } catch ( exception e ) { // don't: may slice // ... } } \ub300\uc2e0 \ucc38\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c: catch ( exception & e ) { /* ... */ } const \ucc38\uc870\ub97c \uc0ac\uc6a9\ud558\uba74 \ub354 \uc88b\ub2e4: catch ( const exception & e ) { /* ... */ } Most handlers do not modify their exception and in general we recommend use of const .","title":"Example"},{"location":"Errors/#note_10","text":"To rethrow a caught exception use throw; not throw e; . Using throw e; would throw a new copy of e (sliced to the static type std::exception ) instead of rethrowing the original exception of type std::runtime_error . (But keep Don't try to catch every exception in every function and Minimize the use of explicit try / catch in mind.)","title":"Note"},{"location":"Errors/#enforcement_5","text":"\uac12\uc73c\ub85c \uc608\uc678\ub97c \ucc98\ub9ac\ud558\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c. \uc644\ubcbd\ud788 \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc120 \uc804\uccb4 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud55c \ubd84\uc11d\uc774 \ud544\uc694\ud560 \uc218 \uc788\ub2e4.","title":"Enforcement"},{"location":"Errors/#e16-swap","text":"","title":"E.16: \uc18c\uba78\uc790, \uc790\uc6d0\ud574\uc81c, swap\uc740 \uc808\ub300 \uc2e4\ud328\ud574\uc120 \uc548\ub41c\ub2e4"},{"location":"Errors/#reason_12","text":"\uc18c\uba78\uc790, \uba54\ubaa8\ub9ac \ud574\uc81c, swap \uc774 \uc2e4\ud328\ud55c\ub2e4\uba74 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud560 \uc218 \uc5c6\ub2e4; \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uac70\ub098 \ud574\uc57c \ud560 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\uace0 \uc885\ub8cc\ud558\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4.","title":"Reason"},{"location":"Errors/#example-dont_3","text":"class Connection { // ... public : ~ Connection () // Don't: very bad destructor { if ( cannot_disconnect ()) throw I_give_up { information }; // ... } };","title":"Example, don't"},{"location":"Errors/#note_11","text":"\uc608\uc2dc\uc5d0 \ub098\uc628 \"close\ub97c \uac70\ubd80\ud558\ub294\" \ub124\ud2b8\uc6cc\ud06c \uc5f0\uacb0 \ud074\ub798\uc2a4\ucc98\ub7fc, \ub9ce\uc740 \uc774\ub4e4\uc774 \uc774 \uaddc\uce59\uc744 \uc704\ubc18\ud558\uba74\uc11c \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub824\uace0 \uc2dc\ub3c4\ud574\uc654\ub2e4. \uc6b0\ub9ac\uac00 \uc544\ub294 \uc120\uc5d0\uc11c \ub204\uad6c\ub3c4 \uc774\ub97c \uc77c\ubc18\ud654\ud558\uc9c0 \ubabb\ud588\ub2e4. \ub54c\ub54c\ub85c, \uc544\uc8fc \uc608\uc678\uc801\uc778 \uacbd\uc6b0, \ub098\uc911\uc5d0 \uc815\ub9ac\uc791\uc5c5\uc744 \ud558\uae30 \uc704\ud578 \uc0c1\ud0dc\ub97c \uc124\uc815\ud558\ub294 \uac83\uc774 \uac00\ub2a5\ud560 \uac83\uc774\ub2e4. \uc608\ucee8\ub300, close\ud558\uae38 \uc6d0\ud558\uc9c0 \uc54a\ub294 \uc18c\ucf13\uc740 \"\ubb38\uc81c\uc788\ub294 \uc18c\ucf13\"\ubaa9\ub85d\uc5d0 \ucd94\uac00\ud558\uace0 \uc815\uae30\uc801\uc73c\ub85c sweep\ud560\uc218\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. \uc5ec\ud0dc\uaecf \uc774 \uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294 \uc0ac\ub840\ub4e4\uc740 \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\uac70\ub098, \ud2b9\ubcc4\ud558\uac70\ub098, \ub54c\ub85c\ub294 \ubc84\uadf8\ud22c\uc131\uc774\uc600\ub2e4.","title":"Note"},{"location":"Errors/#note_12","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc18c\uba78\uc790, ( operator delete \uac19\uc740) \uc790\uc6d0 \ud574\uc81c \ud568\uc218, swap \ud568\uc218\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. \uc608\uc678\ub97c \ub358\uc9c4\ub2e4\uba74, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \ubd88\ubcc0\uc870\uac74\uc774 \ucda9\uc871\ub418\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Errors/#note_13","text":"operator delete \uc640 \uac19\uc740 \ud574\uc81c \ud568\uc218\ub294 \ubc18\ub4dc\uc2dc noexcept \uc5ec\uc57c \ud55c\ub2e4. swap \ud568\uc218\ub294 \ubc18\ub4dc\uc2dc noexcept \uc5ec\uc57c \ud55c\ub2e4. \uc18c\uba78\uc790\ub4e4\uc740 \ud45c\uae30\ud558\uc9c0 \uc54a\uc544\ub3c4 \uae30\ubcf8\uc801\uc73c\ub85c noexcept \ub85c \uac04\uc8fc\ub41c\ub2e4. move \uc5f0\uc0b0\ub3c4 noexcept \ub85c \ub9cc\ub4e4\uc5b4\ub77c .","title":"Note"},{"location":"Errors/#enforcement_6","text":"\uc608\uc678\ub97c \ub358\uc9c0\ub294 \uc18c\uba78\uc790, \uc790\uc6d0\ud574\uc81c \ud568\uc218, swap \uc744 \uc7a1\uc544\ub0b4\ub77c. \ube44\uc2b7\ud55c \uc5ed\ud560\uc744 \ud558\ub294 \ud568\uc218\ub4e4\uc774 noexcept \uac00 \uc544\ub2cc \uacbd\uc6b0\uc5d0\ub3c4 \uc7a1\uc544\ub0b4\uc57c \ud55c\ub2e4. See also : discussion","title":"Enforcement"},{"location":"Errors/#e17","text":"","title":"E.17: \uac01\uac01\uc758 \ud568\uc218\ub4e4\uc5d0\uc11c \ubaa8\ub4e0 \uc608\uc678\ub97c \ucc98\ub9ac\ud558\ub824\uace0 \ud558\uc9c0 \ub9c8\ub77c"},{"location":"Errors/#reason_13","text":"\ud568\uc218 \ub0b4\uc5d0\uc11c \uc608\uc678\ub97c catch\ud558\ub294 \uac83\uc740 \uc720\uc758\ubbf8\ud55c \ubcf5\uad6c \uc791\uc5c5\uc744 \ud558\uae30 \uc5b4\ub824\uc6b0\uba70, \ubcf5\uc7a1\uc131\uc744 \ub192\uc774\uace0 \ub0ad\ube44\uac00 \ub420 \uc218 \uc788\ub2e4. \uc608\uc678\ub97c \ub358\uc9c8 \ub54c\ub294 \uadf8 \uc608\uc678\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub85c \uc804\ud30c\ub418\ub3c4\ub85d \ub0a8\uaca8\ub450\uc5b4\ub77c. \uc774\ub54c \uc815\ub9ac\uc791\uc5c5\uc640 \ud638\ucd9c\uc2a4\ud0dd \ub418\uac10\uae30\ub294 RAII \uc5d0\uac8c \ub9e1\uaca8\ub77c.","title":"Reason"},{"location":"Errors/#example-dont_4","text":"void f () // bad { try { // ... } catch (...) { // no action throw ; // propagate exception } }","title":"Example, don't"},{"location":"Errors/#enforcement_7","text":"\uc911\ucca9\ub41c try \uad6c\ubb38\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c \ud568\uc218\uc5d0 \uc9c0\ub098\uce58\uac8c \ube48\ubc88\ud55c try \ube14\ub7ed\ub4e4\uc744 \uc0ac\uc6a9\ud55c \uc18c\uc2a4 \ucf54\ub4dc\ub97c \uc9c0\uc801\ud558\ub77c ( \"\uc9c0\ub098\uce58\uac8c \ube48\ubc88\ud55c\"\uc744 \uc815\uc758\ud560 \uc218 \uc788\ub294\uac00??)","title":"Enforcement"},{"location":"Errors/#e18-trycatch","text":"","title":"E.18:  \uba85\uc2dc\uc801\uc778 try/catch\ubb38\uc758 \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c"},{"location":"Errors/#reason_14","text":"try / catch \ub294 \ubc88\uac70\ub86d\uace0 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30\ub3c4 \uc27d\ub2e4. try / catch \ub294 \uc800\ub808\ubca8 \uc790\uc6d0 \uad00\ub9ac \ub610\ub294 \uc624\ub958 \ucc98\ub9ac\uac00 \uccb4\uacc4\uc801\uc774\uc9c0 \uc54a\ub2e4\ub294 \uc2e0\ud638\uc77c \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Errors/#example-bad","text":"void f ( zstring s ) { Gadget * p ; try { p = new Gadget ( s ); // ... delete p ; } catch ( Gadget_construction_failure ) { delete p ; throw ; } } \uc9c0\uc800\ubd84\ud55c \ucf54\ub4dc\ub2e4. try \ube14\ub85d \ub0b4\uc5d0 \uc788\ub294 \ud3ec\uc778\ud130 p \uc5d0\uc11c \ub204\uc218\uac00 \ubc1c\uc0c1\ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 \uc608\uc678\ub97c \ucc98\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc628\uc804\ud788 \uc0dd\uc131\ub418\uc9c0 \uc54a\uc740 \uac1c\uccb4\ub97c delete \ud558\ub294 \uac83\uc740 \uc798\ubabb\ub41c \uc0ac\uc6a9\ubc95\uc774\ub2e4. \ub354 \ub098\uc740 \uc0dd\uc131\ubc29\ubc95: void f2 ( zstring s ) { Gadget g { s }; }","title":"Example, Bad"},{"location":"Errors/#alternatives","text":"\ub9ac\uc18c\uc2a4 \ud578\ub4e4\uacfc RAII \ub97c \uc0ac\uc6a9\ud558\ub77c finally","title":"Alternatives"},{"location":"Errors/#enforcement_8","text":"??? \uc5b4\ub835\ub2e4. \uacbd\ud5d8\uc801\uc778(Heuristic) \uc811\uadfc\uc774 \ud544\uc694\ud558\ub2e4.","title":"Enforcement"},{"location":"Errors/#e19-final_action","text":"","title":"E.19: \uc801\ub2f9\ud55c \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74 \ud574\uc81c\ubc29\ubc95\uc744 \ub098\ud0c0\ub0bc final_action \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Errors/#reason_15","text":"finally \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub35c \ubc88\uac70\ub86d\uace0, try / catch \uc5d0 \ube44\ud574 \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc5b4\ub835\ub2e4.","title":"Reason"},{"location":"Errors/#example_8","text":"void f ( int n ) { void * p = malloc ( 1 , n ); auto _ = finally ([ p ] { free ( p ); }); // ... }","title":"Example"},{"location":"Errors/#note_14","text":"finally \ub294 try / catch \ub9cc\ud07c \uc9c0\uc800\ubd84\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc, \uc784\uc2dc\uc801\uc778(ad-hoc) \ubc29\ubc95\uc774\ub2e4. \uc801\ud569\ud55c \ub9ac\uc18c\uc2a4 \uad00\ub9ac \uac1c\uccb4 \ub97c \uc0ac\uc6a9\ud558\ub77c. finally \ub294 \ucd5c\ud6c4\uc758 \ubc29\ubc95\uc73c\ub85c \uc0dd\uac01\ud558\ub77c.","title":"Note"},{"location":"Errors/#note_15","text":"goto exit; \ubc29\ubc95 \uacfc \ube44\uad50\ud558\uba74 finally \ub294 \uc5b8\uc5b4 \uc2dc\uc2a4\ud15c\uc744 \uc0ac\uc6a9\ud558\ub294 \uccb4\uacc4\uc801\uc774\uace0 \uae54\ub054\ud55c \ub300\uc548\uc774\ub2e4.","title":"Note"},{"location":"Errors/#enforcement_9","text":"\uacbd\ud5d8\uc801\uc774\ub2e4 : goto exit; \uc774 \uc788\ub294\uc9c0 \ud655\uc778\ud558\ub77c","title":"Enforcement"},{"location":"Errors/#e25-raii","text":"","title":"E.25: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub294 \uacbd\uc6b0, RAII\ub85c \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub77c"},{"location":"Errors/#reason_16","text":"\uc608\uc678\uac00 \uc5c6\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4, RAII \ub294 \ubcf4\ud1b5 \uc790\uc6d0\uc744 \ub2e4\ub8e8\ub294 \ucd5c\uace0\uc758, \uac00\uc7a5 \uccb4\uacc4\uc801\uc778 \ubc29\ubc95\uc774\ub2e4.","title":"Reason"},{"location":"Errors/#note_16","text":"C++\uc5d0\uc11c \uc608\uc678\ub97c \uc774\uc6a9\ud55c \uc624\ub958\ucc98\ub9ac\ub294 \uc9c0\uc5ed\uc801\uc774\uc9c0 \uc54a\uc740 \uc624\ub958\ub97c \ub2e4\ub8e8\uae30 \uc704\ud55c \ubc29\ubc95\uc774\ub2e4. \ud2b9\ud788 \uac1c\uccb4 \uc0dd\uc131\uc5d0\uc11c \ube44-\uce68\uc2b5\uc801\uc73c\ub85c \uc0dd\uc131 \uc2e4\ud328\ub97c \uc54c\ub9ac\ub294 \ub370\ub294 \uc608\uc678\uac00 \ud544\uc694\ud558\ub2e4. \uc624\ub958\uc758 \ubc1c\uc0dd\uc744 \uc54c\ub9ac\ub294(signaling) \uac83\uc774 \ubb34\uc2dc\ub418\uc9c0 \ubabb\ud558\uac8c \ud558\uae30 \uc704\ud574\uc120 \uc608\uc678\uac00 \ud544\uc694\ud558\ub2e4. \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74, \ub2f9\uc2e0\uc774 \ud560 \uc218 \uc788\ub294 \ud55c \uadf8\uc640 \uc720\uc0ac\ud55c \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc608\uc678\uc5d0 \ub300\ud55c \ub9ce\uc740 \uc6b0\ub824\ub4e4\uc740 \uc798\ubabb\ub41c \uac83\uc774\ub2e4. \ud3ec\uc778\ud130\ub098 \ubcf5\uc7a1\ud55c \uc81c\uc5b4 \uad6c\uc870\ub4e4\ub85c \uc778\ud574 \ub09c\uc7a1\ud558\uc9c0 \uc54a\uc740 \ud658\uacbd\uc5d0\uc11c \uc0ac\uc6a9\ub420\ub54c\ub294 \uc608\uc678\ub294 \uac70\uc758 \uc5b8\uc81c\ub098 (\uc2dc\uac04\uacfc \uacf5\uac04\uc801\uc778 \uce21\uba74\uc5d0\uc11c) \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774\uace0, \ub354 \ub098\uc740 \ucf54\ub4dc\ub85c \uc774\uc5b4\uc9c4\ub2e4. \uc774\ub294 \ubaa8\ub4e0 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \ud574\ub2f9\ud558\uc9c4 \uc54a\uc9c0\ub9cc \uc608\uc678 \ucc98\ub9ac \uba54\ucee4\ub2c8\uc998\uc774 \uc798 \uad6c\ud604\ub41c \uac83\uc744 \uc804\uc81c\ud55c\ub2e4. \uc704\uc640 \uac19\uc740 \ubb38\uc81c\ub97c \uc801\uc6a9\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. \uc9e7\uc740 \uc2dc\uac04 \ub0b4\uc5d0 \uc751\ub2f5\uc744 \ubcf4\uc7a5\ud574\uc57c\ud558\ub294(Hard-real-time) \uc2dc\uc2a4\ud15c\ub4e4\uc774 \uadf8\ub7f0 \uacbd\uc6b0\uc778\ub370, \uc815\ud574\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \uc624\ub958\ub098 \uc815\ud655\ud55c \ub2f5\uc744 \uc0b0\ucd9c\ud574\uc57c\ub9cc \ud558\ub294 \uc5f0\uc0b0\ub4e4 \ub54c\ubb38\uc774\ub2e4. \uc2dc\uac04\uc744 \uce21\uc815\ud560 \uc218 \uc788\ub294 \uc801\ud569\ud55c \ub3c4\uad6c\uac00 \uc5c6\ub2e4\uba74, \uc608\uc678\uac00 \uc774\ub97c \ucda9\uc871\uc2dc\ud0a4\uae30\ub294 \uc5b4\ub835\ub2e4. \uadf8\ub7f0 \uc2dc\uc2a4\ud15c(\uac00\ub839, \ube44\ud589\uae30 \uc870\uc885 \uc18c\ud504\ud2b8\uc6e8\uc5b4)\uc5d0\uc11c\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ub3d9\uc801(heap) \uba54\ubaa8\ub9ac \uc0ac\uc6a9 \ub610\ud55c \ubc30\uc81c\ub418\uae30\ub3c4 \ud55c\ub2e4. \uacb0\uad6d, \uc624\ub958 \ucc98\ub9ac\uc5d0 \ub300\ud55c \ucd5c\uc6b0\uc120 \uac00\uc774\ub4dc\ub294 \uc774\ub807\ub2e4. \"\uc608\uc678\uc640 RAII \ub97c \uc0ac\uc6a9\ud558\ub77c\". \uc774 \ubd80\ubd84\uc5d0\uc11c\ub294 \uc608\uc678\uc758 \uad6c\ud604\uc774\ub098 \uc608\uc678\uac00 \ud6a8\uc728\uc801\uc774\uc9c0 \uc54a\uc740 \uacbd\uc6b0, \uc624\ub798\ub41c \ucf54\ub4dc\uc758 \ucc98\ub9ac \uc2a4\ud0c0\uc77c\ub4f1 \uc608\uc678 \ucc98\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 \uc0c1\ud669\ub3c4 \uace0\ub824\ud55c\ub2e4. (\uac00\ub839, \uc5c4\uccad\ub09c \uc218\uc758 \ud3ec\uc778\ud130, \uc798\ubabb \uc815\uc758\ub41c \uc18c\uc720\uad8c, \uc624\ub958\ucf54\ub4dc \uac80\uc0ac\uc5d0 \uae30\ubc18\ud55c \uccb4\uacc4\uc801\uc774\uc9c0 \uc54a\uc740 \uc624\ub958\ucc98\ub9ac\ub4e4 \ub4f1\ub4f1) \uacb0\uad6d, \uc624\ub958 \ucc98\ub9ac\uc5d0 \ub300\ud55c \ucd5c\uc6b0\uc120 \uac00\uc774\ub4dc\ub294 \uc774\ub807\ub2e4. \"\uc608\uc678\uc640 RAII \ub97c \uc0ac\uc6a9\ud558\ub77c\". \uc774 \ubd80\ubd84\uc5d0\uc11c\ub294 \uc608\uc678\uc758 \uad6c\ud604\uc774\ub098 \uc608\uc678\uac00 \ud6a8\uc728\uc801\uc774\uc9c0 \uc54a\uc740 \uacbd\uc6b0, \uc624\ub798\ub41c \ucf54\ub4dc\uc758 \ucc98\ub9ac \uc2a4\ud0c0\uc77c\ub4f1 \uc608\uc678 \ucc98\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 \uc0c1\ud669\ub3c4 \uace0\ub824\ud55c\ub2e4. (\uac00\ub839, \uc5c4\uccad\ub09c \uc218\uc758 \ud3ec\uc778\ud130, \uc798\ubabb \uc815\uc758\ub41c \uc18c\uc720\uad8c, \uc624\ub958\ucf54\ub4dc \uac80\uc0ac\uc5d0 \uae30\ubc18\ud55c \uccb4\uacc4\uc801\uc774\uc9c0 \uc54a\uc740 \uc624\ub958\ucc98\ub9ac\ub4e4 \ub4f1\ub4f1) \uc608\uc678\uc640 \uadf8 \ube44\uc6a9\uc5d0 \ub300\ud574 \ube44\ub09c\ud558\uae30 \uc804\uc5d0, error codes \uc5d0 \uc788\ub294 \uc0ac\ub840\ub4e4\uc744 \uace0\ub824\ud574\ubcf4\ub77c. \ube44\uc6a9\uacfc \uc624\ub958 \ucf54\ub4dc\ub97c \ub2e4\ub8f0\ub54c\uc758 \ubcf5\uc7a1\ud568\uc744 \ubaa8\ub450 \uace0\ub824\ud558\ub77c. \uc131\ub2a5\uc774 \uac71\uc815\ub41c\ub2e4\uba74, \uce21\uc815\ud558\ub77c.","title":"Note"},{"location":"Errors/#example_9","text":"\uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uace0 \uc2f6\ub2e4\uace0 \ud558\uc790. void func ( zstring arg ) { Gadget g { arg }; // ... } gadget \uc774 \uc81c\ub300\ub85c \uc0dd\uc131\ub418\uc9c0 \uc54a\uc558\ub2e4\uba74, func \ub294 \uc608\uc678\ub97c \ub358\uc9c0\uba70 \uc885\ub8cc\ud55c\ub2e4. \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, gadget \uc5d0 valid() \uba64\ubc84 \ud568\uc218\ub97c \ucd94\uac00\ud568\uc73c\ub85c\uc368 RAII\ucc98\ub7fc \uc790\uc6d0\uc744 \ucc98\ub9ac\ud560 \uc218\ub3c4 \uc788\ub2e4: error_indicator func ( zstring arg ) { Gadget g { arg }; if ( ! g . valid ()) return gadget_construction_error ; // ... return 0 ; // zero indicates \"good\" } \uc774 \uacbd\uc6b0 \ud638\ucd9c\uc790(caller)\ub294 \ub2f9\uc5f0\ud788 \ubc18\ud658\uac12 \uac80\uc0ac\uac00 \ud544\uc694\ud558\ub2e4\ub294 \uac83\uc744 \uc54c\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4. See also : Discussion","title":"Example"},{"location":"Errors/#enforcement_10","text":"\ud2b9\ubcc4\ud55c \uacbd\uc6b0: \uc608\ucee8\ub300, \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc758 \uc0dd\uc131\uc744 valid() \ub85c \uc2dc\uc2a4\ud15c\uc801\uc73c\ub85c \uac80\uc0ac\ud558\ub294 \ub4f1\uc758 \ubc29\ubc95\uc774 \uac00\ub2a5\ud558\ub2e4","title":"Enforcement"},{"location":"Errors/#e26","text":"","title":"E.26: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \ube60\ub978 \uc2e4\ud328 \uc804\ub7b5\uc744 \uace0\ub824\ud558\ub77c"},{"location":"Errors/#reason_17","text":"\uc624\ub958\ub85c\ubd80\ud130 \ubcf5\uc6d0\ud558\ub294 \uc791\uc5c5\uc744 \uc81c\ub300\ub85c \uc218\ud589\ud560 \uc218 \uc5c6\ub2e4\uba74, \ucd5c\uc18c\ud55c \ubb38\uc81c\uac00 \ub354 \ucee4\uc9c0\uae30 \uc804\uc5d0 \ud0c8\ucd9c\ud560 \uc218\ub294 \uc788\ub2e4. See also : Simulating RAII","title":"Reason"},{"location":"Errors/#note_17","text":"\uc9c0\uc5ed\uc801\uc778 \uc624\ub958 \ucc98\ub9ac\ub97c \uc81c\ub300\ub85c \ud560 \uc218 \uc5c6\ub2e4\uba74, \"\ud06c\ub798\uc2dc \ubc1c\uc0dd\"\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcf4\ub77c. \uc774\ub294 \uc624\ub958\ub97c \ud655\uc778\ud55c \ubb38\ub9e5\uc5d0\uc11c \ubcf5\uad6c\ud558\uac70\ub098 \uc9c0\uc5ed\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4. abort() \ub098 quick_exit() \ub97c \ud638\ucd9c\ud558\ub77c. \ub610\ub294 \uc2dc\uc2a4\ud15c\uc774 \uc7ac\uc2dc\uc791\ud558\ub3c4\ub85d \ud558\ub294 \ube44\uc2b7\ud55c \uae30\ub2a5\uc758 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub77c. \ub2e4\uc218\uc758 \ud504\ub85c\uc138\uc2a4\ub098 \ucef4\ud4e8\ud130\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uc2dc\uc2a4\ud15c\uc5d0\uc11c\ub294 \uc5b4\ucc0c\ub418\uc5c8\uac74 \uce58\uba85\uc801\uc778 \ud06c\ub798\uc2dc\ub97c \ucc98\ub9ac\ud558\ub294 \uacbd\uc6b0\ub97c \uc608\uc0c1\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \ud558\ub4dc\uc6e8\uc5b4\uc5d0\uc11c \ubb38\uc81c\uac00 \uc0dd\uae38 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0, \"\ud06c\ub798\uc2dc \ubc1c\uc0dd\"\uc740 \ub2e8\uc21c\ud788 \uc624\ub958 \ucc98\ub9ac\ub97c \uc2dc\uc2a4\ud15c\uc758 \ub2e4\uc74c \ub808\ubca8\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \ub41c\ub2e4.","title":"Note"},{"location":"Errors/#example_10","text":"void f ( int n ) { // ... p = static_cast < X *> ( malloc ( n , X )); if ( ! p ) abort (); // abort if memory is exhausted // ... } \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub7a8\uc740 \uba54\ubaa8\ub9ac \uace0\uac08\uc744 \uc544\ub984\ub2f5\uac8c \ud574\uacb0\ud558\uae30 \uc5b4\ub835\ub2e4. \uc774\ub294 \ub2e4\uc74c \ucf54\ub4dc\uc5d0\uc11c\ub3c4 \ub3d9\uc77c\ud558\ub2e4. void f ( int n ) { // ... p = new X [ n ]; // throw if memory is exhausted (by default, terminate) // ... } \uc77c\ubc18\uc801\uc73c\ub85c, \"\ud06c\ub798\uc2dc\"\uac00 \ubc1c\uc0dd\ud574\uc11c \uc885\ub8cc\ud558\uae30 \uc804 \ubc1c\uc0dd \uc6d0\uc778\uc5d0 \ub300\ud574 \ub85c\uadf8\ub97c \ub0a8\uae30\ub294 \uac83\uc740 \ud604\uba85\ud55c \uc0dd\uac01\uc774\ub2e4.","title":"Example"},{"location":"Errors/#enforcement_11","text":"Awkward","title":"Enforcement"},{"location":"Errors/#e27","text":"","title":"E.27: \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub2e4\uba74, \uccb4\uacc4\uc801\uc73c\ub85c \uc624\ub958 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Errors/#reason_18","text":"\uc624\ub958 \ud578\ub4e4\ub9c1 \uc815\ucc45\uc744 \uccb4\uacc4\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc624\ub958 \ucc98\ub9ac\ub97c \uc78a\uc5b4\ubc84\ub9b4 \uac00\ub2a5\uc131\uc744 \ucd5c\uc18c\ud654\ud55c\ub2e4. See also : RAII","title":"Reason"},{"location":"Errors/#note_18","text":"\uba87\uac00\uc9c0 \uc774\uc288\uac00 \uc788\ub2e4: \ud568\uc218 \ubc14\uae65\uc5d0\uc11c \uc624\ub958 \uc54c\ub9bc\uc744 \uc5b4\ub5bb\uac8c \uc804\ub2ec\ud560 \uac83\uc778\uac00? \uc624\ub958\ub85c \uc885\ub8cc\ud558\uae30 \uc774\uc804\uc5d0 \ud568\uc218\uc5d0\uc11c\uc758 \uc790\uc6d0 \ud574\uc81c\ub294 \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud558\ub294\uac00? \uc624\ub958\uc758 \uc9c0\ud45c(error indicator)\ub85c\uc11c \ubb34\uc5c7\uc744 \uc0ac\uc6a9\ud558\ub294\uac00? \uc77c\ubc18\uc801\uc73c\ub85c, \uc624\ub958 \uc9c0\ud45c\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc740 2\uac00\uc9c0 \uac12\uc744 \ubc18\ud658\ud55c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4: \uc815\uc0c1\uc801\uc778 \uacb0\uacfc\uc640 \uc624\ub958 \uc9c0\ud45c. \uc624\ub958 \uc9c0\ud45c\ub294 valid() \ud568\uc218\ub97c \uac00\uc9c4 \uacbd\uc6b0\ucc98\ub7fc \uac1c\uccb4\uc758 \uc77c\ubd80\uac00 \ub420\uc218\ub3c4 \uc788\ub2e4. \ub610\ub294 \ud568\uc218\uac00 \ud55c\ubc88\uc5d0 2\uac1c\uc758 \uac12\ub4e4\uc744 \ubc18\ud658\ud560\uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Errors/#example_11","text":"Gadget make_gadget ( int n ) { // ... } void user () { Gadget g = make_gadget ( 17 ); if ( ! g . valid ()) { // error handling } // ... } \uc774 \uc811\uadfc\ubc95\uc740 RAII\ucc98\ub7fc \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub77c \ud56d\ubaa9\uc5d0 \ubd80\ud569\ud55c\ub2e4. This approach fits with simulated RAII resource management . valid() \ud568\uc218\ub294 error_indicator \ub97c \ubc18\ud658\ud560\uc218\ub3c4 \uc788\ub2e4. (\uc608\ucee8\ub300, error_indicator \uc5f4\uac70\ud615 \uc911\uc5d0\uc11c \ud558\ub098\uc758 \uac12\uc744 \ubc18\ud658\ud55c\ub2e4).","title":"Example"},{"location":"Errors/#example_12","text":"Gadget \ud0c0\uc785\uc744 \ubcc0\uacbd\ud558\uae38 \uc6d0\ud558\uc9c0 \uc54a\uac70\ub098, \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\ub294 \uc5b4\ub5a8\uae4c? \uadf8\ub7f0 \uacbd\uc6b0\uc5d4, \ud55c \uc30d\uc758 \uac12\uc744 \ubc18\ud658\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. \uc608\ub97c \ub4e4\uba74: std :: pair < Gadget , error_indicator > make_gadget ( int n ) { // ... } void user () { auto r = make_gadget ( 17 ); if ( ! r . second ) { // error handling } Gadget & g = r . first ; // ... } \uc774\ucc98\ub7fc, std::pair \uac00 \ubc18\ud658\ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. \uc77c\ubd80\ub294 \ud2b9\ubcc4\ud55c \ud0c0\uc785\uc744 \uc120\ud638\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74: Gval make_gadget ( int n ) { // ... } void user () { auto r = make_gadget ( 17 ); if ( ! r . err ) { // error handling } Gadget & g = r . val ; // ... } \ud2b9\ubcc4\ud55c \ud0c0\uc785\uc744 \uc120\ud638\ud558\ub294 \uc774\uc720\uc911\uc758 \ud558\ub098\ub85c\ub294 first \ub098 second \uac19\uc740 \ube44\ubc00\uc2a4\ub7ec\uc6b4 \uc774\ub984\ubcf4\ub2e4\ub294 \uba64\ubc84\ucc98\ub7fc \uc0ac\uc6a9\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc740 std::pair \uc758 \ub2e4\ub978 \uc0ac\uc6a9\ubc95\uacfc \ud63c\ub3d9\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud55c\ub2e4.","title":"Example"},{"location":"Errors/#example_13","text":"\uc77c\ubc18\uc801\uc73c\ub85c, \uc624\ub958\ub85c \uc778\ud574 \uc885\ub8cc\ud558\uae30 \uc804 \uc815\ub9ac \uc791\uc5c5\uc744 \ud558\uac8c \ub41c\ub2e4. \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc9c0\uc800\ubd84\ud558\ub2e4: std :: pair < int , error_indicator > user () { Gadget g1 = make_gadget ( 17 ); if ( ! g1 . valid ()) { return { 0 , g1_error }; } Gadget g2 = make_gadget ( 17 ); if ( ! g2 . valid ()) { cleanup ( g1 ); return { 0 , g2_error }; } // ... if ( all_foobar ( g1 , g2 )) { cleanup ( g1 ); cleanup ( g2 ); return { 0 , foobar_error }; // ... cleanup ( g1 ); cleanup ( g2 ); return { res , 0 }; } RAII\ucc98\ub7fc \ub3d9\uc791\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc740 \ud568\uc218 \ub0b4\uc5d0\uc11c \ub2e4\uc218\uc758 \uc790\uc6d0\uacfc \ub2e4\uc591\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc744 \uacbd\uc6b0 \ub354\uc6b1 \uc911\uc694\ud558\ub2e4. \ub4dc\ubb3c\uac8c \uc0ac\uc6a9\ub418\ub294 \ud574\ubc95 \uc911 \ud558\ub098\ub294 \ubc18\ubcf5\uc744 \ud53c\ud558\uae30 \uc704\ud574 \ud568\uc218\uc758 \ub05d\ubd80\ubd84\uc5d0 \uc815\ub9ac \uc791\uc5c5\uc744 \ubaa8\uc544\ub193\ub294 \uac83\uc774\ub2e4 ( goto \uac00 \ucef4\ud30c\uc77c \ub418\ub824\uba74 g2 \uadfc\ucc98\uc5d0\uc11c \ubd88\uac00\ud53c\ud558\uac8c \ucd94\uac00\ub85c \uc720\ud6a8 \ubc94\uc704\ub97c \uc9c0\uc815\ud574\uc57c \ud55c\ub2e4): std :: pair < int , error_indicator > user () { error_indicator err = 0 ; Gadget g1 = make_gadget ( 17 ); if ( ! g1 . valid ()) { err = g1_error ; goto exit ; } { Gadget g2 = make_gadget ( 17 ); if ( ! g2 . valid ()) { err = g2_error ; goto exit ; } if ( all_foobar ( g1 , g2 )) { err = foobar_error ; goto exit ; } // ... } exit : if ( g1 . valid ()) cleanup ( g1 ); if ( g2 . valid ()) cleanup ( g2 ); return { res , err }; } \ud568\uc218\uac00 \uaf64 \ud06c\ub2e4\uba74, \uc774\ub7f0 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uac8c \ub420 \uac00\ub2a5\uc131\uc774 \ud06c\ub2e4. finally \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc880 \ub354 \uc26c\uc6b8 \uc218 \uc788\ub2e4 . \ub610\ud55c, \ud504\ub85c\uadf8\ub7a8\uc774 \ucee4\uc9c8\uc218\ub85d \uccb4\uacc4\uc801\uc73c\ub85c \uc624\ub958 \uc9c0\ud45c(error indicator)\ub97c \uc0ac\uc6a9\ud55c \uc624\ub958 \ucc98\ub9ac \uc804\ub7b5\uc744 \uccb4\uacc4\uc801\uc73c\ub85c \uc801\uc6a9\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4. \uc608\uc678 \uae30\ubc18 \uc624\ub958 \ucc98\ub9ac \ub97c \uc120\ud638\ud558\uba70, \ud568\uc218\ub294 \uc9e7\uac8c \uc791\uc131\ud558\uae30\ub97c \uad8c\ud55c\ub2e4. See also : Discussion See also : \ub2e4\uc218\uc758 \uac12\uc744 \ubc18\ud658","title":"Example"},{"location":"Errors/#enforcement_12","text":"Awkward.","title":"Enforcement"},{"location":"Errors/#e28-errno","text":"","title":"E.28: \uc804\uc5ed \uc0c1\ud0dc\ub97c \uc0ac\uc6a9\ud55c \uc624\ub958 \ucc98\ub9ac\ub97c \uc9c0\uc591\ud558\ub77c(errno\ucc98\ub7fc)"},{"location":"Errors/#reason_19","text":"\uc804\uc5ed \uc0c1\ud0dc\ub294 \uad00\ub9ac\ud558\uae30 \uc5b4\ub835\uace0, \ud655\uc778\ud558\ub294 \uac83\uc744 \uc78a\uc5b4\ubc84\ub9ac\uae30 \uc27d\ub2e4. \ub9c8\uc9c0\ub9c9\uc73c\ub85c printf() \uc758 \ubc18\ud658\uac12\uc744 \ud655\uc778\ud55c \uac83\uc774 \uc5b8\uc81c\uc778\uac00? See also : RAII","title":"Reason"},{"location":"Errors/#example-bad_1","text":"???","title":"Example, bad"},{"location":"Errors/#note_19","text":"C \uc2a4\ud0c0\uc77c \uc624\ub958\ucc98\ub9ac\ub294 \uc804\uc5ed \ubcc0\uc218 errno \uc5d0 \uc758\uc874\ud55c\ub2e4, \ub54c\ubb38\uc5d0 \uc774 \uac00\uc774\ub4dc\ub97c \ub530\ub974\ub294 \uac83\uc774 \ud544\uc5f0\uc801\uc73c\ub85c \ubd88\uac00\ud560\uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Errors/#enforcement_13","text":"Awkward.","title":"Enforcement"},{"location":"Errors/#e30","text":"","title":"E.30: \uc608\uc678 \uba85\uc138\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Errors/#reason_20","text":"\uc608\uc678 \uba85\uc138\ub294 \uc624\ub958 \ucc98\ub9ac\ub97c \uae68\uc9c0\uae30 \uc27d\uac8c \ub9cc\ub4e4\uace0, \uc2e4\ud589\uc2dc\uac04 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0a4\uba70, C++ \ud45c\uc900\uc5d0\uc11c\ub294 \uc81c\uac70\ub418\uc5c8\ub2e4.","title":"Reason"},{"location":"Errors/#example_14","text":"int use ( int arg ) throw ( X , Y ) { // ... auto x = f ( arg ); // ... } f() \uac00 X \ub098 Y \uac00 \uc544\ub2cc \ub2e4\ub978 \uc608\uc678\ub97c \ub358\uc9c4\ub2e4\uba74 \uc5c9\ub6b1\ud55c \uc624\ub958 \ucc98\ub9ac \ub8e8\ud2f4\uc774 \ud638\ucd9c\ub41c\ub2e4. \ub9cc\uc57d \uc544\ubb34\uac83\ub3c4 \uc5c6\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc740 \uc885\ub8cc\ub41c\ub2e4. \uc774\ub7f0 \uc885\ub8cc \uc790\uccb4\ub294 \uad1c\ucc2e\uc9c0\ub9cc f() \uac00 \uc0c8\ub85c\uc6b4 \uc608\uc678 Z \ub97c \ub358\uc9c0\ub3c4\ub85d \ubcc0\uacbd\ub418\uc5c8\ub2e4\uace0 \uac00\uc815\ud574\ubcf4\uc790, use() \ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294 \ud55c \uacc4\uc18d \ud504\ub85c\uadf8\ub7a8\uc774 \uac15\uc81c\ub85c \uc885\ub8cc\ub420 \uac83\uc774\ub2e4 (\uacb0\uad6d \ubaa8\ub450 \uc0c8\ub85c \ud14c\uc2a4\ud2b8 \ud574\ubd10\uc57c \ud55c\ub2e4). f() \uac00 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ud568\uc218\ub77c\uc11c \uc190\ub308 \uc218 \uc5c6\uc73c\uba74 use() \ub294 \ub09c\ucc98\ud574\uc9c4\ub2e4. use() \uac00 Z \ub97c \uc804\ub2ec\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uc9c0\ub9cc, use() \ub97c \ud638\ucd9c\ud558\ub294 \ucabd\uc5d0\uc11c\ub3c4 \ubcc0\uacbd\uc774 \ud544\uc694\ud558\ub2e4. \ubb38\uc81c\uac00 \uc21c\uc2dd\uac04\uc5d0 \ub2e4\ub8f0 \uc218 \uc5c6\uac8c \ub418\uc5b4\ubc84\ub9b0\ub2e4. \ub300\uc548\uc774 \uc788\ub2e4\uba74, use() \uc5d0\uc11c try - catch \ub97c \uc0ac\uc6a9\ud574 Z \ub97c \ub2e4\ub978 \uc608\uc678\ub85c \ucc98\ub9ac\ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ubc29\ubc95 \ub610\ud55c \ubb38\uc81c\ub97c \ud0a4\uc6b0\uac8c \ub41c\ub2e4. \ubc1c\uc0dd \uac00\ub2a5\ud55c \uc608\uc678\ub4e4\uc774 \ub2ec\ub77c\uc9c0\ub294 \uacbd\uc6b0\uac00 \uc2dc\uc2a4\ud15c\uc758 \uc800\uc218\uc900\uc5d0\uc11c \uc77c\uc5b4\ub09c\ub2e4\ub294 \uc810\uc774 \uc911\uc694\ud558\ub2e4 (\uc608\ub97c \ub4e4\uc5b4, \ub124\ud2b8\uc6cc\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \ubbf8\ub4e4\uc6e8\uc5b4\uac00 \ubcc0\uacbd\ub418\uc5c8\ub2e4\uac70\ub098). \uc774 \uacbd\uc6b0, \ubb38\uc81c\uac00 \uc5ec\ub7ec \uc218\uc900\uc758 \ub9ce\uc740 \ud568\uc218\ub4e4\uc744 \uac70\uccd0\uc11c \ub098\ud0c0\ub098\uac8c \ub41c\ub2e4 \ucf54\ub4dc\uc758 \uaddc\ubaa8\uac00 \ud06c\ub2e4\uba74, \uc774\ub294 \ub9c8\uc9c0\ub9c9 \uc0ac\uc6a9\uc790\uac00 \ubcc0\uacbd\ud558\uae30 \uc804\uae4c\uc9c0 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc5c6\uac8c \ub41c\ub2e4. \ub9cc\uc57d use() \uac00 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc77c\ubd80\ub77c\uba74, \uc54c\uc218 \uc5c6\ub294 \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \ubbf8\uce58\ub294 \uc601\ud5a5\ub54c\ubb38\uc5d0 \uc5c5\ub370\uc774\ud2b8\ub97c \ud560 \uc218 \uc5c6\uac8c \ub41c\ub2e4. \uc608\uc678\uac00 \uc804\ud30c\ub418\ub3c4\ub85d \ud558\ub294 \uc804\ub7b5\uc740 \uc774\ub7f0 \uacbd\uc6b0\uc5d0 \ub300\uc751\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc774 \uc9c0\ub09c \uc218\ub144\uac04\uc758 \uacbd\ud5d8\uc73c\ub85c \uc99d\uba85\ub418\uc5c8\ub2e4.","title":"Example"},{"location":"Errors/#note_20","text":"No. This would not be any better had exception specifications been statically enforced. \uadf8 \uc608\ub85c Stroustrup94 \ub97c \ucc38\uace0\ud558\ub77c.","title":"Note"},{"location":"Errors/#note_21","text":"\uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, noexcept \ub97c \uc9c0\uc815\ud558\ub77c. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 throw() \uc640 \ub3d9\uc77c\ud558\ub2e4.","title":"Note"},{"location":"Errors/#enforcement_14","text":"\uc608\uc678 \uba85\uc138\uac00 \uc0ac\uc6a9\ub41c \ubd80\ubd84\uc744 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Errors/#e31-catch","text":"","title":"E.31: \uc801\ud569\ud55c \uc21c\uc11c\ub85c catch\ub97c \ubc30\uce58\ud558\ub77c"},{"location":"Errors/#reason_21","text":"catch \uad6c\uc808\uc740 \uc21c\uc11c\ub300\ub85c \ud3c9\uac00\ub418\uae30 \ub54c\ubb38\uc5d0 \ub2e4\ub978 \uad6c\uc808\uc5d0 \ub3c4\ub2ec\ud558\uc9c0 \ubabb\ud560 \uc218\ub3c4 \uc788\ub2e4.","title":"Reason"},{"location":"Errors/#example_15","text":"void f () { // ... try { // ... } catch ( Base & b ) { /* ... */ } catch ( Derived & d ) { /* ... */ } catch (...) { /* ... */ } catch ( std :: exception & e ){ /* ... */ } } Derived \uac00 Base \ub97c \uc0c1\uc18d\ubc1b\uc740 \uacbd\uc6b0, Derived \ub97c \ucc98\ub9ac\ud558\ub294 \ubd80\ubd84\uc740 \uc808\ub300\ub85c \ud638\ucd9c\ub418\uc9c0 \uc54a\ub294\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c \"\ubaa8\ub4e0 \uac83\"\uc744 \uc7a1\ub294 \ud578\ub4e4\ub7ec\ub85c \uc778\ud574 std::exception \ub294 \ud638\ucd9c\ub418\uc9c0 \uc54a\uac8c \ub41c\ub2e4.","title":"Example"},{"location":"Errors/#enforcement_15","text":"\ub2e4\ub978 \ud578\ub4e4\ub7ec\ub97c \uc228\uae30\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/","text":"ES: \ud45c\ud604\uc2dd\uacfc \uad6c\ubb38 \ud45c\ud604\uc2dd(expression)\uacfc \uad6c\ubb38(statement)\uc740 \ud589\uc704\uc640 \uc5f0\uc0b0\uc5d0 \ub300\ud574 \ud45c\ud604\ud558\ub294 \uac00\uc7a5 \uc9c1\uc811\uc801\uc778 \ubc29\ubc95\ub4e4\uc774\ub2e4. \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704 \ub0b4\uc5d0\uc11c\uc758 \uc120\uc5b8 \uc5ed\uc2dc \uad6c\ubb38\uc5d0 \ud3ec\ud568\ub41c\ub2e4. \uc774\ub984 \uc9d3\uae30\uc640 \uc8fc\uc11d, \ub4e4\uc5ec\uc4f0\uae30 \uaddc\uce59\uc5d0 \ub300\ud574\uc11c\ub294, NL: Naming and layout \uc744 \ucc38\uace0\ud558\ub77c. \uc77c\ubc18\uc801\uc778 \uaddc\uce59: ES.1: \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \"\uc9c1\uc811 \uc9e0 \ucf54\ub4dc\" \ub300\uc2e0 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c ES.2: \uc5b8\uc5b4 \uae30\ub2a5\uc744 \ubc14\ub85c \uc0ac\uc6a9\ud558\uae30\ub294 \ubcf4\ub2e4 \uc801\uc808\ud788 \ucd94\uc0c1\ud654\ud558\ub77c \uc120\uc5b8 \uaddc\uce59: ES.5: \uc720\ud6a8\ubc94\uc704(scope)\ub294 \uc791\uac8c \uc720\uc9c0\ud558\ub77c ES.6: for \ubb38\uc758 \ubcc0\uc218\ub294 \uc720\ud6a8\ubc94\uc704\ub97c \uc81c\ud55c\ud558\uae30 \uc704\ud574 \ucd08\uae30\ud654\uc640 \uc870\uac74 \uac80\uc0ac\ubd80\ubd84\uc5d0\uc11c\ub9cc \uc120\uc5b8\ud558\ub77c ES.7: \uc77c\ubc18\uc801\uc774\uac70\ub098 \uc9c0\uc5ed\ubc94\uc704 \ubcc0\uc218\ub4e4\uc758 \uc774\ub984\uc740 \uc9e7\uac8c, \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uae38\uac8c \ud558\ub77c ES.8: \ube44\uc2b7\ud574\ubcf4\uc774\ub294 \uc774\ub984\uc740 \ud53c\ud558\ub77c ES.9: ALL_CAPS \uac19\uc740 \uc774\ub984\uc744 \ud53c\ud558\ub77c ES.10: \uc120\uc5b8\uc740 (\uc624\uc9c1) \ud558\ub098\uc758 \uc774\ub984\uc744 \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4 ES.11: \ud0c0\uc785 \uc774\ub984\uc758 \ubd88\ud544\uc694\ud55c \ubc18\ubcf5\uc744 \ub9c9\uc744\ub54c\ub294 auto \ub97c \uc0ac\uc6a9\ud558\ub77c ES.12: \uc774\ub984\uc744 \ub36e\uc5b4\uc4f0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c ES.20: \ud56d\uc0c1 \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud558\ub77c ES.21: \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \ub54c \ubcc0\uc218\ub098 \uc0c1\uc218\ub97c \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c ES.22: \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud560 \uac12\uc774 \uc0dd\uae38 \ub54c\uae4c\uc9c0 \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c ES.23: {} \ucd08\uae30\ud654 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c ES.24: \ud3ec\uc778\ud130\ub294 unique_ptr<T> \uc5d0 \ub2f4\uc544\ub77c ES.25: \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uac1c\uccb4\ub97c const \ud639\uc740 constexpr \ub85c \uc120\uc5b8\ud558\ub77c ES.26: \uc11c\ub85c \uc0c1\uad00\uc5c6\ub294 \ubaa9\uc801\uc5d0 \ud558\ub098\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.27: \uc2a4\ud0dd\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ubc30\uc5f4\uc740 std::array \ub098 stack_array \ub97c \uc0ac\uc6a9\ud558\ub77c ES.28: \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654, \ud2b9\ud788 const \ubcc0\uc218\uc758 \ucd08\uae30\ud654\uc5d0\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c ES.30: \ud504\ub85c\uadf8\ub7a8 \ud14d\uc2a4\ud2b8\ub97c \ub2e4\ub8e8\uae30(manipulate) \uc704\ud574 \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.31: \ub9e4\ud06c\ub85c\ub97c \uc0c1\uc218\ub098 \"\ud568\uc218\"\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.32: \ubaa8\ub4e0 \ub9e4\ud06c\ub85c\ub294 ALL_CAPS \ud615\ud0dc\ub85c \uc120\uc5b8\ud558\ub77c ES.33: \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \uace0\uc720\ud55c \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c ES.34: (C-\uc2a4\ud0c0\uc77c\uc758) \uac00\ubcc0\uc778\uc790 \ud568\uc218\ub97c \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c \ud45c\ud604\uc2dd \uaddc\uce59: ES.40: \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\uc744 \ud53c\ud558\ub77c ES.41: \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\uac00 \ubd88\ubd84\uba85\ud558\uba74, \uc18c\uad04\ud638\ub97c \uc0ac\uc6a9\ud558\ub77c(parenthesize) ES.42: \ud3ec\uc778\ud130\ub294 \uac04\ub2e8\ud558\uace0 \uc9c1\uad00\uc801\uc778 \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\ub77c ES.43: \ud3c9\uac00 \uc21c\uc11c\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ud45c\ud604\uc2dd\uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.44: \ud568\uc218 \uc778\uc790\uac00 \ud45c\ud604\uc2dd \ud3c9\uac00 \uc21c\uc11c\uc758 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uac8c \ud558\ub77c ES.45: \uc774\uc720\ub97c \uc54c \uc218 \uc5c6\ub294 \uc0c1\uc218(magic constant)\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c; \uc0c1\uc9d5\uc801\uc778 \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c ES.46: \ud0c0\uc785 \ubc94\uc704\ub97c \ucd95\uc18c\ud558\ub294 \ubcc0\ud658\uc744 \ud53c\ud558\ub77c ES.47: 0 \ud639\uc740 NULL \ubcf4\ub2e4\ub294 nullptr \ub97c \uc0ac\uc6a9\ud558\ub77c ES.48: \ud0c0\uc785 \ubcc0\ud658(cast)\uc744 \ud53c\ud558\ub77c ES.49: \ud0c0\uc785 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \ubbf8\ub9ac \uc815\uc758\ub41c \ubc29\ubc95\uc73c\ub85c \ubcc0\ud658(named cast)\ud558\ub77c ES.50: const \ub97c \uc81c\uac70\ud558\uc9c0 \ub9c8\ub77c ES.55: \ubc94\uc704 \uac80\uc0ac\uac00 \ud544\uc694\uc5c6\uac8c \ud558\ub77c ES.56: std::move() \ub294 \uac1c\uccb4\ub97c \ub2e4\ub978 \uc720\ud6a8\ubc94\uc704\ub85c \uba85\uc2dc\uc801\uc73c\ub85c \uc62e\uaca8\uc57c \ud560\ub54c\ub9cc \uc0ac\uc6a9\ud558\ub77c ES.60: \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub294 \ud568\uc218 \uc678\ubd80\uc5d0\uc11c new \uc640 delete \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c ES.61: \ubc30\uc5f4\uc740 delete[] , \ub2e8\uc77c \uac1c\uccb4\ub294 delete \ub97c \uc0ac\uc6a9\ud574\uc11c \ud574\uc81c\ud558\ub77c ES.62: \uc11c\ub85c \ub2e4\ub978 \ubc30\uc5f4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \ube44\uad50\ud558\uc9c0 \ub9c8\ub77c ES.63: \ubcf5\uc0ac \uc190\uc2e4(slice)\uc774 \uc5c6\ub3c4\ub85d \ud558\ub77c ES.64: \uac1c\uccb4\ub97c \uc0dd\uc131\ud560 \ub54c\ub294 T{e} \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c ES.65: \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740(invalid) \ud3ec\uc778\ud130\ub97c \uc5ed\ucc38\uc870\ud558\uc9c0 \ub9c8\ub77c \uad6c\ubb38 \uaddc\uce59: ES.70: \uc120\ud0dd\uc744 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 if \uad6c\ubb38\ubcf4\ub2e4\ub294 switch \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c ES.71: \uac00\ub2a5\ud558\ub2e4\uba74 \uc77c\ubc18 for \uad6c\ubb38 \ubcf4\ub2e4 \ubc94\uc704\uae30\ubc18 for -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c ES.72: \ub8e8\ud504 \ubcc0\uc218\uac00 \uc788\ub2e4\uba74 while -\uad6c\ubb38\ubcf4\ub2e4 for -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c ES.73: \ub8e8\ud504 \ubcc0\uc218\uac00 \uc5c6\ub2e4\uba74 for -\uad6c\ubb38\ubcf4\ub2e4 while -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c ES.74: \ub8e8\ud504 \ubcc0\uc218\ub294 for -\uad6c\ubb38\uc758 \ucd08\uae30\ud654 \ubd80\ubd84\uc5d0\uc11c \uc120\uc5b8\ud558\ub77c ES.75: do -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.76: goto \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.77: break \uc640 continue \uc758 \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c ES.78: \ub0b4\uc6a9\uc774 \uc788\ub294 case \ub294 break \ud558\ub77c ES.79: (\uc624\uc9c1) \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc11c default \ub97c \uc0ac\uc6a9\ud558\ub77c ES.84: \uc774\ub984\uc774 \uc5c6\ub294 \uc9c0\uc5ed\ubcc0\uc218\ub294 \uc120\uc5b8(\ud558\ub824\uace0)\ud558\uc9c0 \ub9c8\ub77c ES.85: \ube44\uc5b4\uc788\ub294 \uad6c\ubb38\uc740 \ub208\uc5d0\ub744\uac8c \ud558\ub77c ES.86: for \ubc18\ubcf5\ubb38(body) \uc548\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud558\uc9c0 \ub9c8\ub77c ES.87: \uc870\uac74\uc5d0 \ubd88\ud544\uc694\ud55c == \ub098 != \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c \uc0b0\uc220\uc5f0\uc0b0 \uaddc\uce59: ES.100: \ubd80\ud638\uac00 \uc788\ub294 \ud0c0\uc785\uacfc \uc5c6\ub294 \ud0c0\uc785\uc744 \ud568\uaed8 \uc5f0\uc0b0\ud558\uc9c0 \ub9c8\ub77c ES.101: \ube44\ud2b8 \uc870\uc791\uc2dc\uc5d0\ub294 \ubd80\ud638\uac00 \uc5c6\ub294(unsigned) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c ES.102: \uc5f0\uc0b0\uc5d0\ub294 \ubd80\ud638\uac00 \uc788\ub294(signed) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c ES.103: Overflow\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c ES.104: Underflow\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c ES.105: 0\uc73c\ub85c \ub098\ub204\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c ES.106: \uc74c\uc218\uac12\uc744 \ub9c9\uc73c\ub824\uace0 unsigned \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.107: \ubc30\uc5f4 \uc811\uadfc\uc5d0\ub294 unsigned \ub97c \uc4f0\uc9c0 \ub9d0\uace0 gsl::index \ub97c \uc0ac\uc6a9\ud558\ub77c ES.1: \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \"\uc9c1\uc811 \uc9e0 \ucf54\ub4dc\" \ub300\uc2e0 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \uc5b8\uc5b4\uc758 \uae30\ub2a5\uc744 \uc9c1\uc811\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \uc27d\uace0, \ub354 \uc9e7\uac8c \uc791\uc131\ud560 \uc218 \uc788\uace0, \uace0\uc218\uc900\uc758 \ucd94\uc0c1\ud654\uac00 \uac00\ub2a5\ud558\ub2e4. ISO C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub110\ub9ac \uc54c\ub824\uc838\uc788\uc73c\uba70 \ud14c\uc2a4\ud2b8\uac00 \uc798\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub2e4. \ubaa8\ub4e0 C++ \uad6c\ud604\uccb4\uc5d0\uc11c \uc81c\uacf5\ud558\uace0 \uc788\ub2e4. Example auto sum = accumulate ( begin ( a ), end ( a ), 0.0 ); // good accumulate \uc758 Ranges \ubc84\uc804\uc774 \ub354 \ub0ab\ub2e4: auto sum = accumulate ( v , 0.0 ); // better \uc798 \uc54c\ub824\uc9c4 \uc54c\uace0\ub9ac\uc998\uc744 \uc9c1\uc811 \ub9cc\ub4e4 \ud544\uc694\ub294 \uc5c6\ub2e4: int max = v . size (); // bad: verbose, \ubaa9\uc801\uc774 \uc801\ud600\uc788\uc9c0 \uc54a\ub2e4 double sum = 0.0 ; for ( int i = 0 ; i < max ; ++ i ) sum = sum + v [ i ]; Exception \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ub300\ub2e4\uc218\uac00 \ub3d9\uc801 \ud560\ub2f9(\uc790\uc720 \uc800\uc7a5\uc18c)\uc5d0 \uc758\uc874\ud55c\ub2e4. \uc774\ub7f0 \ubd80\ubd84\uc740 \uc54c\uace0\ub9ac\uc998\uc758 \ubb38\uc81c\ub294 \uc544\ub2d0\uc9c0\ub77c\ub3c4, \uc81c\ud55c \uc2dc\uac04 \ub0b4\uc5d0 \uc751\ub2f5\uc131\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294 \uacbd\uc6b0(hard real-time)\ub098 \uc784\ubca0\ub514\ub4dc \ud658\uacbd\uc5d0\ub294 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0\ub294 \ube44\uc2b7\ud55c \uae30\ub2a5\uc744 \uad6c\ud604\ud558\uc5ec \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcfc \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc2a4\ud0c0\uc77c\ub85c \uad6c\ud604\ub41c \uba54\ubaa8\ub9ac \ud480 \ud560\ub2f9 \ucee8\ud14c\uc774\ub108 \uac19\uc740 \uac83\ub4e4\uc774\ub2e4. Enforcement \uc27d\uc9c0 \uc54a\ub2e4. ??? \uc9c0\uc800\ubd84\ud55c \ubc18\ubcf5\ubb38, \uc911\ucca9 \ubc18\ubcf5\ubb38, \uae34 \ud568\uc218, \ud568\uc218 \ud638\ucd9c\uc758 \ubd80\uc7ac, \ub0b4\uc7a5 \ud0c0\uc785\uc774 \uc544\ub2cc \ud0c0\uc785\uc744 \uac70\uc758 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0. \uc21c\ud658 \ubcf5\uc7a1\uc131? ES.2: \uc5b8\uc5b4 \uae30\ub2a5\uc744 \ubc14\ub85c \uc0ac\uc6a9\ud558\uae30\ub294 \ubcf4\ub2e4 \uc801\uc808\ud788 \ucd94\uc0c1\ud654\ud558\ub77c Reason \"\uc801\uc808\ud55c \ucd94\uc0c1\ud654\"(\uc608\ub97c \ub4e4\uc5b4 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \ud074\ub798\uc2a4 \uac19\uc740 \uac83)\uac00 \uc5b8\uc5b4\ubcf4\ub2e4 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uac1c\ub150\uc5d0 \ub354 \uac00\uae5d\ub2e4. \ucf54\ub4dc\ub97c \uc9e7\uace0 \uba85\ud655\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc73c\uba70, \ud14c\uc2a4\ud2b8\ud558\uae30\uc5d0\ub3c4 \ub354 \uc27d\ub2e4. Example vector < string > read1 ( istream & is ) // good { vector < string > res ; for ( string s ; is >> s ;) res . push_back ( s ); return res ; } \uc544\ub798\uc640 \uac19\uc740 \uc804\ud1b5\uc801\uc778 \ucf54\ub4dc, \uc2dc\uc2a4\ud15c \ub808\ubca8\uacfc \uac70\uc758 \ub3d9\ub4f1\ud55c \uc800\uc218\uc900(low-level) \ucf54\ub4dc\ub294 \uae38\uace0, \uc9c0\uc800\ubd84\ud558\uace0, \uc774\ud574\ud558\uae30\ub3c4 \uc5b4\ub835\uace0, \ub290\ub9ac\uac8c \ub3cc\uc544\uac04\ub2e4: char ** read2 ( istream & is , int maxelem , int maxstring , int * nread ) // bad: verbose and incomplete { auto res = new char * [ maxelem ]; int elemcount = 0 ; while ( is && elemcount < maxelem ) { auto s = new char [ maxstring ]; is . read ( s , maxstring ); res [ elemcount ++ ] = s ; } nread = & elemcount ; return res ; } \uc624\ubc84\ud50c\ub85c\uc6b0\ub098 \uc624\ub958\ucc98\ub9ac \ucf54\ub4dc\uac00 \ud55c \ubc88 \ub4e4\uc5b4\uac00\uac8c \ub418\uba74, \ucf54\ub4dc\ub294 \uae09\uaca9\ud788 \uc9c0\uc800\ubd84\ud574\uc9c4\ub2e4. \uadf8\ub9ac\uace0, \ubc18\ud658\ud558\ub294 \ud3ec\uc778\ud130\uc640 \ubc30\uc5f4\ub85c \uad6c\ud604\ub418\ub294 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 delete \ub97c \uaf2d \ud574\uc918\uc57c\ud558\ub294 \ubb38\uc81c\ub3c4 \uc788\ub2e4. Enforcement \uc27d\uc9c0 \uc54a\ub2e4. ??? \uc9c0\uc800\ubd84\ud55c \ubc18\ubcf5\ubb38, \uc911\ucca9 \ubc18\ubcf5\ubb38, \uae34 \ud568\uc218, \ud568\uc218 \ud638\ucd9c\uc758 \ubd80\uc7ac, \ub0b4\uc7a5 \ud0c0\uc785\uc774 \uc544\ub2cc \ud0c0\uc785\uc744 \uac70\uc758 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0. \uc21c\ud658 \ubcf5\uc7a1\uc131? ES.dcl: \uc120\uc5b8(Declarations) \uc120\uc5b8\uc740 \uad6c\ubb38(statement)\uc774\ub2e4. \ud55c \uc120\uc5b8\uc740 \uc784\uc758\uc758 \uc720\ud6a8 \ubc94\uc704\uc5d0 \ud558\ub098\uc758 \uc774\ub984\uc744 \ub9cc\ub4e4\uac70\ub098 \uc774\ub984\uc788\ub294 \uac1c\uccb4(named object)\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\ub2e4. ES.5: \uc720\ud6a8\ubc94\uc704(scope)\ub294 \uc791\uac8c \uc720\uc9c0\ud558\ub77c Reason \uac00\ub3c5\uc131\uc774 \uc88b\uc544\uc9c4\ub2e4. \ub9ac\uc18c\uc2a4 \uc810\uc720\ub97c \ucd5c\uc18c\ud654\ud560 \uc218 \uc788\ub2e4. \uac12\uc758 \uc798\ubabb\ub41c \uc0ac\uc6a9\uc744 \ud53c\ud560 \uc218 \uc788\ub2e4. Alternative Formulation : \ubd88\ud544\uc694\ud558\uac8c \ud070 \uc2a4\ucf54\ud504\uc5d0 \ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c Example void use () { int i ; // bad: i \uac00 \ubc18\ubcf5\ubb38 \uc774\ud6c4\uc5d0\ub3c4 \ubd88\ud544\uc694\ud558\uac8c \uc811\uadfc \uac00\ub2a5\ud558\ub2e4 for ( i = 0 ; i < 20 ; ++ i ) { /* ... */ } // \uc704\uc5d0\uc11c \uc120\uc5b8\ud55c i\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4 for ( int i = 0 ; i < 20 ; ++ i ) { // good: i \ub294 for \ubc18\ubcf5\ubb38\uc758 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud55c\ub2e4 /* ... */ } // good: pc \ub294 if \ubb38\uc758 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud55c\ub2e4 if ( auto pc = dynamic_cast < Circle *> ( ps )) { // ... deal with Circle ... } else { // ... handle error ... } } Example, bad void use ( const string & name ) { string fn = name + \".txt\" ; ifstream is { fn }; Record r ; is >> r ; // ... \uc5ec\uae30\uc5d0\ub294 fn\uacfc is\ub97c \uc4f0\uba74 \uc548\ub418\ub294 200 \uc904\uc9dc\ub9ac \ucf54\ub4dc\uac00 \ub4e4\uc5b4\uac04\ub2e4 ... } \uc774 \ucf54\ub4dc\ub294 \uae38\ub2e4\ub294 \ubb38\uc81c\uc810\uc774 \uc788\uc9c0\ub9cc, fn \uc758 \uac12\uacfc is \uac00 \uac16\uace0 \uc788\ub294 \ud30c\uc77c \ud578\ub4e4\uc774 \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \ud6e8\uc52c \uae38\uac8c \uc720\uc9c0\ub41c\ub2e4\ub294 \uac8c \ubb38\uc81c\ub2e4. \uc774\ub7ec\uba74 \ud568\uc218\uc758 \ub4b7\ubd80\ubd84\uc5d0\uc11c is \uc640 fn \uc744 \uc2e4\uc218\ub85c \uc0ac\uc6a9\ud574\ubc84\ub9b4 \uc218 \uc788\ub2e4. \uc774\ub7f4 \ub54c\ub294, \ubd84\ud560\ud574\ubc84\ub9ac\ub294 \uac8c \ub0ab\ub2e4: Record load_record ( const string & name ) { string fn = name + \".txt\" ; ifstream is { fn }; Record r ; is >> r ; return r ; } void use ( const string & name ) { Record r = load_record ( name ); // ... 200 \uc904 \ucf54\ub4dc ... } Enforcement \ub8e8\ud504 \ubc14\uae65\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\uac00 \uc120\uc5b8\ub418\uace0 \uc774\ud6c4\uc5d0\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud55c\ub2e4 \ud30c\uc77c \ud578\ub4e4\uc774\ub098 \uc7a0\uae08\uacfc \uac19\uc740 \uc911\uc694\ud55c \ub9ac\uc18c\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uac00 (\uc801\ub2f9\ud788 \ud070) N\uc904 \uc774\uc0c1 \uacc4\uc18d\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4 ES.6: for \ubb38\uc758 \ubcc0\uc218\ub294 \uc720\ud6a8\ubc94\uc704\ub97c \uc81c\ud55c\ud558\uae30 \uc704\ud574 \ucd08\uae30\ud654\uc640 \uc870\uac74 \uac80\uc0ac\ubd80\ubd84\uc5d0\uc11c\ub9cc \uc120\uc5b8\ud558\ub77c Reason \uac00\ub3c5\uc131. \uc2dc\uc2a4\ud15c \uc790\uc6d0 \uc810\uc720\ub97c \ucd5c\uc18c\ud654\ud55c\ub2e4. Example void use () { for ( string s ; cin >> s ;) v . push_back ( s ); // good: i \ub294 for \ubc18\ubcf5\ubb38\uc758 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud55c\ub2e4 for ( int i = 0 ; i < 20 ; ++ i ) { // ... } // good: pc \ub294 if \ubb38\uc758 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud55c\ub2e4 if ( auto pc = dynamic_cast < Circle *> ( ps )) { // ... deal with Circle ... } else { // ... handle error ... } } Enforcement \ub8e8\ud504 \ubc14\uae65\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\uac00 \uc120\uc5b8\ub418\uace0 \uc774\ud6c4\uc5d0\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc744 \ub54c \uc9c0\uc801\ud558\ub77c (\uc5b4\ub824\uc6c0) \ub8e8\ud504 \ubc14\uae65\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uace0, \ub8e8\ud504\uac00 \ub05d\ub09c \ub4a4\uc5d0 \uad00\uacc4\uc5c6\ub294 \ubaa9\uc801\uc73c\ub85c \uadf8 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c C++17 example C++17 \uc5d0\uc11c\ub294 if \uc640 switch \uc5d0 \ucd08\uae30\ud654 \uad6c\ubb38\uc774 \ucd94\uac00\ub418\uc5c8\ub2e4. C++ 17\uc744 \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0\ub294 \uc544\ub798\ucc98\ub7fc \uc791\uc131\ud560 \uc218 \uc788\ub2e4. map < int , string > mymap ; if ( auto result = mymap . insert ( value ); result . second ) { // insert\uac00 \uc131\uacf5\ud588\uace0, \ubc18\ud658\ub41c \uacb0\uacfc\ub294 \uc774 \ube14\ub85d\uc5d0\uc11c\ub9cc \uc720\ud6a8\ud558\ub2e4(valid) use ( result . first ); // ok // ... } // result \ub294 \uc774 \uc2dc\uc810\uc5d0 \ud30c\uad34\ub41c\ub2e4 C++17 enforcement (if using a C++17 compiler) \uc120\ud0dd/\ubc18\ubcf5 \uad6c\ubb38\uc758 \ubcc0\uc218\uac00 \ubbf8\ub9ac \uc120\uc5b8\ub418\uace0 \uad6c\ubb38 \uc774\ud6c4\uc5d0\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud558\ub77c (\uc5b4\ub824\uc6c0) \uc120\ud0dd/\ubc18\ubcf5 \uad6c\ubb38\uc758 \ubcc0\uc218\uac00 \ubbf8\ub9ac \uc120\uc5b8\ub418\uace0 \uad6c\ubb38 \uc774\ud6c4\uc5d0 \ub2e4\ub978 \uc0c1\uad00\uc5c6\ub294 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c ES.7: \uc77c\ubc18\uc801\uc774\uac70\ub098 \uc9c0\uc5ed\ubc94\uc704 \ubcc0\uc218\ub4e4\uc758 \uc774\ub984\uc740 \uc9e7\uac8c, \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uae38\uac8c \ud558\ub77c Reason \uac00\ub3c5\uc131. \uad00\uacc4\uc5c6\ub294 \ube44-\uc9c0\uc5ed(non-local) \ubcc0\uc218 \uac04\uc758 \ucda9\ub3cc \ud655\ub960\uc744 \ub0ae\ucd98\ub2e4. Example \uad00\uc2b5\uc801\uc73c\ub85c \uc4f0\uc774\ub294 \uc9e7\uc740 \uc9c0\uc5ed\ubcc0\uc218\uba85\uc740 \uac00\ub3c5\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4: template < typename T > // good void print ( ostream & os , const vector < T >& v ) { for ( gsl :: index i = 0 ; i < v . size (); ++ i ) os << v [ i ] << '\\n' ; } \uc778\ub371\uc2a4\ub294 \uad00\uc2b5\uc801\uc73c\ub85c i \ub97c \uc0ac\uc6a9\ud558\uace0, \uc774 \uc77c\ubc18 \ud568\uc218\uc5d0\ub294 \ubca1\ud130\uc758 \uc758\ubbf8\ub97c \uc54c\ub9cc\ud55c \ud78c\ud2b8\uac00 \uc5c6\uc73c\ubbc0\ub85c, v \uac00 \uc5b4\ub5a4 \uacbd\uc6b0\uc5d0\ub4e0\uc9c0 \ub9de\ub294 \uc774\ub984\uc774\ub2e4. \ube44\uad50: template < typename Element_type > // bad: \uc77d\uae30 \uc5b4\ub835\ub2e4 void print ( ostream & target_stream , const vector < Element_type >& current_vector ) { for ( gsl :: index current_element_index = 0 ; current_element_index < current_vector . size (); ++ current_element_index ) target_stream << current_vector [ current_element_index ] << '\\n' ; } \uacfc\uc7a5\ud574\uc11c \ud45c\ud604\ud558\uae34 \ud588\uc9c0\ub9cc, \uc774\uac83\ubcf4\ub2e4 \ub354 \uc2ec\ud55c \uac83\ub3c4 \ubcf8\uc801\uc774 \uc788\ub2e4. Example \uad00\uc2b5\uc5d0 \ub530\ub974\uc9c0 \uc54a\ub294 \uc9e7\uc740 \ube44\uc9c0\uc5ed \ubcc0\uc218\ub294 \ucf54\ub4dc\ub97c \ubaa8\ud638\ud558\uac8c \ub9cc\ub4e0\ub2e4: void use1 ( const string & s ) { // ... tt ( s ); // bad: what is tt()? // ... } \ube44\uc9c0\uc5ed \uac1c\uccb4\ub4e4\uc5d0\ub294 \uc880 \ub354 \uac00\ub3c5\uc131 \uc788\ub294 \uc774\ub984\uc744 \uc4f0\uba74 \ub098\uc544\uc9c4\ub2e4: void use1 ( const string & s ) { // ... trim_tail ( s ); // better // ... } \uc774\ub807\uac8c \ud558\uba74, \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 trim_tail \uc758 \uc758\ubbf8\ub97c \uc54c \uc218 \uc788\uac8c \ub418\uace0, \uae30\uc5b5\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4. Example, bad \ub0b4\uc6a9\uc774 \uae34 \ud568\uc218\uc758 \uc778\uc790\ub294 \uc0ac\uc2e4\uc0c1 \ube44\uc9c0\uc5ed \ubcc0\uc218\ub77c\uace0 \ubcfc \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \uc778\uc790\ub4e4\uc758 \uc774\ub984\uc740 \uc801\uc808\ud55c \uc758\ubbf8\ub97c \ub2f4\uc544\uc57c \ud55c\ub2e4: void complicated_algorithm ( vector < Record >& vr , const vector < int >& vi , map < string , int >& out ) // vi\uc758 \uc778\ub371\uc2a4\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc11c // vr\uc5d0\uc11c \uc774\ubca4\ud2b8\ub97c \uc77d\uace0 (Records) // out\uc5d0 (name, index) \uc30d\uc744 \ub123\ub294\ub2e4 { // ... 500 lines of code using vr, vi, and out ... } \ud568\uc218\ub294 \uc9e7\uac8c \uc720\uc9c0\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud558\uc9c0\ub9cc, \uc774 \uaddc\uce59\uc744 \ubaa8\ub450 \uc801\uc6a9\uc2dc\ud0a4\uae34 \ud798\ub4e4 \ub54c\uac00 \uc788\ub2e4. \uadf8\ub7f4 \uacbd\uc6b0\uc5d4 \ubcc0\uc218\uc5d0 \uc774\ub984\uc744 \uc801\uc808\ud788 \ubd80\uc5ec\ud574\uc57c \ud55c\ub2e4. Enforcement \uc9c0\uc5ed \ubcc0\uc218\uc640 \ube44\uc9c0\uc5ed \ubcc0\uc218\uc758 \uc774\ub984\uc774 \uc720\uc9c0\ub418\ub294 \ubc94\uc704\uc758 \uae38\uc774\ub97c \ud655\uc778\ud55c\ub2e4. \ub3d9\uc2dc\uc5d0 \ud568\uc218\uc758 \uae38\uc774\ub97c \ud568\uaed8 \uace0\ub824\ud55c\ub2e4. ES.8: \ube44\uc2b7\ud574\ubcf4\uc774\ub294 \uc774\ub984\uc740 \ud53c\ud558\ub77c Reason \ucf54\ub4dc\uc758 \uba85\ud655\ud568\uacfc \uac00\ub3c5\uc131. \ub108\ubb34 \ube44\uc2b7\ud55c \uc774\ub984\uc740 \uc774\ud574\ub97c \uc800\ud574\ud558\uace0 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc18c\uc9c0\ub97c \ub0b3\ub294\ub2e4. Example; bad if ( readable ( i1 + l1 + ol + o1 + o0 + ol + o1 + I0 + l0 )) surprise (); Example; bad \uac19\uc740 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \ud0c0\uc785\uc774 \uc544\ub2cc \uac83\uc744 \ud0c0\uc785\uc758 \uc774\ub984\uacfc \uac19\uc740 \uc774\ub984\uc73c\ub85c \uc120\uc5b8\ud558\uc9c0\ub9c8\ub77c. \uc774\ub7ec\uba74 struct \ud639\uc740 enum \uc744 \uc0ac\uc6a9\ud574\uc11c \uc774\ub984\uc758 \uc758\ubbf8\uc744 \uad6c\ubd84\ud560 \ud544\uc694\uac00 \uc5c6\uac8c \ub41c\ub2e4. struct X \uac19\uc740 \ucf54\ub4dc\ub294 \uc774\ub984 \ud0d0\uc0c9(lookup)\uc774 \uc2e4\ud328\ud558\uba74 \uc554\ubb35\uc801\uc73c\ub85c X \ub85c \uac04\uc8fc\ub418\uae30 \ub54c\ubb38\uc5d0 \uc624\ub958\uc758 \uc6d0\uc778\uc744 \uc81c\uac70\ud558\ub294 \ud6a8\uacfc\ub3c4 \uc5bb\uc744 \uc218 \uc788\ub2e4. struct foo { int n ; }; struct foo foo (); // BAD, foo\ub294 \uc774\ubbf8 \ud0c0\uc785\uc758 \uc774\ub984\uc73c\ub85c \uc4f0\uc774\uace0 \uc788\ub2e4 struct foo x = foo (); // \uc124\uba85\uc774 \ud544\uc694\ud558\ub2e4 Exception \uc880 \uc624\ub798\ub41c(antique) \ud5e4\ub354 \ud30c\uc77c\ub4e4\uc740 \ud0c0\uc785\uc774 \uc544\ub2cc \uac83\uc5d0 \ud0c0\uc785\uacfc \uac19\uc740 \uc774\ub984\uc744 \ubd99\uc5ec\ub193\uc558\uc744 \uc218\ub3c4 \uc788\ub2e4. Enforcement \uc774\ubbf8 \uc54c\ub824\uc9c4 (\ud63c\ub780\uc744 \uc77c\uc73c\ud0a4\ub294) \uae00\uc790 \ud639\uc740 \uc22b\uc790 \uc870\ud569\uc744 \uc0ac\uc6a9\ud558\ub294 \uc774\ub984\uc774 \uc788\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4 \ubcc0\uc218, \ud568\uc218, \uc5f4\uac70\uc790(enumerator)\uc758 \uc120\uc5b8\uc774 \uac19\uc740 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \uc120\uc5b8\ub41c \ud074\ub798\uc2a4 \ud639\uc740 \uc5f4\uac70\ud615\uc744 \uac00\ub9ac\ub294(hide) \uacbd\uc6b0 \uc9c0\uc801\ud55c\ub2e4 ES.9: ALL_CAPS \uac19\uc740 \uc774\ub984\uc744 \ud53c\ud558\ub77c Reason \uc774\ub7f0 \uc774\ub984\uc740 \ubcf4\ud1b5 \ub9e4\ud06c\ub85c\ub97c \uc815\uc758\ud560 \ub54c \uc0ac\uc6a9\ud55c\ub2e4. \ub530\ub77c\uc11c ALL_CAPS \ud615\ud0dc\uc758 \uc774\ub984\uc740 \ub9e4\ud06c\ub85c\uc640 \ucda9\ub3cc\ub420 \uac00\ub2a5\uc131\uc774 \ub9ce\ub2e4. Example // \uc5b4\ub5a4 \ud5e4\ub354\ud30c\uc77c\uc758 \uc5b4\ub290 \uc9c0\uc810: #define NE != // \ub2e4\ub978 \uc5b4\ub5a4 \ud5e4\ub354\ud30c\uc77c\uc758 \uc5b4\ub290 \uc9c0\uc810: enum Coord { N , NE , NW , S , SE , SW , E , W }; // \uc5b4\ub290 \ubd88\uc30d\ud55c \ud504\ub85c\uadf8\ub798\uba38\uc758 .cpp \ud30c\uc77c \uc5b4\ub290 \uc9c0\uc810: switch ( direction ) { case N : // ... case NE : // ... // ... } Note \ub2e8\uc9c0 \uc0c1\uc218\uac00 \ub9e4\ud06c\ub85c\ucc98\ub7fc \uc4f0\uc778\ub2e4\ub294 \uc774\uc720\ub85c \uc0c1\uc218\uc5d0 ALL_CAPS \ud615\ud0dc\uc758 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\uba74 \uc548\ub41c\ub2e4 Enforcement \ub300\ubb38\uc790\ub9cc\uc744 \uc0ac\uc6a9\ud55c \uc774\ub984\uc744 \uc9c0\uc801\ud558\ub77c. \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0 \ub300\ud574\uc11c\ub294 \ub9e4\ud06c\ub85c \uc774\ub984\uc73c\ub85c \uc18c\ubb38\uc790\ub97c \uc11e\uc5b4 \uc0ac\uc6a9\ud55c \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c ES.10: \uc120\uc5b8\uc740 (\uc624\uc9c1) \ud558\ub098\uc758 \uc774\ub984\uc744 \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4 Reason \ud55c \uc904\uc5d0 \uc120\uc5b8 \ud558\ub098\uc529 \ud558\uba74 \uac00\ub3c5\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0ac \uc218 \uc788\uace0, C/C++ \ubb38\ubc95\uacfc \uad00\ub828\ub41c \uc2e4\uc218\ub97c \ud53c\ud560 \uc218 \uc788\ub2e4. \uadf8\ub9ac\uace0 // \uc8fc\uc11d\uc744 \ub2ec \uc218 \uc788\ub294 \uacf5\uac04\uc774 \uc0dd\uae34\ub2e4. Example, bad char * p , c , a [ 7 ], * pp [ 7 ], ** aa [ 10 ]; // \uc73d \uc774\uac8c\ubb50\uc57c! Exception \ud568\uc218 \uc120\uc5b8\uc740 \ub2e4\uc218\uc758 \ud568\uc218 \uc778\uc790 \uc120\uc5b8\uc744 \ud3ec\ud568\ud560 \uc218 \uc788\ub2e4. Exception C++ 17 \uc758 structured binding\uc740 \uc5ec\ub7ec \ubcc0\uc218\ub97c \ub3d9\uc2dc\uc5d0 \uc120\uc5b8\ud558\uae30 \uc704\ud574 \uc124\uacc4\ub418\uc5c8\ub2e4: auto [ iter , inserted ] = m . insert_or_assign ( k , val ); if ( inserted ) { /* new entry was inserted */ } Example template < class InputIterator , class Predicate > bool any_of ( InputIterator first , InputIterator last , Predicate pred ); \ucee8\uc149(concepts)\ub97c \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\uac8c \ub41c\ub2e4: bool any_of ( InputIterator first , InputIterator last , Predicate pred ); Example double scalbn ( double x , int n ); // OK: x * pow(FLT_RADIX, n); FLT_RADIX is usually 2 \ub610\ub294: double scalbn ( // better : x * pow ( FLT_RADIX , n ); FLT_RADIX is usually 2 double x , // base value int n // exponent ); \ub610\ub294: // better: base * pow(FLT_RADIX, exponent); FLT_RADIX is usually 2 double scalbn ( double base , int exponent ); Example int a = 7 , b = 9 , c , d = 10 , e = 3 ; \uc5ec\ub7ec \ubcc0\uc218\ub4e4\uc744 \ud55c\ubc88\uc5d0 \uc120\uc5b8\ud558\ub294 \uac83\uc740 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub97c \uac04\uacfc\ud558\uae30 \uc27d\ub2e4. Enforcement \ubcc0\uc218\uc640 \uc0c1\uc218\ub4e4\uc744 \ud55c\ubc88\uc5d0 \uc120\uc5b8\uc744 \ud55c \uacf3\uc744 \uc9c0\uc801\ud55c\ub2e4.(\uc608\ub97c \ub4e4\uc5b4, int* p, q; ) ES.11: \ud0c0\uc785 \uc774\ub984\uc758 \ubd88\ud544\uc694\ud55c \ubc18\ubcf5\uc744 \ub9c9\uc744\ub54c\ub294 auto \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uac04\ub2e8\ud55c \ub0b4\uc6a9\uc774 \ubc18\ubcf5\ub418\uba74 \uc9c0\ub8e8\ud558\uace0 \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\ub2e4. auto \ub97c \uc0ac\uc6a9\ud558\uba74 \uc120\uc5b8\ub41c \uac1c\uccb4(entity)\uac00 \uadf8 \uc9c0\uc810\uc5d0 \uace0\uc815\ub418\uace0, \uac00\ub3c5\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4. \ud15c\ud50c\ub9bf \ud568\uc218 \uc120\uc5b8\uc5d0\uc11c\ub294 \ubc18\ud658 \ud0c0\uc785\uc774 \uba64\ubc84 \ud0c0\uc785\uc77c \uc218 \uc788\ub2e4. Example \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc0dd\uac01\ud574\ubcf4\uc790: auto p = v . begin (); // vector<int>::iterator auto h = t . future (); auto q = make_unique < int [] > ( s ); auto f = []( int x ){ return x + 10 ; }; \uac01\uac01\uc758 \uacbd\uc6b0, \ud0c0\uc785\ub4e4\uc744 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774\ubbf8 \uc54c\uace0 \uc788\uc9c0\ub9cc, \ud504\ub85c\uadf8\ub798\uba38\uac00 \uae30\uc5b5\ud558\uae30 \ud798\ub4e0 \uae34 \uc774\ub984\uc758 \ud0c0\uc785\uc744 \uc791\uc131\ud560 \ud544\uc694\uac00 \uc5c6\uac8c \ub41c\ub2e4. Example template < class T > auto Container < T >:: first () -> Iterator ; // Container<T>::Iterator Exception \ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8(initializer list), \uadf8\ub9ac\uace0 \ucd08\uae30\ud654\uac00 \ub2f9\uc2e0\uc774 \uc758\ub3c4\ud55c(\uadf8\ub9ac\uace0 \uc815\ud655\ud788 \uc54c\uace0\uc788\ub294) \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub418\uc5b4\uc57c \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 auto \uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c. Example auto lst = { 1 , 2 , 3 }; // lst\ub294 initializer_list<int> \ud0c0\uc785\uc774\ub2e4 auto x { 1 }; // C++ 17\uc5d0\uc11c x\ub294 int \ud0c0\uc785\uc774\uc9c0\ub9cc, // C++ 11\uc5d0\uc11c\ub294 initializer_list\ub85c \ucc98\ub9ac\ub41c\ub2e4 Note \ucee8\uc149(concepts)\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c\ub418\uba74, \ucd94\ub860\ub418\ub294 \ud0c0\uc785\uc744 \uc880 \ub354 \ubd84\uba85\ud558\uac8c \ud45c\uae30\ud560 \uc218 \uc788\ub2e4. // ... ForwardIterator p = algo ( x , y , z ); Example (C++17) auto [ quotient , remainder ] = div ( 123456 , 73 ); // \ubc18\ud658\ub418\ub294 div_t \ud0c0\uc785\uc758 \uba64\ubc84\ub4e4\uc744 \ubd84\ub9ac\ud574\uc11c \uc120\uc5b8\ud558\uac8c \ub41c\ub2e4 Enforcement \uc120\uc5b8\uc5d0\uc11c \uc7a5\ud669\ud55c(redundant) \ud0c0\uc785 \uc774\ub984\uc774 \ubc18\ubcf5\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4 ES.12: \uc774\ub984\uc744 \ub36e\uc5b4\uc4f0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c Reason \uc5b4\ub5a4 \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uc9c0 \ud63c\ub3d9\ud558\uae30 \uc27d\ub2e4. \uc720\uc9c0\ubcf4\uc218\uc5d0 \ubb38\uc81c\uac00 \ub420\uc218\ub3c4 \uc788\ub2e4. Example, bad int d = 0 ; // ... if ( cond ) { // ... d = 9 ; // ... } else { // ... int d = 7 ; // ... d = value_to_be_returned ; // ... } return d ; \uc608\uc2dc\uac00 \uc544\uc8fc \ud070 if \uad6c\ubb38\uc774\uc5c8\ub2e4\uba74, \uad6c\ubb38 \uc548\uc5d0\uc11c \uc0c8\ub85c\uc6b4 d \uac00 \uc120\uc5b8\ub418\ub294 \uac83\uc744 \ubcf4\uc9c0 \ubabb\ud588\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub7f0 \ucf54\ub4dc\ub294 \ubc84\uadf8\uc758 \uc6d0\uc778\uc73c\ub85c \uc54c\ub824\uc838\uc788\ub2e4. \ubcf4\ud1b5 \uc774\ub807\uac8c \ub354 \uae4a\uc740 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \uac19\uc740 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \"shadowing\"\uc774\ub77c\uace0\ub3c4 \ud55c\ub2e4. Note Shadowing\uc740 \ud568\uc218\uac00 \ub108\ubb34 \ud06c\uac70\ub098 \ubcf5\uc7a1\ud560\ub54c \ubb38\uc81c\uac00 \ub41c\ub2e4. Example \uac00\uc7a5 \ubc14\uae65 \ubc94\uc704\uc5d0\uc11c \ud568\uc218 \uc778\uc790\ub4e4\uc744 \uac00\ub9ac\ub294 \uac83\uc740 \uc5b8\uc5b4\uc5d0\uc11c \uae08\uc9c0\ud558\uace0 \uc788\ub2e4: void f ( int x ) { int x = 4 ; // error: reuse of function argument name if ( x ) { int x = 7 ; // allowed, but bad // ... } } Example, bad \uba64\ubc84\uc758 \uc774\ub984\uc744 \uc9c0\uc5ed \ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83 \ub610\ud55c \ubb38\uc81c\uac00 \ub41c\ub2e4: struct S { int m ; void f ( int x ); }; void S :: f ( int x ) { m = 7 ; // \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub300\uc785\ud55c\ub2e4 if ( x ) { int m = 9 ; // ... m = 99 ; // \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub300\uc785\ud55c\ub2e4 // ... } } Exception \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ud568\uc218 \uc774\ub984\uc744 \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4: struct B { void f ( int ); }; struct D : B { void f ( double ); using B :: f ; }; \uc774\ub294 \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\ub2e4. \uc608\ub97c \ub4e4\uc5b4, using \uc120\uc5b8\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\uba74, d.f(1) \uc758 \ud638\ucd9c\uc740 f(int) \ub97c \ucc3e\uc9c0 \ubabb\ud560 \uac83\uc774\ub2e4. ??? \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uc5d0\uc11c shadowing/hiding\uc5d0 \ub300\ud55c \uaddc\uce59\uc774 \ud544\uc694\ud560\uae4c\uc694? Enforcement \ub354 \uae4a\uc740(nested) \uc9c0\uc5ed\ubc94\uc704\uc5d0\uc11c \uc774\ub984\uc744 \uc7ac\uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c \uba64\ubc84 \ud568\uc218\uc5d0\uc11c \uba64\ubc84 \uc774\ub984\uc744 \uc9c0\uc5ed\ubcc0\uc218\uc758 \uc774\ub984\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c \uc804\uc5ed\ubc94\uc704\uc758 \uc774\ub984\uc744 \uc9c0\uc5ed \ubcc0\uc218 \ud639\uc740 \uba64\ubc84\uc758 \uc774\ub984\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c \uc0c1\uc704 \ud074\ub798\uc2a4 \uba64\ubc84\uc758 \uc774\ub984\uc744 \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c (\ud568\uc218 \uc774\ub984\uc740 \uc81c\uc678) ES.20: \ud56d\uc0c1 \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud558\ub77c Reason \uac12\uc744 \uc800\uc7a5\ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub294 \uc624\ub958\uc640 \uad00\ub828\ub41c \ubbf8\uc815\uc758 \ud589\ub3d9(undefined behavior)\ub97c \ubc29\uc9c0\ud55c\ub2e4. \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\ub97c \uc774\ud574\ud558\uba74\uc11c \uc0dd\uae30\ub294 \ubb38\uc81c\ub97c \uc608\ubc29\ud55c\ub2e4. \ub9ac\ud329\ud1a0\ub9c1\uc774 \uc26c\uc6cc\uc9c4\ub2e4. Example void use ( int arg ) { int i ; // bad: \ucd08\uae30\ud654\uac00 \uc548\ub41c \ubcc0\uc218 // ... i = 7 ; // i\ub97c \ucd08\uae30\ud654\ud55c\ub2e4 } \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc88b\uc9c0 \uc54a\ub2e4. i = 7 \ub294 i \ub97c \ucd08\uae30\ud654\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub2e4; \ubcc0\uc218\uc5d0 \uac12\uc744 \ub300\uc785\uc744 \ud558\ub294 \uac83\uc774\ub2e4. \ub610\ud55c, i \ub294 ... \ubd80\ubd84\uc5d0\uc11c \uac12\uc744 \uc77d\uc744 \uc218 \uc788\ub2e4. \uc774\ub807\uac8c \uc791\uc131\ud558\ub294 \uac83\uc774 \ub354 \uc88b\ub2e4: void use ( int arg ) // OK { int i = 7 ; // OK: \ucd08\uae30\ud654\ud55c\ub2e4 string s ; // OK: \uae30\ubcf8\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4 // ... } Note \uc5b8\uc81c\ub098 \ucd08\uae30\ud654\ud558\ub77c \ub294 \uaddc\uce59\uc740 \uac1c\uccb4\ub294 \uc0ac\uc6a9\ub418\uae30 \uc804\uc5d0 \uac12\uc744 \uac00\uc838\uc57c \ud55c\ub2e4 \ub294 \uc5b8\uc5b4 \uaddc\uce59\ubcf4\ub2e4 (\uc758\ub3c4\uc801\uc73c\ub85c) \uc5c4\uaca9\ud558\ub2e4. \ud6c4\uc790\ub294 \ub354 \uc644\ud654\ub41c \uaddc\uce59\uc73c\ub85c, \uae30\uc220\uc801\uc778 \ubc84\uadf8\ub97c \uc7a1\uc744\uc218\ub294 \uc788\ub2e4, \ud558\uc9c0\ub9cc: \uac00\ub3c5\uc131\uc774 \ub354 \ub0ae\ub2e4 \ud544\uc694\ud55c \ubc94\uc704 \uc774\uc0c1\uc73c\ub85c \uc774\ub984\uc744 \uc120\uc5b8\ud558\ub3c4\ub85d \ub9cc\ub4e0\ub2e4 \ubcf5\uc7a1\ud55c \ucf54\ub4dc\ub85c \uc778\ud55c \ub17c\ub9ac\uc801 \ubc84\uadf8\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4 \ub9ac\ud329\ud1a0\ub9c1\uc744 \ubc29\ud574\ud55c\ub2e4 \uc5b8\uc81c\ub098 \ucd08\uae30\ud654\ud558\ub77c \ub294 \uaddc\uce59\uc740 \uac12\uc744 \uc800\uc7a5\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc6a9\ud558\ub294 \uc624\ub958\ub97c \ub9c9\ub294 \uac83 \uc774\uc678\uc5d0\ub3c4 \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \ub192\uc774\ub294\ub370 \ucd08\uc810\uc744 \ub454 \uaddc\uce59\uc774\ub2e4. Example \ucd08\uae30\ud654\uc5d0 \ub300\ud55c \uc880 \ub354 \uc57d\ud55c \uaddc\uce59\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uc608\uc2dc\uac00 \uc788\ub2e4 widget i ; // \"widget\" \uc774 \ucd08\uae30\ud654\uc5d0 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4dc\ub294 \ud0c0\uc785\uc774\ub77c\uace0 \ud558\uc790 // \uad49\uc7a5\ud788 \ud070 POD \uc77c\uc218\ub3c4 \uc788\ub2e4 widget j ; if ( cond ) { // bad: i\uc640 j\uac00 \"\ub4a4\ub2a6\uac8c\" \ucd08\uae30\ud654\ub41c\ub2e4 i = f1 (); j = f2 (); } else { i = f3 (); j = f4 (); } \uc774\ub7f0 \ucf54\ub4dc\ub294 i \uc640 j \ub97c \ucd08\uae30\ud654 \ud558\ub294 \ud615\ud0dc\ub85c \ub2e4\uc2dc \uc791\uc131\ud558\uae30 \uc5b4\ub835\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c0\ub294 \ud0c0\uc785\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294, \ucd08\uae30\ud654\ub97c \uc9c0\uc5f0\ud558\ub294 \ucf54\ub4dc\ub294 \uae30\ubcf8 \ucd08\uae30\ud654\ub97c \ud558\uace0 \ub300\uc785\uc774 \ub530\ub77c\uc624\ub294 \uad6c\uc870\uac00 \ub41c\ub2e4. \uc774\ub7f0 \uc608\uc2dc\ucc98\ub7fc \uc791\uc131\ub418\ub294 \uc774\uc720\ub294 \ubcf4\ud1b5 \"\ud6a8\uc728\uc801\uc774\uae30\" \ub54c\ubb38\uc774\ub2e4. \ud558\uc9c0\ub9cc \ucef4\ud30c\uc77c\ub7ec\uac00 \uac12\uc744 \uc124\uc815\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc6a9\ud558\ub294 \uc624\ub958\ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4\uba74 \ucd08\uae30\ud654\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud560\uc218\ub3c4 \uc788\ub2e4. i \uc640 j \uc5d0 \ub17c\ub9ac\uc801\uc778 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uc790. \uc774\ub7f0 \uc5f0\uacb0\uc740 \ucf54\ub4dc\uc5d0 \ub098\ud0c0\ub0ac\uc744 \uac83\uc774\ub2e4: pair < widget , widget > make_related_widgets ( bool x ) { return ( x ) ? { f1 (), f2 ()} : { f3 (), f4 ()}; } auto [ i , j ] = make_related_widgets ( cond ); // C++17 Note \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\ub294 \uc218\uc2ed\ub144\uac04 \ub611\ub611\ud55c \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc774 \uc790\uc8fc \uc0ac\uc6a9\ud574\uc654\ub2e4. \ub3d9\uc2dc\uc5d0 \ubcf5\uc7a1\uc131\uacfc \uc624\ub958\uc758 \uc8fc \uc6d0\uc778\uc774\uae30\ub3c4 \ud588\ub2e4. \uc774\ub7f0 \uc624\ub958\ub4e4\uc740 \ucd08\uae30 \uad6c\ud604 \uc774\ud6c4 \uc720\uc9c0\ubcf4\uc218 \ub2e8\uac8c\uc5d0\uc11c \ub9ce\uc774 \ubc1c\uacac\ub418\uc5c8\ub2e4. Example \uc774 \uaddc\uce59\uc740 \uba64\ubc84 \ubcc0\uc218\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4. class X { public : X ( int i , int ci ) : m2 { i }, cm2 { ci } {} // ... private : int m1 = 7 ; int m2 ; int m3 ; const int cm1 = 7 ; const int cm2 ; const int cm3 ; }; \ucef4\ud30c\uc77c\ub7ec\uac00 cm3 \uac00 const \uc778\ub370\ub3c4 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uac83\uc744 \uc9c0\uc801\ud560 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub294 m3 \uc774 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uac83\uc744 \uc7a1\uc544\ub0b4\uc9c0\ub294 \uc54a\ub294\ub2e4. \ubcf4\ud1b5, \uac00\uc9dc(spurious) \uba64\ubc84 \ucd08\uae30\ud654\ub294 \ucd08\uae30\ud654 \ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c\uc368 \uc624\ub958\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\uae30\uc5d0 \uadf8\ub9cc\ud55c \uac00\uce58\uac00 \uc788\ub2e4. \ub610 \uacbd\uc6b0\uc5d0 \ub530\ub77c \ucd5c\uc801\ud654\uae30\uc5d0\uc11c \ubd88\ud544\uc694\ud55c(redundant) \ucd08\uae30\ud654\ub97c \uc81c\uac70\ud560\uc218\ub3c4 \uc788\ub2e4. (\uc608\ucee8\ub300, \ub300\uc785 \uc9c1\uc804\uc5d0 \ucd08\uae30\ud654\ub97c \uc218\ud589\ud558\ub294 \uacbd\uc6b0) Exception \uc785\ub825\uc5d0 \ub530\ub77c \ucd08\uae30\ud654\ub418\ub294 \uac1c\uccb4\ub97c \uc120\uc5b8\ud558\uace0 \uc788\ub2e4\uba74, \uadf8 \uac1c\uccb4\ub97c \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc740 \ucd08\uae30\ud654\ub97c 2\ubc88 \uc218\ud589\ud558\ub294 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc774\ub7f0 \ubc29\ubc95\uc740 \uc785\ub825 \uc774\ud6c4\uc5d0 \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uc740 \ubd80\ubd84\uc744 \ub0a8\uae38\uc218\ub3c4 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c -- \uc774\ub294 \ubcf4\uc548\uacfc \uad00\ub828\ub41c \uc624\ub958\uc758 \uc628\uc0c1(fertile source)\uc774 \ub418\uc5b4\uc654\ub2e4. constexpr int max = 8 * 1024 ; int buf [ max ]; // OK, but suspicious: uninitialized f . read ( buf , max ); \uc0c1\ud669\uc5d0 \ub530\ub77c \ubc30\uc5f4\uc744 \ucd08\uae30\ud654\ud558\ub294 \ube44\uc6a9\uc774 \ub9c9\ub300\ud560\uc218\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc, \uadf8\ub7f0 \uacbd\uc6b0\ub294 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubd80\ubd84\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\ub3c4\ub85d \uc758\ub3c4\ud55c \uac83\uc774\uba70, \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uace0\ub824\ud558\uba74\uc11c \uc0ac\uc6a9\ud55c\ub2e4. constexpr int max = 8 * 1024 ; int buf [ max ] = {}; // \ubaa8\ub4e0 \uc6d0\uc18c\ub4e4\uc744 0\uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4 // \uc5b4\ub5a4 \uc0c1\ud669\uc5d0\uc11c\ub294 \ub354 \ub098\uc740 \ubc29\ubc95\uc774 \ub41c\ub2e4 f . read ( buf , max ); \ud560 \uc218 \uc788\ub2e4\uba74 \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: string s ; // s\ub294 \uae30\ubcf8\uac12 \"\"\ub85c \ucd08\uae30\ud654\ub41c\ub2e4 cin >> s ; // s\uac00 \uc785\ub825 \ubb38\uc790\uc5f4\uc744 \ub2f4\uae30 \uc704\ud574 \ud655\uc7a5\ub41c\ub2e4 \uc785\ub825 \ucc98\ub9ac\uc758 \ub300\uc0c1\uc774 \ub418\ub294 \ubcc0\uc218\ub4e4\ub3c4 \uc608\uc678\ub294 \uc544\ub2c8\ub2e4: int i ; // bad // ... cin >> i ; \ubcf4\ud1b5 \uc785\ub825\uc758 \ub300\uc0c1\uacfc \uc785\ub825 \ucc98\ub9ac\uac00 \ubd84\ub9ac\ub418\ub294 \uacbd\uc6b0 (\uadf8\ub7ec\uba74 \uc548\ub418\uc9c0\ub9cc) used-before-set\uc758 \uac00\ub2a5\uc131\uc774 \ubc1c\uc0dd\ud55c\ub2e4. int i2 = 0 ; // \uc880 \ub354 \ub098\uc740 \ucf54\ub4dc, 0\uc774 i2\uc5d0 \ud5c8\uc6a9\ub418\ub294 \uac12\uc774\ub77c\uace0 \uac00\uc815\ud55c\ub2e4 // ... cin >> i2 ; \uc88b\uc740 \ucd5c\uc801\ud654\uae30\ub294 \uc785\ub825 \ucc98\ub9ac(operation)\uc5d0 \ub300\ud574 \uc54c\uace0\uc788\uc5b4\uc57c \ud558\uba70, \uc911\ubcf5\ub418\ub294 \ubd80\ubd84\uc744 \uc81c\uac70\ud574\uc57c \ud55c\ub2e4 Example \"\ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740\" \uc0c1\ud0dc\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud574\uacb0\ubc29\ubc95\uc774 \uc544\ub2c8\uba70 \ubb38\uc81c\uac00 \uc788\ub294 \uac83\uc774\ub2e4: widget i = uninit ; // bad widget j = uninit ; // ... use ( i ); // possibly used before set // ... if ( cond ) { // bad: i and j are initialized \"late\" i = f1 (); j = f2 (); } else { i = f3 (); j = f4 (); } \uc774 \ucf54\ub4dc\ub294 \uc774\uc81c \ucef4\ud30c\uc77c\ub7ec\uac00 used-before-set\uc744 \uc27d\uac8c \ud0d0\uc9c0\ud560 \uc218 \uc5c6\uac8c \ub418\uc5c8\ub2e4. \ub354\uc6b1\uc774 widget\uc758 \uc0c1\ud0dc \uacf5\uac04\uc744 \ub354 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uc5c8\ub2e4: uninit \uac12\uc744 \uac00\uc9c4 widget\uc5d0\ub294 \uc5b4\ub5a4 \ucc98\ub9ac\uac00 \ud5c8\uc6a9(valid)\ub418\uace0 \uc5b4\ub5a4 \ucc98\ub9ac\uac00 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc744\uae4c? Note \uc5b4\ub5a8\ub54c\ub294 \ub78c\ub2e4\ub97c \ucd08\uae30\ud654\uc758 \ub3c4\uad6c\ub85c \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4: error_code ec ; Value v = [ & ] { auto p = get_value (); // get_value()\uc5d0\uc11c pair<error_code, Value>\ub97c \ubc18\ud658\ud55c\ub2e4 ec = p . first ; return p . second ; }(); \ub610\ub294 \uc774\ub807\uac8c \ud560\uc218\ub3c4 \uc788\ub2e4: Value v = [] { auto p = get_value (); // get_value()\uc5d0\uc11c pair<error_code, Value>\ub97c \ubc18\ud658\ud55c\ub2e4 if ( p . first ) throw Bad_value { p . first }; return p . second ; }(); See also ES.28 Enforcement \ubaa8\ub4e0 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c4 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785 \ubcc0\uc218\ub4e4\uc740 \uc9c0\uc801\ud558\uc9c0 \uc54a\ub294\ub2e4. \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubc84\ud37c\uac00 \uc120\uc5b8 \ud558\uc790\ub9c8\uc790 \uc4f0\uae30-\uc811\uadfc \ub418\ub294\uc9c0 \uac80\uc0ac\ud558\ub77c. \ube44- const \ucc38\uc870 \uc2e4\ud589\uc778\uc790(argument)\ub85c \uc804\ub2ec\ud558\ub294 \uacbd\uc6b0\ub294 \uc4f0\uae30-\uc811\uadfc\uc73c\ub85c \uac00\uc815\ud55c\ub2e4. ES.21: \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \ub54c \ubcc0\uc218\ub098 \uc0c1\uc218\ub97c \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c Reason \uac00\ub3c5\uc131. \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \ubc94\uc704\ub97c \uc81c\ud55c\ud55c\ub2e4 Example int x = 7 ; // ... no use of x here ... ++ x ; Enforcement \uac1c\uccb4\uc758 \uc120\uc5b8\uacfc \ucc98\uc74c \uc0ac\uc6a9\ub418\ub294 \uacf3\uc774 \ub5a8\uc5b4\uc838 \uc788\uc73c\uba74(distant from) \uc9c0\uc801\ud55c\ub2e4 ES.22: \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud560 \uac12\uc774 \uc0dd\uae38 \ub54c\uae4c\uc9c0 \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c Reason \uac00\ub3c5\uc131. \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \ubc94\uc704\ub97c \uc81c\ud55c\ud55c\ub2e4. used-before-set\uc758 \uc704\ud5d8\uc744 \uac10\uc218\ud558\uc9c0 \ub9c8\ub77c. \ub300\uc785\ubcf4\ub2e4 \ucd08\uae30\ud654\uac00 \ub354 \ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4. Example, bad string s ; // ... s \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ubd80\ubd84 ... s = \"what a waste\" ; Example, bad SomeLargeType var ; // ugly CaMeLcAsEvArIaBlE // (Camel Case Variable) if ( cond ) // \uc880 \uc911\uc694\ud55c \uc870\uac74 Set ( & var ); else if ( cond2 || ! cond3 ) { var = Set2 ( 3.14 ); } else { var = 0 ; for ( auto & e : something ) var += e ; } // var\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc; // \uc81c\uc5b4 \ud750\ub984\uc744 \uac80\ud30c\uc77c \uc2dc\uac04\uc5d0 \uac80\uc0ac\ud558\ub294 \ubc29\ubc95\uc73c\ub85c var\ub97c \ub108\ubb34 \uc77c\ucc0d \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4 SomeLargeType \uc758 \uae30\ubcf8 \ucd08\uae30\ud654 \ube44\uc6a9\uc774 \ud06c\ub2e4\uba74 \uc774 \ucf54\ub4dc\ub294 \uad1c\ucc2e\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74, \uc5b4\ub5a4 \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc800 \ubcf5\uc7a1\ud55c \uc870\uac74 \uc18d\uc5d0\uc11c \ubaa8\ub4e0 \uacbd\uc6b0\uac00 \uace0\ub824\ub418\uc5c8\ub294\uc9c0 \uc758\uc2ec\ud560 \uac83\uc774\ub2e4. \ub9cc\uc57d \ud5c8\uc810\uc774 \uc788\ub2e4\uba74, \"use before set\" \ubc84\uadf8\uac00 \ub41c\ub2e4. \uc720\uc9c0\ubcf4\uc218\uc758 \ud568\uc815\uc778 \uac83\uc774\ub2e4. \uc911\uac04\uc815\ub3c4 \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\uc5d0 \ub300\ud574\uc11c\ub294, const \ubcc0\uc218\ub97c \ud3ec\ud568\ud574\uc11c, \ucd08\uae30\ud654\uc5d0 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcf4\ub77c; ES.28 \ub97c \ucc38\uace0\ud558\ub77c. Enforcement \ucc98\uc74c \uac1c\uccb4\uc758 \uac12\uc744 \uc77d\uae30 \uc804\uc5d0 \uac12\uc744 \ub300\uc785\ud558\ub294 \uacbd\uc6b0, \ud574\ub2f9 \uac1c\uccb4\uac00 \uae30\ubcf8 \ucd08\uae30\ud654\ub85c \uc120\uc5b8\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud558\ub77c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\uc758 \uc120\uc5b8 \uc774\ud6c4\uc5d0, \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \ubcf5\uc7a1\ud55c \ucc98\ub9ac(computation)\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c ES.23: {} \ucd08\uae30\ud654 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c Reason {} \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c\ub294 \uaddc\uce59\uc740 \uc27d\uace0, \ub354 \uc77c\ubc18\uc801\uc774\uba70, \ub35c \ubaa8\ud638\ud558\uace0, \ub2e4\ub978 \ucd08\uae30\ud654 \ud615\ud0dc\uc5d0 \ube44\ud574 \uc548\uc804\ud558\ub2e4. Example int x { f ( 99 )}; vector < int > v = { 1 , 2 , 3 , 4 , 5 , 6 }; Exception \ucee8\ud14c\uc774\ub108 \ud0c0\uc785\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294, {...} \ub97c \uc6d0\uc18c\ub4e4\uc744 \ub098\uc5f4\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\uace0 (...) \ub294 \ud06c\uae30\ub97c \ub098\ud0c0\ub0b4\ub294\ub370 \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uc804\ud1b5(tradition)\uc774 \uc788\ub2e4: vector < int > v1 ( 10 ); // vector of 10 elements with the default value 0 vector < int > v2 { 10 }; // vector of 1 element with the value 10 Note {} \ucd08\uae30\ud654\ub294 \uac12\uc758 \ubc94\uc704\uac00 \uc904\uc5b4\ub4dc\ub294 \ud0c0\uc785\ubcc0\ud658(narrowing conversion)\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. Example int x { 7.9 }; // error: narrowing int y = 7.9 ; // OK: y becomes 7. Hope for a compiler warning Note {} \ucd08\uae30\ud654\ub294 \ub2e4\ub978 \ud615\ud0dc\uc758 \ucd08\uae30\ud654\uc640 \ub2ec\ub9ac \ubaa8\ub4e0 \uacbd\uc6b0\uc758 \ucd08\uae30\ud654\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4: auto p = new vector < int > { 1 , 2 , 3 , 4 , 5 }; // initialized vector D :: D ( int a , int b ) : m { a , b } { // member initializer // (e.g., m might be a pair) // ... }; X var {}; // initialize var to be empty struct S { int m { 7 }; // default initializer for a member // ... }; Note auto \ub85c \uc120\uc5b8\ud55c \ubcc0\uc218\ub97c \ud558\ub098\uc758 \uac12\uc73c\ub85c \ucd08\uae30\ud654 \ud558\ub294\uac83, \uc608\ub97c \ub4e4\uc5b4, {v} \ud615\ud0dc\ub294 C++ 17 \uc774\uc804\uae4c\uc9c0\ub294 \uc608\uc0c1\ubc16\uc758 \uacb0\uacfc\ub97c \ub0b3\ub294\ub2e4. C++ 17\uc758 \uaddc\uce59\uc740 \uc0c1\ub300\uc801\uc73c\ub85c \ub35c \ub180\ub78d\ub2e4: auto x1 { 7 }; // x1 is an int with the value 7 auto x2 = { 7 }; // x2 is an initializer_list<int> with an element 7 auto x11 { 7 , 8 }; // error: two initializers auto x22 = { 7 , 8 }; // x2 is an initializer_list<int> with elements 7 and 8 \ub530\ub77c\uc11c initializer_list<T> \ub97c \uc758\ub3c4\ud588\ub2e4\uba74 ={...} \ub97c \uc0ac\uc6a9\ud558\ub77c. auto fib10 = { 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 }; // fib10 is a list Note \uc624\ub798\ub41c \uc2b5\uad00\uc740 \uc9c0\uc6b0\uae30 \uc5b4\ub835\ub2e4\ub294 \uac83\uc744 \uc0dd\uac01\ud558\uba74, \uc774 \uaddc\uce59\uc740 \uafb8\uc900\ud788 \uc801\uc6a9\ud558\uae30\ub294 \uc5b4\ub835\ub2e4. \ud2b9\ud788 = \uc5d0 \ubb38\uc81c\uac00 \uc5c6\ub294 \uacbd\uc6b0\uac00 \ub108\ubb34\ub098\ub3c4 \ub9ce\ub2e4. Example template < typename T > void f () { T x1 ( 1 ); // T initialized with 1 T x0 (); // bad: function declaration (often a mistake) T y1 { 1 }; // T initialized with 1 T y0 {}; // default initialized T // ... } Enforcement \uae4c\ub2e4\ub86d\ub2e4(Tricky). \ub2e8\uc21c\ud55c \ucd08\uae30\ud654\ub97c \uc704\ud55c = \ub294 \uc9c0\uc801\ud558\uc9c0 \uc54a\ub294\ub2e4 auto \uc774\ud6c4\uc5d0 = \uac00 \uc0ac\uc6a9\ub41c \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4 ES.24: \ud3ec\uc778\ud130\ub294 unique_ptr<T> \uc5d0 \ub2f4\uc544\ub77c Reason std::unique_ptr \ub294 \ub204\uc218\ub97c \ud53c\ud558\uae30 \uc704\ud55c \uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc774\ub2e4. \uc774 \ubc29\ubc95\uc740 \ubbff\uc744 \uc218 \uc788\uace0, \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc774 \uc548\uc804\ud55c \uc18c\uc720\uad8c \uad00\ub9ac\ub97c \uc704\ud574 \uc77c\ud558\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uac00\ub3c5\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uace0 \uc2e4\ud589\uc2dc\uac04 \ube44\uc6a9\uc774 0\uc5d0 \uac00\uae5d\ub2e4. Example void use ( bool leak ) { auto p1 = make_unique < int > ( 7 ); // OK int * p2 = new int { 7 }; // bad: might leak // ... no assignment to p2 ... if ( leak ) return ; // ... no assignment to p2 ... vector < int > v ( 7 ); v . at ( 7 ) = 0 ; // exception thrown // ... } \ub9cc\uc57d leak \uc774 true \uac12\uc744 \uac00\uc9c4\ub2e4\uba74 p2 \uac00 \uac00\ub9ac\ud0a4\ub294 \uac1c\uccb4\uac00 \ub204\uc218\ub41c\ub2e4. \ud558\uc9c0\ub9cc p1 \uc774 \uac00\ub9ac\ud0a4\ub294 \uac1c\uccb4\ub294 \uadf8\ub807\uc9c0 \uc54a\ub2e4. at() \uc774 \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uadf8\ub807\ub2e4. Enforcement new , malloc() \ud639\uc740 \uadf8 \uacb0\uacfc\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\uc758 \ub300\uc0c1\uc774 \ub418\ub294 \uc6d0\uc2dc \ud3ec\uc778\ud130\ub97c \ucc3e\ub294\ub2e4. ES.25: \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uac1c\uccb4\ub97c const \ud639\uc740 constexpr \ub85c \uc120\uc5b8\ud558\ub77c Reason \uc2e4\uc218\ub85c \uac12\uc744 \ubc14\uafb8\ub294 \uac78 \ub9c9\uc744 \uc218 \uc788\ub294 \ubc29\ubc95\uc774\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \ucd5c\uc801\ud654\ub97c \uc704\ud55c \uae30\ud68c\ub97c \uc904 \uc218\ub3c4 \uc788\ub2e4. Example void f ( int n ) { const int bufmax = 2 * n + 2 ; // good: bufmax\uac00 \uc774\ud6c4\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc2e4\uc218\ub85c \ubcc0\uacbd\ub420 \uac00\ub2a5\uc131\uc774 \uc5c6\ub2e4 int xmax = n ; // suspicious: xmax\ub97c \ub098\uc911\uc5d0 \ubc14\uafb8\ub824\uace0 \uc758\ub3c4\ud55c \uac78\uae4c? // ... } Enforcement \ubcc0\uc218\uac00 \uc2e4\uc81c\ub85c \uac12\uc774 \ubc14\ub00c\ub294\uc9c0 \uc548 \ubc14\ub00c\ub294\uc9c0 \ubcf4\uace0 \ubc14\ub010\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. \ubd88\ud589\ud558\uac8c\ub3c4, const \uac00 \uc544\ub2cc \uac1c\uccb4\uac00 \uac12\uc744 \ubc14\uafb8\ub824 \uc758\ub3c4 \ud588\ub294\uc9c0 \ucc3e\uc544\ub0b4\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. ES.26: \uc11c\ub85c \uc0c1\uad00\uc5c6\ub294 \ubaa9\uc801\uc5d0 \ud558\ub098\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \uac00\ub3c5\uc131\uacfc \uc548\uc804\uc131 Example, bad void use () { int i ; for ( i = 0 ; i < 20 ; ++ i ) { /* ... */ } for ( i = 0 ; i < 200 ; ++ i ) { // bad: i \uac00 \uc7ac\uc0ac\uc6a9\ub41c\ub2e4 /* ... */ } } Note \ucd08\uae30\ud654\ub97c \uc704\ud574\uc11c, buffer\ub97c \uc7ac\uc0ac\uc6a9\ud558\uace0 \uc2f6\uc744\uc218\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uadf8\ub807\ub354\ub77c\ub3c4 \ubcc0\uc218\uc758 \ubc94\uc704\ub97c \ucd5c\ub300\ud55c \uc81c\ud55c\ud558\uace0 buffer\uc5d0 \ub0a8\uaca8\uc9c4 \ub370\uc774\ud130\ub85c \uc778\ud574 \ubc84\uadf8\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud558\ub77c. \uc7ac\uc0ac\uc6a9\ub41c \ubc84\ud37c\ub294 \ubcf4\uc548\uad00\ub828 \ubc84\uadf8\uc758 \uc6d0\uc778\uc774 \ub418\uae30\ub3c4 \ud55c\ub2e4. void write_to_file () { std :: string buffer ; // to avoid reallocations on every loop iteration for ( auto & o : objects ) { // First part of the work. generate_first_String ( buffer , o ); write_to_file ( buffer ); // Second part of the work. generate_second_string ( buffer , o ); write_to_file ( buffer ); // etc... } } Enforcement \uc7ac\ud65c\uc6a9\ub418\ub294 \ubcc0\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. ES.27: \uc2a4\ud0dd\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ubc30\uc5f4\uc740 std::array \ub098 stack_array \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131\uc774 \ub192\uc544\uc9c0\uace0, \ubb35\uc2dc\uc801\uc73c\ub85c \ud3ec\uc778\ud130\ub85c \ubc14\ub00c\uc9c0 \uc54a\ub294\ub2e4. \uc5b8\uc5b4\uac00 \uc9c0\uc6d0\ud558\ub294 \ubc30\uc5f4\uc758 \ube44\ud45c\uc900\uc801\uc778 \ud655\uc7a5\uacfc \ud5f7\uac08\ub9ac\uc9c0 \uc54a\ub294\ub2e4. Example, bad const int n = 7 ; int m = 9 ; void f () { int a1 [ n ]; int a2 [ m ]; // error: ISO C++\uac00 \uc544\ub2c8\ub2e4 // ... } Note a1 \ubcc0\uc218\uc120\uc5b8\uc740 C++\uc5d0\uc11c\ub294 \uc801\ubc95\ud558\ub2e4. \uc774 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud55c \ucf54\ub4dc\uac00 \ub9ce\uc774 \uc788\ub2e4. \ub2e4\ub9cc \uc774\ub294 \uae38\uc774 \uac12\uc774 \ube44\uc9c0\uc5ed \ubcc0\uc218\uc778 \uacbd\uc6b0 \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4. \ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0, \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub85c \ubcc0\ud658\ud558\ub294 \ub4f1\uc758 \"\uc720\uba85\ud55c\" \uc624\ub958 \uc6d0\uc778\uc774 \ub41c\ub2e4. a2 \ubcc0\uc218\uc120\uc5b8\uc740 C \ubc29\uc2dd\uc73c\ub85c C++ \uc5d0\uc11c\ub294 \uc4f0\uc9c0 \uc54a\uc73c\uba70 \ubcf4\uc548\uc0c1 \ubb38\uc81c\uac00 \uc788\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ud55c\ub2e4. Example const int n = 7 ; int m = 9 ; void f () { array < int , n > a1 ; stack_array < int > a2 ( m ); // ... } Enforcement \uc0c1\uc218 \uae38\uc774\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294 \ubc30\uc5f4\uc774\ub77c\uba74 \uc9c0\uc801\ud55c\ub2e4. (C \uc5b8\uc5b4\uc758 \uac00\ubcc0\uae38\uc774\ubc30\uc5f4(VLA)) \ubc30\uc5f4 \uae38\uc774\ub85c \uc9c0\uc5ed \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 ES.28: \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654, \ud2b9\ud788 const \ubcc0\uc218\uc758 \ucd08\uae30\ud654\uc5d0\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uba4b\uc9c0\uac8c \uc9c0\uc5ed \ucd08\uae30\ud654\ub97c \uc228\uae38 \uc218 \uc788\ub2e4. \ucd08\uae30\ud654 \uc791\uc5c5\uc744 \uc704\ud574\uc11c\ub9cc \ud544\uc694\ud55c \ubcc0\uc218\ub97c \ud3ec\ud568\ud574\uc11c \uc7ac\uc0ac\uc6a9\ud560 \uac83 \uac19\uc9c0 \uc54a\uc740 \ud568\uc218\ub97c \uc0dd\uc131\ud560 \ud544\uc694\ub3c4 \uc5c6\ub2e4. \uc57d\uac04\uc758 \ucd08\uae30\ud654 \uc791\uc5c5 \ud6c4\uc5d0 const \uc5ec\uc57c \ud558\ub294 \ubcc0\uc218\uc5d0\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example, bad widget x ; // \uac00\ub2a5\ud558\ub2e4\uba74 const\uc5ec\uc57c \ud55c\ub2e4, \ud558\uc9c0\ub9cc: for ( auto i = 2 ; i <= N ; ++ i ) { // \uc774 \ubd80\ubd84\uc774 x\ub97c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud55c x += some_obj . do_something_with ( i ); // \uc880 \uae34 \ucf54\ub4dc\ub77c\uace0 \ud558\uc790 } // \uc774 \uc9c0\uc810\ubd80\ud130, x\ub294 const\uac00 \ub418\uc5b4\uc57c \ud55c\ub2e4. // \ud558\uc9c0\ub9cc \uc774\ub7f0 \ucf54\ub529 \uc2a4\ud0c0\uc77c\uc5d0\uc11c\ub294 \uadf8\ub807\uac8c \ub9cc\ub4e4 \uc218\uac00 \uc5c6\ub2e4. Example, good const widget x = [ & ]{ widget val ; // widget\uc774 \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c4\ub2e4\uace0 \uac00\uc815\ud558\uc790 for ( auto i = 2 ; i <= N ; ++ i ) { // \uc774 \ubd80\ubd84\uc774 x\ub97c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud55c val += some_obj . do_something_with ( i ); // \uc880 \uae34 \ucf54\ub4dc\ub77c\uace0 \ud558\uc790 } return val ; }(); Example string var = [ & ]{ if ( ! in ) return \"\" ; // default string s ; for ( char c : in >> c ) s += toupper ( c ); return s ; }(); // note () \uac00\ub2a5\ud558\ub2e4\uba74 enum \uac19\uc740 \uc26c\uc6b4 \ubc29\ubc95\uc73c\ub85c \uc870\uac74\uc744 \uc904\uc5ec\ub77c. \ubd84\uae30 \uc120\ud0dd\uacfc \ucd08\uae30\ud654\ub97c \ub4a4\uc11e\uc5b4\uc120 \uc548\ub41c\ub2e4. Enforcement \uc5b4\ub835\ub2e4. \uc798 \ud574\ub3c4 \uacbd\ud5d8\uc801\uc778(heuristic) \uc218\uc900. \ub8e8\ud504\ub97c \uc0ac\uc6a9\ud574 \uac12\uc744 \uc124\uc815\ud558\ub294 \ucd08\uae30\ud654 \uc548\ub41c \ubcc0\uc218\uc744 \ucc3e\uc544\ub77c. ES.30: \ud504\ub85c\uadf8\ub7a8 \ud14d\uc2a4\ud2b8\ub97c \ub2e4\ub8e8\uae30(manipulate) \uc704\ud574 \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \ub9e4\ud06c\ub85c\ub294 \ubc84\uadf8\uc758 \uc8fc\uc694 \uc6d0\uc778\uc774\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc77c\ubc18\uc801\uc778 \ubc94\uc704\uc640 \ud0c0\uc785 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc0ac\ub78c\uc774 \ubcf4\ub294 \uac83\uacfc \ucef4\ud30c\uc77c\ub7ec\uac00 \ubcf4\ub294 \uac83\uc744 \ub2e4\ub974\uac8c \ud55c\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc9c0\uc6d0 \ub3c4\uad6c\ub97c \ub9cc\ub4dc\ub294 \uac83\uc744 \ubcf5\uc7a1\ud558\uac8c \ud55c\ub2e4. Example, bad #define Case break; case /* BAD */ \uc774 \ubb38\uc81c \uc5c6\uc5b4 \ubcf4\uc774\ub294 \ub9e4\ud06c\ub85c\ub294 C \ub300\uc2e0 c \uac00 \uc0ac\uc6a9\ub418\uba74 \uc545\uc9c8\uc801\uc778(bad) \uc81c\uc5b4\ud750\ub984 \ubc84\uadf8\ub85c \uc774\uc5b4\uc9c4\ub2e4. Note \uc774 \uaddc\uce59\uc740 #ifdef \ubb38\uc5d0\uc11c \uc124\uc815\uc81c\uc5b4\ub97c \uc704\ud574 \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ub9c9\uc9c0 \uc54a\ub294\ub2e4. \ubbf8\ub798\uc5d0 \ubaa8\ub4c8\uc774 \ub3c4\uc785\ub418\uba74 \uc124\uc815\uc744 \uc81c\uc5b4\ud558\uae30 \uc704\ud55c \ub9e4\ud06c\ub85c\ub294 \uc0ac\ub77c\uc9c0\uac8c \ub420 \uac83\uc774\ub2e4. Note \uc774 \uaddc\uce59\uc774 \uc758\ub3c4\ud558\ub294 \uac83\uc740 # \uc744 \uc0ac\uc6a9\ud574 \ubb38\uc790\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\uac70\ub098 ## \ub97c \uc0ac\uc6a9\ud574 \uc811\ud569(concat)\ud558\ub294 \uac83\uc774\ub2e4. \ubcf4\ud1b5\uc758 \ub9e4\ud06c\ub85c\ub4e4 \ucc98\ub7fc, \"\uac70\uc758 \ubb34\ud574\ud55c\" \uacbd\uc6b0\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc790\ub3d9 \uc644\uc131\uae30, \uc815\uc801 \ubd84\uc11d\uae30, \ub514\ubc84\uac70\uc640 \uac19\uc740 \ub3c4\uad6c\uc5d0\uac8c\ub294 \ubb38\uc81c\uac00 \ub41c\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 \uadfc\uc0ac\ud55c \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uacfc\ub3c4\ud558\uac8c \ubcf5\uc7a1\ud55c \uc124\uacc4\uac00 \uc788\ub2e4\ub294 \uc2e0\ud638\uc77c \uc218 \uc788\ub2e4. \ub610\ud55c, # \uc640 ## \ub97c \uc0ac\uc6a9\ud558\uba74 \ub9e4\ud06c\ub85c\ub97c \uc815\uc758\ud558\uace0 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc720\ub3c4(encourage)\ud55c\ub2e4: #define CAT(a, b) a ## b #define STRINGIFY(a) #a void f ( int x , int y ) { string CAT ( x , y ) = \"asdf\" ; // BAD: \ud234\uc5d0\uc11c \ub2e4\ub8e8\uae30 \uc5b4\ub835\ub2e4 (\uadf8\ub9ac\uace0 \ubabb\uc0dd\uacbc\ub2e4) string sx2 = STRINGIFY ( x ); // ... } \ub9e4\ud06c\ub85c\uc5c6\uc774 \ubb38\uc790\uc5f4\uc744 \uc870\uc791\ud558\uae30 \uc704\ud55c \ubc29\ubc95(workaround)\uc774 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74: string s = \"asdf\" \"lkjh\" ; // \ud3c9\ubc94\ud55c \ubb38\uc790\uc5f4 \ub9ac\ud130\ub7f4 \uc811\ud569 (literal concatenation) enum E { a , b }; template < int x > constexpr const char * stringify () { switch ( x ) { case a : return \"a\" ; case b : return \"b\" ; } } void f ( int x , int y ) { string sx = stringify < x > (); // ... } \ub9e4\ud06c\ub85c\ub9cc\ud07c \ud3b8\ub9ac\ud55c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, \uc624\ubc84\ud5e4\ub4dc\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uc9c0 \uc54a\uc73c\uba70, \ud0c0\uc785\uacfc \uc720\ud6a8\ubc94\uc704\uc758 \uc601\ud5a5\uc744 \ubc1b\ub294\ub2e4. \ubbf8\ub798\uc5d0\ub294 \uc815\uc801 \ub9ac\ud50c\ub809\uc158(static reflection)\uc774 \uc804\ucc98\ub9ac\uae30\ub97c \uc0ac\uc6a9\ud574 \ubb38\uc790\uc5f4\uc744 \ub2e4\ub8e8\ub294 \uac83\uc744 \uc5c6\uc560\uac8c \ub420 \uac83\uc774\ub2e4. Enforcement \uc18c\uc2a4\uc81c\uc5b4( #ifdef \uac19\uc740)\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ub9e4\ud06c\ub85c\ub97c \ubcf8\ub2e4\uba74 \uc18c\ub9ac\ub97c \uc9c8\ub7ec\ub77c. ES.31: \ub9e4\ud06c\ub85c\ub97c \uc0c1\uc218\ub098 \"\ud568\uc218\"\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \ub9e4\ud06c\ub85c\ub294 \ubc84\uadf8\uc758 \uc8fc\uc694 \uc6d0\uc778\uc774\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc77c\ubc18\uc801\uc778 \ubc94\uc704\uc640 \ud0c0\uc785 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc0ac\ub78c\uc774 \ubcf4\ub294 \uac83\uacfc \ucef4\ud30c\uc77c\ub7ec\uac00 \ubcf4\ub294 \uac83\uc744 \ub2e4\ub974\uac8c \ud55c\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc9c0\uc6d0 \ub3c4\uad6c\ub97c \ub9cc\ub4dc\ub294 \uac83\uc744 \ubcf5\uc7a1\ud558\uac8c \ud55c\ub2e4. Example, bad #define PI 3.14 #define SQUARE(a, b) (a * b) SQUARE \uc5d0 \uc798 \uc54c\ub824\uc9c4 \ubc84\uadf8\uac00 \uc5c6\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4 \ub354 \uc798 \ub3d9\uc791\ud558\ub294 \ub300\uc548\uc774 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74: constexpr double pi = 3.14 ; template < typename T > T square ( T a , T b ) { return a * b ; } Enforcement \uc18c\uc2a4\uc81c\uc5b4( #ifdef \uac19\uc740)\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ub9e4\ud06c\ub85c\ub97c \ubcf8\ub2e4\uba74 \uc18c\ub9ac\ub97c \uc9c8\ub7ec\ub77c. ES.32: \ubaa8\ub4e0 \ub9e4\ud06c\ub85c\ub294 ALL_CAPS \ud615\ud0dc\ub85c \uc120\uc5b8\ud558\ub77c Reason \uad00\uc2b5. \uac00\ub3c5\uc131. \ub9e4\ud06c\ub85c \uad6c\ubcc4. Example #define forever for (;;) /* \uc5c4\uccad \ub098\uc05c \ucf54\ub4dc */ #define FOREVER for (;;) /* \uc5ec\uc804\ud788 \uc0ac\uc545\ud558\uc9c0\ub9cc, \ucd5c\uc18c\ud55c \uc0ac\ub78c\uc740 \ub9e4\ud06c\ub85c\ub77c\ub294\uac78 \uc54c \uc218 \uc788\ub2e4 */ Enforcement \uc18c\ubb38\uc790\ub85c \uc791\uc131\ub41c \ub9e4\ud06c\ub85c\ub97c \ubcf8\ub2e4\uba74 \uc18c\ub9ac\ub97c \uc9c8\ub7ec\ub77c. ES.33: \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \uace0\uc720\ud55c \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ub9e4\ud06c\ub85c\ub294 \uc720\ud6a8\ubc94\uc704 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4. Example #define MYCHAR /* BAD, will eventually clash with someone else's MYCHAR*/ #define ZCORP_CHAR /* Still evil, but less likely to clash */ Note \uac00\ub2a5\ud558\ub2e4\uba74 \ub9e4\ud06c\ub85c\ub294 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c: ES.30 , ES.31 , \uadf8\ub9ac\uace0 ES.32 \ub97c \ucc38\uace0\ud558\ub77c. \uc548\ud0c0\uae5d\uac8c\ub3c4, \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \ub0a8\uc6a9\ud558\ub294 \uae34 \uc804\ud1b5\uacfc \ud568\uaed8 \ub9e4\ud06c\ub85c\uc758 \uc601\ud5a5\uc744 \ubc1b\ub294 \ucf54\ub4dc\uac00 \uc218\uc2ed\uc5b5 \uc904\uc740 \uc788\uc744 \uac83\uc774\ub2e4. \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \uae34 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\uace0 \uace0\uc720\ud55c \uc811\ub450\uc0ac(prefix)\ub97c \ubd99\uc5ec\uc11c (\ub2f9\uc2e0\uc774 \uc18d\ud55c \uc870\uc9c1\uc758 \uc774\ub984\uc774\ub77c\ub358\uc9c0) \uc774\ub984\uc774 \ucda9\ub3cc\ud560 \uac00\ub2a5\uc131\uc744 \ub0ae\ucdb0\ub77c. Enforcement \uc9e7\uc740 \ub9e4\ud06c\ub85c \uc774\ub984\uc5d0 \ub300\ud574\uc11c \uacbd\uace0\ud558\ub77c. ES.34: (C-\uc2a4\ud0c0\uc77c\uc758) \uac00\ubcc0\uc778\uc790 \ud568\uc218\ub97c \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c Reason \ud0c0\uc785 \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4. \uc815\ud655\ud558\uac8c \ub3d9\uc791\ud558\uae30 \uc704\ud574\uc11c \uc9c0\uc800\ubd84\ud55c \ubcc0\ud658/\ub9e4\ud06c\ub85c \ucf54\ub4dc\uac00 \ud544\uc694\ud558\ub2e4. Example #include <cstdarg> // \"severity\" followed by a zero-terminated list of char*s; // write the C-style strings to cerr void error ( int severity ...) { va_list ap ; // a magic type for holding arguments va_start ( ap , severity ); // arg startup: \"severity\" is the first argument of error() for (;;) { // treat the next var as a char*; no checking: a cast in disguise char * p = va_arg ( ap , char * ); if ( ! p ) break ; cerr << p << ' ' ; } va_end ( ap ); // arg cleanup (don't forget this) cerr << '\\n' ; if ( severity ) exit ( severity ); } void use () { error ( 7 , \"this\" , \"is\" , \"an\" , \"error\" , nullptr ); error ( 7 ); // crash error ( 7 , \"this\" , \"is\" , \"an\" , \"error\" ); // crash const char * is = \"is\" ; string an = \"an\" ; error ( 7 , \"this\" , \"is\" , an , \"error\" ); // crash } Alternative \uc911\ubcf5 \uc815\uc758, \ud15c\ud50c\ub9bf, \uac00\ubcc0 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c #include <iostream> void error ( int severity ) { std :: cerr << '\\n' ; std :: exit ( severity ); } template < typename T , typename ... Ts > constexpr void error ( int severity , T head , Ts ... tail ) { std :: cerr << head ; error ( severity , tail ...); } void use () { error ( 7 ); // No crash! error ( 5 , \"this\" , \"is\" , \"not\" , \"an\" , \"error\" ); // No crash! std :: string an = \"an\" ; error ( 7 , \"this\" , \"is\" , \"not\" , an , \"error\" ); // No crash! error ( 5 , \"oh\" , \"no\" , nullptr ); // Compile error! No need for nullptr. } Note \uc774 \ubc29\ubc95\uc73c\ub85c printf \uac00 \uad6c\ud604\ub418\uc5b4\uc788\ub2e4. Enforcement C-\uc2a4\ud0c0\uc77c \uac00\ubcc0\uc778\uc790 \ud568\uc218\ub97c \uc815\uc758\ud558\uba74 \uc9c0\uc801\ud558\ub77c #include <cstdarg> \uc640 #include <stdarg.h> \ub97c \uc9c0\uc801\ud558\ub77c ES.expr: \ud45c\ud604\uc2dd \ud45c\ud604\uc2dd\uc740 \uac12\uc744 \uc870\uc791\ud55c\ub2e4(manipulate). ES.40: \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\uc744 \ud53c\ud558\ub77c Reason \ud45c\ud604\uc2dd\uc774 \ubcf5\uc7a1\ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4. Example // bad: assignment hidden in subexpression while (( c = getc ()) != - 1 ) // bad: two non-local variables assigned in a sub-expressions while (( cin >> c1 , cin >> c2 ), c1 == c2 ) // better, but possibly still too complicated for ( char c1 , c2 ; cin >> c1 >> c2 && c1 == c2 ;) // OK: if i and j are not aliased int x = ++ i + ++ j ; // OK: if i != j and i != k v [ i ] = v [ j ] + v [ k ]; // bad: multiple assignments \"hidden\" in subexpressions x = a + ( b = f ()) + ( c = g ()) * 7 ; // bad: relies on commonly misunderstood precedence rules x = a & b + c * d && e ^ f == 7 ; // bad: undefined behavior x = x ++ + x ++ + ++ x ; \uc704\uc758 \uc5f0\uc0b0\uc2dd \uc911 \uba87\uc740 \uc758\uc2ec\uc758 \uc5ec\uc9c0\uc5c6\uc774 \ub098\uc058\ub2e4. (\uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ud589\ub3d9\uc774 \uc77c\uc5b4\ub098\uac8c \ud55c\ub2e4) \ub098\uba38\uc9c0\ub294 \uaf64 \ubcf5\uc7a1\ud558\uac70\ub098 \ud2b9\uc774\ud55c \ud3b8\uc774\uace0, \uc2ec\uc9c0\uc5b4 \ub2a5\ub825\uc788\ub294 \ud504\ub85c\uadf8\ub798\uba38\ub3c4 \uc798\ubabb \uc774\ud574\ud558\uac70\ub098 \ubb38\uc81c\ub97c \uac04\uacfc\ud574 \ubc84\ub9b4 \ub9cc\ud55c \uac83\ub3c4 \uc788\ub2e4. Note C++17 \uc5d0\uc11c\ub294 \ud3c9\uac00 \uc21c\uc11c\ub97c \uaddc\uc815\ud558\uace0 \uc788\ub2e4. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ub300\uc785\ub418\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd \uc21c\uc11c\ub85c \ud3c9\uac00\ub41c\ub2e4. \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790 \ud3c9\uac00\uc21c\uc11c\ub294 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4; ES.43 \ub97c \ucc38\uace0\ud558\ub77c \ud558\uc9c0\ub9cc \uc774 \uaddc\uce59\uc758 \uc720\ubb34\uac00 \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\uc774 \ud63c\ub780\uc744 \ub9cc\ub4e0\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ubc14\uafb8\uc9c0\ub294 \uc54a\ub294\ub2e4. Note \ud504\ub85c\uadf8\ub798\uba38\ub294 \ud45c\ud604\uc2dd\uc758 \uae30\ubcf8\uc801\uc778 \uaddc\uce59\ub4e4\uc744 \uc54c\uace0 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Example x = k * y + z ; // OK auto t1 = k * y ; // bad: \ubd88\ud544\uc694\ud558\uac8c \uc7a5\ud669\ud55c \ucf54\ub4dc x = t1 + z ; if ( 0 <= x && x < max ) // OK auto t1 = 0 <= x ; // bad: \ubd88\ud544\uc694\ud558\uac8c \uc7a5\ud669\ud55c \ucf54\ub4dc auto t2 = x < max ; if ( t1 && t2 ) // ... Enforcement \uae4c\ub2e4\ub86d\ub2e4. \"\ud45c\ud604\uc2dd\uc774 \uc5bc\ub9c8\ub098 \ubcf5\uc7a1\ud55c\uac00\"\ub97c \uc5b4\ub5bb\uac8c \ud310\ub2e8\ud560 \uac83\uc778\uac00? \uc5b4\ub5bb\uac8c \uace0\ub824\ud560 \uac83\uc778\uac00? \uacc4\uc0b0\uc744 \ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c\ub9cc \uad6c\uc131\ub41c \ubb38\uc7a5\ub4e4\ub85c \uad6c\uc131\ud558\uae30\ub294 \ud798\ub4e4\ub2e4. \uace0\ub824\ud560\ub9cc\ud55c \uac83\ub4e4: * \ubd80\uc218 \ud6a8\uacfc(side-effect): \ub2e4\uc218\uc758 \ube44\uc9c0\uc5ed \ubcc0\uc218\uc5d0 \ub300\ud55c \ubd80\uc218 \ud6a8\uacfc\uc744 \uc758\uc2ec\ud560 \uc218 \uc788\ub2e4. \ud2b9\ud788 \ubcc4\ub3c4\uc758 \ud558\uc704 \uc5f0\uc0b0\uc2dd\uc5d0 \uc788\ub294 \uacbd\uc6b0 * \ubcc4\uba85\uc6a9 \ubcc0\uc218(aliased variable)\uc5d0 \uac12\uc744 \uc4f0\ub294 \ud589\uc704 * N\uac1c \uc774\uc0c1\uc758 \uc5f0\uc0b0\uc790 (N\uc740 \uc5bc\ub9c8\uac00 \ub418\uc5b4\uc57c \ud558\ub294\uac00?) * \ubbf8\ubb18\ud55c \uc6b0\uc120\uc21c\uc704\uaddc\uce59\uc5d0 \uc758\uc874\ud558\uae30 * \ubbf8\uc815\uc758 \ud589\ub3d9 (undefined behavior: \ubaa8\ub4e0 \ubbf8\uc815\uc758 \ud589\ub3d9\uc744 \uc7a1\uc544\ub0bc \uc218 \uc788\ub294\uac00?) * \uad6c\ud604\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\ub294 \ud589\ub3d9(implementation defined behavior)? * ??? ES.41: \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\uac00 \ubd88\ubd84\uba85\ud558\uba74, \uc18c\uad04\ud638\ub97c \uc0ac\uc6a9\ud558\ub77c(parenthesize) Reason \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c. \uac00\ub3c5\uc131. \ubaa8\ub4e0 \uc0ac\ub78c\ub4e4\uc774 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\ub97c \uae30\uc5b5\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. Example const unsigned int flag = 2 ; unsigned int a = flag ; if ( a & flag != 0 ) // bad: a & (flag != 0)\ub97c \uc758\ub3c4\ud588\ub2e4 Note \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc0b0\uc220 \uc5f0\uc0b0, \ub17c\ub9ac \uc5f0\uc0b0\uc5d0 \ub300\ud574\uc11c \uc6b0\uc120\uc21c\uc704 \ud14c\uc774\ube14\uc744 \uc54c\uace0 \uc788\uc744 \uac83\uc744 \uae30\ub300\ud55c\ub2e4. \ub2e4\ub978 \uc5f0\uc0b0\uacfc \ube44\ud2b8 \uc5f0\uc0b0\uc744 \uc11e\uc5b4 \uc0ac\uc6a9\ud560 \ub54c\ub294 \uc18c\uad04\ud638(parentheses)\ub97c \uc0ac\uc6a9\ud558\uae30\ub97c \uad8c\ud55c\ub2e4. if (( a & flag ) != 0 ) // OK: \uc758\ub3c4\ub300\ub85c \ub3d9\uc791\ud55c\ub2e4 Note \uc544\ub798\uc5d0 \ub300\ud574\uc11c\ub294 \uc18c\uad04\ud638\uac00 \ud544\uc694\uc5c6\ub2e4\ub294 \uc815\ub3c4\ub294 \uc54c\uace0 \uc788\uc744 \uac83\uc774\ub2e4: if ( a < 0 || a <= max ) { // ... } Enforcement \ube44\ud2b8 \ub17c\ub9ac \uc5f0\uc0b0\uc790\uc640 \ub2e4\ub978 \uc5f0\uc0b0\uc790\uac00 \uc11e\uc5ec \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \uac00\uc7a5 \uc67c\ucabd\uc5d0 \uc704\uce58\ud55c \uc5f0\uc0b0\uc790(leftmost operator)\uac00 \ud560\ub2f9 \uc5f0\uc0b0\uc790\uac00 \uc544\ub2c8\ub77c\uba74 \uc9c0\uc801\ud55c\ub2e4 ??? ES.42: \ud3ec\uc778\ud130\ub294 \uac04\ub2e8\ud558\uace0 \uc9c1\uad00\uc801\uc778 \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\ub77c Reason \ubcf5\uc7a1\ud55c \ud3ec\uc778\ud130 \uacc4\uc0b0\uc740 \uc8fc\uc694\ud55c \uc624\ub958 \uc6d0\uc778\uc774 \ub41c\ub2e4. Note \ud3ec\uc778\ud130 \ub300\uc2e0 gsl::span \ub97c \uc0ac\uc6a9\ud558\ub77c. \ud3ec\uc778\ud130\ub294 \uc624\uc9c1 \ud558\ub098\uc758 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0ac \ub54c\ub9cc \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4 . \ud3ec\uc778\ud130\uc758 \uc0b0\uc220\uc5f0\uc0b0\uc740 \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc27d\uace0 \uc218\ub9ce\uc740, \uc218\ub9ce\uc740 \ub098\uc05c \ubc84\uadf8\uc640 \ubcf4\uc548 \uc704\ud5d8(violation)\uc758 \uc6d0\uc778\uc774\ub2e4. span \uc740 \uacbd\uacc4\ub97c \uac80\uc0ac\ud558\uace0, \uc548\uc804\ud558\uac8c \ubc30\uc5f4\uc758 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud558\ub294 \ud0c0\uc785\uc774\ub2e4. \uacbd\uacc4\ub97c \uc54c \uc218 \uc788\ub294 \ubc30\uc5f4\uc5d0 \ub300\ud55c \uc811\uadfc(subscript)\uc5d0 \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \ucef4\ud30c\uc77c\ub7ec\uac00 \ud3c9\uac00\ud560 \uc218 \uc788\ub2e4. Example, bad void f ( int * p , int count ) { if ( count < 2 ) return ; int * q = p + 1 ; // BAD ptrdiff_t d ; int n ; d = ( p - & n ); // OK d = ( q - p ); // OK int n = * p ++ ; // BAD if ( count < 6 ) return ; p [ 4 ] = 1 ; // BAD p [ count - 1 ] = 2 ; // BAD use ( & p [ 0 ], 3 ); // BAD } Example, good void f ( span < int > a ) // BETTER: \ud568\uc218 \uc120\uc5b8\uc5d0\uc11c span\uc744 \uc0ac\uc6a9\ud574\ubc84\ub9b0\ub2e4 { if ( a . size () < 2 ) return ; int n = a [ 0 ]; // OK span < int > q = a . subspan ( 1 ); // OK if ( a . size () < 6 ) return ; a [ 4 ] = 1 ; // OK a [ a . size () - 1 ] = 2 ; // OK use ( a . data (), 3 ); // OK } Note \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud574 \ubc30\uc5f4\uc5d0 \uc811\uadfc\ud558\ub294 \ucf54\ub4dc\uac00 \uc548\uc804\ud55c\uc9c0 \ud3c9\uac00\ud558\ub294 \uac83\uc740 \ub3c4\uad6c\uc640 \uc0ac\ub78c \ubaa8\ub450\uc5d0\uac8c \uc5b4\ub835\ub2e4. span \uc740 \uc2e4\ud589 \uc2dc\uac04\uc5d0 \uacbd\uacc4\ub97c \uac80\uc0ac\ud558\uae30 \ub54c\ubb38\uc5d0, \ubc30\uc5f4\uc758 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud560\ub54c \uc548\uc804\ud558\ub2e4. at() \uc740 \ud55c\ubc88 \uc811\uadfc\ud560 \ub54c \uacbd\uacc4\ub97c \uac80\uc0ac\ud558\ub294 \ub2e4\ub978 \ubc29\ubc95\uc774\ub2e4. \ubc30\uc5f4\uc5d0 \uc811\uadfc\ud560 \ub54c \ubc18\ubcf5\uc790\uac00 \ud544\uc694\ud558\ub2e4\uba74, \ubc30\uc5f4\uc5d0 \ub300\ud55c span \uc744 \uc0dd\uc131\ud558\uace0 \uadf8\uc5d0 \ub300\ud55c \ubc18\ubcf5\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c. Example, bad void f ( array < int , 10 > a , int pos ) { a [ pos / 2 ] = 1 ; // BAD a [ pos - 1 ] = 2 ; // BAD a [ - 1 ] = 3 ; // BAD (\ub2e4\ub9cc \ub3c4\uad6c\uc5d0\uc11c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4) -- \ub2e4\ub978 \ubc29\ubc95\uc774 \uc5c6\ub2e4. \uadf8\ub0e5 \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c a [ 10 ] = 4 ; // BAD (\ub2e4\ub9cc \ub3c4\uad6c\uc5d0\uc11c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4) -- \ub2e4\ub978 \ubc29\ubc95\uc774 \uc5c6\ub2e4. \uadf8\ub0e5 \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c } Example, good span \uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: // A1: \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785\uc744 span\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ubc14\uafb8\uc5c8\ub2e4 void f1 ( span < int , 10 > a , int pos ) { a [ pos / 2 ] = 1 ; // OK a [ pos - 1 ] = 2 ; // OK } // A2: \uc9c0\uc5ed\ubcc0\uc218\ub85c span\uc744 \ub9cc\ub4e4\uc5b4 \uc0ac\uc6a9\ud55c\ub2e4 void f2 ( array < int , 10 > arr , int pos ) { span < int > a = { arr , pos }; a [ pos / 2 ] = 1 ; // OK a [ pos - 1 ] = 2 ; // OK } at() \uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: // ALTERNATIVE B: \uc6d0\uc18c\uc5d0 \uc811\uadfc\ud560\ub54c at()\uc744 \uc0ac\uc6a9\ud55c\ub2e4 void f3 ( array < int , 10 > a , int pos ) { at ( a , pos / 2 ) = 1 ; // OK at ( a , pos - 1 ) = 2 ; // OK } Example, bad void f () { int arr [ COUNT ]; for ( int i = 0 ; i < COUNT ; ++ i ) arr [ i ] = i ; // BAD, cannot use non-constant indexer } Example, good span \uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: void f1 () { int arr [ COUNT ]; span < int > av = arr ; for ( int i = 0 ; i < COUNT ; ++ i ) av [ i ] = i ; } \ubc94\uc704 \uae30\ubc18 for \ubb38\uc5d0 span \uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: void f1a () { int arr [ COUNT ]; span < int , COUNT > av = arr ; int i = 0 ; for ( auto & e : av ) e = i ++ ; } \uc811\uadfc\ud560 \ub54c at() \ub97c \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: void f2 () { int arr [ COUNT ]; for ( int i = 0 ; i < COUNT ; ++ i ) at ( arr , i ) = i ; } \ubc94\uc704\uae30\ubc18 for \ubb38\uc740 \uc774\ub807\ub2e4: void f3 () { int arr [ COUNT ]; for ( auto & e : arr ) e = i ++ ; } Note \ub3c4\uad6c\uc5d0\uc11c \uc2e4\ud589\uc2dc\uac04\uc5d0 \uacb0\uc815\ub418\ub294 \uc778\ub371\uc2a4\ub85c \ubc30\uc5f4\uc5d0 \uc811\uadfc\ud558\ub294 \ud45c\ud604\uc2dd\uc744 at() \uc744 \uc0ac\uc6a9\ud574 \ub2e4\uc2dc \uc791\uc131\ud558\ub3c4\ub85d \ud560\uc218\ub3c4 \uc788\ub2e4: static int a [ 10 ]; void f ( int i , int j ) { a [ i + j ] = 12 ; // BAD, \uc774 \ucf54\ub4dc\ub97c \ub2e4\uc2dc \uc4f4\ub2e4\uba74 ... at ( a , i + j ) = 12 ; // OK -- \uacbd\uacc4\ub97c \uac80\uc0ac\ud55c\ub2e4 } Example (\uadf8\ub3d9\uc548 \uc5b8\uc5b4\uc5d0\uc11c \ud574\uc654\ub358 \uac83\ucc98\ub7fc) \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub85c \ubc14\uafb8\ub294 \uac83\uc740 \uacbd\uacc4 \uac80\uc0ac\uc758 \uae30\ud68c\ub97c \uc5c6\uc560\ubc84\ub9b0\ub2e4. \uc9c0\uc591\ud558\ub77c. void g ( int * p ); void f () { int a [ 5 ]; g ( a ); // BAD: \ubc30\uc5f4 \uac1c\uccb4\ub97c \ub118\uae30\ub824 \ud55c\uac83\uc77c\uae4c? g ( & a [ 0 ]); // OK: \uac1c\uccb4\ub97c \ub118\uae30\uace0 \uc788\ub2e4 } \ubc30\uc5f4\uc744 \uc804\ub2ec\ud558\uace0 \uc2f6\ub2e4\uba74: void g ( int * p , size_t length ); // \uc624\ub798\ub41c (\uc704\ud5d8\ud55c) \ucf54\ub4dc void g1 ( span < int > av ); // BETTER: get g() changed. void f2 () { int a [ 5 ]; span < int > av = a ; g ( av . data (), av . size ()); // OK, \uc120\ud0dd\uc758 \uc5ec\uc9c0\uac00 \uc5c6\ub2e4\uba74 g1 ( a ); // OK -- \ubc30\uc5f4\uc5d0\uc11c \ud3ec\uc778\ud130\ub85c\uc758 decay\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. // \ub300\uc2e0 span\uc744 \uc0dd\uc131\ud55c\ub2e4 } Enforcement \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \ub300\ud55c \uc0b0\uc220\uc5f0\uc0b0\uc744 \uc218\ud589\ud558\ub294 \ud45c\ud604\uc2dd\uc740 \uc9c0\uc801\ud558\ub77c \ubc30\uc5f4(\uc815\uc801 \ubc30\uc5f4 \ud639\uc740 std::array )\uc5d0 \uc778\ub371\uc2a4\ub97c \uc0ac\uc6a9\ud574 \uc811\uadfc\ud558\ub294 \ud45c\ud604\uc2dd\uc744 \uc9c0\uc801\ud558\ub77c. \uc774\ub54c \ud45c\ud604\uc2dd\uc740 \ubc30\uc5f4 \ubc94\uc704 \uc548( 0 \ubd80\ud130 \ubc30\uc5f4 \ub05d\uae4c\uc9c0)\uc5d0 \ud574\ub2f9\ud558\ub294 \ucef4\ud30c\uc77c \uc2dc\uac04 \uc0c1\uc218 \ud45c\ud604\uc2dd\uc774 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4 \ubc30\uc5f4 \ud0c0\uc785\uc5d0\uc11c \ud3ec\uc778\ud130 \ud0c0\uc785\uc73c\ub85c \ubb35\uc2dc\uc801 \ud615\ubcc0\ud658\uc5d0 \uc758\uc874\ud558\ub294 \ud45c\ud604\uc2dd\uc744 \uc9c0\uc801\ud558\ub77c \uc774 \uaddc\uce59\uc740 \uacbd\uacc4 \uc548\uc804\uc131 \uac80\uc0ac \uc758 \uc77c\ubd80\ubd84\uc774\ub2e4. ES.43: \ud3c9\uac00 \uc21c\uc11c\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ud45c\ud604\uc2dd\uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \uadf8\ub7f0 \ucf54\ub4dc\uac00 \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud560\uc9c0\ub294 \uc54c \uc218\uac00 \uc5c6\ub2e4. \uc774\uc2dd\uc131. \ud2b9\uc815\ud55c \ud658\uacbd\uc5d0\ub294 \ub9de\uc744\uc9c0\ub294 \ubab0\ub77c\ub3c4, \ub2e4\ub978 \ucef4\ud30c\uc77c\ub7ec (\ud639\uc740 \uc0ac\uc6a9 \uc911\uc778 \ucef4\ud30c\uc77c\ub7ec\uc758 \ub2e4\uc74c \ubc84\uc804)\uc5d0\uc11c\ub294 \ub2e4\ub97c \uc218 \uc788\ub2e4. \ud639\uc740 \ucd5c\uc801\ud654 \uc124\uc815\uc5d0 \ub530\ub77c \ub2e4\ub97c \uc218\ub3c4 \uc788\ub2e4. Note C++17 \uc5d0\uc11c\ub294 \ud3c9\uac00 \uc21c\uc11c\ub97c \uaddc\uc815\ud558\uace0 \uc788\ub2e4. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ub300\uc785\ub418\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd \uc21c\uc11c\ub85c \ud3c9\uac00\ub41c\ub2e4. \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790 \ud3c9\uac00\uc21c\uc11c\ub294 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \ub2f9\uc2e0\uc758 \ucf54\ub4dc\uac00 (Ctrl + C,V \ub418\uc5b4\uc11c) C++ 17 \uc774\uc804\uc758 \ucef4\ud30c\uc77c\ub7ec\ub85c \ucef4\ud30c\uc77c \ub420 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c. \ub108\ubb34 \uc601\ub9ac\ud560 \ud544\uc694\ub294 \uc5c6\ub2e4. Example v [ i ] = ++ i ; // \uacb0\uacfc\ub294 \uc54c \uc218 \uc5c6\ub2e4(undefined) \uac00\uc7a5 \uc88b\uc740 \uaddc\uce59\uc740 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \ud45c\ud604\uc2dd\uc5d0\uc11c \uac12\uc744 \uc77d\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4. Enforcement \uc88b\uc740 \ubd84\uc11d\uae30\ub97c \uc0ac\uc6a9\ud574 \ucc3e\uc744 \uc218 \uc788\ub2e4. ES.44: \ud568\uc218 \uc778\uc790\uac00 \ud45c\ud604\uc2dd \ud3c9\uac00 \uc21c\uc11c\uc758 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uac8c \ud558\ub77c Reason \uc21c\uc11c\uac00 \uc815\uc758\ub418\uc5b4\uc788\uc9c0 \uc54a\ub2e4. Note C++17 \uc5d0\uc11c\ub294 \ud3c9\uac00 \uc21c\uc11c\ub97c \uaddc\uc815\ud558\uace0 \uc788\ub2e4. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ub300\uc785\ub418\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd \uc21c\uc11c\ub85c \ud3c9\uac00\ub41c\ub2e4. \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790 \ud3c9\uac00\uc21c\uc11c\ub294 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. Example int i = 0 ; f ( ++ i , ++ i ); \uc774 \ud568\uc218 \ud638\ucd9c\uc740 f(0, 1) \ud639\uc740 f(1, 0) \uc77c \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc5b4\ub5a4 \uac83\uc774 \ub420\uc9c0\ub294 \uc54c \uc218 \uc5c6\ub2e4. \uae30\uc220\uc801\uc73c\ub85c\ub294, \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud574\uc57c \ud558\ub294\uc9c0 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. C++ 17\uc5d0\uc11c\ub294 \uc774 \ucf54\ub4dc\uac00 \ubbf8\uc815\uc758 \ud589\ub3d9\uc774 \uc544\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\uc804\ud788 \uc5b4\ub5a4 \uc778\uc790\uac00 \uba3c\uc800 \ud3c9\uac00\ub418\ub294\uc9c0 \ubd84\uba85\ud558\uc9c0 \uc54a\ub2e4. Example \uc911\ubcf5\uc815\uc758\ub41c \uc5f0\uc0b0\uc790\ub4e4\uc740 \ud3c9\uac00\uc21c\uc11c \ubb38\uc81c\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4: f1 () -> m ( f2 ()); // m( f1(), f2() ) cout << f1 () << f2 (); // operator<<( operator<<( cout, f1() ), f2() ) C++ 17\uc5d0\uc11c \uc774 \uc608\uc2dc\ub294 \uae30\ub300\ud55c \ub300\ub85c \ub3d9\uc791\ud55c\ub2e4 (\uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud3c9\uac00\ub41c\ub2e4). \uadf8\ub9ac\uace0 = \uc758 \ubc14\uc778\ub529\uc774 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uc218\ud589\ub418\ub294 \uac83\ucc98\ub7fc \ub300\uc785\uc740 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ud3c9\uac00\ub41c\ub2e4. f1 () = f2 (); // C++14 \uc5d0\uc11c\ub294 \ubbf8\uc815\uc758 \ud589\ub3d9; // C++17 \uc5d0\uc11c\ub294 f2()\uac00 f1()\ubcf4\ub2e4 \uba3c\uc800 \ud3c9\uac00\ub41c\ub2e4 Enforcement \uc88b\uc740 \ubd84\uc11d\uae30\ub97c \uc0ac\uc6a9\ud574 \ucc3e\uc744 \uc218 \uc788\ub2e4. ES.45: \uc774\uc720\ub97c \uc54c \uc218 \uc5c6\ub294 \uc0c1\uc218(magic constant)\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c; \uc0c1\uc9d5\uc801\uc778 \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ud45c\ud604\uc2dd\uc5d0 \ud3ec\ud568\ub41c \uc774\ub984\uc5c6\ub294 \uc0c1\uc218\ub294 \uac04\uacfc\ub418\uae30 \uc27d\uace0 \uc774\ud574\ud558\uae30 \uc5b4\ub835\ub2e4: Example for ( int m = 1 ; m <= 12 ; ++ m ) // don't: \uc0c1\uc218 12\ub294 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uac00? cout << month [ m ] << '\\n' ; 1\ub144\uc5d0 12\ub2ec\uc774 \uc22b\uc790\ub85c\ub9cc \ub418\uc5b4 \uc788\ub2e4\uba74 \uc774\ud574\uac00 \uc798 \uc548\ub420 \uac83\uc774\ub2e4. \ub354 \uc88b\uac8c \uace0\uce58\uba74: // 1..12\ub97c \uc0ac\uc6a9\ud574\uc11c 12\uac1c\uc6d4\uc744 \ud45c\ud604\ud55c\ub2e4 constexpr int first_month = 1 ; constexpr int last_month = 12 ; for ( int m = first_month ; m <= last_month ; ++ m ) // better cout << month [ m ] << '\\n' ; \uc544\uc608 \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\uba74 \ub354 \ub0ab\ub2e4: for ( auto m : month ) cout << m << '\\n' ; Enforcement \ucf54\ub4dc\uc5d0 \ub9ac\ud130\ub7f4\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. 0 , 1 , nullptr , \\n , \"\" \ub4f1 \uac00\ub2a5\ud55c \ubaa9\ub85d\uc740 \ud5c8\uc6a9\ud558\ub77c. ES.46: \ud0c0\uc785 \ubc94\uc704\ub97c \ucd95\uc18c\ud558\ub294 \ubcc0\ud658\uc744 \ud53c\ud558\ub77c Reason \uc815\ubcf4\ub97c \ud30c\uad34\ud558\uace0 \uc804\ud600 \uae30\ub300\ud558\uc9c0 \uc54a\uc740 \uac12\uc744 \uac00\uc9c0\uac8c \ud55c\ub2e4. Example, bad \uae30\ubcf8\uc801\uc778 \uc608\uc81c: double d = 7.9 ; int i = d ; // bad: \ucd95\uc18c \ubcc0\ud658: i\uac00 7\uc774 \ub41c\ub2e4 i = ( int ) d ; // bad: \uc774\ub807\uac8c \ud558\ub354\ub77c\ub3c4 \ucda9\ubd84\ud788 \ubd84\uba85\ud558\uc9c0 \uc54a\ub2e4 void f ( int x , long y , double d ) { char c1 = x ; // bad: narrowing char c2 = y ; // bad: narrowing char c3 = d ; // bad: narrowing } Note gsl\uc740 narrowing\uc744 \ud5c8\uc6a9\ud558\ub294 narrow_cast \uc640 \ubcc0\ud658\uc2dc \uac12\uc774 \ubc14\ub00c\uba74 \uc608\uc678\ub97c \ub358\uc9c0\ub294 narrow (\"narrow if\")\ub97c \uc81c\uacf5\ud55c\ub2e4: i = narrow_cast < int > ( d ); // OK (you asked for it): narrowing: i becomes 7 i = narrow < int > ( d ); // OK: throws narrowing_error \uc774 \uaddc\uce59\uc740 \ubd80\ub3d9 \uc18c\uc218\uc810 \ud0c0\uc785\uc758 \uc74c\uc218\ub97c \ubd80\ud638 \uc5c6\ub294 \uc815\uc218\ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \ub4f1\uc758 \uc190\uc2e4\uc788\ub294 \ud615\ubcc0\ud658\uae4c\uc9c0\ub3c4 \ud3ec\ud568\ud55c\ub2e4: double d = - 7.9 ; unsigned u = 0 ; u = d ; // BAD u = narrow_cast < unsigned > ( d ); // OK (you asked for it): u becomes 0 u = narrow < unsigned > ( d ); // OK: throws narrowing_error Enforcement \uc88b\uc740 \ubd84\uc11d\uae30\ub294 \ubc94\uc704\uac00 \ucd95\uc18c\ub418\ub294 \ubcc0\ud658\uc744 \ud0d0\uc9c0\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \ucd95\uc18c\ubcc0\ud658\uc744 \uc9c0\uc801\ud558\ub294 \uac83\uc740 \uc218\ub9ce\uc740 \uac70\uc9d3 \uc591\uc131(false positive)\ub85c \uc774\uc5b4\uc9c8 \uac83\uc774\ub2e4. \uc81c\uc548: \ubd80\ub3d9 \uc18c\uc218\uc810\uc5d0\uc11c \uc815\uc218\ub85c\uc758 \ubcc0\ud658\uc744 \uc9c0\uc801\ud55c\ub2e4 ( float -> char \uc774\ub098 double -> int \ub9cc \uc9c0\uc801\ud560\uc218\ub3c4 \uc788\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\uac00 \ud544\uc694\ud558\ub2e4) \ubaa8\ub4e0 long -> char \ubcc0\ud658\uc744 \uc9c0\uc801\ud55c\ub2e4. ( int -> char \ubcc0\ud658\uc740 \uc0c1\ub2f9\ud788 \uc77c\ubc18\uc801\uc774\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\uac00 \ud544\uc694\ud558\ub2e4) \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790\uc5d0\uc11c \ucd95\uc18c \ubcc0\ud658\uc774 \ubc1c\uc0dd\ud558\uba74 \ud2b9\ud788 \uc758\uc2ec\uc2a4\ub7fd\uac8c \uc0dd\uac01\ud55c\ub2e4 ES.47: 0 \ud639\uc740 NULL \ubcf4\ub2e4\ub294 nullptr \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131\uc758 \ubb38\uc81c\ub2e4. \uae30\ub300\ub97c \ubc97\uc5b4\ub098\uc9c0 \uc54a\uac8c \ud55c\ub2e4. nullptr \ub294 int \uc640 \ud63c\ub3d9\uc758 \uc5ec\uc9c0\uac00 \uc5c6\ub2e4. nullptr \ub294 \uc798 \uba85\uc138\ub41c (\uc544\uc8fc \uae4c\ub2e4\ub85c\uc6b4) \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \uadf8\ub7ec\ub2c8 NULL \ud639\uc740 0 \uc744 \uc0ac\uc6a9\ud558\uba74 \uc798\ubabb\ub420 \uc218 \uc788\ub294 \ud0c0\uc785 \ucd94\ub860 \uc0c1\ud669\uc5d0\uc11c \ub354 \uc798 \ub3d9\uc791\ud560 \uac83\uc774\ub2e4. Example \ucc38\uace0\ud558\ub77c: void f ( int ); void f ( char * ); f ( 0 ); // f(int) f ( nullptr ); // f(char*) Enforcement \ud3ec\uc778\ud130\uc5d0 0 , NULL \uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \ubcc0\ud658\ud560 \uc218 \uc788\uc73c\uba74 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub2e4. ES.48: \ud0c0\uc785 \ubcc0\ud658(cast)\uc744 \ud53c\ud558\ub77c Reason \uc798 \uc54c\ub824\uc9c4 \uc624\ub958\uc758 \uc6d0\uc778\uc774\ub2e4. \ucd5c\uc801\ud654\ub97c \uc2e0\ub8b0\ud560 \uc218 \uc5c6\uac8c \ub9cc\ub4e4\uc5b4 \ubc84\ub9b0\ub2e4. Example, bad double d = 2 ; auto p = ( long * ) & d ; auto q = ( long long * ) & d ; cout << d << ' ' << * p << ' ' << * q << '\\n' ; \uc774 \ucf54\ub4dc\ub294 \uc5b4\ub5a4 \uac12\uc744 \ucd9c\ub825\ud560\uae4c? The result is at best implementation defined. \ud544\uc790\uc758 \ud658\uacbd\uc5d0\uc11c\ub294 \uc774\ub7f0 \uacb0\uacfc\uac00 \ub098\uc628\ub2e4 2 0 4611686018427387904 \uc544\ub798\uc758 \ub0b4\uc6a9\uc744 \ub354\ud558\uba74, * q = 666 ; cout << d << ' ' << * p << ' ' << * q << '\\n' ; \uc774\ub7f0 \uacb0\uacfc\uac00 \ub098\uc628\ub2e4 3.29048e-321 666 666 \ub180\ub77c\uc6b4\uac00? \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \ud06c\ub798\uc2dc\ub098 \uc0dd\uae30\uc9c0 \uc54a\uc740\uac8c \ub2e4\ud589\uc774\ub2e4. Note \ud0c0\uc785 \ubcc0\ud658\uc744 \uc791\uc131\ud558\ub294 \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc790\uc2e0\uc774 \ubb34\uc5c7\uc744 \ud558\uace0\uc788\ub294\uc9c0 \uc548\ub2e4\uace0 \uc0dd\uac01\ud55c\ub2e4. \ub610\ub294 \uac12\uc744 \uc0ac\uc6a9\ud560\ub54c \uc77c\ubc18\uc801\uc778 \uaddc\uce59\ub4e4\uc744 \uc811\uc5b4\ub450\uae30\ub3c4 \ud55c\ub2e4. \uc911\ubcf5\uc815\uc758 \uc120\ud0dd(overload resolution)\uc774\ub098 \ud15c\ud50c\ub9bf \uc2e4\uccb4\ud654(instantiation)\ub294 \ubcf4\ud1b5 \uc778\uc790 \ud0c0\uc785\uc774 \uaf2d \ub9de\ub294 \ud568\uc218\ub97c \uace8\ub77c\ub0b8\ub2e4. \uadf8\ub7f0 \ud568\uc218\uac00 \uc5c6\ub2e4\uba74, \uc5b4\uca4c\uba74 \uace0\uccd0\uc11c(local fix) \uc801\uc6a9\ud560 \ud544\uc694\uac00 \uc788\uc744\uc9c0\ub3c4 \ubaa8\ub974\uc9c0\ub9cc, \uc624\ub958\uac00 \ub41c\ub2e4. Note \ud615\ubcc0\ud658\uc740 \uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc5d0 \uaf2d \ud544\uc694\ud558\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub514\ubc14\uc774\uc2a4 \ub808\uc9c0\uc2a4\ud130\uc758 \uc8fc\uc18c\ub97c \ud3ec\uc778\ud130\ub85c \uc5bb\uc5b4 \uc62c \ub54c\uc774\ub2e4. \uadf8\ub7ec\ub098 \ub108\ubb34 \ub0a8\uc6a9\ud558\ub294 \ubc14\ub78c\uc5d0 \ub9ce\uc740 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\ub3c4 \uc0ac\uc2e4\uc774\ub2e4. Note \ud615\ubcc0\ud658\uc744 \ub108\ubb34 \ub9ce\uc774 \uc4f4\ub2e4\uace0 \uc0dd\uac01\ub41c\ub2e4\uba74 \uc124\uacc4\uc5d0 \uadfc\ubcf8\uc801\uc778 \ubb38\uc81c\uac00 \uc788\uc744\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. Exception (void) \ub85c \ud0c0\uc785\uc744 \ubcc0\ud658\ud558\ub294 \uac83\uc740 [nodiscard]] \uacbd\uace0\ub97c \ub9c9\uae30 \uc704\ud574 \ud45c\uc900\uc5d0\uc11c \ud5c8\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \uc544\ub2c8\ub2e4. [[nodiscard]] \uc18d\uc131\uc774 \uc788\ub294 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uba74\uc11c \ubc18\ud658 \uacb0\uacfc\ub97c \ubc84\ub9ac\uae30\ub97c \uc6d0\ud55c\ub2e4\uba74, \uc6b0\uc120 \uadf8 \uc0dd\uac01\uc774 \uc815\ub9d0 \uc88b\uc740 \uc0dd\uac01\uc778\uc9c0 \uc9c4\uc9c0\ud558\uac8c \uace0\ubbfc\ud558\ub77c (\ubb34\uc5c7\ubcf4\ub2e4 \ud568\uc218\uc758 \ubc18\ud658 \ud0c0\uc785\uc5d0 [[nodiscard]] \ub97c \uc791\uc131\ud55c\ub370\ub294 \ubcf4\ud1b5 \ud0c0\ub2f9\ud55c \uc774\uc720\uac00 \uc788\ub2e4), \ud558\uc9c0\ub9cc \ub2f9\uc2e0\uc774 \uac12\uc744 \ubc84\ub824\ub3c4 \uc801\uc808\ud558\ub2e4\uace0 \uc0dd\uac01\ud558\uace0, \ub2f9\uc2e0\uacfc \ud568\uaed8 \ucf54\ub4dc\ub97c \ub9ac\ubdf0\ud55c \uc0ac\ub78c\ub4e4\uc774 \ub3d9\uc758\ud55c\ub2e4\uba74 (void) \ub97c \uc368\uc11c \uacbd\uace0\ub97c \uc5c6\uc560\ub77c. Alternatives \ud0c0\uc785 \ubcc0\ud658\uc740 \ub110\ub9ac (\uc798\ubabb) \uc0ac\uc6a9\ub418\uace0 \uc788\ub2e4. \ubaa8\ub358 C++\uc740 \uaddc\uce59\uc744 \ub450\uace0 \uc5ec\ub7ec \ubc29\ubc95\uc73c\ub85c \ud0c0\uc785 \ubcc0\ud658\uc774 \ud544\uc694 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud55c\ub2e4 std::variant \uc744 \uc0ac\uc6a9\ud55c\ub2e4 \ud3ec\uc778\ud130 \ud0c0\uc785 \uac04\uc758 \uc798 \uc815\uc758\ub418\uace0, \uc548\uc804\ud558\uace0, \ubb35\uc2dc\uc801\uc778 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud55c\ub2e4 Enforcement [[nodiscard]] \ub85c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc81c\uc678\ud558\uace0 C-\uc2a4\ud0c0\uc77c \ud0c0\uc785 \ubcc0\ud658\uc744 \uc5c6\uc560\ub3c4\ub85d \uac15\uc81c\ud55c\ub2e4 \ud568\uc218 \ud615\ud0dc\ub85c \ubcc0\ud658\ud558\ub294 \uc77c\uc774 \ube48\ubc88\ud558\uba74 \uacbd\uace0\ud558\ub77c('\ub9ce\uc774' \ud558\ub294 \uc2dc\uc810\uc5d0\uc11c \ubd84\uba85 \ubb38\uc81c\uac00 \uc788\ub2e4) \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc740 reinterpret_cast \ub97c \uae08\uc9c0\ud55c\ub2e4 \ud3ec\uc778\ud130 \ud0c0\uc785 \uac04\uc758 \ub3d9\uc77c \ud0c0\uc785 \ud615\ubcc0\ud658 \uc740 \uacbd\uace0\ud558\ub77c \ud3ec\uc778\ud130\uac00 \ubb35\uc2dc\uc801 \uc73c\ub85c \ubcc0\ud658\ub420 \uc218 \uc788\uc73c\uba74 \uacbd\uace0\ud55c\ub2e4 ES.49: \ud0c0\uc785 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \ubbf8\ub9ac \uc815\uc758\ub41c \ubc29\ubc95\uc73c\ub85c \ubcc0\ud658(named cast)\ud558\ub77c Reason \uac00\ub3c5\uc131. \uc624\ub958 \uc608\ubc29. Named cast\ub4e4\uc740 C \uc2a4\ud0c0\uc77c\uc774\ub098 \ud568\uc218\ud615 \ud615\ubcc0\ud658\ubcf4\ub2e4 \ub354 \uad6c\uccb4\uc801\uc774\uba70, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc77c\ubd80 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. C \uc2a4\ud0c0\uc77c \ubcc0\ud658: (int) a \ud568\uc218\ud615 \ubcc0\ud658: int(a) Named cast\uc758 \ubaa9\ub85d: static_cast const_cast reinterpret_cast dynamic_cast std::move // move(x) \ub294 x \uc5d0 \ub300\ud55c r-value \ucc38\uc870\ub97c \ubc18\ud658\ud55c\ub2e4 std::forward // forward(x) \ub294 x \uc5d0 \ub300\ud55c r-value \ucc38\uc870\ub97c \ubc18\ud658\ud55c\ub2e4 gsl::narrow_cast // narrow_cast<T>(x) \ub294 static_cast<T>(x) \uc640 \ub3d9\uc77c\ud558\ub2e4 gsl::narrow // narrow<T>(x) \ub294 static_cast<T>(x) \uc640 \ub3d9\uc77c\ud558\uba70, \ub9cc\uc57d static_cast<T>(x) == x \uac00 \uc544\ub2c8\uba74 \uc608\uc678 narrowing_error \ub97c \ub358\uc9c4\ub2e4 Example class B { /* ... */ }; class D { /* ... */ }; template < typename D > D * upcast ( B * pb ) { D * pd0 = pb ; // error: B* \uc5d0\uc11c D*\ub85c \ubb35\uc2dc\uc801 \ubcc0\ud658\ud560 \uc218 \uc5c6\ub2e4 D * pd1 = ( D * ) pb ; // \uc801\ubc95\ud558\uc9c0\ub9cc, \uc5b4\ub5bb\uac8c \ub418\uaca0\ub294\uac00? D * pd2 = static_cast < D *> ( pb ); // error: D \ub294 B\uc758 \ud558\uc704 \ud0c0\uc785\uc774 \uc544\ub2c8\ub2e4 D * pd3 = reinterpret_cast < D *> ( pb ); // OK: \uc815\ub9d0 \uad1c\ucc2e\ub2e4\uba74! D * pd4 = dynamic_cast < D *> ( pb ); // OK: nullptr\ub97c \ubc18\ud658\ud55c\ub2e4 // ... } \uc774 \uc608\uc2dc\ub294 D \uac00 B \uc758 \ud558\uc704 \ud0c0\uc785\uc774\uba74\uc11c, \ub204\uad70\uac00 \uacc4\uce35 \uad6c\uc870\ub97c \ub9ac\ud329\ud1a0\ub9c1 \ud588\uc744\ub54c \ubc1c\uc0dd\ud55c \uc2e4\uc81c \ubc84\uadf8\ub4e4\uc744 \uc885\ud569\ud55c \uac83\uc774\ub2e4. C \uc2a4\ud0c0\uc77c \ud0c0\uc785\ubcc0\ud658\uc774 \uc704\ud5d8\ud55c \uc774\uc720\ub294 \uc5b4\ub5a4 \ud615\ud0dc\ub85c\uc758 \ubcc0\ud658\ub3c4 \uc218\ud589\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub294 \uc2e4\uc218\ub85c\ubd80\ud130 \uc6b0\ub9ac\ub97c \ubcf4\ud638\ud574\uc8fc\uc9c0 \uc54a\ub294\ub2e4 (\uc9c0\uae08\ub3c4, \uc55e\uc73c\ub85c\ub3c4). Note \uc815\ubcf4\uc758 \uc190\uc2e4\uc774 \uc5c6\ub294 \ud0c0\uc785 \ubcc0\ud658\uc758 \uacbd\uc6b0 (\uac00\ub839 float \uc5d0\uc11c double \ub85c, \ud639\uc740 int32 \uc5d0\uc11c int64 \ub85c \ubcc0\ud658\ud558\ub294 \uacbd\uc6b0), {} \ucd08\uae30\ud654\ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4. double d { some_float }; int64_t i { some_int32 }; \uc774 \ucf54\ub4dc\ub294 \ud0c0\uc785 \ubcc0\ud658\uc744 \uc758\ub3c4\ud588\ub2e4\ub294 \uac83\uc774 \ubd84\uba85\ud788 \ub4dc\ub7ec\ub098\uace0 \uc815\ud655\ub3c4\ub97c \uc783\uc744 \uc218 \uc788\ub294 \ubcc0\ud658\uc744 \uc608\ubc29\ud55c\ub2e4. (\uc608\ub97c \ub4e4\uc790\uba74 \uc774\ub7f0 \ucf54\ub4dc\uc5d0\uc11c float \ub97c double \ub85c \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc740 \ucef4\ud30c\uc77c \uc624\ub958\uac00 \ub41c\ub2e4) Note reinterpret_cast \uac00 \ud544\uc218\uc801\uc77c \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ubcf8\uc9c8\uc801\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\ud558\uc9c0\ub294 \uc54a\ub2e4 (\uae30\uacc4 \uc8fc\uc18c\ub97c \ud3ec\uc778\ud130\ub85c \ubc14\uafbc\ub2e4\ub358\uac00): auto p = reinterpret_cast < Device_register > ( 0x800 ); // \ud544\uc5f0\uc801\uc73c\ub85c \uc704\ud5d8\ud558\ub2e4 Enforcement C\uc2a4\ud0c0\uc77c, \ud568\uc218\ud615 \ud615\ubcc0\ud658\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc740 reinterpret_cast \ub97c \uae08\uc9c0\ud55c\ub2e4 \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc740 static_cast \uac00 \uc0b0\uc220 \ud0c0\uc785\uac04 \ubcc0\ud658\uc5d0 \uc0ac\uc6a9\ub418\uba74 \uacbd\uace0\ud55c\ub2e4 ES.50: const \ub97c \uc81c\uac70\ud558\uc9c0 \ub9c8\ub77c Reason const \ub97c \uac70\uc9d3\ub9d0\ub85c \ub9cc\ub4e0\ub2e4. \ub300\uc0c1 \ubcc0\uc218\uac00 \uc815\ub9d0\ub85c const \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74, const \ub97c \uc81c\uac70\ud55c \uacb0\uacfc\ub294 \ubbf8\uc815\uc758 \ud589\ub3d9(undefined behavior)\uc774 \ub41c\ub2e4. Example, bad void f ( const int & i ) { const_cast < int &> ( i ) = 42 ; // BAD } static int i = 0 ; static const int j = 0 ; f ( i ); // silent side effect f ( j ); // undefined behavior Example \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 \ucf54\ub4dc \uc911\ubcf5\uc744 \ud53c\ud558\uace0\uc790 const_cast \uc5d0 \uc758\uc874\ud558\uace0 \uc2f6\uc744\uc218\ub3c4 \uc788\ub2e4. \uc774\ub54c\ub294 \ub450 \ud568\uc218\uac00 \uad6c\ud604\uc740 \uc720\uc0ac\ud558\uc9c0\ub9cc \uc624\uc9c1 const \ubd80\ubd84\ub9cc \ub2e4\ub97c \uac83\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4: class Bar ; class Foo { public : // BAD, duplicates logic Bar & get_bar () { /* complex logic around getting a non-const reference to my_bar */ } const Bar & get_bar () const { /* same complex logic around getting a const reference to my_bar */ } private : Bar my_bar ; }; \ub300\uc2e0, \uad6c\ud604 \ucf54\ub4dc\ub97c \uacf5\uc720\ud558\ub3c4\ub85d \ud558\ub77c. \ubcf4\ud1b5\uc758 \uacbd\uc6b0, \ube44- const \ud568\uc218\uc5d0\uc11c const \ud568\uc218\ub97c \ud638\ucd9c\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uad6c\ud604\uc5d0 \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc774 \uc788\ub2e4\uba74 \uc5ec\uc804\ud788 const_cast \ub97c \uc0ac\uc6a9\ud558\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud328\ud134\uc744 \uc4f0\uac8c \ub420 \uac83\uc774\ub2e4: class Foo { public : // not great, non-const calls const version but resorts to const_cast Bar & get_bar () { return const_cast < Bar &> ( static_cast < const Foo &> ( * this ). get_bar ()); } const Bar & get_bar () const { /* the complex logic around getting a const reference to my_bar */ } private : Bar my_bar ; }; \uc774 \ud328\ud134\uc740 \uc815\ud655\ud558\uac8c \uc0ac\uc6a9\ub418\uc5c8\uc744 \ub54c\ub294 \ud638\ucd9c\uc790\uac00 \ube44- const \uac1c\uccb4\ub97c \ud1b5\ud574 \ud638\ucd9c\ud558\uae30 \ub54c\ubb38\uc5d0 \uc548\uc804\ud558\uc9c0\ub9cc, \uc548\uc804\uc131\uc774 \uac80\uc0ac\uae30\uc758 \uaddc\uce59\ub9cc\ud07c \uc790\uc5f0\uc2a4\ub7fd\uac8c \uac15\uc81c\ub418\uae30\ub294 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 \uc774\uc0c1\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \uc774\ub7f0 \ud328\ud134 \ub300\uc2e0, \uacf5\ud1b5\ub418\ub294 \ucf54\ub4dc\ub294 \uacf5\ud1b5\ub41c \ubcf4\uc870 \ud568\uc218(helper function)\uc5d0 \ubc30\uce58\ud558\ub77c -- \uadf8\ub9ac\uace0 const \ub97c \ud0c0\uc785 \ucd94\ub860\uc5d0\uc11c \ucc3e\uc544\ub0b4\ub3c4\ub85d \ud15c\ud50c\ub9bf\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub77c. \uc774\ub294 const_cast \uc774 \uc644\uc804\ud788 \ud544\uc694\uc5c6\uac8c \ub9cc\ub4e0\ub2e4: class Foo { public : // good Bar & get_bar () { return get_bar_impl ( * this ); } const Bar & get_bar () const { return get_bar_impl ( * this ); } private : Bar my_bar ; template < class T > // good, deduces whether T is const or non-const static auto get_bar_impl ( T & t ) -> decltype ( t . get_bar ()){ // the complex logic around getting // a possibly-const reference to my_bar } }; Exception const -\ubd80\uc815\ud655(incorrect)\ud55c \ud568\uc218\ub97c \ud638\ucd9c\ud560\ub54c const \ub97c \uc81c\uac70\ud574\uc57c \ud560\uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7f0 \ud568\uc218\ub294 \ud55c \uc9c0\uc810\uc5d0\uc11c inline const -\uc815\ud655\ud55c \ud568\uc218\ub85c \uac10\uc2f8\uc11c \uc0ac\uc6a9\ud558\ub77c. Example \ubcf4\ud1b5 const \ub97c \uc5c6\uc560\ubc84\ub9ac\ub294 \uc774\uc720\ub294 \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \uac1d\uccb4 \uc18d\uc5d0 \uc788\ub294 \uc77c\uc2dc\uc801\uc778 \uc815\ubcf4\ub97c \ubcc0\uacbd\ud558\uae30 \uc704\ud574\uc11c\uc774\ub2e4. \uc608\ub97c \ub4e4\uba74 \uce90\uc2f1\uac12, \uc784\uc2dc\uacc4\uc0b0\uac12, \uc120\uacc4\uc0b0\uac12 \ub4f1\uc774\ub2e4. \uc774\ub7f0 \uac12\uc740 const_cast \ub97c \uc4f0\ub294 \uac83\ubcf4\ub2e4 mutable \uc774\ub098 \uac04\uc811\uc801\uc778 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \uc27d\uac8c \ucc98\ub9ac\ud560 \uc218 \uc788\ub2e4. \ube44\uc6a9\uc774 \ub4dc\ub294 \ucc98\ub9ac\ub97c \uac70\uccd0\uc11c \uacc4\uc0b0\ud55c \uacb0\uacfc\ub97c \uc720\uc9c0\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcf4\ub77c: int compute ( int x ); // x\ub85c\ubd80\ud130 \uac12\uc744 \uacc4\uc0b0\ud55c\ub2e4; // \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4 class Cache { // int->int \ucc98\ub9ac\uc5d0\uc11c \uce90\uc2dc\ub97c \uad6c\ud604\ud55c \ud0c0\uc785 public : pair < bool , int > find ( int x ) const ; // x\ub97c \uc704\ud55c \uac12\uc774 \uc788\ub294\uac00? void set ( int x , int v ); // x\ub97c \uc704\ud55c \uac12 y\ub97c \ub9cc\ub4e0\ub2e4 // ... private : // ... }; class X { public : int get_val ( int x ) { auto p = cache . find ( x ); if ( p . first ) return p . second ; int val = compute ( x ); cache . set ( x , val ); // x\uc5d0 \uac12\uc744 \ub123\ub294\ub2e4 return val ; } // ... private : Cache cache ; }; \uc5ec\uae30\uc11c get_val() \ub294 \ub17c\ub9ac\uc801\uc73c\ub85c\ub294 \uc0c1\uc218\uc774\ub2e4. \ub530\ub77c\uc11c const \uba64\ubc84\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \uc774\ub807\uac8c \ud558\ub824\uba74 \uc5ec\uc804\ud788 cache \ub97c \ubcc0\uacbd\ud574\uc57c \ud55c\ub2e4. \uc77c\ubd80\ub294 \uadf8\ub7ec\uc9c0 \uc54a\uace0 const_cast \ub97c \uc0ac\uc6a9\ud55c\ub2e4: class X { // \ud0c0\uc785 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud55c \uc758\uc2ec\uc2a4\ub7ec\uc6b4 \ud574\uacb0\ubc29\ubc95 public : int get_val ( int x ) const { auto p = cache . find ( x ); if ( p . first ) return p . second ; int val = compute ( x ); const_cast < Cache &> ( cache ). set ( x , val ); // \ucf54\ub4dc\uac00 \uc9c0\uc800\ubd84\ud558\ub2e4 return val ; } // ... private : Cache cache ; }; \ub2e4\ud589\ud788, \ub354 \ub098\uc740 \ud574\uacb0\ucc45\uc774 \uc788\ub2e4: cache \uac00 const \uac1c\uccb4\uc5ec\ub3c4 \ubcc0\uacbd \uac00\ub2a5\ud558\ub2e4\uace0 \ud45c\uae30(state)\ud558\ub294 \uac83\uc774\ub2e4: class X { // \ub354 \ub098\uc740 \ud574\uacb0\ubc29\ubc95 public : int get_val ( int x ) const { auto p = cache . find ( x ); if ( p . first ) return p . second ; int val = compute ( x ); cache . set ( x , val ); return val ; } // ... private : mutable Cache cache ; }; \ub2e4\ub978 \ubc29\ubc95\uc740 cache \uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \ubcf4\uad00\ud558\ub294 \uac83\uc774\ub2e4: class X { // OK, \ud558\uc9c0\ub9cc \uc870\uae08 \uc9c0\uc800\ubd84\ud558\ub2e4 public : int get_val ( int x ) const { auto p = cache -> find ( x ); if ( p . first ) return p . second ; int val = compute ( x ); cache -> set ( x , val ); return val ; } // ... private : unique_ptr < Cache > cache ; }; \uc774 \ud574\uacb0\ucc45\uc740 \uad49\uc7a5\ud788 \uc720\uc5f0\ud558\uc9c0\ub9cc, cache \ub85c \uac00\ub9ac\ud0a4\ub294 \uac1c\uccb4\uc758 \uba85\uc2dc\uc801\uc778 \uc0dd\uc131\uacfc \uc18c\uba78\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. (\uc544\ub9c8 \uadf8 \ucf54\ub4dc\ub294 X \uc758 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0 \uc704\uce58\ud560 \uac83\uc774\ub2e4). \uba40\ud2f0\uc2a4\ub808\ub4dc \ucf54\ub4dc\uc5d0\uc11c cache \uc5d0 \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \ubc1c\uc0dd\ud558\uba74 std::mutex \ub97c \uc0ac\uc6a9\ud574 \ubcf4\ud638\ud574\uc57c \ud55c\ub2e4. Enforcement const_cast \ub97c \uc9c0\uc801\ud55c\ub2e4. \uc774 \uaddc\uce59\uc740 \ud0c0\uc785 \uc548\uc815\uc131 \ubd84\uc11d \uacfc \uad00\ub828 \uc788\ub2e4 ES.55: \ubc94\uc704 \uac80\uc0ac\uac00 \ud544\uc694\uc5c6\uac8c \ud558\ub77c Reason \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud560 \uc18c\uc9c0\uac00 \uc5c6\ub2e4 (\ub610\ud55c \ub354 \ube60\ub974\uac8c \uc2e4\ud589\ub420 \uc218 \uc788\ub2e4). Example for ( auto & x : v ) // print all elements of v cout << x << '\\n' ; auto p = find ( v , x ); // find x in v Enforcement \uba85\uc2dc\uc801\uc778 \ubc94\uc704\uac80\uc0ac\ub97c \ucc3e\uc544\uc11c \uc801\uc808\ud55c \ub300\uc548\uc744 \uc81c\uc2dc\ud55c\ub2e4. ES.56: std::move() \ub294 \uac1c\uccb4\ub97c \ub2e4\ub978 \uc720\ud6a8\ubc94\uc704\ub85c \uba85\uc2dc\uc801\uc73c\ub85c \uc62e\uaca8\uc57c \ud560\ub54c\ub9cc \uc0ac\uc6a9\ud558\ub77c Reason \ubcf5\uc81c\ub97c \ub9c9\uace0 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud574 \ubcf5\uc0ac\ubcf4\ub2e4\ub294 \uc774\ub3d9\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub3d9 \uc5f0\uc0b0\uc740 \ubcf4\ud1b5 \ube48 \uac1c\uccb4\ub97c \ub0a8\uae34\ub2e4 ( C.64 ). \uc774\ub294 \uae30\ub300\ubc16\uc758 \uacb0\uacfc \ud639\uc740 \uc704\ud5d8\uc73c\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74 lvalue\ub85c\ubd80\ud130 \uc774\ub3d9\ud558\ub294 \uac83\uc744 \ud53c\ud558\ub824 \ud574\uc57c\ud55c\ub2e4 (lvalue\uc5d0 \ub098\uc911\uc5d0 \uc811\uadfc\ud560 \uc218\ub3c4 \uc788\ub2e4). Notes \uc774\ub3d9\uc740 \uc62e\uaca8\uc9c0\ub294 \ucabd(source)\uc774 rvalue\uc774\uba74 \ubb35\uc2dc\uc801\uc73c\ub85c \uc77c\uc5b4\ub09c\ub2e4 (\uc608\ucee8\ub300, \ud568\uc218\uc758 \uacb0\uacfc\ucc98\ub7fc return \ub41c \uac12), \uadf8\ub7ec\ub2c8 \uba85\uc2dc\uc801\uc73c\ub85c move \ub97c \ud574\uc11c \ucf54\ub4dc\ub97c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4 \ud544\uc694\ub294 \uc5c6\ub2e4. \ub300\uc2e0, \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc9e7\uc740 \ud568\uc218\ub97c \uc791\uc131\ud558\uace0 \ud568\uc218\uc758 \ubc18\ud658\uacfc \ud638\ucd9c\uc790\uc758 \ubc18\ud658\uac12\uc744 \ubc1b\ub294 \ubd80\ubd84\uc774 \uc790\uc5f0\uc2a4\ub7fd\uac8c \ucd5c\uc801\ud654\ub418\ub3c4\ub85d \ud558\ub77c. \uc77c\ubc18\uc801\uc73c\ub85c, \uc774 \ubb38\uc11c\uc758 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub974\ub294 \uac83(\ubcc0\uc218\uc758 \uc720\ud6a8\ubc94\uc704\uac00 \ubd88\ud544\uc694\ud558\uac8c \ucee4\uc9c0\uc9c0 \uc54a\uac8c \ud558\uac70\ub098, \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc9e7\uc740 \ud568\uc218\ub97c \uc791\uc131\ud558\ub294 \uac83\uc744 \ud3ec\ud568\ud55c\ub2e4)\uc740 \ub300\ubd80\ubd84\uc758 \uba85\uc2dc\uc801\uc778 std::move \ub97c \ud544\uc694\uc5c6\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uba85\uc2dc\uc801\uc73c\ub85c move \ud558\ub294 \uac83\uc740 \uac1c\uccb4\ub97c \ub2e4\ub978 \uc720\ud6a8\ubc94\uc704\ub85c \uc774\ub3d9\uc2dc\ud0ac \ub54c \ud544\uc694\ud558\ub2e4. \ud2b9\ud788 \uadf8 \uac1c\uccb4\ub97c \uc544\ub798 \uc608\uc2dc\ucc98\ub7fc \"sink\" \ud568\uc218\ub85c \ub118\uae30\uac70\ub098 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4(\uc774\ub3d9 \uc0dd\uc131, \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790, \uadf8\ub9ac\uace0 swap \uc5f0\uc0b0)\uc744 \ud638\ucd9c\ud560 \ub54c \ud544\uc694\ud558\ub2e4. Example, bad void sink ( X && x ); // sink \ud568\uc218\uac00 x\uc758 \uc18c\uc720\uad8c\uc744 \uac00\uc838\uac04\ub2e4 void user () { X x ; // error: lvalue \ucc38\uc870\ub294 rvalue \ucc38\uc870\uc5d0 \ubc14\uc778\ub529\ub418\uc9c0 \uc54a\ub294\ub2e4 sink ( x ); // OK: sink \uac00 x\uc758 \ub0b4\uc6a9\uc744 \uac00\uc838\uac14\uc73c\ubbc0\ub85c, x\ub294 \ube44\uc5b4\uc788\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4 sink ( std :: move ( x )); // ... // probably a mistake use ( x ); } \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 std::move() \ub294 && \ub97c \uc0ac\uc6a9\ud558\ub294 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc2e4\ud589\uc778\uc790\ub97c \ub118\uae38\ub54c \uc0ac\uc6a9\ud55c\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \ub4a4\uc5d0\ub294 \ub300\uc0c1 \uac1c\uccb4\uac00 \uc774\ub3d9\ud588\ub2e4\uace0 \uac00\uc815\ud558\uba70 ( C.64 \ub97c \ud568\uaed8 \ubcf4\ub77c), \uc0c8\ub85c\uc6b4 \uac12\uc744 \uadf8 \uac1c\uccb4\uc5d0 \uc4f0\uae30 \uc804\uae4c\uc9c0\ub294 \uc0c1\ud0dc\ub97c \uc77d\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4. void f () { string s1 = \"supercalifragilisticexpialidocious\" ; string s2 = s1 ; // ok, \uc0ac\ubcf8(copy)\uc744 \uc0ac\uc838\uac04\ub2e4 assert ( s1 == \"supercalifragilisticexpialidocious\" ); // ok // bad, s1\uc758 \uac12\uc744 \ubcf4\uc874\ud558\uace0\uc790 \ud55c\ub2e4\uba74 \uc2e4\uc218\ud55c \uac83\uc774\ub2e4 string s3 = move ( s1 ); // bad, s1\uc774 \ubcc0\uacbd\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 assert\ub294 \uc2e4\ud328\ud560 \uac83\uc774\ub2e4. assert ( s1 == \"supercalifragilisticexpialidocious\" ); } Example void sink ( unique_ptr < widget > p ); // p\uc758 \uc18c\uc720\uad8c\uc744 sink()\uc5d0 \uc804\ub2ec\ud55c\ub2e4 void f () { auto w = make_unique < widget > (); // ... sink ( std :: move ( w )); // ok, give to sink() // ... sink ( w ); // Error: unique_ptr\ub294 \ubcf5\uc0ac\ud560 \uc218 \uc5c6\ub3c4\ub85d \uc138\uc2ec\ud558\uac8c \uc124\uacc4\ub418\uc5c8\ub2e4 } Notes std::move() \ub294 \uc2e4\uc81c\ub85c\ub294 && \ub85c \ud615\ubcc0\ud658\ud558\ub294 \uac83\uc774\ub2e4; \ub2e8\uc21c\ud788 \uc774 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uac83 \ub9cc\uc73c\ub85c\ub294 \uc544\ubb34\uac83\ub3c4 \uc774\ub3d9\uc2dc\ud0a4\uc9c0 \uc54a\ub294\ub2e4. \ub300\uc2e0 \uc778\uc790\ub85c \uc804\ub2ec\ub41c \uac1c\uccb4\ub97c \uc774\ub3d9\ud560\uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. C++ \uc5b8\uc5b4\ub294 \ud568\uc218\ub85c\ubd80\ud130\uc758 \ubc18\ud658\ucc98\ub7fc \uac1c\uccb4\ub97c \uc774\ub3d9\uc2dc\ud0ac \uc218 \uc788\ub294 \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0(common case)\ub4e4\uc5d0 \ub300\ud574 \uc774\ubbf8 \uc54c\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \ucd94\uac00\uc801\uc73c\ub85c std::move() \ub97c \uc0ac\uc6a9\ud574\uc11c \ucf54\ub4dc\ub97c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4 \ud544\uc694\ub294 \uc5c6\ub2e4. \"\uadf8\ub0e5 \ub354 \ud6a8\uc728\uc801\uc774\ub2e4\"\ub77c\uace0 \ub4e4\uc5c8\uae30 \ub54c\ubb38\uc5d0 std::move() \ub97c \uc0ac\uc6a9\ud574\uc11c\ub294 \uc808\ub300\ub85c \uc548\ub41c\ub2e4. \uc815\ubcf4\uac00 \uc5c6\ub294 \"\ud6a8\uc728\uc131\"\uc5d0 \ub300\ud55c \uc8fc\uc7a5\uc740 \ubbff\uc9c0 \ub9c8\ub77c(???). \uc774\uc720 \uc5c6\uc774 \ucf54\ub4dc\ub97c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uc9c0 \ub9c8\ub77c(??). Example, bad vector < int > make_vector () { vector < int > result ; // ... load result with data return std :: move ( result ); // bad; just write \"return result;\" } return move(local_variable); \uc640 \uac19\uc740 \ucf54\ub4dc\ub294 \uc808\ub300\ub85c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c, \uc5b8\uc5b4\ucc28\uc6d0\uc5d0\uc11c \uc774\ubbf8 \uadf8 \ubcc0\uc218\uac00 \uc774\ub3d9\uc758 \ub300\uc0c1\uc774 \ub41c\ub2e4\ub294 \uac83\uc744 \uc54c\uace0 \uc788\ub2e4. \ucf54\ub4dc\uc5d0 move \ub97c \uc368\ub193\ub294 \uac83\uc740 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc73c\uba70, \uc9c0\uc5ed \ubcc0\uc218\uc5d0 \ub300\ud55c \ucd94\uac00\uc801\uc778 \ucc38\uc870\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc77c\ubd80 \ucef4\ud30c\uc77c\ub7ec\ub4e4\uc758 \ubc18\ud658\uac12 \ucd5c\uc801\ud654(RVO: Return Value Optimization)\ub97c \ubc29\ud574(detrimental)\ud55c\ub2e4. Example, bad // bad; move\ub97c \uc791\uc131\ud558\uc9c0 \uc54a\uc544\ub3c4 \uc774\ub3d9 \uc758\ubbf8\uad6c\uc870\uac00 \uc801\uc6a9\ub41c\ub2e4 vector < int > v = std :: move ( make_vector ()); f \uac00 \uac12(by value)\uc744 \ubc18\ud658\ud55c\ub2e4\uba74, \uc808\ub300\ub85c x = move(f()); \ucc98\ub7fc \ubc18\ud658\ub418\ub294 \uac12\uc5d0 move \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uc5b8\uc5b4\ucc28\uc6d0\uc5d0\uc11c \ubc18\ud658 \uac12\uc774 \uc784\uc2dc \uac1c\uccb4\uc774\uba70, \uc774 \uac1c\uccb4\uac00 \uc774\ub3d9\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc774\ubbf8 \uc54c\uace0 \uc788\ub2e4. Example void mover ( X && x ) { call_something ( std :: move ( x )); // ok call_something ( std :: forward < X > ( x )); // bad, don't std::forward an rvalue reference call_something ( x ); // suspicious, why not std::move? } template < class T > void forwarder ( T && t ) { call_something ( std :: move ( t )); // bad, don't std::move a forwarding reference call_something ( std :: forward < T > ( t )); // ok call_something ( t ); // suspicious, why not std::forward? } Enforcement x \uac00 rvalue\uc774\uac70\ub098 \uc5b8\uc5b4\uc5d0\uc11c rvalue\ub85c \ucc98\ub9ac\ud560\ub54c std::move(x) \uac00 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4. return std::move(local_variable); \uac19\uc740 \ucf54\ub4dc\ub098 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\uc5d0\uc11c std::move(f()) \ub97c \ud3ec\ud568\ud55c\ub2e4 S&& \ub9e4\uac1c\ubcc0\uc218\ub97c \ubc1b\ub294 \ud568\uc218\uac00 lvalue\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud55c const S& \uc911\ubcf5\uc815\uc758\uac00 \uc5c6\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 std::move \ub85c \uc2e4\ud589\uc778\uc790\ub97c \uc804\ub2ec\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4. \ub9e4\uac1c\ubcc0\uc218\uc758 \ud0c0\uc785\uc774 X&& \uac00 \uc544\ub2c8\uac70\ub098, \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\uac00 T \uc774\uba74\uc11c T&& \ub85c \uc804\ub2ec\ud558\uc9c0 \uc54a\uac70\ub098, move\ub9cc \uac00\ub2a5\ud55c \ud0c0\uc785\uc758 \uac12\uc744 \ubc1b\ub294 \uacbd\uc6b0\ub294 \uc81c\uc678\ud55c\ub2e4 std::move \uac00 forwarding \ucc38\uc870( T \uac00 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785\uc77c\ub54c T&& \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9)\uc5d0 \uc801\uc6a9\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4. \ub300\uc2e0 std::forward \ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. std::move \uac00 rvalue \ucc38\uc870\uac00 \uc544\ub2cc \ubd80\ubd84\uc5d0 \uc0ac\uc6a9\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 (\uc774\uc804 \uaddc\uce59\uc5d0\uc11c forward\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \ucd94\uac00\ud55c \uc880 \ub354 \uc77c\ubc18\ud654\ub41c \uaddc\uce59\uc774\ub2e4) std::forward \uac00 rvalue \ucc38\uc870( X \uac00 \uc2e4\uc81c \ud0c0\uc785\uc77c \ub54c X&& \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9)\uc5d0 \uc0ac\uc6a9\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4. \ub300\uc2e0 std::move \ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. std::forward \uac00 forwarding \ucc38\uc870 \uc774\uc678\uc5d0 \uc0ac\uc6a9\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 (\uc774\uc804 \uaddc\uce59\uc5d0\uc11c move\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \ucd94\uac00\ud55c \uc880 \ub354 \uc77c\ubc18\ud654\ub41c \uaddc\uce59\uc774\ub2e4) Flag when an object is potentially moved from and the next operation is a const operation; there should first be an intervening non- const operation, ideally assignment, to first reset the object's value. ES.60: \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub294 \ud568\uc218 \uc678\ubd80\uc5d0\uc11c new \uc640 delete \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c Reason \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc \ub0b4\uc5d0\uc11c \uc9c1\uc811\uc801\uc778 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\ub294 \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc26c\uc6b0\uba70 \uc9c0\ub8e8(tedious)\ud558\ub2e4. Note \" new \ub97c \ub178\ucd9c\uc2dc\ucf1c\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c!\"\ub85c \uc54c\ub824\uc838\uc788\ub2e4 Example, bad void f ( int n ) { auto p = new X [ n ]; // n default constructed Xs // ... delete [] p ; } ... \uc5d0 delete \uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ub9cc\ub4dc\ub294 \ucf54\ub4dc\uac00 \uc788\uc744 \uc218\ub3c4 \uc788\ub2e4. See also R: \ub9ac\uc18c\uc2a4 \uad00\ub9ac Enforcement \uadf8\ub300\ub85c \ub178\ucd9c\ub41c new \uc640 delete \ub97c \uc9c0\uc801\ud55c\ub2e4. ES.61: \ubc30\uc5f4\uc740 delete[] , \ub2e8\uc77c \uac1c\uccb4\ub294 delete \ub97c \uc0ac\uc6a9\ud574\uc11c \ud574\uc81c\ud558\ub77c Reason C++\uc5b8\uc5b4\uac00 \uc694\uad6c\ud558\ub294 \uac83\uc774\uba70, \ub9ac\uc18c\uc2a4 \ud574\uc81c \uc624\ub958\uc640 \uba54\ubaa8\ub9ac \uc624\uc5fc(memory corruption) \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Example, bad void f ( int n ) { auto p = new X [ n ]; // n \uac1c\uc758 X\ub97c \uc0dd\uc131\ud55c\ub2e4 // ... delete p ; // error: p[] \ubc30\uc5f4\uc774 \uc544\ub2c8\ub77c p\uc758 \ub300\uc0c1\uc774 \ub418\ub294 \uccab\ubc88\uc9f8 \uac1c\uccb4\ub9cc \ud30c\uad34\ud55c\ub2e4, } Note \uc774 \uc608\uc81c\ub294 no naked new rule \ub97c \uc704\ubc18\ud560 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ub9ce\uc740 \ub2e4\ub978 \ubb38\uc81c\ub97c \uc57c\uae30\ud55c\ub2e4. Enforcement new , delete \uac00 \uac19\uc740 \uc601\uc5ed\ubc94\uc704\uc5d0 \uc788\ub2e4\uba74 \uc624\ub958\uc5ec\ubd80\ub97c \uc9c0\uc801\ud560 \uc218 \uc788\ub2e4 new , delete \uac00 \uc0dd\uc131\uc790/\uc18c\uba78\uc790 \uc548\uc5d0 \uc788\ub2e4\uba74 \uc624\ub958\uc5ec\ubd80\ub97c \uc9c0\uc801\ud560 \uc218 \uc788\ub2e4 ES.62: \uc11c\ub85c \ub2e4\ub978 \ubc30\uc5f4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \ube44\uad50\ud558\uc9c0 \ub9c8\ub77c Reason \uacb0\uacfc\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\ub2e4. Example, bad void f ( int n ) { int a1 [ 7 ]; int a2 [ 9 ]; if ( & a1 [ 5 ] < & a2 [ 7 ]) {} // bad: undefined if ( 0 < & a1 [ 5 ] - & a2 [ 7 ]) {} // bad: undefined } Note \ub354 \ub9ce\uc740 \ubb38\uc81c\uac00 \ub0b4\ud3ec\ub418\uc5b4 \uc788\ub2e4. Enforcement ??? ES.63: \ubcf5\uc0ac \uc190\uc2e4(slice)\uc774 \uc5c6\ub3c4\ub85d \ud558\ub77c Reason Slicing\uc774\ub780 \uac1c\uccb4\uc758 \uc77c\ubd80\ubd84\ub9cc\uc744 \uc0ac\uc6a9\ud574\uc11c \ub300\uc785\ud558\uac70\ub098 \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 -- \ub300\ubd80\ubd84 \uac1c\uccb4\ub294 \ubaa8\ub4e0 \uba64\ubc84\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uace0 \uc0dd\uac01\ud558\uba70 \uc791\uc131\ub418\uc5c8\uae30\uc5d0 \uc774\ub294 \uc624\ub958\ub85c \uc774\uc5b4\uc9c4\ub2e4. \ub4dc\ubb3c\uac8c\ub3c4 slicing\uc744 \uc2e0\uc911\ud558\uac8c \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc774 \ub180\ub77c\uc6b8\uc218\ub3c4 \uc788\ub2e4. Example class Shape { /* ... */ }; class Circle : public Shape { /* ... */ Point c ; int r ; }; Circle c {{ 0 , 0 }, 42 }; Shape s { c }; // Circle\uc758 Shape\ubd80\ubd84\uc744 \ubcf5\uc0ac\ud55c\ub2e4 \ubcf5\uc0ac\ud55c \uacb0\uacfc\ub294 c \uc758 \uc911\uc2ec\uc810\uacfc \ubc18\uc9c0\ub984\uc774 s \ub85c \ubcf5\uc0ac\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \ubb34\uc758\ubbf8\ud560 \uac83\uc774\ub2e4. \uc774 \ubb38\uc81c\ub97c \ub9c9\ub294 \ubc29\ubc95\uc740 \uc0c1\uc704 \ud074\ub798\uc2a4 Shape \uac00 \uc774\ub7f0 \ub3d9\uc791\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc791\uc131\ud558\ub294 \uac83\uc774\ub2e4 . Alternative \ubcf5\uc0ac \uc190\uc2e4\uc744 \uc758\ub3c4\ud588\ub2e4\uba74, \uadf8\ub7f0 \uc77c\uc744 \ud558\ub294 \uba85\uc2dc\uc801\uc778 \ucc98\ub9ac(operation)\ub97c \uc791\uc131\ud558\ub77c. \uc774\ub807\uac8c \ud558\ub294\uac83\uc774 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\ub4e4\uc774 \ud63c\ub780\uc744 \uacaa\uc9c0 \uc54a\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uc608\ub97c \ub4e4\uba74: class Smiley : public Circle { public : Circle copy_circle (); // ... }; Smiley sm { /* ... */ }; Circle c1 { sm }; // \uc774\uc0c1\uc801\uc73c\ub85c\ub294 Circle\uc758 \uc815\uc758\uc5d0 \uc758\ud574 \uae08\uc9c0(prevent)\ub418\uc5b4\uc57c \ud55c\ub2e4. Circle c2 { sm . copy_circle ()}; Enforcement \ubcf5\uc0ac \uc190\uc2e4\uc740 \uacbd\uace0\ud558\ub77c. ES.64: \uac1c\uccb4\ub97c \uc0dd\uc131\ud560 \ub54c\ub294 T{e} \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c Reason T{e} \uc0dd\uc131 \ubb38\ubc95\uc740 \uc0dd\uc131\uc790 \ud638\ucd9c\uc744 \uae30\ub300\ud55c\ub2e4\ub294 \uac83\uc744 \ubd84\uba85\ud558\uac8c \ub4dc\ub7ec\ub0b8\ub2e4. T{e} \uc0dd\uc131 \ubb38\ubc95\uc740 \ud0c0\uc785\uc758 \ucd95\uc18c \ubcc0\ud658(narrowing)\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. T{e} \ub294 \ud0c0\uc785 T \uc758 \uac1c\uccb4\ub97c \ud45c\ud604\uc2dd e \ub85c\ubd80\ud130 \uc0dd\uc131\ud558\ub294 \uc548\uc804\ud558\uace0 \ubc94\uc6a9\uc801\uc778 \uc720\uc77c\ud55c \ubc29\ubc95\uc774\ub2e4. \ud0c0\uc785 \ubcc0\ud658\uc744 \uc704\ud55c \ud45c\uae30\ub294 T(e) \uc640 (T)e \uc744 \uc0ac\uc6a9\ud558\uace0, \ub458 \uc911 \uadf8 \ubb34\uc5c7\ub3c4 \uc548\uc804\ud558\uac70\ub098 \ubc94\uc6a9\uc801\uc774\uc9c0 \uc54a\ub2e4. Example \uc5b8\uc5b4\uc758 \uae30\ubcf8(built-in) \ud0c0\uc785\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294, \uc774 \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud55c \uc0dd\uc131\uc740 \ucd95\uc18c \ubcc0\ud658\uacfc \uc7ac\ud574\uc11d(reinterpretation)\uc744 \uc608\ubc29\ud55c\ub2e4. void use ( char ch , int i , double d , char * p , long long lng ) { int x1 = int { ch }; // OK, but redundant int x2 = int { d }; // error: double->int narrowing; use a cast if you need to int x3 = int { p }; // error: pointer to->int; use a reinterpret_cast if you really need to int x4 = int { lng }; // error: long long->int narrowing; use a cast if you need to int y1 = int ( ch ); // OK, but redundant int y2 = int ( d ); // bad: double->int narrowing; use a cast if you need to int y3 = int ( p ); // bad: pointer to->int; use a reinterpret_cast if you really need to int y4 = int ( lng ); // bad: long long->int narrowing; use a cast if you need to int z1 = ( int ) ch ; // OK, but redundant int z2 = ( int ) d ; // bad: double->int narrowing; use a cast if you need to int z3 = ( int ) p ; // bad: pointer to->int; use a reinterpret_cast if you really need to int z4 = ( int ) lng ; // bad: long long->int narrowing; use a cast if you need to } \uc815\uc218\uc640 \ud3ec\uc778\ud130 \uc0ac\uc774\uc758 \ubcc0\ud658\uc5d0 T(e) \ud639\uc740 (T)e \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\uba74 \uad6c\ud604\uc5d0\ub530\ub77c \ub2ec\ub77c\uc9c8 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc815\uc218\uc640 \ud3ec\uc778\ud130\uc758 \ud06c\uae30\uac00 \ub2e4\ub978 \ud50c\ub7ab\ud3fc\uc5d0\uc11c\ub294 \uc4f8\uc218 \uc5c6\ub294(non-portable) \ucf54\ub4dc\uac00 \ub41c\ub2e4 Note \ud0c0\uc785 \ubcc0\ud658\uc744 \ud53c\ud558\ub77c (\uba85\uc2dc\uc801 \ud0c0\uc785 \ubcc0\ud658) \uadf8\ub9ac\uace0 \uac00\ub2a5\ud558\ub2e4\uba74 named cast\ub97c \uc0ac\uc6a9\ud558\ub77c . Note \ubaa8\ud638\ud558\ub2e4\uba74, T{e} \ud45c\uae30\uc5d0\uc11c T \ub97c \uc9c0\uc6cc\ubc84\ub9ac\uace0 \ud45c\ud604\uc2dd\ub9cc \ub0a8\uae38\uc218\ub3c4 \uc788\ub2e4. complex < double > f ( complex < double > ); auto z = f ({ 2 * pi , 1 }); Note \uac1c\uccb4 \uc0dd\uc131 \ud45c\uae30\ubc95\uc740 \uac00\uc7a5 \ubc94\uc6a9\uc801\uc778 \ucd08\uae30\ud654 \ud45c\uae30\ubc95\uc774\ub2e4 . Exception std::vector \uc640 \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\ub4e4\uc740 {} \ub97c \uc0dd\uc131\uc790\ub97c \uc704\ud55c \ud45c\uae30\ub85c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \uc124\uacc4\ub418\uc5c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c \uace0\ub824\ud574\ubcf4\ub77c: vector < string > vs { 10 }; // ten empty strings vector < int > vi1 { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; // ten elements 1..10 vector < int > vi2 { 10 }; // one element with the value 10 \uc5b4\ub5bb\uac8c \ud558\uba74 vector \uac00 10\uac1c\uc758 \uae30\ubcf8 \ucd08\uae30\ud654\ub41c int \ub97c \uac00\uc9c0\ub3c4\ub85d \ud560 \uc218 \uc788\uc744\uae4c? vector < int > v3 ( 10 ); // ten elements with value 0 \uc6d0\uc18c\uc758 \uc218\ub97c \uc0dd\uc131\uc790\uc5d0 \uc804\ub2ec\ud558\uae30 \uc704\ud574 {} \ub300\uc2e0 () \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc804\ud1b5\uc801\uc778 \ucf54\ub4dc\ub97c \ub530\ub978 \uac83\uc774\ub2e4 (1980\ub144\ub300 \ucd08\ubc18\uc73c\ub85c \uac70\uc2ac\ub7ec \uc62c\ub77c\uac04\ub2e4). \uc774\ub294 \ubc14\uafb8\uae30 \uc5b4\ub835\uc9c0\ub9cc, \uc124\uacc4 \uc624\ub958\ub77c\ub294 \uac83\uc740 \uc5ec\uc804\ud558\ub2e4: for a container where the element type can be confused with the number of elements, we have an ambiguity that must be resolved. \uc804\ud1b5\uc801\uc778 \ucf54\ub4dc\ub97c \ub530\ub77c\uc11c {10} \ub97c \ud574\uc11d\ud558\uba74 \ud558\ub098\uc758 \uc6d0\uc18c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\uc774\uace0, (10) \ub294 \ucee8\ud14c\uc774\ub108\uc758 \ud06c\uae30\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ucf54\ub4dc\uc5d0\uc11c \uc774\ub7f0 \uc2e4\uc218\uac00 \ubc18\ubcf5\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4. \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \ud45c\ud604\ud558\ub294 \ud0c0\uc785\uc744 \uc815\uc758\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\ub2e4: struct Count { int n ; }; template < typename T > class Vector { public : Vector ( Count n ); // n default-initialized elements Vector ( initializer_list < T > init ); // init.size() elements // ... }; Vector < int > v1 { 10 }; Vector < int > v2 { Count { 10 }}; Vector < Count > v3 { Count { 10 }}; // yes, there is still a very minor problem \ub0a8\uc740 \ubb38\uc81c\ub294 Count \uc5d0 \uc54c\ub9de\ub294 \uc774\ub984\uc744 \ucc3e\ub294 \uac83\uc774\ub2e4. Enforcement C \uc2a4\ud0c0\uc77c (T)e \ubcc0\ud658\uacfc \ud568\uc218\ud615 \ud0c0\uc785\ubcc0\ud658 T(e) \ub97c \uc9c0\uc801\ud55c\ub2e4 ES.65: \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740(invalid) \ud3ec\uc778\ud130\ub97c \uc5ed\ucc38\uc870\ud558\uc9c0 \ub9c8\ub77c Reason nullptr \ucc98\ub7fc \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\ub97c \uc5ed\ucc38\uc870\ud558\ub294 \uac83\uc740 \ubbf8\uc815\uc758 \ud589\ub3d9\uc774\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uc5ed\ucc38\uc870\ud558\ub294 \uadf8 \uc989\uc2dc \ud06c\ub798\uc2dc\uac00 \ubc1c\uc0dd\ud558\uac70\ub098, \uc798\ubabb\ub41c \uacb0\uacfc, \ud639\uc740 \uba54\ubaa8\ub9ac \ud30c\uad34(corruption)\uac00 \uc77c\uc5b4\ub09c\ub2e4. Note \uc774 \uaddc\uce59\uc740 \uba85\ubc31\ud558\uace0 \uc798 \uc54c\ub824\uc9c4 \uc5b8\uc5b4 \uaddc\uce59\uc774\uc9c0\ub9cc, \ub530\ub974\uae30 \uc5b4\ub835\ub2e4. \ud070 \ubd80\ub2f4(overhead)\uc5c6\uc774 \uc774 \uaddc\uce59\uc744 \uc900\uc218\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc88b\uc740 \ucf54\ub529\uc2a4\ud0c0\uc77c, \ub77c\uc774\ube0c\ub7ec\ub9ac \uc9c0\uc6d0, \uadf8\ub9ac\uace0 \uc815\uc801 \ubd84\uc11d\uae30\uac00 \ud544\uc694\ud558\ub2e4. C++'s resource- and type-safety model \ub17c\uc758\uc5d0\uc11c\uc758 \uc911\uc694 \ubd80\ubd84 \uc911 \ud558\ub098\ub2e4. See also \uc218\uba85\uc8fc\uae30 \ubb38\uc81c\ub97c \ud53c\ud558\ub824\uba74 RAII \ub97c \uc0ac\uc6a9\ud558\ub77c \uc218\uba85\uc8fc\uae30 \ubb38\uc81c\ub97c \ud53c\ud558\ub824\uba74 unique_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c \uc218\uba85\uc8fc\uae30 \ubb38\uc81c\ub97c \ud53c\ud558\ub824\uba74 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c nullptr \uac00 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 references \ub97c \uc0ac\uc6a9\ud558\ub77c \uc758\ub3c4\uce58 \uc54a\uc740 nullptr \ub97c \uc77c\ucc0d \uc7a1\uc544\ub0b4\uae30 \uc704\ud574 not_null \uc744 \uc0ac\uc6a9\ud558\ub77c \ubc94\uc704 \uc624\ub958\ub97c \ud53c\ud558\uace0 \uc2f6\ub2e4\uba74 \uacbd\uacc4 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc744 \ucc38\uace0\ud558\ub77c Example void f () { int x = 0 ; int * p = & x ; if ( condition ()) { int y = 0 ; p = & y ; } // invalidates p * p = 42 ; // BAD, p\ub294 \ubd84\uae30\ubb38\uc744 \uac70\ucce4\ub2e4\uba74 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4 } \uc774\ub7f0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574, \ucc38\uc870\ub418\ub294 \uac1c\uccb4\uc758 \uc218\uba85\uc744 \ub298\ub9ac\uac70\ub098, \ucc38\uc870\ud558\ub294 \ud3ec\uc778\ud130\uc758 \uc218\uba85\uc744 \uc904\uc774\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4. (\uc5ed\ucc38\uc870\ud558\ub294 \uc2dc\uc810\uc744 \ucc38\uc870\ub418\ub294 \uac1c\uccb4\uc758 \uc218\uba85\uc774 \ub05d\ub098\uae30 \uc804\uc73c\ub85c \uc55e\ub2f9\uae34\ub2e4) void f1 () { int x = 0 ; int * p = & x ; int y = 0 ; if ( condition ()) { p = & y ; } * p = 42 ; // OK, p points to x or y and both are still in scope } \ubd88\ud589\ud558\uac8c\ub3c4, \ub300\ubd80\ubd84\uc758 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130 \ubb38\uc81c\ub294 \ucc3e\uc544\ub0b4\uae30\ub3c4, \uace0\uce58\uae30\ub3c4 \uc5b4\ub835\ub2e4. Example void f ( int * p ) { int x = * p ; // BAD: how do we know that p is valid? } \uc774\ub7f0 \ucf54\ub4dc\uac00 \uc5c4\uccad\ub098\uac8c \ub9ce\uc774 \uc788\ub2e4. \ub300\ubd80\ubd84 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\uc9c0\ub9cc -- \uc218\ub9ce\uc740 \ud14c\uc2a4\ud2b8\ub97c \uac70\uce5c \ud6c4\uc5d0\uc57c -- \uc800 \ucf54\ub4dc\ub9cc \ub193\uace0 \ubcf4\uba74 p \uac00 nullptr \uac00 \ub420 \uc218 \uc788\ub294\uc9c0\uc5d0 \ub300\ud574 \ud655\ub2f5\ud560 \uc218 \uc5c6\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c\ub294 \uc774 \uc5ed\uc2dc \uc624\ub958\uc758 \uc8fc\uc694 \uc6d0\uc778\uc774\ub2e4. \uc774\ub7f0 \uc7a0\uc7ac\uc801\uc778 \ubb38\uc81c\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 \ub9ce\uc740 \uc2dc\ub3c4\uac00 \uc788\uc5c8\ub2e4: void f1 ( int * p ) // nullptr\ub97c \ucc98\ub9ac\ud574\ubcf4\uc790 { if ( ! p ) { // nullptr\uc778 \uacbd\uc6b0 \uc0c8\ub85c \ud560\ub2f9\ud558\uac70\ub098, \ubc18\ud658\ud558\uac70\ub098, // \uc608\uc678\ub97c \ub358\uc9c0\uac70\ub098, \ub2e4\ub978 \ubb34\uc5b8\uac00\ub97c \uac00\ub9ac\ud0a4\uac8c \ud558\uac70\ub098... } int x = * p ; } nullptr \ub97c \uac80\uc0ac\ud558\ub294\ub370\ub294 \ub450\uac00\uc9c0 \uc7a0\uc7ac\uc801 \ubb38\uc81c\uac00 \uc788\ub2e4: \ub9e4\ubc88 nullptr \ub97c \ucc3e\uc740 \ud6c4\uc5d0 \ubb34\uc5c7\uc744 \ud574\uc57c\ud558\ub294\uc9c0 \ubd84\uba85\ud55c \uac83\uc740 \uc544\ub2c8\ub2e4 \ud14c\uc2a4\ud2b8\uac00 \uc911\ubcf5\uc801\uc774\uac70\ub098 \uc0c1\ub300\uc801\uc73c\ub85c \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e4\uc218\ub3c4 \uc788\ub2e4 \ud14c\uc2a4\ud2b8\uc758 \ubaa9\uc801\uc774 \uc798\ubabb\ub41c \uba54\ubaa8\ub9ac \ucc38\uc870(violation)\ub97c \ub9c9\uae30 \uc704\ud55c \uac83\uc778\uc9c0 \ub85c\uc9c1\uc744 \ubcf4\ud638\ud558\uae30 \uc704\ud55c \uac83\uc778\uc9c0 \ubd88\ubd84\uba85\ud558\ub2e4 void f2 ( int * p ) // state that p is not supposed to be nullptr { assert ( p ); int x = * p ; } \uc704 \ubc29\ubc95\uc740 \ub2e8\uc815\ubb38(assertion)\uc774 \ud65c\uc131\ud654\ub420 \ub54c\ub9cc \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud558\uace0 \ucef4\ud30c\uc77c\ub7ec, \ubd84\uc11d\uae30\uc5d0 \uc720\uc6a9\ud55c \uc815\ubcf4\ub97c \uc81c\uacf5\ud560 \uac83\uc774\ub2e4. C++\uc774 Contract\ub97c \uc9c0\uc6d0\ud558\uac8c \ub418\uba74 \uc880 \ub354 \ub098\uc740 \ucf54\ub4dc\uac00 \ub420 \uac83\uc774\ub2e4. void f3 ( int * p ) // state that p is not supposed to be nullptr [[ expects : p ]] { int x = * p ; } \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294, p \uac00 nullptr \uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \ubd84\uba85\ud788 \ud558\uae30\uc704\ud574 gsl::not_null \ub97c \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4. void f ( not_null < int *> p ) { int x = * p ; } \uc774\ub7f0 \ubc29\ud3b8\ub4e4\uc740 nullptr \uc778 \uacbd\uc6b0 \ub9cc\uc744 \ub2e4\ub8ec\ub2e4. \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\uac00 nullptr \uac00 \uc544\ub2cc \uacbd\uc6b0\ub3c4 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c. Example void f ( int * p ) // old code, doesn't use owner { delete p ; } void g () // old code: uses naked new { auto q = new int { 7 }; f ( q ); int x = * q ; // BAD: dereferences invalid pointer } Example void f () { vector < int > v ( 10 ); int * p = & v [ 5 ]; v . push_back ( 99 ); // could reallocate v's elements int x = * p ; // BAD: dereferences potentially invalid pointer } Enforcement \uc774 \uaddc\uce59\uc740 \uc218\uba85\uc8fc\uae30 \uc548\uc804\uc131 \ubd84\uc11d \uc758 \uc77c\ubd80\ubd84\uc774\ub2e4. \ud3ec\uc778\ud130\uac00 \uc720\ud6a8\ubc94\uc704\ub97c \ubc97\uc5b4\ub09c \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c \ud3ec\uc778\ud130\uac00 nullptr \ub97c \ub300\uc785\ud574\uc11c \uc720\ud6a8\ud558\uc9c0 \uc54a\uac8c \ub418\uc5c8\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c \ud3ec\uc778\ud130\uac00 delete \uc5d0 \uc758\ud574\uc11c \uc720\ud6a8\ud558\uc9c0 \uc54a\uac8c \ub418\uc5c8\uc744 \uc218 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c \ud3ec\uc778\ud130\uac00 \uc0ac\ub77c\uc84c\uc744 \uc218 \uc788\ub294 \ucee8\ud14c\uc774\ub108\uc758 \uc6d0\uc18c\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c ES.stmt: \uad6c\ubb38(statement) \uad6c\ubb38\uc740 \uc81c\uc5b4 \ud750\ub984(the flow of control)\uc744 \ud1b5\uc81c(control)\ud55c\ub2e4. (\ud568\uc218 \ud638\ucd9c\uacfc \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uac83\uc740 \ud45c\ud604\uc2dd\uc774\ub2e4) ES.70: \uc120\ud0dd\uc744 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 if \uad6c\ubb38\ubcf4\ub2e4\ub294 switch \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131 \ud6a8\uc728\uc131: \uc0c1\uc218\uac12\uc5d0 \ub300\ud574\uc11c \ube44\uad50\ub97c \uc218\ud589\ud558\ubbc0\ub85c if - then - else \ubb38\uc758 \uc5f0\uc18d\ubcf4\ub2e4 switch \ubb38\uc774 \ub354 \uc798 \ucd5c\uc801\ud654\ub420 \uc218 \uc788\ub2e4. switch \ubb38\uc740 \uacbd\ud5d8\uc801\uc778 \ud615\ud0dc\uc758 \uc77c\uad00\uc131 \uac80\uc0ac\ub97c \ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74, enum \ubaa8\ub4e0 \uac12\uc744 \ud655\uc778\ud558\uace0 \uc788\ub294\uac00? \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 default \ub294 \uc788\ub294\uac00? Example void use ( int n ) { switch ( n ) { // good case 0 : // ... break ; case 7 : // ... break ; default : // ... break ; } } \uc704\uc758 \uc608\uc81c\uac00 \ub354 \uc88b\ub2e4: void use2 ( int n ) { if ( n == 0 ) // bad: if-then-else \uac00 \ubc18\ubcf5\ub418\uba74\uc11c \uc0c1\uc218\ub4e4\uacfc \ube44\uad50\ub97c \uc218\ud589\ud55c\ub2e4 // ... else if ( n == 7 ) // ... } Enforcement \uc0c1\uc218\uac12\uc5d0 \ub300\ud574\uc11c \ube44\uad50\ud558\ub294 if-then-else\uac00 \uc5f0\uc18d\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4. (\uc774 \uacbd\uc6b0\uc5d0\ub9cc) ES.71: \uac00\ub2a5\ud558\ub2e4\uba74 \uc77c\ubc18 for \uad6c\ubb38 \ubcf4\ub2e4 \ubc94\uc704\uae30\ubc18 for -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131. \uc624\ub958 \uc608\ubc29. \ud6a8\uc728\uc131. Example for ( gsl :: index i = 0 ; i < v . size (); ++ i ) // bad cout << v [ i ] << '\\n' ; for ( auto p = v . begin (); p != v . end (); ++ p ) // bad cout << * p << '\\n' ; for ( auto & x : v ) // OK cout << x << '\\n' ; // touches two elements: can't be a range-for for ( gsl :: index i = 1 ; i < v . size (); ++ i ) cout << v [ i ] + v [ i - 1 ] << '\\n' ; // possible side effect: can't be a range-for for ( gsl :: index i = 0 ; i < v . size (); ++ i ) cout << f ( v , & v [ i ]) << '\\n' ; // body messes with loop variable: can't be a range-for for ( gsl :: index i = 0 ; i < v . size (); ++ i ) { if ( i % 2 == 0 ) continue ; // skip even elements else cout << v [ i ] << '\\n' ; } \ud504\ub85c\uadf8\ub798\uba38\ub098 \uc88b\uc740 \uc815\uc801 \ubd84\uc11d\uae30\ub294 f(&v[i]) \uc5d0\uc11c v \uc5d0 \ub300\ud574\uc11c \ubd80\uc218\ud6a8\uacfc(side effect)\uac00 \uc77c\uc5b4\ub098\uc9c0 \uc54a\ub294\ub2e4\uace0 \ud310\ub2e8\ud560\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. \uc774 \uacbd\uc6b0 \ub8e8\ud504\ub97c \ucd5c\uc801\ud654\ud560 \uc218 \uc788\ub2e4. \ub8e8\ud504\ubb38 \ub0b4\uc5d0\uc11c \"\ub8e8\ud504\ubcc0\uc218\ub97c \ubcc0\uacbd\"\ud558\ub294 \uacbd\uc6b0\uac00 \uc5c6\uc5b4\uc57c \ud55c\ub2e4. Note \ubc94\uc704 \uae30\ubc18 for \ubb38\uc5d0\uc11c \ub8e8\ud504\ubcc0\uc218\ub97c \ubcf5\uc0ac\ud558\uc5ec \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c: for ( string s : vs ) // ... \uc704 \ucf54\ub4dc\ub294 vs \uc758 \uc6d0\uc18c\ub97c s \ub85c \ubcf5\uc0ac\ud55c\ub2e4. \uac1c\uc120\ud558\uba74: for ( string & s : vs ) // ... \ub9cc\uc57d \ub8e8\ud504 \ubcc0\uc218( s )\uac00 \ubcc0\uacbd\ub418\uac70\ub098 \ubcf5\uc0ac\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc774\ub807\uac8c \uc791\uc131\ud558\ub77c: for ( const string & s : vs ) // ... Enforcement \ub8e8\ud504\ub97c \ubcf4\uace0 \uac1c\ubcc4 \uc694\uc18c\ub4e4\uc744 \uc77c\ub82c\ub85c \ucc38\uc870\ud558\uace0 \uc788\uace0 \ubd80\uc218\ud6a8\uacfc(side effect)\uac00 \uc5c6\uc5b4 \ubcf4\uc774\uba74 for \ubb38\uc73c\ub85c \uc7ac\uc791\uc131\ud55c\ub2e4. ES.72: \ub8e8\ud504 \ubcc0\uc218\uac00 \uc788\ub2e4\uba74 while -\uad6c\ubb38\ubcf4\ub2e4 for -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131: \ub8e8\ud504\uc5d0 \ub300\ud55c \uc804\uccb4 \ub85c\uc9c1\uc744 \uccab\uad6c\ubb38\uc5d0\uc11c \ubcfc \uc218 \uc788\ub2e4. \ub8e8\ud504\ubcc0\uc218\uc758 \ubc94\uc704\uac00 \uc81c\ud55c\ub418\ub294 \uc810\ub3c4 \uc88b\ub2e4. Example for ( gsl :: index i = 0 ; i < vec . size (); i ++ ) { // do work } Example, bad int i = 0 ; while ( i < vec . size ()) { // do work i ++ ; } Enforcement ??? ES.73: \ub8e8\ud504 \ubcc0\uc218\uac00 \uc5c6\ub2e4\uba74 for -\uad6c\ubb38\ubcf4\ub2e4 while -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131 Example int events = 0 ; for (; wait_for_event (); ++ events ) { // bad, \ud63c\ub780\uc2a4\ub7fd\ub2e4 // ... } \uc774 \"\uc774\ubca4\ud2b8 \ub8e8\ud504\"\ub294 \uc798\ubabb\ub41c \ucf54\ub4dc\uc778\ub370, events \uce74\uc6b4\ud130 \ubcc0\uc218\uac00 \ubc18\ubcf5 \uc870\uac74\uc5d0 \uc804\ud600 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc774\ub2e4 ( wait_for_event() ). \uc774\ub7f0 \ucf54\ub4dc\uac00 \ub354 \uc88b\ub2e4 int events = 0 ; while ( wait_for_event ()) { // better ++ events ; // ... } Enforcement Flag actions in for -initializers and for -increments that do not relate to the for -condition. ES.74: \ub8e8\ud504 \ubcc0\uc218\ub294 for -\uad6c\ubb38\uc758 \ucd08\uae30\ud654 \ubd80\ubd84\uc5d0\uc11c \uc120\uc5b8\ud558\ub77c Reason \ub8e8\ud504 \ubcc0\uc218\uc758 \uac00\uc2dc\ubc94\uc704\ub97c \ub8e8\ud504 \ubc94\uc704 \ub0b4\ub85c \uc81c\ud55c\ud558\ub77c. \ub8e8\ud504\ubb38 \ub4a4\uc5d0\uc11c \ub2e4\ub978 \ubaa9\uc801\uc73c\ub85c \ub8e8\ud504 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uac8c \ud558\ub77c. Example // GOOD: i var is visible only inside the loop for ( int i = 0 ; i < 100 ; ++ i ) { // ... } Example, don't // BAD: j is visible outside the loop int j ; for ( j = 0 ; j < 100 ; ++ j ) { // ... } // j is still visible here and isn't needed See also Don't use a variable for two unrelated purposes Example for ( string s ; cin >> s ; ) { cout << s << '\\n' ; } Enforcement for \ubb38 \uc548\uc5d0\uc11c\ub9cc \ubcc0\ud558\ub294 \ubcc0\uc218\uac00 \ub8e8\ud504 \ubc16\uc5d0 \uc120\uc5b8\ub418\uc5b4 \uc788\uc9c0\ub9cc \ub8e8\ud504 \ubc16\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uace0 \uc788\ub2e4\uba74 \uacbd\uace0\ud55c\ub2e4. Discussion \ub8e8\ud504 \ubcc0\uc218\ub97c \ub8e8\ud504 \uad6c\ubb38\uc758 \ubc94\uc704\uc5d0 \ub450\uba74 \ucf54\ub4dc \ucd5c\uc801\ud654\uc5d0 \ub9ce\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uadc0\ub0a9 \ubcc0\uc218(induction variable)\uac00 \ub8e8\ud504\uad6c\ubb38 \uc548\uc5d0\uc11c\ub9cc \uc811\uadfc\uac00\ub2a5\ud568\uc744 \ud30c\uc545\ud558\uba74 \uc704\uce58\uc774\ub3d9(hoisting), \uc5f0\uc0b0 \ubd80\ub2f4 \uc644\ud654(strength reduction), \ub8e8\ud504 \ub0b4 \ubd88\ubcc0\ucf54\ub4dc \uc774\ub3d9(loop-invariant code motion) \ub4f1\uc758 \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud574\uc9c4\ub2e4. \ubc88\uc5ed \ucc38\uace0: * https://en.wikipedia.org/wiki/Strength_reduction * https://code-examples.net/ko/docs/gcc~7/optimize-options ES.75: do -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \uac00\ub3c5\uc131. \uc624\ub958 \ud68c\ud53c. \uc885\ub8cc \uc870\uac74\uc774 \ub05d\uc5d0 \uc704\uce58\ud574 \uc788\uace0(\ubabb \ubcf4\uace0 \ub118\uc5b4\uac00\uae30 \uc26c\uc6b4 \uc704\uce58) \uccab \ub8e8\ud504\uc5d0\uc11c \uc870\uac74\uc744 \uac80\uc0ac\ud558\uc9c0 \uc54a\ub294\ub2e4. Example int x ; do { cin >> x ; // ... } while ( x < 0 ); Note \ubb3c\ub860 do -\uad6c\ubb38\uc774 \uae54\ub054\ud55c \ud574\uacb0\ubc29\ubc95\uc774 \ub418\ub294 \uc608\uc2dc\ub3c4 \uc874\uc7ac\ud55c\ub2e4. \ud558\uc9c0\ub9cc \ub3d9\uc2dc\uc5d0 \ub9ce\uc740 \ubc84\uadf8\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30\ub3c4 \ud55c\ub2e4. Enforcement do -\uad6c\ubb38\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 ES.76: goto \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \uac00\ub3c5\uc131. \uc624\ub958 \ud68c\ud53c. \uc0ac\ub78c\uc744 \uc704\ud574\uc11c\ub294 \ub354 \uc88b\uc740 \ucee8\ud2b8\ub864 \uad6c\uc870\uac00 \uc788\ub2e4; goto \ub294 \uae30\uacc4\ucf54\ub4dc(machine generated code)\ub97c \uc704\ud55c \uac83\uc774\ub2e4. Exception \uc911\ucca9\ub41c \ub8e8\ud504\uc5d0\uc11c \ud0c8\ucd9c. \uc774\ub7f0 \uacbd\uc6b0\ub77c\uba74 \ud56d\uc0c1 \ucc98\ub9ac\uc758 \uc9c4\ud589\ubc29\ud5a5(forward)\uc73c\ub85c \uc810\ud504\ud558\ub77c. for ( int i = 0 ; i < imax ; ++ i ) for ( int j = 0 ; j < jmax ; ++ j ) { if ( a [ i ][ j ] > elem_max ) goto finished ; // ... } finished : // ... Example, bad C \uc5d0\uc11c\ub294 goto-exit \ud615\ud0dc(idiom)\ub97c \uaf64 \ub9ce\uc774 \uc0ac\uc6a9\ud55c\ub2e4: void f () { // ... goto exit ; // ... goto exit ; // ... exit : // ... common cleanup code ... } \uc774\uac74 \uc18c\uba78\uc790\ub97c \uc2dc\ubbac\ub808\uc774\uc158\ud55c \uac83\uc774\ub2e4. \ub9ac\uc18c\uc2a4\ub97c \ud574\uc81c\ud558\ub294 \uc18c\uba78\uc790\ub97c \uac00\uc9c4 \ud578\ub4e4\ub85c \uc120\uc5b8\ud558\ub77c. \uc0ac\uc6a9\ub41c \ubcc0\uc218\ub4e4\uc758 \uc18c\uba78\uc790\ub85c \ubaa8\ub4e0 \uc815\ub9ac \uc791\uc5c5(cleanup)\uc744 \ub2e4\ub8f0 \uc218 \uc5c6\ub2e4\uba74, \uc18c\uba78 \uc791\uc5c5\uc744 goto exit \ub300\uc2e0 \ub354 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 gsl::finally() \ub85c \ucc98\ub9ac\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c Enforcement goto \uac00 \ubcf4\uc774\uba74 \uc9c0\uc801\ud55c\ub2e4. \ub8e8\ud504 \ub2e4\uc74c\ubb38\uc73c\ub85c \uc810\ud504\ud558\uc9c0 \uc54a\ub294 \uc911\ucca9 \ub8e8\ud504 \ub0b4\uc758 goto \ub294 \ubaa8\ub450 \ud45c\uc2dc\ud558\uba74 \ub354 \uc88b\ub2e4. ES.77: break \uc640 continue \uc758 \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c Reason \uac04\ub2e8\ud558\uc9c0 \uc54a\uc740(non-trivial) \ubc18\ubcf5\ubb38 \ub0b4\uc5d0\uc11c\ub294 break \ud639\uc740 continue \ub97c \uac04\uacfc\ud558\uae30 \uc27d\ub2e4. \ubc18\ubcf5\ubb38\uc5d0\uc11c break \ub294 switch \uad6c\ubb38 \ub0b4\uc5d0\uc11c\uc640\ub294 \uc644\uc804\ud788 \ub2e4\ub978 \uc758\ubbf8\ub97c \uac00\uc9c4\ub2e4. (\uadf8\ub9ac\uace0 switch \uad6c\ubb38 \ub0b4\uc5d0\uc11c \ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \ubc18\ubcf5\ubb38 \uc548\uc5d0\uc11c switch \ub97c \uc0ac\uc6a9\ud558\ub294\uac83\uc774 \uac00\ub2a5\ud558\ub2e4). Example ??? Alternative \ub54c\ub54c\ub85c, break \ub97c \ud544\uc694\ub85c \ud558\ub294 \ubc18\ubcf5\ubb38\uc740 \ud568\uc218(\uc54c\uace0\ub9ac\uc998)\uc758 \ud6c4\ubcf4\uac00 \ub418\uae30\ub3c4 \ud55c\ub2e4. \uc774 \uacbd\uc6b0 break \ub294 \uadf8 \ud568\uc218\uc758 return \uc774 \ub41c\ub2e4. ??? \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 continue \ub97c \uc0ac\uc6a9\ud558\ub294 \ubc18\ubcf5\ubb38\uc740 if \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud574 \ub17c\ub9ac\uc801\uc73c\ub85c \ub3d9\uc77c\ud558\uac8c \ud45c\ud604\ud560 \uc218 \uc788\ub2e4. ??? Note \uc815\ub9d0\ub85c \ubc18\ubcf5\ubb38 \uc911\uac04\uc5d0\uc11c \ud0c8\ucd9c\ud574\uc57c \ud55c\ub2e4\uba74, break \ub294 \ubcf4\ud1b5 \ub8e8\ud504 \ubcc0\uc218\ub97c \uc870\uc791 \ud558\uac70\ub098 goto \ub97c \uc4f0\ub294 \ubc29\ubc95\ubcf4\ub2e4 \ub354 \ub098\uc740 \ubc29\ubc95\uc774\ub2e4. Enforcement ??? ES.78: \ub0b4\uc6a9\uc774 \uc788\ub294 case \ub294 break \ud558\ub77c Reason \uc2e4\uc218\ub85c break \ub97c \ubd99\uc774\uc9c0 \uc54a\ub294 \uac83\uc740 \uaf64 \ub9ce\uc774 \ubc1c\uc0dd\ud558\ub294 \ubc84\uadf8\ub2e4. \uace0\uc758\uc801\uc73c\ub85c break \ub97c \uc5c6\uc560\ub294 \uac83(fallthrough)\uc740 \uc720\uc9c0\ubcf4\uc218\uc758 \uc704\ud5d8\uc694\uc18c\uac00 \ub41c\ub2e4. Example switch ( eventType ) { case Information : update_status_bar (); break ; case Warning : write_event_log (); // Bad - implicit fallthrough case Error : display_error_window (); break ; } break \ub85c \uc548 \ub05d\ub098\ub294 \uc0ac\ud56d\uc740 \uac04\uacfc\ud558\uae30 \uc27d\ub2e4. \uba85\ud655\ud558\uac8c \ud558\ub77c: switch ( eventType ) { case Information : update_status_bar (); break ; case Warning : write_event_log (); // fallthrough case Error : display_error_window (); break ; } C++17\uc5d0\uc11c\ub294, [[fallthrough]] \ub97c \uc0ac\uc6a9\ud558\ub77c: switch ( eventType ) { case Information : update_status_bar (); break ; case Warning : write_event_log (); [[ fallthrough ]]; // C++17 case Error : display_error_window (); break ; } Note \ub2e8\uc77c\ubb38\uc73c\ub85c \ubaa8\uc774\ub294 \uc5ec\ub7ec\uac1c\uc758 \ucf00\uc774\uc2a4 \uc870\uac74\uc740 \ud5c8\uc6a9\ub41c\ub2e4: switch ( x ) { case 'a' : case 'b' : case 'f' : do_something ( x ); break ; } Enforcement \ube48 case \ubb38\uc774 \uc544\ub2cc\ub370 break\ub85c \ub05d\ub098\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. ES.79: (\uc624\uc9c1) \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc11c default \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ucf54\ub4dc\uc758 \uba85\ud655\uc131. \uc624\ub958\ub97c \ud0d0\uc9c0\ud560 \uae30\ud68c\ub97c \ub298\ub824\uc900\ub2e4. Example enum E { a , b , c , d }; void f1 ( E x ) { switch ( x ) { case a : do_something (); break ; case b : do_something_else (); break ; default : take_the_default_action (); break ; } } \uc774 \uc608\uc2dc\uc5d0\ub294 \uae30\ubcf8 \ud589\ub3d9\uacfc a \uc640 b \ub77c\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\ub97c \ucc98\ub9ac\ud55c\ub2e4\ub294 \uac83\uc774 \ubd84\uba85\ud558\uac8c \ub098\ud0c0\ub09c\ub2e4. Example \uae30\ubcf8 \ud589\ub3d9 \uc5c6\uc774 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\ub9cc \ucc98\ub9ac\ud558\ub824\uace0 \uc758\ub3c4\ud588\ub2e4\uba74 \uc5b4\ub5a8\uae4c? \uadf8\ub7f0 \uacbd\uc6b0\ub77c\uba74, \ub0b4\uc6a9 \uc5c6\ub294 default \ub97c \ub450\uc9c0 \uc54a\uc73c\uba74 \ub2f9\uc2e0\uc774 \ubaa8\ub4e0 \uacbd\uc6b0\ub97c \ub2e4\ub8e8\ub3c4\ub85d \uc758\ub3c4\ud588\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc5c6\ub2e4. void f2 ( E x ) { switch ( x ) { case a : do_something (); break ; case b : do_something_else (); break ; default : // \ub098\uba38\uc9c0 \uacbd\uc6b0\uc5d0\ub294 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\ub294\ub2e4 break ; } } default \ub97c \ub123\uc9c0 \uc54a\uc558\ub2e4\uba74, \uadf8 \ucf54\ub4dc\ub97c \uc720\uc9c0\ubcf4\uc218 \ud558\ub294 \uc0ac\ub78c \ud639\uc740 \ucef4\ud30c\uc77c\ub7ec\ub294 \ub2f9\uc2e0\uc774 \ub2f9\uc5f0\ud788(reasonably) \ubaa8\ub4e0 \uacbd\uc6b0\ub97c \ub3c4\ub824\ud588\ub2e4\uace0 \uac00\uc815\ud560 \uac83\uc774\ub2e4: enum E { a , b , c , d }; void f2 ( E x ) { switch ( x ) { case a : do_something (); break ; case b : case c : do_something_else (); break ; } } d \ub97c \ucc98\ub9ac\ud558\ub294 \uac83\uc744 \uae5c\ube61\ud55c \uac83\uc77c\uae4c? \uc544\ub2c8\uba74 \uc758\ub3c4\uc801\uc73c\ub85c \uc81c\uc678\ud55c \uac83\uc77c\uae4c? \ud2b9\uc815\ud55c \uacbd\uc6b0\uac00 \ub204\ub77d\ub418\ub294 \uac83\uc740 \ubcf4\ud1b5 \uc5f4\uac70\ud615\uc758 \uac12\uc774 \ucd94\uac00\ub418\uba74\uc11c \uc0ac\ub78c\uc774 \ubaa8\ub4e0 switch \ub97c \uac31\uc2e0\ud558\uc9c0 \uc54a\uc558\uc744 \ub54c \ubc1c\uc0dd\ud55c\ub2e4. Enforcement \uc5f4\uac70\ud615\uc744 \uac80\uc0ac\ud558\ub294 switch -\uad6c\ubb38\uc5d0\uc11c default \uac00 \uc5c6\uc73c\uba74\uc11c \ubaa8\ub4e0 \uc5f4\uac70\uac12\uc744 \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. \uc774\ub294 \ub108\ubb34 \ub9ce\uc740 False Positive\ub97c \ub0b3\uc744\uc218\ub3c4 \uc788\ub2e4; \uadf8\ub7f0 \uacbd\uc6b0\uc5d0\ub294, \ub300\ubd80\ubd84\uc758 \uac12\uc744 \ub2e4\ub8e8\uc9c0\ub9cc \ubaa8\ub4e0 \uac12\uc744 \uac80\uc0ac\ud558\uc9c0 \uc54a\ub294 switch \ub9cc\uc744 \uc9c0\uc801\ud558\ub77c (\uc774\ub294 \ucd08\ucc3d\uae30 C++ \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0ac\uc6a9\ud55c \uc804\ub7b5\uc774\ub2e4). ES.84: \uc774\ub984\uc774 \uc5c6\ub294 \uc9c0\uc5ed\ubcc0\uc218\ub294 \uc120\uc5b8(\ud558\ub824\uace0)\ud558\uc9c0 \ub9c8\ub77c Reason \uc774\ub984 \uc5c6\ub294 \uc9c0\uc5ed\ubcc0\uc218\ub294 \ub9cc\ub4e4 \uc218 \uc5c6\ub2e4. \uc0ac\ub78c\uc5d0\uac8c \uc774\ub984\uc774 \uc5c6\ub294 \uac83\ucc98\ub7fc \ubcf4\uc774\ub294 \ubcc0\uc218\ub294 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c\ub294 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \ubc14\ub85c \uc0ac\ub77c\uc9c0\ub294 \uc784\uc2dc \ubcc0\uc218\ub97c \ud3ec\ud568\ud55c \uad6c\ubb38\uc774\ub2e4. \ubd88\ucf8c\ud55c \uc774\uc0c1\ud589\ub3d9(unpleasant surprise)\uc774 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uac8c \ud55c\ub2e4. Example, bad void f () { lock < mutex > { mx }; // Bad // ... } \uc774 \uad6c\ubb38\uc740 \uc774\ub984 \uc5c6\ub294 lock \uac1c\uccb4\ub97c \uc120\uc5b8\ud558\uace0 \uc138\ubbf8\ucf5c\ub860 \uc774\ud6c4 \uc989\uc2dc \uc0ac\ub77c\uc9c0\ub3c4\ub85d \ud55c \uac83\uc774\ub2e4. \uc774\ub294 \ud754\uce58 \uc54a\uc740 \uc2e4\uc218\uac00 \uc544\ub2c8\ub2e4. \ud2b9\ud788, \uc774 \uc608\uc2dc\ub294 \ucc3e\uae30 \uc5b4\ub824\uc6b4 \uacbd\uc7c1 \uc870\uac74\uc73c\ub85c \uc774\uc5b4\uc9c8\uc218\ub3c4 \uc788\ub2e4. \uc774 \"\uad00\uc6a9\ubc95(idiom)\"\uc744 \ub9e4\uc6b0 \uc601\ub9ac\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc9c0\ub9cc, \uadf8\ub7f0 \uacbd\uc6b0\ub4e4\uc740 \uc2e4\uc218\uc640\ub294 \uac70\ub9ac\uac00 \uba40\ub2e4. Note \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790\uac00 \uc774\ub984\uc774 \uc5c6\ub294 \uac83\uc740 \uad1c\ucc2e\ub2e4. Enforcement \uc784\uc2dc\ubcc0\uc218\ub97c \uc0dd\uc131\ud558\uae30\ub9cc \ud558\ub294 \uad6c\ubb38\uc744 \uc9c0\uc801\ud558\ub77c. ES.85: \ube44\uc5b4\uc788\ub294 \uad6c\ubb38\uc740 \ub208\uc5d0\ub744\uac8c \ud558\ub77c Reason \uac00\ub3c5\uc131. Example for ( i = 0 ; i < max ; ++ i ); // BAD: \ube44\uc5b4\uc788\ub294 \uad6c\ubb38\uc758 \uc874\uc7ac\ub97c \ubabb\ubcfc \uc218 \uc788\ub2e4 v [ i ] = f ( v [ i ]); for ( auto x : v ) { // \uc880 \ub354 \ub0ab\ub2e4 // nothing } v [ i ] = f ( v [ i ]); Enforcement \ube14\ub85d\uc774 \uc544\ub2c8\uba74\uc11c \uc8fc\uc11d\ubb38\uc744 \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294 \ube48 \ubb38\uc7a5\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. ES.86: for \ubc18\ubcf5\ubb38(body) \uc548\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud558\uc9c0 \ub9c8\ub77c Reason \ub8e8\ud504\ub97c \uc81c\uc5b4\ud558\ub294 \ubcc0\uc218\ub294 \ubc18\ubcf5\ubb38 \ub0b4\uc5d0\uc11c \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\ub294\uc9c0 \uc815\ud655\ud788 \ucd94\ub860\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \ub8e8\ud504 \uce74\uc6b4\ud130\ub97c \ubc18\ubcf5\ubb38 \uc548\ucabd(body)\uc774\ub098 \ubc18\ubcf5 \ud45c\ud604\uc2dd(iteration-expression)\uc5d0\uc11c \ubcc0\uacbd\ud558\ub294 \uac83\uc740 \ub298 \uc788\ub294(perennial) \uc774\uc0c1\ud589\ub3d9\uacfc \ubc84\uadf8\uc758 \uc6d0\uc778\uc774\ub2e4. Example for ( int i = 0 ; i < 10 ; ++ i ) { // no updates to i -- ok } for ( int i = 0 ; i < 10 ; ++ i ) { // if ( /* something */ ) ++ i ; // BAD // } bool skip = false ; for ( int i = 0 ; i < 10 ; ++ i ) { if ( skip ) { skip = false ; continue ; } // if ( /* something */ ) skip = true ; // Better: \ub450 \uac1c\uc758 \uc758\ubbf8(concept)\ub97c \uc704\ud574 \ub450\uac1c\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4. // } Enforcement \ub8e8\ud504 \uc81c\uc5b4\uc758 \ubc18\ubcf5 \ud45c\ud604\uc2dd\uc774\ub098 \ubc18\ubcf5\ubb38 \uc548\uc5d0\uc11c \uc7a0\uc7ac\uc801\uc73c\ub85c \ubcc0\uc218\ub97c \uac31\uc2e0\ud558\uba74 (\ube44- const \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\uba74) \uc9c0\uc801\ud558\ub77c ES.87: \uc870\uac74\uc5d0 \ubd88\ud544\uc694\ud55c == \ub098 != \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \ucf54\ub4dc\ub97c \uc7a5\ud669\ud558\uac8c \ub9cc\ub4dc\ub294 \uac83\uc744 \uc608\ubc29\ud558\uace0 \uc2e4\uc218\uac00 \ubc1c\uc0dd\ud560 \uc5ec\uc9c0\uac00 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \ucf54\ub529 \uc2a4\ud0c0\uc77c\uc758 \uc77c\uad00\uc131\uc774\ub098 \uad00\uc2b5\ud654\ub97c \ub3d5\ub294\ub2e4. Example \uadf8 \uc815\uc758\ub300\ub85c, if -\uad6c\ubb38, while -\uad6c\ubb38, \ud639\uc740 for -\uad6c\ubb38\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc870\uac74\uc740 true \uc640 false \uc0ac\uc774\uc5d0\uc11c \uc120\ud0dd\ud558\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. \uc22b\uc790\ub294 0 \uacfc \ube44\uad50\ub418\uace0 \ud3ec\uc778\ud130\ub294 nullptr \uacfc \ube44\uad50\ud55c\ub2e4. // These all mean \"if `p` is not `nullptr`\" if ( p ) { ... } // good if ( p != 0 ) { ... } // redundant `!=0`; bad: don't use 0 for pointers if ( p != nullptr ) { ... } // redundant `!=nullptr`, not recommended if (p) \uac00 \"\ub9cc\uc57d p \uac00 \uc720\ud6a8\ud558\ub2e4\uba74\"\uc774\ub77c\ub294 \ud504\ub85c\uadf8\ub798\uba38\uc758 \uc758\ub3c4\ub97c \uadf8\ub300\ub85c \ubc18\uc601\ud55c \uc758\ubbf8\ub85c \uc77d\ud788\ub294 \ubc18\uba74\uc5d0, if (p != nullptr) \ub294 \ub354 \ub9ce\uc740 \ub9d0(long-winded workaround)\uc774 \ud544\uc694\ud560 \uc218 \uc788\ub2e4. Example \uc774 \uaddc\uce59\uc740 \uc870\uac74\ubb38\uc5d0\uc11c \uc120\uc5b8\uc774 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0 \ud2b9\ud788 \uc720\uc6a9\ud558\ub2e4. if ( auto pc = dynamic_cast < Circle > ( ps )) { ... } // execute is ps points to a kind of Circle, good if ( auto pc = dynamic_cast < Circle > ( ps ); pc != nullptr ) { ... } // not recommended Example \uc870\uac74\ubb38\uc5d0\uc11c\ub294 bool \ud0c0\uc785\uc73c\ub85c\uc758 \uc554\ubb35\uc801 \ud615\ubcc0\ud658\uc774 \ubc1c\uc0dd\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: for ( string s ; cin >> s ; ) v . push_back ( s ); \uc774 \ucf54\ub4dc\ub294 istream \uc758 operator bool() \uc744 \ud638\ucd9c\ud55c\ub2e4. Note \uc815\uc218\ub97c 0 \uacfc \uba85\uc2dc\uc801\uc73c\ub85c \ube44\uad50\ud558\ub294 \uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ubcfc \uc218 \uc788\uace0, \uc911\ubcf5\uc801(redundant)\uc774\uc9c0\ub294 \uc54a\ub2e4. \uadf8 \uc774\uc720\ub294 (\ud3ec\uc778\ud130\ub098 \ubd88\ub9ac\uc5b8\uacfc\ub294 \ubc18\ub300\ub85c) \uc815\uc218\ub294 \ub54c\ub85c\ub294 2\uac1c \uc774\uc0c1\uc758 \uc815\ub2f9\ud55c(reasonable) \uac12\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc774\ub2e4. \ub354\uc6b1\uc774 0 (zero)\ub294 \uc885\uc885 \uc131\uacf5\uc744 \uc758\ubbf8\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\uae30\ub3c4 \ud55c\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c, \uba85\uc2dc\uc801\uc73c\ub85c \ube44\uad50\ud558\ub294 \uac83\uc774 \ucd5c\uc120\uc774\ub2e4. void f ( int i ) { if ( i ) // \uc880 \uc758\uc2ec\uc2a4\ub7fd\ub2e4 // ... if ( i == success ) // \uc544\ub9c8\ub3c4 \ub354 \ub098\uc740 \ucf54\ub4dc // ... } \uc815\uc218\uac00 2\uac1c \uc774\uc0c1\uc758 \uac12\uc744 \uac00\uc9c4\ub2e4\ub294 \uc810\uc744 \ud56d\uc0c1 \uae30\uc5b5\ud558\ub77c. Example, bad \uc54c\ub824\uc9c4 \ucf54\ub4dc \uc911 \uc774\ub7f0\uac8c \uc788\ub2e4. if ( strcmp ( p1 , p2 )) { ... } // \ub450 C-\uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\ub4e4\uc774 \uac19\uc740\uac00? (mistake!) \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \ucd08\uc2ec\uc790 \uc624\ub958\ub2e4. C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 <cstring> \uc758 \ud568\uc218\ub4e4\uc744 \uc798 \uc54c\uc544\uc57c \ud55c\ub2e4. \uc7a5\ud669\ud558\uac8c \uc544\ub798\ucc98\ub7fc \uc791\uc131\ud558\ub294 \uac83\uc740 if ( strcmp ( p1 , p2 ) != 0 ) { ... } // \ub450 C-\uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\ub4e4\uc774 \uac19\uc740\uac00? (mistake!) \ub2f9\uc2e0\uc744 \uad6c\ud574\uc8fc\uc9c0 \uc54a\ub294\ub2e4. Note \ubc18\ub300 \uc870\uac74\uc740 \ubd80\uc815(negation)\uc744 \uc0ac\uc6a9\ud574 \uc27d\uac8c \ud45c\ud604\ud560 \uc218 \uc788\ub2e4: // These all mean \"if `p` is `nullptr`\" if ( ! p ) { ... } // good if ( p == 0 ) { ... } // redundant `== 0`; bad: don't use `0` for pointers if ( p == nullptr ) { ... } // redundant `== nullptr`, not recommended Enforcement \uc27d\ub2e4, \uc870\uac74\ubb38\uc5d0\uc11c != \uc640 == \uc774 \uc911\ubcf5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4. \uc0b0\uc220\uc5f0\uc0b0(Arithmetic) ES.100: \ubd80\ud638\uac00 \uc788\ub294 \ud0c0\uc785\uacfc \uc5c6\ub294 \ud0c0\uc785\uc744 \ud568\uaed8 \uc5f0\uc0b0\ud558\uc9c0 \ub9c8\ub77c Reason \uacb0\uacfc\uac00 \uc798\ubabb\ub420 \uc218 \uc788\ub2e4. Example int x = - 3 ; unsigned int y = 7 ; cout << x - y << '\\n' ; // unsigned result, possibly 4294967286 cout << x + y << '\\n' ; // unsigned result: 4 cout << x * y << '\\n' ; // unsigned result, possibly 4294967275 \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294 \ubb38\uc81c\ub97c \ucc3e\uc544\ub0b4\uae30 \uc5b4\ub835\ub2e4. Note \ubd88\ud589\ud788\ub3c4 C++\uc740 \ubc30\uc5f4\uc778\uc790\uc5d0 \ub300\ud574\uc11c \ubd80\ud638\uc788\ub294 \uc815\uc218\ub97c \uc0ac\uc6a9\ud558\uace0 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ucee8\ud14c\uc774\ub108 \uc778\uc790\uc5d0 \ubd80\ud638\uc5c6\ub294 \uc815\uc218\ud615\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub294 \uc77c\uad00\uc801\uc774\uc9c0 \uc54a\ub2e4. \ubc30\uc5f4 \uc811\uadfc\uc774\ub77c\uba74 gsl::index \ub97c \uc0ac\uc6a9\ud558\ub77c. ES.107 \uc744 \ucc38\uace0\ud558\ub77c. Enforcement \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774\ubbf8 \uc54c\uace0 \uc788\ub294 \uc0c1\ud669\uc774\uace0 \uacbd\uace0\ud560 \uac83\uc774\ub2e4 (\ub108\ubb34 \ub9ce\uc740 \uacbd\uace0\ub97c \ub9c9\uae30 \uc704\ud574) \ube44\uad50\uc758 \ud53c\uc5f0\uc0b0\uc790 \uc911 \ud558\ub098\uac00 sizeof \ud639\uc740 \ucee8\ud14c\uc774\ub108\uc758 .size() \ub97c \uc0ac\uc6a9\ud558\uace0, \ub2e4\ub978 \ud55c\ucabd\uc740 ptrdiff_t \uacbd\uc6b0\ub294 \uc9c0\uc801\ud558\uc9c0 \ub9c8\ub77c ES.101: \ube44\ud2b8 \uc870\uc791\uc2dc\uc5d0\ub294 \ubd80\ud638\uac00 \uc5c6\ub294(unsigned) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc740 \ubd80\ud638\ube44\ud2b8\uae4c\uc9c0 \ud3ec\ud568\ud574\uc11c \ube44\ud2b8 \uc5f0\uc0b0\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 \uc758\ub3c4\ud55c \ub300\ub85c \ub3d9\uc791\ud55c\ub2e4. Example unsigned char x = 0 b1010 ' 1010 ; unsigned char y = ~ x ; // y == 0b0101'0101; Note \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0\uc5d0\uc11c \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc740 \uc720\uc6a9\ud558\ub2e4. \ud558\uc9c0\ub9cc, \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\uace0\uc790 \ud55c\ub2e4\uba74 \uadf8 \ucf54\ub4dc\uac00 \ub9ce\uc740 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc744 \ub180\ub77c\uac8c \ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub4a4\uc5bd\ud78c \ud589\ub3d9\uc5d0 \ub300\ud574 \ud544\uc694\ud55c \ub9cc\ud07c \uc8fc\uc11d\uc744 \uc791\uc131\ud558\ub77c. Enforcement \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub0b4\uc5d0\uc11c unsigned \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \uc778\ud574 \uc77c\ubc18\uc801\uc73c\ub85c \uac70\uc758 \ubd88\uac00\ub2a5\ud558\ub2e4 ??? ES.102: \uc5f0\uc0b0\uc5d0\ub294 \ubd80\ud638\uac00 \uc788\ub294(signed) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ub300\ubd80\ubd84\uc758 \uc0b0\uc220\uc5f0\uc0b0(arithmetic)\uc740 \ubd80\ud638\ub97c \uace0\ub824\ud55c\ub2e4; \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0\uacfc \uac19\uc774 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uac00 \uc544\ub2c8\ub77c\uba74 x - y \ub294 y > x \uc778 \uacbd\uc6b0 \uc74c\uc218\uac12\uc774 \ub098\uc624\uae38 \uae30\ub300\ud55c\ub2e4. Example \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c \uc0b0\uc220\uc5f0\uc0b0\uc740 \uae30\ub300\ubc16\uc758 \uacb0\uacfc\ub97c \ub0b3\ub294\ub2e4 (\uadf8\uac78 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74). \ubd80\ud638 \uc788\ub294 \ud0c0\uc785\uacfc \ubd80\ud638 \uc5c6\ub294 \ud0c0\uc785\uc774 \uc11e\uc5ec\uc11c \uc0b0\uc220\uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ucf54\ub4dc \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\ub2e4. template < typename T , typename T2 > T subtract ( T x , T2 y ) { return x - y ; } void test () { int s = 5 ; unsigned int us = 5 ; cout << subtract ( s , 7 ) << '\\n' ; // -2 cout << subtract ( us , 7u ) << '\\n' ; // 4294967294 cout << subtract ( s , 7u ) << '\\n' ; // -2 cout << subtract ( us , 7 ) << '\\n' ; // 4294967294 cout << subtract ( s , us + 2 ) << '\\n' ; // -2 cout << subtract ( us , s + 2 ) << '\\n' ; // 4294967294 } \uc774 \ucf54\ub4dc\ub85c \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\ub294\uc9c0 \ubd84\uba85\ud788 \uc54c \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ub2f9\uc2e0\uc774 us - (s + 2) \ud639\uc740 s += 2; ...; us - s \uac19\uc740 \ucf54\ub4dc\ub97c \ubd24\ub2e4\uba74, \uadf8 \uacb0\uacfc\uac00 4294967294 \ub77c\uace0 \ud655\uc2e0\ud560 \uc218 \uc788\uc5c8\uaca0\ub294\uac00? Exception \uc9c4\uc815 \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0\uc774 \ud544\uc694\ud558\ub2e4\uba74 \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c - \uadf8 \ucf54\ub4dc\uac00 \ub9ce\uc740 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc744 \ub180\ub77c\uac8c \ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub4a4\uc5bd\ud78c \ud589\ub3d9\uc5d0 \ub300\ud574 \ud544\uc694\ud55c \ub9cc\ud07c \uc8fc\uc11d\uc744 \uc791\uc131\ud558\ub77c. Example \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ubc30\uc5f4 \uc6d0\uc18c\uc5d0 \uc811\uadfc\ud560 \ub54c \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uae30\ubcf8\uc801\uc778 \ubc30\uc5f4(built-in array) \ud0c0\uc785\uc740 \ubd80\ud638\uc788\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub294 \ucf54\ub4dc\uac00 \ubd88\uac00\ud53c\ud558\uac8c \uae30\ub300\ub97c \ubc97\uc5b4\ub098\uac8c (\uadf8\ub9ac\uace0 \ubc84\uadf8\uac00 \uc0dd\uae30\uac8c) \ud55c\ub2e4. int a [ 10 ]; for ( int i = 0 ; i < 10 ; ++ i ) a [ i ] = i ; vector < int > v ( 10 ); // compares signed to unsigned; some compilers warn, but we should not for ( gsl :: index i = 0 ; i < v . size (); ++ i ) v [ i ] = i ; int a2 [ - 2 ]; // error: negative size // OK, but the number of ints (4294967294) is so large that we should get an exception vector < int > v2 ( - 2 ); \ubc30\uc5f4 \uc811\uadfc(subscript)\uc5d0\ub294 gsl::index \ub97c \uc0ac\uc6a9\ud558\ub77c; ES.107\ub97c \ucc38\uace0\ud558\ub77c Enforcement \ubd80\ud638 \uc788\ub294 \ud0c0\uc785\uacfc \uc5c6\ub294 \ud0c0\uc785\uc774 \uc11e\uc5ec\uc11c \uc0b0\uc220\uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c \ubd80\ud638 \uc5c6\ub294 \ud0c0\uc785\uc758 \uacb0\uacfc\uac00 \ubd80\ud638 \uc788\ub294 \ud0c0\uc785\ucc98\ub7fc \ucd9c\ub825\ub418\uac70\ub098 \ub300\uc785\ub418\uba74 \uc9c0\uc801\ud558\ub77c \ubd80\ud638 \uc5c6\ub294 \ud0c0\uc785\uc73c\ub85c \uc9c0\uc815\ub41c \ub9ac\ud130\ub7f4(\uc608\ub97c \ub4e4\uc5b4, -2 )\uc774 \ucee8\ud14c\uc774\ub108 \ubc30\uc5f4 \uc811\uadfc\uc5d0 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c (\ub108\ubb34 \ub9ce\uc740 \uacbd\uace0\ub97c \ub9c9\uae30 \uc704\ud574) \ube44\uad50\uc758 \ud53c\uc5f0\uc0b0\uc790 \uc911 \ud558\ub098\uac00 sizeof \ud639\uc740 \ucee8\ud14c\uc774\ub108\uc758 .size() \ub97c \uc0ac\uc6a9\ud558\uace0, \ub2e4\ub978 \ud55c\ucabd\uc740 ptrdiff_t \uacbd\uc6b0\ub294 \uc9c0\uc801\ud558\uc9c0 \ub9c8\ub77c ES.103: Overflow\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c Reason \uc624\ubc84\ud50c\ub85c\uc6b0\ub294 \uc218\uc2dd \uc54c\uace0\ub9ac\uc998\uc744 \uc758\ubbf8\uc5c6\uac8c \ub9cc\ub4e4\uc5b4 \ubc84\ub9b0\ub2e4. \ucd5c\ub300\uac12 \uc774\uc0c1\uc73c\ub85c \uc99d\uac00\uc2dc\ud0a8\ub2e4\uba74 \uba54\ubaa8\ub9ac\uac12\uc774 \ub9dd\uac00\uc9c0\uace0 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud55c\ub2e4. Example, bad int a [ 10 ]; a [ 10 ] = 7 ; // bad int n = 0 ; while ( n ++ < 10 ) a [ n - 1 ] = 9 ; // bad (twice) Example, bad int n = numeric_limits < int >:: max (); int m = n + 1 ; // bad Example, bad int area ( int h , int w ) { return h * w ; } auto a = area ( 10 ' 000 ' 000 , 100 ' 000 ' 000 ); // bad Exception \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0(modulo arithmetic)\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c. Alternative \uc5b4\ub290 \uc815\ub3c4\uc758 \uc624\ubc84\ud5e4\ub4dc\ub97c \uac10\uc218\ud560 \uc218 \uc788\ub294 \ub300\ub2e8\ud788 \uc911\uc694\ud55c \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ubc94\uc704 \uac80\uc0ac\ub97c \uc218\ud589\ud558\uac70\ub098 \ubd80\ub3d9\uc18c\uc218\uc810 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c. Enforcement ??? ES.104: Underflow\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c Reason \ucd5c\uc18c\uac12 \uc774\ud558\ub85c \uac12\uc774 \ub0b4\ub824\uac00\uba74 \uba54\ubaa8\ub9ac \uac12\uc774 \ub9dd\uac00\uc9c0\uace0 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud55c\ub2e4. Example, bad int a [ 10 ]; a [ - 2 ] = 7 ; // bad int n = 101 ; while ( n -- ) a [ n - 1 ] = 9 ; // bad (twice) Exception \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0(modulo arithmetic)\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c. Enforcement ??? ES.105: 0\uc73c\ub85c \ub098\ub204\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c Reason \uacb0\uacfc\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\uc73c\uba70 \ud06c\ub798\uc2dc\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uac83\uc774\ub2e4. Note \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0( % )\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4 Example; bad double divide ( int a , int b ) { // BAD, should be checked (e.g., in a precondition) return a / b ; } Example; good double divide ( int a , int b ) { // good, address via precondition (and replace with contracts once C++ gets them) Expects ( b != 0 ); return a / b ; } double divide ( int a , int b ) { // good, address via check return b ? a / b : quiet_NaN < double > (); } Alternative \uc5b4\ub290 \uc815\ub3c4\uc758 \uc624\ubc84\ud5e4\ub4dc\ub97c \uac10\uc218\ud560 \uc218 \uc788\ub294 \ub300\ub2e8\ud788 \uc911\uc694\ud55c \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ubc94\uc704 \uac80\uc0ac\ub97c \uc218\ud589\ud558\uac70\ub098 \ubd80\ub3d9\uc18c\uc218\uc810 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c. Enforcement 0\uc774 \ub420 \uc218 \uc788\ub294 \uc815\uc218\ub85c \ub098\ub217\uc148\uc744 \ud560 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c ES.106: \uc74c\uc218\uac12\uc744 \ub9c9\uc73c\ub824\uace0 unsigned \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason unsigned \ub97c \uc120\ud0dd\ud558\ub294 \uac83\uc740 \uc815\uc218\ub4e4\uc758 \ub3d9\uc791\uc774 \ub2ec\ub77c\uc9c0\uac8c \ub9cc\ub4e0\ub2e4. \uc5ec\uae30\uc5d0\ub294 \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0, Overflow \uacbd\uace0, \ubd80\ud638 \uc720\ubb34\uc5d0 \uc758\ud55c \uc624\ub958\uc758 \uac00\ub2a5\uc131\uc774 \ud3ec\ud568\ub41c\ub2e4. unsigned \ub97c \uc0ac\uc6a9\ud558\ub294\uac83 \uc790\uccb4\ub294 \uc74c\uc218\uac00 \uc0dd\uae38 \uac00\ub2a5\uc131\uc744 \uc6d0\ucc9c\ubd09\uc1c4\ud558\uc9c0 \uc54a\ub294\ub2e4. Example unsigned int u1 = - 2 ; // Valid: the value of u1 is 4294967294 int i1 = - 2 ; unsigned int u2 = i1 ; // Valid: the value of u2 is 4294967294 int i2 = u2 ; // Valid: the value of i2 is -2 \uc608\uc2dc\uc640 \uac19\uc740 (\uc644\uc804\ud788 \ud569\ubc95\uc778) \uc0dd\uc131 \ucf54\ub4dc\ub294 \uc2e4\uc81c\ub85c\ub294 \ucc3e\uc544\ub0b4\uae30 \uc5b4\ub835\uace0 \ub9ce\uc740 \uc624\ub958\uc758 \uc6d0\uc778\uc774\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c \uace0\ub824\ud574\ubcf4\ub77c: unsigned area ( unsigned height , unsigned width ) { // see also: I.6 \uc0ac\uc804 \uc870\uac74\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 `Expects()`\ub97c \uc0ac\uc6a9\ud558\ub77c return height * width ; } // ... int height ; cin >> height ; auto a = area ( height , 2 ); // if the input is -2 a becomes 4294967292 -1 \uc774 unsigned int \uc5d0\uc11c\ub294 \ucd5c\ub300\uac12\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c. Also, since unsigned arithmetic is modulo arithmetic the multiplication didn't overflow, it wrapped around. Example unsigned max = 100000 ; // \"accidental typo\", I mean to say 10'000 unsigned short x = 100 ; while ( x < max ) x += 100 ; // infinite loop x \uac00 \ubd80\ud638 \uc788\ub294 short \uc600\ub2e4\uba74, Overflow\uc5d0 \uc758\ud55c \ubbf8\uc815\uc758 \ud589\ub3d9\uc744 \ucef4\ud30c\uc77c\ub7ec\uac00 \uacbd\uace0\ud588\uc744 \uac83\uc774\ub2e4. Alternatives \ubd80\ud638 \uc788\ub294 \uc815\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\uace0 x >= 0 \ub97c \uac80\uc0ac\ud55c\ub2e4 \uc591\uc758 \uc815\uc218 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c\ub2e4 \uc815\uc218\uc758 \ubd80\ubd84 \ud0c0\uc785(subrange type)\uc744 \uc0ac\uc6a9\ud55c\ub2e4 Assert(-1 < x) \uc608\ub97c \ub4e4\uc790\uba74 struct Positive { int val ; Positive ( int x ) : val { x } { Assert ( 0 < x ); } operator int () { return val ; } }; int f ( Positive arg ) { return arg ; } int r1 = f ( 2 ); int r2 = f ( - 2 ); // throws Note ??? Enforcement \uc5b4\ub824\uc6c0: unsigned \ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \uc5c4\uccad\ub098\uac8c \ub9ce\uace0, \uc2e4\uc81c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc591\uc218 \ud0c0\uc785\uc744 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4. ES.107: \ubc30\uc5f4 \uc811\uadfc\uc5d0\ub294 unsigned \ub97c \uc4f0\uc9c0 \ub9d0\uace0 gsl::index \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ubd80\ud638 \uc720\ubb34\uc5d0 \ub530\ub978 \ud63c\uc120\uc744 \ub9c9\ub294\ub2e4. \ucd5c\uc801\ud654\ub97c \ub3d5\ub294\ub2e4. \uc624\ub958 \ud0d0\uc9c0\ub97c \ub3d5\ub294\ub2e4. auto \uc640 int \uc758 \ud568\uc815\uc744 \uc608\ubc29\ud55c\ub2e4. Example, bad vector < int > vec = /*...*/ ; // may not be big enough for ( int i = 0 ; i < vec . size (); i += 2 ) cout << vec [ i ] << '\\n' ; // risk wraparound for ( unsigned i = 0 ; i < vec . size (); i += 2 ) cout << vec [ i ] << '\\n' ; // may not be big enough for ( auto i = 0 ; i < vec . size (); i += 2 ) cout << vec [ i ] << '\\n' ; // verbose for ( vector < int >:: size_type i = 0 ; i < vec . size (); i += 2 ) cout << vec [ i ] << '\\n' ; // bug for ( auto i = vec . size () - 1 ; i >= 0 ; i -= 2 ) cout << vec [ i ] << '\\n' ; // may not be big enough for ( int i = vec . size () - 1 ; i >= 0 ; i -= 2 ) cout << vec [ i ] << '\\n' ; Example, good vector < int > vec = /*...*/ ; for ( gsl :: index i = 0 ; i < vec . size (); i += 2 ) // ok cout << vec [ i ] << '\\n' ; for ( gsl :: index i = vec . size () - 1 ; i >= 0 ; i -= 2 ) // ok cout << vec [ i ] << '\\n' ; Note \uae30\ubcf8 \ubc30\uc5f4(built-in array) \ud0c0\uc785\uc740 \ubd80\ud638 \uc788\ub294 \uc815\uc218\ub97c \ubc30\uc5f4 \uc811\uadfc\uc5d0 \uc0ac\uc6a9\ud55c\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucee8\ud14c\uc774\ub108\ub4e4\uc740 \ubd80\ud638 \uc5c6\ub294 \uc815\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub85c \uc778\ud574 \uc644\ubcbd\ud558\uac8c \ud638\ud658\ub418\ub294 \ud574\uacb0\ucc45\uc740 \uc5c6\ub2e4 (\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\ud14c\uc774\ub108\ub4e4\uc774 \ubbf8\ub798\uc5d0 \ubd80\ud638 \uc788\ub294 \uc815\uc218\ub85c \ubc30\uc5f4 \uc811\uadfc\uc744 \ud558\uc9c0 \uc54a\ub294 \ud55c). \uc774\uc640 \uad00\ub828\ub41c \ubb38\uc81c\ub4e4\ub85c \uc778\ud574, \ucda9\ubd84\ud55c \ud06c\uae30\ub97c \uac00\uc9c4\ub2e4\uace0 \ubcf4\uc7a5\ud558\ub294 gsl::index \ub97c \uc4f0\ub294 \uac83\uc774 \ub354 \ub0ab\ub2e4. Example template < typename T > struct My_container { public : // ... T & operator []( gsl :: index i ); // not unsigned // ... }; Example ??? demonstrate improved code generation and potential for error detection ??? Alternatives \uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \ub300\uc548\ub4e4 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 algorithm\ub4e4\uc744 \uc0ac\uc6a9\ud55c\ub2e4 \ubc94\uc704 \uae30\ubc18 for \ubb38\uc744 \uc0ac\uc6a9\ud55c\ub2e4 \ubc18\ubcf5\uc790\ub098 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4 Enforcement \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucee8\ud14c\uc774\ub108\ub4e4\uc774 \ubc14\ub00c\uc9c0 \uc54a\ub294 \ud55c \ub9e4\uc6b0 \uae4c\ub2e4\ub86d\ub2e4 (\ub108\ubb34 \ub9ce\uc740 \uacbd\uace0\ub97c \ub9c9\uae30 \uc704\ud574) \ube44\uad50\uc758 \ud53c\uc5f0\uc0b0\uc790 \uc911 \ud558\ub098\uac00 sizeof \ud639\uc740 \ucee8\ud14c\uc774\ub108\uc758 .size() \ub97c \uc0ac\uc6a9\ud558\uace0, \ub2e4\ub978 \ud55c\ucabd\uc740 ptrdiff_t \uacbd\uc6b0\ub294 \uc9c0\uc801\ud558\uc9c0 \ub9c8\ub77c","title":"Expr"},{"location":"Expr/#es","text":"\ud45c\ud604\uc2dd(expression)\uacfc \uad6c\ubb38(statement)\uc740 \ud589\uc704\uc640 \uc5f0\uc0b0\uc5d0 \ub300\ud574 \ud45c\ud604\ud558\ub294 \uac00\uc7a5 \uc9c1\uc811\uc801\uc778 \ubc29\ubc95\ub4e4\uc774\ub2e4. \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704 \ub0b4\uc5d0\uc11c\uc758 \uc120\uc5b8 \uc5ed\uc2dc \uad6c\ubb38\uc5d0 \ud3ec\ud568\ub41c\ub2e4. \uc774\ub984 \uc9d3\uae30\uc640 \uc8fc\uc11d, \ub4e4\uc5ec\uc4f0\uae30 \uaddc\uce59\uc5d0 \ub300\ud574\uc11c\ub294, NL: Naming and layout \uc744 \ucc38\uace0\ud558\ub77c. \uc77c\ubc18\uc801\uc778 \uaddc\uce59: ES.1: \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \"\uc9c1\uc811 \uc9e0 \ucf54\ub4dc\" \ub300\uc2e0 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c ES.2: \uc5b8\uc5b4 \uae30\ub2a5\uc744 \ubc14\ub85c \uc0ac\uc6a9\ud558\uae30\ub294 \ubcf4\ub2e4 \uc801\uc808\ud788 \ucd94\uc0c1\ud654\ud558\ub77c \uc120\uc5b8 \uaddc\uce59: ES.5: \uc720\ud6a8\ubc94\uc704(scope)\ub294 \uc791\uac8c \uc720\uc9c0\ud558\ub77c ES.6: for \ubb38\uc758 \ubcc0\uc218\ub294 \uc720\ud6a8\ubc94\uc704\ub97c \uc81c\ud55c\ud558\uae30 \uc704\ud574 \ucd08\uae30\ud654\uc640 \uc870\uac74 \uac80\uc0ac\ubd80\ubd84\uc5d0\uc11c\ub9cc \uc120\uc5b8\ud558\ub77c ES.7: \uc77c\ubc18\uc801\uc774\uac70\ub098 \uc9c0\uc5ed\ubc94\uc704 \ubcc0\uc218\ub4e4\uc758 \uc774\ub984\uc740 \uc9e7\uac8c, \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uae38\uac8c \ud558\ub77c ES.8: \ube44\uc2b7\ud574\ubcf4\uc774\ub294 \uc774\ub984\uc740 \ud53c\ud558\ub77c ES.9: ALL_CAPS \uac19\uc740 \uc774\ub984\uc744 \ud53c\ud558\ub77c ES.10: \uc120\uc5b8\uc740 (\uc624\uc9c1) \ud558\ub098\uc758 \uc774\ub984\uc744 \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4 ES.11: \ud0c0\uc785 \uc774\ub984\uc758 \ubd88\ud544\uc694\ud55c \ubc18\ubcf5\uc744 \ub9c9\uc744\ub54c\ub294 auto \ub97c \uc0ac\uc6a9\ud558\ub77c ES.12: \uc774\ub984\uc744 \ub36e\uc5b4\uc4f0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c ES.20: \ud56d\uc0c1 \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud558\ub77c ES.21: \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \ub54c \ubcc0\uc218\ub098 \uc0c1\uc218\ub97c \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c ES.22: \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud560 \uac12\uc774 \uc0dd\uae38 \ub54c\uae4c\uc9c0 \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c ES.23: {} \ucd08\uae30\ud654 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c ES.24: \ud3ec\uc778\ud130\ub294 unique_ptr<T> \uc5d0 \ub2f4\uc544\ub77c ES.25: \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uac1c\uccb4\ub97c const \ud639\uc740 constexpr \ub85c \uc120\uc5b8\ud558\ub77c ES.26: \uc11c\ub85c \uc0c1\uad00\uc5c6\ub294 \ubaa9\uc801\uc5d0 \ud558\ub098\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.27: \uc2a4\ud0dd\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ubc30\uc5f4\uc740 std::array \ub098 stack_array \ub97c \uc0ac\uc6a9\ud558\ub77c ES.28: \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654, \ud2b9\ud788 const \ubcc0\uc218\uc758 \ucd08\uae30\ud654\uc5d0\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c ES.30: \ud504\ub85c\uadf8\ub7a8 \ud14d\uc2a4\ud2b8\ub97c \ub2e4\ub8e8\uae30(manipulate) \uc704\ud574 \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.31: \ub9e4\ud06c\ub85c\ub97c \uc0c1\uc218\ub098 \"\ud568\uc218\"\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.32: \ubaa8\ub4e0 \ub9e4\ud06c\ub85c\ub294 ALL_CAPS \ud615\ud0dc\ub85c \uc120\uc5b8\ud558\ub77c ES.33: \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \uace0\uc720\ud55c \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c ES.34: (C-\uc2a4\ud0c0\uc77c\uc758) \uac00\ubcc0\uc778\uc790 \ud568\uc218\ub97c \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c \ud45c\ud604\uc2dd \uaddc\uce59: ES.40: \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\uc744 \ud53c\ud558\ub77c ES.41: \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\uac00 \ubd88\ubd84\uba85\ud558\uba74, \uc18c\uad04\ud638\ub97c \uc0ac\uc6a9\ud558\ub77c(parenthesize) ES.42: \ud3ec\uc778\ud130\ub294 \uac04\ub2e8\ud558\uace0 \uc9c1\uad00\uc801\uc778 \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\ub77c ES.43: \ud3c9\uac00 \uc21c\uc11c\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ud45c\ud604\uc2dd\uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.44: \ud568\uc218 \uc778\uc790\uac00 \ud45c\ud604\uc2dd \ud3c9\uac00 \uc21c\uc11c\uc758 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uac8c \ud558\ub77c ES.45: \uc774\uc720\ub97c \uc54c \uc218 \uc5c6\ub294 \uc0c1\uc218(magic constant)\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c; \uc0c1\uc9d5\uc801\uc778 \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c ES.46: \ud0c0\uc785 \ubc94\uc704\ub97c \ucd95\uc18c\ud558\ub294 \ubcc0\ud658\uc744 \ud53c\ud558\ub77c ES.47: 0 \ud639\uc740 NULL \ubcf4\ub2e4\ub294 nullptr \ub97c \uc0ac\uc6a9\ud558\ub77c ES.48: \ud0c0\uc785 \ubcc0\ud658(cast)\uc744 \ud53c\ud558\ub77c ES.49: \ud0c0\uc785 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \ubbf8\ub9ac \uc815\uc758\ub41c \ubc29\ubc95\uc73c\ub85c \ubcc0\ud658(named cast)\ud558\ub77c ES.50: const \ub97c \uc81c\uac70\ud558\uc9c0 \ub9c8\ub77c ES.55: \ubc94\uc704 \uac80\uc0ac\uac00 \ud544\uc694\uc5c6\uac8c \ud558\ub77c ES.56: std::move() \ub294 \uac1c\uccb4\ub97c \ub2e4\ub978 \uc720\ud6a8\ubc94\uc704\ub85c \uba85\uc2dc\uc801\uc73c\ub85c \uc62e\uaca8\uc57c \ud560\ub54c\ub9cc \uc0ac\uc6a9\ud558\ub77c ES.60: \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub294 \ud568\uc218 \uc678\ubd80\uc5d0\uc11c new \uc640 delete \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c ES.61: \ubc30\uc5f4\uc740 delete[] , \ub2e8\uc77c \uac1c\uccb4\ub294 delete \ub97c \uc0ac\uc6a9\ud574\uc11c \ud574\uc81c\ud558\ub77c ES.62: \uc11c\ub85c \ub2e4\ub978 \ubc30\uc5f4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \ube44\uad50\ud558\uc9c0 \ub9c8\ub77c ES.63: \ubcf5\uc0ac \uc190\uc2e4(slice)\uc774 \uc5c6\ub3c4\ub85d \ud558\ub77c ES.64: \uac1c\uccb4\ub97c \uc0dd\uc131\ud560 \ub54c\ub294 T{e} \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c ES.65: \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740(invalid) \ud3ec\uc778\ud130\ub97c \uc5ed\ucc38\uc870\ud558\uc9c0 \ub9c8\ub77c \uad6c\ubb38 \uaddc\uce59: ES.70: \uc120\ud0dd\uc744 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 if \uad6c\ubb38\ubcf4\ub2e4\ub294 switch \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c ES.71: \uac00\ub2a5\ud558\ub2e4\uba74 \uc77c\ubc18 for \uad6c\ubb38 \ubcf4\ub2e4 \ubc94\uc704\uae30\ubc18 for -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c ES.72: \ub8e8\ud504 \ubcc0\uc218\uac00 \uc788\ub2e4\uba74 while -\uad6c\ubb38\ubcf4\ub2e4 for -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c ES.73: \ub8e8\ud504 \ubcc0\uc218\uac00 \uc5c6\ub2e4\uba74 for -\uad6c\ubb38\ubcf4\ub2e4 while -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c ES.74: \ub8e8\ud504 \ubcc0\uc218\ub294 for -\uad6c\ubb38\uc758 \ucd08\uae30\ud654 \ubd80\ubd84\uc5d0\uc11c \uc120\uc5b8\ud558\ub77c ES.75: do -\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.76: goto \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.77: break \uc640 continue \uc758 \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c ES.78: \ub0b4\uc6a9\uc774 \uc788\ub294 case \ub294 break \ud558\ub77c ES.79: (\uc624\uc9c1) \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc11c default \ub97c \uc0ac\uc6a9\ud558\ub77c ES.84: \uc774\ub984\uc774 \uc5c6\ub294 \uc9c0\uc5ed\ubcc0\uc218\ub294 \uc120\uc5b8(\ud558\ub824\uace0)\ud558\uc9c0 \ub9c8\ub77c ES.85: \ube44\uc5b4\uc788\ub294 \uad6c\ubb38\uc740 \ub208\uc5d0\ub744\uac8c \ud558\ub77c ES.86: for \ubc18\ubcf5\ubb38(body) \uc548\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud558\uc9c0 \ub9c8\ub77c ES.87: \uc870\uac74\uc5d0 \ubd88\ud544\uc694\ud55c == \ub098 != \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c \uc0b0\uc220\uc5f0\uc0b0 \uaddc\uce59: ES.100: \ubd80\ud638\uac00 \uc788\ub294 \ud0c0\uc785\uacfc \uc5c6\ub294 \ud0c0\uc785\uc744 \ud568\uaed8 \uc5f0\uc0b0\ud558\uc9c0 \ub9c8\ub77c ES.101: \ube44\ud2b8 \uc870\uc791\uc2dc\uc5d0\ub294 \ubd80\ud638\uac00 \uc5c6\ub294(unsigned) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c ES.102: \uc5f0\uc0b0\uc5d0\ub294 \ubd80\ud638\uac00 \uc788\ub294(signed) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c ES.103: Overflow\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c ES.104: Underflow\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c ES.105: 0\uc73c\ub85c \ub098\ub204\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c ES.106: \uc74c\uc218\uac12\uc744 \ub9c9\uc73c\ub824\uace0 unsigned \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ES.107: \ubc30\uc5f4 \uc811\uadfc\uc5d0\ub294 unsigned \ub97c \uc4f0\uc9c0 \ub9d0\uace0 gsl::index \ub97c \uc0ac\uc6a9\ud558\ub77c","title":"ES: \ud45c\ud604\uc2dd\uacfc \uad6c\ubb38"},{"location":"Expr/#es1","text":"","title":"ES.1: \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \"\uc9c1\uc811 \uc9e0 \ucf54\ub4dc\" \ub300\uc2e0 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason","text":"\ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \uc5b8\uc5b4\uc758 \uae30\ub2a5\uc744 \uc9c1\uc811\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\ubcf4\ub2e4 \uc27d\uace0, \ub354 \uc9e7\uac8c \uc791\uc131\ud560 \uc218 \uc788\uace0, \uace0\uc218\uc900\uc758 \ucd94\uc0c1\ud654\uac00 \uac00\ub2a5\ud558\ub2e4. ISO C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub110\ub9ac \uc54c\ub824\uc838\uc788\uc73c\uba70 \ud14c\uc2a4\ud2b8\uac00 \uc798\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub2e4. \ubaa8\ub4e0 C++ \uad6c\ud604\uccb4\uc5d0\uc11c \uc81c\uacf5\ud558\uace0 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example","text":"auto sum = accumulate ( begin ( a ), end ( a ), 0.0 ); // good accumulate \uc758 Ranges \ubc84\uc804\uc774 \ub354 \ub0ab\ub2e4: auto sum = accumulate ( v , 0.0 ); // better \uc798 \uc54c\ub824\uc9c4 \uc54c\uace0\ub9ac\uc998\uc744 \uc9c1\uc811 \ub9cc\ub4e4 \ud544\uc694\ub294 \uc5c6\ub2e4: int max = v . size (); // bad: verbose, \ubaa9\uc801\uc774 \uc801\ud600\uc788\uc9c0 \uc54a\ub2e4 double sum = 0.0 ; for ( int i = 0 ; i < max ; ++ i ) sum = sum + v [ i ];","title":"Example"},{"location":"Expr/#exception","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ub300\ub2e4\uc218\uac00 \ub3d9\uc801 \ud560\ub2f9(\uc790\uc720 \uc800\uc7a5\uc18c)\uc5d0 \uc758\uc874\ud55c\ub2e4. \uc774\ub7f0 \ubd80\ubd84\uc740 \uc54c\uace0\ub9ac\uc998\uc758 \ubb38\uc81c\ub294 \uc544\ub2d0\uc9c0\ub77c\ub3c4, \uc81c\ud55c \uc2dc\uac04 \ub0b4\uc5d0 \uc751\ub2f5\uc131\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294 \uacbd\uc6b0(hard real-time)\ub098 \uc784\ubca0\ub514\ub4dc \ud658\uacbd\uc5d0\ub294 \uc801\ud569\ud558\uc9c0 \uc54a\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0\ub294 \ube44\uc2b7\ud55c \uae30\ub2a5\uc744 \uad6c\ud604\ud558\uc5ec \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcfc \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc2a4\ud0c0\uc77c\ub85c \uad6c\ud604\ub41c \uba54\ubaa8\ub9ac \ud480 \ud560\ub2f9 \ucee8\ud14c\uc774\ub108 \uac19\uc740 \uac83\ub4e4\uc774\ub2e4.","title":"Exception"},{"location":"Expr/#enforcement","text":"\uc27d\uc9c0 \uc54a\ub2e4. ??? \uc9c0\uc800\ubd84\ud55c \ubc18\ubcf5\ubb38, \uc911\ucca9 \ubc18\ubcf5\ubb38, \uae34 \ud568\uc218, \ud568\uc218 \ud638\ucd9c\uc758 \ubd80\uc7ac, \ub0b4\uc7a5 \ud0c0\uc785\uc774 \uc544\ub2cc \ud0c0\uc785\uc744 \uac70\uc758 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0. \uc21c\ud658 \ubcf5\uc7a1\uc131?","title":"Enforcement"},{"location":"Expr/#es2","text":"","title":"ES.2: \uc5b8\uc5b4 \uae30\ub2a5\uc744 \ubc14\ub85c \uc0ac\uc6a9\ud558\uae30\ub294 \ubcf4\ub2e4 \uc801\uc808\ud788 \ucd94\uc0c1\ud654\ud558\ub77c"},{"location":"Expr/#reason_1","text":"\"\uc801\uc808\ud55c \ucd94\uc0c1\ud654\"(\uc608\ub97c \ub4e4\uc5b4 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \ud074\ub798\uc2a4 \uac19\uc740 \uac83)\uac00 \uc5b8\uc5b4\ubcf4\ub2e4 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uac1c\ub150\uc5d0 \ub354 \uac00\uae5d\ub2e4. \ucf54\ub4dc\ub97c \uc9e7\uace0 \uba85\ud655\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc73c\uba70, \ud14c\uc2a4\ud2b8\ud558\uae30\uc5d0\ub3c4 \ub354 \uc27d\ub2e4.","title":"Reason"},{"location":"Expr/#example_1","text":"vector < string > read1 ( istream & is ) // good { vector < string > res ; for ( string s ; is >> s ;) res . push_back ( s ); return res ; } \uc544\ub798\uc640 \uac19\uc740 \uc804\ud1b5\uc801\uc778 \ucf54\ub4dc, \uc2dc\uc2a4\ud15c \ub808\ubca8\uacfc \uac70\uc758 \ub3d9\ub4f1\ud55c \uc800\uc218\uc900(low-level) \ucf54\ub4dc\ub294 \uae38\uace0, \uc9c0\uc800\ubd84\ud558\uace0, \uc774\ud574\ud558\uae30\ub3c4 \uc5b4\ub835\uace0, \ub290\ub9ac\uac8c \ub3cc\uc544\uac04\ub2e4: char ** read2 ( istream & is , int maxelem , int maxstring , int * nread ) // bad: verbose and incomplete { auto res = new char * [ maxelem ]; int elemcount = 0 ; while ( is && elemcount < maxelem ) { auto s = new char [ maxstring ]; is . read ( s , maxstring ); res [ elemcount ++ ] = s ; } nread = & elemcount ; return res ; } \uc624\ubc84\ud50c\ub85c\uc6b0\ub098 \uc624\ub958\ucc98\ub9ac \ucf54\ub4dc\uac00 \ud55c \ubc88 \ub4e4\uc5b4\uac00\uac8c \ub418\uba74, \ucf54\ub4dc\ub294 \uae09\uaca9\ud788 \uc9c0\uc800\ubd84\ud574\uc9c4\ub2e4. \uadf8\ub9ac\uace0, \ubc18\ud658\ud558\ub294 \ud3ec\uc778\ud130\uc640 \ubc30\uc5f4\ub85c \uad6c\ud604\ub418\ub294 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 delete \ub97c \uaf2d \ud574\uc918\uc57c\ud558\ub294 \ubb38\uc81c\ub3c4 \uc788\ub2e4.","title":"Example"},{"location":"Expr/#enforcement_1","text":"\uc27d\uc9c0 \uc54a\ub2e4. ??? \uc9c0\uc800\ubd84\ud55c \ubc18\ubcf5\ubb38, \uc911\ucca9 \ubc18\ubcf5\ubb38, \uae34 \ud568\uc218, \ud568\uc218 \ud638\ucd9c\uc758 \ubd80\uc7ac, \ub0b4\uc7a5 \ud0c0\uc785\uc774 \uc544\ub2cc \ud0c0\uc785\uc744 \uac70\uc758 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0. \uc21c\ud658 \ubcf5\uc7a1\uc131?","title":"Enforcement"},{"location":"Expr/#esdcl-declarations","text":"\uc120\uc5b8\uc740 \uad6c\ubb38(statement)\uc774\ub2e4. \ud55c \uc120\uc5b8\uc740 \uc784\uc758\uc758 \uc720\ud6a8 \ubc94\uc704\uc5d0 \ud558\ub098\uc758 \uc774\ub984\uc744 \ub9cc\ub4e4\uac70\ub098 \uc774\ub984\uc788\ub294 \uac1c\uccb4(named object)\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\ub2e4.","title":"ES.dcl: \uc120\uc5b8(Declarations)"},{"location":"Expr/#es5-scope","text":"","title":"ES.5: \uc720\ud6a8\ubc94\uc704(scope)\ub294 \uc791\uac8c \uc720\uc9c0\ud558\ub77c"},{"location":"Expr/#reason_2","text":"\uac00\ub3c5\uc131\uc774 \uc88b\uc544\uc9c4\ub2e4. \ub9ac\uc18c\uc2a4 \uc810\uc720\ub97c \ucd5c\uc18c\ud654\ud560 \uc218 \uc788\ub2e4. \uac12\uc758 \uc798\ubabb\ub41c \uc0ac\uc6a9\uc744 \ud53c\ud560 \uc218 \uc788\ub2e4. Alternative Formulation : \ubd88\ud544\uc694\ud558\uac8c \ud070 \uc2a4\ucf54\ud504\uc5d0 \ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c","title":"Reason"},{"location":"Expr/#example_2","text":"void use () { int i ; // bad: i \uac00 \ubc18\ubcf5\ubb38 \uc774\ud6c4\uc5d0\ub3c4 \ubd88\ud544\uc694\ud558\uac8c \uc811\uadfc \uac00\ub2a5\ud558\ub2e4 for ( i = 0 ; i < 20 ; ++ i ) { /* ... */ } // \uc704\uc5d0\uc11c \uc120\uc5b8\ud55c i\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4 for ( int i = 0 ; i < 20 ; ++ i ) { // good: i \ub294 for \ubc18\ubcf5\ubb38\uc758 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud55c\ub2e4 /* ... */ } // good: pc \ub294 if \ubb38\uc758 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud55c\ub2e4 if ( auto pc = dynamic_cast < Circle *> ( ps )) { // ... deal with Circle ... } else { // ... handle error ... } }","title":"Example"},{"location":"Expr/#example-bad","text":"void use ( const string & name ) { string fn = name + \".txt\" ; ifstream is { fn }; Record r ; is >> r ; // ... \uc5ec\uae30\uc5d0\ub294 fn\uacfc is\ub97c \uc4f0\uba74 \uc548\ub418\ub294 200 \uc904\uc9dc\ub9ac \ucf54\ub4dc\uac00 \ub4e4\uc5b4\uac04\ub2e4 ... } \uc774 \ucf54\ub4dc\ub294 \uae38\ub2e4\ub294 \ubb38\uc81c\uc810\uc774 \uc788\uc9c0\ub9cc, fn \uc758 \uac12\uacfc is \uac00 \uac16\uace0 \uc788\ub294 \ud30c\uc77c \ud578\ub4e4\uc774 \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \ud6e8\uc52c \uae38\uac8c \uc720\uc9c0\ub41c\ub2e4\ub294 \uac8c \ubb38\uc81c\ub2e4. \uc774\ub7ec\uba74 \ud568\uc218\uc758 \ub4b7\ubd80\ubd84\uc5d0\uc11c is \uc640 fn \uc744 \uc2e4\uc218\ub85c \uc0ac\uc6a9\ud574\ubc84\ub9b4 \uc218 \uc788\ub2e4. \uc774\ub7f4 \ub54c\ub294, \ubd84\ud560\ud574\ubc84\ub9ac\ub294 \uac8c \ub0ab\ub2e4: Record load_record ( const string & name ) { string fn = name + \".txt\" ; ifstream is { fn }; Record r ; is >> r ; return r ; } void use ( const string & name ) { Record r = load_record ( name ); // ... 200 \uc904 \ucf54\ub4dc ... }","title":"Example, bad"},{"location":"Expr/#enforcement_2","text":"\ub8e8\ud504 \ubc14\uae65\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\uac00 \uc120\uc5b8\ub418\uace0 \uc774\ud6c4\uc5d0\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud55c\ub2e4 \ud30c\uc77c \ud578\ub4e4\uc774\ub098 \uc7a0\uae08\uacfc \uac19\uc740 \uc911\uc694\ud55c \ub9ac\uc18c\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uac00 (\uc801\ub2f9\ud788 \ud070) N\uc904 \uc774\uc0c1 \uacc4\uc18d\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es6-for","text":"","title":"ES.6: for \ubb38\uc758 \ubcc0\uc218\ub294 \uc720\ud6a8\ubc94\uc704\ub97c \uc81c\ud55c\ud558\uae30 \uc704\ud574 \ucd08\uae30\ud654\uc640 \uc870\uac74 \uac80\uc0ac\ubd80\ubd84\uc5d0\uc11c\ub9cc \uc120\uc5b8\ud558\ub77c"},{"location":"Expr/#reason_3","text":"\uac00\ub3c5\uc131. \uc2dc\uc2a4\ud15c \uc790\uc6d0 \uc810\uc720\ub97c \ucd5c\uc18c\ud654\ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example_3","text":"void use () { for ( string s ; cin >> s ;) v . push_back ( s ); // good: i \ub294 for \ubc18\ubcf5\ubb38\uc758 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud55c\ub2e4 for ( int i = 0 ; i < 20 ; ++ i ) { // ... } // good: pc \ub294 if \ubb38\uc758 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc874\uc7ac\ud55c\ub2e4 if ( auto pc = dynamic_cast < Circle *> ( ps )) { // ... deal with Circle ... } else { // ... handle error ... } }","title":"Example"},{"location":"Expr/#enforcement_3","text":"\ub8e8\ud504 \ubc14\uae65\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\uac00 \uc120\uc5b8\ub418\uace0 \uc774\ud6c4\uc5d0\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc744 \ub54c \uc9c0\uc801\ud558\ub77c (\uc5b4\ub824\uc6c0) \ub8e8\ud504 \ubc14\uae65\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\ub97c \uc120\uc5b8\ud558\uace0, \ub8e8\ud504\uac00 \ub05d\ub09c \ub4a4\uc5d0 \uad00\uacc4\uc5c6\ub294 \ubaa9\uc801\uc73c\ub85c \uadf8 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Expr/#c17-example","text":"C++17 \uc5d0\uc11c\ub294 if \uc640 switch \uc5d0 \ucd08\uae30\ud654 \uad6c\ubb38\uc774 \ucd94\uac00\ub418\uc5c8\ub2e4. C++ 17\uc744 \uc9c0\uc6d0\ud558\ub294 \uacbd\uc6b0\ub294 \uc544\ub798\ucc98\ub7fc \uc791\uc131\ud560 \uc218 \uc788\ub2e4. map < int , string > mymap ; if ( auto result = mymap . insert ( value ); result . second ) { // insert\uac00 \uc131\uacf5\ud588\uace0, \ubc18\ud658\ub41c \uacb0\uacfc\ub294 \uc774 \ube14\ub85d\uc5d0\uc11c\ub9cc \uc720\ud6a8\ud558\ub2e4(valid) use ( result . first ); // ok // ... } // result \ub294 \uc774 \uc2dc\uc810\uc5d0 \ud30c\uad34\ub41c\ub2e4","title":"C++17 example"},{"location":"Expr/#c17-enforcement-if-using-a-c17-compiler","text":"\uc120\ud0dd/\ubc18\ubcf5 \uad6c\ubb38\uc758 \ubcc0\uc218\uac00 \ubbf8\ub9ac \uc120\uc5b8\ub418\uace0 \uad6c\ubb38 \uc774\ud6c4\uc5d0\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud558\ub77c (\uc5b4\ub824\uc6c0) \uc120\ud0dd/\ubc18\ubcf5 \uad6c\ubb38\uc758 \ubcc0\uc218\uac00 \ubbf8\ub9ac \uc120\uc5b8\ub418\uace0 \uad6c\ubb38 \uc774\ud6c4\uc5d0 \ub2e4\ub978 \uc0c1\uad00\uc5c6\ub294 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c","title":"C++17 enforcement (if using a C++17 compiler)"},{"location":"Expr/#es7","text":"","title":"ES.7: \uc77c\ubc18\uc801\uc774\uac70\ub098 \uc9c0\uc5ed\ubc94\uc704 \ubcc0\uc218\ub4e4\uc758 \uc774\ub984\uc740 \uc9e7\uac8c, \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uae38\uac8c \ud558\ub77c"},{"location":"Expr/#reason_4","text":"\uac00\ub3c5\uc131. \uad00\uacc4\uc5c6\ub294 \ube44-\uc9c0\uc5ed(non-local) \ubcc0\uc218 \uac04\uc758 \ucda9\ub3cc \ud655\ub960\uc744 \ub0ae\ucd98\ub2e4.","title":"Reason"},{"location":"Expr/#example_4","text":"\uad00\uc2b5\uc801\uc73c\ub85c \uc4f0\uc774\ub294 \uc9e7\uc740 \uc9c0\uc5ed\ubcc0\uc218\uba85\uc740 \uac00\ub3c5\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4: template < typename T > // good void print ( ostream & os , const vector < T >& v ) { for ( gsl :: index i = 0 ; i < v . size (); ++ i ) os << v [ i ] << '\\n' ; } \uc778\ub371\uc2a4\ub294 \uad00\uc2b5\uc801\uc73c\ub85c i \ub97c \uc0ac\uc6a9\ud558\uace0, \uc774 \uc77c\ubc18 \ud568\uc218\uc5d0\ub294 \ubca1\ud130\uc758 \uc758\ubbf8\ub97c \uc54c\ub9cc\ud55c \ud78c\ud2b8\uac00 \uc5c6\uc73c\ubbc0\ub85c, v \uac00 \uc5b4\ub5a4 \uacbd\uc6b0\uc5d0\ub4e0\uc9c0 \ub9de\ub294 \uc774\ub984\uc774\ub2e4. \ube44\uad50: template < typename Element_type > // bad: \uc77d\uae30 \uc5b4\ub835\ub2e4 void print ( ostream & target_stream , const vector < Element_type >& current_vector ) { for ( gsl :: index current_element_index = 0 ; current_element_index < current_vector . size (); ++ current_element_index ) target_stream << current_vector [ current_element_index ] << '\\n' ; } \uacfc\uc7a5\ud574\uc11c \ud45c\ud604\ud558\uae34 \ud588\uc9c0\ub9cc, \uc774\uac83\ubcf4\ub2e4 \ub354 \uc2ec\ud55c \uac83\ub3c4 \ubcf8\uc801\uc774 \uc788\ub2e4.","title":"Example"},{"location":"Expr/#example_5","text":"\uad00\uc2b5\uc5d0 \ub530\ub974\uc9c0 \uc54a\ub294 \uc9e7\uc740 \ube44\uc9c0\uc5ed \ubcc0\uc218\ub294 \ucf54\ub4dc\ub97c \ubaa8\ud638\ud558\uac8c \ub9cc\ub4e0\ub2e4: void use1 ( const string & s ) { // ... tt ( s ); // bad: what is tt()? // ... } \ube44\uc9c0\uc5ed \uac1c\uccb4\ub4e4\uc5d0\ub294 \uc880 \ub354 \uac00\ub3c5\uc131 \uc788\ub294 \uc774\ub984\uc744 \uc4f0\uba74 \ub098\uc544\uc9c4\ub2e4: void use1 ( const string & s ) { // ... trim_tail ( s ); // better // ... } \uc774\ub807\uac8c \ud558\uba74, \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\uc774 trim_tail \uc758 \uc758\ubbf8\ub97c \uc54c \uc218 \uc788\uac8c \ub418\uace0, \uae30\uc5b5\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4.","title":"Example"},{"location":"Expr/#example-bad_1","text":"\ub0b4\uc6a9\uc774 \uae34 \ud568\uc218\uc758 \uc778\uc790\ub294 \uc0ac\uc2e4\uc0c1 \ube44\uc9c0\uc5ed \ubcc0\uc218\ub77c\uace0 \ubcfc \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \uc778\uc790\ub4e4\uc758 \uc774\ub984\uc740 \uc801\uc808\ud55c \uc758\ubbf8\ub97c \ub2f4\uc544\uc57c \ud55c\ub2e4: void complicated_algorithm ( vector < Record >& vr , const vector < int >& vi , map < string , int >& out ) // vi\uc758 \uc778\ub371\uc2a4\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc11c // vr\uc5d0\uc11c \uc774\ubca4\ud2b8\ub97c \uc77d\uace0 (Records) // out\uc5d0 (name, index) \uc30d\uc744 \ub123\ub294\ub2e4 { // ... 500 lines of code using vr, vi, and out ... } \ud568\uc218\ub294 \uc9e7\uac8c \uc720\uc9c0\ud558\ub294 \uac83\uc744 \uad8c\uc7a5\ud558\uc9c0\ub9cc, \uc774 \uaddc\uce59\uc744 \ubaa8\ub450 \uc801\uc6a9\uc2dc\ud0a4\uae34 \ud798\ub4e4 \ub54c\uac00 \uc788\ub2e4. \uadf8\ub7f4 \uacbd\uc6b0\uc5d4 \ubcc0\uc218\uc5d0 \uc774\ub984\uc744 \uc801\uc808\ud788 \ubd80\uc5ec\ud574\uc57c \ud55c\ub2e4.","title":"Example, bad"},{"location":"Expr/#enforcement_4","text":"\uc9c0\uc5ed \ubcc0\uc218\uc640 \ube44\uc9c0\uc5ed \ubcc0\uc218\uc758 \uc774\ub984\uc774 \uc720\uc9c0\ub418\ub294 \ubc94\uc704\uc758 \uae38\uc774\ub97c \ud655\uc778\ud55c\ub2e4. \ub3d9\uc2dc\uc5d0 \ud568\uc218\uc758 \uae38\uc774\ub97c \ud568\uaed8 \uace0\ub824\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#es8","text":"","title":"ES.8: \ube44\uc2b7\ud574\ubcf4\uc774\ub294 \uc774\ub984\uc740 \ud53c\ud558\ub77c"},{"location":"Expr/#reason_5","text":"\ucf54\ub4dc\uc758 \uba85\ud655\ud568\uacfc \uac00\ub3c5\uc131. \ub108\ubb34 \ube44\uc2b7\ud55c \uc774\ub984\uc740 \uc774\ud574\ub97c \uc800\ud574\ud558\uace0 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc18c\uc9c0\ub97c \ub0b3\ub294\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_2","text":"if ( readable ( i1 + l1 + ol + o1 + o0 + ol + o1 + I0 + l0 )) surprise ();","title":"Example; bad"},{"location":"Expr/#example-bad_3","text":"\uac19\uc740 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \ud0c0\uc785\uc774 \uc544\ub2cc \uac83\uc744 \ud0c0\uc785\uc758 \uc774\ub984\uacfc \uac19\uc740 \uc774\ub984\uc73c\ub85c \uc120\uc5b8\ud558\uc9c0\ub9c8\ub77c. \uc774\ub7ec\uba74 struct \ud639\uc740 enum \uc744 \uc0ac\uc6a9\ud574\uc11c \uc774\ub984\uc758 \uc758\ubbf8\uc744 \uad6c\ubd84\ud560 \ud544\uc694\uac00 \uc5c6\uac8c \ub41c\ub2e4. struct X \uac19\uc740 \ucf54\ub4dc\ub294 \uc774\ub984 \ud0d0\uc0c9(lookup)\uc774 \uc2e4\ud328\ud558\uba74 \uc554\ubb35\uc801\uc73c\ub85c X \ub85c \uac04\uc8fc\ub418\uae30 \ub54c\ubb38\uc5d0 \uc624\ub958\uc758 \uc6d0\uc778\uc744 \uc81c\uac70\ud558\ub294 \ud6a8\uacfc\ub3c4 \uc5bb\uc744 \uc218 \uc788\ub2e4. struct foo { int n ; }; struct foo foo (); // BAD, foo\ub294 \uc774\ubbf8 \ud0c0\uc785\uc758 \uc774\ub984\uc73c\ub85c \uc4f0\uc774\uace0 \uc788\ub2e4 struct foo x = foo (); // \uc124\uba85\uc774 \ud544\uc694\ud558\ub2e4","title":"Example; bad"},{"location":"Expr/#exception_1","text":"\uc880 \uc624\ub798\ub41c(antique) \ud5e4\ub354 \ud30c\uc77c\ub4e4\uc740 \ud0c0\uc785\uc774 \uc544\ub2cc \uac83\uc5d0 \ud0c0\uc785\uacfc \uac19\uc740 \uc774\ub984\uc744 \ubd99\uc5ec\ub193\uc558\uc744 \uc218\ub3c4 \uc788\ub2e4.","title":"Exception"},{"location":"Expr/#enforcement_5","text":"\uc774\ubbf8 \uc54c\ub824\uc9c4 (\ud63c\ub780\uc744 \uc77c\uc73c\ud0a4\ub294) \uae00\uc790 \ud639\uc740 \uc22b\uc790 \uc870\ud569\uc744 \uc0ac\uc6a9\ud558\ub294 \uc774\ub984\uc774 \uc788\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4 \ubcc0\uc218, \ud568\uc218, \uc5f4\uac70\uc790(enumerator)\uc758 \uc120\uc5b8\uc774 \uac19\uc740 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \uc120\uc5b8\ub41c \ud074\ub798\uc2a4 \ud639\uc740 \uc5f4\uac70\ud615\uc744 \uac00\ub9ac\ub294(hide) \uacbd\uc6b0 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es9-all_caps","text":"","title":"ES.9: ALL_CAPS \uac19\uc740 \uc774\ub984\uc744 \ud53c\ud558\ub77c"},{"location":"Expr/#reason_6","text":"\uc774\ub7f0 \uc774\ub984\uc740 \ubcf4\ud1b5 \ub9e4\ud06c\ub85c\ub97c \uc815\uc758\ud560 \ub54c \uc0ac\uc6a9\ud55c\ub2e4. \ub530\ub77c\uc11c ALL_CAPS \ud615\ud0dc\uc758 \uc774\ub984\uc740 \ub9e4\ud06c\ub85c\uc640 \ucda9\ub3cc\ub420 \uac00\ub2a5\uc131\uc774 \ub9ce\ub2e4.","title":"Reason"},{"location":"Expr/#example_6","text":"// \uc5b4\ub5a4 \ud5e4\ub354\ud30c\uc77c\uc758 \uc5b4\ub290 \uc9c0\uc810: #define NE != // \ub2e4\ub978 \uc5b4\ub5a4 \ud5e4\ub354\ud30c\uc77c\uc758 \uc5b4\ub290 \uc9c0\uc810: enum Coord { N , NE , NW , S , SE , SW , E , W }; // \uc5b4\ub290 \ubd88\uc30d\ud55c \ud504\ub85c\uadf8\ub798\uba38\uc758 .cpp \ud30c\uc77c \uc5b4\ub290 \uc9c0\uc810: switch ( direction ) { case N : // ... case NE : // ... // ... }","title":"Example"},{"location":"Expr/#note","text":"\ub2e8\uc9c0 \uc0c1\uc218\uac00 \ub9e4\ud06c\ub85c\ucc98\ub7fc \uc4f0\uc778\ub2e4\ub294 \uc774\uc720\ub85c \uc0c1\uc218\uc5d0 ALL_CAPS \ud615\ud0dc\uc758 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\uba74 \uc548\ub41c\ub2e4","title":"Note"},{"location":"Expr/#enforcement_6","text":"\ub300\ubb38\uc790\ub9cc\uc744 \uc0ac\uc6a9\ud55c \uc774\ub984\uc744 \uc9c0\uc801\ud558\ub77c. \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0 \ub300\ud574\uc11c\ub294 \ub9e4\ud06c\ub85c \uc774\ub984\uc73c\ub85c \uc18c\ubb38\uc790\ub97c \uc11e\uc5b4 \uc0ac\uc6a9\ud55c \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Expr/#es10","text":"","title":"ES.10: \uc120\uc5b8\uc740 (\uc624\uc9c1) \ud558\ub098\uc758 \uc774\ub984\uc744 \uc120\uc5b8\ud574\uc57c \ud55c\ub2e4"},{"location":"Expr/#reason_7","text":"\ud55c \uc904\uc5d0 \uc120\uc5b8 \ud558\ub098\uc529 \ud558\uba74 \uac00\ub3c5\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0ac \uc218 \uc788\uace0, C/C++ \ubb38\ubc95\uacfc \uad00\ub828\ub41c \uc2e4\uc218\ub97c \ud53c\ud560 \uc218 \uc788\ub2e4. \uadf8\ub9ac\uace0 // \uc8fc\uc11d\uc744 \ub2ec \uc218 \uc788\ub294 \uacf5\uac04\uc774 \uc0dd\uae34\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_4","text":"char * p , c , a [ 7 ], * pp [ 7 ], ** aa [ 10 ]; // \uc73d \uc774\uac8c\ubb50\uc57c!","title":"Example, bad"},{"location":"Expr/#exception_2","text":"\ud568\uc218 \uc120\uc5b8\uc740 \ub2e4\uc218\uc758 \ud568\uc218 \uc778\uc790 \uc120\uc5b8\uc744 \ud3ec\ud568\ud560 \uc218 \uc788\ub2e4.","title":"Exception"},{"location":"Expr/#exception_3","text":"C++ 17 \uc758 structured binding\uc740 \uc5ec\ub7ec \ubcc0\uc218\ub97c \ub3d9\uc2dc\uc5d0 \uc120\uc5b8\ud558\uae30 \uc704\ud574 \uc124\uacc4\ub418\uc5c8\ub2e4: auto [ iter , inserted ] = m . insert_or_assign ( k , val ); if ( inserted ) { /* new entry was inserted */ }","title":"Exception"},{"location":"Expr/#example_7","text":"template < class InputIterator , class Predicate > bool any_of ( InputIterator first , InputIterator last , Predicate pred ); \ucee8\uc149(concepts)\ub97c \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\uac8c \ub41c\ub2e4: bool any_of ( InputIterator first , InputIterator last , Predicate pred );","title":"Example"},{"location":"Expr/#example_8","text":"double scalbn ( double x , int n ); // OK: x * pow(FLT_RADIX, n); FLT_RADIX is usually 2 \ub610\ub294: double scalbn ( // better : x * pow ( FLT_RADIX , n ); FLT_RADIX is usually 2 double x , // base value int n // exponent ); \ub610\ub294: // better: base * pow(FLT_RADIX, exponent); FLT_RADIX is usually 2 double scalbn ( double base , int exponent );","title":"Example"},{"location":"Expr/#example_9","text":"int a = 7 , b = 9 , c , d = 10 , e = 3 ; \uc5ec\ub7ec \ubcc0\uc218\ub4e4\uc744 \ud55c\ubc88\uc5d0 \uc120\uc5b8\ud558\ub294 \uac83\uc740 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub97c \uac04\uacfc\ud558\uae30 \uc27d\ub2e4.","title":"Example"},{"location":"Expr/#enforcement_7","text":"\ubcc0\uc218\uc640 \uc0c1\uc218\ub4e4\uc744 \ud55c\ubc88\uc5d0 \uc120\uc5b8\uc744 \ud55c \uacf3\uc744 \uc9c0\uc801\ud55c\ub2e4.(\uc608\ub97c \ub4e4\uc5b4, int* p, q; )","title":"Enforcement"},{"location":"Expr/#es11-auto","text":"","title":"ES.11: \ud0c0\uc785 \uc774\ub984\uc758 \ubd88\ud544\uc694\ud55c \ubc18\ubcf5\uc744 \ub9c9\uc744\ub54c\ub294 auto\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_8","text":"\uac04\ub2e8\ud55c \ub0b4\uc6a9\uc774 \ubc18\ubcf5\ub418\uba74 \uc9c0\ub8e8\ud558\uace0 \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\ub2e4. auto \ub97c \uc0ac\uc6a9\ud558\uba74 \uc120\uc5b8\ub41c \uac1c\uccb4(entity)\uac00 \uadf8 \uc9c0\uc810\uc5d0 \uace0\uc815\ub418\uace0, \uac00\ub3c5\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4. \ud15c\ud50c\ub9bf \ud568\uc218 \uc120\uc5b8\uc5d0\uc11c\ub294 \ubc18\ud658 \ud0c0\uc785\uc774 \uba64\ubc84 \ud0c0\uc785\uc77c \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example_10","text":"\uc774\ub7f0 \ucf54\ub4dc\ub97c \uc0dd\uac01\ud574\ubcf4\uc790: auto p = v . begin (); // vector<int>::iterator auto h = t . future (); auto q = make_unique < int [] > ( s ); auto f = []( int x ){ return x + 10 ; }; \uac01\uac01\uc758 \uacbd\uc6b0, \ud0c0\uc785\ub4e4\uc744 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc774\ubbf8 \uc54c\uace0 \uc788\uc9c0\ub9cc, \ud504\ub85c\uadf8\ub798\uba38\uac00 \uae30\uc5b5\ud558\uae30 \ud798\ub4e0 \uae34 \uc774\ub984\uc758 \ud0c0\uc785\uc744 \uc791\uc131\ud560 \ud544\uc694\uac00 \uc5c6\uac8c \ub41c\ub2e4.","title":"Example"},{"location":"Expr/#example_11","text":"template < class T > auto Container < T >:: first () -> Iterator ; // Container<T>::Iterator","title":"Example"},{"location":"Expr/#exception_4","text":"\ucd08\uae30\ud654 \ub9ac\uc2a4\ud2b8(initializer list), \uadf8\ub9ac\uace0 \ucd08\uae30\ud654\uac00 \ub2f9\uc2e0\uc774 \uc758\ub3c4\ud55c(\uadf8\ub9ac\uace0 \uc815\ud655\ud788 \uc54c\uace0\uc788\ub294) \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub418\uc5b4\uc57c \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 auto \uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c.","title":"Exception"},{"location":"Expr/#example_12","text":"auto lst = { 1 , 2 , 3 }; // lst\ub294 initializer_list<int> \ud0c0\uc785\uc774\ub2e4 auto x { 1 }; // C++ 17\uc5d0\uc11c x\ub294 int \ud0c0\uc785\uc774\uc9c0\ub9cc, // C++ 11\uc5d0\uc11c\ub294 initializer_list\ub85c \ucc98\ub9ac\ub41c\ub2e4","title":"Example"},{"location":"Expr/#note_1","text":"\ucee8\uc149(concepts)\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c\ub418\uba74, \ucd94\ub860\ub418\ub294 \ud0c0\uc785\uc744 \uc880 \ub354 \ubd84\uba85\ud558\uac8c \ud45c\uae30\ud560 \uc218 \uc788\ub2e4. // ... ForwardIterator p = algo ( x , y , z );","title":"Note"},{"location":"Expr/#example-c17","text":"auto [ quotient , remainder ] = div ( 123456 , 73 ); // \ubc18\ud658\ub418\ub294 div_t \ud0c0\uc785\uc758 \uba64\ubc84\ub4e4\uc744 \ubd84\ub9ac\ud574\uc11c \uc120\uc5b8\ud558\uac8c \ub41c\ub2e4","title":"Example (C++17)"},{"location":"Expr/#enforcement_8","text":"\uc120\uc5b8\uc5d0\uc11c \uc7a5\ud669\ud55c(redundant) \ud0c0\uc785 \uc774\ub984\uc774 \ubc18\ubcf5\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es12","text":"","title":"ES.12: \uc774\ub984\uc744 \ub36e\uc5b4\uc4f0\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c"},{"location":"Expr/#reason_9","text":"\uc5b4\ub5a4 \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub418\uace0 \uc788\ub294\uc9c0 \ud63c\ub3d9\ud558\uae30 \uc27d\ub2e4. \uc720\uc9c0\ubcf4\uc218\uc5d0 \ubb38\uc81c\uac00 \ub420\uc218\ub3c4 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_5","text":"int d = 0 ; // ... if ( cond ) { // ... d = 9 ; // ... } else { // ... int d = 7 ; // ... d = value_to_be_returned ; // ... } return d ; \uc608\uc2dc\uac00 \uc544\uc8fc \ud070 if \uad6c\ubb38\uc774\uc5c8\ub2e4\uba74, \uad6c\ubb38 \uc548\uc5d0\uc11c \uc0c8\ub85c\uc6b4 d \uac00 \uc120\uc5b8\ub418\ub294 \uac83\uc744 \ubcf4\uc9c0 \ubabb\ud588\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc774\ub7f0 \ucf54\ub4dc\ub294 \ubc84\uadf8\uc758 \uc6d0\uc778\uc73c\ub85c \uc54c\ub824\uc838\uc788\ub2e4. \ubcf4\ud1b5 \uc774\ub807\uac8c \ub354 \uae4a\uc740 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \uac19\uc740 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \"shadowing\"\uc774\ub77c\uace0\ub3c4 \ud55c\ub2e4.","title":"Example, bad"},{"location":"Expr/#note_2","text":"Shadowing\uc740 \ud568\uc218\uac00 \ub108\ubb34 \ud06c\uac70\ub098 \ubcf5\uc7a1\ud560\ub54c \ubb38\uc81c\uac00 \ub41c\ub2e4.","title":"Note"},{"location":"Expr/#example_13","text":"\uac00\uc7a5 \ubc14\uae65 \ubc94\uc704\uc5d0\uc11c \ud568\uc218 \uc778\uc790\ub4e4\uc744 \uac00\ub9ac\ub294 \uac83\uc740 \uc5b8\uc5b4\uc5d0\uc11c \uae08\uc9c0\ud558\uace0 \uc788\ub2e4: void f ( int x ) { int x = 4 ; // error: reuse of function argument name if ( x ) { int x = 7 ; // allowed, but bad // ... } }","title":"Example"},{"location":"Expr/#example-bad_6","text":"\uba64\ubc84\uc758 \uc774\ub984\uc744 \uc9c0\uc5ed \ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83 \ub610\ud55c \ubb38\uc81c\uac00 \ub41c\ub2e4: struct S { int m ; void f ( int x ); }; void S :: f ( int x ) { m = 7 ; // \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub300\uc785\ud55c\ub2e4 if ( x ) { int m = 9 ; // ... m = 99 ; // \uba64\ubc84 \ubcc0\uc218\uc5d0 \ub300\uc785\ud55c\ub2e4 // ... } }","title":"Example, bad"},{"location":"Expr/#exception_5","text":"\uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \ud568\uc218 \uc774\ub984\uc744 \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4: struct B { void f ( int ); }; struct D : B { void f ( double ); using B :: f ; }; \uc774\ub294 \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\ub2e4. \uc608\ub97c \ub4e4\uc5b4, using \uc120\uc5b8\uc744 \ud558\uc9c0 \uc54a\uc558\ub2e4\uba74, d.f(1) \uc758 \ud638\ucd9c\uc740 f(int) \ub97c \ucc3e\uc9c0 \ubabb\ud560 \uac83\uc774\ub2e4. ??? \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uc5d0\uc11c shadowing/hiding\uc5d0 \ub300\ud55c \uaddc\uce59\uc774 \ud544\uc694\ud560\uae4c\uc694?","title":"Exception"},{"location":"Expr/#enforcement_9","text":"\ub354 \uae4a\uc740(nested) \uc9c0\uc5ed\ubc94\uc704\uc5d0\uc11c \uc774\ub984\uc744 \uc7ac\uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c \uba64\ubc84 \ud568\uc218\uc5d0\uc11c \uba64\ubc84 \uc774\ub984\uc744 \uc9c0\uc5ed\ubcc0\uc218\uc758 \uc774\ub984\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c \uc804\uc5ed\ubc94\uc704\uc758 \uc774\ub984\uc744 \uc9c0\uc5ed \ubcc0\uc218 \ud639\uc740 \uba64\ubc84\uc758 \uc774\ub984\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c \uc0c1\uc704 \ud074\ub798\uc2a4 \uba64\ubc84\uc758 \uc774\ub984\uc744 \ud558\uc704 \ud074\ub798\uc2a4\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c (\ud568\uc218 \uc774\ub984\uc740 \uc81c\uc678)","title":"Enforcement"},{"location":"Expr/#es20","text":"","title":"ES.20: \ud56d\uc0c1 \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud558\ub77c"},{"location":"Expr/#reason_10","text":"\uac12\uc744 \uc800\uc7a5\ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub294 \uc624\ub958\uc640 \uad00\ub828\ub41c \ubbf8\uc815\uc758 \ud589\ub3d9(undefined behavior)\ub97c \ubc29\uc9c0\ud55c\ub2e4. \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\ub97c \uc774\ud574\ud558\uba74\uc11c \uc0dd\uae30\ub294 \ubb38\uc81c\ub97c \uc608\ubc29\ud55c\ub2e4. \ub9ac\ud329\ud1a0\ub9c1\uc774 \uc26c\uc6cc\uc9c4\ub2e4.","title":"Reason"},{"location":"Expr/#example_14","text":"void use ( int arg ) { int i ; // bad: \ucd08\uae30\ud654\uac00 \uc548\ub41c \ubcc0\uc218 // ... i = 7 ; // i\ub97c \ucd08\uae30\ud654\ud55c\ub2e4 } \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc88b\uc9c0 \uc54a\ub2e4. i = 7 \ub294 i \ub97c \ucd08\uae30\ud654\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub2e4; \ubcc0\uc218\uc5d0 \uac12\uc744 \ub300\uc785\uc744 \ud558\ub294 \uac83\uc774\ub2e4. \ub610\ud55c, i \ub294 ... \ubd80\ubd84\uc5d0\uc11c \uac12\uc744 \uc77d\uc744 \uc218 \uc788\ub2e4. \uc774\ub807\uac8c \uc791\uc131\ud558\ub294 \uac83\uc774 \ub354 \uc88b\ub2e4: void use ( int arg ) // OK { int i = 7 ; // OK: \ucd08\uae30\ud654\ud55c\ub2e4 string s ; // OK: \uae30\ubcf8\uac12\uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4 // ... }","title":"Example"},{"location":"Expr/#note_3","text":"\uc5b8\uc81c\ub098 \ucd08\uae30\ud654\ud558\ub77c \ub294 \uaddc\uce59\uc740 \uac1c\uccb4\ub294 \uc0ac\uc6a9\ub418\uae30 \uc804\uc5d0 \uac12\uc744 \uac00\uc838\uc57c \ud55c\ub2e4 \ub294 \uc5b8\uc5b4 \uaddc\uce59\ubcf4\ub2e4 (\uc758\ub3c4\uc801\uc73c\ub85c) \uc5c4\uaca9\ud558\ub2e4. \ud6c4\uc790\ub294 \ub354 \uc644\ud654\ub41c \uaddc\uce59\uc73c\ub85c, \uae30\uc220\uc801\uc778 \ubc84\uadf8\ub97c \uc7a1\uc744\uc218\ub294 \uc788\ub2e4, \ud558\uc9c0\ub9cc: \uac00\ub3c5\uc131\uc774 \ub354 \ub0ae\ub2e4 \ud544\uc694\ud55c \ubc94\uc704 \uc774\uc0c1\uc73c\ub85c \uc774\ub984\uc744 \uc120\uc5b8\ud558\ub3c4\ub85d \ub9cc\ub4e0\ub2e4 \ubcf5\uc7a1\ud55c \ucf54\ub4dc\ub85c \uc778\ud55c \ub17c\ub9ac\uc801 \ubc84\uadf8\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4 \ub9ac\ud329\ud1a0\ub9c1\uc744 \ubc29\ud574\ud55c\ub2e4 \uc5b8\uc81c\ub098 \ucd08\uae30\ud654\ud558\ub77c \ub294 \uaddc\uce59\uc740 \uac12\uc744 \uc800\uc7a5\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc6a9\ud558\ub294 \uc624\ub958\ub97c \ub9c9\ub294 \uac83 \uc774\uc678\uc5d0\ub3c4 \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \ub192\uc774\ub294\ub370 \ucd08\uc810\uc744 \ub454 \uaddc\uce59\uc774\ub2e4.","title":"Note"},{"location":"Expr/#example_15","text":"\ucd08\uae30\ud654\uc5d0 \ub300\ud55c \uc880 \ub354 \uc57d\ud55c \uaddc\uce59\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uc608\uc2dc\uac00 \uc788\ub2e4 widget i ; // \"widget\" \uc774 \ucd08\uae30\ud654\uc5d0 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4dc\ub294 \ud0c0\uc785\uc774\ub77c\uace0 \ud558\uc790 // \uad49\uc7a5\ud788 \ud070 POD \uc77c\uc218\ub3c4 \uc788\ub2e4 widget j ; if ( cond ) { // bad: i\uc640 j\uac00 \"\ub4a4\ub2a6\uac8c\" \ucd08\uae30\ud654\ub41c\ub2e4 i = f1 (); j = f2 (); } else { i = f3 (); j = f4 (); } \uc774\ub7f0 \ucf54\ub4dc\ub294 i \uc640 j \ub97c \ucd08\uae30\ud654 \ud558\ub294 \ud615\ud0dc\ub85c \ub2e4\uc2dc \uc791\uc131\ud558\uae30 \uc5b4\ub835\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c0\ub294 \ud0c0\uc785\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294, \ucd08\uae30\ud654\ub97c \uc9c0\uc5f0\ud558\ub294 \ucf54\ub4dc\ub294 \uae30\ubcf8 \ucd08\uae30\ud654\ub97c \ud558\uace0 \ub300\uc785\uc774 \ub530\ub77c\uc624\ub294 \uad6c\uc870\uac00 \ub41c\ub2e4. \uc774\ub7f0 \uc608\uc2dc\ucc98\ub7fc \uc791\uc131\ub418\ub294 \uc774\uc720\ub294 \ubcf4\ud1b5 \"\ud6a8\uc728\uc801\uc774\uae30\" \ub54c\ubb38\uc774\ub2e4. \ud558\uc9c0\ub9cc \ucef4\ud30c\uc77c\ub7ec\uac00 \uac12\uc744 \uc124\uc815\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc6a9\ud558\ub294 \uc624\ub958\ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4\uba74 \ucd08\uae30\ud654\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud560\uc218\ub3c4 \uc788\ub2e4. i \uc640 j \uc5d0 \ub17c\ub9ac\uc801\uc778 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uc790. \uc774\ub7f0 \uc5f0\uacb0\uc740 \ucf54\ub4dc\uc5d0 \ub098\ud0c0\ub0ac\uc744 \uac83\uc774\ub2e4: pair < widget , widget > make_related_widgets ( bool x ) { return ( x ) ? { f1 (), f2 ()} : { f3 (), f4 ()}; } auto [ i , j ] = make_related_widgets ( cond ); // C++17","title":"Example"},{"location":"Expr/#note_4","text":"\ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\ub294 \uc218\uc2ed\ub144\uac04 \ub611\ub611\ud55c \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc774 \uc790\uc8fc \uc0ac\uc6a9\ud574\uc654\ub2e4. \ub3d9\uc2dc\uc5d0 \ubcf5\uc7a1\uc131\uacfc \uc624\ub958\uc758 \uc8fc \uc6d0\uc778\uc774\uae30\ub3c4 \ud588\ub2e4. \uc774\ub7f0 \uc624\ub958\ub4e4\uc740 \ucd08\uae30 \uad6c\ud604 \uc774\ud6c4 \uc720\uc9c0\ubcf4\uc218 \ub2e8\uac8c\uc5d0\uc11c \ub9ce\uc774 \ubc1c\uacac\ub418\uc5c8\ub2e4.","title":"Note"},{"location":"Expr/#example_16","text":"\uc774 \uaddc\uce59\uc740 \uba64\ubc84 \ubcc0\uc218\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4. class X { public : X ( int i , int ci ) : m2 { i }, cm2 { ci } {} // ... private : int m1 = 7 ; int m2 ; int m3 ; const int cm1 = 7 ; const int cm2 ; const int cm3 ; }; \ucef4\ud30c\uc77c\ub7ec\uac00 cm3 \uac00 const \uc778\ub370\ub3c4 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uac83\uc744 \uc9c0\uc801\ud560 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub294 m3 \uc774 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \uac83\uc744 \uc7a1\uc544\ub0b4\uc9c0\ub294 \uc54a\ub294\ub2e4. \ubcf4\ud1b5, \uac00\uc9dc(spurious) \uba64\ubc84 \ucd08\uae30\ud654\ub294 \ucd08\uae30\ud654 \ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c\uc368 \uc624\ub958\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\uae30\uc5d0 \uadf8\ub9cc\ud55c \uac00\uce58\uac00 \uc788\ub2e4. \ub610 \uacbd\uc6b0\uc5d0 \ub530\ub77c \ucd5c\uc801\ud654\uae30\uc5d0\uc11c \ubd88\ud544\uc694\ud55c(redundant) \ucd08\uae30\ud654\ub97c \uc81c\uac70\ud560\uc218\ub3c4 \uc788\ub2e4. (\uc608\ucee8\ub300, \ub300\uc785 \uc9c1\uc804\uc5d0 \ucd08\uae30\ud654\ub97c \uc218\ud589\ud558\ub294 \uacbd\uc6b0)","title":"Example"},{"location":"Expr/#exception_6","text":"\uc785\ub825\uc5d0 \ub530\ub77c \ucd08\uae30\ud654\ub418\ub294 \uac1c\uccb4\ub97c \uc120\uc5b8\ud558\uace0 \uc788\ub2e4\uba74, \uadf8 \uac1c\uccb4\ub97c \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc740 \ucd08\uae30\ud654\ub97c 2\ubc88 \uc218\ud589\ud558\ub294 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc, \uc774\ub7f0 \ubc29\ubc95\uc740 \uc785\ub825 \uc774\ud6c4\uc5d0 \ucd08\uae30\ud654\ud558\uc9c0 \uc54a\uc740 \ubd80\ubd84\uc744 \ub0a8\uae38\uc218\ub3c4 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c -- \uc774\ub294 \ubcf4\uc548\uacfc \uad00\ub828\ub41c \uc624\ub958\uc758 \uc628\uc0c1(fertile source)\uc774 \ub418\uc5b4\uc654\ub2e4. constexpr int max = 8 * 1024 ; int buf [ max ]; // OK, but suspicious: uninitialized f . read ( buf , max ); \uc0c1\ud669\uc5d0 \ub530\ub77c \ubc30\uc5f4\uc744 \ucd08\uae30\ud654\ud558\ub294 \ube44\uc6a9\uc774 \ub9c9\ub300\ud560\uc218\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc, \uadf8\ub7f0 \uacbd\uc6b0\ub294 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubd80\ubd84\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\ub3c4\ub85d \uc758\ub3c4\ud55c \uac83\uc774\uba70, \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uace0\ub824\ud558\uba74\uc11c \uc0ac\uc6a9\ud55c\ub2e4. constexpr int max = 8 * 1024 ; int buf [ max ] = {}; // \ubaa8\ub4e0 \uc6d0\uc18c\ub4e4\uc744 0\uc73c\ub85c \ucd08\uae30\ud654\ud55c\ub2e4 // \uc5b4\ub5a4 \uc0c1\ud669\uc5d0\uc11c\ub294 \ub354 \ub098\uc740 \ubc29\ubc95\uc774 \ub41c\ub2e4 f . read ( buf , max ); \ud560 \uc218 \uc788\ub2e4\uba74 \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: string s ; // s\ub294 \uae30\ubcf8\uac12 \"\"\ub85c \ucd08\uae30\ud654\ub41c\ub2e4 cin >> s ; // s\uac00 \uc785\ub825 \ubb38\uc790\uc5f4\uc744 \ub2f4\uae30 \uc704\ud574 \ud655\uc7a5\ub41c\ub2e4 \uc785\ub825 \ucc98\ub9ac\uc758 \ub300\uc0c1\uc774 \ub418\ub294 \ubcc0\uc218\ub4e4\ub3c4 \uc608\uc678\ub294 \uc544\ub2c8\ub2e4: int i ; // bad // ... cin >> i ; \ubcf4\ud1b5 \uc785\ub825\uc758 \ub300\uc0c1\uacfc \uc785\ub825 \ucc98\ub9ac\uac00 \ubd84\ub9ac\ub418\ub294 \uacbd\uc6b0 (\uadf8\ub7ec\uba74 \uc548\ub418\uc9c0\ub9cc) used-before-set\uc758 \uac00\ub2a5\uc131\uc774 \ubc1c\uc0dd\ud55c\ub2e4. int i2 = 0 ; // \uc880 \ub354 \ub098\uc740 \ucf54\ub4dc, 0\uc774 i2\uc5d0 \ud5c8\uc6a9\ub418\ub294 \uac12\uc774\ub77c\uace0 \uac00\uc815\ud55c\ub2e4 // ... cin >> i2 ; \uc88b\uc740 \ucd5c\uc801\ud654\uae30\ub294 \uc785\ub825 \ucc98\ub9ac(operation)\uc5d0 \ub300\ud574 \uc54c\uace0\uc788\uc5b4\uc57c \ud558\uba70, \uc911\ubcf5\ub418\ub294 \ubd80\ubd84\uc744 \uc81c\uac70\ud574\uc57c \ud55c\ub2e4","title":"Exception"},{"location":"Expr/#example_17","text":"\"\ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740\" \uc0c1\ud0dc\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uac12\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud574\uacb0\ubc29\ubc95\uc774 \uc544\ub2c8\uba70 \ubb38\uc81c\uac00 \uc788\ub294 \uac83\uc774\ub2e4: widget i = uninit ; // bad widget j = uninit ; // ... use ( i ); // possibly used before set // ... if ( cond ) { // bad: i and j are initialized \"late\" i = f1 (); j = f2 (); } else { i = f3 (); j = f4 (); } \uc774 \ucf54\ub4dc\ub294 \uc774\uc81c \ucef4\ud30c\uc77c\ub7ec\uac00 used-before-set\uc744 \uc27d\uac8c \ud0d0\uc9c0\ud560 \uc218 \uc5c6\uac8c \ub418\uc5c8\ub2e4. \ub354\uc6b1\uc774 widget\uc758 \uc0c1\ud0dc \uacf5\uac04\uc744 \ub354 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uc5c8\ub2e4: uninit \uac12\uc744 \uac00\uc9c4 widget\uc5d0\ub294 \uc5b4\ub5a4 \ucc98\ub9ac\uac00 \ud5c8\uc6a9(valid)\ub418\uace0 \uc5b4\ub5a4 \ucc98\ub9ac\uac00 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\uc744\uae4c?","title":"Example"},{"location":"Expr/#note_5","text":"\uc5b4\ub5a8\ub54c\ub294 \ub78c\ub2e4\ub97c \ucd08\uae30\ud654\uc758 \ub3c4\uad6c\ub85c \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4: error_code ec ; Value v = [ & ] { auto p = get_value (); // get_value()\uc5d0\uc11c pair<error_code, Value>\ub97c \ubc18\ud658\ud55c\ub2e4 ec = p . first ; return p . second ; }(); \ub610\ub294 \uc774\ub807\uac8c \ud560\uc218\ub3c4 \uc788\ub2e4: Value v = [] { auto p = get_value (); // get_value()\uc5d0\uc11c pair<error_code, Value>\ub97c \ubc18\ud658\ud55c\ub2e4 if ( p . first ) throw Bad_value { p . first }; return p . second ; }();","title":"Note"},{"location":"Expr/#see-also","text":"ES.28","title":"See also"},{"location":"Expr/#enforcement_10","text":"\ubaa8\ub4e0 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4. \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c4 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785 \ubcc0\uc218\ub4e4\uc740 \uc9c0\uc801\ud558\uc9c0 \uc54a\ub294\ub2e4. \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubc84\ud37c\uac00 \uc120\uc5b8 \ud558\uc790\ub9c8\uc790 \uc4f0\uae30-\uc811\uadfc \ub418\ub294\uc9c0 \uac80\uc0ac\ud558\ub77c. \ube44- const \ucc38\uc870 \uc2e4\ud589\uc778\uc790(argument)\ub85c \uc804\ub2ec\ud558\ub294 \uacbd\uc6b0\ub294 \uc4f0\uae30-\uc811\uadfc\uc73c\ub85c \uac00\uc815\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#es21","text":"","title":"ES.21: \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\uc744 \ub54c \ubcc0\uc218\ub098 \uc0c1\uc218\ub97c \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_11","text":"\uac00\ub3c5\uc131. \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \ubc94\uc704\ub97c \uc81c\ud55c\ud55c\ub2e4","title":"Reason"},{"location":"Expr/#example_18","text":"int x = 7 ; // ... no use of x here ... ++ x ;","title":"Example"},{"location":"Expr/#enforcement_11","text":"\uac1c\uccb4\uc758 \uc120\uc5b8\uacfc \ucc98\uc74c \uc0ac\uc6a9\ub418\ub294 \uacf3\uc774 \ub5a8\uc5b4\uc838 \uc788\uc73c\uba74(distant from) \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es22","text":"","title":"ES.22: \ubcc0\uc218\ub97c \ucd08\uae30\ud654\ud560 \uac12\uc774 \uc0dd\uae38 \ub54c\uae4c\uc9c0 \uc120\uc5b8\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_12","text":"\uac00\ub3c5\uc131. \ubcc0\uc218\uac00 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub294 \ubc94\uc704\ub97c \uc81c\ud55c\ud55c\ub2e4. used-before-set\uc758 \uc704\ud5d8\uc744 \uac10\uc218\ud558\uc9c0 \ub9c8\ub77c. \ub300\uc785\ubcf4\ub2e4 \ucd08\uae30\ud654\uac00 \ub354 \ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_7","text":"string s ; // ... s \ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ubd80\ubd84 ... s = \"what a waste\" ;","title":"Example, bad"},{"location":"Expr/#example-bad_8","text":"SomeLargeType var ; // ugly CaMeLcAsEvArIaBlE // (Camel Case Variable) if ( cond ) // \uc880 \uc911\uc694\ud55c \uc870\uac74 Set ( & var ); else if ( cond2 || ! cond3 ) { var = Set2 ( 3.14 ); } else { var = 0 ; for ( auto & e : something ) var += e ; } // var\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc; // \uc81c\uc5b4 \ud750\ub984\uc744 \uac80\ud30c\uc77c \uc2dc\uac04\uc5d0 \uac80\uc0ac\ud558\ub294 \ubc29\ubc95\uc73c\ub85c var\ub97c \ub108\ubb34 \uc77c\ucc0d \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4 SomeLargeType \uc758 \uae30\ubcf8 \ucd08\uae30\ud654 \ube44\uc6a9\uc774 \ud06c\ub2e4\uba74 \uc774 \ucf54\ub4dc\ub294 \uad1c\ucc2e\ub2e4\uace0 \ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74, \uc5b4\ub5a4 \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc800 \ubcf5\uc7a1\ud55c \uc870\uac74 \uc18d\uc5d0\uc11c \ubaa8\ub4e0 \uacbd\uc6b0\uac00 \uace0\ub824\ub418\uc5c8\ub294\uc9c0 \uc758\uc2ec\ud560 \uac83\uc774\ub2e4. \ub9cc\uc57d \ud5c8\uc810\uc774 \uc788\ub2e4\uba74, \"use before set\" \ubc84\uadf8\uac00 \ub41c\ub2e4. \uc720\uc9c0\ubcf4\uc218\uc758 \ud568\uc815\uc778 \uac83\uc774\ub2e4. \uc911\uac04\uc815\ub3c4 \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\uc5d0 \ub300\ud574\uc11c\ub294, const \ubcc0\uc218\ub97c \ud3ec\ud568\ud574\uc11c, \ucd08\uae30\ud654\uc5d0 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcf4\ub77c; ES.28 \ub97c \ucc38\uace0\ud558\ub77c.","title":"Example, bad"},{"location":"Expr/#enforcement_12","text":"\ucc98\uc74c \uac1c\uccb4\uc758 \uac12\uc744 \uc77d\uae30 \uc804\uc5d0 \uac12\uc744 \ub300\uc785\ud558\ub294 \uacbd\uc6b0, \ud574\ub2f9 \uac1c\uccb4\uac00 \uae30\ubcf8 \ucd08\uae30\ud654\ub85c \uc120\uc5b8\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud558\ub77c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\uc758 \uc120\uc5b8 \uc774\ud6c4\uc5d0, \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \ubcf5\uc7a1\ud55c \ucc98\ub9ac(computation)\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Expr/#es23","text":"","title":"ES.23: {} \ucd08\uae30\ud654 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_13","text":"{} \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c\ub294 \uaddc\uce59\uc740 \uc27d\uace0, \ub354 \uc77c\ubc18\uc801\uc774\uba70, \ub35c \ubaa8\ud638\ud558\uace0, \ub2e4\ub978 \ucd08\uae30\ud654 \ud615\ud0dc\uc5d0 \ube44\ud574 \uc548\uc804\ud558\ub2e4.","title":"Reason"},{"location":"Expr/#example_19","text":"int x { f ( 99 )}; vector < int > v = { 1 , 2 , 3 , 4 , 5 , 6 };","title":"Example"},{"location":"Expr/#exception_7","text":"\ucee8\ud14c\uc774\ub108 \ud0c0\uc785\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294, {...} \ub97c \uc6d0\uc18c\ub4e4\uc744 \ub098\uc5f4\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\uace0 (...) \ub294 \ud06c\uae30\ub97c \ub098\ud0c0\ub0b4\ub294\ub370 \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uc804\ud1b5(tradition)\uc774 \uc788\ub2e4: vector < int > v1 ( 10 ); // vector of 10 elements with the default value 0 vector < int > v2 { 10 }; // vector of 1 element with the value 10","title":"Exception"},{"location":"Expr/#note_6","text":"{} \ucd08\uae30\ud654\ub294 \uac12\uc758 \ubc94\uc704\uac00 \uc904\uc5b4\ub4dc\ub294 \ud0c0\uc785\ubcc0\ud658(narrowing conversion)\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Expr/#example_20","text":"int x { 7.9 }; // error: narrowing int y = 7.9 ; // OK: y becomes 7. Hope for a compiler warning","title":"Example"},{"location":"Expr/#note_7","text":"{} \ucd08\uae30\ud654\ub294 \ub2e4\ub978 \ud615\ud0dc\uc758 \ucd08\uae30\ud654\uc640 \ub2ec\ub9ac \ubaa8\ub4e0 \uacbd\uc6b0\uc758 \ucd08\uae30\ud654\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4: auto p = new vector < int > { 1 , 2 , 3 , 4 , 5 }; // initialized vector D :: D ( int a , int b ) : m { a , b } { // member initializer // (e.g., m might be a pair) // ... }; X var {}; // initialize var to be empty struct S { int m { 7 }; // default initializer for a member // ... };","title":"Note"},{"location":"Expr/#note_8","text":"auto \ub85c \uc120\uc5b8\ud55c \ubcc0\uc218\ub97c \ud558\ub098\uc758 \uac12\uc73c\ub85c \ucd08\uae30\ud654 \ud558\ub294\uac83, \uc608\ub97c \ub4e4\uc5b4, {v} \ud615\ud0dc\ub294 C++ 17 \uc774\uc804\uae4c\uc9c0\ub294 \uc608\uc0c1\ubc16\uc758 \uacb0\uacfc\ub97c \ub0b3\ub294\ub2e4. C++ 17\uc758 \uaddc\uce59\uc740 \uc0c1\ub300\uc801\uc73c\ub85c \ub35c \ub180\ub78d\ub2e4: auto x1 { 7 }; // x1 is an int with the value 7 auto x2 = { 7 }; // x2 is an initializer_list<int> with an element 7 auto x11 { 7 , 8 }; // error: two initializers auto x22 = { 7 , 8 }; // x2 is an initializer_list<int> with elements 7 and 8 \ub530\ub77c\uc11c initializer_list<T> \ub97c \uc758\ub3c4\ud588\ub2e4\uba74 ={...} \ub97c \uc0ac\uc6a9\ud558\ub77c. auto fib10 = { 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 , 55 }; // fib10 is a list","title":"Note"},{"location":"Expr/#note_9","text":"\uc624\ub798\ub41c \uc2b5\uad00\uc740 \uc9c0\uc6b0\uae30 \uc5b4\ub835\ub2e4\ub294 \uac83\uc744 \uc0dd\uac01\ud558\uba74, \uc774 \uaddc\uce59\uc740 \uafb8\uc900\ud788 \uc801\uc6a9\ud558\uae30\ub294 \uc5b4\ub835\ub2e4. \ud2b9\ud788 = \uc5d0 \ubb38\uc81c\uac00 \uc5c6\ub294 \uacbd\uc6b0\uac00 \ub108\ubb34\ub098\ub3c4 \ub9ce\ub2e4.","title":"Note"},{"location":"Expr/#example_21","text":"template < typename T > void f () { T x1 ( 1 ); // T initialized with 1 T x0 (); // bad: function declaration (often a mistake) T y1 { 1 }; // T initialized with 1 T y0 {}; // default initialized T // ... }","title":"Example"},{"location":"Expr/#enforcement_13","text":"\uae4c\ub2e4\ub86d\ub2e4(Tricky). \ub2e8\uc21c\ud55c \ucd08\uae30\ud654\ub97c \uc704\ud55c = \ub294 \uc9c0\uc801\ud558\uc9c0 \uc54a\ub294\ub2e4 auto \uc774\ud6c4\uc5d0 = \uac00 \uc0ac\uc6a9\ub41c \uacbd\uc6b0\ub97c \ucc3e\ub294\ub2e4","title":"Enforcement"},{"location":"Expr/#es24-unique_ptrt","text":"","title":"ES.24: \ud3ec\uc778\ud130\ub294 unique_ptr&lt;T&gt;\uc5d0 \ub2f4\uc544\ub77c"},{"location":"Expr/#reason_14","text":"std::unique_ptr \ub294 \ub204\uc218\ub97c \ud53c\ud558\uae30 \uc704\ud55c \uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc774\ub2e4. \uc774 \ubc29\ubc95\uc740 \ubbff\uc744 \uc218 \uc788\uace0, \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc774 \uc548\uc804\ud55c \uc18c\uc720\uad8c \uad00\ub9ac\ub97c \uc704\ud574 \uc77c\ud558\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uac00\ub3c5\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uace0 \uc2e4\ud589\uc2dc\uac04 \ube44\uc6a9\uc774 0\uc5d0 \uac00\uae5d\ub2e4.","title":"Reason"},{"location":"Expr/#example_22","text":"void use ( bool leak ) { auto p1 = make_unique < int > ( 7 ); // OK int * p2 = new int { 7 }; // bad: might leak // ... no assignment to p2 ... if ( leak ) return ; // ... no assignment to p2 ... vector < int > v ( 7 ); v . at ( 7 ) = 0 ; // exception thrown // ... } \ub9cc\uc57d leak \uc774 true \uac12\uc744 \uac00\uc9c4\ub2e4\uba74 p2 \uac00 \uac00\ub9ac\ud0a4\ub294 \uac1c\uccb4\uac00 \ub204\uc218\ub41c\ub2e4. \ud558\uc9c0\ub9cc p1 \uc774 \uac00\ub9ac\ud0a4\ub294 \uac1c\uccb4\ub294 \uadf8\ub807\uc9c0 \uc54a\ub2e4. at() \uc774 \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \uadf8\ub807\ub2e4.","title":"Example"},{"location":"Expr/#enforcement_14","text":"new , malloc() \ud639\uc740 \uadf8 \uacb0\uacfc\ub97c \ubc18\ud658\ud558\ub294 \ud568\uc218\uc758 \ub300\uc0c1\uc774 \ub418\ub294 \uc6d0\uc2dc \ud3ec\uc778\ud130\ub97c \ucc3e\ub294\ub2e4.","title":"Enforcement"},{"location":"Expr/#es25-const-constexpr","text":"","title":"ES.25: \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uac1c\uccb4\ub97c const \ud639\uc740 constexpr\ub85c \uc120\uc5b8\ud558\ub77c"},{"location":"Expr/#reason_15","text":"\uc2e4\uc218\ub85c \uac12\uc744 \ubc14\uafb8\ub294 \uac78 \ub9c9\uc744 \uc218 \uc788\ub294 \ubc29\ubc95\uc774\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \ucd5c\uc801\ud654\ub97c \uc704\ud55c \uae30\ud68c\ub97c \uc904 \uc218\ub3c4 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example_23","text":"void f ( int n ) { const int bufmax = 2 * n + 2 ; // good: bufmax\uac00 \uc774\ud6c4\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc2e4\uc218\ub85c \ubcc0\uacbd\ub420 \uac00\ub2a5\uc131\uc774 \uc5c6\ub2e4 int xmax = n ; // suspicious: xmax\ub97c \ub098\uc911\uc5d0 \ubc14\uafb8\ub824\uace0 \uc758\ub3c4\ud55c \uac78\uae4c? // ... }","title":"Example"},{"location":"Expr/#enforcement_15","text":"\ubcc0\uc218\uac00 \uc2e4\uc81c\ub85c \uac12\uc774 \ubc14\ub00c\ub294\uc9c0 \uc548 \ubc14\ub00c\ub294\uc9c0 \ubcf4\uace0 \ubc14\ub010\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. \ubd88\ud589\ud558\uac8c\ub3c4, const \uac00 \uc544\ub2cc \uac1c\uccb4\uac00 \uac12\uc744 \ubc14\uafb8\ub824 \uc758\ub3c4 \ud588\ub294\uc9c0 \ucc3e\uc544\ub0b4\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4.","title":"Enforcement"},{"location":"Expr/#es26","text":"","title":"ES.26: \uc11c\ub85c \uc0c1\uad00\uc5c6\ub294 \ubaa9\uc801\uc5d0 \ud558\ub098\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_16","text":"\uac00\ub3c5\uc131\uacfc \uc548\uc804\uc131","title":"Reason"},{"location":"Expr/#example-bad_9","text":"void use () { int i ; for ( i = 0 ; i < 20 ; ++ i ) { /* ... */ } for ( i = 0 ; i < 200 ; ++ i ) { // bad: i \uac00 \uc7ac\uc0ac\uc6a9\ub41c\ub2e4 /* ... */ } }","title":"Example, bad"},{"location":"Expr/#note_10","text":"\ucd08\uae30\ud654\ub97c \uc704\ud574\uc11c, buffer\ub97c \uc7ac\uc0ac\uc6a9\ud558\uace0 \uc2f6\uc744\uc218\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uadf8\ub807\ub354\ub77c\ub3c4 \ubcc0\uc218\uc758 \ubc94\uc704\ub97c \ucd5c\ub300\ud55c \uc81c\ud55c\ud558\uace0 buffer\uc5d0 \ub0a8\uaca8\uc9c4 \ub370\uc774\ud130\ub85c \uc778\ud574 \ubc84\uadf8\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud558\ub77c. \uc7ac\uc0ac\uc6a9\ub41c \ubc84\ud37c\ub294 \ubcf4\uc548\uad00\ub828 \ubc84\uadf8\uc758 \uc6d0\uc778\uc774 \ub418\uae30\ub3c4 \ud55c\ub2e4. void write_to_file () { std :: string buffer ; // to avoid reallocations on every loop iteration for ( auto & o : objects ) { // First part of the work. generate_first_String ( buffer , o ); write_to_file ( buffer ); // Second part of the work. generate_second_string ( buffer , o ); write_to_file ( buffer ); // etc... } }","title":"Note"},{"location":"Expr/#enforcement_16","text":"\uc7ac\ud65c\uc6a9\ub418\ub294 \ubcc0\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#es27-stdarray-stack_array","text":"","title":"ES.27: \uc2a4\ud0dd\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ubc30\uc5f4\uc740 std::array\ub098 stack_array\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_17","text":"\uac00\ub3c5\uc131\uc774 \ub192\uc544\uc9c0\uace0, \ubb35\uc2dc\uc801\uc73c\ub85c \ud3ec\uc778\ud130\ub85c \ubc14\ub00c\uc9c0 \uc54a\ub294\ub2e4. \uc5b8\uc5b4\uac00 \uc9c0\uc6d0\ud558\ub294 \ubc30\uc5f4\uc758 \ube44\ud45c\uc900\uc801\uc778 \ud655\uc7a5\uacfc \ud5f7\uac08\ub9ac\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_10","text":"const int n = 7 ; int m = 9 ; void f () { int a1 [ n ]; int a2 [ m ]; // error: ISO C++\uac00 \uc544\ub2c8\ub2e4 // ... }","title":"Example, bad"},{"location":"Expr/#note_11","text":"a1 \ubcc0\uc218\uc120\uc5b8\uc740 C++\uc5d0\uc11c\ub294 \uc801\ubc95\ud558\ub2e4. \uc774 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud55c \ucf54\ub4dc\uac00 \ub9ce\uc774 \uc788\ub2e4. \ub2e4\ub9cc \uc774\ub294 \uae38\uc774 \uac12\uc774 \ube44\uc9c0\uc5ed \ubcc0\uc218\uc778 \uacbd\uc6b0 \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4. \ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0, \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub85c \ubcc0\ud658\ud558\ub294 \ub4f1\uc758 \"\uc720\uba85\ud55c\" \uc624\ub958 \uc6d0\uc778\uc774 \ub41c\ub2e4. a2 \ubcc0\uc218\uc120\uc5b8\uc740 C \ubc29\uc2dd\uc73c\ub85c C++ \uc5d0\uc11c\ub294 \uc4f0\uc9c0 \uc54a\uc73c\uba70 \ubcf4\uc548\uc0c1 \ubb38\uc81c\uac00 \uc788\ub294 \uac83\uc73c\ub85c \uac04\uc8fc\ud55c\ub2e4.","title":"Note"},{"location":"Expr/#example_24","text":"const int n = 7 ; int m = 9 ; void f () { array < int , n > a1 ; stack_array < int > a2 ( m ); // ... }","title":"Example"},{"location":"Expr/#enforcement_17","text":"\uc0c1\uc218 \uae38\uc774\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294 \ubc30\uc5f4\uc774\ub77c\uba74 \uc9c0\uc801\ud55c\ub2e4. (C \uc5b8\uc5b4\uc758 \uac00\ubcc0\uae38\uc774\ubc30\uc5f4(VLA)) \ubc30\uc5f4 \uae38\uc774\ub85c \uc9c0\uc5ed \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es28-const","text":"","title":"ES.28: \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654, \ud2b9\ud788 const \ubcc0\uc218\uc758 \ucd08\uae30\ud654\uc5d0\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_18","text":"\uba4b\uc9c0\uac8c \uc9c0\uc5ed \ucd08\uae30\ud654\ub97c \uc228\uae38 \uc218 \uc788\ub2e4. \ucd08\uae30\ud654 \uc791\uc5c5\uc744 \uc704\ud574\uc11c\ub9cc \ud544\uc694\ud55c \ubcc0\uc218\ub97c \ud3ec\ud568\ud574\uc11c \uc7ac\uc0ac\uc6a9\ud560 \uac83 \uac19\uc9c0 \uc54a\uc740 \ud568\uc218\ub97c \uc0dd\uc131\ud560 \ud544\uc694\ub3c4 \uc5c6\ub2e4. \uc57d\uac04\uc758 \ucd08\uae30\ud654 \uc791\uc5c5 \ud6c4\uc5d0 const \uc5ec\uc57c \ud558\ub294 \ubcc0\uc218\uc5d0\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_11","text":"widget x ; // \uac00\ub2a5\ud558\ub2e4\uba74 const\uc5ec\uc57c \ud55c\ub2e4, \ud558\uc9c0\ub9cc: for ( auto i = 2 ; i <= N ; ++ i ) { // \uc774 \ubd80\ubd84\uc774 x\ub97c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud55c x += some_obj . do_something_with ( i ); // \uc880 \uae34 \ucf54\ub4dc\ub77c\uace0 \ud558\uc790 } // \uc774 \uc9c0\uc810\ubd80\ud130, x\ub294 const\uac00 \ub418\uc5b4\uc57c \ud55c\ub2e4. // \ud558\uc9c0\ub9cc \uc774\ub7f0 \ucf54\ub529 \uc2a4\ud0c0\uc77c\uc5d0\uc11c\ub294 \uadf8\ub807\uac8c \ub9cc\ub4e4 \uc218\uac00 \uc5c6\ub2e4.","title":"Example, bad"},{"location":"Expr/#example-good","text":"const widget x = [ & ]{ widget val ; // widget\uc774 \uae30\ubcf8 \uc0dd\uc131\uc790\ub97c \uac00\uc9c4\ub2e4\uace0 \uac00\uc815\ud558\uc790 for ( auto i = 2 ; i <= N ; ++ i ) { // \uc774 \ubd80\ubd84\uc774 x\ub97c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud55c val += some_obj . do_something_with ( i ); // \uc880 \uae34 \ucf54\ub4dc\ub77c\uace0 \ud558\uc790 } return val ; }();","title":"Example, good"},{"location":"Expr/#example_25","text":"string var = [ & ]{ if ( ! in ) return \"\" ; // default string s ; for ( char c : in >> c ) s += toupper ( c ); return s ; }(); // note () \uac00\ub2a5\ud558\ub2e4\uba74 enum \uac19\uc740 \uc26c\uc6b4 \ubc29\ubc95\uc73c\ub85c \uc870\uac74\uc744 \uc904\uc5ec\ub77c. \ubd84\uae30 \uc120\ud0dd\uacfc \ucd08\uae30\ud654\ub97c \ub4a4\uc11e\uc5b4\uc120 \uc548\ub41c\ub2e4.","title":"Example"},{"location":"Expr/#enforcement_18","text":"\uc5b4\ub835\ub2e4. \uc798 \ud574\ub3c4 \uacbd\ud5d8\uc801\uc778(heuristic) \uc218\uc900. \ub8e8\ud504\ub97c \uc0ac\uc6a9\ud574 \uac12\uc744 \uc124\uc815\ud558\ub294 \ucd08\uae30\ud654 \uc548\ub41c \ubcc0\uc218\uc744 \ucc3e\uc544\ub77c.","title":"Enforcement"},{"location":"Expr/#es30-manipulate","text":"","title":"ES.30: \ud504\ub85c\uadf8\ub7a8 \ud14d\uc2a4\ud2b8\ub97c \ub2e4\ub8e8\uae30(manipulate) \uc704\ud574 \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_19","text":"\ub9e4\ud06c\ub85c\ub294 \ubc84\uadf8\uc758 \uc8fc\uc694 \uc6d0\uc778\uc774\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc77c\ubc18\uc801\uc778 \ubc94\uc704\uc640 \ud0c0\uc785 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc0ac\ub78c\uc774 \ubcf4\ub294 \uac83\uacfc \ucef4\ud30c\uc77c\ub7ec\uac00 \ubcf4\ub294 \uac83\uc744 \ub2e4\ub974\uac8c \ud55c\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc9c0\uc6d0 \ub3c4\uad6c\ub97c \ub9cc\ub4dc\ub294 \uac83\uc744 \ubcf5\uc7a1\ud558\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_12","text":"#define Case break; case /* BAD */ \uc774 \ubb38\uc81c \uc5c6\uc5b4 \ubcf4\uc774\ub294 \ub9e4\ud06c\ub85c\ub294 C \ub300\uc2e0 c \uac00 \uc0ac\uc6a9\ub418\uba74 \uc545\uc9c8\uc801\uc778(bad) \uc81c\uc5b4\ud750\ub984 \ubc84\uadf8\ub85c \uc774\uc5b4\uc9c4\ub2e4.","title":"Example, bad"},{"location":"Expr/#note_12","text":"\uc774 \uaddc\uce59\uc740 #ifdef \ubb38\uc5d0\uc11c \uc124\uc815\uc81c\uc5b4\ub97c \uc704\ud574 \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ub9c9\uc9c0 \uc54a\ub294\ub2e4. \ubbf8\ub798\uc5d0 \ubaa8\ub4c8\uc774 \ub3c4\uc785\ub418\uba74 \uc124\uc815\uc744 \uc81c\uc5b4\ud558\uae30 \uc704\ud55c \ub9e4\ud06c\ub85c\ub294 \uc0ac\ub77c\uc9c0\uac8c \ub420 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Expr/#note_13","text":"\uc774 \uaddc\uce59\uc774 \uc758\ub3c4\ud558\ub294 \uac83\uc740 # \uc744 \uc0ac\uc6a9\ud574 \ubb38\uc790\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\uac70\ub098 ## \ub97c \uc0ac\uc6a9\ud574 \uc811\ud569(concat)\ud558\ub294 \uac83\uc774\ub2e4. \ubcf4\ud1b5\uc758 \ub9e4\ud06c\ub85c\ub4e4 \ucc98\ub7fc, \"\uac70\uc758 \ubb34\ud574\ud55c\" \uacbd\uc6b0\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc790\ub3d9 \uc644\uc131\uae30, \uc815\uc801 \ubd84\uc11d\uae30, \ub514\ubc84\uac70\uc640 \uac19\uc740 \ub3c4\uad6c\uc5d0\uac8c\ub294 \ubb38\uc81c\uac00 \ub41c\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 \uadfc\uc0ac\ud55c \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uacfc\ub3c4\ud558\uac8c \ubcf5\uc7a1\ud55c \uc124\uacc4\uac00 \uc788\ub2e4\ub294 \uc2e0\ud638\uc77c \uc218 \uc788\ub2e4. \ub610\ud55c, # \uc640 ## \ub97c \uc0ac\uc6a9\ud558\uba74 \ub9e4\ud06c\ub85c\ub97c \uc815\uc758\ud558\uace0 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc720\ub3c4(encourage)\ud55c\ub2e4: #define CAT(a, b) a ## b #define STRINGIFY(a) #a void f ( int x , int y ) { string CAT ( x , y ) = \"asdf\" ; // BAD: \ud234\uc5d0\uc11c \ub2e4\ub8e8\uae30 \uc5b4\ub835\ub2e4 (\uadf8\ub9ac\uace0 \ubabb\uc0dd\uacbc\ub2e4) string sx2 = STRINGIFY ( x ); // ... } \ub9e4\ud06c\ub85c\uc5c6\uc774 \ubb38\uc790\uc5f4\uc744 \uc870\uc791\ud558\uae30 \uc704\ud55c \ubc29\ubc95(workaround)\uc774 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74: string s = \"asdf\" \"lkjh\" ; // \ud3c9\ubc94\ud55c \ubb38\uc790\uc5f4 \ub9ac\ud130\ub7f4 \uc811\ud569 (literal concatenation) enum E { a , b }; template < int x > constexpr const char * stringify () { switch ( x ) { case a : return \"a\" ; case b : return \"b\" ; } } void f ( int x , int y ) { string sx = stringify < x > (); // ... } \ub9e4\ud06c\ub85c\ub9cc\ud07c \ud3b8\ub9ac\ud55c \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc, \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, \uc624\ubc84\ud5e4\ub4dc\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uc9c0 \uc54a\uc73c\uba70, \ud0c0\uc785\uacfc \uc720\ud6a8\ubc94\uc704\uc758 \uc601\ud5a5\uc744 \ubc1b\ub294\ub2e4. \ubbf8\ub798\uc5d0\ub294 \uc815\uc801 \ub9ac\ud50c\ub809\uc158(static reflection)\uc774 \uc804\ucc98\ub9ac\uae30\ub97c \uc0ac\uc6a9\ud574 \ubb38\uc790\uc5f4\uc744 \ub2e4\ub8e8\ub294 \uac83\uc744 \uc5c6\uc560\uac8c \ub420 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Expr/#enforcement_19","text":"\uc18c\uc2a4\uc81c\uc5b4( #ifdef \uac19\uc740)\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ub9e4\ud06c\ub85c\ub97c \ubcf8\ub2e4\uba74 \uc18c\ub9ac\ub97c \uc9c8\ub7ec\ub77c.","title":"Enforcement"},{"location":"Expr/#es31","text":"","title":"ES.31: \ub9e4\ud06c\ub85c\ub97c \uc0c1\uc218\ub098 \"\ud568\uc218\"\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_20","text":"\ub9e4\ud06c\ub85c\ub294 \ubc84\uadf8\uc758 \uc8fc\uc694 \uc6d0\uc778\uc774\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc77c\ubc18\uc801\uc778 \ubc94\uc704\uc640 \ud0c0\uc785 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc0ac\ub78c\uc774 \ubcf4\ub294 \uac83\uacfc \ucef4\ud30c\uc77c\ub7ec\uac00 \ubcf4\ub294 \uac83\uc744 \ub2e4\ub974\uac8c \ud55c\ub2e4. \ub9e4\ud06c\ub85c\ub294 \uc9c0\uc6d0 \ub3c4\uad6c\ub97c \ub9cc\ub4dc\ub294 \uac83\uc744 \ubcf5\uc7a1\ud558\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_13","text":"#define PI 3.14 #define SQUARE(a, b) (a * b) SQUARE \uc5d0 \uc798 \uc54c\ub824\uc9c4 \ubc84\uadf8\uac00 \uc5c6\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4 \ub354 \uc798 \ub3d9\uc791\ud558\ub294 \ub300\uc548\uc774 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74: constexpr double pi = 3.14 ; template < typename T > T square ( T a , T b ) { return a * b ; }","title":"Example, bad"},{"location":"Expr/#enforcement_20","text":"\uc18c\uc2a4\uc81c\uc5b4( #ifdef \uac19\uc740)\uc5d0 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ub9e4\ud06c\ub85c\ub97c \ubcf8\ub2e4\uba74 \uc18c\ub9ac\ub97c \uc9c8\ub7ec\ub77c.","title":"Enforcement"},{"location":"Expr/#es32-all_caps","text":"","title":"ES.32: \ubaa8\ub4e0 \ub9e4\ud06c\ub85c\ub294 ALL_CAPS \ud615\ud0dc\ub85c \uc120\uc5b8\ud558\ub77c"},{"location":"Expr/#reason_21","text":"\uad00\uc2b5. \uac00\ub3c5\uc131. \ub9e4\ud06c\ub85c \uad6c\ubcc4.","title":"Reason"},{"location":"Expr/#example_26","text":"#define forever for (;;) /* \uc5c4\uccad \ub098\uc05c \ucf54\ub4dc */ #define FOREVER for (;;) /* \uc5ec\uc804\ud788 \uc0ac\uc545\ud558\uc9c0\ub9cc, \ucd5c\uc18c\ud55c \uc0ac\ub78c\uc740 \ub9e4\ud06c\ub85c\ub77c\ub294\uac78 \uc54c \uc218 \uc788\ub2e4 */","title":"Example"},{"location":"Expr/#enforcement_21","text":"\uc18c\ubb38\uc790\ub85c \uc791\uc131\ub41c \ub9e4\ud06c\ub85c\ub97c \ubcf8\ub2e4\uba74 \uc18c\ub9ac\ub97c \uc9c8\ub7ec\ub77c.","title":"Enforcement"},{"location":"Expr/#es33","text":"","title":"ES.33: \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \uace0\uc720\ud55c \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_22","text":"\ub9e4\ud06c\ub85c\ub294 \uc720\ud6a8\ubc94\uc704 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Expr/#example_27","text":"#define MYCHAR /* BAD, will eventually clash with someone else's MYCHAR*/ #define ZCORP_CHAR /* Still evil, but less likely to clash */","title":"Example"},{"location":"Expr/#note_14","text":"\uac00\ub2a5\ud558\ub2e4\uba74 \ub9e4\ud06c\ub85c\ub294 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c: ES.30 , ES.31 , \uadf8\ub9ac\uace0 ES.32 \ub97c \ucc38\uace0\ud558\ub77c. \uc548\ud0c0\uae5d\uac8c\ub3c4, \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \ub0a8\uc6a9\ud558\ub294 \uae34 \uc804\ud1b5\uacfc \ud568\uaed8 \ub9e4\ud06c\ub85c\uc758 \uc601\ud5a5\uc744 \ubc1b\ub294 \ucf54\ub4dc\uac00 \uc218\uc2ed\uc5b5 \uc904\uc740 \uc788\uc744 \uac83\uc774\ub2e4. \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \uae34 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\uace0 \uace0\uc720\ud55c \uc811\ub450\uc0ac(prefix)\ub97c \ubd99\uc5ec\uc11c (\ub2f9\uc2e0\uc774 \uc18d\ud55c \uc870\uc9c1\uc758 \uc774\ub984\uc774\ub77c\ub358\uc9c0) \uc774\ub984\uc774 \ucda9\ub3cc\ud560 \uac00\ub2a5\uc131\uc744 \ub0ae\ucdb0\ub77c.","title":"Note"},{"location":"Expr/#enforcement_22","text":"\uc9e7\uc740 \ub9e4\ud06c\ub85c \uc774\ub984\uc5d0 \ub300\ud574\uc11c \uacbd\uace0\ud558\ub77c.","title":"Enforcement"},{"location":"Expr/#es34-c-","text":"","title":" ES.34: (C-\uc2a4\ud0c0\uc77c\uc758) \uac00\ubcc0\uc778\uc790 \ud568\uc218\ub97c \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_23","text":"\ud0c0\uc785 \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4. \uc815\ud655\ud558\uac8c \ub3d9\uc791\ud558\uae30 \uc704\ud574\uc11c \uc9c0\uc800\ubd84\ud55c \ubcc0\ud658/\ub9e4\ud06c\ub85c \ucf54\ub4dc\uac00 \ud544\uc694\ud558\ub2e4.","title":"Reason"},{"location":"Expr/#example_28","text":"#include <cstdarg> // \"severity\" followed by a zero-terminated list of char*s; // write the C-style strings to cerr void error ( int severity ...) { va_list ap ; // a magic type for holding arguments va_start ( ap , severity ); // arg startup: \"severity\" is the first argument of error() for (;;) { // treat the next var as a char*; no checking: a cast in disguise char * p = va_arg ( ap , char * ); if ( ! p ) break ; cerr << p << ' ' ; } va_end ( ap ); // arg cleanup (don't forget this) cerr << '\\n' ; if ( severity ) exit ( severity ); } void use () { error ( 7 , \"this\" , \"is\" , \"an\" , \"error\" , nullptr ); error ( 7 ); // crash error ( 7 , \"this\" , \"is\" , \"an\" , \"error\" ); // crash const char * is = \"is\" ; string an = \"an\" ; error ( 7 , \"this\" , \"is\" , an , \"error\" ); // crash }","title":"Example"},{"location":"Expr/#alternative","text":"\uc911\ubcf5 \uc815\uc758, \ud15c\ud50c\ub9bf, \uac00\ubcc0 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c #include <iostream> void error ( int severity ) { std :: cerr << '\\n' ; std :: exit ( severity ); } template < typename T , typename ... Ts > constexpr void error ( int severity , T head , Ts ... tail ) { std :: cerr << head ; error ( severity , tail ...); } void use () { error ( 7 ); // No crash! error ( 5 , \"this\" , \"is\" , \"not\" , \"an\" , \"error\" ); // No crash! std :: string an = \"an\" ; error ( 7 , \"this\" , \"is\" , \"not\" , an , \"error\" ); // No crash! error ( 5 , \"oh\" , \"no\" , nullptr ); // Compile error! No need for nullptr. }","title":"Alternative"},{"location":"Expr/#note_15","text":"\uc774 \ubc29\ubc95\uc73c\ub85c printf \uac00 \uad6c\ud604\ub418\uc5b4\uc788\ub2e4.","title":"Note"},{"location":"Expr/#enforcement_23","text":"C-\uc2a4\ud0c0\uc77c \uac00\ubcc0\uc778\uc790 \ud568\uc218\ub97c \uc815\uc758\ud558\uba74 \uc9c0\uc801\ud558\ub77c #include <cstdarg> \uc640 #include <stdarg.h> \ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Expr/#esexpr","text":"\ud45c\ud604\uc2dd\uc740 \uac12\uc744 \uc870\uc791\ud55c\ub2e4(manipulate).","title":"ES.expr: \ud45c\ud604\uc2dd"},{"location":"Expr/#es40","text":"","title":"ES.40: \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\uc744 \ud53c\ud558\ub77c"},{"location":"Expr/#reason_24","text":"\ud45c\ud604\uc2dd\uc774 \ubcf5\uc7a1\ud558\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4.","title":"Reason"},{"location":"Expr/#example_29","text":"// bad: assignment hidden in subexpression while (( c = getc ()) != - 1 ) // bad: two non-local variables assigned in a sub-expressions while (( cin >> c1 , cin >> c2 ), c1 == c2 ) // better, but possibly still too complicated for ( char c1 , c2 ; cin >> c1 >> c2 && c1 == c2 ;) // OK: if i and j are not aliased int x = ++ i + ++ j ; // OK: if i != j and i != k v [ i ] = v [ j ] + v [ k ]; // bad: multiple assignments \"hidden\" in subexpressions x = a + ( b = f ()) + ( c = g ()) * 7 ; // bad: relies on commonly misunderstood precedence rules x = a & b + c * d && e ^ f == 7 ; // bad: undefined behavior x = x ++ + x ++ + ++ x ; \uc704\uc758 \uc5f0\uc0b0\uc2dd \uc911 \uba87\uc740 \uc758\uc2ec\uc758 \uc5ec\uc9c0\uc5c6\uc774 \ub098\uc058\ub2e4. (\uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ud589\ub3d9\uc774 \uc77c\uc5b4\ub098\uac8c \ud55c\ub2e4) \ub098\uba38\uc9c0\ub294 \uaf64 \ubcf5\uc7a1\ud558\uac70\ub098 \ud2b9\uc774\ud55c \ud3b8\uc774\uace0, \uc2ec\uc9c0\uc5b4 \ub2a5\ub825\uc788\ub294 \ud504\ub85c\uadf8\ub798\uba38\ub3c4 \uc798\ubabb \uc774\ud574\ud558\uac70\ub098 \ubb38\uc81c\ub97c \uac04\uacfc\ud574 \ubc84\ub9b4 \ub9cc\ud55c \uac83\ub3c4 \uc788\ub2e4.","title":"Example"},{"location":"Expr/#note_16","text":"C++17 \uc5d0\uc11c\ub294 \ud3c9\uac00 \uc21c\uc11c\ub97c \uaddc\uc815\ud558\uace0 \uc788\ub2e4. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ub300\uc785\ub418\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd \uc21c\uc11c\ub85c \ud3c9\uac00\ub41c\ub2e4. \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790 \ud3c9\uac00\uc21c\uc11c\ub294 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4; ES.43 \ub97c \ucc38\uace0\ud558\ub77c \ud558\uc9c0\ub9cc \uc774 \uaddc\uce59\uc758 \uc720\ubb34\uac00 \ubcf5\uc7a1\ud55c \ud45c\ud604\uc2dd\uc774 \ud63c\ub780\uc744 \ub9cc\ub4e0\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ubc14\uafb8\uc9c0\ub294 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Expr/#note_17","text":"\ud504\ub85c\uadf8\ub798\uba38\ub294 \ud45c\ud604\uc2dd\uc758 \uae30\ubcf8\uc801\uc778 \uaddc\uce59\ub4e4\uc744 \uc54c\uace0 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4.","title":"Note"},{"location":"Expr/#example_30","text":"x = k * y + z ; // OK auto t1 = k * y ; // bad: \ubd88\ud544\uc694\ud558\uac8c \uc7a5\ud669\ud55c \ucf54\ub4dc x = t1 + z ; if ( 0 <= x && x < max ) // OK auto t1 = 0 <= x ; // bad: \ubd88\ud544\uc694\ud558\uac8c \uc7a5\ud669\ud55c \ucf54\ub4dc auto t2 = x < max ; if ( t1 && t2 ) // ...","title":"Example"},{"location":"Expr/#enforcement_24","text":"\uae4c\ub2e4\ub86d\ub2e4. \"\ud45c\ud604\uc2dd\uc774 \uc5bc\ub9c8\ub098 \ubcf5\uc7a1\ud55c\uac00\"\ub97c \uc5b4\ub5bb\uac8c \ud310\ub2e8\ud560 \uac83\uc778\uac00? \uc5b4\ub5bb\uac8c \uace0\ub824\ud560 \uac83\uc778\uac00? \uacc4\uc0b0\uc744 \ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c\ub9cc \uad6c\uc131\ub41c \ubb38\uc7a5\ub4e4\ub85c \uad6c\uc131\ud558\uae30\ub294 \ud798\ub4e4\ub2e4. \uace0\ub824\ud560\ub9cc\ud55c \uac83\ub4e4: * \ubd80\uc218 \ud6a8\uacfc(side-effect): \ub2e4\uc218\uc758 \ube44\uc9c0\uc5ed \ubcc0\uc218\uc5d0 \ub300\ud55c \ubd80\uc218 \ud6a8\uacfc\uc744 \uc758\uc2ec\ud560 \uc218 \uc788\ub2e4. \ud2b9\ud788 \ubcc4\ub3c4\uc758 \ud558\uc704 \uc5f0\uc0b0\uc2dd\uc5d0 \uc788\ub294 \uacbd\uc6b0 * \ubcc4\uba85\uc6a9 \ubcc0\uc218(aliased variable)\uc5d0 \uac12\uc744 \uc4f0\ub294 \ud589\uc704 * N\uac1c \uc774\uc0c1\uc758 \uc5f0\uc0b0\uc790 (N\uc740 \uc5bc\ub9c8\uac00 \ub418\uc5b4\uc57c \ud558\ub294\uac00?) * \ubbf8\ubb18\ud55c \uc6b0\uc120\uc21c\uc704\uaddc\uce59\uc5d0 \uc758\uc874\ud558\uae30 * \ubbf8\uc815\uc758 \ud589\ub3d9 (undefined behavior: \ubaa8\ub4e0 \ubbf8\uc815\uc758 \ud589\ub3d9\uc744 \uc7a1\uc544\ub0bc \uc218 \uc788\ub294\uac00?) * \uad6c\ud604\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\ub294 \ud589\ub3d9(implementation defined behavior)? * ???","title":"Enforcement"},{"location":"Expr/#es41-parenthesize","text":"","title":"ES.41: \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\uac00 \ubd88\ubd84\uba85\ud558\uba74, \uc18c\uad04\ud638\ub97c \uc0ac\uc6a9\ud558\ub77c(parenthesize)"},{"location":"Expr/#reason_25","text":"\uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c. \uac00\ub3c5\uc131. \ubaa8\ub4e0 \uc0ac\ub78c\ub4e4\uc774 \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704\ub97c \uae30\uc5b5\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Expr/#example_31","text":"const unsigned int flag = 2 ; unsigned int a = flag ; if ( a & flag != 0 ) // bad: a & (flag != 0)\ub97c \uc758\ub3c4\ud588\ub2e4","title":"Example"},{"location":"Expr/#note_18","text":"\ud504\ub85c\uadf8\ub798\uba38\ub294 \uc0b0\uc220 \uc5f0\uc0b0, \ub17c\ub9ac \uc5f0\uc0b0\uc5d0 \ub300\ud574\uc11c \uc6b0\uc120\uc21c\uc704 \ud14c\uc774\ube14\uc744 \uc54c\uace0 \uc788\uc744 \uac83\uc744 \uae30\ub300\ud55c\ub2e4. \ub2e4\ub978 \uc5f0\uc0b0\uacfc \ube44\ud2b8 \uc5f0\uc0b0\uc744 \uc11e\uc5b4 \uc0ac\uc6a9\ud560 \ub54c\ub294 \uc18c\uad04\ud638(parentheses)\ub97c \uc0ac\uc6a9\ud558\uae30\ub97c \uad8c\ud55c\ub2e4. if (( a & flag ) != 0 ) // OK: \uc758\ub3c4\ub300\ub85c \ub3d9\uc791\ud55c\ub2e4","title":"Note"},{"location":"Expr/#note_19","text":"\uc544\ub798\uc5d0 \ub300\ud574\uc11c\ub294 \uc18c\uad04\ud638\uac00 \ud544\uc694\uc5c6\ub2e4\ub294 \uc815\ub3c4\ub294 \uc54c\uace0 \uc788\uc744 \uac83\uc774\ub2e4: if ( a < 0 || a <= max ) { // ... }","title":"Note"},{"location":"Expr/#enforcement_25","text":"\ube44\ud2b8 \ub17c\ub9ac \uc5f0\uc0b0\uc790\uc640 \ub2e4\ub978 \uc5f0\uc0b0\uc790\uac00 \uc11e\uc5ec \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \uac00\uc7a5 \uc67c\ucabd\uc5d0 \uc704\uce58\ud55c \uc5f0\uc0b0\uc790(leftmost operator)\uac00 \ud560\ub2f9 \uc5f0\uc0b0\uc790\uac00 \uc544\ub2c8\ub77c\uba74 \uc9c0\uc801\ud55c\ub2e4 ???","title":"Enforcement"},{"location":"Expr/#es42","text":"","title":"ES.42: \ud3ec\uc778\ud130\ub294 \uac04\ub2e8\ud558\uace0 \uc9c1\uad00\uc801\uc778 \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_26","text":"\ubcf5\uc7a1\ud55c \ud3ec\uc778\ud130 \uacc4\uc0b0\uc740 \uc8fc\uc694\ud55c \uc624\ub958 \uc6d0\uc778\uc774 \ub41c\ub2e4.","title":"Reason"},{"location":"Expr/#note_20","text":"\ud3ec\uc778\ud130 \ub300\uc2e0 gsl::span \ub97c \uc0ac\uc6a9\ud558\ub77c. \ud3ec\uc778\ud130\ub294 \uc624\uc9c1 \ud558\ub098\uc758 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0ac \ub54c\ub9cc \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4 . \ud3ec\uc778\ud130\uc758 \uc0b0\uc220\uc5f0\uc0b0\uc740 \uc798\ubabb \uc0ac\uc6a9\ud558\uae30 \uc27d\uace0 \uc218\ub9ce\uc740, \uc218\ub9ce\uc740 \ub098\uc05c \ubc84\uadf8\uc640 \ubcf4\uc548 \uc704\ud5d8(violation)\uc758 \uc6d0\uc778\uc774\ub2e4. span \uc740 \uacbd\uacc4\ub97c \uac80\uc0ac\ud558\uace0, \uc548\uc804\ud558\uac8c \ubc30\uc5f4\uc758 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud558\ub294 \ud0c0\uc785\uc774\ub2e4. \uacbd\uacc4\ub97c \uc54c \uc218 \uc788\ub294 \ubc30\uc5f4\uc5d0 \ub300\ud55c \uc811\uadfc(subscript)\uc5d0 \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \ucef4\ud30c\uc77c\ub7ec\uac00 \ud3c9\uac00\ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Expr/#example-bad_14","text":"void f ( int * p , int count ) { if ( count < 2 ) return ; int * q = p + 1 ; // BAD ptrdiff_t d ; int n ; d = ( p - & n ); // OK d = ( q - p ); // OK int n = * p ++ ; // BAD if ( count < 6 ) return ; p [ 4 ] = 1 ; // BAD p [ count - 1 ] = 2 ; // BAD use ( & p [ 0 ], 3 ); // BAD }","title":"Example, bad"},{"location":"Expr/#example-good_1","text":"void f ( span < int > a ) // BETTER: \ud568\uc218 \uc120\uc5b8\uc5d0\uc11c span\uc744 \uc0ac\uc6a9\ud574\ubc84\ub9b0\ub2e4 { if ( a . size () < 2 ) return ; int n = a [ 0 ]; // OK span < int > q = a . subspan ( 1 ); // OK if ( a . size () < 6 ) return ; a [ 4 ] = 1 ; // OK a [ a . size () - 1 ] = 2 ; // OK use ( a . data (), 3 ); // OK }","title":"Example, good"},{"location":"Expr/#note_21","text":"\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud574 \ubc30\uc5f4\uc5d0 \uc811\uadfc\ud558\ub294 \ucf54\ub4dc\uac00 \uc548\uc804\ud55c\uc9c0 \ud3c9\uac00\ud558\ub294 \uac83\uc740 \ub3c4\uad6c\uc640 \uc0ac\ub78c \ubaa8\ub450\uc5d0\uac8c \uc5b4\ub835\ub2e4. span \uc740 \uc2e4\ud589 \uc2dc\uac04\uc5d0 \uacbd\uacc4\ub97c \uac80\uc0ac\ud558\uae30 \ub54c\ubb38\uc5d0, \ubc30\uc5f4\uc758 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud560\ub54c \uc548\uc804\ud558\ub2e4. at() \uc740 \ud55c\ubc88 \uc811\uadfc\ud560 \ub54c \uacbd\uacc4\ub97c \uac80\uc0ac\ud558\ub294 \ub2e4\ub978 \ubc29\ubc95\uc774\ub2e4. \ubc30\uc5f4\uc5d0 \uc811\uadfc\ud560 \ub54c \ubc18\ubcf5\uc790\uac00 \ud544\uc694\ud558\ub2e4\uba74, \ubc30\uc5f4\uc5d0 \ub300\ud55c span \uc744 \uc0dd\uc131\ud558\uace0 \uadf8\uc5d0 \ub300\ud55c \ubc18\ubcf5\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"Expr/#example-bad_15","text":"void f ( array < int , 10 > a , int pos ) { a [ pos / 2 ] = 1 ; // BAD a [ pos - 1 ] = 2 ; // BAD a [ - 1 ] = 3 ; // BAD (\ub2e4\ub9cc \ub3c4\uad6c\uc5d0\uc11c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4) -- \ub2e4\ub978 \ubc29\ubc95\uc774 \uc5c6\ub2e4. \uadf8\ub0e5 \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c a [ 10 ] = 4 ; // BAD (\ub2e4\ub9cc \ub3c4\uad6c\uc5d0\uc11c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4) -- \ub2e4\ub978 \ubc29\ubc95\uc774 \uc5c6\ub2e4. \uadf8\ub0e5 \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c }","title":"Example, bad"},{"location":"Expr/#example-good_2","text":"span \uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: // A1: \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785\uc744 span\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ubc14\uafb8\uc5c8\ub2e4 void f1 ( span < int , 10 > a , int pos ) { a [ pos / 2 ] = 1 ; // OK a [ pos - 1 ] = 2 ; // OK } // A2: \uc9c0\uc5ed\ubcc0\uc218\ub85c span\uc744 \ub9cc\ub4e4\uc5b4 \uc0ac\uc6a9\ud55c\ub2e4 void f2 ( array < int , 10 > arr , int pos ) { span < int > a = { arr , pos }; a [ pos / 2 ] = 1 ; // OK a [ pos - 1 ] = 2 ; // OK } at() \uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: // ALTERNATIVE B: \uc6d0\uc18c\uc5d0 \uc811\uadfc\ud560\ub54c at()\uc744 \uc0ac\uc6a9\ud55c\ub2e4 void f3 ( array < int , 10 > a , int pos ) { at ( a , pos / 2 ) = 1 ; // OK at ( a , pos - 1 ) = 2 ; // OK }","title":"Example, good"},{"location":"Expr/#example-bad_16","text":"void f () { int arr [ COUNT ]; for ( int i = 0 ; i < COUNT ; ++ i ) arr [ i ] = i ; // BAD, cannot use non-constant indexer }","title":"Example, bad"},{"location":"Expr/#example-good_3","text":"span \uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: void f1 () { int arr [ COUNT ]; span < int > av = arr ; for ( int i = 0 ; i < COUNT ; ++ i ) av [ i ] = i ; } \ubc94\uc704 \uae30\ubc18 for \ubb38\uc5d0 span \uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: void f1a () { int arr [ COUNT ]; span < int , COUNT > av = arr ; int i = 0 ; for ( auto & e : av ) e = i ++ ; } \uc811\uadfc\ud560 \ub54c at() \ub97c \uc0ac\uc6a9\ud558\uba74 \uc774\ub807\ub2e4: void f2 () { int arr [ COUNT ]; for ( int i = 0 ; i < COUNT ; ++ i ) at ( arr , i ) = i ; } \ubc94\uc704\uae30\ubc18 for \ubb38\uc740 \uc774\ub807\ub2e4: void f3 () { int arr [ COUNT ]; for ( auto & e : arr ) e = i ++ ; }","title":"Example, good"},{"location":"Expr/#note_22","text":"\ub3c4\uad6c\uc5d0\uc11c \uc2e4\ud589\uc2dc\uac04\uc5d0 \uacb0\uc815\ub418\ub294 \uc778\ub371\uc2a4\ub85c \ubc30\uc5f4\uc5d0 \uc811\uadfc\ud558\ub294 \ud45c\ud604\uc2dd\uc744 at() \uc744 \uc0ac\uc6a9\ud574 \ub2e4\uc2dc \uc791\uc131\ud558\ub3c4\ub85d \ud560\uc218\ub3c4 \uc788\ub2e4: static int a [ 10 ]; void f ( int i , int j ) { a [ i + j ] = 12 ; // BAD, \uc774 \ucf54\ub4dc\ub97c \ub2e4\uc2dc \uc4f4\ub2e4\uba74 ... at ( a , i + j ) = 12 ; // OK -- \uacbd\uacc4\ub97c \uac80\uc0ac\ud55c\ub2e4 }","title":"Note"},{"location":"Expr/#example_32","text":"(\uadf8\ub3d9\uc548 \uc5b8\uc5b4\uc5d0\uc11c \ud574\uc654\ub358 \uac83\ucc98\ub7fc) \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub85c \ubc14\uafb8\ub294 \uac83\uc740 \uacbd\uacc4 \uac80\uc0ac\uc758 \uae30\ud68c\ub97c \uc5c6\uc560\ubc84\ub9b0\ub2e4. \uc9c0\uc591\ud558\ub77c. void g ( int * p ); void f () { int a [ 5 ]; g ( a ); // BAD: \ubc30\uc5f4 \uac1c\uccb4\ub97c \ub118\uae30\ub824 \ud55c\uac83\uc77c\uae4c? g ( & a [ 0 ]); // OK: \uac1c\uccb4\ub97c \ub118\uae30\uace0 \uc788\ub2e4 } \ubc30\uc5f4\uc744 \uc804\ub2ec\ud558\uace0 \uc2f6\ub2e4\uba74: void g ( int * p , size_t length ); // \uc624\ub798\ub41c (\uc704\ud5d8\ud55c) \ucf54\ub4dc void g1 ( span < int > av ); // BETTER: get g() changed. void f2 () { int a [ 5 ]; span < int > av = a ; g ( av . data (), av . size ()); // OK, \uc120\ud0dd\uc758 \uc5ec\uc9c0\uac00 \uc5c6\ub2e4\uba74 g1 ( a ); // OK -- \ubc30\uc5f4\uc5d0\uc11c \ud3ec\uc778\ud130\ub85c\uc758 decay\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. // \ub300\uc2e0 span\uc744 \uc0dd\uc131\ud55c\ub2e4 }","title":"Example"},{"location":"Expr/#enforcement_26","text":"\ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \ub300\ud55c \uc0b0\uc220\uc5f0\uc0b0\uc744 \uc218\ud589\ud558\ub294 \ud45c\ud604\uc2dd\uc740 \uc9c0\uc801\ud558\ub77c \ubc30\uc5f4(\uc815\uc801 \ubc30\uc5f4 \ud639\uc740 std::array )\uc5d0 \uc778\ub371\uc2a4\ub97c \uc0ac\uc6a9\ud574 \uc811\uadfc\ud558\ub294 \ud45c\ud604\uc2dd\uc744 \uc9c0\uc801\ud558\ub77c. \uc774\ub54c \ud45c\ud604\uc2dd\uc740 \ubc30\uc5f4 \ubc94\uc704 \uc548( 0 \ubd80\ud130 \ubc30\uc5f4 \ub05d\uae4c\uc9c0)\uc5d0 \ud574\ub2f9\ud558\ub294 \ucef4\ud30c\uc77c \uc2dc\uac04 \uc0c1\uc218 \ud45c\ud604\uc2dd\uc774 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4 \ubc30\uc5f4 \ud0c0\uc785\uc5d0\uc11c \ud3ec\uc778\ud130 \ud0c0\uc785\uc73c\ub85c \ubb35\uc2dc\uc801 \ud615\ubcc0\ud658\uc5d0 \uc758\uc874\ud558\ub294 \ud45c\ud604\uc2dd\uc744 \uc9c0\uc801\ud558\ub77c \uc774 \uaddc\uce59\uc740 \uacbd\uacc4 \uc548\uc804\uc131 \uac80\uc0ac \uc758 \uc77c\ubd80\ubd84\uc774\ub2e4.","title":"Enforcement"},{"location":"Expr/#es43","text":"","title":"ES.43: \ud3c9\uac00 \uc21c\uc11c\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ud45c\ud604\uc2dd\uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_27","text":"\uadf8\ub7f0 \ucf54\ub4dc\uac00 \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud560\uc9c0\ub294 \uc54c \uc218\uac00 \uc5c6\ub2e4. \uc774\uc2dd\uc131. \ud2b9\uc815\ud55c \ud658\uacbd\uc5d0\ub294 \ub9de\uc744\uc9c0\ub294 \ubab0\ub77c\ub3c4, \ub2e4\ub978 \ucef4\ud30c\uc77c\ub7ec (\ud639\uc740 \uc0ac\uc6a9 \uc911\uc778 \ucef4\ud30c\uc77c\ub7ec\uc758 \ub2e4\uc74c \ubc84\uc804)\uc5d0\uc11c\ub294 \ub2e4\ub97c \uc218 \uc788\ub2e4. \ud639\uc740 \ucd5c\uc801\ud654 \uc124\uc815\uc5d0 \ub530\ub77c \ub2e4\ub97c \uc218\ub3c4 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#note_23","text":"C++17 \uc5d0\uc11c\ub294 \ud3c9\uac00 \uc21c\uc11c\ub97c \uaddc\uc815\ud558\uace0 \uc788\ub2e4. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ub300\uc785\ub418\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd \uc21c\uc11c\ub85c \ud3c9\uac00\ub41c\ub2e4. \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790 \ud3c9\uac00\uc21c\uc11c\ub294 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \ub2f9\uc2e0\uc758 \ucf54\ub4dc\uac00 (Ctrl + C,V \ub418\uc5b4\uc11c) C++ 17 \uc774\uc804\uc758 \ucef4\ud30c\uc77c\ub7ec\ub85c \ucef4\ud30c\uc77c \ub420 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c. \ub108\ubb34 \uc601\ub9ac\ud560 \ud544\uc694\ub294 \uc5c6\ub2e4.","title":"Note"},{"location":"Expr/#example_33","text":"v [ i ] = ++ i ; // \uacb0\uacfc\ub294 \uc54c \uc218 \uc5c6\ub2e4(undefined) \uac00\uc7a5 \uc88b\uc740 \uaddc\uce59\uc740 \uac12\uc744 \ubcc0\uacbd\ud558\ub294 \ud45c\ud604\uc2dd\uc5d0\uc11c \uac12\uc744 \uc77d\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Expr/#enforcement_27","text":"\uc88b\uc740 \ubd84\uc11d\uae30\ub97c \uc0ac\uc6a9\ud574 \ucc3e\uc744 \uc218 \uc788\ub2e4.","title":"Enforcement"},{"location":"Expr/#es44","text":"","title":"ES.44: \ud568\uc218 \uc778\uc790\uac00 \ud45c\ud604\uc2dd \ud3c9\uac00 \uc21c\uc11c\uc758 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uac8c \ud558\ub77c"},{"location":"Expr/#reason_28","text":"\uc21c\uc11c\uac00 \uc815\uc758\ub418\uc5b4\uc788\uc9c0 \uc54a\ub2e4.","title":"Reason"},{"location":"Expr/#note_24","text":"C++17 \uc5d0\uc11c\ub294 \ud3c9\uac00 \uc21c\uc11c\ub97c \uaddc\uc815\ud558\uace0 \uc788\ub2e4. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ub300\uc785\ub418\ub294 \uac83\uc744 \uc81c\uc678\ud558\uace0 \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd \uc21c\uc11c\ub85c \ud3c9\uac00\ub41c\ub2e4. \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790 \ud3c9\uac00\uc21c\uc11c\ub294 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4.","title":"Note"},{"location":"Expr/#example_34","text":"int i = 0 ; f ( ++ i , ++ i ); \uc774 \ud568\uc218 \ud638\ucd9c\uc740 f(0, 1) \ud639\uc740 f(1, 0) \uc77c \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc5b4\ub5a4 \uac83\uc774 \ub420\uc9c0\ub294 \uc54c \uc218 \uc5c6\ub2e4. \uae30\uc220\uc801\uc73c\ub85c\ub294, \uc5b4\ub5bb\uac8c \ucc98\ub9ac\ud574\uc57c \ud558\ub294\uc9c0 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. C++ 17\uc5d0\uc11c\ub294 \uc774 \ucf54\ub4dc\uac00 \ubbf8\uc815\uc758 \ud589\ub3d9\uc774 \uc544\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\uc804\ud788 \uc5b4\ub5a4 \uc778\uc790\uac00 \uba3c\uc800 \ud3c9\uac00\ub418\ub294\uc9c0 \ubd84\uba85\ud558\uc9c0 \uc54a\ub2e4.","title":"Example"},{"location":"Expr/#example_35","text":"\uc911\ubcf5\uc815\uc758\ub41c \uc5f0\uc0b0\uc790\ub4e4\uc740 \ud3c9\uac00\uc21c\uc11c \ubb38\uc81c\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4: f1 () -> m ( f2 ()); // m( f1(), f2() ) cout << f1 () << f2 (); // operator<<( operator<<( cout, f1() ), f2() ) C++ 17\uc5d0\uc11c \uc774 \uc608\uc2dc\ub294 \uae30\ub300\ud55c \ub300\ub85c \ub3d9\uc791\ud55c\ub2e4 (\uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud3c9\uac00\ub41c\ub2e4). \uadf8\ub9ac\uace0 = \uc758 \ubc14\uc778\ub529\uc774 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uc218\ud589\ub418\ub294 \uac83\ucc98\ub7fc \ub300\uc785\uc740 \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ud3c9\uac00\ub41c\ub2e4. f1 () = f2 (); // C++14 \uc5d0\uc11c\ub294 \ubbf8\uc815\uc758 \ud589\ub3d9; // C++17 \uc5d0\uc11c\ub294 f2()\uac00 f1()\ubcf4\ub2e4 \uba3c\uc800 \ud3c9\uac00\ub41c\ub2e4","title":"Example"},{"location":"Expr/#enforcement_28","text":"\uc88b\uc740 \ubd84\uc11d\uae30\ub97c \uc0ac\uc6a9\ud574 \ucc3e\uc744 \uc218 \uc788\ub2e4.","title":"Enforcement"},{"location":"Expr/#es45-magic-constant","text":"","title":"ES.45: \uc774\uc720\ub97c \uc54c \uc218 \uc5c6\ub294 \uc0c1\uc218(magic constant)\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c; \uc0c1\uc9d5\uc801\uc778 \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_29","text":"\ud45c\ud604\uc2dd\uc5d0 \ud3ec\ud568\ub41c \uc774\ub984\uc5c6\ub294 \uc0c1\uc218\ub294 \uac04\uacfc\ub418\uae30 \uc27d\uace0 \uc774\ud574\ud558\uae30 \uc5b4\ub835\ub2e4:","title":"Reason"},{"location":"Expr/#example_36","text":"for ( int m = 1 ; m <= 12 ; ++ m ) // don't: \uc0c1\uc218 12\ub294 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uac00? cout << month [ m ] << '\\n' ; 1\ub144\uc5d0 12\ub2ec\uc774 \uc22b\uc790\ub85c\ub9cc \ub418\uc5b4 \uc788\ub2e4\uba74 \uc774\ud574\uac00 \uc798 \uc548\ub420 \uac83\uc774\ub2e4. \ub354 \uc88b\uac8c \uace0\uce58\uba74: // 1..12\ub97c \uc0ac\uc6a9\ud574\uc11c 12\uac1c\uc6d4\uc744 \ud45c\ud604\ud55c\ub2e4 constexpr int first_month = 1 ; constexpr int last_month = 12 ; for ( int m = first_month ; m <= last_month ; ++ m ) // better cout << month [ m ] << '\\n' ; \uc544\uc608 \uc0c1\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\uba74 \ub354 \ub0ab\ub2e4: for ( auto m : month ) cout << m << '\\n' ;","title":"Example"},{"location":"Expr/#enforcement_29","text":"\ucf54\ub4dc\uc5d0 \ub9ac\ud130\ub7f4\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. 0 , 1 , nullptr , \\n , \"\" \ub4f1 \uac00\ub2a5\ud55c \ubaa9\ub85d\uc740 \ud5c8\uc6a9\ud558\ub77c.","title":"Enforcement"},{"location":"Expr/#es46","text":"","title":"ES.46: \ud0c0\uc785 \ubc94\uc704\ub97c \ucd95\uc18c\ud558\ub294 \ubcc0\ud658\uc744 \ud53c\ud558\ub77c"},{"location":"Expr/#reason_30","text":"\uc815\ubcf4\ub97c \ud30c\uad34\ud558\uace0 \uc804\ud600 \uae30\ub300\ud558\uc9c0 \uc54a\uc740 \uac12\uc744 \uac00\uc9c0\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_17","text":"\uae30\ubcf8\uc801\uc778 \uc608\uc81c: double d = 7.9 ; int i = d ; // bad: \ucd95\uc18c \ubcc0\ud658: i\uac00 7\uc774 \ub41c\ub2e4 i = ( int ) d ; // bad: \uc774\ub807\uac8c \ud558\ub354\ub77c\ub3c4 \ucda9\ubd84\ud788 \ubd84\uba85\ud558\uc9c0 \uc54a\ub2e4 void f ( int x , long y , double d ) { char c1 = x ; // bad: narrowing char c2 = y ; // bad: narrowing char c3 = d ; // bad: narrowing }","title":"Example, bad"},{"location":"Expr/#note_25","text":"gsl\uc740 narrowing\uc744 \ud5c8\uc6a9\ud558\ub294 narrow_cast \uc640 \ubcc0\ud658\uc2dc \uac12\uc774 \ubc14\ub00c\uba74 \uc608\uc678\ub97c \ub358\uc9c0\ub294 narrow (\"narrow if\")\ub97c \uc81c\uacf5\ud55c\ub2e4: i = narrow_cast < int > ( d ); // OK (you asked for it): narrowing: i becomes 7 i = narrow < int > ( d ); // OK: throws narrowing_error \uc774 \uaddc\uce59\uc740 \ubd80\ub3d9 \uc18c\uc218\uc810 \ud0c0\uc785\uc758 \uc74c\uc218\ub97c \ubd80\ud638 \uc5c6\ub294 \uc815\uc218\ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \ub4f1\uc758 \uc190\uc2e4\uc788\ub294 \ud615\ubcc0\ud658\uae4c\uc9c0\ub3c4 \ud3ec\ud568\ud55c\ub2e4: double d = - 7.9 ; unsigned u = 0 ; u = d ; // BAD u = narrow_cast < unsigned > ( d ); // OK (you asked for it): u becomes 0 u = narrow < unsigned > ( d ); // OK: throws narrowing_error","title":"Note"},{"location":"Expr/#enforcement_30","text":"\uc88b\uc740 \ubd84\uc11d\uae30\ub294 \ubc94\uc704\uac00 \ucd95\uc18c\ub418\ub294 \ubcc0\ud658\uc744 \ud0d0\uc9c0\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ubaa8\ub4e0 \ucd95\uc18c\ubcc0\ud658\uc744 \uc9c0\uc801\ud558\ub294 \uac83\uc740 \uc218\ub9ce\uc740 \uac70\uc9d3 \uc591\uc131(false positive)\ub85c \uc774\uc5b4\uc9c8 \uac83\uc774\ub2e4. \uc81c\uc548: \ubd80\ub3d9 \uc18c\uc218\uc810\uc5d0\uc11c \uc815\uc218\ub85c\uc758 \ubcc0\ud658\uc744 \uc9c0\uc801\ud55c\ub2e4 ( float -> char \uc774\ub098 double -> int \ub9cc \uc9c0\uc801\ud560\uc218\ub3c4 \uc788\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\uac00 \ud544\uc694\ud558\ub2e4) \ubaa8\ub4e0 long -> char \ubcc0\ud658\uc744 \uc9c0\uc801\ud55c\ub2e4. ( int -> char \ubcc0\ud658\uc740 \uc0c1\ub2f9\ud788 \uc77c\ubc18\uc801\uc774\ub2e4. \ub354 \ub9ce\uc740 \uc815\ubcf4\uac00 \ud544\uc694\ud558\ub2e4) \ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790\uc5d0\uc11c \ucd95\uc18c \ubcc0\ud658\uc774 \ubc1c\uc0dd\ud558\uba74 \ud2b9\ud788 \uc758\uc2ec\uc2a4\ub7fd\uac8c \uc0dd\uac01\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es47-0-null-nullptr","text":"","title":"ES.47: 0 \ud639\uc740 NULL\ubcf4\ub2e4\ub294 nullptr\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_31","text":"\uac00\ub3c5\uc131\uc758 \ubb38\uc81c\ub2e4. \uae30\ub300\ub97c \ubc97\uc5b4\ub098\uc9c0 \uc54a\uac8c \ud55c\ub2e4. nullptr \ub294 int \uc640 \ud63c\ub3d9\uc758 \uc5ec\uc9c0\uac00 \uc5c6\ub2e4. nullptr \ub294 \uc798 \uba85\uc138\ub41c (\uc544\uc8fc \uae4c\ub2e4\ub85c\uc6b4) \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. \uadf8\ub7ec\ub2c8 NULL \ud639\uc740 0 \uc744 \uc0ac\uc6a9\ud558\uba74 \uc798\ubabb\ub420 \uc218 \uc788\ub294 \ud0c0\uc785 \ucd94\ub860 \uc0c1\ud669\uc5d0\uc11c \ub354 \uc798 \ub3d9\uc791\ud560 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Expr/#example_37","text":"\ucc38\uace0\ud558\ub77c: void f ( int ); void f ( char * ); f ( 0 ); // f(int) f ( nullptr ); // f(char*)","title":"Example"},{"location":"Expr/#enforcement_31","text":"\ud3ec\uc778\ud130\uc5d0 0 , NULL \uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \uac04\ub2e8\ud558\uac8c \ubcc0\ud658\ud560 \uc218 \uc788\uc73c\uba74 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub2e4.","title":"Enforcement"},{"location":"Expr/#es48-cast","text":"","title":"ES.48: \ud0c0\uc785 \ubcc0\ud658(cast)\uc744 \ud53c\ud558\ub77c"},{"location":"Expr/#reason_32","text":"\uc798 \uc54c\ub824\uc9c4 \uc624\ub958\uc758 \uc6d0\uc778\uc774\ub2e4. \ucd5c\uc801\ud654\ub97c \uc2e0\ub8b0\ud560 \uc218 \uc5c6\uac8c \ub9cc\ub4e4\uc5b4 \ubc84\ub9b0\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_18","text":"double d = 2 ; auto p = ( long * ) & d ; auto q = ( long long * ) & d ; cout << d << ' ' << * p << ' ' << * q << '\\n' ; \uc774 \ucf54\ub4dc\ub294 \uc5b4\ub5a4 \uac12\uc744 \ucd9c\ub825\ud560\uae4c? The result is at best implementation defined. \ud544\uc790\uc758 \ud658\uacbd\uc5d0\uc11c\ub294 \uc774\ub7f0 \uacb0\uacfc\uac00 \ub098\uc628\ub2e4 2 0 4611686018427387904 \uc544\ub798\uc758 \ub0b4\uc6a9\uc744 \ub354\ud558\uba74, * q = 666 ; cout << d << ' ' << * p << ' ' << * q << '\\n' ; \uc774\ub7f0 \uacb0\uacfc\uac00 \ub098\uc628\ub2e4 3.29048e-321 666 666 \ub180\ub77c\uc6b4\uac00? \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \ud06c\ub798\uc2dc\ub098 \uc0dd\uae30\uc9c0 \uc54a\uc740\uac8c \ub2e4\ud589\uc774\ub2e4.","title":"Example, bad"},{"location":"Expr/#note_26","text":"\ud0c0\uc785 \ubcc0\ud658\uc744 \uc791\uc131\ud558\ub294 \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc790\uc2e0\uc774 \ubb34\uc5c7\uc744 \ud558\uace0\uc788\ub294\uc9c0 \uc548\ub2e4\uace0 \uc0dd\uac01\ud55c\ub2e4. \ub610\ub294 \uac12\uc744 \uc0ac\uc6a9\ud560\ub54c \uc77c\ubc18\uc801\uc778 \uaddc\uce59\ub4e4\uc744 \uc811\uc5b4\ub450\uae30\ub3c4 \ud55c\ub2e4. \uc911\ubcf5\uc815\uc758 \uc120\ud0dd(overload resolution)\uc774\ub098 \ud15c\ud50c\ub9bf \uc2e4\uccb4\ud654(instantiation)\ub294 \ubcf4\ud1b5 \uc778\uc790 \ud0c0\uc785\uc774 \uaf2d \ub9de\ub294 \ud568\uc218\ub97c \uace8\ub77c\ub0b8\ub2e4. \uadf8\ub7f0 \ud568\uc218\uac00 \uc5c6\ub2e4\uba74, \uc5b4\uca4c\uba74 \uace0\uccd0\uc11c(local fix) \uc801\uc6a9\ud560 \ud544\uc694\uac00 \uc788\uc744\uc9c0\ub3c4 \ubaa8\ub974\uc9c0\ub9cc, \uc624\ub958\uac00 \ub41c\ub2e4.","title":"Note"},{"location":"Expr/#note_27","text":"\ud615\ubcc0\ud658\uc740 \uc2dc\uc2a4\ud15c \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc5d0 \uaf2d \ud544\uc694\ud558\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub514\ubc14\uc774\uc2a4 \ub808\uc9c0\uc2a4\ud130\uc758 \uc8fc\uc18c\ub97c \ud3ec\uc778\ud130\ub85c \uc5bb\uc5b4 \uc62c \ub54c\uc774\ub2e4. \uadf8\ub7ec\ub098 \ub108\ubb34 \ub0a8\uc6a9\ud558\ub294 \ubc14\ub78c\uc5d0 \ub9ce\uc740 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\ub3c4 \uc0ac\uc2e4\uc774\ub2e4.","title":"Note"},{"location":"Expr/#note_28","text":"\ud615\ubcc0\ud658\uc744 \ub108\ubb34 \ub9ce\uc774 \uc4f4\ub2e4\uace0 \uc0dd\uac01\ub41c\ub2e4\uba74 \uc124\uacc4\uc5d0 \uadfc\ubcf8\uc801\uc778 \ubb38\uc81c\uac00 \uc788\uc744\uc9c0\ub3c4 \ubaa8\ub978\ub2e4.","title":"Note"},{"location":"Expr/#exception_8","text":"(void) \ub85c \ud0c0\uc785\uc744 \ubcc0\ud658\ud558\ub294 \uac83\uc740 [nodiscard]] \uacbd\uace0\ub97c \ub9c9\uae30 \uc704\ud574 \ud45c\uc900\uc5d0\uc11c \ud5c8\uc6a9\ud558\ub294 \ubc29\ubc95\uc740 \uc544\ub2c8\ub2e4. [[nodiscard]] \uc18d\uc131\uc774 \uc788\ub294 \ud568\uc218\ub97c \ud638\ucd9c\ud558\uba74\uc11c \ubc18\ud658 \uacb0\uacfc\ub97c \ubc84\ub9ac\uae30\ub97c \uc6d0\ud55c\ub2e4\uba74, \uc6b0\uc120 \uadf8 \uc0dd\uac01\uc774 \uc815\ub9d0 \uc88b\uc740 \uc0dd\uac01\uc778\uc9c0 \uc9c4\uc9c0\ud558\uac8c \uace0\ubbfc\ud558\ub77c (\ubb34\uc5c7\ubcf4\ub2e4 \ud568\uc218\uc758 \ubc18\ud658 \ud0c0\uc785\uc5d0 [[nodiscard]] \ub97c \uc791\uc131\ud55c\ub370\ub294 \ubcf4\ud1b5 \ud0c0\ub2f9\ud55c \uc774\uc720\uac00 \uc788\ub2e4), \ud558\uc9c0\ub9cc \ub2f9\uc2e0\uc774 \uac12\uc744 \ubc84\ub824\ub3c4 \uc801\uc808\ud558\ub2e4\uace0 \uc0dd\uac01\ud558\uace0, \ub2f9\uc2e0\uacfc \ud568\uaed8 \ucf54\ub4dc\ub97c \ub9ac\ubdf0\ud55c \uc0ac\ub78c\ub4e4\uc774 \ub3d9\uc758\ud55c\ub2e4\uba74 (void) \ub97c \uc368\uc11c \uacbd\uace0\ub97c \uc5c6\uc560\ub77c.","title":"Exception"},{"location":"Expr/#alternatives","text":"\ud0c0\uc785 \ubcc0\ud658\uc740 \ub110\ub9ac (\uc798\ubabb) \uc0ac\uc6a9\ub418\uace0 \uc788\ub2e4. \ubaa8\ub358 C++\uc740 \uaddc\uce59\uc744 \ub450\uace0 \uc5ec\ub7ec \ubc29\ubc95\uc73c\ub85c \ud0c0\uc785 \ubcc0\ud658\uc774 \ud544\uc694 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud55c\ub2e4 std::variant \uc744 \uc0ac\uc6a9\ud55c\ub2e4 \ud3ec\uc778\ud130 \ud0c0\uc785 \uac04\uc758 \uc798 \uc815\uc758\ub418\uace0, \uc548\uc804\ud558\uace0, \ubb35\uc2dc\uc801\uc778 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud55c\ub2e4","title":"Alternatives"},{"location":"Expr/#enforcement_32","text":"[[nodiscard]] \ub85c \ubc18\ud658\ud558\ub294 \ud568\uc218\ub97c \uc81c\uc678\ud558\uace0 C-\uc2a4\ud0c0\uc77c \ud0c0\uc785 \ubcc0\ud658\uc744 \uc5c6\uc560\ub3c4\ub85d \uac15\uc81c\ud55c\ub2e4 \ud568\uc218 \ud615\ud0dc\ub85c \ubcc0\ud658\ud558\ub294 \uc77c\uc774 \ube48\ubc88\ud558\uba74 \uacbd\uace0\ud558\ub77c('\ub9ce\uc774' \ud558\ub294 \uc2dc\uc810\uc5d0\uc11c \ubd84\uba85 \ubb38\uc81c\uac00 \uc788\ub2e4) \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc740 reinterpret_cast \ub97c \uae08\uc9c0\ud55c\ub2e4 \ud3ec\uc778\ud130 \ud0c0\uc785 \uac04\uc758 \ub3d9\uc77c \ud0c0\uc785 \ud615\ubcc0\ud658 \uc740 \uacbd\uace0\ud558\ub77c \ud3ec\uc778\ud130\uac00 \ubb35\uc2dc\uc801 \uc73c\ub85c \ubcc0\ud658\ub420 \uc218 \uc788\uc73c\uba74 \uacbd\uace0\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es49-named-cast","text":"","title":"ES.49: \ud0c0\uc785 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud574\uc57c\ub9cc \ud55c\ub2e4\uba74, \ubbf8\ub9ac \uc815\uc758\ub41c \ubc29\ubc95\uc73c\ub85c \ubcc0\ud658(named cast)\ud558\ub77c"},{"location":"Expr/#reason_33","text":"\uac00\ub3c5\uc131. \uc624\ub958 \uc608\ubc29. Named cast\ub4e4\uc740 C \uc2a4\ud0c0\uc77c\uc774\ub098 \ud568\uc218\ud615 \ud615\ubcc0\ud658\ubcf4\ub2e4 \ub354 \uad6c\uccb4\uc801\uc774\uba70, \ucef4\ud30c\uc77c\ub7ec\uac00 \uc77c\ubd80 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. C \uc2a4\ud0c0\uc77c \ubcc0\ud658: (int) a \ud568\uc218\ud615 \ubcc0\ud658: int(a) Named cast\uc758 \ubaa9\ub85d: static_cast const_cast reinterpret_cast dynamic_cast std::move // move(x) \ub294 x \uc5d0 \ub300\ud55c r-value \ucc38\uc870\ub97c \ubc18\ud658\ud55c\ub2e4 std::forward // forward(x) \ub294 x \uc5d0 \ub300\ud55c r-value \ucc38\uc870\ub97c \ubc18\ud658\ud55c\ub2e4 gsl::narrow_cast // narrow_cast<T>(x) \ub294 static_cast<T>(x) \uc640 \ub3d9\uc77c\ud558\ub2e4 gsl::narrow // narrow<T>(x) \ub294 static_cast<T>(x) \uc640 \ub3d9\uc77c\ud558\uba70, \ub9cc\uc57d static_cast<T>(x) == x \uac00 \uc544\ub2c8\uba74 \uc608\uc678 narrowing_error \ub97c \ub358\uc9c4\ub2e4","title":"Reason"},{"location":"Expr/#example_38","text":"class B { /* ... */ }; class D { /* ... */ }; template < typename D > D * upcast ( B * pb ) { D * pd0 = pb ; // error: B* \uc5d0\uc11c D*\ub85c \ubb35\uc2dc\uc801 \ubcc0\ud658\ud560 \uc218 \uc5c6\ub2e4 D * pd1 = ( D * ) pb ; // \uc801\ubc95\ud558\uc9c0\ub9cc, \uc5b4\ub5bb\uac8c \ub418\uaca0\ub294\uac00? D * pd2 = static_cast < D *> ( pb ); // error: D \ub294 B\uc758 \ud558\uc704 \ud0c0\uc785\uc774 \uc544\ub2c8\ub2e4 D * pd3 = reinterpret_cast < D *> ( pb ); // OK: \uc815\ub9d0 \uad1c\ucc2e\ub2e4\uba74! D * pd4 = dynamic_cast < D *> ( pb ); // OK: nullptr\ub97c \ubc18\ud658\ud55c\ub2e4 // ... } \uc774 \uc608\uc2dc\ub294 D \uac00 B \uc758 \ud558\uc704 \ud0c0\uc785\uc774\uba74\uc11c, \ub204\uad70\uac00 \uacc4\uce35 \uad6c\uc870\ub97c \ub9ac\ud329\ud1a0\ub9c1 \ud588\uc744\ub54c \ubc1c\uc0dd\ud55c \uc2e4\uc81c \ubc84\uadf8\ub4e4\uc744 \uc885\ud569\ud55c \uac83\uc774\ub2e4. C \uc2a4\ud0c0\uc77c \ud0c0\uc785\ubcc0\ud658\uc774 \uc704\ud5d8\ud55c \uc774\uc720\ub294 \uc5b4\ub5a4 \ud615\ud0dc\ub85c\uc758 \ubcc0\ud658\ub3c4 \uc218\ud589\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub294 \uc2e4\uc218\ub85c\ubd80\ud130 \uc6b0\ub9ac\ub97c \ubcf4\ud638\ud574\uc8fc\uc9c0 \uc54a\ub294\ub2e4 (\uc9c0\uae08\ub3c4, \uc55e\uc73c\ub85c\ub3c4).","title":"Example"},{"location":"Expr/#note_29","text":"\uc815\ubcf4\uc758 \uc190\uc2e4\uc774 \uc5c6\ub294 \ud0c0\uc785 \ubcc0\ud658\uc758 \uacbd\uc6b0 (\uac00\ub839 float \uc5d0\uc11c double \ub85c, \ud639\uc740 int32 \uc5d0\uc11c int64 \ub85c \ubcc0\ud658\ud558\ub294 \uacbd\uc6b0), {} \ucd08\uae30\ud654\ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4. double d { some_float }; int64_t i { some_int32 }; \uc774 \ucf54\ub4dc\ub294 \ud0c0\uc785 \ubcc0\ud658\uc744 \uc758\ub3c4\ud588\ub2e4\ub294 \uac83\uc774 \ubd84\uba85\ud788 \ub4dc\ub7ec\ub098\uace0 \uc815\ud655\ub3c4\ub97c \uc783\uc744 \uc218 \uc788\ub294 \ubcc0\ud658\uc744 \uc608\ubc29\ud55c\ub2e4. (\uc608\ub97c \ub4e4\uc790\uba74 \uc774\ub7f0 \ucf54\ub4dc\uc5d0\uc11c float \ub97c double \ub85c \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc740 \ucef4\ud30c\uc77c \uc624\ub958\uac00 \ub41c\ub2e4)","title":"Note"},{"location":"Expr/#note_30","text":"reinterpret_cast \uac00 \ud544\uc218\uc801\uc77c \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ubcf8\uc9c8\uc801\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\ud558\uc9c0\ub294 \uc54a\ub2e4 (\uae30\uacc4 \uc8fc\uc18c\ub97c \ud3ec\uc778\ud130\ub85c \ubc14\uafbc\ub2e4\ub358\uac00): auto p = reinterpret_cast < Device_register > ( 0x800 ); // \ud544\uc5f0\uc801\uc73c\ub85c \uc704\ud5d8\ud558\ub2e4","title":"Note"},{"location":"Expr/#enforcement_33","text":"C\uc2a4\ud0c0\uc77c, \ud568\uc218\ud615 \ud615\ubcc0\ud658\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc740 reinterpret_cast \ub97c \uae08\uc9c0\ud55c\ub2e4 \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc740 static_cast \uac00 \uc0b0\uc220 \ud0c0\uc785\uac04 \ubcc0\ud658\uc5d0 \uc0ac\uc6a9\ub418\uba74 \uacbd\uace0\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es50-const","text":"","title":"ES.50: const\ub97c \uc81c\uac70\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_34","text":"const \ub97c \uac70\uc9d3\ub9d0\ub85c \ub9cc\ub4e0\ub2e4. \ub300\uc0c1 \ubcc0\uc218\uac00 \uc815\ub9d0\ub85c const \ub85c \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74, const \ub97c \uc81c\uac70\ud55c \uacb0\uacfc\ub294 \ubbf8\uc815\uc758 \ud589\ub3d9(undefined behavior)\uc774 \ub41c\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_19","text":"void f ( const int & i ) { const_cast < int &> ( i ) = 42 ; // BAD } static int i = 0 ; static const int j = 0 ; f ( i ); // silent side effect f ( j ); // undefined behavior","title":"Example, bad"},{"location":"Expr/#example_39","text":"\uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 \ucf54\ub4dc \uc911\ubcf5\uc744 \ud53c\ud558\uace0\uc790 const_cast \uc5d0 \uc758\uc874\ud558\uace0 \uc2f6\uc744\uc218\ub3c4 \uc788\ub2e4. \uc774\ub54c\ub294 \ub450 \ud568\uc218\uac00 \uad6c\ud604\uc740 \uc720\uc0ac\ud558\uc9c0\ub9cc \uc624\uc9c1 const \ubd80\ubd84\ub9cc \ub2e4\ub97c \uac83\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4: class Bar ; class Foo { public : // BAD, duplicates logic Bar & get_bar () { /* complex logic around getting a non-const reference to my_bar */ } const Bar & get_bar () const { /* same complex logic around getting a const reference to my_bar */ } private : Bar my_bar ; }; \ub300\uc2e0, \uad6c\ud604 \ucf54\ub4dc\ub97c \uacf5\uc720\ud558\ub3c4\ub85d \ud558\ub77c. \ubcf4\ud1b5\uc758 \uacbd\uc6b0, \ube44- const \ud568\uc218\uc5d0\uc11c const \ud568\uc218\ub97c \ud638\ucd9c\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uadf8 \uad6c\ud604\uc5d0 \ubcf5\uc7a1\ud55c \ub85c\uc9c1\uc774 \uc788\ub2e4\uba74 \uc5ec\uc804\ud788 const_cast \ub97c \uc0ac\uc6a9\ud558\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud328\ud134\uc744 \uc4f0\uac8c \ub420 \uac83\uc774\ub2e4: class Foo { public : // not great, non-const calls const version but resorts to const_cast Bar & get_bar () { return const_cast < Bar &> ( static_cast < const Foo &> ( * this ). get_bar ()); } const Bar & get_bar () const { /* the complex logic around getting a const reference to my_bar */ } private : Bar my_bar ; }; \uc774 \ud328\ud134\uc740 \uc815\ud655\ud558\uac8c \uc0ac\uc6a9\ub418\uc5c8\uc744 \ub54c\ub294 \ud638\ucd9c\uc790\uac00 \ube44- const \uac1c\uccb4\ub97c \ud1b5\ud574 \ud638\ucd9c\ud558\uae30 \ub54c\ubb38\uc5d0 \uc548\uc804\ud558\uc9c0\ub9cc, \uc548\uc804\uc131\uc774 \uac80\uc0ac\uae30\uc758 \uaddc\uce59\ub9cc\ud07c \uc790\uc5f0\uc2a4\ub7fd\uac8c \uac15\uc81c\ub418\uae30\ub294 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 \uc774\uc0c1\uc801\uc778 \ucf54\ub4dc\ub294 \uc544\ub2c8\ub2e4. \uc774\ub7f0 \ud328\ud134 \ub300\uc2e0, \uacf5\ud1b5\ub418\ub294 \ucf54\ub4dc\ub294 \uacf5\ud1b5\ub41c \ubcf4\uc870 \ud568\uc218(helper function)\uc5d0 \ubc30\uce58\ud558\ub77c -- \uadf8\ub9ac\uace0 const \ub97c \ud0c0\uc785 \ucd94\ub860\uc5d0\uc11c \ucc3e\uc544\ub0b4\ub3c4\ub85d \ud15c\ud50c\ub9bf\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub77c. \uc774\ub294 const_cast \uc774 \uc644\uc804\ud788 \ud544\uc694\uc5c6\uac8c \ub9cc\ub4e0\ub2e4: class Foo { public : // good Bar & get_bar () { return get_bar_impl ( * this ); } const Bar & get_bar () const { return get_bar_impl ( * this ); } private : Bar my_bar ; template < class T > // good, deduces whether T is const or non-const static auto get_bar_impl ( T & t ) -> decltype ( t . get_bar ()){ // the complex logic around getting // a possibly-const reference to my_bar } };","title":"Example"},{"location":"Expr/#exception_9","text":"const -\ubd80\uc815\ud655(incorrect)\ud55c \ud568\uc218\ub97c \ud638\ucd9c\ud560\ub54c const \ub97c \uc81c\uac70\ud574\uc57c \ud560\uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7f0 \ud568\uc218\ub294 \ud55c \uc9c0\uc810\uc5d0\uc11c inline const -\uc815\ud655\ud55c \ud568\uc218\ub85c \uac10\uc2f8\uc11c \uc0ac\uc6a9\ud558\ub77c.","title":"Exception"},{"location":"Expr/#example_40","text":"\ubcf4\ud1b5 const \ub97c \uc5c6\uc560\ubc84\ub9ac\ub294 \uc774\uc720\ub294 \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \uac1d\uccb4 \uc18d\uc5d0 \uc788\ub294 \uc77c\uc2dc\uc801\uc778 \uc815\ubcf4\ub97c \ubcc0\uacbd\ud558\uae30 \uc704\ud574\uc11c\uc774\ub2e4. \uc608\ub97c \ub4e4\uba74 \uce90\uc2f1\uac12, \uc784\uc2dc\uacc4\uc0b0\uac12, \uc120\uacc4\uc0b0\uac12 \ub4f1\uc774\ub2e4. \uc774\ub7f0 \uac12\uc740 const_cast \ub97c \uc4f0\ub294 \uac83\ubcf4\ub2e4 mutable \uc774\ub098 \uac04\uc811\uc801\uc778 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74 \ub354 \uc27d\uac8c \ucc98\ub9ac\ud560 \uc218 \uc788\ub2e4. \ube44\uc6a9\uc774 \ub4dc\ub294 \ucc98\ub9ac\ub97c \uac70\uccd0\uc11c \uacc4\uc0b0\ud55c \uacb0\uacfc\ub97c \uc720\uc9c0\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574\ubcf4\ub77c: int compute ( int x ); // x\ub85c\ubd80\ud130 \uac12\uc744 \uacc4\uc0b0\ud55c\ub2e4; // \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4 class Cache { // int->int \ucc98\ub9ac\uc5d0\uc11c \uce90\uc2dc\ub97c \uad6c\ud604\ud55c \ud0c0\uc785 public : pair < bool , int > find ( int x ) const ; // x\ub97c \uc704\ud55c \uac12\uc774 \uc788\ub294\uac00? void set ( int x , int v ); // x\ub97c \uc704\ud55c \uac12 y\ub97c \ub9cc\ub4e0\ub2e4 // ... private : // ... }; class X { public : int get_val ( int x ) { auto p = cache . find ( x ); if ( p . first ) return p . second ; int val = compute ( x ); cache . set ( x , val ); // x\uc5d0 \uac12\uc744 \ub123\ub294\ub2e4 return val ; } // ... private : Cache cache ; }; \uc5ec\uae30\uc11c get_val() \ub294 \ub17c\ub9ac\uc801\uc73c\ub85c\ub294 \uc0c1\uc218\uc774\ub2e4. \ub530\ub77c\uc11c const \uba64\ubc84\ub85c \ub9cc\ub4e4 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \uc774\ub807\uac8c \ud558\ub824\uba74 \uc5ec\uc804\ud788 cache \ub97c \ubcc0\uacbd\ud574\uc57c \ud55c\ub2e4. \uc77c\ubd80\ub294 \uadf8\ub7ec\uc9c0 \uc54a\uace0 const_cast \ub97c \uc0ac\uc6a9\ud55c\ub2e4: class X { // \ud0c0\uc785 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud55c \uc758\uc2ec\uc2a4\ub7ec\uc6b4 \ud574\uacb0\ubc29\ubc95 public : int get_val ( int x ) const { auto p = cache . find ( x ); if ( p . first ) return p . second ; int val = compute ( x ); const_cast < Cache &> ( cache ). set ( x , val ); // \ucf54\ub4dc\uac00 \uc9c0\uc800\ubd84\ud558\ub2e4 return val ; } // ... private : Cache cache ; }; \ub2e4\ud589\ud788, \ub354 \ub098\uc740 \ud574\uacb0\ucc45\uc774 \uc788\ub2e4: cache \uac00 const \uac1c\uccb4\uc5ec\ub3c4 \ubcc0\uacbd \uac00\ub2a5\ud558\ub2e4\uace0 \ud45c\uae30(state)\ud558\ub294 \uac83\uc774\ub2e4: class X { // \ub354 \ub098\uc740 \ud574\uacb0\ubc29\ubc95 public : int get_val ( int x ) const { auto p = cache . find ( x ); if ( p . first ) return p . second ; int val = compute ( x ); cache . set ( x , val ); return val ; } // ... private : mutable Cache cache ; }; \ub2e4\ub978 \ubc29\ubc95\uc740 cache \uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \ubcf4\uad00\ud558\ub294 \uac83\uc774\ub2e4: class X { // OK, \ud558\uc9c0\ub9cc \uc870\uae08 \uc9c0\uc800\ubd84\ud558\ub2e4 public : int get_val ( int x ) const { auto p = cache -> find ( x ); if ( p . first ) return p . second ; int val = compute ( x ); cache -> set ( x , val ); return val ; } // ... private : unique_ptr < Cache > cache ; }; \uc774 \ud574\uacb0\ucc45\uc740 \uad49\uc7a5\ud788 \uc720\uc5f0\ud558\uc9c0\ub9cc, cache \ub85c \uac00\ub9ac\ud0a4\ub294 \uac1c\uccb4\uc758 \uba85\uc2dc\uc801\uc778 \uc0dd\uc131\uacfc \uc18c\uba78\uc744 \ud544\uc694\ub85c \ud55c\ub2e4. (\uc544\ub9c8 \uadf8 \ucf54\ub4dc\ub294 X \uc758 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0 \uc704\uce58\ud560 \uac83\uc774\ub2e4). \uba40\ud2f0\uc2a4\ub808\ub4dc \ucf54\ub4dc\uc5d0\uc11c cache \uc5d0 \ub370\uc774\ud130 \uacbd\uc7c1\uc774 \ubc1c\uc0dd\ud558\uba74 std::mutex \ub97c \uc0ac\uc6a9\ud574 \ubcf4\ud638\ud574\uc57c \ud55c\ub2e4.","title":"Example"},{"location":"Expr/#enforcement_34","text":"const_cast \ub97c \uc9c0\uc801\ud55c\ub2e4. \uc774 \uaddc\uce59\uc740 \ud0c0\uc785 \uc548\uc815\uc131 \ubd84\uc11d \uacfc \uad00\ub828 \uc788\ub2e4","title":"Enforcement"},{"location":"Expr/#es55","text":"","title":"ES.55: \ubc94\uc704 \uac80\uc0ac\uac00 \ud544\uc694\uc5c6\uac8c \ud558\ub77c"},{"location":"Expr/#reason_35","text":"\uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud560 \uc18c\uc9c0\uac00 \uc5c6\ub2e4 (\ub610\ud55c \ub354 \ube60\ub974\uac8c \uc2e4\ud589\ub420 \uc218 \uc788\ub2e4).","title":"Reason"},{"location":"Expr/#example_41","text":"for ( auto & x : v ) // print all elements of v cout << x << '\\n' ; auto p = find ( v , x ); // find x in v","title":"Example"},{"location":"Expr/#enforcement_35","text":"\uba85\uc2dc\uc801\uc778 \ubc94\uc704\uac80\uc0ac\ub97c \ucc3e\uc544\uc11c \uc801\uc808\ud55c \ub300\uc548\uc744 \uc81c\uc2dc\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#es56-stdmove","text":"","title":"ES.56: std::move()\ub294 \uac1c\uccb4\ub97c \ub2e4\ub978 \uc720\ud6a8\ubc94\uc704\ub85c \uba85\uc2dc\uc801\uc73c\ub85c \uc62e\uaca8\uc57c \ud560\ub54c\ub9cc \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_36","text":"\ubcf5\uc81c\ub97c \ub9c9\uace0 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud574 \ubcf5\uc0ac\ubcf4\ub2e4\ub294 \uc774\ub3d9\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub3d9 \uc5f0\uc0b0\uc740 \ubcf4\ud1b5 \ube48 \uac1c\uccb4\ub97c \ub0a8\uae34\ub2e4 ( C.64 ). \uc774\ub294 \uae30\ub300\ubc16\uc758 \uacb0\uacfc \ud639\uc740 \uc704\ud5d8\uc73c\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4. \uac00\ub2a5\ud558\ub2e4\uba74 lvalue\ub85c\ubd80\ud130 \uc774\ub3d9\ud558\ub294 \uac83\uc744 \ud53c\ud558\ub824 \ud574\uc57c\ud55c\ub2e4 (lvalue\uc5d0 \ub098\uc911\uc5d0 \uc811\uadfc\ud560 \uc218\ub3c4 \uc788\ub2e4).","title":"Reason"},{"location":"Expr/#notes","text":"\uc774\ub3d9\uc740 \uc62e\uaca8\uc9c0\ub294 \ucabd(source)\uc774 rvalue\uc774\uba74 \ubb35\uc2dc\uc801\uc73c\ub85c \uc77c\uc5b4\ub09c\ub2e4 (\uc608\ucee8\ub300, \ud568\uc218\uc758 \uacb0\uacfc\ucc98\ub7fc return \ub41c \uac12), \uadf8\ub7ec\ub2c8 \uba85\uc2dc\uc801\uc73c\ub85c move \ub97c \ud574\uc11c \ucf54\ub4dc\ub97c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4 \ud544\uc694\ub294 \uc5c6\ub2e4. \ub300\uc2e0, \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc9e7\uc740 \ud568\uc218\ub97c \uc791\uc131\ud558\uace0 \ud568\uc218\uc758 \ubc18\ud658\uacfc \ud638\ucd9c\uc790\uc758 \ubc18\ud658\uac12\uc744 \ubc1b\ub294 \ubd80\ubd84\uc774 \uc790\uc5f0\uc2a4\ub7fd\uac8c \ucd5c\uc801\ud654\ub418\ub3c4\ub85d \ud558\ub77c. \uc77c\ubc18\uc801\uc73c\ub85c, \uc774 \ubb38\uc11c\uc758 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub974\ub294 \uac83(\ubcc0\uc218\uc758 \uc720\ud6a8\ubc94\uc704\uac00 \ubd88\ud544\uc694\ud558\uac8c \ucee4\uc9c0\uc9c0 \uc54a\uac8c \ud558\uac70\ub098, \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc9e7\uc740 \ud568\uc218\ub97c \uc791\uc131\ud558\ub294 \uac83\uc744 \ud3ec\ud568\ud55c\ub2e4)\uc740 \ub300\ubd80\ubd84\uc758 \uba85\uc2dc\uc801\uc778 std::move \ub97c \ud544\uc694\uc5c6\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uba85\uc2dc\uc801\uc73c\ub85c move \ud558\ub294 \uac83\uc740 \uac1c\uccb4\ub97c \ub2e4\ub978 \uc720\ud6a8\ubc94\uc704\ub85c \uc774\ub3d9\uc2dc\ud0ac \ub54c \ud544\uc694\ud558\ub2e4. \ud2b9\ud788 \uadf8 \uac1c\uccb4\ub97c \uc544\ub798 \uc608\uc2dc\ucc98\ub7fc \"sink\" \ud568\uc218\ub85c \ub118\uae30\uac70\ub098 \uc774\ub3d9 \uc5f0\uc0b0\ub4e4(\uc774\ub3d9 \uc0dd\uc131, \uc774\ub3d9 \ub300\uc785 \uc5f0\uc0b0\uc790, \uadf8\ub9ac\uace0 swap \uc5f0\uc0b0)\uc744 \ud638\ucd9c\ud560 \ub54c \ud544\uc694\ud558\ub2e4.","title":"Notes"},{"location":"Expr/#example-bad_20","text":"void sink ( X && x ); // sink \ud568\uc218\uac00 x\uc758 \uc18c\uc720\uad8c\uc744 \uac00\uc838\uac04\ub2e4 void user () { X x ; // error: lvalue \ucc38\uc870\ub294 rvalue \ucc38\uc870\uc5d0 \ubc14\uc778\ub529\ub418\uc9c0 \uc54a\ub294\ub2e4 sink ( x ); // OK: sink \uac00 x\uc758 \ub0b4\uc6a9\uc744 \uac00\uc838\uac14\uc73c\ubbc0\ub85c, x\ub294 \ube44\uc5b4\uc788\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4 sink ( std :: move ( x )); // ... // probably a mistake use ( x ); } \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 std::move() \ub294 && \ub97c \uc0ac\uc6a9\ud558\ub294 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc2e4\ud589\uc778\uc790\ub97c \ub118\uae38\ub54c \uc0ac\uc6a9\ud55c\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \ub4a4\uc5d0\ub294 \ub300\uc0c1 \uac1c\uccb4\uac00 \uc774\ub3d9\ud588\ub2e4\uace0 \uac00\uc815\ud558\uba70 ( C.64 \ub97c \ud568\uaed8 \ubcf4\ub77c), \uc0c8\ub85c\uc6b4 \uac12\uc744 \uadf8 \uac1c\uccb4\uc5d0 \uc4f0\uae30 \uc804\uae4c\uc9c0\ub294 \uc0c1\ud0dc\ub97c \uc77d\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4. void f () { string s1 = \"supercalifragilisticexpialidocious\" ; string s2 = s1 ; // ok, \uc0ac\ubcf8(copy)\uc744 \uc0ac\uc838\uac04\ub2e4 assert ( s1 == \"supercalifragilisticexpialidocious\" ); // ok // bad, s1\uc758 \uac12\uc744 \ubcf4\uc874\ud558\uace0\uc790 \ud55c\ub2e4\uba74 \uc2e4\uc218\ud55c \uac83\uc774\ub2e4 string s3 = move ( s1 ); // bad, s1\uc774 \ubcc0\uacbd\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 assert\ub294 \uc2e4\ud328\ud560 \uac83\uc774\ub2e4. assert ( s1 == \"supercalifragilisticexpialidocious\" ); }","title":"Example, bad"},{"location":"Expr/#example_42","text":"void sink ( unique_ptr < widget > p ); // p\uc758 \uc18c\uc720\uad8c\uc744 sink()\uc5d0 \uc804\ub2ec\ud55c\ub2e4 void f () { auto w = make_unique < widget > (); // ... sink ( std :: move ( w )); // ok, give to sink() // ... sink ( w ); // Error: unique_ptr\ub294 \ubcf5\uc0ac\ud560 \uc218 \uc5c6\ub3c4\ub85d \uc138\uc2ec\ud558\uac8c \uc124\uacc4\ub418\uc5c8\ub2e4 }","title":"Example"},{"location":"Expr/#notes_1","text":"std::move() \ub294 \uc2e4\uc81c\ub85c\ub294 && \ub85c \ud615\ubcc0\ud658\ud558\ub294 \uac83\uc774\ub2e4; \ub2e8\uc21c\ud788 \uc774 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uac83 \ub9cc\uc73c\ub85c\ub294 \uc544\ubb34\uac83\ub3c4 \uc774\ub3d9\uc2dc\ud0a4\uc9c0 \uc54a\ub294\ub2e4. \ub300\uc2e0 \uc778\uc790\ub85c \uc804\ub2ec\ub41c \uac1c\uccb4\ub97c \uc774\ub3d9\ud560\uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. C++ \uc5b8\uc5b4\ub294 \ud568\uc218\ub85c\ubd80\ud130\uc758 \ubc18\ud658\ucc98\ub7fc \uac1c\uccb4\ub97c \uc774\ub3d9\uc2dc\ud0ac \uc218 \uc788\ub294 \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0(common case)\ub4e4\uc5d0 \ub300\ud574 \uc774\ubbf8 \uc54c\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \ucd94\uac00\uc801\uc73c\ub85c std::move() \ub97c \uc0ac\uc6a9\ud574\uc11c \ucf54\ub4dc\ub97c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4 \ud544\uc694\ub294 \uc5c6\ub2e4. \"\uadf8\ub0e5 \ub354 \ud6a8\uc728\uc801\uc774\ub2e4\"\ub77c\uace0 \ub4e4\uc5c8\uae30 \ub54c\ubb38\uc5d0 std::move() \ub97c \uc0ac\uc6a9\ud574\uc11c\ub294 \uc808\ub300\ub85c \uc548\ub41c\ub2e4. \uc815\ubcf4\uac00 \uc5c6\ub294 \"\ud6a8\uc728\uc131\"\uc5d0 \ub300\ud55c \uc8fc\uc7a5\uc740 \ubbff\uc9c0 \ub9c8\ub77c(???). \uc774\uc720 \uc5c6\uc774 \ucf54\ub4dc\ub97c \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uc9c0 \ub9c8\ub77c(??).","title":"Notes"},{"location":"Expr/#example-bad_21","text":"vector < int > make_vector () { vector < int > result ; // ... load result with data return std :: move ( result ); // bad; just write \"return result;\" } return move(local_variable); \uc640 \uac19\uc740 \ucf54\ub4dc\ub294 \uc808\ub300\ub85c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c, \uc5b8\uc5b4\ucc28\uc6d0\uc5d0\uc11c \uc774\ubbf8 \uadf8 \ubcc0\uc218\uac00 \uc774\ub3d9\uc758 \ub300\uc0c1\uc774 \ub41c\ub2e4\ub294 \uac83\uc744 \uc54c\uace0 \uc788\ub2e4. \ucf54\ub4dc\uc5d0 move \ub97c \uc368\ub193\ub294 \uac83\uc740 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc73c\uba70, \uc9c0\uc5ed \ubcc0\uc218\uc5d0 \ub300\ud55c \ucd94\uac00\uc801\uc778 \ucc38\uc870\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc77c\ubd80 \ucef4\ud30c\uc77c\ub7ec\ub4e4\uc758 \ubc18\ud658\uac12 \ucd5c\uc801\ud654(RVO: Return Value Optimization)\ub97c \ubc29\ud574(detrimental)\ud55c\ub2e4.","title":"Example, bad"},{"location":"Expr/#example-bad_22","text":"// bad; move\ub97c \uc791\uc131\ud558\uc9c0 \uc54a\uc544\ub3c4 \uc774\ub3d9 \uc758\ubbf8\uad6c\uc870\uac00 \uc801\uc6a9\ub41c\ub2e4 vector < int > v = std :: move ( make_vector ()); f \uac00 \uac12(by value)\uc744 \ubc18\ud658\ud55c\ub2e4\uba74, \uc808\ub300\ub85c x = move(f()); \ucc98\ub7fc \ubc18\ud658\ub418\ub294 \uac12\uc5d0 move \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uc5b8\uc5b4\ucc28\uc6d0\uc5d0\uc11c \ubc18\ud658 \uac12\uc774 \uc784\uc2dc \uac1c\uccb4\uc774\uba70, \uc774 \uac1c\uccb4\uac00 \uc774\ub3d9\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc774\ubbf8 \uc54c\uace0 \uc788\ub2e4.","title":"Example, bad"},{"location":"Expr/#example_43","text":"void mover ( X && x ) { call_something ( std :: move ( x )); // ok call_something ( std :: forward < X > ( x )); // bad, don't std::forward an rvalue reference call_something ( x ); // suspicious, why not std::move? } template < class T > void forwarder ( T && t ) { call_something ( std :: move ( t )); // bad, don't std::move a forwarding reference call_something ( std :: forward < T > ( t )); // ok call_something ( t ); // suspicious, why not std::forward? }","title":"Example"},{"location":"Expr/#enforcement_36","text":"x \uac00 rvalue\uc774\uac70\ub098 \uc5b8\uc5b4\uc5d0\uc11c rvalue\ub85c \ucc98\ub9ac\ud560\ub54c std::move(x) \uac00 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4. return std::move(local_variable); \uac19\uc740 \ucf54\ub4dc\ub098 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218\uc5d0\uc11c std::move(f()) \ub97c \ud3ec\ud568\ud55c\ub2e4 S&& \ub9e4\uac1c\ubcc0\uc218\ub97c \ubc1b\ub294 \ud568\uc218\uac00 lvalue\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud55c const S& \uc911\ubcf5\uc815\uc758\uac00 \uc5c6\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 std::move \ub85c \uc2e4\ud589\uc778\uc790\ub97c \uc804\ub2ec\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4. \ub9e4\uac1c\ubcc0\uc218\uc758 \ud0c0\uc785\uc774 X&& \uac00 \uc544\ub2c8\uac70\ub098, \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\uac00 T \uc774\uba74\uc11c T&& \ub85c \uc804\ub2ec\ud558\uc9c0 \uc54a\uac70\ub098, move\ub9cc \uac00\ub2a5\ud55c \ud0c0\uc785\uc758 \uac12\uc744 \ubc1b\ub294 \uacbd\uc6b0\ub294 \uc81c\uc678\ud55c\ub2e4 std::move \uac00 forwarding \ucc38\uc870( T \uac00 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785\uc77c\ub54c T&& \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9)\uc5d0 \uc801\uc6a9\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4. \ub300\uc2e0 std::forward \ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. std::move \uac00 rvalue \ucc38\uc870\uac00 \uc544\ub2cc \ubd80\ubd84\uc5d0 \uc0ac\uc6a9\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 (\uc774\uc804 \uaddc\uce59\uc5d0\uc11c forward\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \ucd94\uac00\ud55c \uc880 \ub354 \uc77c\ubc18\ud654\ub41c \uaddc\uce59\uc774\ub2e4) std::forward \uac00 rvalue \ucc38\uc870( X \uac00 \uc2e4\uc81c \ud0c0\uc785\uc77c \ub54c X&& \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9)\uc5d0 \uc0ac\uc6a9\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4. \ub300\uc2e0 std::move \ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. std::forward \uac00 forwarding \ucc38\uc870 \uc774\uc678\uc5d0 \uc0ac\uc6a9\ub418\uc5c8\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 (\uc774\uc804 \uaddc\uce59\uc5d0\uc11c move\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub97c \ucd94\uac00\ud55c \uc880 \ub354 \uc77c\ubc18\ud654\ub41c \uaddc\uce59\uc774\ub2e4) Flag when an object is potentially moved from and the next operation is a const operation; there should first be an intervening non- const operation, ideally assignment, to first reset the object's value.","title":"Enforcement"},{"location":"Expr/#es60-new-delete","text":"","title":"ES.60: \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub294 \ud568\uc218 \uc678\ubd80\uc5d0\uc11c new\uc640 delete \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c"},{"location":"Expr/#reason_37","text":"\ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc \ub0b4\uc5d0\uc11c \uc9c1\uc811\uc801\uc778 \ub9ac\uc18c\uc2a4 \uad00\ub9ac\ub294 \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \uc26c\uc6b0\uba70 \uc9c0\ub8e8(tedious)\ud558\ub2e4.","title":"Reason"},{"location":"Expr/#note_31","text":"\" new \ub97c \ub178\ucd9c\uc2dc\ucf1c\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c!\"\ub85c \uc54c\ub824\uc838\uc788\ub2e4","title":"Note"},{"location":"Expr/#example-bad_23","text":"void f ( int n ) { auto p = new X [ n ]; // n default constructed Xs // ... delete [] p ; } ... \uc5d0 delete \uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ub9cc\ub4dc\ub294 \ucf54\ub4dc\uac00 \uc788\uc744 \uc218\ub3c4 \uc788\ub2e4.","title":"Example, bad"},{"location":"Expr/#see-also_1","text":"R: \ub9ac\uc18c\uc2a4 \uad00\ub9ac","title":"See also"},{"location":"Expr/#enforcement_37","text":"\uadf8\ub300\ub85c \ub178\ucd9c\ub41c new \uc640 delete \ub97c \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#es61-delete-delete","text":"","title":"ES.61: \ubc30\uc5f4\uc740 delete[], \ub2e8\uc77c \uac1c\uccb4\ub294 delete\ub97c \uc0ac\uc6a9\ud574\uc11c \ud574\uc81c\ud558\ub77c"},{"location":"Expr/#reason_38","text":"C++\uc5b8\uc5b4\uac00 \uc694\uad6c\ud558\ub294 \uac83\uc774\uba70, \ub9ac\uc18c\uc2a4 \ud574\uc81c \uc624\ub958\uc640 \uba54\ubaa8\ub9ac \uc624\uc5fc(memory corruption) \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_24","text":"void f ( int n ) { auto p = new X [ n ]; // n \uac1c\uc758 X\ub97c \uc0dd\uc131\ud55c\ub2e4 // ... delete p ; // error: p[] \ubc30\uc5f4\uc774 \uc544\ub2c8\ub77c p\uc758 \ub300\uc0c1\uc774 \ub418\ub294 \uccab\ubc88\uc9f8 \uac1c\uccb4\ub9cc \ud30c\uad34\ud55c\ub2e4, }","title":"Example, bad"},{"location":"Expr/#note_32","text":"\uc774 \uc608\uc81c\ub294 no naked new rule \ub97c \uc704\ubc18\ud560 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ub9ce\uc740 \ub2e4\ub978 \ubb38\uc81c\ub97c \uc57c\uae30\ud55c\ub2e4.","title":"Note"},{"location":"Expr/#enforcement_38","text":"new , delete \uac00 \uac19\uc740 \uc601\uc5ed\ubc94\uc704\uc5d0 \uc788\ub2e4\uba74 \uc624\ub958\uc5ec\ubd80\ub97c \uc9c0\uc801\ud560 \uc218 \uc788\ub2e4 new , delete \uac00 \uc0dd\uc131\uc790/\uc18c\uba78\uc790 \uc548\uc5d0 \uc788\ub2e4\uba74 \uc624\ub958\uc5ec\ubd80\ub97c \uc9c0\uc801\ud560 \uc218 \uc788\ub2e4","title":"Enforcement"},{"location":"Expr/#es62","text":"","title":"ES.62: \uc11c\ub85c \ub2e4\ub978 \ubc30\uc5f4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \ube44\uad50\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_39","text":"\uacb0\uacfc\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_25","text":"void f ( int n ) { int a1 [ 7 ]; int a2 [ 9 ]; if ( & a1 [ 5 ] < & a2 [ 7 ]) {} // bad: undefined if ( 0 < & a1 [ 5 ] - & a2 [ 7 ]) {} // bad: undefined }","title":"Example, bad"},{"location":"Expr/#note_33","text":"\ub354 \ub9ce\uc740 \ubb38\uc81c\uac00 \ub0b4\ud3ec\ub418\uc5b4 \uc788\ub2e4.","title":"Note"},{"location":"Expr/#enforcement_39","text":"???","title":"Enforcement"},{"location":"Expr/#es63-slice","text":"","title":"ES.63: \ubcf5\uc0ac \uc190\uc2e4(slice)\uc774 \uc5c6\ub3c4\ub85d \ud558\ub77c"},{"location":"Expr/#reason_40","text":"Slicing\uc774\ub780 \uac1c\uccb4\uc758 \uc77c\ubd80\ubd84\ub9cc\uc744 \uc0ac\uc6a9\ud574\uc11c \ub300\uc785\ud558\uac70\ub098 \ucd08\uae30\ud654 \ud558\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4 -- \ub300\ubd80\ubd84 \uac1c\uccb4\ub294 \ubaa8\ub4e0 \uba64\ubc84\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uace0 \uc0dd\uac01\ud558\uba70 \uc791\uc131\ub418\uc5c8\uae30\uc5d0 \uc774\ub294 \uc624\ub958\ub85c \uc774\uc5b4\uc9c4\ub2e4. \ub4dc\ubb3c\uac8c\ub3c4 slicing\uc744 \uc2e0\uc911\ud558\uac8c \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc774 \ub180\ub77c\uc6b8\uc218\ub3c4 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example_44","text":"class Shape { /* ... */ }; class Circle : public Shape { /* ... */ Point c ; int r ; }; Circle c {{ 0 , 0 }, 42 }; Shape s { c }; // Circle\uc758 Shape\ubd80\ubd84\uc744 \ubcf5\uc0ac\ud55c\ub2e4 \ubcf5\uc0ac\ud55c \uacb0\uacfc\ub294 c \uc758 \uc911\uc2ec\uc810\uacfc \ubc18\uc9c0\ub984\uc774 s \ub85c \ubcf5\uc0ac\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \ubb34\uc758\ubbf8\ud560 \uac83\uc774\ub2e4. \uc774 \ubb38\uc81c\ub97c \ub9c9\ub294 \ubc29\ubc95\uc740 \uc0c1\uc704 \ud074\ub798\uc2a4 Shape \uac00 \uc774\ub7f0 \ub3d9\uc791\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc791\uc131\ud558\ub294 \uac83\uc774\ub2e4 .","title":"Example"},{"location":"Expr/#alternative_1","text":"\ubcf5\uc0ac \uc190\uc2e4\uc744 \uc758\ub3c4\ud588\ub2e4\uba74, \uadf8\ub7f0 \uc77c\uc744 \ud558\ub294 \uba85\uc2dc\uc801\uc778 \ucc98\ub9ac(operation)\ub97c \uc791\uc131\ud558\ub77c. \uc774\ub807\uac8c \ud558\ub294\uac83\uc774 \ucf54\ub4dc\ub97c \uc77d\ub294 \uc0ac\ub78c\ub4e4\uc774 \ud63c\ub780\uc744 \uacaa\uc9c0 \uc54a\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uc608\ub97c \ub4e4\uba74: class Smiley : public Circle { public : Circle copy_circle (); // ... }; Smiley sm { /* ... */ }; Circle c1 { sm }; // \uc774\uc0c1\uc801\uc73c\ub85c\ub294 Circle\uc758 \uc815\uc758\uc5d0 \uc758\ud574 \uae08\uc9c0(prevent)\ub418\uc5b4\uc57c \ud55c\ub2e4. Circle c2 { sm . copy_circle ()};","title":"Alternative"},{"location":"Expr/#enforcement_40","text":"\ubcf5\uc0ac \uc190\uc2e4\uc740 \uacbd\uace0\ud558\ub77c.","title":"Enforcement"},{"location":"Expr/#es64-te","text":"","title":"ES.64: \uac1c\uccb4\ub97c \uc0dd\uc131\ud560 \ub54c\ub294 T{e}\ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_41","text":"T{e} \uc0dd\uc131 \ubb38\ubc95\uc740 \uc0dd\uc131\uc790 \ud638\ucd9c\uc744 \uae30\ub300\ud55c\ub2e4\ub294 \uac83\uc744 \ubd84\uba85\ud558\uac8c \ub4dc\ub7ec\ub0b8\ub2e4. T{e} \uc0dd\uc131 \ubb38\ubc95\uc740 \ud0c0\uc785\uc758 \ucd95\uc18c \ubcc0\ud658(narrowing)\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4. T{e} \ub294 \ud0c0\uc785 T \uc758 \uac1c\uccb4\ub97c \ud45c\ud604\uc2dd e \ub85c\ubd80\ud130 \uc0dd\uc131\ud558\ub294 \uc548\uc804\ud558\uace0 \ubc94\uc6a9\uc801\uc778 \uc720\uc77c\ud55c \ubc29\ubc95\uc774\ub2e4. \ud0c0\uc785 \ubcc0\ud658\uc744 \uc704\ud55c \ud45c\uae30\ub294 T(e) \uc640 (T)e \uc744 \uc0ac\uc6a9\ud558\uace0, \ub458 \uc911 \uadf8 \ubb34\uc5c7\ub3c4 \uc548\uc804\ud558\uac70\ub098 \ubc94\uc6a9\uc801\uc774\uc9c0 \uc54a\ub2e4.","title":"Reason"},{"location":"Expr/#example_45","text":"\uc5b8\uc5b4\uc758 \uae30\ubcf8(built-in) \ud0c0\uc785\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294, \uc774 \ud45c\uae30\ubc95\uc744 \uc0ac\uc6a9\ud55c \uc0dd\uc131\uc740 \ucd95\uc18c \ubcc0\ud658\uacfc \uc7ac\ud574\uc11d(reinterpretation)\uc744 \uc608\ubc29\ud55c\ub2e4. void use ( char ch , int i , double d , char * p , long long lng ) { int x1 = int { ch }; // OK, but redundant int x2 = int { d }; // error: double->int narrowing; use a cast if you need to int x3 = int { p }; // error: pointer to->int; use a reinterpret_cast if you really need to int x4 = int { lng }; // error: long long->int narrowing; use a cast if you need to int y1 = int ( ch ); // OK, but redundant int y2 = int ( d ); // bad: double->int narrowing; use a cast if you need to int y3 = int ( p ); // bad: pointer to->int; use a reinterpret_cast if you really need to int y4 = int ( lng ); // bad: long long->int narrowing; use a cast if you need to int z1 = ( int ) ch ; // OK, but redundant int z2 = ( int ) d ; // bad: double->int narrowing; use a cast if you need to int z3 = ( int ) p ; // bad: pointer to->int; use a reinterpret_cast if you really need to int z4 = ( int ) lng ; // bad: long long->int narrowing; use a cast if you need to } \uc815\uc218\uc640 \ud3ec\uc778\ud130 \uc0ac\uc774\uc758 \ubcc0\ud658\uc5d0 T(e) \ud639\uc740 (T)e \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\uba74 \uad6c\ud604\uc5d0\ub530\ub77c \ub2ec\ub77c\uc9c8 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc815\uc218\uc640 \ud3ec\uc778\ud130\uc758 \ud06c\uae30\uac00 \ub2e4\ub978 \ud50c\ub7ab\ud3fc\uc5d0\uc11c\ub294 \uc4f8\uc218 \uc5c6\ub294(non-portable) \ucf54\ub4dc\uac00 \ub41c\ub2e4","title":"Example"},{"location":"Expr/#note_34","text":"\ud0c0\uc785 \ubcc0\ud658\uc744 \ud53c\ud558\ub77c (\uba85\uc2dc\uc801 \ud0c0\uc785 \ubcc0\ud658) \uadf8\ub9ac\uace0 \uac00\ub2a5\ud558\ub2e4\uba74 named cast\ub97c \uc0ac\uc6a9\ud558\ub77c .","title":"Note"},{"location":"Expr/#note_35","text":"\ubaa8\ud638\ud558\ub2e4\uba74, T{e} \ud45c\uae30\uc5d0\uc11c T \ub97c \uc9c0\uc6cc\ubc84\ub9ac\uace0 \ud45c\ud604\uc2dd\ub9cc \ub0a8\uae38\uc218\ub3c4 \uc788\ub2e4. complex < double > f ( complex < double > ); auto z = f ({ 2 * pi , 1 });","title":"Note"},{"location":"Expr/#note_36","text":"\uac1c\uccb4 \uc0dd\uc131 \ud45c\uae30\ubc95\uc740 \uac00\uc7a5 \ubc94\uc6a9\uc801\uc778 \ucd08\uae30\ud654 \ud45c\uae30\ubc95\uc774\ub2e4 .","title":"Note"},{"location":"Expr/#exception_10","text":"std::vector \uc640 \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\ub4e4\uc740 {} \ub97c \uc0dd\uc131\uc790\ub97c \uc704\ud55c \ud45c\uae30\ub85c \uc0ac\uc6a9\ud558\uae30 \uc804\uc5d0 \uc124\uacc4\ub418\uc5c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c \uace0\ub824\ud574\ubcf4\ub77c: vector < string > vs { 10 }; // ten empty strings vector < int > vi1 { 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 }; // ten elements 1..10 vector < int > vi2 { 10 }; // one element with the value 10 \uc5b4\ub5bb\uac8c \ud558\uba74 vector \uac00 10\uac1c\uc758 \uae30\ubcf8 \ucd08\uae30\ud654\ub41c int \ub97c \uac00\uc9c0\ub3c4\ub85d \ud560 \uc218 \uc788\uc744\uae4c? vector < int > v3 ( 10 ); // ten elements with value 0 \uc6d0\uc18c\uc758 \uc218\ub97c \uc0dd\uc131\uc790\uc5d0 \uc804\ub2ec\ud558\uae30 \uc704\ud574 {} \ub300\uc2e0 () \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc804\ud1b5\uc801\uc778 \ucf54\ub4dc\ub97c \ub530\ub978 \uac83\uc774\ub2e4 (1980\ub144\ub300 \ucd08\ubc18\uc73c\ub85c \uac70\uc2ac\ub7ec \uc62c\ub77c\uac04\ub2e4). \uc774\ub294 \ubc14\uafb8\uae30 \uc5b4\ub835\uc9c0\ub9cc, \uc124\uacc4 \uc624\ub958\ub77c\ub294 \uac83\uc740 \uc5ec\uc804\ud558\ub2e4: for a container where the element type can be confused with the number of elements, we have an ambiguity that must be resolved. \uc804\ud1b5\uc801\uc778 \ucf54\ub4dc\ub97c \ub530\ub77c\uc11c {10} \ub97c \ud574\uc11d\ud558\uba74 \ud558\ub098\uc758 \uc6d0\uc18c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ub9ac\uc2a4\ud2b8\uc774\uace0, (10) \ub294 \ucee8\ud14c\uc774\ub108\uc758 \ud06c\uae30\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc0c8\ub85c\uc6b4 \ucf54\ub4dc\uc5d0\uc11c \uc774\ub7f0 \uc2e4\uc218\uac00 \ubc18\ubcf5\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4. \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \ud45c\ud604\ud558\ub294 \ud0c0\uc785\uc744 \uc815\uc758\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\ub2e4: struct Count { int n ; }; template < typename T > class Vector { public : Vector ( Count n ); // n default-initialized elements Vector ( initializer_list < T > init ); // init.size() elements // ... }; Vector < int > v1 { 10 }; Vector < int > v2 { Count { 10 }}; Vector < Count > v3 { Count { 10 }}; // yes, there is still a very minor problem \ub0a8\uc740 \ubb38\uc81c\ub294 Count \uc5d0 \uc54c\ub9de\ub294 \uc774\ub984\uc744 \ucc3e\ub294 \uac83\uc774\ub2e4.","title":"Exception"},{"location":"Expr/#enforcement_41","text":"C \uc2a4\ud0c0\uc77c (T)e \ubcc0\ud658\uacfc \ud568\uc218\ud615 \ud0c0\uc785\ubcc0\ud658 T(e) \ub97c \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es65-invalid","text":"","title":"ES.65: \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740(invalid) \ud3ec\uc778\ud130\ub97c \uc5ed\ucc38\uc870\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_42","text":"nullptr \ucc98\ub7fc \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\ub97c \uc5ed\ucc38\uc870\ud558\ub294 \uac83\uc740 \ubbf8\uc815\uc758 \ud589\ub3d9\uc774\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uc5ed\ucc38\uc870\ud558\ub294 \uadf8 \uc989\uc2dc \ud06c\ub798\uc2dc\uac00 \ubc1c\uc0dd\ud558\uac70\ub098, \uc798\ubabb\ub41c \uacb0\uacfc, \ud639\uc740 \uba54\ubaa8\ub9ac \ud30c\uad34(corruption)\uac00 \uc77c\uc5b4\ub09c\ub2e4.","title":"Reason"},{"location":"Expr/#note_37","text":"\uc774 \uaddc\uce59\uc740 \uba85\ubc31\ud558\uace0 \uc798 \uc54c\ub824\uc9c4 \uc5b8\uc5b4 \uaddc\uce59\uc774\uc9c0\ub9cc, \ub530\ub974\uae30 \uc5b4\ub835\ub2e4. \ud070 \ubd80\ub2f4(overhead)\uc5c6\uc774 \uc774 \uaddc\uce59\uc744 \uc900\uc218\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc88b\uc740 \ucf54\ub529\uc2a4\ud0c0\uc77c, \ub77c\uc774\ube0c\ub7ec\ub9ac \uc9c0\uc6d0, \uadf8\ub9ac\uace0 \uc815\uc801 \ubd84\uc11d\uae30\uac00 \ud544\uc694\ud558\ub2e4. C++'s resource- and type-safety model \ub17c\uc758\uc5d0\uc11c\uc758 \uc911\uc694 \ubd80\ubd84 \uc911 \ud558\ub098\ub2e4.","title":"Note"},{"location":"Expr/#see-also_2","text":"\uc218\uba85\uc8fc\uae30 \ubb38\uc81c\ub97c \ud53c\ud558\ub824\uba74 RAII \ub97c \uc0ac\uc6a9\ud558\ub77c \uc218\uba85\uc8fc\uae30 \ubb38\uc81c\ub97c \ud53c\ud558\ub824\uba74 unique_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c \uc218\uba85\uc8fc\uae30 \ubb38\uc81c\ub97c \ud53c\ud558\ub824\uba74 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c nullptr \uac00 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 references \ub97c \uc0ac\uc6a9\ud558\ub77c \uc758\ub3c4\uce58 \uc54a\uc740 nullptr \ub97c \uc77c\ucc0d \uc7a1\uc544\ub0b4\uae30 \uc704\ud574 not_null \uc744 \uc0ac\uc6a9\ud558\ub77c \ubc94\uc704 \uc624\ub958\ub97c \ud53c\ud558\uace0 \uc2f6\ub2e4\uba74 \uacbd\uacc4 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc744 \ucc38\uace0\ud558\ub77c","title":"See also"},{"location":"Expr/#example_46","text":"void f () { int x = 0 ; int * p = & x ; if ( condition ()) { int y = 0 ; p = & y ; } // invalidates p * p = 42 ; // BAD, p\ub294 \ubd84\uae30\ubb38\uc744 \uac70\ucce4\ub2e4\uba74 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4 } \uc774\ub7f0 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574, \ucc38\uc870\ub418\ub294 \uac1c\uccb4\uc758 \uc218\uba85\uc744 \ub298\ub9ac\uac70\ub098, \ucc38\uc870\ud558\ub294 \ud3ec\uc778\ud130\uc758 \uc218\uba85\uc744 \uc904\uc774\ub294 \ubc29\ubc95\uc774 \uc788\ub2e4. (\uc5ed\ucc38\uc870\ud558\ub294 \uc2dc\uc810\uc744 \ucc38\uc870\ub418\ub294 \uac1c\uccb4\uc758 \uc218\uba85\uc774 \ub05d\ub098\uae30 \uc804\uc73c\ub85c \uc55e\ub2f9\uae34\ub2e4) void f1 () { int x = 0 ; int * p = & x ; int y = 0 ; if ( condition ()) { p = & y ; } * p = 42 ; // OK, p points to x or y and both are still in scope } \ubd88\ud589\ud558\uac8c\ub3c4, \ub300\ubd80\ubd84\uc758 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130 \ubb38\uc81c\ub294 \ucc3e\uc544\ub0b4\uae30\ub3c4, \uace0\uce58\uae30\ub3c4 \uc5b4\ub835\ub2e4.","title":"Example"},{"location":"Expr/#example_47","text":"void f ( int * p ) { int x = * p ; // BAD: how do we know that p is valid? } \uc774\ub7f0 \ucf54\ub4dc\uac00 \uc5c4\uccad\ub098\uac8c \ub9ce\uc774 \uc788\ub2e4. \ub300\ubd80\ubd84 \uc81c\ub300\ub85c \ub3d9\uc791\ud558\uc9c0\ub9cc -- \uc218\ub9ce\uc740 \ud14c\uc2a4\ud2b8\ub97c \uac70\uce5c \ud6c4\uc5d0\uc57c -- \uc800 \ucf54\ub4dc\ub9cc \ub193\uace0 \ubcf4\uba74 p \uac00 nullptr \uac00 \ub420 \uc218 \uc788\ub294\uc9c0\uc5d0 \ub300\ud574 \ud655\ub2f5\ud560 \uc218 \uc5c6\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c\ub294 \uc774 \uc5ed\uc2dc \uc624\ub958\uc758 \uc8fc\uc694 \uc6d0\uc778\uc774\ub2e4. \uc774\ub7f0 \uc7a0\uc7ac\uc801\uc778 \ubb38\uc81c\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 \ub9ce\uc740 \uc2dc\ub3c4\uac00 \uc788\uc5c8\ub2e4: void f1 ( int * p ) // nullptr\ub97c \ucc98\ub9ac\ud574\ubcf4\uc790 { if ( ! p ) { // nullptr\uc778 \uacbd\uc6b0 \uc0c8\ub85c \ud560\ub2f9\ud558\uac70\ub098, \ubc18\ud658\ud558\uac70\ub098, // \uc608\uc678\ub97c \ub358\uc9c0\uac70\ub098, \ub2e4\ub978 \ubb34\uc5b8\uac00\ub97c \uac00\ub9ac\ud0a4\uac8c \ud558\uac70\ub098... } int x = * p ; } nullptr \ub97c \uac80\uc0ac\ud558\ub294\ub370\ub294 \ub450\uac00\uc9c0 \uc7a0\uc7ac\uc801 \ubb38\uc81c\uac00 \uc788\ub2e4: \ub9e4\ubc88 nullptr \ub97c \ucc3e\uc740 \ud6c4\uc5d0 \ubb34\uc5c7\uc744 \ud574\uc57c\ud558\ub294\uc9c0 \ubd84\uba85\ud55c \uac83\uc740 \uc544\ub2c8\ub2e4 \ud14c\uc2a4\ud2b8\uac00 \uc911\ubcf5\uc801\uc774\uac70\ub098 \uc0c1\ub300\uc801\uc73c\ub85c \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e4\uc218\ub3c4 \uc788\ub2e4 \ud14c\uc2a4\ud2b8\uc758 \ubaa9\uc801\uc774 \uc798\ubabb\ub41c \uba54\ubaa8\ub9ac \ucc38\uc870(violation)\ub97c \ub9c9\uae30 \uc704\ud55c \uac83\uc778\uc9c0 \ub85c\uc9c1\uc744 \ubcf4\ud638\ud558\uae30 \uc704\ud55c \uac83\uc778\uc9c0 \ubd88\ubd84\uba85\ud558\ub2e4 void f2 ( int * p ) // state that p is not supposed to be nullptr { assert ( p ); int x = * p ; } \uc704 \ubc29\ubc95\uc740 \ub2e8\uc815\ubb38(assertion)\uc774 \ud65c\uc131\ud654\ub420 \ub54c\ub9cc \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud558\uace0 \ucef4\ud30c\uc77c\ub7ec, \ubd84\uc11d\uae30\uc5d0 \uc720\uc6a9\ud55c \uc815\ubcf4\ub97c \uc81c\uacf5\ud560 \uac83\uc774\ub2e4. C++\uc774 Contract\ub97c \uc9c0\uc6d0\ud558\uac8c \ub418\uba74 \uc880 \ub354 \ub098\uc740 \ucf54\ub4dc\uac00 \ub420 \uac83\uc774\ub2e4. void f3 ( int * p ) // state that p is not supposed to be nullptr [[ expects : p ]] { int x = * p ; } \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294, p \uac00 nullptr \uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \ubd84\uba85\ud788 \ud558\uae30\uc704\ud574 gsl::not_null \ub97c \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4. void f ( not_null < int *> p ) { int x = * p ; } \uc774\ub7f0 \ubc29\ud3b8\ub4e4\uc740 nullptr \uc778 \uacbd\uc6b0 \ub9cc\uc744 \ub2e4\ub8ec\ub2e4. \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\uac00 nullptr \uac00 \uc544\ub2cc \uacbd\uc6b0\ub3c4 \uc788\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c.","title":"Example"},{"location":"Expr/#example_48","text":"void f ( int * p ) // old code, doesn't use owner { delete p ; } void g () // old code: uses naked new { auto q = new int { 7 }; f ( q ); int x = * q ; // BAD: dereferences invalid pointer }","title":"Example"},{"location":"Expr/#example_49","text":"void f () { vector < int > v ( 10 ); int * p = & v [ 5 ]; v . push_back ( 99 ); // could reallocate v's elements int x = * p ; // BAD: dereferences potentially invalid pointer }","title":"Example"},{"location":"Expr/#enforcement_42","text":"\uc774 \uaddc\uce59\uc740 \uc218\uba85\uc8fc\uae30 \uc548\uc804\uc131 \ubd84\uc11d \uc758 \uc77c\ubd80\ubd84\uc774\ub2e4. \ud3ec\uc778\ud130\uac00 \uc720\ud6a8\ubc94\uc704\ub97c \ubc97\uc5b4\ub09c \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c \ud3ec\uc778\ud130\uac00 nullptr \ub97c \ub300\uc785\ud574\uc11c \uc720\ud6a8\ud558\uc9c0 \uc54a\uac8c \ub418\uc5c8\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c \ud3ec\uc778\ud130\uac00 delete \uc5d0 \uc758\ud574\uc11c \uc720\ud6a8\ud558\uc9c0 \uc54a\uac8c \ub418\uc5c8\uc744 \uc218 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c \ud3ec\uc778\ud130\uac00 \uc0ac\ub77c\uc84c\uc744 \uc218 \uc788\ub294 \ucee8\ud14c\uc774\ub108\uc758 \uc6d0\uc18c\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Expr/#esstmt-statement","text":"\uad6c\ubb38\uc740 \uc81c\uc5b4 \ud750\ub984(the flow of control)\uc744 \ud1b5\uc81c(control)\ud55c\ub2e4. (\ud568\uc218 \ud638\ucd9c\uacfc \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uac83\uc740 \ud45c\ud604\uc2dd\uc774\ub2e4)","title":"ES.stmt: \uad6c\ubb38(statement)"},{"location":"Expr/#es70-if-switch","text":"","title":"ES.70: \uc120\ud0dd\uc744 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 if\uad6c\ubb38\ubcf4\ub2e4\ub294 switch\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_43","text":"\uac00\ub3c5\uc131 \ud6a8\uc728\uc131: \uc0c1\uc218\uac12\uc5d0 \ub300\ud574\uc11c \ube44\uad50\ub97c \uc218\ud589\ud558\ubbc0\ub85c if - then - else \ubb38\uc758 \uc5f0\uc18d\ubcf4\ub2e4 switch \ubb38\uc774 \ub354 \uc798 \ucd5c\uc801\ud654\ub420 \uc218 \uc788\ub2e4. switch \ubb38\uc740 \uacbd\ud5d8\uc801\uc778 \ud615\ud0dc\uc758 \uc77c\uad00\uc131 \uac80\uc0ac\ub97c \ud560 \uc218 \uc788\uac8c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74, enum \ubaa8\ub4e0 \uac12\uc744 \ud655\uc778\ud558\uace0 \uc788\ub294\uac00? \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 default \ub294 \uc788\ub294\uac00?","title":"Reason"},{"location":"Expr/#example_50","text":"void use ( int n ) { switch ( n ) { // good case 0 : // ... break ; case 7 : // ... break ; default : // ... break ; } } \uc704\uc758 \uc608\uc81c\uac00 \ub354 \uc88b\ub2e4: void use2 ( int n ) { if ( n == 0 ) // bad: if-then-else \uac00 \ubc18\ubcf5\ub418\uba74\uc11c \uc0c1\uc218\ub4e4\uacfc \ube44\uad50\ub97c \uc218\ud589\ud55c\ub2e4 // ... else if ( n == 7 ) // ... }","title":"Example"},{"location":"Expr/#enforcement_43","text":"\uc0c1\uc218\uac12\uc5d0 \ub300\ud574\uc11c \ube44\uad50\ud558\ub294 if-then-else\uac00 \uc5f0\uc18d\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4. (\uc774 \uacbd\uc6b0\uc5d0\ub9cc)","title":"Enforcement"},{"location":"Expr/#es71-for-for-","text":"","title":"ES.71: \uac00\ub2a5\ud558\ub2e4\uba74 \uc77c\ubc18 for\uad6c\ubb38 \ubcf4\ub2e4 \ubc94\uc704\uae30\ubc18 for-\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_44","text":"\uac00\ub3c5\uc131. \uc624\ub958 \uc608\ubc29. \ud6a8\uc728\uc131.","title":"Reason"},{"location":"Expr/#example_51","text":"for ( gsl :: index i = 0 ; i < v . size (); ++ i ) // bad cout << v [ i ] << '\\n' ; for ( auto p = v . begin (); p != v . end (); ++ p ) // bad cout << * p << '\\n' ; for ( auto & x : v ) // OK cout << x << '\\n' ; // touches two elements: can't be a range-for for ( gsl :: index i = 1 ; i < v . size (); ++ i ) cout << v [ i ] + v [ i - 1 ] << '\\n' ; // possible side effect: can't be a range-for for ( gsl :: index i = 0 ; i < v . size (); ++ i ) cout << f ( v , & v [ i ]) << '\\n' ; // body messes with loop variable: can't be a range-for for ( gsl :: index i = 0 ; i < v . size (); ++ i ) { if ( i % 2 == 0 ) continue ; // skip even elements else cout << v [ i ] << '\\n' ; } \ud504\ub85c\uadf8\ub798\uba38\ub098 \uc88b\uc740 \uc815\uc801 \ubd84\uc11d\uae30\ub294 f(&v[i]) \uc5d0\uc11c v \uc5d0 \ub300\ud574\uc11c \ubd80\uc218\ud6a8\uacfc(side effect)\uac00 \uc77c\uc5b4\ub098\uc9c0 \uc54a\ub294\ub2e4\uace0 \ud310\ub2e8\ud560\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. \uc774 \uacbd\uc6b0 \ub8e8\ud504\ub97c \ucd5c\uc801\ud654\ud560 \uc218 \uc788\ub2e4. \ub8e8\ud504\ubb38 \ub0b4\uc5d0\uc11c \"\ub8e8\ud504\ubcc0\uc218\ub97c \ubcc0\uacbd\"\ud558\ub294 \uacbd\uc6b0\uac00 \uc5c6\uc5b4\uc57c \ud55c\ub2e4.","title":"Example"},{"location":"Expr/#note_38","text":"\ubc94\uc704 \uae30\ubc18 for \ubb38\uc5d0\uc11c \ub8e8\ud504\ubcc0\uc218\ub97c \ubcf5\uc0ac\ud558\uc5ec \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c: for ( string s : vs ) // ... \uc704 \ucf54\ub4dc\ub294 vs \uc758 \uc6d0\uc18c\ub97c s \ub85c \ubcf5\uc0ac\ud55c\ub2e4. \uac1c\uc120\ud558\uba74: for ( string & s : vs ) // ... \ub9cc\uc57d \ub8e8\ud504 \ubcc0\uc218( s )\uac00 \ubcc0\uacbd\ub418\uac70\ub098 \ubcf5\uc0ac\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc774\ub807\uac8c \uc791\uc131\ud558\ub77c: for ( const string & s : vs ) // ...","title":"Note"},{"location":"Expr/#enforcement_44","text":"\ub8e8\ud504\ub97c \ubcf4\uace0 \uac1c\ubcc4 \uc694\uc18c\ub4e4\uc744 \uc77c\ub82c\ub85c \ucc38\uc870\ud558\uace0 \uc788\uace0 \ubd80\uc218\ud6a8\uacfc(side effect)\uac00 \uc5c6\uc5b4 \ubcf4\uc774\uba74 for \ubb38\uc73c\ub85c \uc7ac\uc791\uc131\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#es72-while-for-","text":"","title":"ES.72: \ub8e8\ud504 \ubcc0\uc218\uac00 \uc788\ub2e4\uba74 while-\uad6c\ubb38\ubcf4\ub2e4 for-\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_45","text":"\uac00\ub3c5\uc131: \ub8e8\ud504\uc5d0 \ub300\ud55c \uc804\uccb4 \ub85c\uc9c1\uc744 \uccab\uad6c\ubb38\uc5d0\uc11c \ubcfc \uc218 \uc788\ub2e4. \ub8e8\ud504\ubcc0\uc218\uc758 \ubc94\uc704\uac00 \uc81c\ud55c\ub418\ub294 \uc810\ub3c4 \uc88b\ub2e4.","title":"Reason"},{"location":"Expr/#example_52","text":"for ( gsl :: index i = 0 ; i < vec . size (); i ++ ) { // do work }","title":"Example"},{"location":"Expr/#example-bad_26","text":"int i = 0 ; while ( i < vec . size ()) { // do work i ++ ; }","title":"Example, bad"},{"location":"Expr/#enforcement_45","text":"???","title":"Enforcement"},{"location":"Expr/#es73-for-while-","text":"","title":"ES.73: \ub8e8\ud504 \ubcc0\uc218\uac00 \uc5c6\ub2e4\uba74 for-\uad6c\ubb38\ubcf4\ub2e4 while-\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_46","text":"\uac00\ub3c5\uc131","title":"Reason"},{"location":"Expr/#example_53","text":"int events = 0 ; for (; wait_for_event (); ++ events ) { // bad, \ud63c\ub780\uc2a4\ub7fd\ub2e4 // ... } \uc774 \"\uc774\ubca4\ud2b8 \ub8e8\ud504\"\ub294 \uc798\ubabb\ub41c \ucf54\ub4dc\uc778\ub370, events \uce74\uc6b4\ud130 \ubcc0\uc218\uac00 \ubc18\ubcf5 \uc870\uac74\uc5d0 \uc804\ud600 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc774\ub2e4 ( wait_for_event() ). \uc774\ub7f0 \ucf54\ub4dc\uac00 \ub354 \uc88b\ub2e4 int events = 0 ; while ( wait_for_event ()) { // better ++ events ; // ... }","title":"Example"},{"location":"Expr/#enforcement_46","text":"Flag actions in for -initializers and for -increments that do not relate to the for -condition.","title":"Enforcement"},{"location":"Expr/#es74-for-","text":"","title":"ES.74: \ub8e8\ud504 \ubcc0\uc218\ub294 for-\uad6c\ubb38\uc758 \ucd08\uae30\ud654 \ubd80\ubd84\uc5d0\uc11c \uc120\uc5b8\ud558\ub77c"},{"location":"Expr/#reason_47","text":"\ub8e8\ud504 \ubcc0\uc218\uc758 \uac00\uc2dc\ubc94\uc704\ub97c \ub8e8\ud504 \ubc94\uc704 \ub0b4\ub85c \uc81c\ud55c\ud558\ub77c. \ub8e8\ud504\ubb38 \ub4a4\uc5d0\uc11c \ub2e4\ub978 \ubaa9\uc801\uc73c\ub85c \ub8e8\ud504 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ubabb\ud558\uac8c \ud558\ub77c.","title":"Reason"},{"location":"Expr/#example_54","text":"// GOOD: i var is visible only inside the loop for ( int i = 0 ; i < 100 ; ++ i ) { // ... }","title":"Example"},{"location":"Expr/#example-dont","text":"// BAD: j is visible outside the loop int j ; for ( j = 0 ; j < 100 ; ++ j ) { // ... } // j is still visible here and isn't needed","title":"Example, don't"},{"location":"Expr/#see-also_3","text":"Don't use a variable for two unrelated purposes","title":"See also"},{"location":"Expr/#example_55","text":"for ( string s ; cin >> s ; ) { cout << s << '\\n' ; }","title":"Example"},{"location":"Expr/#enforcement_47","text":"for \ubb38 \uc548\uc5d0\uc11c\ub9cc \ubcc0\ud558\ub294 \ubcc0\uc218\uac00 \ub8e8\ud504 \ubc16\uc5d0 \uc120\uc5b8\ub418\uc5b4 \uc788\uc9c0\ub9cc \ub8e8\ud504 \ubc16\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uace0 \uc788\ub2e4\uba74 \uacbd\uace0\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#discussion","text":"\ub8e8\ud504 \ubcc0\uc218\ub97c \ub8e8\ud504 \uad6c\ubb38\uc758 \ubc94\uc704\uc5d0 \ub450\uba74 \ucf54\ub4dc \ucd5c\uc801\ud654\uc5d0 \ub9ce\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uadc0\ub0a9 \ubcc0\uc218(induction variable)\uac00 \ub8e8\ud504\uad6c\ubb38 \uc548\uc5d0\uc11c\ub9cc \uc811\uadfc\uac00\ub2a5\ud568\uc744 \ud30c\uc545\ud558\uba74 \uc704\uce58\uc774\ub3d9(hoisting), \uc5f0\uc0b0 \ubd80\ub2f4 \uc644\ud654(strength reduction), \ub8e8\ud504 \ub0b4 \ubd88\ubcc0\ucf54\ub4dc \uc774\ub3d9(loop-invariant code motion) \ub4f1\uc758 \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud574\uc9c4\ub2e4. \ubc88\uc5ed \ucc38\uace0: * https://en.wikipedia.org/wiki/Strength_reduction * https://code-examples.net/ko/docs/gcc~7/optimize-options","title":"Discussion"},{"location":"Expr/#es75-do-","text":"","title":"ES.75: do-\uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_48","text":"\uac00\ub3c5\uc131. \uc624\ub958 \ud68c\ud53c. \uc885\ub8cc \uc870\uac74\uc774 \ub05d\uc5d0 \uc704\uce58\ud574 \uc788\uace0(\ubabb \ubcf4\uace0 \ub118\uc5b4\uac00\uae30 \uc26c\uc6b4 \uc704\uce58) \uccab \ub8e8\ud504\uc5d0\uc11c \uc870\uac74\uc744 \uac80\uc0ac\ud558\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Expr/#example_56","text":"int x ; do { cin >> x ; // ... } while ( x < 0 );","title":"Example"},{"location":"Expr/#note_39","text":"\ubb3c\ub860 do -\uad6c\ubb38\uc774 \uae54\ub054\ud55c \ud574\uacb0\ubc29\ubc95\uc774 \ub418\ub294 \uc608\uc2dc\ub3c4 \uc874\uc7ac\ud55c\ub2e4. \ud558\uc9c0\ub9cc \ub3d9\uc2dc\uc5d0 \ub9ce\uc740 \ubc84\uadf8\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30\ub3c4 \ud55c\ub2e4.","title":"Note"},{"location":"Expr/#enforcement_48","text":"do -\uad6c\ubb38\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Expr/#es76-goto","text":"","title":"ES.76: goto\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_49","text":"\uac00\ub3c5\uc131. \uc624\ub958 \ud68c\ud53c. \uc0ac\ub78c\uc744 \uc704\ud574\uc11c\ub294 \ub354 \uc88b\uc740 \ucee8\ud2b8\ub864 \uad6c\uc870\uac00 \uc788\ub2e4; goto \ub294 \uae30\uacc4\ucf54\ub4dc(machine generated code)\ub97c \uc704\ud55c \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Expr/#exception_11","text":"\uc911\ucca9\ub41c \ub8e8\ud504\uc5d0\uc11c \ud0c8\ucd9c. \uc774\ub7f0 \uacbd\uc6b0\ub77c\uba74 \ud56d\uc0c1 \ucc98\ub9ac\uc758 \uc9c4\ud589\ubc29\ud5a5(forward)\uc73c\ub85c \uc810\ud504\ud558\ub77c. for ( int i = 0 ; i < imax ; ++ i ) for ( int j = 0 ; j < jmax ; ++ j ) { if ( a [ i ][ j ] > elem_max ) goto finished ; // ... } finished : // ...","title":"Exception"},{"location":"Expr/#example-bad_27","text":"C \uc5d0\uc11c\ub294 goto-exit \ud615\ud0dc(idiom)\ub97c \uaf64 \ub9ce\uc774 \uc0ac\uc6a9\ud55c\ub2e4: void f () { // ... goto exit ; // ... goto exit ; // ... exit : // ... common cleanup code ... } \uc774\uac74 \uc18c\uba78\uc790\ub97c \uc2dc\ubbac\ub808\uc774\uc158\ud55c \uac83\uc774\ub2e4. \ub9ac\uc18c\uc2a4\ub97c \ud574\uc81c\ud558\ub294 \uc18c\uba78\uc790\ub97c \uac00\uc9c4 \ud578\ub4e4\ub85c \uc120\uc5b8\ud558\ub77c. \uc0ac\uc6a9\ub41c \ubcc0\uc218\ub4e4\uc758 \uc18c\uba78\uc790\ub85c \ubaa8\ub4e0 \uc815\ub9ac \uc791\uc5c5(cleanup)\uc744 \ub2e4\ub8f0 \uc218 \uc5c6\ub2e4\uba74, \uc18c\uba78 \uc791\uc5c5\uc744 goto exit \ub300\uc2e0 \ub354 \uc2e0\ub8b0\ud560 \uc218 \uc788\ub294 gsl::finally() \ub85c \ucc98\ub9ac\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c","title":"Example, bad"},{"location":"Expr/#enforcement_49","text":"goto \uac00 \ubcf4\uc774\uba74 \uc9c0\uc801\ud55c\ub2e4. \ub8e8\ud504 \ub2e4\uc74c\ubb38\uc73c\ub85c \uc810\ud504\ud558\uc9c0 \uc54a\ub294 \uc911\ucca9 \ub8e8\ud504 \ub0b4\uc758 goto \ub294 \ubaa8\ub450 \ud45c\uc2dc\ud558\uba74 \ub354 \uc88b\ub2e4.","title":"Enforcement"},{"location":"Expr/#es77-break-continue","text":"","title":"ES.77: break\uc640 continue\uc758 \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c"},{"location":"Expr/#reason_50","text":"\uac04\ub2e8\ud558\uc9c0 \uc54a\uc740(non-trivial) \ubc18\ubcf5\ubb38 \ub0b4\uc5d0\uc11c\ub294 break \ud639\uc740 continue \ub97c \uac04\uacfc\ud558\uae30 \uc27d\ub2e4. \ubc18\ubcf5\ubb38\uc5d0\uc11c break \ub294 switch \uad6c\ubb38 \ub0b4\uc5d0\uc11c\uc640\ub294 \uc644\uc804\ud788 \ub2e4\ub978 \uc758\ubbf8\ub97c \uac00\uc9c4\ub2e4. (\uadf8\ub9ac\uace0 switch \uad6c\ubb38 \ub0b4\uc5d0\uc11c \ubc18\ubcf5\ubb38\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \ubc18\ubcf5\ubb38 \uc548\uc5d0\uc11c switch \ub97c \uc0ac\uc6a9\ud558\ub294\uac83\uc774 \uac00\ub2a5\ud558\ub2e4).","title":"Reason"},{"location":"Expr/#example_57","text":"???","title":"Example"},{"location":"Expr/#alternative_2","text":"\ub54c\ub54c\ub85c, break \ub97c \ud544\uc694\ub85c \ud558\ub294 \ubc18\ubcf5\ubb38\uc740 \ud568\uc218(\uc54c\uace0\ub9ac\uc998)\uc758 \ud6c4\ubcf4\uac00 \ub418\uae30\ub3c4 \ud55c\ub2e4. \uc774 \uacbd\uc6b0 break \ub294 \uadf8 \ud568\uc218\uc758 return \uc774 \ub41c\ub2e4. ??? \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 continue \ub97c \uc0ac\uc6a9\ud558\ub294 \ubc18\ubcf5\ubb38\uc740 if \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud574 \ub17c\ub9ac\uc801\uc73c\ub85c \ub3d9\uc77c\ud558\uac8c \ud45c\ud604\ud560 \uc218 \uc788\ub2e4. ???","title":"Alternative"},{"location":"Expr/#note_40","text":"\uc815\ub9d0\ub85c \ubc18\ubcf5\ubb38 \uc911\uac04\uc5d0\uc11c \ud0c8\ucd9c\ud574\uc57c \ud55c\ub2e4\uba74, break \ub294 \ubcf4\ud1b5 \ub8e8\ud504 \ubcc0\uc218\ub97c \uc870\uc791 \ud558\uac70\ub098 goto \ub97c \uc4f0\ub294 \ubc29\ubc95\ubcf4\ub2e4 \ub354 \ub098\uc740 \ubc29\ubc95\uc774\ub2e4.","title":"Note"},{"location":"Expr/#enforcement_50","text":"???","title":"Enforcement"},{"location":"Expr/#es78-case-break","text":"","title":"ES.78: \ub0b4\uc6a9\uc774 \uc788\ub294 case\ub294 break\ud558\ub77c"},{"location":"Expr/#reason_51","text":"\uc2e4\uc218\ub85c break \ub97c \ubd99\uc774\uc9c0 \uc54a\ub294 \uac83\uc740 \uaf64 \ub9ce\uc774 \ubc1c\uc0dd\ud558\ub294 \ubc84\uadf8\ub2e4. \uace0\uc758\uc801\uc73c\ub85c break \ub97c \uc5c6\uc560\ub294 \uac83(fallthrough)\uc740 \uc720\uc9c0\ubcf4\uc218\uc758 \uc704\ud5d8\uc694\uc18c\uac00 \ub41c\ub2e4.","title":"Reason"},{"location":"Expr/#example_58","text":"switch ( eventType ) { case Information : update_status_bar (); break ; case Warning : write_event_log (); // Bad - implicit fallthrough case Error : display_error_window (); break ; } break \ub85c \uc548 \ub05d\ub098\ub294 \uc0ac\ud56d\uc740 \uac04\uacfc\ud558\uae30 \uc27d\ub2e4. \uba85\ud655\ud558\uac8c \ud558\ub77c: switch ( eventType ) { case Information : update_status_bar (); break ; case Warning : write_event_log (); // fallthrough case Error : display_error_window (); break ; } C++17\uc5d0\uc11c\ub294, [[fallthrough]] \ub97c \uc0ac\uc6a9\ud558\ub77c: switch ( eventType ) { case Information : update_status_bar (); break ; case Warning : write_event_log (); [[ fallthrough ]]; // C++17 case Error : display_error_window (); break ; }","title":"Example"},{"location":"Expr/#note_41","text":"\ub2e8\uc77c\ubb38\uc73c\ub85c \ubaa8\uc774\ub294 \uc5ec\ub7ec\uac1c\uc758 \ucf00\uc774\uc2a4 \uc870\uac74\uc740 \ud5c8\uc6a9\ub41c\ub2e4: switch ( x ) { case 'a' : case 'b' : case 'f' : do_something ( x ); break ; }","title":"Note"},{"location":"Expr/#enforcement_51","text":"\ube48 case \ubb38\uc774 \uc544\ub2cc\ub370 break\ub85c \ub05d\ub098\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#es79-default","text":"","title":"ES.79: (\uc624\uc9c1) \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0\ub97c \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc11c default\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_52","text":"\ucf54\ub4dc\uc758 \uba85\ud655\uc131. \uc624\ub958\ub97c \ud0d0\uc9c0\ud560 \uae30\ud68c\ub97c \ub298\ub824\uc900\ub2e4.","title":"Reason"},{"location":"Expr/#example_59","text":"enum E { a , b , c , d }; void f1 ( E x ) { switch ( x ) { case a : do_something (); break ; case b : do_something_else (); break ; default : take_the_default_action (); break ; } } \uc774 \uc608\uc2dc\uc5d0\ub294 \uae30\ubcf8 \ud589\ub3d9\uacfc a \uc640 b \ub77c\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\ub97c \ucc98\ub9ac\ud55c\ub2e4\ub294 \uac83\uc774 \ubd84\uba85\ud558\uac8c \ub098\ud0c0\ub09c\ub2e4.","title":"Example"},{"location":"Expr/#example_60","text":"\uae30\ubcf8 \ud589\ub3d9 \uc5c6\uc774 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\ub9cc \ucc98\ub9ac\ud558\ub824\uace0 \uc758\ub3c4\ud588\ub2e4\uba74 \uc5b4\ub5a8\uae4c? \uadf8\ub7f0 \uacbd\uc6b0\ub77c\uba74, \ub0b4\uc6a9 \uc5c6\ub294 default \ub97c \ub450\uc9c0 \uc54a\uc73c\uba74 \ub2f9\uc2e0\uc774 \ubaa8\ub4e0 \uacbd\uc6b0\ub97c \ub2e4\ub8e8\ub3c4\ub85d \uc758\ub3c4\ud588\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc5c6\ub2e4. void f2 ( E x ) { switch ( x ) { case a : do_something (); break ; case b : do_something_else (); break ; default : // \ub098\uba38\uc9c0 \uacbd\uc6b0\uc5d0\ub294 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\ub294\ub2e4 break ; } } default \ub97c \ub123\uc9c0 \uc54a\uc558\ub2e4\uba74, \uadf8 \ucf54\ub4dc\ub97c \uc720\uc9c0\ubcf4\uc218 \ud558\ub294 \uc0ac\ub78c \ud639\uc740 \ucef4\ud30c\uc77c\ub7ec\ub294 \ub2f9\uc2e0\uc774 \ub2f9\uc5f0\ud788(reasonably) \ubaa8\ub4e0 \uacbd\uc6b0\ub97c \ub3c4\ub824\ud588\ub2e4\uace0 \uac00\uc815\ud560 \uac83\uc774\ub2e4: enum E { a , b , c , d }; void f2 ( E x ) { switch ( x ) { case a : do_something (); break ; case b : case c : do_something_else (); break ; } } d \ub97c \ucc98\ub9ac\ud558\ub294 \uac83\uc744 \uae5c\ube61\ud55c \uac83\uc77c\uae4c? \uc544\ub2c8\uba74 \uc758\ub3c4\uc801\uc73c\ub85c \uc81c\uc678\ud55c \uac83\uc77c\uae4c? \ud2b9\uc815\ud55c \uacbd\uc6b0\uac00 \ub204\ub77d\ub418\ub294 \uac83\uc740 \ubcf4\ud1b5 \uc5f4\uac70\ud615\uc758 \uac12\uc774 \ucd94\uac00\ub418\uba74\uc11c \uc0ac\ub78c\uc774 \ubaa8\ub4e0 switch \ub97c \uac31\uc2e0\ud558\uc9c0 \uc54a\uc558\uc744 \ub54c \ubc1c\uc0dd\ud55c\ub2e4.","title":"Example"},{"location":"Expr/#enforcement_52","text":"\uc5f4\uac70\ud615\uc744 \uac80\uc0ac\ud558\ub294 switch -\uad6c\ubb38\uc5d0\uc11c default \uac00 \uc5c6\uc73c\uba74\uc11c \ubaa8\ub4e0 \uc5f4\uac70\uac12\uc744 \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. \uc774\ub294 \ub108\ubb34 \ub9ce\uc740 False Positive\ub97c \ub0b3\uc744\uc218\ub3c4 \uc788\ub2e4; \uadf8\ub7f0 \uacbd\uc6b0\uc5d0\ub294, \ub300\ubd80\ubd84\uc758 \uac12\uc744 \ub2e4\ub8e8\uc9c0\ub9cc \ubaa8\ub4e0 \uac12\uc744 \uac80\uc0ac\ud558\uc9c0 \uc54a\ub294 switch \ub9cc\uc744 \uc9c0\uc801\ud558\ub77c (\uc774\ub294 \ucd08\ucc3d\uae30 C++ \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0ac\uc6a9\ud55c \uc804\ub7b5\uc774\ub2e4).","title":"Enforcement"},{"location":"Expr/#es84","text":"","title":"ES.84: \uc774\ub984\uc774 \uc5c6\ub294 \uc9c0\uc5ed\ubcc0\uc218\ub294 \uc120\uc5b8(\ud558\ub824\uace0)\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_53","text":"\uc774\ub984 \uc5c6\ub294 \uc9c0\uc5ed\ubcc0\uc218\ub294 \ub9cc\ub4e4 \uc218 \uc5c6\ub2e4. \uc0ac\ub78c\uc5d0\uac8c \uc774\ub984\uc774 \uc5c6\ub294 \uac83\ucc98\ub7fc \ubcf4\uc774\ub294 \ubcc0\uc218\ub294 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c\ub294 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \ubc14\ub85c \uc0ac\ub77c\uc9c0\ub294 \uc784\uc2dc \ubcc0\uc218\ub97c \ud3ec\ud568\ud55c \uad6c\ubb38\uc774\ub2e4. \ubd88\ucf8c\ud55c \uc774\uc0c1\ud589\ub3d9(unpleasant surprise)\uc774 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_28","text":"void f () { lock < mutex > { mx }; // Bad // ... } \uc774 \uad6c\ubb38\uc740 \uc774\ub984 \uc5c6\ub294 lock \uac1c\uccb4\ub97c \uc120\uc5b8\ud558\uace0 \uc138\ubbf8\ucf5c\ub860 \uc774\ud6c4 \uc989\uc2dc \uc0ac\ub77c\uc9c0\ub3c4\ub85d \ud55c \uac83\uc774\ub2e4. \uc774\ub294 \ud754\uce58 \uc54a\uc740 \uc2e4\uc218\uac00 \uc544\ub2c8\ub2e4. \ud2b9\ud788, \uc774 \uc608\uc2dc\ub294 \ucc3e\uae30 \uc5b4\ub824\uc6b4 \uacbd\uc7c1 \uc870\uac74\uc73c\ub85c \uc774\uc5b4\uc9c8\uc218\ub3c4 \uc788\ub2e4. \uc774 \"\uad00\uc6a9\ubc95(idiom)\"\uc744 \ub9e4\uc6b0 \uc601\ub9ac\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc9c0\ub9cc, \uadf8\ub7f0 \uacbd\uc6b0\ub4e4\uc740 \uc2e4\uc218\uc640\ub294 \uac70\ub9ac\uac00 \uba40\ub2e4.","title":"Example, bad"},{"location":"Expr/#note_42","text":"\ud568\uc218\uc758 \uc2e4\ud589\uc778\uc790\uac00 \uc774\ub984\uc774 \uc5c6\ub294 \uac83\uc740 \uad1c\ucc2e\ub2e4.","title":"Note"},{"location":"Expr/#enforcement_53","text":"\uc784\uc2dc\ubcc0\uc218\ub97c \uc0dd\uc131\ud558\uae30\ub9cc \ud558\ub294 \uad6c\ubb38\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Expr/#es85","text":"","title":"ES.85: \ube44\uc5b4\uc788\ub294 \uad6c\ubb38\uc740 \ub208\uc5d0\ub744\uac8c \ud558\ub77c"},{"location":"Expr/#reason_54","text":"\uac00\ub3c5\uc131.","title":"Reason"},{"location":"Expr/#example_61","text":"for ( i = 0 ; i < max ; ++ i ); // BAD: \ube44\uc5b4\uc788\ub294 \uad6c\ubb38\uc758 \uc874\uc7ac\ub97c \ubabb\ubcfc \uc218 \uc788\ub2e4 v [ i ] = f ( v [ i ]); for ( auto x : v ) { // \uc880 \ub354 \ub0ab\ub2e4 // nothing } v [ i ] = f ( v [ i ]);","title":"Example"},{"location":"Expr/#enforcement_54","text":"\ube14\ub85d\uc774 \uc544\ub2c8\uba74\uc11c \uc8fc\uc11d\ubb38\uc744 \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294 \ube48 \ubb38\uc7a5\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#es86-for-body","text":"","title":"ES.86: for \ubc18\ubcf5\ubb38(body) \uc548\uc5d0\uc11c \ub8e8\ud504 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_55","text":"\ub8e8\ud504\ub97c \uc81c\uc5b4\ud558\ub294 \ubcc0\uc218\ub294 \ubc18\ubcf5\ubb38 \ub0b4\uc5d0\uc11c \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\ub294\uc9c0 \uc815\ud655\ud788 \ucd94\ub860\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \ub8e8\ud504 \uce74\uc6b4\ud130\ub97c \ubc18\ubcf5\ubb38 \uc548\ucabd(body)\uc774\ub098 \ubc18\ubcf5 \ud45c\ud604\uc2dd(iteration-expression)\uc5d0\uc11c \ubcc0\uacbd\ud558\ub294 \uac83\uc740 \ub298 \uc788\ub294(perennial) \uc774\uc0c1\ud589\ub3d9\uacfc \ubc84\uadf8\uc758 \uc6d0\uc778\uc774\ub2e4.","title":"Reason"},{"location":"Expr/#example_62","text":"for ( int i = 0 ; i < 10 ; ++ i ) { // no updates to i -- ok } for ( int i = 0 ; i < 10 ; ++ i ) { // if ( /* something */ ) ++ i ; // BAD // } bool skip = false ; for ( int i = 0 ; i < 10 ; ++ i ) { if ( skip ) { skip = false ; continue ; } // if ( /* something */ ) skip = true ; // Better: \ub450 \uac1c\uc758 \uc758\ubbf8(concept)\ub97c \uc704\ud574 \ub450\uac1c\uc758 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4. // }","title":"Example"},{"location":"Expr/#enforcement_55","text":"\ub8e8\ud504 \uc81c\uc5b4\uc758 \ubc18\ubcf5 \ud45c\ud604\uc2dd\uc774\ub098 \ubc18\ubcf5\ubb38 \uc548\uc5d0\uc11c \uc7a0\uc7ac\uc801\uc73c\ub85c \ubcc0\uc218\ub97c \uac31\uc2e0\ud558\uba74 (\ube44- const \ud615\ud0dc\ub85c \uc0ac\uc6a9\ud558\uba74) \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Expr/#es87","text":"","title":"ES.87: \uc870\uac74\uc5d0 \ubd88\ud544\uc694\ud55c ==\ub098 !=\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_56","text":"\ucf54\ub4dc\ub97c \uc7a5\ud669\ud558\uac8c \ub9cc\ub4dc\ub294 \uac83\uc744 \uc608\ubc29\ud558\uace0 \uc2e4\uc218\uac00 \ubc1c\uc0dd\ud560 \uc5ec\uc9c0\uac00 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \ucf54\ub529 \uc2a4\ud0c0\uc77c\uc758 \uc77c\uad00\uc131\uc774\ub098 \uad00\uc2b5\ud654\ub97c \ub3d5\ub294\ub2e4.","title":"Reason"},{"location":"Expr/#example_63","text":"\uadf8 \uc815\uc758\ub300\ub85c, if -\uad6c\ubb38, while -\uad6c\ubb38, \ud639\uc740 for -\uad6c\ubb38\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc870\uac74\uc740 true \uc640 false \uc0ac\uc774\uc5d0\uc11c \uc120\ud0dd\ud558\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. \uc22b\uc790\ub294 0 \uacfc \ube44\uad50\ub418\uace0 \ud3ec\uc778\ud130\ub294 nullptr \uacfc \ube44\uad50\ud55c\ub2e4. // These all mean \"if `p` is not `nullptr`\" if ( p ) { ... } // good if ( p != 0 ) { ... } // redundant `!=0`; bad: don't use 0 for pointers if ( p != nullptr ) { ... } // redundant `!=nullptr`, not recommended if (p) \uac00 \"\ub9cc\uc57d p \uac00 \uc720\ud6a8\ud558\ub2e4\uba74\"\uc774\ub77c\ub294 \ud504\ub85c\uadf8\ub798\uba38\uc758 \uc758\ub3c4\ub97c \uadf8\ub300\ub85c \ubc18\uc601\ud55c \uc758\ubbf8\ub85c \uc77d\ud788\ub294 \ubc18\uba74\uc5d0, if (p != nullptr) \ub294 \ub354 \ub9ce\uc740 \ub9d0(long-winded workaround)\uc774 \ud544\uc694\ud560 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Expr/#example_64","text":"\uc774 \uaddc\uce59\uc740 \uc870\uac74\ubb38\uc5d0\uc11c \uc120\uc5b8\uc774 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0 \ud2b9\ud788 \uc720\uc6a9\ud558\ub2e4. if ( auto pc = dynamic_cast < Circle > ( ps )) { ... } // execute is ps points to a kind of Circle, good if ( auto pc = dynamic_cast < Circle > ( ps ); pc != nullptr ) { ... } // not recommended","title":"Example"},{"location":"Expr/#example_65","text":"\uc870\uac74\ubb38\uc5d0\uc11c\ub294 bool \ud0c0\uc785\uc73c\ub85c\uc758 \uc554\ubb35\uc801 \ud615\ubcc0\ud658\uc774 \ubc1c\uc0dd\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: for ( string s ; cin >> s ; ) v . push_back ( s ); \uc774 \ucf54\ub4dc\ub294 istream \uc758 operator bool() \uc744 \ud638\ucd9c\ud55c\ub2e4.","title":"Example"},{"location":"Expr/#note_43","text":"\uc815\uc218\ub97c 0 \uacfc \uba85\uc2dc\uc801\uc73c\ub85c \ube44\uad50\ud558\ub294 \uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ubcfc \uc218 \uc788\uace0, \uc911\ubcf5\uc801(redundant)\uc774\uc9c0\ub294 \uc54a\ub2e4. \uadf8 \uc774\uc720\ub294 (\ud3ec\uc778\ud130\ub098 \ubd88\ub9ac\uc5b8\uacfc\ub294 \ubc18\ub300\ub85c) \uc815\uc218\ub294 \ub54c\ub85c\ub294 2\uac1c \uc774\uc0c1\uc758 \uc815\ub2f9\ud55c(reasonable) \uac12\uc744 \uac00\uc9c0\uae30 \ub54c\ubb38\uc774\ub2e4. \ub354\uc6b1\uc774 0 (zero)\ub294 \uc885\uc885 \uc131\uacf5\uc744 \uc758\ubbf8\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\uae30\ub3c4 \ud55c\ub2e4. \uacb0\uacfc\uc801\uc73c\ub85c, \uba85\uc2dc\uc801\uc73c\ub85c \ube44\uad50\ud558\ub294 \uac83\uc774 \ucd5c\uc120\uc774\ub2e4. void f ( int i ) { if ( i ) // \uc880 \uc758\uc2ec\uc2a4\ub7fd\ub2e4 // ... if ( i == success ) // \uc544\ub9c8\ub3c4 \ub354 \ub098\uc740 \ucf54\ub4dc // ... } \uc815\uc218\uac00 2\uac1c \uc774\uc0c1\uc758 \uac12\uc744 \uac00\uc9c4\ub2e4\ub294 \uc810\uc744 \ud56d\uc0c1 \uae30\uc5b5\ud558\ub77c.","title":"Note"},{"location":"Expr/#example-bad_29","text":"\uc54c\ub824\uc9c4 \ucf54\ub4dc \uc911 \uc774\ub7f0\uac8c \uc788\ub2e4. if ( strcmp ( p1 , p2 )) { ... } // \ub450 C-\uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\ub4e4\uc774 \uac19\uc740\uac00? (mistake!) \ud754\ud788 \ubcfc \uc218 \uc788\ub294 \ucd08\uc2ec\uc790 \uc624\ub958\ub2e4. C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 <cstring> \uc758 \ud568\uc218\ub4e4\uc744 \uc798 \uc54c\uc544\uc57c \ud55c\ub2e4. \uc7a5\ud669\ud558\uac8c \uc544\ub798\ucc98\ub7fc \uc791\uc131\ud558\ub294 \uac83\uc740 if ( strcmp ( p1 , p2 ) != 0 ) { ... } // \ub450 C-\uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\ub4e4\uc774 \uac19\uc740\uac00? (mistake!) \ub2f9\uc2e0\uc744 \uad6c\ud574\uc8fc\uc9c0 \uc54a\ub294\ub2e4.","title":"Example, bad"},{"location":"Expr/#note_44","text":"\ubc18\ub300 \uc870\uac74\uc740 \ubd80\uc815(negation)\uc744 \uc0ac\uc6a9\ud574 \uc27d\uac8c \ud45c\ud604\ud560 \uc218 \uc788\ub2e4: // These all mean \"if `p` is `nullptr`\" if ( ! p ) { ... } // good if ( p == 0 ) { ... } // redundant `== 0`; bad: don't use `0` for pointers if ( p == nullptr ) { ... } // redundant `== nullptr`, not recommended","title":"Note"},{"location":"Expr/#enforcement_56","text":"\uc27d\ub2e4, \uc870\uac74\ubb38\uc5d0\uc11c != \uc640 == \uc774 \uc911\ubcf5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4.","title":"Enforcement"},{"location":"Expr/#arithmetic","text":"","title":"\uc0b0\uc220\uc5f0\uc0b0(Arithmetic)"},{"location":"Expr/#es100","text":"","title":"ES.100: \ubd80\ud638\uac00 \uc788\ub294 \ud0c0\uc785\uacfc \uc5c6\ub294 \ud0c0\uc785\uc744 \ud568\uaed8 \uc5f0\uc0b0\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_57","text":"\uacb0\uacfc\uac00 \uc798\ubabb\ub420 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Expr/#example_66","text":"int x = - 3 ; unsigned int y = 7 ; cout << x - y << '\\n' ; // unsigned result, possibly 4294967286 cout << x + y << '\\n' ; // unsigned result: 4 cout << x * y << '\\n' ; // unsigned result, possibly 4294967275 \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294 \ubb38\uc81c\ub97c \ucc3e\uc544\ub0b4\uae30 \uc5b4\ub835\ub2e4.","title":"Example"},{"location":"Expr/#note_45","text":"\ubd88\ud589\ud788\ub3c4 C++\uc740 \ubc30\uc5f4\uc778\uc790\uc5d0 \ub300\ud574\uc11c \ubd80\ud638\uc788\ub294 \uc815\uc218\ub97c \uc0ac\uc6a9\ud558\uace0 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ucee8\ud14c\uc774\ub108 \uc778\uc790\uc5d0 \ubd80\ud638\uc5c6\ub294 \uc815\uc218\ud615\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub294 \uc77c\uad00\uc801\uc774\uc9c0 \uc54a\ub2e4. \ubc30\uc5f4 \uc811\uadfc\uc774\ub77c\uba74 gsl::index \ub97c \uc0ac\uc6a9\ud558\ub77c. ES.107 \uc744 \ucc38\uace0\ud558\ub77c.","title":"Note"},{"location":"Expr/#enforcement_57","text":"\ucef4\ud30c\uc77c\ub7ec\uac00 \uc774\ubbf8 \uc54c\uace0 \uc788\ub294 \uc0c1\ud669\uc774\uace0 \uacbd\uace0\ud560 \uac83\uc774\ub2e4 (\ub108\ubb34 \ub9ce\uc740 \uacbd\uace0\ub97c \ub9c9\uae30 \uc704\ud574) \ube44\uad50\uc758 \ud53c\uc5f0\uc0b0\uc790 \uc911 \ud558\ub098\uac00 sizeof \ud639\uc740 \ucee8\ud14c\uc774\ub108\uc758 .size() \ub97c \uc0ac\uc6a9\ud558\uace0, \ub2e4\ub978 \ud55c\ucabd\uc740 ptrdiff_t \uacbd\uc6b0\ub294 \uc9c0\uc801\ud558\uc9c0 \ub9c8\ub77c","title":"Enforcement"},{"location":"Expr/#es101-unsigned","text":"","title":"ES.101: \ube44\ud2b8 \uc870\uc791\uc2dc\uc5d0\ub294 \ubd80\ud638\uac00 \uc5c6\ub294(unsigned) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_58","text":"\ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc740 \ubd80\ud638\ube44\ud2b8\uae4c\uc9c0 \ud3ec\ud568\ud574\uc11c \ube44\ud2b8 \uc5f0\uc0b0\ud560 \uc218 \uc788\ub3c4\ub85d \uc9c0\uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 \uc758\ub3c4\ud55c \ub300\ub85c \ub3d9\uc791\ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example_67","text":"unsigned char x = 0 b1010 ' 1010 ; unsigned char y = ~ x ; // y == 0b0101'0101;","title":"Example"},{"location":"Expr/#note_46","text":"\ubaa8\ub4c8\ub7ec \uc5f0\uc0b0\uc5d0\uc11c \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc740 \uc720\uc6a9\ud558\ub2e4. \ud558\uc9c0\ub9cc, \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\uace0\uc790 \ud55c\ub2e4\uba74 \uadf8 \ucf54\ub4dc\uac00 \ub9ce\uc740 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc744 \ub180\ub77c\uac8c \ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub4a4\uc5bd\ud78c \ud589\ub3d9\uc5d0 \ub300\ud574 \ud544\uc694\ud55c \ub9cc\ud07c \uc8fc\uc11d\uc744 \uc791\uc131\ud558\ub77c.","title":"Note"},{"location":"Expr/#enforcement_58","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub0b4\uc5d0\uc11c unsigned \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \uc778\ud574 \uc77c\ubc18\uc801\uc73c\ub85c \uac70\uc758 \ubd88\uac00\ub2a5\ud558\ub2e4 ???","title":"Enforcement"},{"location":"Expr/#es102-signed","text":"","title":"ES.102: \uc5f0\uc0b0\uc5d0\ub294 \ubd80\ud638\uac00 \uc788\ub294(signed) \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_59","text":"\ub300\ubd80\ubd84\uc758 \uc0b0\uc220\uc5f0\uc0b0(arithmetic)\uc740 \ubd80\ud638\ub97c \uace0\ub824\ud55c\ub2e4; \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0\uacfc \uac19\uc774 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uac00 \uc544\ub2c8\ub77c\uba74 x - y \ub294 y > x \uc778 \uacbd\uc6b0 \uc74c\uc218\uac12\uc774 \ub098\uc624\uae38 \uae30\ub300\ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example_68","text":"\ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c \uc0b0\uc220\uc5f0\uc0b0\uc740 \uae30\ub300\ubc16\uc758 \uacb0\uacfc\ub97c \ub0b3\ub294\ub2e4 (\uadf8\uac78 \uc758\ub3c4\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74). \ubd80\ud638 \uc788\ub294 \ud0c0\uc785\uacfc \ubd80\ud638 \uc5c6\ub294 \ud0c0\uc785\uc774 \uc11e\uc5ec\uc11c \uc0b0\uc220\uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ucf54\ub4dc \uc5ed\uc2dc \ub9c8\ucc2c\uac00\uc9c0\ub2e4. template < typename T , typename T2 > T subtract ( T x , T2 y ) { return x - y ; } void test () { int s = 5 ; unsigned int us = 5 ; cout << subtract ( s , 7 ) << '\\n' ; // -2 cout << subtract ( us , 7u ) << '\\n' ; // 4294967294 cout << subtract ( s , 7u ) << '\\n' ; // -2 cout << subtract ( us , 7 ) << '\\n' ; // 4294967294 cout << subtract ( s , us + 2 ) << '\\n' ; // -2 cout << subtract ( us , s + 2 ) << '\\n' ; // 4294967294 } \uc774 \ucf54\ub4dc\ub85c \uc5b4\ub5a4 \uc77c\uc774 \uc77c\uc5b4\ub098\ub294\uc9c0 \ubd84\uba85\ud788 \uc54c \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ub2f9\uc2e0\uc774 us - (s + 2) \ud639\uc740 s += 2; ...; us - s \uac19\uc740 \ucf54\ub4dc\ub97c \ubd24\ub2e4\uba74, \uadf8 \uacb0\uacfc\uac00 4294967294 \ub77c\uace0 \ud655\uc2e0\ud560 \uc218 \uc788\uc5c8\uaca0\ub294\uac00?","title":"Example"},{"location":"Expr/#exception_12","text":"\uc9c4\uc815 \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0\uc774 \ud544\uc694\ud558\ub2e4\uba74 \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c - \uadf8 \ucf54\ub4dc\uac00 \ub9ce\uc740 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc744 \ub180\ub77c\uac8c \ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub4a4\uc5bd\ud78c \ud589\ub3d9\uc5d0 \ub300\ud574 \ud544\uc694\ud55c \ub9cc\ud07c \uc8fc\uc11d\uc744 \uc791\uc131\ud558\ub77c.","title":"Exception"},{"location":"Expr/#example_69","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ubc30\uc5f4 \uc6d0\uc18c\uc5d0 \uc811\uadfc\ud560 \ub54c \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uae30\ubcf8\uc801\uc778 \ubc30\uc5f4(built-in array) \ud0c0\uc785\uc740 \ubd80\ud638\uc788\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub294 \ucf54\ub4dc\uac00 \ubd88\uac00\ud53c\ud558\uac8c \uae30\ub300\ub97c \ubc97\uc5b4\ub098\uac8c (\uadf8\ub9ac\uace0 \ubc84\uadf8\uac00 \uc0dd\uae30\uac8c) \ud55c\ub2e4. int a [ 10 ]; for ( int i = 0 ; i < 10 ; ++ i ) a [ i ] = i ; vector < int > v ( 10 ); // compares signed to unsigned; some compilers warn, but we should not for ( gsl :: index i = 0 ; i < v . size (); ++ i ) v [ i ] = i ; int a2 [ - 2 ]; // error: negative size // OK, but the number of ints (4294967294) is so large that we should get an exception vector < int > v2 ( - 2 ); \ubc30\uc5f4 \uc811\uadfc(subscript)\uc5d0\ub294 gsl::index \ub97c \uc0ac\uc6a9\ud558\ub77c; ES.107\ub97c \ucc38\uace0\ud558\ub77c","title":"Example"},{"location":"Expr/#enforcement_59","text":"\ubd80\ud638 \uc788\ub294 \ud0c0\uc785\uacfc \uc5c6\ub294 \ud0c0\uc785\uc774 \uc11e\uc5ec\uc11c \uc0b0\uc220\uc5f0\uc0b0\uc5d0 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c \ubd80\ud638 \uc5c6\ub294 \ud0c0\uc785\uc758 \uacb0\uacfc\uac00 \ubd80\ud638 \uc788\ub294 \ud0c0\uc785\ucc98\ub7fc \ucd9c\ub825\ub418\uac70\ub098 \ub300\uc785\ub418\uba74 \uc9c0\uc801\ud558\ub77c \ubd80\ud638 \uc5c6\ub294 \ud0c0\uc785\uc73c\ub85c \uc9c0\uc815\ub41c \ub9ac\ud130\ub7f4(\uc608\ub97c \ub4e4\uc5b4, -2 )\uc774 \ucee8\ud14c\uc774\ub108 \ubc30\uc5f4 \uc811\uadfc\uc5d0 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c (\ub108\ubb34 \ub9ce\uc740 \uacbd\uace0\ub97c \ub9c9\uae30 \uc704\ud574) \ube44\uad50\uc758 \ud53c\uc5f0\uc0b0\uc790 \uc911 \ud558\ub098\uac00 sizeof \ud639\uc740 \ucee8\ud14c\uc774\ub108\uc758 .size() \ub97c \uc0ac\uc6a9\ud558\uace0, \ub2e4\ub978 \ud55c\ucabd\uc740 ptrdiff_t \uacbd\uc6b0\ub294 \uc9c0\uc801\ud558\uc9c0 \ub9c8\ub77c","title":"Enforcement"},{"location":"Expr/#es103-overflow","text":"","title":"ES.103: Overflow\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c"},{"location":"Expr/#reason_60","text":"\uc624\ubc84\ud50c\ub85c\uc6b0\ub294 \uc218\uc2dd \uc54c\uace0\ub9ac\uc998\uc744 \uc758\ubbf8\uc5c6\uac8c \ub9cc\ub4e4\uc5b4 \ubc84\ub9b0\ub2e4. \ucd5c\ub300\uac12 \uc774\uc0c1\uc73c\ub85c \uc99d\uac00\uc2dc\ud0a8\ub2e4\uba74 \uba54\ubaa8\ub9ac\uac12\uc774 \ub9dd\uac00\uc9c0\uace0 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_30","text":"int a [ 10 ]; a [ 10 ] = 7 ; // bad int n = 0 ; while ( n ++ < 10 ) a [ n - 1 ] = 9 ; // bad (twice)","title":"Example, bad"},{"location":"Expr/#example-bad_31","text":"int n = numeric_limits < int >:: max (); int m = n + 1 ; // bad","title":"Example, bad"},{"location":"Expr/#example-bad_32","text":"int area ( int h , int w ) { return h * w ; } auto a = area ( 10 ' 000 ' 000 , 100 ' 000 ' 000 ); // bad","title":"Example, bad"},{"location":"Expr/#exception_13","text":"\ubaa8\ub4c8\ub7ec \uc5f0\uc0b0(modulo arithmetic)\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Exception"},{"location":"Expr/#alternative_3","text":"\uc5b4\ub290 \uc815\ub3c4\uc758 \uc624\ubc84\ud5e4\ub4dc\ub97c \uac10\uc218\ud560 \uc218 \uc788\ub294 \ub300\ub2e8\ud788 \uc911\uc694\ud55c \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ubc94\uc704 \uac80\uc0ac\ub97c \uc218\ud589\ud558\uac70\ub098 \ubd80\ub3d9\uc18c\uc218\uc810 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Alternative"},{"location":"Expr/#enforcement_60","text":"???","title":"Enforcement"},{"location":"Expr/#es104-underflow","text":"","title":"ES.104: Underflow\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud558\ub77c"},{"location":"Expr/#reason_61","text":"\ucd5c\uc18c\uac12 \uc774\ud558\ub85c \uac12\uc774 \ub0b4\ub824\uac00\uba74 \uba54\ubaa8\ub9ac \uac12\uc774 \ub9dd\uac00\uc9c0\uace0 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc791\ub3d9\ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_33","text":"int a [ 10 ]; a [ - 2 ] = 7 ; // bad int n = 101 ; while ( n -- ) a [ n - 1 ] = 9 ; // bad (twice)","title":"Example, bad"},{"location":"Expr/#exception_14","text":"\ubaa8\ub4c8\ub7ec \uc5f0\uc0b0(modulo arithmetic)\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ubd80\ud638\uc5c6\ub294 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Exception"},{"location":"Expr/#enforcement_61","text":"???","title":"Enforcement"},{"location":"Expr/#es105-0","text":"","title":"ES.105: 0\uc73c\ub85c \ub098\ub204\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c"},{"location":"Expr/#reason_62","text":"\uacb0\uacfc\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\uc73c\uba70 \ud06c\ub798\uc2dc\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Expr/#note_47","text":"\ubaa8\ub4c8\ub7ec \uc5f0\uc0b0( % )\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4","title":"Note"},{"location":"Expr/#example-bad_34","text":"double divide ( int a , int b ) { // BAD, should be checked (e.g., in a precondition) return a / b ; }","title":"Example; bad"},{"location":"Expr/#example-good_4","text":"double divide ( int a , int b ) { // good, address via precondition (and replace with contracts once C++ gets them) Expects ( b != 0 ); return a / b ; } double divide ( int a , int b ) { // good, address via check return b ? a / b : quiet_NaN < double > (); }","title":"Example; good"},{"location":"Expr/#alternative_4","text":"\uc5b4\ub290 \uc815\ub3c4\uc758 \uc624\ubc84\ud5e4\ub4dc\ub97c \uac10\uc218\ud560 \uc218 \uc788\ub294 \ub300\ub2e8\ud788 \uc911\uc694\ud55c \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ubc94\uc704 \uac80\uc0ac\ub97c \uc218\ud589\ud558\uac70\ub098 \ubd80\ub3d9\uc18c\uc218\uc810 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Alternative"},{"location":"Expr/#enforcement_62","text":"0\uc774 \ub420 \uc218 \uc788\ub294 \uc815\uc218\ub85c \ub098\ub217\uc148\uc744 \ud560 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Expr/#es106-unsigned","text":"","title":"ES.106: \uc74c\uc218\uac12\uc744 \ub9c9\uc73c\ub824\uace0 unsigned\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Expr/#reason_63","text":"unsigned \ub97c \uc120\ud0dd\ud558\ub294 \uac83\uc740 \uc815\uc218\ub4e4\uc758 \ub3d9\uc791\uc774 \ub2ec\ub77c\uc9c0\uac8c \ub9cc\ub4e0\ub2e4. \uc5ec\uae30\uc5d0\ub294 \ubaa8\ub4c8\ub7ec \uc5f0\uc0b0, Overflow \uacbd\uace0, \ubd80\ud638 \uc720\ubb34\uc5d0 \uc758\ud55c \uc624\ub958\uc758 \uac00\ub2a5\uc131\uc774 \ud3ec\ud568\ub41c\ub2e4. unsigned \ub97c \uc0ac\uc6a9\ud558\ub294\uac83 \uc790\uccb4\ub294 \uc74c\uc218\uac00 \uc0dd\uae38 \uac00\ub2a5\uc131\uc744 \uc6d0\ucc9c\ubd09\uc1c4\ud558\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Expr/#example_70","text":"unsigned int u1 = - 2 ; // Valid: the value of u1 is 4294967294 int i1 = - 2 ; unsigned int u2 = i1 ; // Valid: the value of u2 is 4294967294 int i2 = u2 ; // Valid: the value of i2 is -2 \uc608\uc2dc\uc640 \uac19\uc740 (\uc644\uc804\ud788 \ud569\ubc95\uc778) \uc0dd\uc131 \ucf54\ub4dc\ub294 \uc2e4\uc81c\ub85c\ub294 \ucc3e\uc544\ub0b4\uae30 \uc5b4\ub835\uace0 \ub9ce\uc740 \uc624\ub958\uc758 \uc6d0\uc778\uc774\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c \uace0\ub824\ud574\ubcf4\ub77c: unsigned area ( unsigned height , unsigned width ) { // see also: I.6 \uc0ac\uc804 \uc870\uac74\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 `Expects()`\ub97c \uc0ac\uc6a9\ud558\ub77c return height * width ; } // ... int height ; cin >> height ; auto a = area ( height , 2 ); // if the input is -2 a becomes 4294967292 -1 \uc774 unsigned int \uc5d0\uc11c\ub294 \ucd5c\ub300\uac12\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c. Also, since unsigned arithmetic is modulo arithmetic the multiplication didn't overflow, it wrapped around.","title":"Example"},{"location":"Expr/#example_71","text":"unsigned max = 100000 ; // \"accidental typo\", I mean to say 10'000 unsigned short x = 100 ; while ( x < max ) x += 100 ; // infinite loop x \uac00 \ubd80\ud638 \uc788\ub294 short \uc600\ub2e4\uba74, Overflow\uc5d0 \uc758\ud55c \ubbf8\uc815\uc758 \ud589\ub3d9\uc744 \ucef4\ud30c\uc77c\ub7ec\uac00 \uacbd\uace0\ud588\uc744 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Expr/#alternatives_1","text":"\ubd80\ud638 \uc788\ub294 \uc815\uc218\ub4e4\uc744 \uc0ac\uc6a9\ud558\uace0 x >= 0 \ub97c \uac80\uc0ac\ud55c\ub2e4 \uc591\uc758 \uc815\uc218 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud55c\ub2e4 \uc815\uc218\uc758 \ubd80\ubd84 \ud0c0\uc785(subrange type)\uc744 \uc0ac\uc6a9\ud55c\ub2e4 Assert(-1 < x) \uc608\ub97c \ub4e4\uc790\uba74 struct Positive { int val ; Positive ( int x ) : val { x } { Assert ( 0 < x ); } operator int () { return val ; } }; int f ( Positive arg ) { return arg ; } int r1 = f ( 2 ); int r2 = f ( - 2 ); // throws","title":"Alternatives"},{"location":"Expr/#note_48","text":"???","title":"Note"},{"location":"Expr/#enforcement_63","text":"\uc5b4\ub824\uc6c0: unsigned \ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \uc5c4\uccad\ub098\uac8c \ub9ce\uace0, \uc2e4\uc81c\ub85c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uc591\uc218 \ud0c0\uc785\uc744 \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4.","title":"Enforcement"},{"location":"Expr/#es107-unsigned-gslindex","text":"","title":"ES.107: \ubc30\uc5f4 \uc811\uadfc\uc5d0\ub294 unsigned\ub97c \uc4f0\uc9c0 \ub9d0\uace0 gsl::index\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Expr/#reason_64","text":"\ubd80\ud638 \uc720\ubb34\uc5d0 \ub530\ub978 \ud63c\uc120\uc744 \ub9c9\ub294\ub2e4. \ucd5c\uc801\ud654\ub97c \ub3d5\ub294\ub2e4. \uc624\ub958 \ud0d0\uc9c0\ub97c \ub3d5\ub294\ub2e4. auto \uc640 int \uc758 \ud568\uc815\uc744 \uc608\ubc29\ud55c\ub2e4.","title":"Reason"},{"location":"Expr/#example-bad_35","text":"vector < int > vec = /*...*/ ; // may not be big enough for ( int i = 0 ; i < vec . size (); i += 2 ) cout << vec [ i ] << '\\n' ; // risk wraparound for ( unsigned i = 0 ; i < vec . size (); i += 2 ) cout << vec [ i ] << '\\n' ; // may not be big enough for ( auto i = 0 ; i < vec . size (); i += 2 ) cout << vec [ i ] << '\\n' ; // verbose for ( vector < int >:: size_type i = 0 ; i < vec . size (); i += 2 ) cout << vec [ i ] << '\\n' ; // bug for ( auto i = vec . size () - 1 ; i >= 0 ; i -= 2 ) cout << vec [ i ] << '\\n' ; // may not be big enough for ( int i = vec . size () - 1 ; i >= 0 ; i -= 2 ) cout << vec [ i ] << '\\n' ;","title":"Example, bad"},{"location":"Expr/#example-good_5","text":"vector < int > vec = /*...*/ ; for ( gsl :: index i = 0 ; i < vec . size (); i += 2 ) // ok cout << vec [ i ] << '\\n' ; for ( gsl :: index i = vec . size () - 1 ; i >= 0 ; i -= 2 ) // ok cout << vec [ i ] << '\\n' ;","title":"Example, good"},{"location":"Expr/#note_49","text":"\uae30\ubcf8 \ubc30\uc5f4(built-in array) \ud0c0\uc785\uc740 \ubd80\ud638 \uc788\ub294 \uc815\uc218\ub97c \ubc30\uc5f4 \uc811\uadfc\uc5d0 \uc0ac\uc6a9\ud55c\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucee8\ud14c\uc774\ub108\ub4e4\uc740 \ubd80\ud638 \uc5c6\ub294 \uc815\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc774\ub85c \uc778\ud574 \uc644\ubcbd\ud558\uac8c \ud638\ud658\ub418\ub294 \ud574\uacb0\ucc45\uc740 \uc5c6\ub2e4 (\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\ud14c\uc774\ub108\ub4e4\uc774 \ubbf8\ub798\uc5d0 \ubd80\ud638 \uc788\ub294 \uc815\uc218\ub85c \ubc30\uc5f4 \uc811\uadfc\uc744 \ud558\uc9c0 \uc54a\ub294 \ud55c). \uc774\uc640 \uad00\ub828\ub41c \ubb38\uc81c\ub4e4\ub85c \uc778\ud574, \ucda9\ubd84\ud55c \ud06c\uae30\ub97c \uac00\uc9c4\ub2e4\uace0 \ubcf4\uc7a5\ud558\ub294 gsl::index \ub97c \uc4f0\ub294 \uac83\uc774 \ub354 \ub0ab\ub2e4.","title":"Note"},{"location":"Expr/#example_72","text":"template < typename T > struct My_container { public : // ... T & operator []( gsl :: index i ); // not unsigned // ... };","title":"Example"},{"location":"Expr/#example_73","text":"??? demonstrate improved code generation and potential for error detection ???","title":"Example"},{"location":"Expr/#alternatives_2","text":"\uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \ub300\uc548\ub4e4 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 algorithm\ub4e4\uc744 \uc0ac\uc6a9\ud55c\ub2e4 \ubc94\uc704 \uae30\ubc18 for \ubb38\uc744 \uc0ac\uc6a9\ud55c\ub2e4 \ubc18\ubcf5\uc790\ub098 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud55c\ub2e4","title":"Alternatives"},{"location":"Expr/#enforcement_64","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ucee8\ud14c\uc774\ub108\ub4e4\uc774 \ubc14\ub00c\uc9c0 \uc54a\ub294 \ud55c \ub9e4\uc6b0 \uae4c\ub2e4\ub86d\ub2e4 (\ub108\ubb34 \ub9ce\uc740 \uacbd\uace0\ub97c \ub9c9\uae30 \uc704\ud574) \ube44\uad50\uc758 \ud53c\uc5f0\uc0b0\uc790 \uc911 \ud558\ub098\uac00 sizeof \ud639\uc740 \ucee8\ud14c\uc774\ub108\uc758 .size() \ub97c \uc0ac\uc6a9\ud558\uace0, \ub2e4\ub978 \ud55c\ucabd\uc740 ptrdiff_t \uacbd\uc6b0\ub294 \uc9c0\uc801\ud558\uc9c0 \ub9c8\ub77c","title":"Enforcement"},{"location":"FAQ/","text":"FAQ: Answers to frequently asked questions This section covers answers to frequently asked questions about these guidelines. FAQ.1: What do these guidelines aim to achieve? See the top of this page . This is an open-source project to maintain modern authoritative guidelines for writing C++ code using the current C++ Standard (as of this writing, C++14). The guidelines are designed to be modern, machine-enforceable wherever possible, and open to contributions and forking so that organizations can easily incorporate them into their own corporate coding guidelines. FAQ.2: When and where was this work first announced? It was announced by Bjarne Stroustrup in his CppCon 2015 opening keynote, \"Writing Good C++14\" . See also the accompanying isocpp.org blog post , and for the rationale of the type and memory safety guidelines see Herb Sutter's follow-up CppCon 2015 talk, \"Writing Good C++14 ... By Default\" . FAQ.3: Who are the authors and maintainers of these guidelines? The initial primary authors and maintainers are Bjarne Stroustrup and Herb Sutter, and the guidelines so far were developed with contributions from experts at CERN, Microsoft, Morgan Stanley, and several other organizations. At the time of their release, the guidelines are in a \"0.6\" state, and contributions are welcome. As Stroustrup said in his announcement: \"We need help!\" FAQ.4: How can I contribute? See CONTRIBUTING.md . We appreciate volunteer help! FAQ.5: How can I become an editor/maintainer? By contributing a lot first and having the consistent quality of your contributions recognized. See CONTRIBUTING.md . We appreciate volunteer help! FAQ.6: Have these guidelines been approved by the ISO C++ standards committee? Do they represent the consensus of the committee? No. These guidelines are outside the standard. They are intended to serve the standard, and be maintained as current guidelines about how to use the current Standard C++ effectively. We aim to keep them in sync with the standard as that is evolved by the committee. FAQ.7: If these guidelines are not approved by the committee, why are they under github.com/isocpp ? Because isocpp is the Standard C++ Foundation; the committee's repositories are under github.com/ cplusplus . Some neutral organization has to own the copyright and license to make it clear this is not being dominated by any one person or vendor. The natural entity is the Foundation, which exists to promote the use and up-to-date understanding of modern Standard C++ and the work of the committee. This follows the same pattern that isocpp.org did for the C++ FAQ , which was initially the work of Bjarne Stroustrup, Marshall Cline, and Herb Sutter and contributed to the open project in the same way. FAQ.8: Will there be a C++98 version of these Guidelines? a C++11 version? No. These guidelines are about how to best use Standard C++14 (and, if you have an implementation available, the Concepts Technical Specification) and write code assuming you have a modern conforming compiler. FAQ.9: Do these guidelines propose new language features? No. These guidelines are about how to best use Standard C++14 + the Concepts Technical Specification, and they limit themselves to recommending only those features. FAQ.10: What version of Markdown do these guidelines use? These coding standards are written using CommonMark , and <a> HTML anchors. We are considering the following extensions from GitHub Flavored Markdown (GFM) : fenced code blocks (consistently using indented vs. fenced is under discussion) tables (none yet but we'll likely need them, and this is a GFM extension) Avoid other HTML tags and other extensions. Note: We are not yet consistent with this style. FAQ.50: What is the GSL (guidelines support library)? The GSL is the small set of types and aliases specified in these guidelines. As of this writing, their specification herein is too sparse; we plan to add a WG21-style interface specification to ensure that different implementations agree, and to propose as a contribution for possible standardization, subject as usual to whatever the committee decides to accept/improve/alter/reject. FAQ.51: Is github.com/Microsoft/GSL the GSL? No. That is just a first implementation contributed by Microsoft. Other implementations by other vendors are encouraged, as are forks of and contributions to that implementation. As of this writing one week into the public project, at least one GPLv3 open-source implementation already exists. We plan to produce a WG21-style interface specification to ensure that different implementations agree. FAQ.52: Why not supply an actual GSL implementation in/with these guidelines? We are reluctant to bless one particular implementation because we do not want to make people think there is only one, and inadvertently stifle parallel implementations. And if these guidelines included an actual implementation, then whoever contributed it could be mistakenly seen as too influential. We prefer to follow the long-standing approach of the committee, namely to specify interfaces, not implementations. But at the same time we want at least one implementation available; we hope for many. FAQ.53: Why weren't the GSL types proposed through Boost? Because we want to use them immediately, and because they are temporary in that we want to retire them as soon as types that fill the same needs exist in the standard library. FAQ.54: Has the GSL (guidelines support library) been approved by the ISO C++ standards committee? No. The GSL exists only to supply a few types and aliases that are not currently in the standard library. If the committee decides on standardized versions (of these or other types that fill the same need) then they can be removed from the GSL. FAQ.55: If you're using the standard types where available, why is the GSL string_span different from the string_view in the Library Fundamentals 1 Technical Specification and C++17 Working Paper? Why not just use the committee-approved string_view ? The consensus on the taxonomy of views for the C++ Standard Library was that \"view\" means \"read-only\", and \"span\" means \"read/write\". The read-only string_view was the first such component to complete the standardization process, while span and string_span are currently being considered for standardization. FAQ.56: Is owner the same as the proposed observer_ptr ? No. owner owns, is an alias, and can be applied to any indirection type. The main intent of observer_ptr is to signify a non -owning pointer. FAQ.57: Is stack_array the same as the standard array ? No. stack_array is guaranteed to be allocated on the stack. Although a std::array contains its storage directly inside itself, the array object can be put anywhere, including the heap. FAQ.58: Is dyn_array the same as vector or the proposed dynarray ? No. dyn_array is not resizable, and is a safe way to refer to a heap-allocated fixed-size array. Unlike vector , it is intended to replace array- new[] . Unlike the dynarray that has been proposed in the committee, this does not anticipate compiler/language magic to somehow allocate it on the stack when it is a member of an object that is allocated on the stack; it simply refers to a \"dynamic\" or heap-based array. FAQ.59: Is Expects the same as assert ? No. It is a placeholder for language support for contract preconditions. FAQ.60: Is Ensures the same as assert ? No. It is a placeholder for language support for contract postconditions.","title":"<a name=\"S-faq\"></a>FAQ: Answers to frequently asked questions"},{"location":"FAQ/#faq-answers-to-frequently-asked-questions","text":"This section covers answers to frequently asked questions about these guidelines.","title":"FAQ: Answers to frequently asked questions"},{"location":"FAQ/#faq1-what-do-these-guidelines-aim-to-achieve","text":"See the top of this page . This is an open-source project to maintain modern authoritative guidelines for writing C++ code using the current C++ Standard (as of this writing, C++14). The guidelines are designed to be modern, machine-enforceable wherever possible, and open to contributions and forking so that organizations can easily incorporate them into their own corporate coding guidelines.","title":"FAQ.1: What do these guidelines aim to achieve?"},{"location":"FAQ/#faq2-when-and-where-was-this-work-first-announced","text":"It was announced by Bjarne Stroustrup in his CppCon 2015 opening keynote, \"Writing Good C++14\" . See also the accompanying isocpp.org blog post , and for the rationale of the type and memory safety guidelines see Herb Sutter's follow-up CppCon 2015 talk, \"Writing Good C++14 ... By Default\" .","title":"FAQ.2: When and where was this work first announced?"},{"location":"FAQ/#faq3-who-are-the-authors-and-maintainers-of-these-guidelines","text":"The initial primary authors and maintainers are Bjarne Stroustrup and Herb Sutter, and the guidelines so far were developed with contributions from experts at CERN, Microsoft, Morgan Stanley, and several other organizations. At the time of their release, the guidelines are in a \"0.6\" state, and contributions are welcome. As Stroustrup said in his announcement: \"We need help!\"","title":"FAQ.3: Who are the authors and maintainers of these guidelines?"},{"location":"FAQ/#faq4-how-can-i-contribute","text":"See CONTRIBUTING.md . We appreciate volunteer help!","title":"FAQ.4: How can I contribute?"},{"location":"FAQ/#faq5-how-can-i-become-an-editormaintainer","text":"By contributing a lot first and having the consistent quality of your contributions recognized. See CONTRIBUTING.md . We appreciate volunteer help!","title":"FAQ.5: How can I become an editor/maintainer?"},{"location":"FAQ/#faq6-have-these-guidelines-been-approved-by-the-iso-c-standards-committee-do-they-represent-the-consensus-of-the-committee","text":"No. These guidelines are outside the standard. They are intended to serve the standard, and be maintained as current guidelines about how to use the current Standard C++ effectively. We aim to keep them in sync with the standard as that is evolved by the committee.","title":"FAQ.6: Have these guidelines been approved by the ISO C++ standards committee? Do they represent the consensus of the committee?"},{"location":"FAQ/#faq7-if-these-guidelines-are-not-approved-by-the-committee-why-are-they-under-githubcomisocpp","text":"Because isocpp is the Standard C++ Foundation; the committee's repositories are under github.com/ cplusplus . Some neutral organization has to own the copyright and license to make it clear this is not being dominated by any one person or vendor. The natural entity is the Foundation, which exists to promote the use and up-to-date understanding of modern Standard C++ and the work of the committee. This follows the same pattern that isocpp.org did for the C++ FAQ , which was initially the work of Bjarne Stroustrup, Marshall Cline, and Herb Sutter and contributed to the open project in the same way.","title":"FAQ.7: If these guidelines are not approved by the committee, why are they under github.com/isocpp?"},{"location":"FAQ/#faq8-will-there-be-a-c98-version-of-these-guidelines-a-c11-version","text":"No. These guidelines are about how to best use Standard C++14 (and, if you have an implementation available, the Concepts Technical Specification) and write code assuming you have a modern conforming compiler.","title":"FAQ.8: Will there be a C++98 version of these Guidelines? a C++11 version?"},{"location":"FAQ/#faq9-do-these-guidelines-propose-new-language-features","text":"No. These guidelines are about how to best use Standard C++14 + the Concepts Technical Specification, and they limit themselves to recommending only those features.","title":"FAQ.9: Do these guidelines propose new language features?"},{"location":"FAQ/#faq10-what-version-of-markdown-do-these-guidelines-use","text":"These coding standards are written using CommonMark , and <a> HTML anchors. We are considering the following extensions from GitHub Flavored Markdown (GFM) : fenced code blocks (consistently using indented vs. fenced is under discussion) tables (none yet but we'll likely need them, and this is a GFM extension) Avoid other HTML tags and other extensions. Note: We are not yet consistent with this style.","title":"FAQ.10: What version of Markdown do these guidelines use?"},{"location":"FAQ/#faq50-what-is-the-gsl-guidelines-support-library","text":"The GSL is the small set of types and aliases specified in these guidelines. As of this writing, their specification herein is too sparse; we plan to add a WG21-style interface specification to ensure that different implementations agree, and to propose as a contribution for possible standardization, subject as usual to whatever the committee decides to accept/improve/alter/reject.","title":"FAQ.50: What is the GSL (guidelines support library)?"},{"location":"FAQ/#faq51-is-githubcommicrosoftgsl-the-gsl","text":"No. That is just a first implementation contributed by Microsoft. Other implementations by other vendors are encouraged, as are forks of and contributions to that implementation. As of this writing one week into the public project, at least one GPLv3 open-source implementation already exists. We plan to produce a WG21-style interface specification to ensure that different implementations agree.","title":"FAQ.51: Is github.com/Microsoft/GSL the GSL?"},{"location":"FAQ/#faq52-why-not-supply-an-actual-gsl-implementation-inwith-these-guidelines","text":"We are reluctant to bless one particular implementation because we do not want to make people think there is only one, and inadvertently stifle parallel implementations. And if these guidelines included an actual implementation, then whoever contributed it could be mistakenly seen as too influential. We prefer to follow the long-standing approach of the committee, namely to specify interfaces, not implementations. But at the same time we want at least one implementation available; we hope for many.","title":"FAQ.52: Why not supply an actual GSL implementation in/with these guidelines?"},{"location":"FAQ/#faq53-why-werent-the-gsl-types-proposed-through-boost","text":"Because we want to use them immediately, and because they are temporary in that we want to retire them as soon as types that fill the same needs exist in the standard library.","title":"FAQ.53: Why weren't the GSL types proposed through Boost?"},{"location":"FAQ/#faq54-has-the-gsl-guidelines-support-library-been-approved-by-the-iso-c-standards-committee","text":"No. The GSL exists only to supply a few types and aliases that are not currently in the standard library. If the committee decides on standardized versions (of these or other types that fill the same need) then they can be removed from the GSL.","title":"FAQ.54: Has the GSL (guidelines support library) been approved by the ISO C++ standards committee?"},{"location":"FAQ/#faq55-if-youre-using-the-standard-types-where-available-why-is-the-gsl-string_span-different-from-the-string_view-in-the-library-fundamentals-1-technical-specification-and-c17-working-paper-why-not-just-use-the-committee-approved-string_view","text":"The consensus on the taxonomy of views for the C++ Standard Library was that \"view\" means \"read-only\", and \"span\" means \"read/write\". The read-only string_view was the first such component to complete the standardization process, while span and string_span are currently being considered for standardization.","title":"FAQ.55: If you're using the standard types where available, why is the GSL string_span different from the string_view in the Library Fundamentals 1 Technical Specification and C++17 Working Paper? Why not just use the committee-approved string_view?"},{"location":"FAQ/#faq56-is-owner-the-same-as-the-proposed-observer_ptr","text":"No. owner owns, is an alias, and can be applied to any indirection type. The main intent of observer_ptr is to signify a non -owning pointer.","title":"FAQ.56: Is owner the same as the proposed observer_ptr?"},{"location":"FAQ/#faq57-is-stack_array-the-same-as-the-standard-array","text":"No. stack_array is guaranteed to be allocated on the stack. Although a std::array contains its storage directly inside itself, the array object can be put anywhere, including the heap.","title":"FAQ.57: Is stack_array the same as the standard array?"},{"location":"FAQ/#faq58-is-dyn_array-the-same-as-vector-or-the-proposed-dynarray","text":"No. dyn_array is not resizable, and is a safe way to refer to a heap-allocated fixed-size array. Unlike vector , it is intended to replace array- new[] . Unlike the dynarray that has been proposed in the committee, this does not anticipate compiler/language magic to somehow allocate it on the stack when it is a member of an object that is allocated on the stack; it simply refers to a \"dynamic\" or heap-based array.","title":"FAQ.58: Is dyn_array the same as vector or the proposed dynarray?"},{"location":"FAQ/#faq59-is-expects-the-same-as-assert","text":"No. It is a placeholder for language support for contract preconditions.","title":"FAQ.59: Is Expects the same as assert?"},{"location":"FAQ/#faq60-is-ensures-the-same-as-assert","text":"No. It is a placeholder for language support for contract postconditions.","title":"FAQ.60: Is Ensures the same as assert?"},{"location":"Functions/","text":"F: \ud568\uc218 \ud568\uc218\uc758 \uc774\ub984\uc740 \uc804\ub2ec\uc778\uc790(argument)\ub4e4\uc758 \uc694\uad6c\uc0ac\ud56d\uc744 \ub4dc\ub7ec\ub0b4\uace0, \uc778\uc790\ub4e4\uacfc \ud638\ucd9c \uacb0\uacfc\uac04\uc758 \uad00\uacc4\ub97c \uba85\ud655\ud788 \uae30\uc220\ud574\uc57c \ud55c\ub2e4. \uc138\ubd80 \uad6c\ud604\uc740 \uba85\uc138\uac00 \uc544\ub2c8\ub2e4. \ud568\uc218\uac00 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud558\ub294\uc9c0\ub9cc\ud07c\uc774\ub098 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0\ub3c4 \uc0dd\uac01\ud574 \ubcf4\ub77c. \ud568\uc218\ub294 \ub300\ubd80\ubd84 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uac00\uc7a5 \uc911\uc694\ud55c \ubd80\ubd84\uc774\ubbc0\ub85c, \uc778\ud130\ud398\uc774\uc2a4 \uaddc\uce59\ub3c4 \uc0b4\ud3b4 \ubcf4\ub77c. \ud568\uc218\ub294 \uc2dc\uc2a4\ud15c\uc774 \ubaa8\uc21c\uc5c6\ub294(consistent) \uc5b4\ub5a4 \uc0c1\ud0dc\uc5d0\uc11c \ub2e4\uc74c \uc0c1\ud0dc\ub85c \uc774\ud589\ud558\ub3c4\ub85d \ud558\ub294 \ub3d9\uc791(action)\uc774\ub098 \uacc4\uc0b0(computation)\uc744 \uba85\uc138\ud558\ub294(specify) \uac83\uc774\ub2e4. \uc774\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \uae30\ubcf8 \uc7ac\ub8cc(building block)\uc774\ub2e4. \uc5ed\uc8fc: * Parameter: \ub9e4\uac1c\ubcc0\uc218 * Argument: \uc804\ub2ec\uc778\uc790 \ud568\uc218 \uaddc\uce59 \uc694\uc57d: \ud568\uc218 \uc815\uc758 \uaddc\uce59: F.1: \uc758\ubbf8\uc788\ub294 \ub3d9\uc791\ub4e4\uc744 \"\ubb36\uc5b4\uc11c\" \ud568\uc218\ub85c \ub9cc\ub4e4\uace0 \uc2e0\uc911\ud558\uac8c \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c F.2: \ud568\uc218\ub294 \ud558\ub098\uc758 \ub17c\ub9ac\uc801 \ub3d9\uc791\ub9cc \uc218\ud589\ud574\uc57c \ud55c\ub2e4 F.3: \ud568\uc218\ub294 \uac04\uacb0\ud558\uace0 \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\ud558\ub77c F.4: \ud568\uc218\uac00 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud3c9\uac00\ub418\uc5b4\uc57c \ud55c\ub2e4\uba74 constexpr \ub85c \uc120\uc5b8\ud558\ub77c F.5: \ud568\uc218\uac00 \ub9e4\uc6b0 \uc9e7\uace0 \uc218\ud589\uc2dc\uac04\uc774 \uc911\uc694\ud558\ub2e4\uba74 inline \uc73c\ub85c \uc120\uc5b8\ud558\ub77c F.6: \ud568\uc218\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uba74 noexcept \ub85c \uc120\uc5b8\ud558\ub77c F.7: \ubcf4\ud3b8\uc131\uc744 \uace0\ub824\ud55c\ub2e4\uba74, \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ub300\uc2e0\uc5d0 T* \ub098 T& \ud0c0\uc785\uc758 \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c F.8: \uc21c\uc218 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c F.9: \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc778\uc790\ub294 \uc774\ub984\uc774 \uc5c6\uc5b4\uc57c \ud55c\ub2e4 \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec \ud45c\ud604(parameter passing expression) \uaddc\uce59: F.15: \uc815\ubcf4\ub97c \uc804\ub2ec \ud560 \ub54c \ub2e8\uc21c\ud558\uace0 \uad00\uc2b5\uc801\uc778 \ubc29\ubc95\uc744 \uc120\ud638\ud558\ub77c F.16: \"\uc785\ub825(in)\" \ub9e4\uac1c\ubcc0\uc218\ub294 \ubcf5\uc0ac \ube44\uc6a9\uc774 \uc801\uac8c \ub4dc\ub294 \ud0c0\uc785\uc758 \uacbd\uc6b0 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uace0, \uadf8 \uc678\uc5d0\ub294 \uc0c1\uc218 \ucc38\uc870\ud615\uc73c\ub85c \uc804\ub2ec\ud558\ub77c F.17: \"\uc785\ucd9c\ub825(in-out)\" \ub9e4\uac1c\ubcc0\uc218\ub294 \ube44\uc0c1\uc218 \ucc38\uc870\ud615\uc73c\ub85c \uc804\ub2ec\ud558\ub77c F.18: \"\ub118\uaca8\uc8fc\ub294(will-move-from)\" \ub9e4\uac1c\ubcc0\uc218\ub294 X&& \ud0c0\uc785\uacfc std::move \ub85c \uc804\ub2ec\ud558\ub77c F.19: \"\uc804\ub2ec(forward)\" \ub9e4\uac1c\ubcc0\uc218\ub294 TP&& \ud0c0\uc785\uacfc std::forward \ub85c\ub9cc \uc804\ub2ec\ud558\ub77c F.20: \"\ucd9c\ub825(out)\"\uc5d0\ub294 \ub9e4\uac1c\ubcc0\uc218\ubcf4\ub2e4\ub294 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc120\ud638\ud558\ub77c F.21: \"\ucd9c\ub825\"\uac12 \uc5ec\ub7ec \uac1c\ub97c \ubc18\ud658\ud560 \ub54c\ub294 \ud29c\ud50c\uc774\ub098 \uad6c\uc870\uccb4\ub97c \uc120\ud638\ud558\ub77c \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec \uc758\ubbf8\uad6c\uc870(parameter passing semantic) \uaddc\uce59: F.22: T* \ud639\uc740 owner \ub97c \ub2e8\uc77c \uac1c\uccb4\ub97c \uc9c0\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub77c F.23: \"null\"\uc774 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 not_null<T> \ub97c \uc0ac\uc6a9\ud574 \ud45c\uc2dc\ud558\ub77c F.24: \ubc94\uc704\ub97c \uc9c0\uc815\ud560 \ub54c\ub294 span<T> \ud639\uc740 span_p<T> \ub97c \uc0ac\uc6a9\ud558\ub77c F.25: C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc5d0\ub294 zstring \ud639\uc740 not_null<zstring> \uc744 \uc0ac\uc6a9\ud558\ub77c F.26: \ud3ec\uc778\ud130\uac00 \ud544\uc694\ud55c \uacf3\uc5d0 \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud560 \ub54c\ub294 unique_ptr<T> \ub97c \uc0ac\uc6a9\ud558\ub77c F.27: \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud560 \ub54c\ub294 shared_ptr<T> \ub97c \uc0ac\uc6a9\ud558\ub77c F.60: \"\uc778\uc790\uac00 \uc5c6\uc744 \uacbd\uc6b0\"\ub97c \ud5c8\uc6a9\ud55c\ub2e4\uba74 T& \ubcf4\ub2e4\ub294 T* \ub97c \uc120\ud638\ud558\ub77c \uac12 \ubc18\ud658 \uc758\ubbf8\uad6c\uc870 \uaddc\uce59: F.42: \uc704\uce58\ub97c \ub098\ud0c0\ub0b4\ub294 \uacbd\uc6b0\uc5d0\ub9cc T* \ub97c \ubc18\ud658\ud558\ub77c F.43: \uc808\ub300\ub85c (\uc9c1\uc811\uc801\uc774\ub4e0 \uac04\uc811\uc801\uc774\ub4e0) \uc9c0\uc5ed \uac1c\uccb4\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c F.44: \ubcf5\uc0ac\ub97c \uad8c\uc7a5\ud558\uc9c0 \uc54a\uac70\ub098 \"\uac1c\uccb4\ub97c \ud56d\uc0c1 \ubc18\ud658\"\ud55c\ub2e4\uba74 T& \ub97c \ubc18\ud658\ud558\ub77c F.45: T&& \ub97c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c F.46: main() \ub294 int \ub97c \ubc18\ud658\ud574\uc57c \ud55c\ub2e4 F.47: \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 T& \ub97c \ubc18\ud658\ud558\ub77c F.48: return std::move(local) \uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c \uae30\ud0c0 \ud568\uc218 \uaddc\uce59: F.50: \ud568\uc218\ub97c \uc4f8 \uc218 \uc5c6\uc744 \ub54c\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c(\uc9c0\uc5ed \ubcc0\uc218\ub97c \ucea1\uccd0\ud558\uac70\ub098 \uc9c0\uc5ed \ud568\uc218\ub97c \uc791\uc131\ud560 \ub54c) F.51: \uc120\ud0dd\ud560 \uc218 \uc788\ub2e4\uba74, \uc911\ubcf5 \uc815\uc758\ubcf4\ub2e4\ub294 \uae30\ubcf8 \uc804\ub2ec\uc778\uc790\ub97c \uc120\ud638\ud558\ub77c F.52: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 \ub78c\ub2e4\uc758 \ucc38\uc870 \ucea1\uccd0\ub97c \uc120\ud638\ud558\ub77c F.53: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \ucc38\uc870 \ucea1\uccd0\ub97c \ud53c\ud558\ub77c F.54: this \ub97c \ucea1\uccd0\ud560 \ub54c\ub294, \ubaa8\ub4e0 \ubcc0\uc218\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ucea1\uccd0\ud558\ub77c(\uae30\ubcf8 \ucea1\uccd0\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4) F.55: va_arg \uc804\ub2ec\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c \ud568\uc218\ub294 \ub78c\ub2e4\uc640 \ud568\uc218\uac1c\uccb4\uc640 \uac15\ud55c \uc5f0\uad00\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. See also C.lambdas: Function objects and lambdas F.def: \ud568\uc218 \uc815\uc758(definition) \ud568\uc218 \uc815\uc758\ub294 \ud568\uc218\uc758 \ubcf8\ubb38\uc744 \uad6c\ud604\ud558\uba74\uc11c \uc120\uc5b8\ud558\ub294 \uac83\uc774\ub2e4. F.1: \uc758\ubbf8\uc788\ub294 \ub3d9\uc791\ub4e4\uc744 \"\ubb36\uc5b4\uc11c\" \ud568\uc218\ub85c \ub9cc\ub4e4\uace0 \uc2e0\uc911\ud558\uac8c \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c Reason \uacf5\ud1b5\ub41c \ucf54\ub4dc\ub97c \ubb36\uc5b4 \ub0b4\uba74 \uac00\ub3c5\uc131\uc774 \ub192\uc544\uc9c0\uace0, \uc7ac\uc0ac\uc6a9\ud558\uae30 \uc88b\uc544\uc9c0\uace0, \ubcf5\uc7a1\ud55c \ucf54\ub4dc\uc5d0\uc11c \uc624\ub958\uac00 \ub098\ud0c0\ub098\ub294 \ubc94\uc704\ub97c \uc81c\ud55c\ud55c\ub2e4. \uc798 \uba85\uc138\ub41c \ud589\ub3d9\uc774\ub77c\uba74 \uc774\ub97c \uc8fc\ubcc0 \ucf54\ub4dc\ub85c\ubd80\ud130 \ubd84\ub9ac\uc2dc\ud0a4\uace0 \uc774\ub984\uc744 \ubd80\uc5ec\ud558\ub77c. Example, don't void read_and_print ( istream & is ) // read and print an int { int x ; if ( is >> x ) cout << \"the int is \" << x << '\\n' ; else cerr << \"no int on input \\n \" ; } read_and_print \ud568\uc218\uc758 \uac70\uc758 \ubaa8\ub4e0 \ubd80\ubd84\uc774 \uc798\ubabb\ub418\uc5c8\ub2e4. \uc774 \ud568\uc218\ub294 \uc5b4\ub5a4 \uac12\uc744 \uc77d\uace0, ostream \uc5d0 \uc4f0\uac70\ub098 \uc624\ub958 \uba54\uc2dc\uc9c0\ub97c \uc4f0\ub294\ub370, \uc624\ub85c\uc9c0 int \ub9cc\uc744 \ub2e4\ub8ec\ub2e4. \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf54\ub4dc\uac00 \uc5c6\uace0, \ub17c\ub9ac\uc801\uc73c\ub85c \ubcc4\uac1c\uc778 \ub3d9\uc791\uc774 \ub4a4\uc11e\uc5ec \uc788\uc73c\uba70, \uc9c0\uc5ed\ubcc0\uc218\ub294 \ub17c\ub9ac\uc0c1 \uc18c\uc6a9\uc774 \uc5c6\uc5b4\uc9c4 \ub4a4\uc5d0\ub3c4 \ub0a8\uc544 \uc788\ub2e4. \uc791\uc740 \uc608\uc5d0\uc11c\ub77c\uba74 \uad1c\ucc2e\uc544 \ubcf4\uc774\uc9c0\ub9cc, \uc774 \uc785\ub825\ub3d9\uc791, \ucd9c\ub825\ub3d9\uc791, \uadf8\ub9ac\uace0 \uc624\ub958\ucc98\ub9ac\uac00 \ub354 \ubcf5\uc7a1\ud588\ub354\ub77c\uba74 \ub4a4\uc5c9\ud0a8 \ucf54\ub4dc \ub369\uc5b4\ub9ac\uac00 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6cc\uc84c\uc744 \uac83\uc774\ub2e4. Note \ub9cc\uc57d \ud55c \uacf3 \uc774\uc0c1\uc5d0\uc11c \uc0ac\uc6a9 \ub420 \uc911\uc694\ud55c \ub78c\ub2e4 \ud568\uc218\ub97c \uc791\uc131\ud55c\ub2e4\uba74 (\ube44\uc9c0\uc5ed)\ubcc0\uc218\uc5d0 \ud560\ub2f9\ud558\uace0 \uc774\ub984\uc744 \ubd80\uc5ec\ud558\ub77c. Example sort ( a , b , []( T x , T y ) { return x . rank () < y . rank () && x . value () < y . value (); }); \ub78c\ub2e4\uc5d0 \uc774\ub984\uc744 \ubd80\uc5ec\ud558\uba74 \ud45c\ud604\uc2dd\uc744 \uc5ec\ub7ec \uac1c\uc758 \ub17c\ub9ac\uc801 \ubd80\ubd84\uc73c\ub85c \ub098\ub20c \uc218 \uc788\uace0, \uadf8 \ub78c\ub2e4\uac00 \ud558\ub294 \uc77c\uc744 \uc9d0\uc791\ucf00 \ud560 \uc218 \uc788\ub2e4. auto lessT = []( T x , T y ) { return x . rank () < y . rank () && x . value () < y . value (); }; sort ( a , b , lessT ); find_if ( a , b , lessT ); \ucf54\ub4dc\uac00 \uc9e7\ub2e4\uace0 \uc131\ub2a5\uc774\ub098 \uc720\uc9c0\ubcf4\uc218\uc131\uc774 \ud56d\uc0c1 \uc88b\uc9c0\ub9cc\uc740 \uc54a\ub2e4. Exception \ubc18\ubcf5\ubb38(loop bodies)\uc740, \ub78c\ub2e4\uc778 \uacbd\uc6b0\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\uc778\ub370, \uc774\ub984\uc744 \uc9c0\uc744 \ud544\uc694\uac00 \uac70\uc758 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc \uc218\uc2ed \uc904\uc774\ub098 \uc218\uc2ed \ucabd\uc5d0 \uac78\uce5c \uac70\ub300\ud55c \ubc18\ubcf5\ubb38\uc740 \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\ub2e4. \ud568\uc218\ub97c \uac04\uacb0\ud558\uac8c \uc720\uc9c0\ud558\ub77c \uaddc\uce59\uc5d0\ub294 \"\ubc18\ubcf5\ubb38\uc744 \uc9e7\uac8c \uc720\uc9c0\ud558\ub77c\"\ub77c\ub294 \ub73b\ub3c4 \uc788\ub2e4. \uc774\uc640 \uc720\uc0ac\ud558\uac8c, \ucf5c\ubc31 \uc778\uc790\ub85c \uc0ac\uc6a9\ub418\ub294 \ub78c\ub2e4\ub294 \ub54c\ub85c \ud55c\ub208\uc5d0 \uc54c\uc544\ubcfc \uc218 \uc5c6\uc9c0\ub9cc, \uc7ac\uc0ac\uc6a9\ub420 \uac00\ub9dd\uc774 \uac70\uc758 \uc5c6\ub2e4. (\ub530\ub77c\uc11c \uc774\ub984\uc744 \uc9c0\uc5b4 \uc904 \ud544\uc694\uac00 \uac70\uc758 \uc5c6\ub2e4.) Enforcement \ud568\uc218\ub97c \uac04\uacb0\ud558\uac8c \uc720\uc9c0\ud558\ub77c \ub97c \ucc38\uace0\ud558\ub77c \ub3d9\uc77c\ud558\uac70\ub098 \ub9e4\uc6b0 \ube44\uc2b7\ud55c \ub78c\ub2e4\uac00 \uc5ec\ub7ec \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c F.2: \ud568\uc218\ub294 \ud558\ub098\uc758 \ub17c\ub9ac\uc801 \ub3d9\uc791\ub9cc \uc218\ud589\ud574\uc57c \ud55c\ub2e4 Reason \ud558\ub098\uc758 \uc791\uc5c5\ub9cc \uc218\ud589\ud558\ub294 \ud568\uc218\ub294 \uc774\ud574\ud558\uae30 \uc27d\uace0, \ud14c\uc2a4\ud2b8\ud558\uae30 \uc27d\uace0, \uc7ac\uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4. Example \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void read_and_print () // bad { int x ; cin >> x ; // check for errors cout << x << \" \\n \" ; } \uc774\ub294 \ud2b9\uc815\ud55c \uc785\ub825\uc5d0 \ub9e4\uc5ec \uc788\ub294 \ud1b5\uc9dc\ub85c \ub41c \ud568\uc218\ub85c, \ub2e4\ub978 \uc4f0\uc784\uc0c8\ub97c \ucc3e\uc744 \uc218 \uc5c6\ub2e4. \ub300\uc2e0\uc5d0 \ud568\uc218\ub97c \uc801\uc808\ud55c \ub17c\ub9ac\uc801 \ubd80\ubd84\uc73c\ub85c \ucabc\uac1c\uace0 cin, cout \ub4f1\uc740 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c: int read ( istream & is ) // better { int x ; is >> x ; // check for errors return x ; } void print ( ostream & os , int x ) { os << x << \" \\n \" ; } \ud544\uc694\ud558\ub2e4\uba74 \ub450 \ud568\uc218\ub97c \uacb0\ud569\ud558\uba74 \ub41c\ub2e4: void read_and_print () { auto x = read ( cin ); print ( cout , x ); } \ub610\ud55c \ud544\uc694\ud558\ub2e4\uba74 read() \uc640 print() \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ub370\uc774\ud130 \ud0c0\uc785, \uc785\ub825 \uba54\ucee4\ub2c8\uc998, \uc624\ub958\uc5d0 \ub300\ud55c \uc751\ub2f5 \ub4f1\uc744 \ud15c\ud50c\ub9bf\ud654 \ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4: auto read = []( auto & input , auto & value ) // better { input >> value ; // check for errors }; auto print ( auto & output , const auto & value ) { output << value << \" \\n \" ; } Enforcement \ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\uac00 2\uac1c \uc774\uc0c1\uc778 \ud568\uc218\ub97c \uc758\uc2ec\ud558\ub77c. \ub300\uc2e0 \ubc18\ud658\uac12\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc5ec\ub7ec \ubc18\ud658\uac12\uc744 \uc800\uc7a5 \ud560 \uc218 \uc788\ub294 tuple \uc744 \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4. \ud3b8\uc9d1\uae30 \ud654\uba74\uc5d0 \ub2e4 \ub098\uc624\uc9c0 \uc54a\uc744 \ub9cc\ud07c \ud070 \ud568\uc218\ub97c \uc758\uc2ec\ud558\ub77c. \uc774\ub7f0 \ud568\uc218\ub294 \uc138\ubd80 \ub3d9\uc791\uc744 \uac16\ub294 \ub354 \uc791\uc740 \ud568\uc218\ub4e4\ub85c (\uc774\ub984\uc744 \uc798 \uc9c0\uc5b4\uc11c) \ub098\ub204\ub3c4\ub85d \ud55c\ub2e4. 7\uac1c \uc774\uc0c1\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud568\uc218\ub97c \uc758\uc2ec\ud558\ub77c. F.3: \ud568\uc218\ub294 \uac04\uacb0\ud558\uace0 \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\ud558\ub77c Reason \uac70\ub300\ud55c \ud568\uc218\ub294 \uc77d\uae30 \uc5b4\ub824\uc6b8 \ubfd0\ub354\ub7ec, \ubcf5\uc7a1\ud55c \ucf54\ub4dc\ub97c \ud3ec\ud568\ud558\uac70\ub098, \ud544\uc694\ud55c \uc720\ud6a8\ubc94\uc704 \uc774\uc0c1\uc73c\ub85c \uc874\uc7ac\ud558\ub294 \ubcc0\uc218\uac00 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \ub354 \ub192\ub2e4. \uc81c\uc5b4 \uad6c\uc870\uac00 \ubcf5\uc7a1\ud55c \ud568\uc218\ub294 \uae38\uc774\uac00 \uae38\uae30 \ub9c8\ub828\uc774\uace0, \ub17c\ub9ac \uc624\ub958\uac00 \uc228\uc5b4\uc788\uc744 \uacf5\uc0b0\uc774 \ud06c\ub2e4. Example \ub2e4\uc74c\uc758 \uc608\ub97c \ubcf4\ub77c: double simple_func ( double val , int flag1 , int flag2 ) // simple_func: takes a value and calculates the expected ASIC output, // given the two mode flags. { double intermediate ; if ( flag1 > 0 ) { intermediate = func1 ( val ); if ( flag2 % 2 ) intermediate = sqrt ( intermediate ); } else if ( flag1 == - 1 ) { intermediate = func1 ( - val ); if ( flag2 % 2 ) intermediate = sqrt ( - intermediate ); flag1 = - flag1 ; } if ( abs ( flag2 ) > 10 ) { intermediate = func2 ( intermediate ); } switch ( flag2 / 10 ) { case 1 : if ( flag1 == - 1 ) return finalize ( intermediate , 1.171 ); break ; case 2 : return finalize ( intermediate , 13.1 ); default : break ; } return finalize ( intermediate , 0. ); } \uc774 \ud568\uc218\ub294 \ub108\ubb34 \ubcf5\uc7a1\ud558\ub2e4. \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0\ub97c \uc62c\ubc14\ub974\uac8c \ub2e4\ub8e8\uc5c8\ub294\uc9c0 \uc5b4\ub5bb\uac8c \uc54c\uaca0\ub294\uac00? \uac8c\ub2e4\uac00, \uc774 \uc608\ub294 \ub2e4\ub978 \uaddc\uce59\ub3c4 \uc5b4\uae30\uace0 \uc788\ub2e4. \uc774\ub807\uac8c \ubc14\uafd4\uc4f8 \uc218 \uc788\ub2e4: double func1_muon ( double val , int flag ) { // ??? } double func1_tau ( double val , int flag1 , int flag2 ) { // ??? } double simple_func ( double val , int flag1 , int flag2 ) // simple_func: takes a value and calculates the expected ASIC output, // given the two mode flags. { if ( flag1 > 0 ) return func1_muon ( val , flag2 ); if ( flag1 == - 1 ) // handled by func1_tau: flag1 = -flag1; return func1_tau ( - val , flag1 , flag2 ); return 0. ; } Note \"\ud55c \ud654\uba74\uc5d0 \ub9de\ucd94\uae30\"\ub294 \"\ub108\ubb34 \ud06c\uac8c \ud558\uc9c0 \uc54a\uae30\"\uc5d0 \ub300\ud55c \uc88b\uc740 \uc2e4\uc6a9\uc801\uc778 \uaddc\uce59\uc774\ub2e4. \ud55c\uc904\uc5d0\uc11c \ub2e4\uc12f\uc904 \uc0ac\uc774\uc758 \ud568\uc218\ub294 \uc815\uc0c1\uc73c\ub85c \uac04\uc8fc\ud55c\ub2e4. Note \uae34 \ud568\uc218\ub294 \uc751\uc9d1\uc131\uc788\uace0 \uc758\ubbf8\uc788\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \uc791\uc740 \ud568\uc218\ub85c \ub098\ub204\uc5b4\uc57c \ud55c\ub2e4. \uc791\uace0 \uac04\uacb0\ud55c \ud568\uc218\ub294 \ud568\uc218 \ud638\ucd9c \ube44\uc6a9\uc774 \uc911\uc694\ud55c \uacf3\uc5d0\uc11c inline \ucc98\ub9ac\ub420 \uc218 \uc788\ub2e4. Enforcement \"\ud55c \ud654\uba74\uc5d0 \ub9de\uc9c0 \uc54a\ub294\" \ud568\uc218\ub294 \uc9c0\uc801\ud55c\ub2e4. \ud654\uba74\uc740 \uc5b4\ub290\uc815\ub3c4 \ud06c\uae30\ub85c \ud560 \uac83\uc778\uac00? \ud55c \uc904\uc5d0 140\uc790, 60\uc904 \ud654\uba74\uc744 \uc0ac\uc6a9\ud574\ubcf4\ub77c; \uc774\ub294 \ub300\ub7b5 \ucc45\uc758 \ud55c \ud398\uc774\uc9c0\uc5d0 \ub9de\ub294 \ucd5c\ub300 \ud06c\uae30\uc774\ub2e4. \ub108\ubb34 \ubcf5\uc7a1\ud55c \ud568\uc218\ub294 \uc9c0\uc801\ud55c\ub2e4. \ub108\ubb34 \ubcf5\uc7a1\ud55c\uc740 \uc5b4\ub290\uc815\ub3c4\ub97c \uc758\ubbf8\ud558\ub294\uac00? \uc21c\ud658 \ubcf5\uc7a1\ub3c4(cyclomatic complexity)\ub97c \uc4f8 \uc218\ub3c4 \uc788\ub2e4. \"10\uac1c\uc758 \ub17c\ub9ac\uc801 \uacbd\ub85c\"\ub97c \uc0ac\uc6a9\ud574\ubcf4\ub77c. \ub2e8\uc21c\ud55c switch\ub294 \ud558\ub098\ub85c \uc138\uc5b4\ub3c4 \uc88b\ub2e4. F.4: \ud568\uc218\uac00 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud3c9\uac00\ub418\uc5b4\uc57c \ud55c\ub2e4\uba74 constexpr \ub85c \uc120\uc5b8\ud558\ub77c Reason constexpr \ub294 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud3c9\uac00\ud558\ub77c\uace0 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \uc9c0\uc2dc\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4. Example \uc720\uba85\ud55c \ud329\ud1a0\ub9ac\uc5bc: constexpr int fac ( int n ) { constexpr int max_exp = 17 ; // constexpr enables max_exp to be used in Expects Expects ( 0 <= n && n < max_exp ); // prevent silliness and overflow int x = 1 ; for ( int i = 2 ; i <= n ; ++ i ) x *= i ; return x ; } C++14 \uc5d0\uc11c\ub294 \uc774\uc640 \uac19\uc774 \uc791\uc131\ud560 \uc218 \uc788\ub2e4. C++ 11 \ud658\uacbd\uc774\ub77c\uba74, fac() \ub97c \uc7ac\uadc0\ub97c \uc0ac\uc6a9\ud574 \uc791\uc131\ud574\uc57c \ud55c\ub2e4. Note constexpr \uc740 \ucef4\ud30c\uc77c \ud0c0\uc784 \ud3c9\uac00\ub97c \ubcf4\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4; \ub2e8\uc9c0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc694\uad6c\ud558\uac70\ub098 \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd5c\uc801\ud654\ub97c \ud558\uae30\ub85c \uacb0\uc815\ud588\uc744 \ub54c \uc0c1\uc218 \ud45c\ud604 \uc778\uc790\uc5d0 \ub300\ud574\uc11c \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ud3c9\uac00 \ub420 \uc218 \uc788\ub2e4\ub294 \uac83\ub9cc\uc744 \ubcf4\uc7a5 \ud560 \ubfd0\uc774\ub2e4. constexpr int min ( int x , int y ) { return x < y ? x : y ; } void test ( int v ) { int m1 = min ( - 1 , 2 ); // probably compile-time evaluation constexpr int m2 = min ( - 1 , 2 ); // compile-time evaluation int m3 = min ( - 1 , v ); // run-time evaluation constexpr int m4 = min ( - 1 , v ); // error: cannot evaluate at compile time } Note constexpr \ud568\uc218\ub294 \uc21c\uc218 \ud568\uc218\ub4e4\uc774\uba70, \ubd80\uc218\ud6a8\uacfc(side deffect)\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294\ub2e4. int dcount = 0 ; constexpr int double ( int v ) { ++ dcount ; // error: attempted side effect from constexpr function return v + v ; } \ub300\uccb4\uc801\uc73c\ub85c \uc88b\uc740 \ud2b9\uc131\uc774\ub2e4. \uc0c1\uc218\uac00 \uc544\ub2cc \uc804\ub2ec\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uba74, constexpr \ub294 \uc608\uc678\ub97c \ub358\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \ubd80\uc218\ud6a8\uacfc\ub97c \ub0a8\uae30\uba74\uc11c \uc885\ub8cc\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\uace0 \uc788\ub2e4\uba74, constexpr \ub294 \uc644\uc804\ud788 \uc21c\uc218\ud55c \ud568\uc218\ub294 \uc544\ub2c8\uac8c \ub41c\ub2e4; \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4. ??? A question for the committee: can a constructor for an exception thrown by a constexpr function modify state? \"No\" would be a nice answer that matches most practice. Note \ubaa8\ub4e0 \ud568\uc218\ub97c constexpr \ub85c \uc791\uc131\ud558\uc9c0\ub294 \ub9c8\ub77c. \ub300\ubd80\ubd84\uc758 \uacc4\uc0b0\uc740 \uc2e4\ud589\uc2dc\uac04\uc5d0 \ucd5c\uc801\uc73c\ub85c \uc218\ud589\ub41c\ub2e4. Note \uc5b4\ub5a4 API\uac00 \ub192\uc740 \uc218\uc900\uc758 \uc2e4\ud589\uc2dc\uac04 \uc124\uc815(configuration) \ud639\uc740 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc5d0 \uc758\uc874\ud55c\ub2e4\uba74 constexpr \ub85c \uc791\uc131\ud574\uc120 \uc548\ub41c\ub2e4. \uadf8\uc640 \uac19\uc740 \uacbd\uc6b0\ub294 \ucef4\ud30c\uc77c\ub7ec\uc5d0 \uc758\ud574 \ud3c9\uac00\ub420 \uc218 \uc5c6\uc73c\uba70, \uadf8 API\uc5d0 \uc758\uc874\ud558\ub294 constexpr \ud568\uc218\ub4e4\uc740 \uc7ac\uad6c\uc131(refactored)\ub418\uac70\ub098 constexpr \ub97c \ud3ec\uae30(drop)\ud558\uac8c \ub420 \uac83\uc774\ub2e4. Enforcement \ubd88\uac00\ub2a5\ud558\uba70 \ubd88\ud544\uc694\ud558\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0c1\uc218\uac00 \ud544\uc694\ud55c \uacf3\uc5d0 constexpr \uac00 \uc544\ub2cc \ud568\uc218\ub4e4\uc774 \uc0ac\uc6a9\ub418\uba74 \uc624\ub958\ub85c \ucc98\ub9ac\ud560 \uac83\uc774\ub2e4. F.5: \ud568\uc218\uac00 \ub9e4\uc6b0 \uc9e7\uace0 \uc218\ud589\uc2dc\uac04\uc774 \uc911\uc694\ud558\ub2e4\uba74 inline \uc73c\ub85c \uc120\uc5b8\ud558\ub77c Reason \uc77c\ubd80 \ucd5c\uc801\ud654\uae30(optimizer)\ub294 \ubcc4\ub3c4\ub85c \ud78c\ud2b8\ub97c \ubc1b\uc9c0 \uc54a\uc544\ub3c4 \ud568\uc218 \uc778\ub77c\uc778\ud654\ub97c \uc798 \ud558\uc9c0\ub9cc, \uadf8\uc5d0 \uc758\uc874\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \uce21\uc815\ud558\ub77c! \uc9c0\ub09c 40\ub144\uac04 \uc6b0\ub9ac\ub294 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc544\ubb34\ub7f0 \ud78c\ud2b8\uac00 \uc5c6\uc5b4\ub3c4 \uc0ac\ub78c\ubcf4\ub2e4 \ub354 \uc778\ub77c\uc778\ud654\ub97c \uc798 \ud560\uac70\ub77c\uace0 \uc57d\uc18d\ud574 \uc654\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \uc57d\uc18d\uc740 \uc544\uc9c1 \uc9c0\ucf1c\uc9c0\uc9c0 \uc54a\uc558\ub2e4. inline \uc744 \uba85\uc2dc\ud558\ub294 \uac83\uc740 \ucef4\ud30c\uc77c\ub7ec\uac00 \ub354 \ub098\uc740 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud558\ub3c4\ub85d \uad8c\uc7a5\ud558\ub294 \uac83\uc774\ub2e4. Example inline string cat ( const string & s , const string & s2 ) { return s + s2 ; } Exception \ud568\uc218\uac00 \ubcc0\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub77c\uace0 \ud655\uc2e0\ud558\uc9c0 \uc54a\ub294 \ud55c, inline \uc744 \uc548\uc815\ub41c \uc778\ud130\ud398\uc774\uc2a4 \ud568\uc218\uc5d0 \uc0ac\uc6a9\ud574\uc120 \uc548\ub41c\ub2e4. \uc778\ub77c\uc778 \ud568\uc218\ub294 ABI\uc758 \uc77c\ubd80\uc774\ub2e4. Note constexpr \uc740 inline \uc744 \ub0b4\ud3ec\ud558\uace0 \uc788\ub2e4. Note \ud074\ub798\uc2a4 \ub0b4\uc5d0 \uc815\uc758\ub41c \uba64\ubc84 \ud568\uc218\ub4e4\uc740 \uae30\ubcf8\uc801\uc73c\ub85c inline \uc774 \uc801\uc6a9\ub41c\ub2e4. Exception \ud15c\ud50c\ub9bf \ud568\uc218(\ud15c\ud50c\ub9bf \uba64\ubc84 \ud568\uc218 \ud3ec\ud568)\ub4e4\uc740 \ubcf4\ud1b5 \ud5e4\ub354 \ud30c\uc77c\uc5d0 \uc815\uc758\ub418\uae30 \ub54c\ubb38\uc5d0 \uc778\ub77c\uc778 \ud568\uc218\uc5d0 \ud574\ub2f9\ud55c\ub2e4. Enforcement inline \ud568\uc218\uac00 3 \ubb38\uc7a5\ubcf4\ub2e4 \uae38\uace0 (\ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ud568\uc218\ucc98\ub7fc) \ub2e4\ub978 \uacf3\uc5d0 \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. F.6: \ud568\uc218\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uba74 noexcept \ub85c \uc120\uc5b8\ud558\ub77c Reason \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc774 \uc624\ub958\uc5d0 \ub300\ucc98\ud558\ub9ac\ub77c \uc0dd\uac01\ud560 \uc218 \uc5c6\uace0, \uc774\ub294 \ucd5c\ub300\ud55c \ube60\ub974\uac8c \uc885\ub8cc\ub418\uc5b4\uc57c \ub9c8\ub545\ud558\ub2e4. \ud568\uc218\ub97c noexcept \ub85c \uc120\uc5b8\ud558\uba74 \ub300\uc548\uc801\uc778 \uc2e4\ud589\uacbd\ub85c\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c \ucd5c\uc801\ud654\uac00 \uc26c\uc6cc\uc9c4\ub2e4. \uc624\ub958\uac00 \ub09c \ub4a4 \uc885\ub8cc\ud560 \ub54c\uae4c\uc9c0 \uc2dc\uac04\ub3c4 \uc9e7\uc544\uc9c4\ub2e4. Example \uc628\uc804\ud788 C\uc5b8\uc5b4\ub85c \uad6c\ud604\uc774 \ub418\uc5c8\uac70\ub098 \uc608\uc678\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ubaa8\ub4e0 \ud568\uc218\uc5d0 noexcept \ub97c \ucd94\uac00\ud558\ub77c. C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud574\uc11c \uc554\uc2dc\uc801\uc73c\ub85c \uadf8\ub807\uac8c\ud558\uace0 \uc788\ub2e4. Note constexpr \ud568\uc218\uac00 \uc2e4\ud589\uc2dc\uac04\uc5d0 \ud3c9\uac00\ub41c\ub2e4\uba74 \uc608\uc678\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, noexcept \ub97c \uba85\uc2dc\ud574\uc57c \ud560 \uc218 \uc788\ub2e4 Example \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc788\ub294 \ud568\uc218\uc5d0\uc11c noexcept \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\ub2e4: vector < string > collect ( istream & is ) noexcept { vector < string > res ; for ( string s ; is >> s ;) res . push_back ( s ); return res ; } collect() \ud568\uc218\uac00 \uba54\ubaa8\ub9ac\ub97c \ubaa8\ub450 \uc0ac\uc6a9\ud574 \ubc84\ub9ac\uba74 \ud504\ub85c\uadf8\ub7a8\uc740 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ud558\uac8c \ub41c\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 \uba54\ubaa8\ub9ac \uace0\uac08 \uc0c1\ud0dc\ub97c \ud574\uacb0\ud560 \uc218 \uc5c6\ub2e4\uba74, \uc774\ub294 \ub2f9\uc5f0\ud55c \uacb0\uacfc\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4; terminate() \ud568\uc218\uc5d0\uc11c \uc801\ud569\ud55c \uc624\ub958 \uae30\ub85d(error log)\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\ub2e4. (\ud558\uc9c0\ub9cc \uba54\ubaa8\ub9ac \ubd80\uc871 \uc0c1\ud669\uc5d0\uc11c\ub294 \uc81c\ub300\ub85c \ud560 \uc218 \uc788\ub294 \uc77c\uc774 \uac70\uc758 \uc5c6\ub2e4) Note \uc5b4\ub5a4 \ud568\uc218\uc5d0 noexcept \ub97c \ubd99\uc77c\uc9c0 \ub9d0\uc9c0 \uacb0\uc815\ud560 \ub54c\ub294 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \ud658\uacbd\uc744 \uc54c\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4. \ud2b9\ud788\ub098 \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uac83\uc774 \uba54\ubaa8\ub9ac \ud560\ub2f9 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 sort \uac19\uc740 \uc5ec\ud0c0 \uc720\ud2f8\ub9ac\ud2f0 \ucf54\ub4dc\ucc98\ub7fc, \uc644\uc804\ud788 \uc77c\ubc18\uc801\uc73c\ub85c \uc4f0\uc77c \uac83\uc744 \uc5fc\ub450\uc5d0 \ub454 \ucf54\ub4dc\ub294 bad_alloc \uc608\uc678\uac00 \uc81c\ub300\ub85c \ucc98\ub9ac\ub418\ub294 \ud658\uacbd\uc744 \uc9c0\uc6d0\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub7a8 \ubc0f \uc2e4\ud589\ud658\uacbd\uc740 \uba54\ubaa8\ub9ac \ud560\ub2f9 \uc2e4\ud328\ub97c \uc81c\ub300\ub85c \ucc98\ub9ac\ud558\uc9c0 \ubabb\ud558\ub294\ub370, \uadf8\ub7f4 \ub54c\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\uc2dc\ucf1c \ubc84\ub9ac\ub294 \uac83\uc774 \uac00\uc7a5 \uae54\ub054\ud558\uace0 \uac04\ub2e8\ud55c \ucc98\ub9ac\ubc29\ubc95\uc774\ub2e4. \ub2f9\uc2e0\uc774 \uc9e0 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\uac00 \uba54\ubaa8\ub9ac \ud560\ub2f9 \uc2e4\ud328\uc5d0 \ub300\ucc98\ud558\uc9c0 \ubabb\ud558\ub9ac\ub77c\ub294 \uc810\uc744 \uc548\ub2e4\uba74, \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud558\ub294 \ud568\uc218\uc5d0\ub3c4 noexcept \ub97c \ub367\ubd99\uc774\ub294 \uac83\uc774 \uc801\uc808\ud560 \uc218\ub3c4 \uc788\ub2e4. \ub2e4\ub974\uac8c \uc0dd\uac01\ud558\uba74: \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ud568\uc218\ub4e4\uc740 \ubcf4\ud1b5 \uc608\uc678\ub97c \ub358\uc9c4\ub2e4 (\ud568\uc218 \uc548\uc5d0\uc11c new \ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \uc608\uc678\ub97c \ub358\uc9c0\ub294 \ubc29\uc2dd\uc73c\ub85c \uc2e4\ud328\ub97c \uc54c\ub9ac\ub294 \ud568\uc218/\ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0). \ub530\ub77c\uc11c \ubc1c\uc0dd\uac00\ub2a5\ud55c \uc608\uc678\uac00 \ucc98\ub9ac\ub420 \uc218 \uc788\ub294\uc9c0 \uace0\ubbfc\ud558\uc9c0 \uc54a\uace0 noexcept \ub97c \ub0a8\ubc1c\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. noexcept \ub294 \ube48\ubc88\ud788 \ud638\ucd9c\ub418\ub294 \uc800\uc218\uc900 \ud568\uc218\ub4e4\uc5d0 \uc720\uc6a9\ud558\ub2e4 (\ub610\ud55c \uc815\ud655\ud558\ub2e4). Note \uc18c\uba78\uc790, swap \ud568\uc218, move \uc5f0\uc0b0 \uadf8\ub9ac\uace0 \uae30\ubcf8 \uc0dd\uc131\uc790\uc5d0\uc11c\ub294 \uc808\ub300\ub85c \uc608\uc678\ub97c \ub358\uc9c0\uba74 \uc548\ub41c\ub2e4. Enforcement \uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub294\ub370\ub3c4 noexcept \uac00 \uc5c6\ub294 \ud568\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \uc608\uc678\ub97c \ub358\uc9c0\ub294 swap , move \uc5f0\uc0b0\uc790, \uc18c\uba78\uc790 \uadf8\ub9ac\uace0 \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 F.7: \ubcf4\ud3b8\uc131\uc744 \uace0\ub824\ud55c\ub2e4\uba74, \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ub300\uc2e0\uc5d0 T* \ub098 T& \ud0c0\uc785\uc758 \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\uba74 \uc18c\uc720\uad8c\uc774 \uc774\uc804\ub418\uac70\ub098 \uacf5\uc720\ub41c\ub2e4. \uc774\ub294 \uc758\ub3c4\uc801\uc778 \uacbd\uc6b0\uc5d0\ub9cc \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. ( R.30 \ucc38\uace0). \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\uba74 \ud568\uc218 \ud638\ucd9c \uc2dc \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud574\uc57c\ud55c\ub2e4\ub294 \uc81c\uc57d\uc774 \uc0dd\uae34\ub2e4. \uacf5\uc720 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 (\uc608, std::shared_ptr ) \ub7f0\ud0c0\uc784\uc2dc \ucd94\uac00 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. Example // accepts any int* void f ( int * ); // can only accept ints for which you want to transfer ownership void g ( unique_ptr < int > ); // can only accept ints for which you are willing to share ownership void g ( shared_ptr < int > ); // doesn't change ownership, but requires a particular ownership of the caller void h ( const unique_ptr < int >& ); // accepts any int void h ( int & ); Example, bad // callee void f ( shared_ptr < widget >& w ) { // ... use ( * w ); // only use of w -- the lifetime is not used at all // ... }; R.30 \uc5d0\uc11c \uad00\ub828 \ub0b4\uc6a9\uc744 \uae30\uc220\ud558\uace0 \uc788\ub2e4. Note \ud5c8\uc0c1 \ud3ec\uc778\ud130(dangling pointer)\ub294 \uc815\uc801\uc73c\ub85c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4. \ub54c\ubb38\uc5d0 \ud5c8\uc0c1 \ud3ec\uc778\ud130\ub85c \uc778\ud55c \uc790\uc6d0 \uad00\ub9ac\uc5d0 \uc758\uc874\ud560 \ud544\uc694\ub294 \uc5c6\ub2e4. See also \uc804\ub2ec\uc778\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0\uac00 \ud5c8\uc6a9\ub41c\ub2e4\uba74 T& \ubcf4\ub2e4\ub294 T* \ub97c \uc120\ud638\ud558\ub77c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \uaddc\uce59 \uc694\uc57d Enforcement \uc18c\uc720\uad8c \uc758\ubbf8\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub370 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ud0c0\uc785\uc744 \uc778\uc790\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 (\ub610\ub294 operator-> \ub098 operator* \ub97c \uc911\ubcf5\uc815\uc758\ud55c \ud0c0\uc785). \uc774\ub7f0 \uacbd\uc6b0\ub294 \ubcf5\uc0ac \uac00\ub2a5\ud558\uc9c0\ub9cc \ubcf5\uc0ac/\uc774\ub3d9\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4 \ud639\uc740 \uc774\ub3d9 \uac00\ub2a5\ud558\uc9c0\ub9cc \uc774\ub3d9\ud558\uc9c0 \uc54a\ub294\ub2e4 \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uac70\ub098 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294 \ub2e4\ub978 \ud568\uc218\ub85c \uc804\ub2ec\ud55c\ub2e4 F.8: \uc21c\uc218 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c Reason \uc21c\uc218 \ud568\uc218\ub294 \uc880 \ub354 \ud30c\uc545\ud558\uae30 \uc27d\ub2e4. \ucd5c\uc801\ud654\ud558\uae30 \uc27d\uace0(\ubcd1\ub82c\ud654\ub97c \ud3ec\ud568\ud55c\ub2e4), \uba54\ubaa8\uc774\uc81c\uc774\uc158\ud558\uae30 \uc27d\ub2e4. Example template < class T > auto square ( T t ) { return t * t ; } Note constexpr \ub294 \uc21c\uc218 \ud568\uc218\uc5d0 \uc18d\ud55c\ub2e4. \uc0c1\uc218\uac00 \uc544\ub2cc \uc804\ub2ec\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uba74, constexpr \ub294 \uc608\uc678\ub97c \ub358\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \ubd80\uc218\ud6a8\uacfc\ub97c \ub0a8\uae30\uba74\uc11c \uc885\ub8cc\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\uace0 \uc788\ub2e4\uba74, constexpr \ub294 \uc644\uc804\ud788 \uc21c\uc218\ud55c \ud568\uc218\ub294 \uc544\ub2c8\uac8c \ub41c\ub2e4; \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4. ??? A question for the committee: can a constructor for an exception thrown by a constexpr function modify state? \"No\" would be a nice answer that matches most practice. Enforcement \ubd88\uac00\ub2a5\ud558\ub2e4. F.9: \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc778\uc790\ub294 \uc774\ub984\uc774 \uc5c6\uc5b4\uc57c \ud55c\ub2e4 Reason \uac00\ub3c5\uc131. \"\uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc778\uc790\" \uacbd\uace0\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud55c\ub2e4. Example X * find ( map < Blob >& m , const string & s , Hint ); // once upon a time, a hint was used Note \uc774 \ubb38\uc81c\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 1980\ub144\ub300 \ucd08\uc5d0 \uc774\ub984 \uc5c6\ub294 \ub9e4\uac1c\ubcc0\uc218\ub97c \ud5c8\uc6a9\ud558\uac8c \ub418\uc5c8\ub2e4 Enforcement \uc774\ub984\uc774 \uc788\uc9c0\ub9cc \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc9c0\uc801\ud55c\ub2e4. F.call: \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec(Parameter passing) \ud568\uc218\uc5d0 \uc778\uc790\ub97c \uc804\ub2ec\ud558\uace0 \ubc18\ud658\uac12\uc744 \ubc1b\ub294\ub370\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc774 \uc788\ub2e4. F.15: \uc815\ubcf4\ub97c \uc804\ub2ec \ud560 \ub54c \ub2e8\uc21c\ud558\uace0 \uad00\uc2b5\uc801\uc778 \ubc29\ubc95\uc744 \uc120\ud638\ud558\ub77c Reason \"\ubcc4\ub098\uba74\uc11c \uad50\ubb18\ud55c\" \uae30\ubc95\uc740 \uae5c\uc9dd\ub180\ub784\ub9cc\ud55c \ubc84\uadf8\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\uac70\ub098, \ub2e4\ub978 \ud504\ub85c\uadf8\ub798\uba38\uac00 \ucf54\ub4dc\ub97c \uc774\ud574\ud558\ub294\ub370 \uc5b4\ub835\uac8c \ub9cc\ub4e0\ub2e4. \uc815\ub9d0\ub85c \uc77c\ubc18\uc801\uc778 \uae30\ubc95\uc744 \ub118\uc5b4\uc11c\ub294 \ubc29\ubc95\uc73c\ub85c \ucd5c\uc801\ud654\ub97c \ud574\uc57c \ud55c\ub2e4\uba74 \uaf2d \ud544\uc694\ud55c \uac1c\uc120\uc0ac\ud56d\uc774\ub77c\ub294\uac83\uc744 \ud655\uc2e0\ud560 \uc218 \uc788\uc5b4\uc57c\ud558\uace0, \uc774\uc2dd\uc131\uc774 \uc5c6\uc744 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc11c\ub098 \uc8fc\uc11d\uc744 \ub0a8\uaca8\uc57c \ud55c\ub2e4. \uc544\ub798\uc758 \ud45c\ub294 \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc758 \uc870\uc5b8(F.16-21)\uc744 \uc694\uc57d\ud55c \uac83\uc774\ub2e4. \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec(Normal): \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec(Advanced): \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc \uace0\uae09 \uae30\uc220\uc744 \uc0ac\uc6a9\ud558\uace0, \uc8fc\uc11d\uc73c\ub85c \ubb38\uc11c\ud654\ud558\ub77c. F.16: \"\uc785\ub825(in)\" \ub9e4\uac1c\ubcc0\uc218\ub294 \ubcf5\uc0ac \ube44\uc6a9\uc774 \uc801\uac8c \ub4dc\ub294 \ud0c0\uc785\uc758 \uacbd\uc6b0 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uace0, \uadf8 \uc678\uc5d0\ub294 \uc0c1\uc218 \ucc38\uc870\ud615\uc73c\ub85c \uc804\ub2ec\ud558\ub77c Reason \ub450 \uacbd\uc6b0 \ubaa8\ub450 \ud638\ucd9c\uc790\uac00 \uc804\ub2ec\uc778\uc790\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ub610\ud55c r-value \ucd08\uae30\ud654\ub97c \ud5c8\uc6a9\ud55c\ub2e4. \"\ud070 \ube44\uc6a9 \uc5c6\uc774 \ubcf5\uc0ac\" \ud55c\ub2e4\ub294 \uac83\uc740 \uc2e4\ud589\uae30(machine)\uc758 \uad6c\uc870(architecture)\uc5d0 \ub530\ub77c \ub2e4\ub974\ub2e4. \ud558\uc9c0\ub9cc \ubcf4\ud1b5 2,3\uac1c\uc758 \uc6cc\ub4dc(double, \ud3ec\uc778\ud130, \ucc38\uc870)\ub97c \uac12\uc73c\ub85c \uc804\ub2ec\ud560\ub54c \ucd5c\uc801\uc774\ub2e4. \ube44\uc6a9\uc774 \uc801\ub2e4\uba74, \ub2e8\uc21c\uc131\uacfc \uc548\uc804\uc131\uc5d0\uc11c \ubcf5\uc0ac\ubcf4\ub2e4 \ub098\uc740 \ubc29\ubc95\uc740 \uc5c6\ub2e4. \ub610\ud55c \uc791\uc740 \uac1c\uccb4(2,3\uac1c \uc6cc\ub4dc\uae4c\uc9c0)\uc5d0 \ub300\ud574\uc120 \ucc38\uc870\ubcf4\ub2e4 \ubcf5\uc0ac\uac00 \ube60\ub978\ub370 \ud568\uc218\uc5d0\uc11c \uac04\uc811(in-direct)\uc811\uadfc\uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. Example void f1 ( const string & s ); // OK: pass by reference to const; always cheap void f2 ( string s ); // bad: potentially expensive void f3 ( int x ); // OK: Unbeatable void f4 ( const int & x ); // bad: overhead on access in f4() \"\uc785\ub825 \uc804\uc6a9\" \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ub41c r-value\ub97c \ucd5c\uc801\ud654\ud558\uace0\uc790 \ud55c\ub2e4\uba74: \ud568\uc218\uc5d0\uc11c \ubb34\uc870\uac74\uc801\uc73c\ub85c \uc804\ub2ec\uc778\uc790\ub97c \uc774\ub3d9(move)\ubc1b\ub294\ub2e4\uba74, && \ub97c \uc0ac\uc6a9\ud558\ub77c. F.18 \ucc38\uace0 \uc778\uc790\uc758 \ubcf5\uc0ac\ubcf8\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ub9e4\uac1c\ubcc0\uc218\uc5d0 (l-value\uc778 \uacbd\uc6b0) const& \ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uc640 (r-value\uc778 \uacbd\uc6b0) && \ub97c \ubc1b\uc544 \ud544\uc694\ud55c \uc601\uc5ed\uc5d0 std::move \ud558\ub294 \ud568\uc218\ub97c \uc911\ubcf5 \uc815\uc758\ud558\ub77c. \uc6d0\ub798 \uc774\ub294 \"will-move-from\"\uc744 \uc911\ubcf5\uc815\uc758\ud55c \uac83\uc774\ub2e4. F.18 \ucc38\uace0 \"\uc785\ub825 + \ubcf5\uc0ac\"\uac00 \uc5ec\ub7ff \ubc1c\uc0dd\ud558\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0\ub294, \"perfect forwarding\" \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\ub77c. F.19 \ucc38\uace0 Example int multiply ( int , int ); // just input ints, pass by value // suffix is input-only but not as cheap as an int, pass by const& string & concatenate ( string & , const string & suffix ); void sink ( unique_ptr < widget > ); // input only, and moves ownership of the widget \uc544\ub798\uc640 \uac19\uc740 \"\ub09c\ud574\ud55c \uae30\uc220\"\uc740 \uc9c0\uc591\ud558\ub77c: \"\ud6a8\uc728\uc801\uc774\ub77c\uc11c\" \uc778\uc790\ub97c T&& \ub85c \uc804\ub2ec\ud55c\ub2e4. && \ub85c \uc804\ub2ec\ud568\uc73c\ub85c\uc368 \ubc1c\uc0dd\ud558\ub294 \uc131\ub2a5 \ud5a5\uc0c1\uc5d0 \ub300\ud55c \ub8e8\uba38\ub294 \uc798\ubabb\ub418\uc5c8\uace0 \uae68\uc9c0\uae30 \uc27d\ub2e4(\uc18d\ub2e8\ud558\uc9c0 \ub9d0\uace0 F.18 \uc640 F.19 \ub97c \ucc38\uace0\ud558\ub77c) \ub300\uc785\uc5d0\uc11c const T& \ub97c \ubc18\ud658\ud558\uac70\ub098 \ube44\uc2b7\ud55c \uc5f0\uc0b0\uc744 \uc218\ud589\ud55c\ub2e4 ( F.47 \ucc38\uace0) Example Matrix \uac00 \uc774\ub3d9 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uc790(\uc544\ub9c8\ub3c4 \uc6d0\uc18c\ub4e4\uc744 std::vector \uc5d0 \ubcf4\uad00\ud558\uace0 \uc788\ub2e4): Matrix operator + ( const Matrix & a , const Matrix & b ) { Matrix res ; // ... fill res with the sum ... return res ; } Matrix x = m1 + m2 ; // move constructor y = m3 + m3 ; // move assignment Notes \ubc18\ud658 \uac12 \ucd5c\uc801\ud654\ub294 \ub300\uc785\uc5d0 \ub300\ud574\uc11c\ub294 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc9c0\ub9cc, \uc774\ub3d9 \ub300\uc785\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc801\uc6a9\ub41c\ub2e4. \ucc38\uc870\ub294 \uc5b8\uc5b4 \uaddc\uce59\uc5d0 \uc758\ud574 \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a8\ub2e4\uace0 \uac00\uc815\ud558\uae30 \ub54c\ubb38\uc5d0, null \ucc38\uc870\ub294 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. optional \uac12\uc5d0 \ub300\ud574 \uc54c\uace0 \uc788\ub2e4\uba74, \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\uac70\ub098, std::optional \ud639\uc740 \"\uac12\uc774 \uc5c6\uc74c\"\uc744 \uc758\ubbf8\ud558\ub294 \ud2b9\ubcc4\ud55c \uac12\uc744 \uc0ac\uc6a9\ud558\ub77c. Enforcement (\uc26c\uc6c0) (\uae30\ubcf8 \uc0ac\ud56d) \uc778\uc790\uc758 \ud06c\uae30\uac00 4 * sizeof(int) \ubcf4\ub2e4 \ud06c\uba74 \uacbd\uace0\ud55c\ub2e4. const \ucc38\uc870\ub97c \uc804\ub2ec\ud558\ub3c4\ub85d \uc81c\uc548\ud55c\ub2e4 (\uc26c\uc6c0) (\uae30\ubcf8 \uc0ac\ud56d) const \ucc38\uc870\ub85c \uc804\ub2ec\ub418\ub294 \uc778\uc790\uc758 \ud06c\uae30\uac00 3 * sizeof(int) \ubcf4\ub2e4 \uc791\ub2e4\uba74 \uacbd\uace0\ud55c\ub2e4. \uac12 \uc804\ub2ec\uc744 \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud55c\ub2e4 (\uc26c\uc6c0) (\uae30\ubcf8 \uc0ac\ud56d) const \ucc38\uc870 \ub9e4\uac1c\ubcc0\uc218\uac00 move \ub418\uba74 \uacbd\uace0\ud55c\ub2e4 F.17: \"\uc785\ucd9c\ub825(in-out)\" \ub9e4\uac1c\ubcc0\uc218\ub294 \ube44\uc0c1\uc218 \ucc38\uc870\ud615\uc73c\ub85c \uc804\ub2ec\ud558\ub77c Reason \ud638\ucd9c\uc790\uc5d0\uac8c \uac12\uc774 \ubcc0\uacbd\ub420 \uc218 \uc788\ub2e4\ub294 \uc810\uc744 \ubd84\uba85\ud788 \ud560 \uc218 \uc788\ub2e4. Example void update ( Record & r ); // assume that update writes to r Note T& \uc778\uc790\ub294 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc \ubc1b\uc544\uc62c \uc218\ub3c4 \uc788\ub2e4. \ub54c\ubb38\uc5d0 T& \ub294 \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\uac00 \ub420 \uc218 \uc788\ub2e4. \uc774\ub85c \uc778\ud574 \ubb38\uc81c\uac00 \ub418\uac70\ub098 \uc624\ub958\uc758 \uc6d0\uc778\uc774 \ub418\uae30\ub3c4 \ud55c\ub2e4: void f ( string & s ) { s = \"New York\" ; // non-obvious error } void g () { string buffer = \".................................\" ; f ( buffer ); // ... } \uc5ec\uae30\uc11c, g() \uc791\uc131\uc790\ub294 f() \uc5d0\uac8c \ubc84\ud37c\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc9c0\ub9cc, f() \ub294 \ucc38\uc870\ub97c \ubcc0\uacbd\ud574\ubc84\ub9b0\ub2e4 (\uc774\ub294 \ubb38\uc790\ub4e4\uc744 \ub2e8\uc21c\ud788 \ubcf5\uc0ac\ud558\ub294 \uac83\ubcf4\ub2e4 \ube44\uc6a9\uc774 \uc880 \ub354 \ubc1c\uc0dd\ud55c\ub2e4). g() \uc5d0\uc11c buffer \uc758 \ud06c\uae30\ub97c \uc798\ubabb \uac00\uc815\ud55c\ub2e4\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Enforcement (\uc911\uac04) (\uae30\ubcf8 \uc0ac\ud56d) \ud568\uc218 \ub0b4\uc5d0\uc11c \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294 \ube44 const \ucc38\uc870\ub97c \uacbd\uace0\ud55c\ub2e4 (\uc26c\uc6c0) (\uae30\ubcf8 \uc0ac\ud56d) const \ucc38\uc870 \ub9e4\uac1c\ubcc0\uc218\uac00 move \ub418\uba74 \uacbd\uace0\ud55c\ub2e4 F.18: \"\ub118\uaca8\uc8fc\ub294(will-move-from)\" \ub9e4\uac1c\ubcc0\uc218\ub294 X&& \ud0c0\uc785\uacfc std::move \ub85c \uc804\ub2ec\ud558\ub77c Reason \ud6a8\uc728\uc801\uc774\uace0 \ud638\ucd9c\ud558\ub294 \uc9c0\uc810\uc5d0\uc11c \ubc84\uadf8\ub97c \uc5c6\uc564\ub2e4: X&& \ub294 r-value\uc5d0 \uc5f0\uacb0\ub418\uba70(bind), l-value\ub97c \uc804\ub2ec\ud558\ub294 \uacbd\uc6b0 \uba85\uc2dc\uc801\uc73c\ub85c std::move \ub97c \ud638\ucd9c\ud574\uc57c \ud55c\ub2e4. Example void sink ( vector < int >&& v ) { // sink takes ownership of whatever the argument owned // usually there might be const accesses of v here store_somewhere ( std :: move ( v )); // usually no more use of v here; it is moved-from } store_somewhere() \ub97c \ud638\ucd9c\ud560 \ub54c std::move(v) \ub97c \uc0ac\uc6a9\ud55c \uacb0\uacfc v \uac00 \uac12\uc744 \ub118\uaca8\uc900(moved-from) \uc0c1\ud0dc\ub85c \ub9cc\ub4e0\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c. \uc774\ub294 \uc704\ud5d8\ud560 \uc218\ub3c4 \uc788\ub2e4 . Exception unique_ptr \uc640 \uac19\uc740 \uc720\uc77c\ud55c \uc18c\uc720\uc790 \ud0c0\uc785\ub4e4\uc740 \uc774\ub3d9\ub9cc \uac00\ub2a5(move-only)\ud558\uba70 \uc27d\uac8c \uc774\ub3d9\ub41c\ub2e4(cheap-to-move). \uc774 \ud0c0\uc785\ub4e4\uc740 \uc27d\uac8c \uac12 \uc804\ub2ec(pass by value) \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uace0 \uc218\ud589\ud560 \uc218 \uc788\ub2e4. \uac12 \uc804\ub2ec\uc740 \uc774\ub3d9 \uc5f0\uc0b0\uc774 \ud55c\ubc88 \ub354 \ubc1c\uc0dd\ud558\uc9c0\ub9cc, \ubd84\uba85\ud568\uacfc \ub2e8\uc21c\ud568\uc744 \uc6b0\uc120\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: template < class T > void sink ( std :: unique_ptr < T > p ) { // use p ... possibly std::move(p) onward somewhere else } // p gets destroyed Enforcement \ubaa8\ub4e0 std::move \uc5c6\uc774 X&& \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4 (\uc774\ub54c X \ub294 \ud15c\ud50c\ub9bf \uc778\uc790\uac00 \uc544\ub2c8\ub2e4) \uac12\uc744 \ub118\uaca8\uc900(moved-from) \uac1c\uccb4\uc5d0 \uc811\uadfc\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4 \uc870\uac74\ubd80\ub85c \uac1c\uccb4\ub97c \uc774\ub3d9\uc2dc\ud0a4\uc9c0 \ub9d0\uc544\ub77c F.19: \"\uc804\ub2ec(forward)\" \ub9e4\uac1c\ubcc0\uc218\ub294 TP&& \ud0c0\uc785\uacfc std::forward \ub85c\ub9cc \uc804\ub2ec\ud558\ub77c Reason \ub9cc\uc57d \uac1c\uccb4\uac00 \ud574\ub2f9 \ud568\uc218\uc5d0\uc11c \ubc14\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uace0 \ub2e4\ub978 \ucf54\ub4dc\ub85c \uc804\ub2ec\ub41c\ub2e4\uba74, \uadf8 \ud568\uc218\ub294 \uc804\ub2ec\uc778\uc790\uac00 \uc0c1\uc218( const )\uc778 \uacbd\uc6b0\uc774\uac70\ub098 r-value\uc778 \uacbd\uc6b0\uc5d0\ub3c4 \ub3d9\uc791\ud558\ub3c4\ub85d \uc791\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4. TP \uac00 \ud15c\ud50c\ub9bf\ud615 \ub9e4\uac1c\ubcc0\uc218\uba74 TP&& \ub294 \ud3ec\uc6cc\ub529 \ucc38\uc870\uac00 \ub41c\ub2e4 -- \uc774 \ub54c \uc0c1\uc218 \uc18d\uc131\uacfc rvalue \uc18d\uc131\uc740 \ubb34\uc2dc \ub418\uae30\ub3c4\ud558\uace0 \ubcf4\uc874 \ub418\uae30\ub3c4 \ud55c\ub2e4. \uadf8\ub798\uc11c T&& \ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \ubcc0\uc218\uc758 \uc0c1\uc218 \uc18d\uc131\uacfc rvalue \uc18d\uc131\uc5d0 \uac8c\uc758\uce58 \uc54a\ub294\ub2e4\ub294 \uc758\ubbf8\ub97c \ub0b4\ud3ec\ud558\uc9c0\ub9cc (\uc5b4\ucc28\ud53c \ubb34\uc2dc\ub418\uae30 \ub54c\ubb38\uc5d0), \uac12\uc744 \uc804\ub2ec\ud558\ub294 \ucf54\ub4dc\uc5d0\uc11c\ub294 \uc0c1\uc218 \uc18d\uc131\uacfc rvalue \uc18d\uc131\uc744 \uc2e0\uacbd\uc4f4\ub2e4 (\ubcf4\uc874\uc774 \ub418\uae30 \ub54c\ubb38\uc5d0). TP&& \ud615 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc784\uc2dc\uac1d\uccb4\uac00 \uc804\ub2ec\ub418\uba74 \ud568\uc218\uac00 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548\uc5d0\ub294 \uc720\ud6a8\ud558\uae30 \ub54c\ubb38\uc5d0 \uc548\uc804\ud558\ub2e4. TP&& \ud615 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud56d\uc0c1 std::forward \ub97c \uc774\uc6a9\ud558\uc5ec \ud568\uc218\uc758 \ubab8\uccb4\uc5d0\uc11c \uc804\ub2ec\ub418\uc5b4\uc57c \ud55c\ub2e4. Example template < class F , class ... Args > inline auto invoke ( F f , Args && ... args ) { return f ( forward < Args > ( args )...); } ??? calls ??? Enforcement \ubaa8\ub4e0 \uc815\uc801 \uacbd\ub85c\uc5d0 \ub300\ud574 \ub2e8 \ud55c\ubc88 std::forward \ud558\ub294 \uacbd\uc6b0\ub97c \uc81c\uc678\ud558\uace0 TP&& \ub9e4\uac1c\ubcc0\uc218\ub97c \ubc1b\ub294 \ud568\uc218\ub97c \uc9c0\uc801\ud55c\ub2e4 ( TP \ub294 \ud15c\ud50c\ub9bf \uc778\uc790\uc758 \uc774\ub984\uc774\ub2e4). F.20: \"\ucd9c\ub825(out)\"\uc5d0\ub294 \ub9e4\uac1c\ubcc0\uc218\ubcf4\ub2e4\ub294 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc120\ud638\ud558\ub77c Reason \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785\uc73c\ub85c & \ub294 \uc785/\ucd9c\ub825 \ud639\uc740 \ucd9c\ub825\uc73c\ub85c\ub9cc \uc4f0\uc77c \uc218 \uc788\ub294 \ubc18\uba74, \ubc18\ud658 \uac12\uc740 \uc798\ubabb \uc0ac\uc6a9\ub418\uae30 \uc5b4\ub824\uc6b0\uba70 \ud568\uc218\uc758 \uacb0\uacfc\ub77c\ub294 \uc810\uc744 \uba85\ud655\ud788 \ud55c\ub2e4. \uc774\ub294 \uc131\ub2a5 \ud5a5\uc0c1\uacfc \uba54\ubaa8\ub9ac \uad00\ub9ac\ub97c \ud53c\ud558\uae30 \uc704\ud574 \uc554\ubb35\uc801\uc73c\ub85c \uc774\ub3d9 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub294 \ud45c\uc900 \ucee8\ud14c\uc774\ub108\ub4e4 \uac19\uc740 \ud070 \uac1c\uccb4\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4. \ub9cc\uc57d \ub2e4\uc218\uc758 \uac12\uc744 \ubc18\ud658\ud574\uc57c \ud55c\ub2e4\uba74, tuple \uc774\ub098 \uba64\ubc84\ub97c \uac00\uc9c4 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c. Example // OK: return pointers to elements with the value x vector < const int *> find_all ( const vector < int >& , int x ); // Bad: place pointers to elements with value x in-out void find_all ( const vector < int >& , vector < const int *>& out , int x ); Note (\uac01\uac01\uc758 \uc774\ub3d9 \ube44\uc6a9\uc774 \ud06c\uc9c0 \uc54a\uc740) \uba64\ubc84\ub97c \ub9ce\uc774 \uac00\uc9c4 struct \ub294 \uc804\uccb4\uc801\uc73c\ub85c\ub294 \uc774\ub3d9 \ube44\uc6a9\uc774 \ud074 \uc218 \uc788\ub2e4. const \uac12\uc744 \ubc18\ud658\ud558\ub294 \uac83\uc740 \ucd94\ucc9c\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc624\ub798\ub41c \uc870\uc5b8\ub4e4\uc740 \ubb34\uc758\ubbf8\ud558\ub2e4: \uc758\ubbf8\ub3c4 \uc5c6\uace0 \uc774\ub3d9 \uc758\ubbf8\uad6c\uc870\ub97c \ubc29\ud574\ud55c\ub2e4. const vector < int > fct (); // bad: that \"const\" is more trouble than it is worth vector < int > g ( const vector < int >& vx ) { // ... fct () = vx ; // prevented by the \"const\" // ... return fct (); // expensive copy: move semantics suppressed by the \"const\" } \ubc18\ud658 \uac12\uc5d0 const \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc784\uc2dc \ubcc0\uc218\uc5d0 \ub300\ud55c (\uad49\uc7a5\ud788 \ub4dc\ubb38) \uc6b0\ubc1c\uc801 \uc811\uadfc\uc744 \ub9c9\uae30 \uc704\ud55c \uac83\uc774\ub2e4. \uc804\ub2ec \uc778\uc790\uc5d0 const \uac00 \uc0ac\uc6a9\ub418\uba74 (\ub9e4\uc6b0 \uc790\uc8fc \ubc1c\uc0dd\ud558\ub294) \uc774\ub3d9 \uc758\ubbf8\uad6c\uc870\ub97c \ub9c9\ub294\ub2e4. Exceptions \uc0c1\uc18d \uacc4\uce35\uad6c\uc870\uc5d0 \uc18d\ud55c \ud0c0\uc785\ucc98\ub7fc \uac12 \ud0c0\uc785\uc774 \uc544\ub2cc \uacbd\uc6b0, \uac1c\uccb4\ub97c unique_ptr \ud639\uc740 shared_ptr \ub85c \ubc18\ud658\ud558\ub77c \ub9ce\uc57d \uac12\uc758 \uc774\ub3d9 \ube44\uc6a9\uc774 \ud06c\ub2e4\uba74 ( array<BigPOD> \uac19\uc740 \uacbd\uc6b0), \uc790\uc720 \uc800\uc7a5\uc18c\uc5d0 \ud560\ub2f9\ud558\uace0 \uadf8 \ud578\ub4e4\uc744 ( unique_ptr \uc640 \uac19\uc740) \ubc18\ud658\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c. \ub610\ub294 const \uac00 \uc544\ub2cc \ucc38\uc870(\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218)\ub97c \uc804\ub2ec\ud574 \uac1c\uccb4\ub97c \ucc44\uc6cc\ub123\ub3c4\ub85d \ud558\ub77c \ucd5c\ub300 \ud06c\uae30(capacity)\ub97c \uac00\uc9c4 \uac1c\uccb4(\uc608\ub97c \ub4e4\uc5b4 std::string , std::vector )\ub97c \uc5ec\ub7ec \ud568\uc218 \ud638\ucd9c\uacfc\uc815\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub85c \ucc38\uc870\ub97c \uc804\ub2ec\ud558\ub77c . Example struct Package { // exceptional case: expensive-to-move object char header [ 16 ]; char load [ 2024 - 16 ]; }; Package fill (); // Bad: large return value void fill ( Package & ); // OK int val (); // OK void val ( int & ); // Bad: Is val reading its argument Enforcement \ud070 \ube44\uc6a9 \uc5c6\uc774 \ubc18\ud658\ud560 \uc218 \uc788\uc73c\uba74\uc11c \uac12\uc744 \ubcc0\uacbd\ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub294 \ube44 const \ucc38\uc870 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc9c0\uc801\ud558\ub77c; \uc774\ub4e4\uc740 \"\ucd9c\ub825\" \ubc18\ud658 \uac12\uc774 \uc801\uc808\ud558\ub2e4. const \ubc18\ud658 \uac12\uc744 \uc9c0\uc801\ud55c\ub2e4. const \ub97c \uc81c\uac70\ud558\ub3c4\ub85d \uad8c\ud55c\ub2e4 F.21: \"\ucd9c\ub825\"\uac12 \uc5ec\ub7ec \uac1c\ub97c \ubc18\ud658\ud560 \ub54c\ub294 \ud29c\ud50c\uc774\ub098 \uad6c\uc870\uccb4\ub97c \uc120\ud638\ud558\ub77c Reason \ubc18\ud658 \uac12\uc740 \uadf8 \uc790\uccb4\ub85c \ubb38\uc11c\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uace0 \"\ucd9c\ub825 \uc804\uc6a9\"\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. C++ \uc5d0\uc11c\ub294 \ub2e4\uc218\uc758 \uac12\uc744 \ubc18\ud658\ud560\ub54c\ub294 tuple ( pair \ub97c \ud3ec\ud568\ud574)\ub97c \uc4f4\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c, \ud638\ucd9c\ud55c \uc9c0\uc810\uc5d0\uc11c tie \ub97c \uc0ac\uc6a9\ud574 \ubc1b\uc744 \uac83\uc774\ub2e4. \ubc18\ud658 \uac12\uc5d0 \uc758\ubbf8\uad6c\uc870\uac00 \uc788\ub2e4\uba74 \ubcc4\ub3c4\uc758 struct \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\uc5d0\uc11c\ub294 (\uc774\ub984 \uc5c6\ub294) tuple \uc774 \uc720\uc6a9\ud558\ub2e4. Example // BAD: output-only parameter documented in a comment int f ( const string & input , /*output only*/ string & output_data ) { // ... output_data = something (); return status ; } // GOOD: self-documenting tuple < int , string > f ( const string & input ) { // ... return make_tuple ( status , something ()); } \uc0ac\uc2e4, C++98\uc758 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c\ub294 pair \uac00 \uac1c\uccb4 2\uac1c\ub97c \ubb36\uc740 tuple \uacfc \uac19\uae30 \ub54c\ubb38\uc5d0 \uc774 \uae30\ub2a5\uc744 \ud3b8\ub9ac\ud558\uac8c \uc0ac\uc6a9\ud558\uace0 \uc788\uc5c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, set<string> my_set \uc774 \uc8fc\uc5b4\uc84c\ub2e4\uace0 \uac00\uc815\ud558\uba74: // C++98 result = my_set . insert ( \"Hello\" ); if ( result . second ) do_something_with ( result . first ); // workaround C++11\uc5d0\uc11c\ub294 \uc774\ub807\uac8c \uc791\uc131\ud560 \uc218 \uc788\ub2e4, \uacb0\uacfc\uac12\ub4e4\uc744 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uc9c0\uc5ed\ubcc0\uc218\uc5d0 \ub300\uc785\ud55c\ub2e4: Sometype iter ; // default initialize if we haven't already Someothertype success ; // used these variables for some other purpose tie ( iter , success ) = my_set . insert ( \"Hello\" ); // normal return value if ( success ) do_something_with ( iter ); C++ 17\uc5d0\uc11c\ub294 \ub2e4\uc218\uc758 \ubcc0\uc218\ub4e4\uc744 \uc120\uc5b8\uacfc \ub3d9\uc2dc\uc5d0 \ucd08\uae30\ud654 \ud560 \uc218 \uc788\ub294 \"structured bindings\"\uc744 \uc9c0\uc6d0\ud55c\ub2e4: if ( auto [ iter , success ] = my_set . insert ( \"Hello\" ); success ) do_something_with ( iter ); Exception \ub54c\uc5d0 \ub530\ub77c\uc11c\ub294 \uac1c\uccb4\uc758 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\uae30 \uc704\ud574 \ud568\uc218\uc5d0 \uac1c\uccb4\ub97c \uc804\ub2ec\ud574\uc57c \ud560 \uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0, \uac1c\uccb4\ub97c T& \ucc38\uc870\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \ub9ce\uc740 \uacbd\uc6b0 \uc62c\ubc14\ub978 \ubc29\ubc95\uc774\ub2e4. \ubc18\ud658 \uac12\uc73c\ub85c \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud558\ub294 \uac83\uc740 \uc885\uc885 \ubd88\ud544\uc694\ud558\ub2e4. \uc608\ub97c \ub4e4\uc5b4: istream & operator >> ( istream & is , string & s ); // much like std::operator>>() for ( string s ; cin >> s ; ) { // do something with line } \uc5ec\uae30\uc11c s \uc640 cin \ubaa8\ub450 \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ub418\uc5c8\ub2e4. cin \uc740 \ucc38\uc870\ub85c \uc804\ub2ec\ub418\uc5b4 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. s \ub294 \ubc18\ubcf5\uc801\uc73c\ub85c \uac1c\uccb4\ub97c \ud560\ub2f9\ud558\ub294 \uac83\uc744 \ub9c9\uc73c\ub824\uace0 \uc804\ub2ec\ud55c\ub2e4. \ucc38\uc870\ub85c \uc804\ub2ec\ub41c s \ub97c \uc7ac\uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c, s \uc758 \ucd5c\ub300 \ud06c\uae30(capacity)\ub97c \ub118\uc5b4\uc11c\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc0c8\ub85c\uc6b4 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc740 \ubcf4\ud1b5 \"\ud638\ucd9c\uc790\uac00 \ubbf8\ub9ac \ud560\ub2f9\ud574\uc11c \ucd9c\ub825\uc744 \ubc1b\ub294\" \ud328\ud134\uc774\ub77c\uace0 \ubd88\ub9ac\ub294\ub370, string \uc774\ub098 vector \uac19\uc740 \uba54\ubaa8\ub9ac \ud574\uc81c\uac00 \ubc1c\uc0dd\ud558\ub294 \ud0c0\uc785\ub4e4\uc5d0 \uc720\uc6a9\ud558\ub2e4. \ube44\uad50\ub97c \uc704\ud574, \uac12\uc744 \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \ud574\uacb0\ud55c\ub2e4\uba74 \uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud558\uac8c \ub420 \uac83\uc774\ub2e4: pair < istream & , string > get_string ( istream & is ); // not recommended { string s ; is >> s ; return { is , s }; } for ( auto p = get_string ( cin ); p . first ; ) { // do something with p.second } \uc0dd\uac01\ubcf4\ub2e4 \uc544\ub984\ub2f5\uc9c0 \uc54a\uace0 \uc131\ub2a5\uc5d0\ub3c4 \uc88b\uc9c0 \uc54a\ub2e4. \uc774\ub294 \uc0ac\uc2e4 \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc758\uc874\ud558\uae30 \ub54c\ubb38\uc5d0 \uc5c4\ubc00\ud558\uac8c\ub294 \uaddc\uce59(F.21)\uc5d0\uc11c \ub9d0\ud558\ub294 \ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\uc758 \uc608\uc678\uac00 \uc544\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ub9d0\ud558\uc9c0 \uc54a\uc544\uc11c \ub193\uce58\ub294 \uac83\ubcf4\ub2e4\ub294 \uba85\uc2dc\uc801\uc73c\ub85c \uc5b8\uae09\ud558\ub294 \uac83\uc774 \ubd84\uba85\ud558\uae30 \ub54c\ubb38\uc5d0 \uc791\uc131\ub418\uc5c8\ub2e4. Note \ud2b9\uc815\ud55c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc744 \ubc18\ud658\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud55c \uacbd\uc6b0\ub3c4 \ub9ce\uc774 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74: struct Distance { int value ; int unit = 1 ; // 1 means meters }; Distance d1 = measure ( obj1 ); // access d1.value and d1.unit auto d2 = measure ( obj2 ); // access d2.value and d2.unit auto [ value , unit ] = measure ( obj3 ); // access value and unit; somewhat redundant // to people who know measure() auto [ x , y ] = measure ( obj4 ); // don't; it's likely to be confusing \ucd94\uc0c1\ud654\uac00 \uc544\ub2cc \ub3c5\ub9bd\uc801\uc778 \uc874\uc7ac\ub4e4(independent entities)\uc744 \ud45c\ud604\ud560 \ub54c\ub294 pair \uc640 tuple \uc740 \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \ubc94\uc6a9\uc801(overly-generic)\uc77c \uc218 \uc788\ub2e4. \ub2e4\ub978 \uc608\ub85c\ub294, tuple \ub300\uc2e0 \ud2b9\uc815 \ud0c0\uc785\uacfc \ube44\uc2b7\ud55c variant<T, error_code> \ub97c \uc0ac\uc6a9\ud558\ub77c. Enforcement \ucd9c\ub825 \ubaa9\uc801\uc758 \ub9e4\uac1c\ubcc0\uc218\ub294 \ubc18\ud658\uac12\uc73c\ub85c \ub300\uccb4\ub418\uc5b4\uc57c \ud55c\ub2e4. \ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud568\uc218(\uba64\ubc84\ud568\uc218 \ud3ec\ud568)\uc5d0\uc11c \uac12\uc744 \ubcc0\uacbd\ud558\ub294 const \uac00 \uc544\ub2cc \ub9e4\uac1c\ubcc0\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4. F.22: T* \ud639\uc740 owner \ub97c \ub2e8\uc77c \uac1c\uccb4\ub97c \uc9c0\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131: \uc77c\ubc18\uc801\uc778 \ud3ec\uc778\ud130\uc640 \uac19\ub2e4. \ubd84\uc11d\ub3c4\uad6c\uc758 \ub3d9\uc791\uc744 \ub3d5\ub294\ub2e4. Note \uc804\ud1b5\uc801\uc778 C\uc640 C++ \ucf54\ub4dc\uc5d0\uc11c\ub294 T* \ub294 \uc11c\ub85c \uc5f0\uad00\uc774 \uc5c6\ub294 \ubaa9\uc801\ub4e4( weakly-related purposes)\uc5d0 \uc4f0\uc5ec\uc654\ub2e4: (\ub2e8\uc77c) \uac1c\uccb4\uc758 \ud655\uc778(identify) (\ud568\uc218\uc5d0 \uc758\ud574 \uc18c\uba78\ub418\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc758\ubbf8) \uc790\uc720 \uc800\uc7a5\uc18c\uc5d0 \ud560\ub2f9\ub41c \uac1c\uccb4\uc758 \uc8fc\uc18c(\ub098\uc911\uc5d0 \ud574\uc81c\ud55c\ub2e4) nullptr \ub97c \ub2f4\uae30 \uc704\ud55c \uc6a9\ub3c4 (0\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790 \ubc30\uc5f4) \uc804\ud1b5\uc801\uc778 C \uc5b8\uc5b4 \ubb38\uc790\uc5f4 \uae38\uc774\uc640 \ud568\uaed8 \uc804\ub2ec\ub418\ub294 \ubc30\uc5f4\uc758 \uc2dc\uc791 \uc9c0\uc810 \ubc30\uc5f4 \ub0b4\uc758 \uc704\uce58\ub97c \ud45c\uc2dc \uc774\ub85c \uc778\ud574 \ucf54\ub4dc\uac00 \uc5b4\ub5a4\uc77c\uc744 \ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6e0\uace0, \ub3c4\uad6c\uc5d0 \uc758\ud55c \ubd84\uc11d\uc744 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uc5c8\ub2e4. Example void use ( int * p , int n , char * s , int * q ) { p [ n - 1 ] = 666 ; // Bad: we don't know if p points to n elements; // assume it does not or use span<int> cout << s ; // Bad: we don't know if that s points to a zero-terminated array of char; // assume it does not or use zstring delete q ; // Bad: we don't know if *q is allocated on the free store; // assume it does not or use owner } \uc544\ub798 \ucf54\ub4dc\uac00 \ub354 \ub0ab\ub2e4 void use2 ( span < int > p , zstring s , owner < int *> q ) { p [ p . size () - 1 ] = 666 ; // OK, a range error can be caught cout << s ; // OK delete q ; // OK } Note owner<T*> \ub294 \uc18c\uc720\uad8c\uc744 \ud45c\ud604\ud55c\ub2e4. zstring \uc740 C \uc5b8\uc5b4 \ubb38\uc790\uc5f4\uc744 \uc758\ubbf8\ud55c\ub2e4. T* \uac00 unique_ptr<T> \uc640 \uac19\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0\uc11c \ud68d\ub4dd\ub418\uc5c8\ub2e4\uba74 \ub2e8\uc77c \uac1c\uccb4\ub97c \uc758\ubbf8\ud55c\ub2e4. See also Support library \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130 \ud558\ub098\ub85c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c Enforcement (\uc26c\uc6c0) (\ubc94\uc704 \uad00\ub828) \ud3ec\uc778\ud130 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc0b0\uc220 \uc5f0\uc0b0\uc5d0 \ub300\ud574 \uacbd\uace0\ud55c\ub2e4 F.23: \"null\"\uc774 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 not_null<T> \ub97c \uc0ac\uc6a9\ud574 \ud45c\uc2dc\ud558\ub77c Reason \uba85\ud655\uc131. \ud568\uc218 \ud638\ucd9c\uc790\uac00 nullptr \uac80\uc0ac\ub97c \ud574\uc57c \ud558\ub294\uc9c0\ub97c \uba85\ud655\ud788 \ud55c\ub2e4. \uac19\uc740 \ub9e5\ub77d\uc73c\ub85c, not_null<T> \uc744 \ubc18\ud658\ud55c\ub2e4\uba74 \ud568\uc218 \ud638\ucd9c\uc790\ub294 \ubc18\ud658 \uac12\uc774 nullptr \uc778\uc9c0 \uac80\uc0ac\ud574\uc57c \ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. Example not_null<T*> \uc740 \ucf54\ub4dc\ub97c \uc77d\ub294 \ub300\uc0c1(\uae30\uacc4\uc640 \uc0ac\ub78c \ubaa8\ub450)\uc774 nullptr \ub97c \uac80\uc0ac\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \ubd84\uba85\ud788\ud55c\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c, \ub514\ubc84\uae45\ud560 \ub54c, owner<T*> \uc640 not_null<T> \uc5d0\uc11c \uc815\ud655\uc131\uc744 \uac80\uc0ac\ud558\ub294\ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. \ub2e4\uc74c\uc758 \uc0ac\ub840\ub97c \uace0\ub824\ud574 \ubcf4\uc790: int length ( Record * p ); length(p) \uc744 \ud638\ucd9c\ud558\uae30 \uc804\uc5d0 p \uac00 nullptr \uc778\uc9c0 \uac80\uc0ac\ud574\uc57c \ud558\ub294\uac00? length() \uc758 \uad6c\ud604\uc5d0\uc11c p \uac00 nullptr \uc778\uc9c0 \uac80\uc0ac\ud574\uc57c \ud558\ub294\uac00? // it is the caller's job to make sure p != nullptr int length ( not_null < Record *> p ); // the implementor of length() must assume that p == nullptr is possible int length ( Record * p ); Note not_null<T*> \ub294 nullptr \uac00 \uc544\ub2c8\ub77c\uace0 \uc804\uc81c\ud55c\ub2e4; T* \ub294 nullptr \uc77c \uc218 \uc788\ub2e4; \ub458 \ubaa8\ub450 T* \ub85c \ud45c\ud604\ub418\ubbc0\ub85c \uc2e4\ud589\uc2dc\uac04 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. Note not_null \ub294 \ub0b4\uc7a5 \ud3ec\uc778\ud130 \ud0c0\uc785 \ubfd0\ub9cc \uc544\ub2c8\ub77c, unique_ptr , shared_ptr , \ud639\uc740 \ub2e4\ub978 \ud3ec\uc778\ud130\ucc98\ub7fc \ub3d9\uc791\ud558\ub294 \ud0c0\uc785\ub4e4\uc5d0\ub3c4 \ub3d9\uc791\ud55c\ub2e4 Enforcement (\ub2e8\uc21c) \uc6d0\uc2dc \ud3ec\uc778\ud130(raw pointer)\ub97c nullptr \uc778\uc9c0 \uac80\uc0ac\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc6a9\ud558\uba74 \uacbd\uace0\ud55c\ub2e4 not_null \ub97c \uc4f0\ub3c4\ub85d \uc81c\uc548\ud55c\ub2e4 (\ub2e8\uc21c) \ud3ec\uc778\ud130\uac00 \uc5ed\ucc38\uc870 \ub420 \ub54c nullptr \ub97c \uac80\uc0ac\ud560 \ub54c\ub3c4 \uc788\uace0 \uac80\uc0ac\ud558\uc9c0 \uc54a\uc744 \ub54c\ub3c4 \uc788\ub2e4\uba74 \uc624\ub958\ub85c \ucc98\ub9ac\ud55c\ub2e4 (\ub2e8\uc21c) not_null \uc774 nullptr \uc778\uc9c0 \uac80\uc0ac\ud558\ub294 \uacbd\uc6b0 \uacbd\uace0\ud55c\ub2e4 F.24: \ubc94\uc704\ub97c \uc9c0\uc815\ud560 \ub54c\ub294 span<T> \ud639\uc740 span_p<T> \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uba85\uc2dc\uc801\uc774\uc9c0 \uc54a\uc740 \ubc94\uc704\ub294 \uc624\ub958\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. Example X * find ( span < X > r , const X & v ); // find v in r vector < X > vec ; // ... auto p = find ({ vec . begin (), vec . end ()}, X {}); // find X{} in vec Note C++ \ucf54\ub4dc\uc5d0\uc11c \ubc94\uc704\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\ub294 \ubb34\ucc99 \ud754\ud558\ub2e4. \ubcf4\ud1b5 \uadf8\ub7f0 \ubc94\uc704\ub4e4\uc740 \uc554\ubb35\uc801\uc774\uace0 \uc815\ud655\ud55c \uc0ac\uc6a9\uc744 \ud655\uc2e0\ud558\uae30 \ub9e4\uc6b0 \uc5b4\ub835\ub2e4. \ud2b9\ud788, \ubc30\uc5f4 [p:p+n) \ub97c \ub300\uc0c1\uc73c\ub85c\ud55c (p, n) \uc804\ub2ec\uc778\uc790\uac00 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \uc2e4\uc81c\ub85c *p \ub4a4\uc5d0 n \uac1c\uc758 \uc6d0\uc18c\uac00 \uc2e4\uc7ac\ud558\ub294\uc9c0 \uc544\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. span<T> \uc640 span_p<T> \ub294 [p:q) \ub97c \ub300\uc0c1\uc73c\ub85c \uc55e\uc11c \uc5b8\uae09\ud55c \uba85\uc81c\uac00 \uc0ac\uc2e4\uc784\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \ub2e8\uc21c\ud55c \ubcf4\uc870(helper) \ud074\ub798\uc2a4\uc774\ub2e4. Example span \uc740 \uc6d0\uc18c\ub4e4\uc758 \ubc94\uc704\ub97c \ud45c\ud604\ud55c\ub2e4. \uadf8\ub7f0\ub370 \uadf8 \ubc94\uc704\uc758 \uc6d0\uc18c\ub4e4\uc744 \uc5b4\ub5bb\uac8c \ubcc0\uacbd\ud560 \uc218 \uc788\uc744\uae4c? void f ( span < int > s ) { // range traversal (guaranteed correct) for ( int x : s ) cout << x << '\\n' ; // C-style traversal (potentially checked) for ( gsl :: index i = 0 ; i < s . size (); ++ i ) cout << s [ i ] << '\\n' ; // random access (potentially checked) s [ 7 ] = 9 ; // extract pointers (potentially checked) std :: sort ( & s [ 0 ], & s [ s . size () / 2 ]); } Note span<T> \uac1c\uccb4\ub294 \uc6d0\uc18c\ub97c \uc18c\uc720\ud558\uc9c0 \uc54a\uba70 \uac12\uc5d0 \uc758\ud55c \uc804\ub2ec\uc774 \uac00\ub2a5\ud560 \uc815\ub3c4\ub85c \uc791\ub2e4. span \uc744 \uc778\uc790\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc740 \ud3ec\uc778\ud130\uc640 \uae38\uc774\ub97c \ud568\uaed8 \uc804\ub2ec\ud558\ub294 \uac83\ubcf4\ub2e4 \ud6a8\uc728\uc801\uc774\ub2e4. See also Support library Enforcement (\ubcf5\uc7a1\ud568) \ud3ec\uc778\ud130\uc640 \uc815\uc218\ub97c \uc0ac\uc6a9\ud574 \ubc94\uc704\uac00 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ub418\uba74 \uacbd\uace0\ud558\uace0 span \uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud55c\ub2e4. F.25: C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc5d0\ub294 zstring \ud639\uc740 not_null<zstring> \uc744 \uc0ac\uc6a9\ud558\ub77c Reason C\uc5b8\uc5b4 \ud615\uc2dd\uc758 \ubb38\uc790\uc5f4\uc740 \uad11\ubc94\uc704\ud558\uac8c \uc0ac\uc6a9\ub418\uace0 \uc788\ub2e4. \uad00\ub840\uc801\uc73c\ub85c, \uc774\ub4e4\uc740 \\0 \uc73c\ub85c \ub05d\ub098\ub294 char \ubc30\uc5f4\uc774\ub77c\uace0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. C \ubb38\uc790\uc5f4\uc740 char 1\uac1c\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc640 \uad6c\ubd84\ub418\uc5b4\uc57c \ud55c\ub2e4. Example Consider: int length ( const char * p ); length(s) \ub97c \ud638\ucd9c \ud560 \ub54c s==nullptr \uc744 \uac80\uc0ac\ud574\uc57c \ud558\ub294\uac00? length() \ubcf8\ubb38 \uc548\uc5d0\uc11c p \uac00 nullptr \uc778\uc9c0 \uac80\uc0ac\ud574\uc57c \ud558\ub294\uac00? // the implementor of length() must assume that p == nullptr is possible int length ( zstring p ); // it is the caller's job to make sure p != nullptr int length ( not_null < zstring > p ); Note zstring \uc740 \uc18c\uc720\uad8c\uc744 \ud45c\ud604\ud558\uc9c0 \uc54a\ub294\ub2e4. See also Support library F.26: \ud3ec\uc778\ud130\uac00 \ud544\uc694\ud55c \uacf3\uc5d0 \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud560 \ub54c\ub294 unique_ptr<T> \ub97c \uc0ac\uc6a9\ud558\ub77c Reason unique_ptr \ub294 \ud3ec\uc778\ud130\ub97c \uc548\uc804\ud558\uace0 \ubd80\ub2f4\uc5c6\uc774(cheap) \uc804\ub2ec\ud558\ub294 \uac00\uc7a5 \uac04\ub2e8\ud55c \ubc29\ubc95\uc774\ub2e4. See also C.50 \ub294 \ud329\ud1a0\ub9ac \ud568\uc218\uc5d0\uc11c shared_ptr \ub97c \ubc18\ud658\ud558\ub294 \uacbd\uc6b0\ub97c \ub2e4\ub8ec\ub2e4 Example unique_ptr < Shape > get_shape ( istream & is ) // assemble shape from input stream { auto kind = read_header ( is ); // read header and identify the next shape on input switch ( kind ) { case kCircle : return make_unique < Circle > ( is ); case kTriangle : return make_unique < Triangle > ( is ); // ... } } Note \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uc5d0 \uc788\ub294 \uac1c\uccb4\ub77c\uba74 \uac1c\uccb4 \uadf8 \uc790\uccb4\ubcf4\ub2e4\ub294 \uc778\ud130\ud398\uc774\uc2a4(\uc0c1\uc704 \ud074\ub798\uc2a4)\uc758 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud574\uc57c \ud55c\ub2e4. Enforcement (\ub2e8\uc21c) \ud568\uc218\uac00 \uc720\ud6a8\ubc94\uc704 \ub0b4\uc5d0\uc11c \ud560\ub2f9\ud55c \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud55c\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. unique_ptr \ud639\uc740 shared_ptr \ub97c \uc4f0\ub3c4\ub85d \uc81c\uc548\ud558\ub77c F.27: \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud560 \ub54c\ub294 shared_ptr<T> \ub97c \uc0ac\uc6a9\ud558\ub77c Reason std::shared_ptr \ub85c \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud558\ub294 \uac83\uc740 \ud45c\uc900\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc774\ub2e4. \uc774\ub97c \uc0ac\uc6a9\ud558\uba74, \ub9c8\uc9c0\ub9c9 \uc18c\uc720\uc790\uac00 \uac1c\uccb4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4. Example shared_ptr < const Image > im { read_image ( somewhere ) }; std :: thread t0 { shade , args0 , top_left , im }; std :: thread t1 { shade , args1 , top_right , im }; std :: thread t2 { shade , args2 , bottom_left , im }; std :: thread t3 { shade , args3 , bottom_right , im }; // detach threads // last thread to finish deletes the image Note \uc18c\uc720\uc790\uac00 \ud558\ub098 \ubfd0\uc774\ub77c\uba74 shared_ptr \ubcf4\ub2e4\ub294 unique_ptr \uc744 \uc0ac\uc6a9\ud558\ub77c. shared_ptr \ub294 \uc18c\uc720\uad8c\uc758 \uacf5\uc720\ub97c \uc704\ud55c \uac83\uc774\ub2e4. shared_ptr \uac00 \uacf3\uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74 \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c(\ucc38\uc870 \uce74\uc6b4\ud2b8\uc5d0 \ub300\ud55c \uc6d0\uc790\uc801 \uc5f0\uc0b0 \ube44\uc6a9\uc758 \ucd1d\ud569). Alternative \ud2b9\uc815 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ub418\ub294 \uac1c\uccb4 \ud558\ub098\uac00 \uacf5\uc720 \uac1c\uccb4\ub97c \uc18c\uc720\ud558\ub3c4\ub85d \ud558\ub77c. \ubaa8\ub4e0 \uc0ac\uc6a9\uc790\uac00 \uc0ac\ub77c\uc84c\uc744\ub54c(completed) \uacf5\uc720 \uac1c\uccb4\ub97c \ud30c\uad34\ud558\ub3c4\ub85d \ud55c\ub2e4. Enforcement (\uc2e4\ud589 \ubd88\uac00) \uc81c\ub300\ub85c \ud0d0\uc9c0\ud558\uae30\uc5d4 \ub108\ubb34 \ubcf5\uc7a1\ud55c \ud328\ud134\uc744 \ub744\uace0 \uc788\ub2e4. F.60: \"\uc778\uc790\uac00 \uc5c6\uc744 \uacbd\uc6b0\"\ub97c \ud5c8\uc6a9\ud55c\ub2e4\uba74 T& \ubcf4\ub2e4\ub294 T* \ub97c \uc120\ud638\ud558\ub77c Reason \ud3ec\uc778\ud130( T* )\ub294 nullptr \uc77c \uc218 \uc788\uc9c0\ub9cc, \ucc38\uc870( T& )\ub294 \uadf8\ub807\uc9c0 \uc54a\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 \"\uac1c\uccb4 \uc5c6\uc74c\"\uc744 \ud45c\uc2dc\ud558\uae30 \uc704\ud574 nullptr \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74, \ucc38\uc870\uac00 \ub354 \uac04\ub2e8\ud558\uace0 \uc88b\uc740 \ucf54\ub4dc\ub85c \uc774\uc5b4\uc9c8 \uac83\uc774\ub2e4. Example string zstring_to_string ( zstring p ) // zstring is a char * ; that is a C - style string { if ( ! p ) return string {}; // p might be nullptr; remember to check return string { p }; } void print ( const vector < int >& r ) { // r refers to a vector<int>; no check needed } Note \uac00\ub2a5\ud558\uae30\ub294 \ud558\uc9c0\ub9cc, C++\uc5d0\uc11c nullptr \uc778 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc740 \uc815\uc0c1\uc801(valid)\uc774\uc9c0 \uc54a\ub2e4(\uc608\ub97c \ub4e4\uc5b4, T* p = nullptr; T& r = (T&)*p; ). \uadf8\ub7f0 \uc624\ub958\ub294 \uad49\uc7a5\ud788 \ub4dc\ubb3c\ub2e4(very uncommon). Note \ud3ec\uc778\ud130 \ud45c\uae30\ubc95\uc744 \uc120\ud638\ud55c\ub2e4\uba74 ( . \ubcf4\ub2e4\ub294 -> \ud639\uc740 * \uac00 \uc88b\ub2e4\uba74), not_null<T*> \uc774 T& \ucc98\ub7fc \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. Enforcement ??? F.42: \uc704\uce58\ub97c \ub098\ud0c0\ub0b4\ub294 \uacbd\uc6b0\uc5d0\ub9cc T* \ub97c \ubc18\ud658\ud558\ub77c Reason \ud3ec\uc778\ud130\ub294 \uc774\ub97c \ud45c\ud604\ud558\uae30\uc5d0 \uc801\uc808\ud558\ub2e4. \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\uae30 \uc704\ud574 T* \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc798\ubabb\ub41c \ubc29\ubc95\uc774\ub2e4. Example Node * find ( Node * t , const string & s ) // find s in a binary tree of Nodes { if ( ! t || t -> name == s ) return t ; if (( auto p = find ( t -> left , s ))) return p ; if (( auto p = find ( t -> right , s ))) return p ; return nullptr ; } nullptr \uac00 \uc544\ub2c8\ub77c\uba74 find \uac00 \ubc18\ud658\ud558\ub294 \ud3ec\uc778\ud130\ub294 s \ub97c \uac00\uc9c0\ub294 node \ub97c \uc758\ubbf8\ud55c\ub2e4. \uc911\uc694\ud55c\uc810\uc740 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\ub85c\ub294 \uc18c\uc720\uad8c\uc774 \ud638\ucd9c\uc790\uae4c\uc9c0 \uc804\ub2ec\ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774\ub2e4. Note \uc704\uce58\ub294 \ubc18\ubcf5\uc790, \uc0c9\uc778(indices), \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574 \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4. \uc885\uc885 \ucc38\uc870\uac00 \ud3ec\uc778\ud130\ubcf4\ub2e4 \uc6b0\uc6d4\ud55c \ubc29\ubc95\uc774 \ub418\uae30\ub3c4 \ud55c\ub2e4. nullptr \ub97c \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub294 \uacbd\uc6b0 \ud639\uc740 \uac1c\uccb4\uac00 \ubcc0\uacbd\ub418\uc5b4\uc120 \uc548\ub418\ub294 \uacbd\uc6b0 . Note Do not return a pointer to something that is not in the caller's scope; see F.43 . See also \ud5c8\uc0c1 \ud3ec\uc778\ud130 \uc608\ubc29\uc5d0 \ub300\ud55c \ud1a0\uc758 (\ub9c1\ud06c \uc5c6\uc74c) Enforcement \ub2e8\uc21c\ud55c(plain) T* \uc5d0 delete , free() \ub4f1\uc774 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4. \uc18c\uc720\uad8c\uc774 \uc788\uc744\ub54c\ub9cc delete\ub418\uc5b4\uc57c \ud55c\ub2e4. \ub2e8\uc21c\ud55c(plain) T* \uc5d0 new , malloc() \ub4f1\uc774 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4. \uc18c\uc720\uad8c\uc774 \uc788\uc744\ub54c\ub9cc delete\uc758 \ucc45\uc784\uc774 \ubc1c\uc0dd\ud55c\ub2e4. F.43: \uc808\ub300\ub85c (\uc9c1\uc811\uc801\uc774\ub4e0 \uac04\uc811\uc801\uc774\ub4e0) \uc9c0\uc5ed \uac1c\uccb4\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c Reason \ud5c8\uc0c1 \ud3ec\uc778\ud130(dangling pointer)\ub85c \uc778\ud55c \ud06c\ub798\uc2dc\uc640 \ub370\uc774\ud130 \uc190\uc0c1(corruption)\uc744 \ubc29\uc9c0\ud55c\ub2e4. Example, bad \ud568\uc218\uac00 \ubc18\ud658\ud558\uba74 \uc9c0\uc5ed \uac1c\uccb4\ub4e4\uc740 \ub354\uc774\uc0c1 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4: int * f () { int fx = 9 ; return & fx ; // BAD } void g ( int * p ) // looks innocent enough { int gx ; cout << \"*p == \" << * p << '\\n' ; * p = 999 ; cout << \"gx == \" << gx << '\\n' ; } void h () { int * p = f (); int z = * p ; // read from abandoned stack frame (bad) g ( p ); // pass pointer to abandoned stack frame to function (bad) } \uc704\uc640 \uac19\uc740 \ucf54\ub4dc\uc5d0\uc11c \uc544\ub798\uc640 \uac19\uc740 \ucd9c\ub825\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4: *p == 999 gx == 999 \uc774\ub294 g() \uc5d0\uc11c f() \uc5d0\uc11c \uc0ac\uc6a9\ud55c \uc2a4\ud0dd \uc601\uc5ed\uc744 \uc7ac\uc0ac\uc6a9\ud588\uae30 \ub54c\ubb38\uc778 \uac83\uc73c\ub85c \uc0dd\uac01\ub41c\ub2e4. *p \uc5d0\uc11c gx \uac00 \uc810\uc720\ud55c \uba54\ubaa8\ub9ac \uc601\uc5ed\uc744 \ucc38\uc870\ud55c \uac83\uc774\ub2e4. fx \uc640 gx \uac00 \ub2e4\ub978 \ud0c0\uc785\uc778 \uacbd\uc6b0\ub97c \uc0c1\uc0c1\ud574\ubcf4\ub77c fx \uc640 gx \uc5d0 \ubd88\ubcc0\uc870\uac74\uc774 \uc788\ub294 \uacbd\uc6b0\ub97c \uc0c1\uc0c1\ud574\ubcf4\ub77c \uc800\ub7f0 \ud5c8\uc0c1 \ud3ec\uc778\ud130\uac00 \ub354 \ub9ce\uc740 \ud568\uc218\ub4e4\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc5c8\uc744 \uacbd\uc6b0\ub97c \uc0c1\uc0c1\ud574\ubcf4\ub77c \uc545\uc758\uc801\uc778 \uc0ac\uc6a9\uc790(cracker)\uac00 \ud5c8\uc0c1 \ud3ec\uc778\ud130\ub85c \ubb34\uc5c7\uc744 \ud560 \uc218 \uc788\uc744\uc9c0 \uc0c1\uc0c1\ud574\ubcf4\ub77c \ub2e4\ud589\uc2a4\ub7fd\uac8c\ub3c4 \ub300\ubd80\ubd84 (\ubaa8\ub4e0?) \ucd5c\uc2e0(modern) \ucef4\ud30c\uc77c\ub7ec\ub4e4\uc740 \uc774\ub7f0 \ub2e8\uc21c\ud55c \uc624\ub958\ub97c \uc7a1\uc544\ub0b4\uace0 \uacbd\uace0\ud560 \uc218 \uc788\ub2e4. Note \uc774 \uaddc\uce59\uc740 \ucc38\uc870\uc5d0\ub3c4 \ud574\ub2f9\ud55c\ub2e4: int & f () { int x = 7 ; // ... return x ; // Bad: returns reference to object that is about to be destroyed } Note static \uc774 \uc544\ub2cc \uc9c0\uc5ed \ubcc0\uc218\uc5d0\ub9cc \uc801\uc6a9\ub41c\ub2e4. \ubaa8\ub4e0 static \ubcc0\uc218\ub294 (\uc774\ub984\uc5d0\uc11c \ub4dc\ub7ec\ub098\ub4ef\uc774) \uc815\uc801\uc73c\ub85c \ud560\ub2f9\ub418\ubbc0\ub85c, \uadf8 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\ub294 \ud5c8\uc0c1 \ud3ec\uc778\ud130\uac00 \uc544\ub2c8\ub2e4. Example, bad \uc9c0\uc5ed \ubcc0\uc218\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uac00 \uc0c8\uc5b4\ub098\uc624\ub294 \uacbd\uc6b0\uac00 \uc608\uc2dc\ucc98\ub7fc \ubd84\uba85\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4: int * glob ; // global variables are bad in so many ways template < class T > void steal ( T x ) { glob = x (); // BAD } void f () { int i = 99 ; steal ([ & ] { return & i ; }); } int main () { f (); cout << * glob << '\\n' ; } \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 f \uc758 \ud638\ucd9c \uc774\ud6c4 \ubc84\ub824\uc9c4 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc5d0\uc11c \uac12\uc744 \uc77d\uc5b4\uc628\ub2e4. glob \uc5d0 \uc800\uc7a5\ub41c \ud3ec\uc778\ud130\ub294 \uc608\uc0c1\uce58 \ubabb\ud55c \ubc29\ubc95\uc73c\ub85c \uba40\ub9ac(later) \uc788\ub294 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74\uc11c \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. Note \uc9c0\uc5ed\ubcc0\uc218\uc758 \uc8fc\uc18c\ub294 return \uad6c\ubb38\uc774\ub098 T& \ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub97c \ud1b5\ud574\uc11c \ubc18\ud658\ub418\uac70\ub098, \ubc18\ud658 \uac1c\uccb4\uc758 \uba64\ubc84, \ubc30\uc5f4\uacfc \uac19\uc740 \ud615\ud0dc\ub85c \uc0c8\uc5b4\ub098\uc62c \uc218 \uc788\ub2e4. Note \uc720\uc0ac\ud558\uac8c \uc548\ucabd \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \ubc14\uae65 \uc720\ud6a8\ubc94\uc704\ub85c \uc0c8\uc5b4\ub098\uc624\ub294 \ud3ec\uc778\ud130\uc758 \uc608\uc2dc\ub4e4\uc744 \ub354 \uc791\uc131\ud560 \uc218\ub3c4 \uc788\ub2e4; \uadf8\ub7f0 \uacbd\uc6b0\ub4e4\uc740 \ud568\uc218\ub85c\ubd80\ud130 \uc0c8\uc5b4\ub098\uc628 \ud3ec\uc778\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \uadf8\ub300\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc774 \ubb38\uc81c\uc758 \ud30c\uc0dd\uc73c\ub85c\ub294 \ucee8\ud14c\uc774\ub108 \uc548\uc5d0 \ud3ec\uc778\ud130\ub97c \ubcf4\uad00\ud558\uba74\uc11c \uac1c\uccb4\ubcf4\ub2e4 \ud3ec\uc778\ud130\uac00 \ub354 \uc624\ub798 \uc0ac\uc6a9\ub418\ub294(outlives) \uacbd\uc6b0\uac00 \uc788\ub2e4. See also \ud5c8\uc0c1 \ud3ec\uc778\ud130\uc5d0 \ub300\ud55c \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294 \ud3ec\uc778\ud130 \ubb34\ud6a8\ud654(\ub9c1\ud06c \uc5c6\uc74c) \ub97c \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. \uc774 \uc5ed\uc2dc \ube44\uc2b7\ud55c \ubc29\ubc95\uc73c\ub85c \ud0d0\uc9c0\ub418\uace0 \uc608\ubc29\ud560 \uc218 \uc788\ub2e4. Enforcement \ucef4\ud30c\uc77c\ub7ec\uac00 \uc9c0\uc5ed\ubcc0\uc218\ub4e4\uc5d0 \ub300\ud55c \ucc38\uc870 \ud639\uc740 \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc744 \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4 \uc815\uc801 \ubd84\uc11d\uc5d0\uc11c \ub9ce\uc740 \uc77c\ubc18\uc801\uc778 \ud328\ud134\uc744 \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4 (\uadf8\ub7ec\ubbc0\ub85c \ud5c8\uc0c1 \ud3ec\uc778\ud130\ub97c \uc81c\uac70\ud560 \uc218 \uc788\ub2e4) F.44: \ubcf5\uc0ac\ub97c \uad8c\uc7a5\ud558\uc9c0 \uc54a\uac70\ub098 \"\uac1c\uccb4\ub97c \ud56d\uc0c1 \ubc18\ud658\"\ud55c\ub2e4\uba74 T& \ub97c \ubc18\ud658\ud558\ub77c Reason \uc5b8\uc5b4\uac00 T& \ub294 \uac1d\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\uae30 \ub54c\ubb38\uc5d0 nullptr \uc778\uc9c0 \uc2dc\ud5d8\ud558\ub294 \uac83\uc740 \ud544\uc694\uc5c6\ub2e4. See also \ucc38\uc870\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc740 \uc18c\uc720\uad8c \uc774\uc804\uc73c\ub85c \uc0ac\uc6a9\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4: \ud5c8\uc0c1 \ud3ec\uc778\ud130 \uc608\ubc29\uc5d0 \ub300\ud55c \ud1a0\uc758(discussion) and \uc18c\uc720\uad8c\uc5d0 \ub300\ud55c \ud1a0\uc758(discussion) . Example class Car { array < wheel , 4 > w ; // ... public : wheel & get_wheel ( int i ) { Expects ( i < w . size ()); return w [ i ]; } // ... }; void use () { Car c ; wheel & w0 = c . get_wheel ( 0 ); // w0 has the same lifetime as c } Enforcement \ubc18\ud658\uc774 \uc5c6\ub294 \uacbd\uc6b0 nullptr \uac00 \ub420 \uc218 \uc788\ub294 \ud568\uc218\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4 F.45: T&& \ub97c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c Reason \uc774\uac83\uc740 \uc18c\uba78\ub41c \uc784\uc2dc \uac1c\uccb4\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc774\ub2e4. && \ub294 \uc784\uc2dc \uac1c\uccb4\ub97c \ubd99\uc7a1\uae30 \uc704\ud55c \uac83\uc774\ub2e4. Example r-value \ucc38\uc870\ub294 \ubc18\ud658\ud55c \ud45c\ud604\uc2dd\uc774 \ub05d\ub098\uba74 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \uc0ac\ub77c\uc9c4\ub2e4: auto && x = max ( 0 , 1 ); // OK, so far foo ( x ); // Undefined behavior \uc774\ub7f0 \uc885\ub958\uc758 \uc0ac\uc6a9\uc740 \ubc84\uadf8\uc758 \uc6d0\uc778\uc774\ub418\uace0, \ucef4\ud30c\uc77c\ub7ec \ubc84\uadf8\ub77c\uace0 \uc798\ubabb \ubcf4\uace0\ub41c\ub2e4. \ud568\uc218\ub97c \uad6c\ud604\ud560\ub54c \uc0ac\uc6a9\uc790\uac00 \uc774\ub7f0 \ud568\uc815\uc5d0 \ube60\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \uc218\uba85\uc8fc\uae30 \uc548\uc804\uc131 \ubd84\uc11d(profile) \uc5d0\uc11c \uc774\ub7f0 \ubb38\uc81c\ub97c \uc7a1\uc544\ub0bc \uac83\uc774\ub2e4(\uc644\uc804\ud788 \uad6c\ud604\ub41c\ub2e4\uba74). Example r-value \ucc38\uc870\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc740 \ud574\ub2f9 \uc784\uc2dc\ubcc0\uc218\uc5d0 \ub300\ud55c \ucc38\uc870\uac00 \ud53c\ud638\ucd9c\uc790\ub85c \"\ud558\ud5a5\uc2dd \uc804\ub2ec\" \ub418\ub41c\ub2e4\uba74 \ubb38\uc81c\uc5c6\ub2e4; \uadf8\ub7f0 \uacbd\uc6b0, \uadf8 \uc784\uc2dc\ubcc0\uc218\ub294 \ud568\uc218 \ud638\ucd9c\ubcf4\ub2e4 \uc624\ub798 \uc9c0\uc18d\ub420 \uc218 \uc788\ub2e4( F.18 \uc640 F.19 \ub97c \ud568\uaed8 \ubcf4\ub77c). \ud558\uc9c0\ub9cc, \ud638\ucd9c\uc790\ub85c \ucc38\uc870\uac00 \"\uc0c1\ud5a5\uc2dd \uc804\ub2ec\"\ub41c\ub2e4\uba74 \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\ub2e4. (\ubcf4\ud1b5\uc758 \ucc38\uc870 \ud639\uc740 perfect forwarding\uc744 \ud1b5\ud574\uc11c) \ud568\uc218 \uc778\uc790\ub97c \uc5f0\uc18d \uc804\ub2ec(passthrough)\ud558\uace0\uc790 \ud55c\ub2e4\uba74, ( auto&& \uac00 \uc544\ub2c8\ub77c) auto \ub97c \uc0ac\uc6a9\ud558\ub77c F \uac00 \uac12\uc73c\ub85c \ubc18\ud658\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uba74: template < class F > auto && wrapper ( F f ) { log_call ( typeid ( f )); // or whatever instrumentation return f (); // BAD: \uc784\uc2dc\ubcc0\uc218\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \ubc18\ud658\ud55c\ub2e4 } \uc774\ub7f0 \ucf54\ub4dc\uac00 \ub354 \ub0ab\ub2e4: template < class F > auto wrapper ( F f ) { log_call ( typeid ( f )); // or whatever instrumentation return f (); // OK } Exception std::move \uc640 std::forward \ub294 && \ub97c \ubc18\ud658\ud558\uc9c0\ub9cc \uc774\ub294 \ud615\ubcc0\ud658\uc77c \ubfd0\uc774\ub2e4 -- \ud45c\ud604\uc2dd \ubb38\ub9e5\ub0b4\uc5d0\uc11c \uc784\uc2dc \uac1c\uccb4\uac00 \ud30c\uad34\ub418\uae30 \uc804\uc5d0 \uac19\uc740 \ud45c\ud604\uc2dd \ub0b4\uc5d0\uc11c \uc784\uc2dc \uac1c\uccb4\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \uc804\ub2ec\ud55c\ub2e4. \uc6b0\ub9ac\ub294 && \ub97c \ubc18\ud658\ud558\ub294 \uac83\uc758 \ub2e4\ub978 \uc88b\uc740 \ud615\ud0dc\ub97c \uc54c\uc9c0 \ubabb\ud55c\ub2e4. Enforcement std::move \uc640 std::forward \ub97c \uc81c\uc678\ud558\uace0 && \ub97c \ubc18\ud658\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 F.46: main() \ub294 int \ub97c \ubc18\ud658\ud574\uc57c \ud55c\ub2e4 Reason \uc5b8\uc5b4 \uaddc\uce59\uc73c\ub85c \uc815\ud574\uc838 \uc788\uc9c0\ub9cc. \"\uc5b8\uc5b4 \ud655\uc7a5\"\uc5d0 \uc758\ud574\uc11c \ub108\ubb34 \uc790\uc8fc \uc704\ubc18\ub41c\ub2e4. main (\ud574\ub2f9 \ud504\ub85c\uadf8\ub7a8\uc758 main \ud568\uc218)\uc5d0\uc11c void \ub97c \ubc18\ud658\ud558\ub3c4\ub85d \uc120\uc5b8\ud558\ub294 \uac83\uc740 \uc774\uc2dd\uc131\uc744 \uc81c\ud55c\ud55c\ub2e4. Example void main () { /* ... */ }; // bad, not C++ int main () { std :: cout << \"This is the way to do it \\n \" ; } Note \ucee4\ubba4\ub2c8\ud2f0\uc5d0 \uc774 \ubb38\uc81c\uac00 \ub0a8\uc544\uc788\uae30 \ub54c\ubb38\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c \uba85\uc2dc\ud55c\ub2e4. Enforcement \ucef4\ud30c\uc77c\ub7ec\uc5d0\uc11c \uae08\uc9c0\ud55c\ub2e4 \ucef4\ud30c\uc77c\ub7ec\uac00 \uae08\uc9c0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \ubd84\uc11d \ub3c4\uad6c\uc5d0\uc11c \uc774\ub97c \uc9c0\uc801\ud55c\ub2e4 F.47: \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 T& \ub97c \ubc18\ud658\ud558\ub77c Reason \uac12 \ud0c0\uc785\uc758 \uc5f0\uc0b0\uc790 \uc911\ubcf5\uc815\uc758\ub294 \uc804\ud1b5\uc801\uc73c\ub85c \ub300\uc785\uc5d0 operator=(const T&) \ub97c \uc0ac\uc6a9\ud558\uace0 *this \ub97c ( const \uac00 \uc544\ub2cc \ud615\ud0dc\ub85c) \ubc18\ud658\ud558\ub294 \uac83\uc774\ub2e4. \uc774\ub807\uac8c \ud558\ub294 \uac83\uc774 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud0c0\uc785\ub4e4\uacfc \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud558\uace0 \"int\ucc98\ub7fc \ub3d9\uc791\ud558\ub294\" \uc6d0\uce59\uc744 \ub530\ub974\ub294 \uac83\uc774\ub2e4. Note \uacfc\uac70\uc5d0\ub294 \ub300\uc785 \uc5f0\uc0b0\uc5d0\uc11c const T& \ub97c \ubc18\ud658\ud558\ub3c4\ub85d \ud558\ub294 \uac00\uc774\ub4dc\uac00 \uc788\uc5c8\ub2e4. \uc774\ub294 (a = b) = c \uac19\uc740 \ud615\ud0dc\uc758 \ucf54\ub4dc\ub97c \uc608\ubc29\ud558\uae30 \uc704\ud55c \ubaa9\uc801\uc774\uc5c8\ub2e4 -- \uc774\ub7f0 \ucf54\ub4dc\ub294 \ud45c\uc900 \ud0c0\uc785\ub4e4\uacfc\uc758 \uc77c\uad00\uc131\uc744 \ud574\uce60 \uc815\ub3c4\ub85c \ube48\ubc88\ud558\uc9c0\ub294 \uc54a\ub2e4. Example class Foo { public : ... Foo & operator = ( const Foo & rhs ) { // Copy members. ... return * this ; } }; Enforcement \uc774 \uaddc\uce59\uc740 \ubc18\ud658 \ud0c0\uc785(\uacfc \ubc18\ud658 \uac12)\uc744 \uac80\uc0ac\ud558\ub294 \ub3c4\uad6c\uc5d0 \uc758\ud574\uc11c \ubaa8\ub4e0 \ub300\uc785 \uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574 \uc801\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. F.48: return std::move(local) \uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Reason Guaranteed copy elision\uc774 \uc801\uc6a9\ub418\uba74 std::move \ub97c \ubc18\ud658 \uad6c\ubb38\uc5d0 \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. Example; bad S f () { S result ; return std :: move ( result ); } Example; good S f () { S result ; return result ; } Enforcement \ubc18\ud658 \uad6c\ubb38\uc744 \uac80\uc0ac\ud558\ub294 \ub3c4\uad6c\uc5d0 \uc758\ud574\uc11c \uac80\uc0ac\ub418\uc5b4\uc57c \ud55c\ub2e4. F.50: \ud568\uc218\ub97c \uc4f8 \uc218 \uc5c6\uc744 \ub54c\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c(\uc9c0\uc5ed \ubcc0\uc218\ub97c \ucea1\uccd0\ud558\uac70\ub098 \uc9c0\uc5ed \ud568\uc218\ub97c \uc791\uc131\ud560 \ub54c) Reason \ud568\uc218\ub294 \uc9c0\uc5ed\ubcc0\uc218\ub97c \ucea1\uccd0\ud560 \uc218 \uc5c6\uace0, \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704\ub85c \uc120\uc5b8\ub420 \uc218\ub3c4 \uc5c6\ub2e4; \uc774\ub7f0 \uae30\ub2a5\uc774 \ud544\uc694\ud558\ub2e4\uba74 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \uc9c1\uc811 \uc791\uc131\ud55c \ud568\uc218 \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4 (\uac00\ub2a5\ud55c \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c). \ud558\uc9c0\ub9cc, \ub78c\ub2e4\uc640 \ud568\uc218\uac1c\uccb4\ub294 \uc624\ubc84\ub85c\ub4dc\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4; \uc624\ubc84\ub85c\ub4dc\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c. \ub450 \ubc29\ubc95 \ubaa8\ub450 \uac00\ub2a5\ud558\ub2e4\uba74 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c; \ub2e8\uc21c\ud55c \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c. Example // writing a function that should only take an int or a string // -- overloading is natural void f ( int ); void f ( const string & ); // writing a function object that needs to capture local state and appear // at statement or expression scope -- a lambda is natural vector < work > v = lots_of_work (); for ( int tasknum = 0 ; tasknum < max ; ++ tasknum ) { pool . run ([ = , & v ]{ /* ... ... process 1 / max - th of v, the tasknum - th chunk ... */ }); } pool . join (); Exception \uc81c\ub124\ub9ad \ub78c\ub2e4\ub294 \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \uad6c\ud604\ud558\ub294 \uac04\uacb0\ud55c \ubc29\ubc95\uc744 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 \ucf54\ub4dc\ub97c \uc870\uae08 \ub354 \uc791\uc131\ud558\uba74 \uc77c\ubc18 \ud568\uc218 \ud15c\ud50c\ub9bf\uacfc \uac19\uc740 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ubbf8\ub798\uc5d0 \ubaa8\ub4e0 \ud568\uc218\ub4e4\uc774 Concept \uc778\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub418\uba74 \uc774 \uae30\ub2a5\uc740 \uc0ac\ub77c\uc9c8\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. Enforcement \uc544\ubb34\uac83\ub3c4 \ucea1\uccd0\ud558\uc9c0 \uc54a\ub294 \ube44-\uc81c\ub124\ub9ad \ub78c\ub2e4\uac00 \uc804\uc5ed \ubc94\uc704\uc5d0 \ub098\ud0c0\ub098\uba74 \uacbd\uace0\ud55c\ub2e4(\uc608\ub97c \ub4e4\uc5b4, auto x = [](int i){ /*...*/; }; \uc640 \uac19\uc740 \ud615\ud0dc). \uc774\ub7f0 \uacbd\uc6b0 \ub78c\ub2e4 \ub300\uc2e0 \ud3c9\ubc94\ud55c \ud568\uc218\ub97c \uc791\uc131\ud558\ub3c4\ub85d \ud55c\ub2e4. F.51: \uc120\ud0dd\ud560 \uc218 \uc788\ub2e4\uba74, \uc911\ubcf5 \uc815\uc758\ubcf4\ub2e4\ub294 \uae30\ubcf8 \uc804\ub2ec\uc778\uc790\ub97c \uc120\ud638\ud558\ub77c Reason \uae30\ubcf8 \uc778\uc790\ub85c \ud558\ub098\uc758 \uad6c\ud604\uc5d0 \ub2e4\ub978 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 \uc911\ubcf5 \uc815\uc758\uac00 \uac19\uc740 \uc758\ubbf8\uad6c\uc870\ub97c \uad6c\ud604\ud55c\ub2e4\uace0 \ubcf4\uc7a5\ud560 \uc218 \uc5c6\ub2e4. \uae30\ubcf8\uc778\uc790\ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \ucf54\ub4dc \uc911\ubcf5\uc744 \ud53c\ud560 \uc218 \uc788\ub2e4. Note \uc804\ub2ec\uc778\uc790\uac00 \uac19\uc740 \ud0c0\uc785\uc77c \ub54c\ub294 \uae30\ubcf8\uc778\uc790\uc640 \uc911\ubcf5\uc815\uc758 \uc911\uc5d0\uc11c \uc120\ud0dd\ud574\uc57c \ud560 \ub54c\uac00 \uc788\ub2e4: void print ( const string & s , format f = {}); \uadf8 \ubc18\ub300\ub85c\ub294 void print ( const string & s ); // use default format void print ( const string & s , format f ); \uc758\ubbf8\uad6c\uc870\uc801\uc73c\ub85c\ub294 \uac19\uc740 \uc5f0\uc0b0\uc774\uc9c0\ub9cc \uc804\ub2ec\uc778\uc790\uc758 \ud0c0\uc785\uc774 \ub2e4\ub974\ub2e4\uba74 \uc120\ud0dd\uc758 \uc5ec\uc9c0\uac00 \uc5c6\ub2e4. \uc608\ub97c \ub4e4\uc5b4: void print ( const char & ); void print ( int ); void print ( zstring ); See also \uac00\uc0c1 \ud568\uc218\ub4e4\uc758 \uae30\ubcf8 \uc778\uc790 Enforcement ??? F.52: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 \ub78c\ub2e4\uc758 \ucc38\uc870 \ucea1\uccd0\ub97c \uc120\ud638\ud558\ub77c Reason \uc9c0\uc5ed\ubc94\uc704\uc5d0\uc11c \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \ud6a8\uc728\uc131\uacfc \uc815\ud655\uc131\uc744 \uc704\ud574 \ucc38\uc870\ucea1\uccd0(capture by reference)\ub97c \uc120\ud638\ud560 \uac83\uc774\ub2e4. \uc5ec\uae30\uc5d0\ub294 \ud568\uc218\uac00 \ubc18\ud658\ud558\uae30 \uc804\uc5d0 \ubcd1\ub82c \uc54c\uace0\ub9ac\uc998\uc744 \uc791\uc131\ud558\uac70\ub098 \ud638\ucd9c\ud560\ub54c\ub3c4 \ud3ec\ud568\ub41c\ub2e4. Discussion \ud6a8\uc728\uc801\uc778 \uce21\uba74\uc5d0\uc11c\ub294 \ub300\ubd80\ubd84\uc758 \ud0c0\uc785\ub4e4\uc744 \ucc38\uc870\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\ub294 \uac83\ubcf4\ub2e4 \ud6a8\uc728\uc801\uc774\ub2e4. \uc815\ud655\uc131 \uce21\uba74\uc5d0\uc11c\ub294 \uc5f0\uc0b0\ub4e4\uc774 \ud638\ucd9c \uc9c0\uc810\uc5d0\uc11c \uc6d0\ub798 \uac1c\uccb4\uc5d0 \ubd80\uc218\ud6a8\uacfc\ub97c \ub9cc\ub4e4\uae38 \uc6d0\ud55c\ub2e4\ub294 \uac83\uc744 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uba74 \uc774\ub7f0 \ubb38\uc81c\ub97c \uc608\ubc29\ud560 \uc218 \uc788\ub2e4. Note \ubd88\ud589\ud558\uac8c\ub3c4, \ubd80\uc218\ud6a8\uacfc\ub97c \ub9c9\uae30 \uc704\ud574 \ucc38\uc870\ub97c const \ub85c \ubc1b\uc544\uc62c \ubc29\ubc95\uc774 \uc5c6\ub2e4 Example \uc774 \uc608\uc2dc\uc5d0\uc11c\ub294, \ud070 \uac1c\uccb4(\ub124\ud2b8\uc6cc\ud06c \uba54\uc138\uc9c0)\uac00 \ubc18\ubcf5 \uc54c\uace0\ub9ac\uc998\uc5d0 \uc804\ub2ec\ub41c\ub2e4. \uc774 \uac1c\uccb4\uac00 \ubcf5\uc0ac \uac00\ub2a5\ud558\ub354\ub77c\ub3c4 \ubcf5\uc0ac\ud558\ub294 \uac83\uc740 \ud6a8\uc728\uc801\uc774\uc9c0\ub3c4, \uc815\ud655\ud558\uc9c0\ub3c4 \uc54a\ub2e4: std :: for_each ( begin ( sockets ), end ( sockets ), [ & message ]( auto & socket ) { socket . send ( message ); }); Example \uc544\ub798 \uc608\uc81c\ub294 \uac04\ub2e8\ud55c 3\ub2e8\uacc4 \ubcd1\ub82c \ud30c\uc774\ud504\ub77c\uc778\uc774\ub2e4. \uac01 stage \uac1c\uccb4\ub294 process \ud568\uc218\ub97c \ud1b5\ud574 \uc791\uc5c5\uc744 \uc804\ub2ec\ud558\uace0 \uc791\uc5c5 \ud050\uac00 \uc18c\uc9c4\ub420 \ub54c\uae4c\uc9c0 \uc18c\uba78\ub418\uc9c0 \uc54a\ub294 \uc791\uc5c5\uc6a9 \uc2a4\ub808\ub4dc\ub4e4\uc744 \ucea1\uc290\ud654 \ud55c \uac83\uc774\ub2e4. void send_packets ( buffers & bufs ) { stage encryptor ([] ( buffer & b ){ encrypt ( b ); }); stage compressor ([ & ]( buffer & b ){ compress ( b ); encryptor . process ( b ); }); stage decorator ([ & ]( buffer & b ){ decorate ( b ); compressor . process ( b ); }); for ( auto & b : bufs ) { decorator . process ( b ); } } // automatically blocks waiting for pipeline to finish Enforcement \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uac70\ub098 \ucc38\uc870\ub85c \uc804\ub2ec\ub418\ub294\ub370 \ucc38\uc870\ub85c \ucea1\uccd0\ud558\ub294 \ub78c\ub2e4\ub97c \uc9c0\uc801\ud55c\ub2e4. (\uc8fc\uc758: \uc774 \uaddc\uce59\uc740 \ucd94\uc815\uc5d0 \uc758\ud55c \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ub41c\ub2e4\uba74 \ud53c\ud638\ucd9c\uc790\uc5d0 \uc800\uc7a5\ub418\uac70\ub098, \ub9e4\uac1c\ubcc0\uc218\ub85c \uc811\uadfc\ub418\uac70\ub098, \ub78c\ub2e4\uc5d0 \uc758\ud574\uc11c \ubc18\ud658\ub418\ub294 \ub4f1\uc73c\ub85c \uc0ac\uc6a9\ub420 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4. \uc218\uba85\uc8fc\uae30 \uaddc\uce59\ub4e4\uc774 \uc720\ud6a8\ubc94\uc704\ub97c \ubc97\uc5b4\ub098\ub294 \ud3ec\uc778\ud130\ub098 \ub78c\ub2e4\ub97c \ud1b5\ud574 \ucc38\uc870\ub418\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\uae30 \uc704\ud55c \uaddc\uce59\ub4e4\uc744 \uc81c\uacf5\ud55c\ub2e4.) F.53: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \ucc38\uc870 \ucea1\uccd0\ub97c \ud53c\ud558\ub77c Reason \uc9c0\uc5ed\ubc94\uc704\uc5d0 \uc788\ub294 \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub294 \ubc94\uc704\ub97c \ub118\uc5b4\uc11c\uba74 \ub354 \uc774\uc0c1 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \ucc38\uc870\ucea1\uccd0\ub97c \uac00\uc9c4 \ub78c\ub2e4\ub294 \uc9c0\uc5ed \uac1c\uccb4\ub97c \ucc38\uc870\ud558\uace0 \uc788\uc744 \ubfd0\uc774\uba70, \uc9c0\uc5ed\ubc94\uc704\ub97c \ub118\uc5b4\uc11c\uba74 \ub354 \uc774\uc0c1 \ucc38\uc870\ud574\uc11c\ub294 \uc54a\ub41c\ub2e4. Example, bad int local = 42 ; // Want a reference to local. // Note, that after program exits this scope, // local no longer exists, therefore // process() call will have undefined behavior! thread_pool . queue_work ([ & ]{ process ( local ); }); Example, good int local = 42 ; // Want a copy of local. // Since a copy of local is made, it will // always be available for the call. thread_pool . queue_work ([ = ]{ process ( local ); }); Enforcement (\ub2e8\uc21c) \ucea1\uccd0 \ubaa9\ub85d\uc774 \uc9c0\uc5ed \ubcc0\uc218\ub97c \ucc38\uc870\ud558\uba74 \uacbd\uace0\ud55c\ub2e4 (\ubcf5\uc7a1) \ucea1\uccd0 \ubaa9\ub85d\uc774 \uc9c0\uc5ed \ubcc0\uc218\ub97c \ucc38\uc870\ud558\uace0 const \uac00 \uc544\ub2c8\uac70\ub098 \ube44-\uc9c0\uc5ed\uc801 \ubb38\ub9e5\uc73c\ub85c \uc804\ub2ec\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4 F.54: this \ub97c \ucea1\uccd0\ud560 \ub54c\ub294, \ubaa8\ub4e0 \ubcc0\uc218\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ucea1\uccd0\ud558\ub77c(\uae30\ubcf8 \ucea1\uccd0\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4) Reason \uba85\uc2dc\ud558\uc9c0 \uc54a\uc73c\uba74 \ud63c\ub780\uc2a4\ub7fd\ub2e4. \uba64\ubc84 \ud568\uc218 \uc548\uc5d0\uc11c [=] \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uac12\uc73c\ub85c \ucea1\uccd0\ud558\ub294 \uac83\uc774\uc9c0\ub9cc, \uc2e4\uc81c\ub85c\ub294 \ubcf4\uc774\uc9c0 \uc54a\ub294 this \ub97c \ubcf5\uc0ac\ud558\uba74\uc11c \ub370\uc774\ud130 \uba64\ubc84\ub97c \ucc38\uc870\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ucea1\uccd0\ud558\ub294 \uac83\uc774\ub2e4. \uc774\uac83\uc774 \uc758\ub3c4\ub41c \uac83\uc774\ub77c\uba74, this \ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Example class My_class { int x = 0 ; // ... void f () { int i = 0 ; // ... auto lambda = [ = ]{ use ( i , x ); }; // BAD: \"looks like\" copy/value capture // [&] has identical semantics and copies the this pointer under the current rules // [=,this] and [&,this] are not much better, and confusing x = 42 ; lambda (); // calls use(0, 42); x = 43 ; lambda (); // calls use(0, 43); // ... auto lambda2 = [ i , this ]{ use ( i , x ); }; // ok, most explicit and least confusing // ... } }; Note \ud45c\uc900\uc5d0\uc11c \uc774\uc5d0 \ub300\ud574 \uacc4\uc18d \ub17c\uc758\uc911\uc774\ub2e4. \uc774\ud6c4 \ud45c\uc900\uc5d0\uc11c \uc0c8\ub85c\uc6b4 \ucea1\uccd0 \ubc29\uc2dd\uc774 \ub3c4\uc785\ub418\uac70\ub098 [=] \uc758 \uc758\ubbf8\ub97c \uc218\uc815\ud558\ub294 \ud615\ud0dc\ub85c \uc870\uc815\ub420 \uc218 \uc788\ub2e4. \uc9c0\uae08\uc740 \uba85\uc2dc\uc801\uc73c\ub85c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub77c. Enforcement \uae30\ubcf8 \ucea1\uccd0\uc640 this \uac00 \ucea1\uccd0\ubaa9\ub85d\uc5d0 \ud3ec\ud568\ub41c \ub78c\ub2e4\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4 (\uba85\uc2dc\uc801\uc774\ub4e0 \uae30\ubcf8 \ucea1\uccd0\ud55c \uac83\uc774\ub4e0) F.55: va_arg \uc804\ub2ec\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Reason va_arg \uc5d0\uc11c \uac12\uc744 \uc77d\uc5b4\uc62c \ub54c\ub294 \ud0c0\uc785\uc774 \uc815\ud655\ud788 \uc804\ub2ec\ub418\uc5c8\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. va_arg \uc5d0 \uac12\uc744 \uc804\ub2ec\ud560\ub54c\ub294 \ud0c0\uc785\uc774 \uc815\ud655\ud788 \uc77d\ud790 \uac83\uc774\ub77c\uace0 \uac00\uc815\ud55c\ub2e4. \uc774\ub294 \uc704\ud0dc\ub85c\uc6b4 \ubc29\ubc95\uc778\ub370 \uc5b8\uc5b4\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uace0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uae30\ub2a5\uc744 \uc815\ud655\ud788 \uc0ac\uc6a9\ud574\uc57c \ub54c\ubb38\uc774\ub2e4. Example int sum (...) { // ... while ( /*...*/ ) result += va_arg ( list , int ); // BAD, assumes it will be passed ints // ... } sum ( 3 , 2 ); // ok sum ( 3.14159 , 2.71828 ); // BAD, undefined template < class ... Args > auto sum ( Args ... args ) { // GOOD, and much more flexible return (... + args ); // note: C++17 \"fold expression\" } sum ( 3 , 2 ); // ok: 5 sum ( 3.14159 , 2.71828 ); // ok: ~5.85987 Alternatives \uc911\ubcf5 \uc815\uc758(overloading) \uac00\ubcc0 \ud15c\ud50c\ub9bf(variadic templates) variant \uc804\ub2ec\uc778\uc790(argument) initializer_list (homogeneous) Note ... \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\ub294 \uac83\uc740 \uc2e4\uc81c \uc804\ub2ec\uc778\uc790\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uac70\ub098, \ub2e4\ub978 \uc911\ubcf5 \uc815\uc758\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uae30 \uc704\ud574 \"\uc778\uc790\ub97c \ubb34\uc5c7\uc774\ub4e0\" \ucc98\ub9ac\ud558\ub294 \ud568\uc218 \ud639\uc740 \ud15c\ud50c\ub9bf \uba54\ud0c0 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uacc4\uc0b0 \uc678\uc758 \uacbd\uc6b0\ub97c \uc7a1\uc544\ub0b4\ub294\ub370 \uc720\uc6a9\ud558\uac8c \uc4f0\uc774\uae30\ub3c4 \ud55c\ub2e4. Enforcement va_list , va_start , va_arg \ub97c \uc0ac\uc6a9\ud558\uba74 \ubc18\ub300\ud55c\ub2e4(Issue a diagnostic). \ud568\uc218\uc758 \uac00\ubcc0 \ub9e4\uac1c\ubcc0\uc218\ub85c \ub118\uae30\ub294 \uc804\ub2ec\uc778\uc790\uc5d0 \ub300\ud574 \ubcf4\ub2e4 \uad6c\uccb4\uc801\uc778 \uc911\ubcf5\uc815\uc758\ub97c \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \uc774\uc758\ub97c \uc81c\uae30\ud55c\ub2e4(Issue a diagnostic). \uc218\uc815\ud558\ub824\uba74 \ub2e4\ub978 \ud568\uc218\ub97c \uc4f0\uac70\ub098 [[suppress(types)]] \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud55c\ub2e4.","title":"Functions"},{"location":"Functions/#f","text":"\ud568\uc218\uc758 \uc774\ub984\uc740 \uc804\ub2ec\uc778\uc790(argument)\ub4e4\uc758 \uc694\uad6c\uc0ac\ud56d\uc744 \ub4dc\ub7ec\ub0b4\uace0, \uc778\uc790\ub4e4\uacfc \ud638\ucd9c \uacb0\uacfc\uac04\uc758 \uad00\uacc4\ub97c \uba85\ud655\ud788 \uae30\uc220\ud574\uc57c \ud55c\ub2e4. \uc138\ubd80 \uad6c\ud604\uc740 \uba85\uc138\uac00 \uc544\ub2c8\ub2e4. \ud568\uc218\uac00 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud558\ub294\uc9c0\ub9cc\ud07c\uc774\ub098 \ubb34\uc5c7\uc744 \ud558\ub294\uc9c0\ub3c4 \uc0dd\uac01\ud574 \ubcf4\ub77c. \ud568\uc218\ub294 \ub300\ubd80\ubd84 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uac00\uc7a5 \uc911\uc694\ud55c \ubd80\ubd84\uc774\ubbc0\ub85c, \uc778\ud130\ud398\uc774\uc2a4 \uaddc\uce59\ub3c4 \uc0b4\ud3b4 \ubcf4\ub77c. \ud568\uc218\ub294 \uc2dc\uc2a4\ud15c\uc774 \ubaa8\uc21c\uc5c6\ub294(consistent) \uc5b4\ub5a4 \uc0c1\ud0dc\uc5d0\uc11c \ub2e4\uc74c \uc0c1\ud0dc\ub85c \uc774\ud589\ud558\ub3c4\ub85d \ud558\ub294 \ub3d9\uc791(action)\uc774\ub098 \uacc4\uc0b0(computation)\uc744 \uba85\uc138\ud558\ub294(specify) \uac83\uc774\ub2e4. \uc774\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \uae30\ubcf8 \uc7ac\ub8cc(building block)\uc774\ub2e4. \uc5ed\uc8fc: * Parameter: \ub9e4\uac1c\ubcc0\uc218 * Argument: \uc804\ub2ec\uc778\uc790 \ud568\uc218 \uaddc\uce59 \uc694\uc57d: \ud568\uc218 \uc815\uc758 \uaddc\uce59: F.1: \uc758\ubbf8\uc788\ub294 \ub3d9\uc791\ub4e4\uc744 \"\ubb36\uc5b4\uc11c\" \ud568\uc218\ub85c \ub9cc\ub4e4\uace0 \uc2e0\uc911\ud558\uac8c \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c F.2: \ud568\uc218\ub294 \ud558\ub098\uc758 \ub17c\ub9ac\uc801 \ub3d9\uc791\ub9cc \uc218\ud589\ud574\uc57c \ud55c\ub2e4 F.3: \ud568\uc218\ub294 \uac04\uacb0\ud558\uace0 \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\ud558\ub77c F.4: \ud568\uc218\uac00 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud3c9\uac00\ub418\uc5b4\uc57c \ud55c\ub2e4\uba74 constexpr \ub85c \uc120\uc5b8\ud558\ub77c F.5: \ud568\uc218\uac00 \ub9e4\uc6b0 \uc9e7\uace0 \uc218\ud589\uc2dc\uac04\uc774 \uc911\uc694\ud558\ub2e4\uba74 inline \uc73c\ub85c \uc120\uc5b8\ud558\ub77c F.6: \ud568\uc218\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uba74 noexcept \ub85c \uc120\uc5b8\ud558\ub77c F.7: \ubcf4\ud3b8\uc131\uc744 \uace0\ub824\ud55c\ub2e4\uba74, \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ub300\uc2e0\uc5d0 T* \ub098 T& \ud0c0\uc785\uc758 \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c F.8: \uc21c\uc218 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c F.9: \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc778\uc790\ub294 \uc774\ub984\uc774 \uc5c6\uc5b4\uc57c \ud55c\ub2e4 \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec \ud45c\ud604(parameter passing expression) \uaddc\uce59: F.15: \uc815\ubcf4\ub97c \uc804\ub2ec \ud560 \ub54c \ub2e8\uc21c\ud558\uace0 \uad00\uc2b5\uc801\uc778 \ubc29\ubc95\uc744 \uc120\ud638\ud558\ub77c F.16: \"\uc785\ub825(in)\" \ub9e4\uac1c\ubcc0\uc218\ub294 \ubcf5\uc0ac \ube44\uc6a9\uc774 \uc801\uac8c \ub4dc\ub294 \ud0c0\uc785\uc758 \uacbd\uc6b0 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uace0, \uadf8 \uc678\uc5d0\ub294 \uc0c1\uc218 \ucc38\uc870\ud615\uc73c\ub85c \uc804\ub2ec\ud558\ub77c F.17: \"\uc785\ucd9c\ub825(in-out)\" \ub9e4\uac1c\ubcc0\uc218\ub294 \ube44\uc0c1\uc218 \ucc38\uc870\ud615\uc73c\ub85c \uc804\ub2ec\ud558\ub77c F.18: \"\ub118\uaca8\uc8fc\ub294(will-move-from)\" \ub9e4\uac1c\ubcc0\uc218\ub294 X&& \ud0c0\uc785\uacfc std::move \ub85c \uc804\ub2ec\ud558\ub77c F.19: \"\uc804\ub2ec(forward)\" \ub9e4\uac1c\ubcc0\uc218\ub294 TP&& \ud0c0\uc785\uacfc std::forward \ub85c\ub9cc \uc804\ub2ec\ud558\ub77c F.20: \"\ucd9c\ub825(out)\"\uc5d0\ub294 \ub9e4\uac1c\ubcc0\uc218\ubcf4\ub2e4\ub294 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc120\ud638\ud558\ub77c F.21: \"\ucd9c\ub825\"\uac12 \uc5ec\ub7ec \uac1c\ub97c \ubc18\ud658\ud560 \ub54c\ub294 \ud29c\ud50c\uc774\ub098 \uad6c\uc870\uccb4\ub97c \uc120\ud638\ud558\ub77c \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec \uc758\ubbf8\uad6c\uc870(parameter passing semantic) \uaddc\uce59: F.22: T* \ud639\uc740 owner \ub97c \ub2e8\uc77c \uac1c\uccb4\ub97c \uc9c0\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub77c F.23: \"null\"\uc774 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 not_null<T> \ub97c \uc0ac\uc6a9\ud574 \ud45c\uc2dc\ud558\ub77c F.24: \ubc94\uc704\ub97c \uc9c0\uc815\ud560 \ub54c\ub294 span<T> \ud639\uc740 span_p<T> \ub97c \uc0ac\uc6a9\ud558\ub77c F.25: C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc5d0\ub294 zstring \ud639\uc740 not_null<zstring> \uc744 \uc0ac\uc6a9\ud558\ub77c F.26: \ud3ec\uc778\ud130\uac00 \ud544\uc694\ud55c \uacf3\uc5d0 \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud560 \ub54c\ub294 unique_ptr<T> \ub97c \uc0ac\uc6a9\ud558\ub77c F.27: \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud560 \ub54c\ub294 shared_ptr<T> \ub97c \uc0ac\uc6a9\ud558\ub77c F.60: \"\uc778\uc790\uac00 \uc5c6\uc744 \uacbd\uc6b0\"\ub97c \ud5c8\uc6a9\ud55c\ub2e4\uba74 T& \ubcf4\ub2e4\ub294 T* \ub97c \uc120\ud638\ud558\ub77c \uac12 \ubc18\ud658 \uc758\ubbf8\uad6c\uc870 \uaddc\uce59: F.42: \uc704\uce58\ub97c \ub098\ud0c0\ub0b4\ub294 \uacbd\uc6b0\uc5d0\ub9cc T* \ub97c \ubc18\ud658\ud558\ub77c F.43: \uc808\ub300\ub85c (\uc9c1\uc811\uc801\uc774\ub4e0 \uac04\uc811\uc801\uc774\ub4e0) \uc9c0\uc5ed \uac1c\uccb4\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c F.44: \ubcf5\uc0ac\ub97c \uad8c\uc7a5\ud558\uc9c0 \uc54a\uac70\ub098 \"\uac1c\uccb4\ub97c \ud56d\uc0c1 \ubc18\ud658\"\ud55c\ub2e4\uba74 T& \ub97c \ubc18\ud658\ud558\ub77c F.45: T&& \ub97c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c F.46: main() \ub294 int \ub97c \ubc18\ud658\ud574\uc57c \ud55c\ub2e4 F.47: \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 T& \ub97c \ubc18\ud658\ud558\ub77c F.48: return std::move(local) \uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c \uae30\ud0c0 \ud568\uc218 \uaddc\uce59: F.50: \ud568\uc218\ub97c \uc4f8 \uc218 \uc5c6\uc744 \ub54c\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c(\uc9c0\uc5ed \ubcc0\uc218\ub97c \ucea1\uccd0\ud558\uac70\ub098 \uc9c0\uc5ed \ud568\uc218\ub97c \uc791\uc131\ud560 \ub54c) F.51: \uc120\ud0dd\ud560 \uc218 \uc788\ub2e4\uba74, \uc911\ubcf5 \uc815\uc758\ubcf4\ub2e4\ub294 \uae30\ubcf8 \uc804\ub2ec\uc778\uc790\ub97c \uc120\ud638\ud558\ub77c F.52: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 \ub78c\ub2e4\uc758 \ucc38\uc870 \ucea1\uccd0\ub97c \uc120\ud638\ud558\ub77c F.53: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \ucc38\uc870 \ucea1\uccd0\ub97c \ud53c\ud558\ub77c F.54: this \ub97c \ucea1\uccd0\ud560 \ub54c\ub294, \ubaa8\ub4e0 \ubcc0\uc218\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ucea1\uccd0\ud558\ub77c(\uae30\ubcf8 \ucea1\uccd0\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4) F.55: va_arg \uc804\ub2ec\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c \ud568\uc218\ub294 \ub78c\ub2e4\uc640 \ud568\uc218\uac1c\uccb4\uc640 \uac15\ud55c \uc5f0\uad00\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4.","title":"F: \ud568\uc218"},{"location":"Functions/#see-also","text":"C.lambdas: Function objects and lambdas","title":"See also"},{"location":"Functions/#fdef-definition","text":"\ud568\uc218 \uc815\uc758\ub294 \ud568\uc218\uc758 \ubcf8\ubb38\uc744 \uad6c\ud604\ud558\uba74\uc11c \uc120\uc5b8\ud558\ub294 \uac83\uc774\ub2e4.","title":"F.def: \ud568\uc218 \uc815\uc758(definition)"},{"location":"Functions/#f1","text":"","title":"F.1: \uc758\ubbf8\uc788\ub294 \ub3d9\uc791\ub4e4\uc744 \"\ubb36\uc5b4\uc11c\" \ud568\uc218\ub85c \ub9cc\ub4e4\uace0 \uc2e0\uc911\ud558\uac8c \uc774\ub984\uc744 \uc9c0\uc5b4\ub77c"},{"location":"Functions/#reason","text":"\uacf5\ud1b5\ub41c \ucf54\ub4dc\ub97c \ubb36\uc5b4 \ub0b4\uba74 \uac00\ub3c5\uc131\uc774 \ub192\uc544\uc9c0\uace0, \uc7ac\uc0ac\uc6a9\ud558\uae30 \uc88b\uc544\uc9c0\uace0, \ubcf5\uc7a1\ud55c \ucf54\ub4dc\uc5d0\uc11c \uc624\ub958\uac00 \ub098\ud0c0\ub098\ub294 \ubc94\uc704\ub97c \uc81c\ud55c\ud55c\ub2e4. \uc798 \uba85\uc138\ub41c \ud589\ub3d9\uc774\ub77c\uba74 \uc774\ub97c \uc8fc\ubcc0 \ucf54\ub4dc\ub85c\ubd80\ud130 \ubd84\ub9ac\uc2dc\ud0a4\uace0 \uc774\ub984\uc744 \ubd80\uc5ec\ud558\ub77c.","title":"Reason"},{"location":"Functions/#example-dont","text":"void read_and_print ( istream & is ) // read and print an int { int x ; if ( is >> x ) cout << \"the int is \" << x << '\\n' ; else cerr << \"no int on input \\n \" ; } read_and_print \ud568\uc218\uc758 \uac70\uc758 \ubaa8\ub4e0 \ubd80\ubd84\uc774 \uc798\ubabb\ub418\uc5c8\ub2e4. \uc774 \ud568\uc218\ub294 \uc5b4\ub5a4 \uac12\uc744 \uc77d\uace0, ostream \uc5d0 \uc4f0\uac70\ub098 \uc624\ub958 \uba54\uc2dc\uc9c0\ub97c \uc4f0\ub294\ub370, \uc624\ub85c\uc9c0 int \ub9cc\uc744 \ub2e4\ub8ec\ub2e4. \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf54\ub4dc\uac00 \uc5c6\uace0, \ub17c\ub9ac\uc801\uc73c\ub85c \ubcc4\uac1c\uc778 \ub3d9\uc791\uc774 \ub4a4\uc11e\uc5ec \uc788\uc73c\uba70, \uc9c0\uc5ed\ubcc0\uc218\ub294 \ub17c\ub9ac\uc0c1 \uc18c\uc6a9\uc774 \uc5c6\uc5b4\uc9c4 \ub4a4\uc5d0\ub3c4 \ub0a8\uc544 \uc788\ub2e4. \uc791\uc740 \uc608\uc5d0\uc11c\ub77c\uba74 \uad1c\ucc2e\uc544 \ubcf4\uc774\uc9c0\ub9cc, \uc774 \uc785\ub825\ub3d9\uc791, \ucd9c\ub825\ub3d9\uc791, \uadf8\ub9ac\uace0 \uc624\ub958\ucc98\ub9ac\uac00 \ub354 \ubcf5\uc7a1\ud588\ub354\ub77c\uba74 \ub4a4\uc5c9\ud0a8 \ucf54\ub4dc \ub369\uc5b4\ub9ac\uac00 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6cc\uc84c\uc744 \uac83\uc774\ub2e4.","title":"Example, don't"},{"location":"Functions/#note","text":"\ub9cc\uc57d \ud55c \uacf3 \uc774\uc0c1\uc5d0\uc11c \uc0ac\uc6a9 \ub420 \uc911\uc694\ud55c \ub78c\ub2e4 \ud568\uc218\ub97c \uc791\uc131\ud55c\ub2e4\uba74 (\ube44\uc9c0\uc5ed)\ubcc0\uc218\uc5d0 \ud560\ub2f9\ud558\uace0 \uc774\ub984\uc744 \ubd80\uc5ec\ud558\ub77c.","title":"Note"},{"location":"Functions/#example","text":"sort ( a , b , []( T x , T y ) { return x . rank () < y . rank () && x . value () < y . value (); }); \ub78c\ub2e4\uc5d0 \uc774\ub984\uc744 \ubd80\uc5ec\ud558\uba74 \ud45c\ud604\uc2dd\uc744 \uc5ec\ub7ec \uac1c\uc758 \ub17c\ub9ac\uc801 \ubd80\ubd84\uc73c\ub85c \ub098\ub20c \uc218 \uc788\uace0, \uadf8 \ub78c\ub2e4\uac00 \ud558\ub294 \uc77c\uc744 \uc9d0\uc791\ucf00 \ud560 \uc218 \uc788\ub2e4. auto lessT = []( T x , T y ) { return x . rank () < y . rank () && x . value () < y . value (); }; sort ( a , b , lessT ); find_if ( a , b , lessT ); \ucf54\ub4dc\uac00 \uc9e7\ub2e4\uace0 \uc131\ub2a5\uc774\ub098 \uc720\uc9c0\ubcf4\uc218\uc131\uc774 \ud56d\uc0c1 \uc88b\uc9c0\ub9cc\uc740 \uc54a\ub2e4.","title":"Example"},{"location":"Functions/#exception","text":"\ubc18\ubcf5\ubb38(loop bodies)\uc740, \ub78c\ub2e4\uc778 \uacbd\uc6b0\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\uc778\ub370, \uc774\ub984\uc744 \uc9c0\uc744 \ud544\uc694\uac00 \uac70\uc758 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc \uc218\uc2ed \uc904\uc774\ub098 \uc218\uc2ed \ucabd\uc5d0 \uac78\uce5c \uac70\ub300\ud55c \ubc18\ubcf5\ubb38\uc740 \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\ub2e4. \ud568\uc218\ub97c \uac04\uacb0\ud558\uac8c \uc720\uc9c0\ud558\ub77c \uaddc\uce59\uc5d0\ub294 \"\ubc18\ubcf5\ubb38\uc744 \uc9e7\uac8c \uc720\uc9c0\ud558\ub77c\"\ub77c\ub294 \ub73b\ub3c4 \uc788\ub2e4. \uc774\uc640 \uc720\uc0ac\ud558\uac8c, \ucf5c\ubc31 \uc778\uc790\ub85c \uc0ac\uc6a9\ub418\ub294 \ub78c\ub2e4\ub294 \ub54c\ub85c \ud55c\ub208\uc5d0 \uc54c\uc544\ubcfc \uc218 \uc5c6\uc9c0\ub9cc, \uc7ac\uc0ac\uc6a9\ub420 \uac00\ub9dd\uc774 \uac70\uc758 \uc5c6\ub2e4. (\ub530\ub77c\uc11c \uc774\ub984\uc744 \uc9c0\uc5b4 \uc904 \ud544\uc694\uac00 \uac70\uc758 \uc5c6\ub2e4.)","title":"Exception"},{"location":"Functions/#enforcement","text":"\ud568\uc218\ub97c \uac04\uacb0\ud558\uac8c \uc720\uc9c0\ud558\ub77c \ub97c \ucc38\uace0\ud558\ub77c \ub3d9\uc77c\ud558\uac70\ub098 \ub9e4\uc6b0 \ube44\uc2b7\ud55c \ub78c\ub2e4\uac00 \uc5ec\ub7ec \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Functions/#f2","text":"","title":"F.2: \ud568\uc218\ub294 \ud558\ub098\uc758 \ub17c\ub9ac\uc801 \ub3d9\uc791\ub9cc \uc218\ud589\ud574\uc57c \ud55c\ub2e4"},{"location":"Functions/#reason_1","text":"\ud558\ub098\uc758 \uc791\uc5c5\ub9cc \uc218\ud589\ud558\ub294 \ud568\uc218\ub294 \uc774\ud574\ud558\uae30 \uc27d\uace0, \ud14c\uc2a4\ud2b8\ud558\uae30 \uc27d\uace0, \uc7ac\uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4.","title":"Reason"},{"location":"Functions/#example_1","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void read_and_print () // bad { int x ; cin >> x ; // check for errors cout << x << \" \\n \" ; } \uc774\ub294 \ud2b9\uc815\ud55c \uc785\ub825\uc5d0 \ub9e4\uc5ec \uc788\ub294 \ud1b5\uc9dc\ub85c \ub41c \ud568\uc218\ub85c, \ub2e4\ub978 \uc4f0\uc784\uc0c8\ub97c \ucc3e\uc744 \uc218 \uc5c6\ub2e4. \ub300\uc2e0\uc5d0 \ud568\uc218\ub97c \uc801\uc808\ud55c \ub17c\ub9ac\uc801 \ubd80\ubd84\uc73c\ub85c \ucabc\uac1c\uace0 cin, cout \ub4f1\uc740 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c: int read ( istream & is ) // better { int x ; is >> x ; // check for errors return x ; } void print ( ostream & os , int x ) { os << x << \" \\n \" ; } \ud544\uc694\ud558\ub2e4\uba74 \ub450 \ud568\uc218\ub97c \uacb0\ud569\ud558\uba74 \ub41c\ub2e4: void read_and_print () { auto x = read ( cin ); print ( cout , x ); } \ub610\ud55c \ud544\uc694\ud558\ub2e4\uba74 read() \uc640 print() \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ub370\uc774\ud130 \ud0c0\uc785, \uc785\ub825 \uba54\ucee4\ub2c8\uc998, \uc624\ub958\uc5d0 \ub300\ud55c \uc751\ub2f5 \ub4f1\uc744 \ud15c\ud50c\ub9bf\ud654 \ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4: auto read = []( auto & input , auto & value ) // better { input >> value ; // check for errors }; auto print ( auto & output , const auto & value ) { output << value << \" \\n \" ; }","title":"Example"},{"location":"Functions/#enforcement_1","text":"\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\uac00 2\uac1c \uc774\uc0c1\uc778 \ud568\uc218\ub97c \uc758\uc2ec\ud558\ub77c. \ub300\uc2e0 \ubc18\ud658\uac12\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc5ec\ub7ec \ubc18\ud658\uac12\uc744 \uc800\uc7a5 \ud560 \uc218 \uc788\ub294 tuple \uc744 \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4. \ud3b8\uc9d1\uae30 \ud654\uba74\uc5d0 \ub2e4 \ub098\uc624\uc9c0 \uc54a\uc744 \ub9cc\ud07c \ud070 \ud568\uc218\ub97c \uc758\uc2ec\ud558\ub77c. \uc774\ub7f0 \ud568\uc218\ub294 \uc138\ubd80 \ub3d9\uc791\uc744 \uac16\ub294 \ub354 \uc791\uc740 \ud568\uc218\ub4e4\ub85c (\uc774\ub984\uc744 \uc798 \uc9c0\uc5b4\uc11c) \ub098\ub204\ub3c4\ub85d \ud55c\ub2e4. 7\uac1c \uc774\uc0c1\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac16\ub294 \ud568\uc218\ub97c \uc758\uc2ec\ud558\ub77c.","title":"Enforcement"},{"location":"Functions/#f3","text":"","title":"F.3: \ud568\uc218\ub294 \uac04\uacb0\ud558\uace0 \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\ud558\ub77c"},{"location":"Functions/#reason_2","text":"\uac70\ub300\ud55c \ud568\uc218\ub294 \uc77d\uae30 \uc5b4\ub824\uc6b8 \ubfd0\ub354\ub7ec, \ubcf5\uc7a1\ud55c \ucf54\ub4dc\ub97c \ud3ec\ud568\ud558\uac70\ub098, \ud544\uc694\ud55c \uc720\ud6a8\ubc94\uc704 \uc774\uc0c1\uc73c\ub85c \uc874\uc7ac\ud558\ub294 \ubcc0\uc218\uac00 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \ub354 \ub192\ub2e4. \uc81c\uc5b4 \uad6c\uc870\uac00 \ubcf5\uc7a1\ud55c \ud568\uc218\ub294 \uae38\uc774\uac00 \uae38\uae30 \ub9c8\ub828\uc774\uace0, \ub17c\ub9ac \uc624\ub958\uac00 \uc228\uc5b4\uc788\uc744 \uacf5\uc0b0\uc774 \ud06c\ub2e4.","title":"Reason"},{"location":"Functions/#example_2","text":"\ub2e4\uc74c\uc758 \uc608\ub97c \ubcf4\ub77c: double simple_func ( double val , int flag1 , int flag2 ) // simple_func: takes a value and calculates the expected ASIC output, // given the two mode flags. { double intermediate ; if ( flag1 > 0 ) { intermediate = func1 ( val ); if ( flag2 % 2 ) intermediate = sqrt ( intermediate ); } else if ( flag1 == - 1 ) { intermediate = func1 ( - val ); if ( flag2 % 2 ) intermediate = sqrt ( - intermediate ); flag1 = - flag1 ; } if ( abs ( flag2 ) > 10 ) { intermediate = func2 ( intermediate ); } switch ( flag2 / 10 ) { case 1 : if ( flag1 == - 1 ) return finalize ( intermediate , 1.171 ); break ; case 2 : return finalize ( intermediate , 13.1 ); default : break ; } return finalize ( intermediate , 0. ); } \uc774 \ud568\uc218\ub294 \ub108\ubb34 \ubcf5\uc7a1\ud558\ub2e4. \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0\ub97c \uc62c\ubc14\ub974\uac8c \ub2e4\ub8e8\uc5c8\ub294\uc9c0 \uc5b4\ub5bb\uac8c \uc54c\uaca0\ub294\uac00? \uac8c\ub2e4\uac00, \uc774 \uc608\ub294 \ub2e4\ub978 \uaddc\uce59\ub3c4 \uc5b4\uae30\uace0 \uc788\ub2e4. \uc774\ub807\uac8c \ubc14\uafd4\uc4f8 \uc218 \uc788\ub2e4: double func1_muon ( double val , int flag ) { // ??? } double func1_tau ( double val , int flag1 , int flag2 ) { // ??? } double simple_func ( double val , int flag1 , int flag2 ) // simple_func: takes a value and calculates the expected ASIC output, // given the two mode flags. { if ( flag1 > 0 ) return func1_muon ( val , flag2 ); if ( flag1 == - 1 ) // handled by func1_tau: flag1 = -flag1; return func1_tau ( - val , flag1 , flag2 ); return 0. ; }","title":"Example"},{"location":"Functions/#note_1","text":"\"\ud55c \ud654\uba74\uc5d0 \ub9de\ucd94\uae30\"\ub294 \"\ub108\ubb34 \ud06c\uac8c \ud558\uc9c0 \uc54a\uae30\"\uc5d0 \ub300\ud55c \uc88b\uc740 \uc2e4\uc6a9\uc801\uc778 \uaddc\uce59\uc774\ub2e4. \ud55c\uc904\uc5d0\uc11c \ub2e4\uc12f\uc904 \uc0ac\uc774\uc758 \ud568\uc218\ub294 \uc815\uc0c1\uc73c\ub85c \uac04\uc8fc\ud55c\ub2e4.","title":"Note"},{"location":"Functions/#note_2","text":"\uae34 \ud568\uc218\ub294 \uc751\uc9d1\uc131\uc788\uace0 \uc758\ubbf8\uc788\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \uc791\uc740 \ud568\uc218\ub85c \ub098\ub204\uc5b4\uc57c \ud55c\ub2e4. \uc791\uace0 \uac04\uacb0\ud55c \ud568\uc218\ub294 \ud568\uc218 \ud638\ucd9c \ube44\uc6a9\uc774 \uc911\uc694\ud55c \uacf3\uc5d0\uc11c inline \ucc98\ub9ac\ub420 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Functions/#enforcement_2","text":"\"\ud55c \ud654\uba74\uc5d0 \ub9de\uc9c0 \uc54a\ub294\" \ud568\uc218\ub294 \uc9c0\uc801\ud55c\ub2e4. \ud654\uba74\uc740 \uc5b4\ub290\uc815\ub3c4 \ud06c\uae30\ub85c \ud560 \uac83\uc778\uac00? \ud55c \uc904\uc5d0 140\uc790, 60\uc904 \ud654\uba74\uc744 \uc0ac\uc6a9\ud574\ubcf4\ub77c; \uc774\ub294 \ub300\ub7b5 \ucc45\uc758 \ud55c \ud398\uc774\uc9c0\uc5d0 \ub9de\ub294 \ucd5c\ub300 \ud06c\uae30\uc774\ub2e4. \ub108\ubb34 \ubcf5\uc7a1\ud55c \ud568\uc218\ub294 \uc9c0\uc801\ud55c\ub2e4. \ub108\ubb34 \ubcf5\uc7a1\ud55c\uc740 \uc5b4\ub290\uc815\ub3c4\ub97c \uc758\ubbf8\ud558\ub294\uac00? \uc21c\ud658 \ubcf5\uc7a1\ub3c4(cyclomatic complexity)\ub97c \uc4f8 \uc218\ub3c4 \uc788\ub2e4. \"10\uac1c\uc758 \ub17c\ub9ac\uc801 \uacbd\ub85c\"\ub97c \uc0ac\uc6a9\ud574\ubcf4\ub77c. \ub2e8\uc21c\ud55c switch\ub294 \ud558\ub098\ub85c \uc138\uc5b4\ub3c4 \uc88b\ub2e4.","title":"Enforcement"},{"location":"Functions/#f4-constexpr","text":"","title":"F.4: \ud568\uc218\uac00 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud3c9\uac00\ub418\uc5b4\uc57c \ud55c\ub2e4\uba74 constexpr\ub85c \uc120\uc5b8\ud558\ub77c"},{"location":"Functions/#reason_3","text":"constexpr \ub294 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud3c9\uac00\ud558\ub77c\uace0 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \uc9c0\uc2dc\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4.","title":"Reason"},{"location":"Functions/#example_3","text":"\uc720\uba85\ud55c \ud329\ud1a0\ub9ac\uc5bc: constexpr int fac ( int n ) { constexpr int max_exp = 17 ; // constexpr enables max_exp to be used in Expects Expects ( 0 <= n && n < max_exp ); // prevent silliness and overflow int x = 1 ; for ( int i = 2 ; i <= n ; ++ i ) x *= i ; return x ; } C++14 \uc5d0\uc11c\ub294 \uc774\uc640 \uac19\uc774 \uc791\uc131\ud560 \uc218 \uc788\ub2e4. C++ 11 \ud658\uacbd\uc774\ub77c\uba74, fac() \ub97c \uc7ac\uadc0\ub97c \uc0ac\uc6a9\ud574 \uc791\uc131\ud574\uc57c \ud55c\ub2e4.","title":"Example"},{"location":"Functions/#note_3","text":"constexpr \uc740 \ucef4\ud30c\uc77c \ud0c0\uc784 \ud3c9\uac00\ub97c \ubcf4\uc7a5\ud558\uc9c0 \uc54a\ub294\ub2e4; \ub2e8\uc9c0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc694\uad6c\ud558\uac70\ub098 \ucef4\ud30c\uc77c\ub7ec\uac00 \ucd5c\uc801\ud654\ub97c \ud558\uae30\ub85c \uacb0\uc815\ud588\uc744 \ub54c \uc0c1\uc218 \ud45c\ud604 \uc778\uc790\uc5d0 \ub300\ud574\uc11c \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ud3c9\uac00 \ub420 \uc218 \uc788\ub2e4\ub294 \uac83\ub9cc\uc744 \ubcf4\uc7a5 \ud560 \ubfd0\uc774\ub2e4. constexpr int min ( int x , int y ) { return x < y ? x : y ; } void test ( int v ) { int m1 = min ( - 1 , 2 ); // probably compile-time evaluation constexpr int m2 = min ( - 1 , 2 ); // compile-time evaluation int m3 = min ( - 1 , v ); // run-time evaluation constexpr int m4 = min ( - 1 , v ); // error: cannot evaluate at compile time }","title":"Note"},{"location":"Functions/#note_4","text":"constexpr \ud568\uc218\ub294 \uc21c\uc218 \ud568\uc218\ub4e4\uc774\uba70, \ubd80\uc218\ud6a8\uacfc(side deffect)\ub97c \uac00\uc9c0\uc9c0 \uc54a\ub294\ub2e4. int dcount = 0 ; constexpr int double ( int v ) { ++ dcount ; // error: attempted side effect from constexpr function return v + v ; } \ub300\uccb4\uc801\uc73c\ub85c \uc88b\uc740 \ud2b9\uc131\uc774\ub2e4. \uc0c1\uc218\uac00 \uc544\ub2cc \uc804\ub2ec\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uba74, constexpr \ub294 \uc608\uc678\ub97c \ub358\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \ubd80\uc218\ud6a8\uacfc\ub97c \ub0a8\uae30\uba74\uc11c \uc885\ub8cc\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\uace0 \uc788\ub2e4\uba74, constexpr \ub294 \uc644\uc804\ud788 \uc21c\uc218\ud55c \ud568\uc218\ub294 \uc544\ub2c8\uac8c \ub41c\ub2e4; \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4. ??? A question for the committee: can a constructor for an exception thrown by a constexpr function modify state? \"No\" would be a nice answer that matches most practice.","title":"Note"},{"location":"Functions/#note_5","text":"\ubaa8\ub4e0 \ud568\uc218\ub97c constexpr \ub85c \uc791\uc131\ud558\uc9c0\ub294 \ub9c8\ub77c. \ub300\ubd80\ubd84\uc758 \uacc4\uc0b0\uc740 \uc2e4\ud589\uc2dc\uac04\uc5d0 \ucd5c\uc801\uc73c\ub85c \uc218\ud589\ub41c\ub2e4.","title":"Note"},{"location":"Functions/#note_6","text":"\uc5b4\ub5a4 API\uac00 \ub192\uc740 \uc218\uc900\uc758 \uc2e4\ud589\uc2dc\uac04 \uc124\uc815(configuration) \ud639\uc740 \ube44\uc988\ub2c8\uc2a4 \ub85c\uc9c1\uc5d0 \uc758\uc874\ud55c\ub2e4\uba74 constexpr \ub85c \uc791\uc131\ud574\uc120 \uc548\ub41c\ub2e4. \uadf8\uc640 \uac19\uc740 \uacbd\uc6b0\ub294 \ucef4\ud30c\uc77c\ub7ec\uc5d0 \uc758\ud574 \ud3c9\uac00\ub420 \uc218 \uc5c6\uc73c\uba70, \uadf8 API\uc5d0 \uc758\uc874\ud558\ub294 constexpr \ud568\uc218\ub4e4\uc740 \uc7ac\uad6c\uc131(refactored)\ub418\uac70\ub098 constexpr \ub97c \ud3ec\uae30(drop)\ud558\uac8c \ub420 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Functions/#enforcement_3","text":"\ubd88\uac00\ub2a5\ud558\uba70 \ubd88\ud544\uc694\ud558\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uac00 \uc0c1\uc218\uac00 \ud544\uc694\ud55c \uacf3\uc5d0 constexpr \uac00 \uc544\ub2cc \ud568\uc218\ub4e4\uc774 \uc0ac\uc6a9\ub418\uba74 \uc624\ub958\ub85c \ucc98\ub9ac\ud560 \uac83\uc774\ub2e4.","title":"Enforcement"},{"location":"Functions/#f5-inline","text":"","title":"F.5: \ud568\uc218\uac00 \ub9e4\uc6b0 \uc9e7\uace0 \uc218\ud589\uc2dc\uac04\uc774 \uc911\uc694\ud558\ub2e4\uba74 inline\uc73c\ub85c \uc120\uc5b8\ud558\ub77c"},{"location":"Functions/#reason_4","text":"\uc77c\ubd80 \ucd5c\uc801\ud654\uae30(optimizer)\ub294 \ubcc4\ub3c4\ub85c \ud78c\ud2b8\ub97c \ubc1b\uc9c0 \uc54a\uc544\ub3c4 \ud568\uc218 \uc778\ub77c\uc778\ud654\ub97c \uc798 \ud558\uc9c0\ub9cc, \uadf8\uc5d0 \uc758\uc874\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \uce21\uc815\ud558\ub77c! \uc9c0\ub09c 40\ub144\uac04 \uc6b0\ub9ac\ub294 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc544\ubb34\ub7f0 \ud78c\ud2b8\uac00 \uc5c6\uc5b4\ub3c4 \uc0ac\ub78c\ubcf4\ub2e4 \ub354 \uc778\ub77c\uc778\ud654\ub97c \uc798 \ud560\uac70\ub77c\uace0 \uc57d\uc18d\ud574 \uc654\ub2e4. \uadf8\ub9ac\uace0 \uadf8 \uc57d\uc18d\uc740 \uc544\uc9c1 \uc9c0\ucf1c\uc9c0\uc9c0 \uc54a\uc558\ub2e4. inline \uc744 \uba85\uc2dc\ud558\ub294 \uac83\uc740 \ucef4\ud30c\uc77c\ub7ec\uac00 \ub354 \ub098\uc740 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud558\ub3c4\ub85d \uad8c\uc7a5\ud558\ub294 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Functions/#example_4","text":"inline string cat ( const string & s , const string & s2 ) { return s + s2 ; }","title":"Example"},{"location":"Functions/#exception_1","text":"\ud568\uc218\uac00 \ubcc0\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub77c\uace0 \ud655\uc2e0\ud558\uc9c0 \uc54a\ub294 \ud55c, inline \uc744 \uc548\uc815\ub41c \uc778\ud130\ud398\uc774\uc2a4 \ud568\uc218\uc5d0 \uc0ac\uc6a9\ud574\uc120 \uc548\ub41c\ub2e4. \uc778\ub77c\uc778 \ud568\uc218\ub294 ABI\uc758 \uc77c\ubd80\uc774\ub2e4.","title":"Exception"},{"location":"Functions/#note_7","text":"constexpr \uc740 inline \uc744 \ub0b4\ud3ec\ud558\uace0 \uc788\ub2e4.","title":"Note"},{"location":"Functions/#note_8","text":"\ud074\ub798\uc2a4 \ub0b4\uc5d0 \uc815\uc758\ub41c \uba64\ubc84 \ud568\uc218\ub4e4\uc740 \uae30\ubcf8\uc801\uc73c\ub85c inline \uc774 \uc801\uc6a9\ub41c\ub2e4.","title":"Note"},{"location":"Functions/#exception_2","text":"\ud15c\ud50c\ub9bf \ud568\uc218(\ud15c\ud50c\ub9bf \uba64\ubc84 \ud568\uc218 \ud3ec\ud568)\ub4e4\uc740 \ubcf4\ud1b5 \ud5e4\ub354 \ud30c\uc77c\uc5d0 \uc815\uc758\ub418\uae30 \ub54c\ubb38\uc5d0 \uc778\ub77c\uc778 \ud568\uc218\uc5d0 \ud574\ub2f9\ud55c\ub2e4.","title":"Exception"},{"location":"Functions/#enforcement_4","text":"inline \ud568\uc218\uac00 3 \ubb38\uc7a5\ubcf4\ub2e4 \uae38\uace0 (\ud074\ub798\uc2a4\uc758 \uba64\ubc84 \ud568\uc218\ucc98\ub7fc) \ub2e4\ub978 \uacf3\uc5d0 \uc120\uc5b8\ub418\uc5c8\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Functions/#f6-noexcept","text":"","title":"F.6: \ud568\uc218\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uba74 noexcept\ub85c \uc120\uc5b8\ud558\ub77c"},{"location":"Functions/#reason_5","text":"\uc608\uc678\ub97c \ub358\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc774 \uc624\ub958\uc5d0 \ub300\ucc98\ud558\ub9ac\ub77c \uc0dd\uac01\ud560 \uc218 \uc5c6\uace0, \uc774\ub294 \ucd5c\ub300\ud55c \ube60\ub974\uac8c \uc885\ub8cc\ub418\uc5b4\uc57c \ub9c8\ub545\ud558\ub2e4. \ud568\uc218\ub97c noexcept \ub85c \uc120\uc5b8\ud558\uba74 \ub300\uc548\uc801\uc778 \uc2e4\ud589\uacbd\ub85c\uac00 \uc904\uc5b4\ub4e6\uc73c\ub85c \ucd5c\uc801\ud654\uac00 \uc26c\uc6cc\uc9c4\ub2e4. \uc624\ub958\uac00 \ub09c \ub4a4 \uc885\ub8cc\ud560 \ub54c\uae4c\uc9c0 \uc2dc\uac04\ub3c4 \uc9e7\uc544\uc9c4\ub2e4.","title":"Reason"},{"location":"Functions/#example_5","text":"\uc628\uc804\ud788 C\uc5b8\uc5b4\ub85c \uad6c\ud604\uc774 \ub418\uc5c8\uac70\ub098 \uc608\uc678\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ubaa8\ub4e0 \ud568\uc218\uc5d0 noexcept \ub97c \ucd94\uac00\ud558\ub77c. C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud574\uc11c \uc554\uc2dc\uc801\uc73c\ub85c \uadf8\ub807\uac8c\ud558\uace0 \uc788\ub2e4.","title":"Example"},{"location":"Functions/#note_9","text":"constexpr \ud568\uc218\uac00 \uc2e4\ud589\uc2dc\uac04\uc5d0 \ud3c9\uac00\ub41c\ub2e4\uba74 \uc608\uc678\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, noexcept \ub97c \uba85\uc2dc\ud574\uc57c \ud560 \uc218 \uc788\ub2e4","title":"Note"},{"location":"Functions/#example_6","text":"\uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc788\ub294 \ud568\uc218\uc5d0\uc11c noexcept \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\ub2e4: vector < string > collect ( istream & is ) noexcept { vector < string > res ; for ( string s ; is >> s ;) res . push_back ( s ); return res ; } collect() \ud568\uc218\uac00 \uba54\ubaa8\ub9ac\ub97c \ubaa8\ub450 \uc0ac\uc6a9\ud574 \ubc84\ub9ac\uba74 \ud504\ub85c\uadf8\ub7a8\uc740 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ud558\uac8c \ub41c\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 \uba54\ubaa8\ub9ac \uace0\uac08 \uc0c1\ud0dc\ub97c \ud574\uacb0\ud560 \uc218 \uc5c6\ub2e4\uba74, \uc774\ub294 \ub2f9\uc5f0\ud55c \uacb0\uacfc\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4; terminate() \ud568\uc218\uc5d0\uc11c \uc801\ud569\ud55c \uc624\ub958 \uae30\ub85d(error log)\uc744 \uc0dd\uc131\ud560 \uc218 \uc788\ub2e4. (\ud558\uc9c0\ub9cc \uba54\ubaa8\ub9ac \ubd80\uc871 \uc0c1\ud669\uc5d0\uc11c\ub294 \uc81c\ub300\ub85c \ud560 \uc218 \uc788\ub294 \uc77c\uc774 \uac70\uc758 \uc5c6\ub2e4)","title":"Example"},{"location":"Functions/#note_10","text":"\uc5b4\ub5a4 \ud568\uc218\uc5d0 noexcept \ub97c \ubd99\uc77c\uc9c0 \ub9d0\uc9c0 \uacb0\uc815\ud560 \ub54c\ub294 \ucf54\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \ud658\uacbd\uc744 \uc54c\uace0 \uc788\uc5b4\uc57c \ud55c\ub2e4. \ud2b9\ud788\ub098 \uc608\uc678\ub97c \ub358\uc9c0\ub294 \uac83\uc774 \uba54\ubaa8\ub9ac \ud560\ub2f9 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 sort \uac19\uc740 \uc5ec\ud0c0 \uc720\ud2f8\ub9ac\ud2f0 \ucf54\ub4dc\ucc98\ub7fc, \uc644\uc804\ud788 \uc77c\ubc18\uc801\uc73c\ub85c \uc4f0\uc77c \uac83\uc744 \uc5fc\ub450\uc5d0 \ub454 \ucf54\ub4dc\ub294 bad_alloc \uc608\uc678\uac00 \uc81c\ub300\ub85c \ucc98\ub9ac\ub418\ub294 \ud658\uacbd\uc744 \uc9c0\uc6d0\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub7a8 \ubc0f \uc2e4\ud589\ud658\uacbd\uc740 \uba54\ubaa8\ub9ac \ud560\ub2f9 \uc2e4\ud328\ub97c \uc81c\ub300\ub85c \ucc98\ub9ac\ud558\uc9c0 \ubabb\ud558\ub294\ub370, \uadf8\ub7f4 \ub54c\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc885\ub8cc\uc2dc\ucf1c \ubc84\ub9ac\ub294 \uac83\uc774 \uac00\uc7a5 \uae54\ub054\ud558\uace0 \uac04\ub2e8\ud55c \ucc98\ub9ac\ubc29\ubc95\uc774\ub2e4. \ub2f9\uc2e0\uc774 \uc9e0 \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\uac00 \uba54\ubaa8\ub9ac \ud560\ub2f9 \uc2e4\ud328\uc5d0 \ub300\ucc98\ud558\uc9c0 \ubabb\ud558\ub9ac\ub77c\ub294 \uc810\uc744 \uc548\ub2e4\uba74, \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud558\ub294 \ud568\uc218\uc5d0\ub3c4 noexcept \ub97c \ub367\ubd99\uc774\ub294 \uac83\uc774 \uc801\uc808\ud560 \uc218\ub3c4 \uc788\ub2e4. \ub2e4\ub974\uac8c \uc0dd\uac01\ud558\uba74: \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \ud568\uc218\ub4e4\uc740 \ubcf4\ud1b5 \uc608\uc678\ub97c \ub358\uc9c4\ub2e4 (\ud568\uc218 \uc548\uc5d0\uc11c new \ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \uc608\uc678\ub97c \ub358\uc9c0\ub294 \ubc29\uc2dd\uc73c\ub85c \uc2e4\ud328\ub97c \uc54c\ub9ac\ub294 \ud568\uc218/\ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0). \ub530\ub77c\uc11c \ubc1c\uc0dd\uac00\ub2a5\ud55c \uc608\uc678\uac00 \ucc98\ub9ac\ub420 \uc218 \uc788\ub294\uc9c0 \uace0\ubbfc\ud558\uc9c0 \uc54a\uace0 noexcept \ub97c \ub0a8\ubc1c\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. noexcept \ub294 \ube48\ubc88\ud788 \ud638\ucd9c\ub418\ub294 \uc800\uc218\uc900 \ud568\uc218\ub4e4\uc5d0 \uc720\uc6a9\ud558\ub2e4 (\ub610\ud55c \uc815\ud655\ud558\ub2e4).","title":"Note"},{"location":"Functions/#note_11","text":"\uc18c\uba78\uc790, swap \ud568\uc218, move \uc5f0\uc0b0 \uadf8\ub9ac\uace0 \uae30\ubcf8 \uc0dd\uc131\uc790\uc5d0\uc11c\ub294 \uc808\ub300\ub85c \uc608\uc678\ub97c \ub358\uc9c0\uba74 \uc548\ub41c\ub2e4.","title":"Note"},{"location":"Functions/#enforcement_5","text":"\uc608\uc678\ub97c \ub358\uc9c8 \uc218 \uc5c6\ub294\ub370\ub3c4 noexcept \uac00 \uc5c6\ub294 \ud568\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \uc608\uc678\ub97c \ub358\uc9c0\ub294 swap , move \uc5f0\uc0b0\uc790, \uc18c\uba78\uc790 \uadf8\ub9ac\uace0 \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f7-t-t","text":"","title":"F.7: \ubcf4\ud3b8\uc131\uc744 \uace0\ub824\ud55c\ub2e4\uba74, \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ub300\uc2e0\uc5d0 T*\ub098 T&amp; \ud0c0\uc785\uc758 \uc778\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Functions/#reason_6","text":"\uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\uba74 \uc18c\uc720\uad8c\uc774 \uc774\uc804\ub418\uac70\ub098 \uacf5\uc720\ub41c\ub2e4. \uc774\ub294 \uc758\ub3c4\uc801\uc778 \uacbd\uc6b0\uc5d0\ub9cc \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. ( R.30 \ucc38\uace0). \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\uba74 \ud568\uc218 \ud638\ucd9c \uc2dc \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud574\uc57c\ud55c\ub2e4\ub294 \uc81c\uc57d\uc774 \uc0dd\uae34\ub2e4. \uacf5\uc720 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 (\uc608, std::shared_ptr ) \ub7f0\ud0c0\uc784\uc2dc \ucd94\uac00 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.","title":"Reason"},{"location":"Functions/#example_7","text":"// accepts any int* void f ( int * ); // can only accept ints for which you want to transfer ownership void g ( unique_ptr < int > ); // can only accept ints for which you are willing to share ownership void g ( shared_ptr < int > ); // doesn't change ownership, but requires a particular ownership of the caller void h ( const unique_ptr < int >& ); // accepts any int void h ( int & );","title":"Example"},{"location":"Functions/#example-bad","text":"// callee void f ( shared_ptr < widget >& w ) { // ... use ( * w ); // only use of w -- the lifetime is not used at all // ... }; R.30 \uc5d0\uc11c \uad00\ub828 \ub0b4\uc6a9\uc744 \uae30\uc220\ud558\uace0 \uc788\ub2e4.","title":"Example, bad"},{"location":"Functions/#note_12","text":"\ud5c8\uc0c1 \ud3ec\uc778\ud130(dangling pointer)\ub294 \uc815\uc801\uc73c\ub85c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4. \ub54c\ubb38\uc5d0 \ud5c8\uc0c1 \ud3ec\uc778\ud130\ub85c \uc778\ud55c \uc790\uc6d0 \uad00\ub9ac\uc5d0 \uc758\uc874\ud560 \ud544\uc694\ub294 \uc5c6\ub2e4.","title":"Note"},{"location":"Functions/#see-also_1","text":"\uc804\ub2ec\uc778\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0\uac00 \ud5c8\uc6a9\ub41c\ub2e4\uba74 T& \ubcf4\ub2e4\ub294 T* \ub97c \uc120\ud638\ud558\ub77c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \uaddc\uce59 \uc694\uc57d","title":"See also"},{"location":"Functions/#enforcement_6","text":"\uc18c\uc720\uad8c \uc758\ubbf8\uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub370 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ud0c0\uc785\uc744 \uc778\uc790\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 (\ub610\ub294 operator-> \ub098 operator* \ub97c \uc911\ubcf5\uc815\uc758\ud55c \ud0c0\uc785). \uc774\ub7f0 \uacbd\uc6b0\ub294 \ubcf5\uc0ac \uac00\ub2a5\ud558\uc9c0\ub9cc \ubcf5\uc0ac/\uc774\ub3d9\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4 \ud639\uc740 \uc774\ub3d9 \uac00\ub2a5\ud558\uc9c0\ub9cc \uc774\ub3d9\ud558\uc9c0 \uc54a\ub294\ub2e4 \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uac70\ub098 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294 \ub2e4\ub978 \ud568\uc218\ub85c \uc804\ub2ec\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f8","text":"","title":"F.8: \uc21c\uc218 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Functions/#reason_7","text":"\uc21c\uc218 \ud568\uc218\ub294 \uc880 \ub354 \ud30c\uc545\ud558\uae30 \uc27d\ub2e4. \ucd5c\uc801\ud654\ud558\uae30 \uc27d\uace0(\ubcd1\ub82c\ud654\ub97c \ud3ec\ud568\ud55c\ub2e4), \uba54\ubaa8\uc774\uc81c\uc774\uc158\ud558\uae30 \uc27d\ub2e4.","title":"Reason"},{"location":"Functions/#example_8","text":"template < class T > auto square ( T t ) { return t * t ; }","title":"Example"},{"location":"Functions/#note_13","text":"constexpr \ub294 \uc21c\uc218 \ud568\uc218\uc5d0 \uc18d\ud55c\ub2e4. \uc0c1\uc218\uac00 \uc544\ub2cc \uc804\ub2ec\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uba74, constexpr \ub294 \uc608\uc678\ub97c \ub358\uc9c8 \uc218\ub3c4 \uc788\ub2e4. \ubd80\uc218\ud6a8\uacfc\ub97c \ub0a8\uae30\uba74\uc11c \uc885\ub8cc\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\uace0 \uc788\ub2e4\uba74, constexpr \ub294 \uc644\uc804\ud788 \uc21c\uc218\ud55c \ud568\uc218\ub294 \uc544\ub2c8\uac8c \ub41c\ub2e4; \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \ubb38\uc81c\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4. ??? A question for the committee: can a constructor for an exception thrown by a constexpr function modify state? \"No\" would be a nice answer that matches most practice.","title":"Note"},{"location":"Functions/#enforcement_7","text":"\ubd88\uac00\ub2a5\ud558\ub2e4.","title":"Enforcement"},{"location":"Functions/#f9","text":"","title":"F.9: \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc778\uc790\ub294 \uc774\ub984\uc774 \uc5c6\uc5b4\uc57c \ud55c\ub2e4"},{"location":"Functions/#reason_8","text":"\uac00\ub3c5\uc131. \"\uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc778\uc790\" \uacbd\uace0\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Functions/#example_9","text":"X * find ( map < Blob >& m , const string & s , Hint ); // once upon a time, a hint was used","title":"Example"},{"location":"Functions/#note_14","text":"\uc774 \ubb38\uc81c\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 1980\ub144\ub300 \ucd08\uc5d0 \uc774\ub984 \uc5c6\ub294 \ub9e4\uac1c\ubcc0\uc218\ub97c \ud5c8\uc6a9\ud558\uac8c \ub418\uc5c8\ub2e4","title":"Note"},{"location":"Functions/#enforcement_8","text":"\uc774\ub984\uc774 \uc788\uc9c0\ub9cc \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Functions/#fcall-parameter-passing","text":"\ud568\uc218\uc5d0 \uc778\uc790\ub97c \uc804\ub2ec\ud558\uace0 \ubc18\ud658\uac12\uc744 \ubc1b\ub294\ub370\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc774 \uc788\ub2e4.","title":"F.call: \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec(Parameter passing)"},{"location":"Functions/#f15","text":"","title":"F.15: \uc815\ubcf4\ub97c \uc804\ub2ec \ud560 \ub54c \ub2e8\uc21c\ud558\uace0 \uad00\uc2b5\uc801\uc778 \ubc29\ubc95\uc744 \uc120\ud638\ud558\ub77c"},{"location":"Functions/#reason_9","text":"\"\ubcc4\ub098\uba74\uc11c \uad50\ubb18\ud55c\" \uae30\ubc95\uc740 \uae5c\uc9dd\ub180\ub784\ub9cc\ud55c \ubc84\uadf8\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\uac70\ub098, \ub2e4\ub978 \ud504\ub85c\uadf8\ub798\uba38\uac00 \ucf54\ub4dc\ub97c \uc774\ud574\ud558\ub294\ub370 \uc5b4\ub835\uac8c \ub9cc\ub4e0\ub2e4. \uc815\ub9d0\ub85c \uc77c\ubc18\uc801\uc778 \uae30\ubc95\uc744 \ub118\uc5b4\uc11c\ub294 \ubc29\ubc95\uc73c\ub85c \ucd5c\uc801\ud654\ub97c \ud574\uc57c \ud55c\ub2e4\uba74 \uaf2d \ud544\uc694\ud55c \uac1c\uc120\uc0ac\ud56d\uc774\ub77c\ub294\uac83\uc744 \ud655\uc2e0\ud560 \uc218 \uc788\uc5b4\uc57c\ud558\uace0, \uc774\uc2dd\uc131\uc774 \uc5c6\uc744 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc11c\ub098 \uc8fc\uc11d\uc744 \ub0a8\uaca8\uc57c \ud55c\ub2e4. \uc544\ub798\uc758 \ud45c\ub294 \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc758 \uc870\uc5b8(F.16-21)\uc744 \uc694\uc57d\ud55c \uac83\uc774\ub2e4. \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec(Normal): \ub9e4\uac1c\ubcc0\uc218 \uc804\ub2ec(Advanced): \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc \uace0\uae09 \uae30\uc220\uc744 \uc0ac\uc6a9\ud558\uace0, \uc8fc\uc11d\uc73c\ub85c \ubb38\uc11c\ud654\ud558\ub77c.","title":"Reason"},{"location":"Functions/#f16-in","text":"","title":"F.16: \"\uc785\ub825(in)\" \ub9e4\uac1c\ubcc0\uc218\ub294 \ubcf5\uc0ac \ube44\uc6a9\uc774 \uc801\uac8c \ub4dc\ub294 \ud0c0\uc785\uc758 \uacbd\uc6b0 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uace0, \uadf8 \uc678\uc5d0\ub294 \uc0c1\uc218 \ucc38\uc870\ud615\uc73c\ub85c \uc804\ub2ec\ud558\ub77c"},{"location":"Functions/#reason_10","text":"\ub450 \uacbd\uc6b0 \ubaa8\ub450 \ud638\ucd9c\uc790\uac00 \uc804\ub2ec\uc778\uc790\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ub610\ud55c r-value \ucd08\uae30\ud654\ub97c \ud5c8\uc6a9\ud55c\ub2e4. \"\ud070 \ube44\uc6a9 \uc5c6\uc774 \ubcf5\uc0ac\" \ud55c\ub2e4\ub294 \uac83\uc740 \uc2e4\ud589\uae30(machine)\uc758 \uad6c\uc870(architecture)\uc5d0 \ub530\ub77c \ub2e4\ub974\ub2e4. \ud558\uc9c0\ub9cc \ubcf4\ud1b5 2,3\uac1c\uc758 \uc6cc\ub4dc(double, \ud3ec\uc778\ud130, \ucc38\uc870)\ub97c \uac12\uc73c\ub85c \uc804\ub2ec\ud560\ub54c \ucd5c\uc801\uc774\ub2e4. \ube44\uc6a9\uc774 \uc801\ub2e4\uba74, \ub2e8\uc21c\uc131\uacfc \uc548\uc804\uc131\uc5d0\uc11c \ubcf5\uc0ac\ubcf4\ub2e4 \ub098\uc740 \ubc29\ubc95\uc740 \uc5c6\ub2e4. \ub610\ud55c \uc791\uc740 \uac1c\uccb4(2,3\uac1c \uc6cc\ub4dc\uae4c\uc9c0)\uc5d0 \ub300\ud574\uc120 \ucc38\uc870\ubcf4\ub2e4 \ubcf5\uc0ac\uac00 \ube60\ub978\ub370 \ud568\uc218\uc5d0\uc11c \uac04\uc811(in-direct)\uc811\uadfc\uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4.","title":"Reason"},{"location":"Functions/#example_10","text":"void f1 ( const string & s ); // OK: pass by reference to const; always cheap void f2 ( string s ); // bad: potentially expensive void f3 ( int x ); // OK: Unbeatable void f4 ( const int & x ); // bad: overhead on access in f4() \"\uc785\ub825 \uc804\uc6a9\" \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ub41c r-value\ub97c \ucd5c\uc801\ud654\ud558\uace0\uc790 \ud55c\ub2e4\uba74: \ud568\uc218\uc5d0\uc11c \ubb34\uc870\uac74\uc801\uc73c\ub85c \uc804\ub2ec\uc778\uc790\ub97c \uc774\ub3d9(move)\ubc1b\ub294\ub2e4\uba74, && \ub97c \uc0ac\uc6a9\ud558\ub77c. F.18 \ucc38\uace0 \uc778\uc790\uc758 \ubcf5\uc0ac\ubcf8\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ub9e4\uac1c\ubcc0\uc218\uc5d0 (l-value\uc778 \uacbd\uc6b0) const& \ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uc640 (r-value\uc778 \uacbd\uc6b0) && \ub97c \ubc1b\uc544 \ud544\uc694\ud55c \uc601\uc5ed\uc5d0 std::move \ud558\ub294 \ud568\uc218\ub97c \uc911\ubcf5 \uc815\uc758\ud558\ub77c. \uc6d0\ub798 \uc774\ub294 \"will-move-from\"\uc744 \uc911\ubcf5\uc815\uc758\ud55c \uac83\uc774\ub2e4. F.18 \ucc38\uace0 \"\uc785\ub825 + \ubcf5\uc0ac\"\uac00 \uc5ec\ub7ff \ubc1c\uc0dd\ud558\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\uc5d0\ub294, \"perfect forwarding\" \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\ub77c. F.19 \ucc38\uace0","title":"Example"},{"location":"Functions/#example_11","text":"int multiply ( int , int ); // just input ints, pass by value // suffix is input-only but not as cheap as an int, pass by const& string & concatenate ( string & , const string & suffix ); void sink ( unique_ptr < widget > ); // input only, and moves ownership of the widget \uc544\ub798\uc640 \uac19\uc740 \"\ub09c\ud574\ud55c \uae30\uc220\"\uc740 \uc9c0\uc591\ud558\ub77c: \"\ud6a8\uc728\uc801\uc774\ub77c\uc11c\" \uc778\uc790\ub97c T&& \ub85c \uc804\ub2ec\ud55c\ub2e4. && \ub85c \uc804\ub2ec\ud568\uc73c\ub85c\uc368 \ubc1c\uc0dd\ud558\ub294 \uc131\ub2a5 \ud5a5\uc0c1\uc5d0 \ub300\ud55c \ub8e8\uba38\ub294 \uc798\ubabb\ub418\uc5c8\uace0 \uae68\uc9c0\uae30 \uc27d\ub2e4(\uc18d\ub2e8\ud558\uc9c0 \ub9d0\uace0 F.18 \uc640 F.19 \ub97c \ucc38\uace0\ud558\ub77c) \ub300\uc785\uc5d0\uc11c const T& \ub97c \ubc18\ud658\ud558\uac70\ub098 \ube44\uc2b7\ud55c \uc5f0\uc0b0\uc744 \uc218\ud589\ud55c\ub2e4 ( F.47 \ucc38\uace0)","title":"Example"},{"location":"Functions/#example_12","text":"Matrix \uac00 \uc774\ub3d9 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uc790(\uc544\ub9c8\ub3c4 \uc6d0\uc18c\ub4e4\uc744 std::vector \uc5d0 \ubcf4\uad00\ud558\uace0 \uc788\ub2e4): Matrix operator + ( const Matrix & a , const Matrix & b ) { Matrix res ; // ... fill res with the sum ... return res ; } Matrix x = m1 + m2 ; // move constructor y = m3 + m3 ; // move assignment","title":"Example"},{"location":"Functions/#notes","text":"\ubc18\ud658 \uac12 \ucd5c\uc801\ud654\ub294 \ub300\uc785\uc5d0 \ub300\ud574\uc11c\ub294 \ub3d9\uc791\ud558\uc9c0 \uc54a\uc9c0\ub9cc, \uc774\ub3d9 \ub300\uc785\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc801\uc6a9\ub41c\ub2e4. \ucc38\uc870\ub294 \uc5b8\uc5b4 \uaddc\uce59\uc5d0 \uc758\ud574 \uc720\ud6a8\ud55c \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a8\ub2e4\uace0 \uac00\uc815\ud558\uae30 \ub54c\ubb38\uc5d0, null \ucc38\uc870\ub294 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. optional \uac12\uc5d0 \ub300\ud574 \uc54c\uace0 \uc788\ub2e4\uba74, \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\uac70\ub098, std::optional \ud639\uc740 \"\uac12\uc774 \uc5c6\uc74c\"\uc744 \uc758\ubbf8\ud558\ub294 \ud2b9\ubcc4\ud55c \uac12\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Notes"},{"location":"Functions/#enforcement_9","text":"(\uc26c\uc6c0) (\uae30\ubcf8 \uc0ac\ud56d) \uc778\uc790\uc758 \ud06c\uae30\uac00 4 * sizeof(int) \ubcf4\ub2e4 \ud06c\uba74 \uacbd\uace0\ud55c\ub2e4. const \ucc38\uc870\ub97c \uc804\ub2ec\ud558\ub3c4\ub85d \uc81c\uc548\ud55c\ub2e4 (\uc26c\uc6c0) (\uae30\ubcf8 \uc0ac\ud56d) const \ucc38\uc870\ub85c \uc804\ub2ec\ub418\ub294 \uc778\uc790\uc758 \ud06c\uae30\uac00 3 * sizeof(int) \ubcf4\ub2e4 \uc791\ub2e4\uba74 \uacbd\uace0\ud55c\ub2e4. \uac12 \uc804\ub2ec\uc744 \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud55c\ub2e4 (\uc26c\uc6c0) (\uae30\ubcf8 \uc0ac\ud56d) const \ucc38\uc870 \ub9e4\uac1c\ubcc0\uc218\uac00 move \ub418\uba74 \uacbd\uace0\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f17-in-out","text":"","title":"F.17: \"\uc785\ucd9c\ub825(in-out)\" \ub9e4\uac1c\ubcc0\uc218\ub294 \ube44\uc0c1\uc218 \ucc38\uc870\ud615\uc73c\ub85c \uc804\ub2ec\ud558\ub77c"},{"location":"Functions/#reason_11","text":"\ud638\ucd9c\uc790\uc5d0\uac8c \uac12\uc774 \ubcc0\uacbd\ub420 \uc218 \uc788\ub2e4\ub294 \uc810\uc744 \ubd84\uba85\ud788 \ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Functions/#example_13","text":"void update ( Record & r ); // assume that update writes to r","title":"Example"},{"location":"Functions/#note_15","text":"T& \uc778\uc790\ub294 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc \ubc1b\uc544\uc62c \uc218\ub3c4 \uc788\ub2e4. \ub54c\ubb38\uc5d0 T& \ub294 \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\uac00 \ub420 \uc218 \uc788\ub2e4. \uc774\ub85c \uc778\ud574 \ubb38\uc81c\uac00 \ub418\uac70\ub098 \uc624\ub958\uc758 \uc6d0\uc778\uc774 \ub418\uae30\ub3c4 \ud55c\ub2e4: void f ( string & s ) { s = \"New York\" ; // non-obvious error } void g () { string buffer = \".................................\" ; f ( buffer ); // ... } \uc5ec\uae30\uc11c, g() \uc791\uc131\uc790\ub294 f() \uc5d0\uac8c \ubc84\ud37c\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc9c0\ub9cc, f() \ub294 \ucc38\uc870\ub97c \ubcc0\uacbd\ud574\ubc84\ub9b0\ub2e4 (\uc774\ub294 \ubb38\uc790\ub4e4\uc744 \ub2e8\uc21c\ud788 \ubcf5\uc0ac\ud558\ub294 \uac83\ubcf4\ub2e4 \ube44\uc6a9\uc774 \uc880 \ub354 \ubc1c\uc0dd\ud55c\ub2e4). g() \uc5d0\uc11c buffer \uc758 \ud06c\uae30\ub97c \uc798\ubabb \uac00\uc815\ud55c\ub2e4\uba74 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Functions/#enforcement_10","text":"(\uc911\uac04) (\uae30\ubcf8 \uc0ac\ud56d) \ud568\uc218 \ub0b4\uc5d0\uc11c \uac12\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\ub294 \ube44 const \ucc38\uc870\ub97c \uacbd\uace0\ud55c\ub2e4 (\uc26c\uc6c0) (\uae30\ubcf8 \uc0ac\ud56d) const \ucc38\uc870 \ub9e4\uac1c\ubcc0\uc218\uac00 move \ub418\uba74 \uacbd\uace0\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f18-will-move-from-x-stdmove","text":"","title":"F.18: \"\ub118\uaca8\uc8fc\ub294(will-move-from)\" \ub9e4\uac1c\ubcc0\uc218\ub294 X&amp;&amp;\ud0c0\uc785\uacfc std::move\ub85c \uc804\ub2ec\ud558\ub77c"},{"location":"Functions/#reason_12","text":"\ud6a8\uc728\uc801\uc774\uace0 \ud638\ucd9c\ud558\ub294 \uc9c0\uc810\uc5d0\uc11c \ubc84\uadf8\ub97c \uc5c6\uc564\ub2e4: X&& \ub294 r-value\uc5d0 \uc5f0\uacb0\ub418\uba70(bind), l-value\ub97c \uc804\ub2ec\ud558\ub294 \uacbd\uc6b0 \uba85\uc2dc\uc801\uc73c\ub85c std::move \ub97c \ud638\ucd9c\ud574\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Functions/#example_14","text":"void sink ( vector < int >&& v ) { // sink takes ownership of whatever the argument owned // usually there might be const accesses of v here store_somewhere ( std :: move ( v )); // usually no more use of v here; it is moved-from } store_somewhere() \ub97c \ud638\ucd9c\ud560 \ub54c std::move(v) \ub97c \uc0ac\uc6a9\ud55c \uacb0\uacfc v \uac00 \uac12\uc744 \ub118\uaca8\uc900(moved-from) \uc0c1\ud0dc\ub85c \ub9cc\ub4e0\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c. \uc774\ub294 \uc704\ud5d8\ud560 \uc218\ub3c4 \uc788\ub2e4 .","title":"Example"},{"location":"Functions/#exception_3","text":"unique_ptr \uc640 \uac19\uc740 \uc720\uc77c\ud55c \uc18c\uc720\uc790 \ud0c0\uc785\ub4e4\uc740 \uc774\ub3d9\ub9cc \uac00\ub2a5(move-only)\ud558\uba70 \uc27d\uac8c \uc774\ub3d9\ub41c\ub2e4(cheap-to-move). \uc774 \ud0c0\uc785\ub4e4\uc740 \uc27d\uac8c \uac12 \uc804\ub2ec(pass by value) \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uace0 \uc218\ud589\ud560 \uc218 \uc788\ub2e4. \uac12 \uc804\ub2ec\uc740 \uc774\ub3d9 \uc5f0\uc0b0\uc774 \ud55c\ubc88 \ub354 \ubc1c\uc0dd\ud558\uc9c0\ub9cc, \ubd84\uba85\ud568\uacfc \ub2e8\uc21c\ud568\uc744 \uc6b0\uc120\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: template < class T > void sink ( std :: unique_ptr < T > p ) { // use p ... possibly std::move(p) onward somewhere else } // p gets destroyed","title":"Exception"},{"location":"Functions/#enforcement_11","text":"\ubaa8\ub4e0 std::move \uc5c6\uc774 X&& \ub9e4\uac1c\ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4 (\uc774\ub54c X \ub294 \ud15c\ud50c\ub9bf \uc778\uc790\uac00 \uc544\ub2c8\ub2e4) \uac12\uc744 \ub118\uaca8\uc900(moved-from) \uac1c\uccb4\uc5d0 \uc811\uadfc\ud558\uba74 \uc9c0\uc801\ud55c\ub2e4 \uc870\uac74\ubd80\ub85c \uac1c\uccb4\ub97c \uc774\ub3d9\uc2dc\ud0a4\uc9c0 \ub9d0\uc544\ub77c","title":"Enforcement"},{"location":"Functions/#f19-forward-tp-stdforward","text":"","title":"F.19: \"\uc804\ub2ec(forward)\" \ub9e4\uac1c\ubcc0\uc218\ub294 TP&amp;&amp;\ud0c0\uc785\uacfc std::forward\ub85c\ub9cc \uc804\ub2ec\ud558\ub77c"},{"location":"Functions/#reason_13","text":"\ub9cc\uc57d \uac1c\uccb4\uac00 \ud574\ub2f9 \ud568\uc218\uc5d0\uc11c \ubc14\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uace0 \ub2e4\ub978 \ucf54\ub4dc\ub85c \uc804\ub2ec\ub41c\ub2e4\uba74, \uadf8 \ud568\uc218\ub294 \uc804\ub2ec\uc778\uc790\uac00 \uc0c1\uc218( const )\uc778 \uacbd\uc6b0\uc774\uac70\ub098 r-value\uc778 \uacbd\uc6b0\uc5d0\ub3c4 \ub3d9\uc791\ud558\ub3c4\ub85d \uc791\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4. TP \uac00 \ud15c\ud50c\ub9bf\ud615 \ub9e4\uac1c\ubcc0\uc218\uba74 TP&& \ub294 \ud3ec\uc6cc\ub529 \ucc38\uc870\uac00 \ub41c\ub2e4 -- \uc774 \ub54c \uc0c1\uc218 \uc18d\uc131\uacfc rvalue \uc18d\uc131\uc740 \ubb34\uc2dc \ub418\uae30\ub3c4\ud558\uace0 \ubcf4\uc874 \ub418\uae30\ub3c4 \ud55c\ub2e4. \uadf8\ub798\uc11c T&& \ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \ubcc0\uc218\uc758 \uc0c1\uc218 \uc18d\uc131\uacfc rvalue \uc18d\uc131\uc5d0 \uac8c\uc758\uce58 \uc54a\ub294\ub2e4\ub294 \uc758\ubbf8\ub97c \ub0b4\ud3ec\ud558\uc9c0\ub9cc (\uc5b4\ucc28\ud53c \ubb34\uc2dc\ub418\uae30 \ub54c\ubb38\uc5d0), \uac12\uc744 \uc804\ub2ec\ud558\ub294 \ucf54\ub4dc\uc5d0\uc11c\ub294 \uc0c1\uc218 \uc18d\uc131\uacfc rvalue \uc18d\uc131\uc744 \uc2e0\uacbd\uc4f4\ub2e4 (\ubcf4\uc874\uc774 \ub418\uae30 \ub54c\ubb38\uc5d0). TP&& \ud615 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc784\uc2dc\uac1d\uccb4\uac00 \uc804\ub2ec\ub418\uba74 \ud568\uc218\uac00 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548\uc5d0\ub294 \uc720\ud6a8\ud558\uae30 \ub54c\ubb38\uc5d0 \uc548\uc804\ud558\ub2e4. TP&& \ud615 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud56d\uc0c1 std::forward \ub97c \uc774\uc6a9\ud558\uc5ec \ud568\uc218\uc758 \ubab8\uccb4\uc5d0\uc11c \uc804\ub2ec\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Functions/#example_15","text":"template < class F , class ... Args > inline auto invoke ( F f , Args && ... args ) { return f ( forward < Args > ( args )...); } ??? calls ???","title":"Example"},{"location":"Functions/#enforcement_12","text":"\ubaa8\ub4e0 \uc815\uc801 \uacbd\ub85c\uc5d0 \ub300\ud574 \ub2e8 \ud55c\ubc88 std::forward \ud558\ub294 \uacbd\uc6b0\ub97c \uc81c\uc678\ud558\uace0 TP&& \ub9e4\uac1c\ubcc0\uc218\ub97c \ubc1b\ub294 \ud568\uc218\ub97c \uc9c0\uc801\ud55c\ub2e4 ( TP \ub294 \ud15c\ud50c\ub9bf \uc778\uc790\uc758 \uc774\ub984\uc774\ub2e4).","title":"Enforcement"},{"location":"Functions/#f20-out","text":"","title":"F.20: \"\ucd9c\ub825(out)\"\uc5d0\ub294 \ub9e4\uac1c\ubcc0\uc218\ubcf4\ub2e4\ub294 \uac12\uc744 \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc744 \uc120\ud638\ud558\ub77c"},{"location":"Functions/#reason_14","text":"\ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785\uc73c\ub85c & \ub294 \uc785/\ucd9c\ub825 \ud639\uc740 \ucd9c\ub825\uc73c\ub85c\ub9cc \uc4f0\uc77c \uc218 \uc788\ub294 \ubc18\uba74, \ubc18\ud658 \uac12\uc740 \uc798\ubabb \uc0ac\uc6a9\ub418\uae30 \uc5b4\ub824\uc6b0\uba70 \ud568\uc218\uc758 \uacb0\uacfc\ub77c\ub294 \uc810\uc744 \uba85\ud655\ud788 \ud55c\ub2e4. \uc774\ub294 \uc131\ub2a5 \ud5a5\uc0c1\uacfc \uba54\ubaa8\ub9ac \uad00\ub9ac\ub97c \ud53c\ud558\uae30 \uc704\ud574 \uc554\ubb35\uc801\uc73c\ub85c \uc774\ub3d9 \uc5f0\uc0b0\uc744 \uc0ac\uc6a9\ud558\ub294 \ud45c\uc900 \ucee8\ud14c\uc774\ub108\ub4e4 \uac19\uc740 \ud070 \uac1c\uccb4\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4. \ub9cc\uc57d \ub2e4\uc218\uc758 \uac12\uc744 \ubc18\ud658\ud574\uc57c \ud55c\ub2e4\uba74, tuple \uc774\ub098 \uba64\ubc84\ub97c \uac00\uc9c4 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Reason"},{"location":"Functions/#example_16","text":"// OK: return pointers to elements with the value x vector < const int *> find_all ( const vector < int >& , int x ); // Bad: place pointers to elements with value x in-out void find_all ( const vector < int >& , vector < const int *>& out , int x );","title":"Example"},{"location":"Functions/#note_16","text":"(\uac01\uac01\uc758 \uc774\ub3d9 \ube44\uc6a9\uc774 \ud06c\uc9c0 \uc54a\uc740) \uba64\ubc84\ub97c \ub9ce\uc774 \uac00\uc9c4 struct \ub294 \uc804\uccb4\uc801\uc73c\ub85c\ub294 \uc774\ub3d9 \ube44\uc6a9\uc774 \ud074 \uc218 \uc788\ub2e4. const \uac12\uc744 \ubc18\ud658\ud558\ub294 \uac83\uc740 \ucd94\ucc9c\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc624\ub798\ub41c \uc870\uc5b8\ub4e4\uc740 \ubb34\uc758\ubbf8\ud558\ub2e4: \uc758\ubbf8\ub3c4 \uc5c6\uace0 \uc774\ub3d9 \uc758\ubbf8\uad6c\uc870\ub97c \ubc29\ud574\ud55c\ub2e4. const vector < int > fct (); // bad: that \"const\" is more trouble than it is worth vector < int > g ( const vector < int >& vx ) { // ... fct () = vx ; // prevented by the \"const\" // ... return fct (); // expensive copy: move semantics suppressed by the \"const\" } \ubc18\ud658 \uac12\uc5d0 const \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc784\uc2dc \ubcc0\uc218\uc5d0 \ub300\ud55c (\uad49\uc7a5\ud788 \ub4dc\ubb38) \uc6b0\ubc1c\uc801 \uc811\uadfc\uc744 \ub9c9\uae30 \uc704\ud55c \uac83\uc774\ub2e4. \uc804\ub2ec \uc778\uc790\uc5d0 const \uac00 \uc0ac\uc6a9\ub418\uba74 (\ub9e4\uc6b0 \uc790\uc8fc \ubc1c\uc0dd\ud558\ub294) \uc774\ub3d9 \uc758\ubbf8\uad6c\uc870\ub97c \ub9c9\ub294\ub2e4.","title":"Note"},{"location":"Functions/#exceptions","text":"\uc0c1\uc18d \uacc4\uce35\uad6c\uc870\uc5d0 \uc18d\ud55c \ud0c0\uc785\ucc98\ub7fc \uac12 \ud0c0\uc785\uc774 \uc544\ub2cc \uacbd\uc6b0, \uac1c\uccb4\ub97c unique_ptr \ud639\uc740 shared_ptr \ub85c \ubc18\ud658\ud558\ub77c \ub9ce\uc57d \uac12\uc758 \uc774\ub3d9 \ube44\uc6a9\uc774 \ud06c\ub2e4\uba74 ( array<BigPOD> \uac19\uc740 \uacbd\uc6b0), \uc790\uc720 \uc800\uc7a5\uc18c\uc5d0 \ud560\ub2f9\ud558\uace0 \uadf8 \ud578\ub4e4\uc744 ( unique_ptr \uc640 \uac19\uc740) \ubc18\ud658\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c. \ub610\ub294 const \uac00 \uc544\ub2cc \ucc38\uc870(\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218)\ub97c \uc804\ub2ec\ud574 \uac1c\uccb4\ub97c \ucc44\uc6cc\ub123\ub3c4\ub85d \ud558\ub77c \ucd5c\ub300 \ud06c\uae30(capacity)\ub97c \uac00\uc9c4 \uac1c\uccb4(\uc608\ub97c \ub4e4\uc5b4 std::string , std::vector )\ub97c \uc5ec\ub7ec \ud568\uc218 \ud638\ucd9c\uacfc\uc815\uc5d0\uc11c \uc7ac\uc0ac\uc6a9\ud558\uace0\uc790 \ud55c\ub2e4\uba74, \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub85c \ucc38\uc870\ub97c \uc804\ub2ec\ud558\ub77c .","title":"Exceptions"},{"location":"Functions/#example_17","text":"struct Package { // exceptional case: expensive-to-move object char header [ 16 ]; char load [ 2024 - 16 ]; }; Package fill (); // Bad: large return value void fill ( Package & ); // OK int val (); // OK void val ( int & ); // Bad: Is val reading its argument","title":"Example"},{"location":"Functions/#enforcement_13","text":"\ud070 \ube44\uc6a9 \uc5c6\uc774 \ubc18\ud658\ud560 \uc218 \uc788\uc73c\uba74\uc11c \uac12\uc744 \ubcc0\uacbd\ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub294 \ube44 const \ucc38\uc870 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc9c0\uc801\ud558\ub77c; \uc774\ub4e4\uc740 \"\ucd9c\ub825\" \ubc18\ud658 \uac12\uc774 \uc801\uc808\ud558\ub2e4. const \ubc18\ud658 \uac12\uc744 \uc9c0\uc801\ud55c\ub2e4. const \ub97c \uc81c\uac70\ud558\ub3c4\ub85d \uad8c\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f21","text":"","title":"F.21: \"\ucd9c\ub825\"\uac12 \uc5ec\ub7ec \uac1c\ub97c \ubc18\ud658\ud560 \ub54c\ub294 \ud29c\ud50c\uc774\ub098 \uad6c\uc870\uccb4\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Functions/#reason_15","text":"\ubc18\ud658 \uac12\uc740 \uadf8 \uc790\uccb4\ub85c \ubb38\uc11c\uac00 \ud544\uc694\ud558\uc9c0 \uc54a\uace0 \"\ucd9c\ub825 \uc804\uc6a9\"\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. C++ \uc5d0\uc11c\ub294 \ub2e4\uc218\uc758 \uac12\uc744 \ubc18\ud658\ud560\ub54c\ub294 tuple ( pair \ub97c \ud3ec\ud568\ud574)\ub97c \uc4f4\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\ub77c, \ud638\ucd9c\ud55c \uc9c0\uc810\uc5d0\uc11c tie \ub97c \uc0ac\uc6a9\ud574 \ubc1b\uc744 \uac83\uc774\ub2e4. \ubc18\ud658 \uac12\uc5d0 \uc758\ubbf8\uad6c\uc870\uac00 \uc788\ub2e4\uba74 \ubcc4\ub3c4\uc758 struct \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub77c. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\uc5d0\uc11c\ub294 (\uc774\ub984 \uc5c6\ub294) tuple \uc774 \uc720\uc6a9\ud558\ub2e4.","title":"Reason"},{"location":"Functions/#example_18","text":"// BAD: output-only parameter documented in a comment int f ( const string & input , /*output only*/ string & output_data ) { // ... output_data = something (); return status ; } // GOOD: self-documenting tuple < int , string > f ( const string & input ) { // ... return make_tuple ( status , something ()); } \uc0ac\uc2e4, C++98\uc758 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c\ub294 pair \uac00 \uac1c\uccb4 2\uac1c\ub97c \ubb36\uc740 tuple \uacfc \uac19\uae30 \ub54c\ubb38\uc5d0 \uc774 \uae30\ub2a5\uc744 \ud3b8\ub9ac\ud558\uac8c \uc0ac\uc6a9\ud558\uace0 \uc788\uc5c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, set<string> my_set \uc774 \uc8fc\uc5b4\uc84c\ub2e4\uace0 \uac00\uc815\ud558\uba74: // C++98 result = my_set . insert ( \"Hello\" ); if ( result . second ) do_something_with ( result . first ); // workaround C++11\uc5d0\uc11c\ub294 \uc774\ub807\uac8c \uc791\uc131\ud560 \uc218 \uc788\ub2e4, \uacb0\uacfc\uac12\ub4e4\uc744 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \uc9c0\uc5ed\ubcc0\uc218\uc5d0 \ub300\uc785\ud55c\ub2e4: Sometype iter ; // default initialize if we haven't already Someothertype success ; // used these variables for some other purpose tie ( iter , success ) = my_set . insert ( \"Hello\" ); // normal return value if ( success ) do_something_with ( iter ); C++ 17\uc5d0\uc11c\ub294 \ub2e4\uc218\uc758 \ubcc0\uc218\ub4e4\uc744 \uc120\uc5b8\uacfc \ub3d9\uc2dc\uc5d0 \ucd08\uae30\ud654 \ud560 \uc218 \uc788\ub294 \"structured bindings\"\uc744 \uc9c0\uc6d0\ud55c\ub2e4: if ( auto [ iter , success ] = my_set . insert ( \"Hello\" ); success ) do_something_with ( iter );","title":"Example"},{"location":"Functions/#exception_4","text":"\ub54c\uc5d0 \ub530\ub77c\uc11c\ub294 \uac1c\uccb4\uc758 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\uae30 \uc704\ud574 \ud568\uc218\uc5d0 \uac1c\uccb4\ub97c \uc804\ub2ec\ud574\uc57c \ud560 \uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0, \uac1c\uccb4\ub97c T& \ucc38\uc870\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \ub9ce\uc740 \uacbd\uc6b0 \uc62c\ubc14\ub978 \ubc29\ubc95\uc774\ub2e4. \ubc18\ud658 \uac12\uc73c\ub85c \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc804\ub2ec\ud558\ub294 \uac83\uc740 \uc885\uc885 \ubd88\ud544\uc694\ud558\ub2e4. \uc608\ub97c \ub4e4\uc5b4: istream & operator >> ( istream & is , string & s ); // much like std::operator>>() for ( string s ; cin >> s ; ) { // do something with line } \uc5ec\uae30\uc11c s \uc640 cin \ubaa8\ub450 \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ub418\uc5c8\ub2e4. cin \uc740 \ucc38\uc870\ub85c \uc804\ub2ec\ub418\uc5b4 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4. s \ub294 \ubc18\ubcf5\uc801\uc73c\ub85c \uac1c\uccb4\ub97c \ud560\ub2f9\ud558\ub294 \uac83\uc744 \ub9c9\uc73c\ub824\uace0 \uc804\ub2ec\ud55c\ub2e4. \ucc38\uc870\ub85c \uc804\ub2ec\ub41c s \ub97c \uc7ac\uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c, s \uc758 \ucd5c\ub300 \ud06c\uae30(capacity)\ub97c \ub118\uc5b4\uc11c\ub294 \uacbd\uc6b0\uc5d0\ub9cc \uc0c8\ub85c\uc6b4 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uc774\ub7f0 \ubc29\ubc95\uc740 \ubcf4\ud1b5 \"\ud638\ucd9c\uc790\uac00 \ubbf8\ub9ac \ud560\ub2f9\ud574\uc11c \ucd9c\ub825\uc744 \ubc1b\ub294\" \ud328\ud134\uc774\ub77c\uace0 \ubd88\ub9ac\ub294\ub370, string \uc774\ub098 vector \uac19\uc740 \uba54\ubaa8\ub9ac \ud574\uc81c\uac00 \ubc1c\uc0dd\ud558\ub294 \ud0c0\uc785\ub4e4\uc5d0 \uc720\uc6a9\ud558\ub2e4. \ube44\uad50\ub97c \uc704\ud574, \uac12\uc744 \ubc18\ud658\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \ud574\uacb0\ud55c\ub2e4\uba74 \uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud558\uac8c \ub420 \uac83\uc774\ub2e4: pair < istream & , string > get_string ( istream & is ); // not recommended { string s ; is >> s ; return { is , s }; } for ( auto p = get_string ( cin ); p . first ; ) { // do something with p.second } \uc0dd\uac01\ubcf4\ub2e4 \uc544\ub984\ub2f5\uc9c0 \uc54a\uace0 \uc131\ub2a5\uc5d0\ub3c4 \uc88b\uc9c0 \uc54a\ub2e4. \uc774\ub294 \uc0ac\uc2e4 \uc785\ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\uc5d0 \uc758\uc874\ud558\uae30 \ub54c\ubb38\uc5d0 \uc5c4\ubc00\ud558\uac8c\ub294 \uaddc\uce59(F.21)\uc5d0\uc11c \ub9d0\ud558\ub294 \ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\uc758 \uc608\uc678\uac00 \uc544\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ub9d0\ud558\uc9c0 \uc54a\uc544\uc11c \ub193\uce58\ub294 \uac83\ubcf4\ub2e4\ub294 \uba85\uc2dc\uc801\uc73c\ub85c \uc5b8\uae09\ud558\ub294 \uac83\uc774 \ubd84\uba85\ud558\uae30 \ub54c\ubb38\uc5d0 \uc791\uc131\ub418\uc5c8\ub2e4.","title":"Exception"},{"location":"Functions/#note_17","text":"\ud2b9\uc815\ud55c \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc744 \ubc18\ud658\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud55c \uacbd\uc6b0\ub3c4 \ub9ce\uc774 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74: struct Distance { int value ; int unit = 1 ; // 1 means meters }; Distance d1 = measure ( obj1 ); // access d1.value and d1.unit auto d2 = measure ( obj2 ); // access d2.value and d2.unit auto [ value , unit ] = measure ( obj3 ); // access value and unit; somewhat redundant // to people who know measure() auto [ x , y ] = measure ( obj4 ); // don't; it's likely to be confusing \ucd94\uc0c1\ud654\uac00 \uc544\ub2cc \ub3c5\ub9bd\uc801\uc778 \uc874\uc7ac\ub4e4(independent entities)\uc744 \ud45c\ud604\ud560 \ub54c\ub294 pair \uc640 tuple \uc740 \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \ubc94\uc6a9\uc801(overly-generic)\uc77c \uc218 \uc788\ub2e4. \ub2e4\ub978 \uc608\ub85c\ub294, tuple \ub300\uc2e0 \ud2b9\uc815 \ud0c0\uc785\uacfc \ube44\uc2b7\ud55c variant<T, error_code> \ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"Functions/#enforcement_14","text":"\ucd9c\ub825 \ubaa9\uc801\uc758 \ub9e4\uac1c\ubcc0\uc218\ub294 \ubc18\ud658\uac12\uc73c\ub85c \ub300\uccb4\ub418\uc5b4\uc57c \ud55c\ub2e4. \ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub294 \ud568\uc218(\uba64\ubc84\ud568\uc218 \ud3ec\ud568)\uc5d0\uc11c \uac12\uc744 \ubcc0\uacbd\ud558\ub294 const \uac00 \uc544\ub2cc \ub9e4\uac1c\ubcc0\uc218\ub97c \uc758\ubbf8\ud55c\ub2e4.","title":"Enforcement"},{"location":"Functions/#f22-t-owner","text":"","title":"F.22: T* \ud639\uc740 owner\ub97c \ub2e8\uc77c \uac1c\uccb4\ub97c \uc9c0\uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Functions/#reason_16","text":"\uac00\ub3c5\uc131: \uc77c\ubc18\uc801\uc778 \ud3ec\uc778\ud130\uc640 \uac19\ub2e4. \ubd84\uc11d\ub3c4\uad6c\uc758 \ub3d9\uc791\uc744 \ub3d5\ub294\ub2e4.","title":"Reason"},{"location":"Functions/#note_18","text":"\uc804\ud1b5\uc801\uc778 C\uc640 C++ \ucf54\ub4dc\uc5d0\uc11c\ub294 T* \ub294 \uc11c\ub85c \uc5f0\uad00\uc774 \uc5c6\ub294 \ubaa9\uc801\ub4e4( weakly-related purposes)\uc5d0 \uc4f0\uc5ec\uc654\ub2e4: (\ub2e8\uc77c) \uac1c\uccb4\uc758 \ud655\uc778(identify) (\ud568\uc218\uc5d0 \uc758\ud574 \uc18c\uba78\ub418\uc9c0 \uc54a\uc558\ub2e4\ub294 \uc758\ubbf8) \uc790\uc720 \uc800\uc7a5\uc18c\uc5d0 \ud560\ub2f9\ub41c \uac1c\uccb4\uc758 \uc8fc\uc18c(\ub098\uc911\uc5d0 \ud574\uc81c\ud55c\ub2e4) nullptr \ub97c \ub2f4\uae30 \uc704\ud55c \uc6a9\ub3c4 (0\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790 \ubc30\uc5f4) \uc804\ud1b5\uc801\uc778 C \uc5b8\uc5b4 \ubb38\uc790\uc5f4 \uae38\uc774\uc640 \ud568\uaed8 \uc804\ub2ec\ub418\ub294 \ubc30\uc5f4\uc758 \uc2dc\uc791 \uc9c0\uc810 \ubc30\uc5f4 \ub0b4\uc758 \uc704\uce58\ub97c \ud45c\uc2dc \uc774\ub85c \uc778\ud574 \ucf54\ub4dc\uac00 \uc5b4\ub5a4\uc77c\uc744 \ud558\ub294\uc9c0 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6e0\uace0, \ub3c4\uad6c\uc5d0 \uc758\ud55c \ubd84\uc11d\uc744 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4e4\uc5c8\ub2e4.","title":"Note"},{"location":"Functions/#example_19","text":"void use ( int * p , int n , char * s , int * q ) { p [ n - 1 ] = 666 ; // Bad: we don't know if p points to n elements; // assume it does not or use span<int> cout << s ; // Bad: we don't know if that s points to a zero-terminated array of char; // assume it does not or use zstring delete q ; // Bad: we don't know if *q is allocated on the free store; // assume it does not or use owner } \uc544\ub798 \ucf54\ub4dc\uac00 \ub354 \ub0ab\ub2e4 void use2 ( span < int > p , zstring s , owner < int *> q ) { p [ p . size () - 1 ] = 666 ; // OK, a range error can be caught cout << s ; // OK delete q ; // OK }","title":"Example"},{"location":"Functions/#note_19","text":"owner<T*> \ub294 \uc18c\uc720\uad8c\uc744 \ud45c\ud604\ud55c\ub2e4. zstring \uc740 C \uc5b8\uc5b4 \ubb38\uc790\uc5f4\uc744 \uc758\ubbf8\ud55c\ub2e4. T* \uac00 unique_ptr<T> \uc640 \uac19\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0\uc11c \ud68d\ub4dd\ub418\uc5c8\ub2e4\uba74 \ub2e8\uc77c \uac1c\uccb4\ub97c \uc758\ubbf8\ud55c\ub2e4.","title":"Note"},{"location":"Functions/#see-also_2","text":"Support library \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130 \ud558\ub098\ub85c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c","title":"See also"},{"location":"Functions/#enforcement_15","text":"(\uc26c\uc6c0) (\ubc94\uc704 \uad00\ub828) \ud3ec\uc778\ud130 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc0b0\uc220 \uc5f0\uc0b0\uc5d0 \ub300\ud574 \uacbd\uace0\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f23-null-not_nullt","text":"","title":"F.23: \"null\"\uc774 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 not_null&lt;T&gt;\ub97c \uc0ac\uc6a9\ud574 \ud45c\uc2dc\ud558\ub77c"},{"location":"Functions/#reason_17","text":"\uba85\ud655\uc131. \ud568\uc218 \ud638\ucd9c\uc790\uac00 nullptr \uac80\uc0ac\ub97c \ud574\uc57c \ud558\ub294\uc9c0\ub97c \uba85\ud655\ud788 \ud55c\ub2e4. \uac19\uc740 \ub9e5\ub77d\uc73c\ub85c, not_null<T> \uc744 \ubc18\ud658\ud55c\ub2e4\uba74 \ud568\uc218 \ud638\ucd9c\uc790\ub294 \ubc18\ud658 \uac12\uc774 nullptr \uc778\uc9c0 \uac80\uc0ac\ud574\uc57c \ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.","title":"Reason"},{"location":"Functions/#example_20","text":"not_null<T*> \uc740 \ucf54\ub4dc\ub97c \uc77d\ub294 \ub300\uc0c1(\uae30\uacc4\uc640 \uc0ac\ub78c \ubaa8\ub450)\uc774 nullptr \ub97c \uac80\uc0ac\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \ubd84\uba85\ud788\ud55c\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c, \ub514\ubc84\uae45\ud560 \ub54c, owner<T*> \uc640 not_null<T> \uc5d0\uc11c \uc815\ud655\uc131\uc744 \uac80\uc0ac\ud558\ub294\ub370 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. \ub2e4\uc74c\uc758 \uc0ac\ub840\ub97c \uace0\ub824\ud574 \ubcf4\uc790: int length ( Record * p ); length(p) \uc744 \ud638\ucd9c\ud558\uae30 \uc804\uc5d0 p \uac00 nullptr \uc778\uc9c0 \uac80\uc0ac\ud574\uc57c \ud558\ub294\uac00? length() \uc758 \uad6c\ud604\uc5d0\uc11c p \uac00 nullptr \uc778\uc9c0 \uac80\uc0ac\ud574\uc57c \ud558\ub294\uac00? // it is the caller's job to make sure p != nullptr int length ( not_null < Record *> p ); // the implementor of length() must assume that p == nullptr is possible int length ( Record * p );","title":"Example"},{"location":"Functions/#note_20","text":"not_null<T*> \ub294 nullptr \uac00 \uc544\ub2c8\ub77c\uace0 \uc804\uc81c\ud55c\ub2e4; T* \ub294 nullptr \uc77c \uc218 \uc788\ub2e4; \ub458 \ubaa8\ub450 T* \ub85c \ud45c\ud604\ub418\ubbc0\ub85c \uc2e4\ud589\uc2dc\uac04 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Functions/#note_21","text":"not_null \ub294 \ub0b4\uc7a5 \ud3ec\uc778\ud130 \ud0c0\uc785 \ubfd0\ub9cc \uc544\ub2c8\ub77c, unique_ptr , shared_ptr , \ud639\uc740 \ub2e4\ub978 \ud3ec\uc778\ud130\ucc98\ub7fc \ub3d9\uc791\ud558\ub294 \ud0c0\uc785\ub4e4\uc5d0\ub3c4 \ub3d9\uc791\ud55c\ub2e4","title":"Note"},{"location":"Functions/#enforcement_16","text":"(\ub2e8\uc21c) \uc6d0\uc2dc \ud3ec\uc778\ud130(raw pointer)\ub97c nullptr \uc778\uc9c0 \uac80\uc0ac\ud558\uc9c0 \uc54a\uace0 \uc0ac\uc6a9\ud558\uba74 \uacbd\uace0\ud55c\ub2e4 not_null \ub97c \uc4f0\ub3c4\ub85d \uc81c\uc548\ud55c\ub2e4 (\ub2e8\uc21c) \ud3ec\uc778\ud130\uac00 \uc5ed\ucc38\uc870 \ub420 \ub54c nullptr \ub97c \uac80\uc0ac\ud560 \ub54c\ub3c4 \uc788\uace0 \uac80\uc0ac\ud558\uc9c0 \uc54a\uc744 \ub54c\ub3c4 \uc788\ub2e4\uba74 \uc624\ub958\ub85c \ucc98\ub9ac\ud55c\ub2e4 (\ub2e8\uc21c) not_null \uc774 nullptr \uc778\uc9c0 \uac80\uc0ac\ud558\ub294 \uacbd\uc6b0 \uacbd\uace0\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f24-spant-span_pt","text":"","title":"F.24: \ubc94\uc704\ub97c \uc9c0\uc815\ud560 \ub54c\ub294 span&lt;T&gt;\ud639\uc740 span_p&lt;T&gt;\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Functions/#reason_18","text":"\uba85\uc2dc\uc801\uc774\uc9c0 \uc54a\uc740 \ubc94\uc704\ub294 \uc624\ub958\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4.","title":"Reason"},{"location":"Functions/#example_21","text":"X * find ( span < X > r , const X & v ); // find v in r vector < X > vec ; // ... auto p = find ({ vec . begin (), vec . end ()}, X {}); // find X{} in vec","title":"Example"},{"location":"Functions/#note_22","text":"C++ \ucf54\ub4dc\uc5d0\uc11c \ubc94\uc704\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\ub294 \ubb34\ucc99 \ud754\ud558\ub2e4. \ubcf4\ud1b5 \uadf8\ub7f0 \ubc94\uc704\ub4e4\uc740 \uc554\ubb35\uc801\uc774\uace0 \uc815\ud655\ud55c \uc0ac\uc6a9\uc744 \ud655\uc2e0\ud558\uae30 \ub9e4\uc6b0 \uc5b4\ub835\ub2e4. \ud2b9\ud788, \ubc30\uc5f4 [p:p+n) \ub97c \ub300\uc0c1\uc73c\ub85c\ud55c (p, n) \uc804\ub2ec\uc778\uc790\uac00 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \uc2e4\uc81c\ub85c *p \ub4a4\uc5d0 n \uac1c\uc758 \uc6d0\uc18c\uac00 \uc2e4\uc7ac\ud558\ub294\uc9c0 \uc544\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4. span<T> \uc640 span_p<T> \ub294 [p:q) \ub97c \ub300\uc0c1\uc73c\ub85c \uc55e\uc11c \uc5b8\uae09\ud55c \uba85\uc81c\uac00 \uc0ac\uc2e4\uc784\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \ub2e8\uc21c\ud55c \ubcf4\uc870(helper) \ud074\ub798\uc2a4\uc774\ub2e4.","title":"Note"},{"location":"Functions/#example_22","text":"span \uc740 \uc6d0\uc18c\ub4e4\uc758 \ubc94\uc704\ub97c \ud45c\ud604\ud55c\ub2e4. \uadf8\ub7f0\ub370 \uadf8 \ubc94\uc704\uc758 \uc6d0\uc18c\ub4e4\uc744 \uc5b4\ub5bb\uac8c \ubcc0\uacbd\ud560 \uc218 \uc788\uc744\uae4c? void f ( span < int > s ) { // range traversal (guaranteed correct) for ( int x : s ) cout << x << '\\n' ; // C-style traversal (potentially checked) for ( gsl :: index i = 0 ; i < s . size (); ++ i ) cout << s [ i ] << '\\n' ; // random access (potentially checked) s [ 7 ] = 9 ; // extract pointers (potentially checked) std :: sort ( & s [ 0 ], & s [ s . size () / 2 ]); }","title":"Example"},{"location":"Functions/#note_23","text":"span<T> \uac1c\uccb4\ub294 \uc6d0\uc18c\ub97c \uc18c\uc720\ud558\uc9c0 \uc54a\uba70 \uac12\uc5d0 \uc758\ud55c \uc804\ub2ec\uc774 \uac00\ub2a5\ud560 \uc815\ub3c4\ub85c \uc791\ub2e4. span \uc744 \uc778\uc790\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc740 \ud3ec\uc778\ud130\uc640 \uae38\uc774\ub97c \ud568\uaed8 \uc804\ub2ec\ud558\ub294 \uac83\ubcf4\ub2e4 \ud6a8\uc728\uc801\uc774\ub2e4.","title":"Note"},{"location":"Functions/#see-also_3","text":"Support library","title":"See also"},{"location":"Functions/#enforcement_17","text":"(\ubcf5\uc7a1\ud568) \ud3ec\uc778\ud130\uc640 \uc815\uc218\ub97c \uc0ac\uc6a9\ud574 \ubc94\uc704\uac00 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc804\ub2ec\ub418\uba74 \uacbd\uace0\ud558\uace0 span \uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud55c\ub2e4.","title":"Enforcement"},{"location":"Functions/#f25-c-zstring-not_nullzstring","text":"","title":"F.25: C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc5d0\ub294 zstring \ud639\uc740 not_null&lt;zstring&gt;\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Functions/#reason_19","text":"C\uc5b8\uc5b4 \ud615\uc2dd\uc758 \ubb38\uc790\uc5f4\uc740 \uad11\ubc94\uc704\ud558\uac8c \uc0ac\uc6a9\ub418\uace0 \uc788\ub2e4. \uad00\ub840\uc801\uc73c\ub85c, \uc774\ub4e4\uc740 \\0 \uc73c\ub85c \ub05d\ub098\ub294 char \ubc30\uc5f4\uc774\ub77c\uace0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. C \ubb38\uc790\uc5f4\uc740 char 1\uac1c\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc640 \uad6c\ubd84\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Functions/#example_23","text":"Consider: int length ( const char * p ); length(s) \ub97c \ud638\ucd9c \ud560 \ub54c s==nullptr \uc744 \uac80\uc0ac\ud574\uc57c \ud558\ub294\uac00? length() \ubcf8\ubb38 \uc548\uc5d0\uc11c p \uac00 nullptr \uc778\uc9c0 \uac80\uc0ac\ud574\uc57c \ud558\ub294\uac00? // the implementor of length() must assume that p == nullptr is possible int length ( zstring p ); // it is the caller's job to make sure p != nullptr int length ( not_null < zstring > p );","title":"Example"},{"location":"Functions/#note_24","text":"zstring \uc740 \uc18c\uc720\uad8c\uc744 \ud45c\ud604\ud558\uc9c0 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Functions/#see-also_4","text":"Support library","title":"See also"},{"location":"Functions/#f26-unique_ptrt","text":"","title":"F.26: \ud3ec\uc778\ud130\uac00 \ud544\uc694\ud55c \uacf3\uc5d0 \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud560 \ub54c\ub294 unique_ptr&lt;T&gt;\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Functions/#reason_20","text":"unique_ptr \ub294 \ud3ec\uc778\ud130\ub97c \uc548\uc804\ud558\uace0 \ubd80\ub2f4\uc5c6\uc774(cheap) \uc804\ub2ec\ud558\ub294 \uac00\uc7a5 \uac04\ub2e8\ud55c \ubc29\ubc95\uc774\ub2e4.","title":"Reason"},{"location":"Functions/#see-also_5","text":"C.50 \ub294 \ud329\ud1a0\ub9ac \ud568\uc218\uc5d0\uc11c shared_ptr \ub97c \ubc18\ud658\ud558\ub294 \uacbd\uc6b0\ub97c \ub2e4\ub8ec\ub2e4","title":"See also"},{"location":"Functions/#example_24","text":"unique_ptr < Shape > get_shape ( istream & is ) // assemble shape from input stream { auto kind = read_header ( is ); // read header and identify the next shape on input switch ( kind ) { case kCircle : return make_unique < Circle > ( is ); case kTriangle : return make_unique < Triangle > ( is ); // ... } }","title":"Example"},{"location":"Functions/#note_25","text":"\ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uc5d0 \uc788\ub294 \uac1c\uccb4\ub77c\uba74 \uac1c\uccb4 \uadf8 \uc790\uccb4\ubcf4\ub2e4\ub294 \uc778\ud130\ud398\uc774\uc2a4(\uc0c1\uc704 \ud074\ub798\uc2a4)\uc758 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud574\uc57c \ud55c\ub2e4.","title":"Note"},{"location":"Functions/#enforcement_18","text":"(\ub2e8\uc21c) \ud568\uc218\uac00 \uc720\ud6a8\ubc94\uc704 \ub0b4\uc5d0\uc11c \ud560\ub2f9\ud55c \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud55c\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. unique_ptr \ud639\uc740 shared_ptr \ub97c \uc4f0\ub3c4\ub85d \uc81c\uc548\ud558\ub77c","title":"Enforcement"},{"location":"Functions/#f27-shared_ptrt","text":"","title":"F.27: \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud560 \ub54c\ub294 shared_ptr&lt;T&gt;\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Functions/#reason_21","text":"std::shared_ptr \ub85c \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud558\ub294 \uac83\uc740 \ud45c\uc900\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc774\ub2e4. \uc774\ub97c \uc0ac\uc6a9\ud558\uba74, \ub9c8\uc9c0\ub9c9 \uc18c\uc720\uc790\uac00 \uac1c\uccb4\ub97c \uc18c\uba78\uc2dc\ud0a8\ub2e4.","title":"Reason"},{"location":"Functions/#example_25","text":"shared_ptr < const Image > im { read_image ( somewhere ) }; std :: thread t0 { shade , args0 , top_left , im }; std :: thread t1 { shade , args1 , top_right , im }; std :: thread t2 { shade , args2 , bottom_left , im }; std :: thread t3 { shade , args3 , bottom_right , im }; // detach threads // last thread to finish deletes the image","title":"Example"},{"location":"Functions/#note_26","text":"\uc18c\uc720\uc790\uac00 \ud558\ub098 \ubfd0\uc774\ub77c\uba74 shared_ptr \ubcf4\ub2e4\ub294 unique_ptr \uc744 \uc0ac\uc6a9\ud558\ub77c. shared_ptr \ub294 \uc18c\uc720\uad8c\uc758 \uacf5\uc720\ub97c \uc704\ud55c \uac83\uc774\ub2e4. shared_ptr \uac00 \uacf3\uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74 \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c(\ucc38\uc870 \uce74\uc6b4\ud2b8\uc5d0 \ub300\ud55c \uc6d0\uc790\uc801 \uc5f0\uc0b0 \ube44\uc6a9\uc758 \ucd1d\ud569).","title":"Note"},{"location":"Functions/#alternative","text":"\ud2b9\uc815 \ubc94\uc704\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ub418\ub294 \uac1c\uccb4 \ud558\ub098\uac00 \uacf5\uc720 \uac1c\uccb4\ub97c \uc18c\uc720\ud558\ub3c4\ub85d \ud558\ub77c. \ubaa8\ub4e0 \uc0ac\uc6a9\uc790\uac00 \uc0ac\ub77c\uc84c\uc744\ub54c(completed) \uacf5\uc720 \uac1c\uccb4\ub97c \ud30c\uad34\ud558\ub3c4\ub85d \ud55c\ub2e4.","title":"Alternative"},{"location":"Functions/#enforcement_19","text":"(\uc2e4\ud589 \ubd88\uac00) \uc81c\ub300\ub85c \ud0d0\uc9c0\ud558\uae30\uc5d4 \ub108\ubb34 \ubcf5\uc7a1\ud55c \ud328\ud134\uc744 \ub744\uace0 \uc788\ub2e4.","title":"Enforcement"},{"location":"Functions/#f60-t-t","text":"","title":"F.60: \"\uc778\uc790\uac00 \uc5c6\uc744 \uacbd\uc6b0\"\ub97c \ud5c8\uc6a9\ud55c\ub2e4\uba74 T&amp;\ubcf4\ub2e4\ub294 T*\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Functions/#reason_22","text":"\ud3ec\uc778\ud130( T* )\ub294 nullptr \uc77c \uc218 \uc788\uc9c0\ub9cc, \ucc38\uc870( T& )\ub294 \uadf8\ub807\uc9c0 \uc54a\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c\uc11c\ub294 \"\uac1c\uccb4 \uc5c6\uc74c\"\uc744 \ud45c\uc2dc\ud558\uae30 \uc704\ud574 nullptr \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74, \ucc38\uc870\uac00 \ub354 \uac04\ub2e8\ud558\uace0 \uc88b\uc740 \ucf54\ub4dc\ub85c \uc774\uc5b4\uc9c8 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Functions/#example_26","text":"string zstring_to_string ( zstring p ) // zstring is a char * ; that is a C - style string { if ( ! p ) return string {}; // p might be nullptr; remember to check return string { p }; } void print ( const vector < int >& r ) { // r refers to a vector<int>; no check needed }","title":"Example"},{"location":"Functions/#note_27","text":"\uac00\ub2a5\ud558\uae30\ub294 \ud558\uc9c0\ub9cc, C++\uc5d0\uc11c nullptr \uc778 \uac1c\uccb4\ub97c \uc0dd\uc131\ud558\ub294 \uac83\uc740 \uc815\uc0c1\uc801(valid)\uc774\uc9c0 \uc54a\ub2e4(\uc608\ub97c \ub4e4\uc5b4, T* p = nullptr; T& r = (T&)*p; ). \uadf8\ub7f0 \uc624\ub958\ub294 \uad49\uc7a5\ud788 \ub4dc\ubb3c\ub2e4(very uncommon).","title":"Note"},{"location":"Functions/#note_28","text":"\ud3ec\uc778\ud130 \ud45c\uae30\ubc95\uc744 \uc120\ud638\ud55c\ub2e4\uba74 ( . \ubcf4\ub2e4\ub294 -> \ud639\uc740 * \uac00 \uc88b\ub2e4\uba74), not_null<T*> \uc774 T& \ucc98\ub7fc \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Functions/#enforcement_20","text":"???","title":"Enforcement"},{"location":"Functions/#f42-t","text":"","title":"F.42: \uc704\uce58\ub97c \ub098\ud0c0\ub0b4\ub294 \uacbd\uc6b0\uc5d0\ub9cc T*\ub97c \ubc18\ud658\ud558\ub77c"},{"location":"Functions/#reason_23","text":"\ud3ec\uc778\ud130\ub294 \uc774\ub97c \ud45c\ud604\ud558\uae30\uc5d0 \uc801\uc808\ud558\ub2e4. \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\uae30 \uc704\ud574 T* \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc798\ubabb\ub41c \ubc29\ubc95\uc774\ub2e4.","title":"Reason"},{"location":"Functions/#example_27","text":"Node * find ( Node * t , const string & s ) // find s in a binary tree of Nodes { if ( ! t || t -> name == s ) return t ; if (( auto p = find ( t -> left , s ))) return p ; if (( auto p = find ( t -> right , s ))) return p ; return nullptr ; } nullptr \uac00 \uc544\ub2c8\ub77c\uba74 find \uac00 \ubc18\ud658\ud558\ub294 \ud3ec\uc778\ud130\ub294 s \ub97c \uac00\uc9c0\ub294 node \ub97c \uc758\ubbf8\ud55c\ub2e4. \uc911\uc694\ud55c\uc810\uc740 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\ub85c\ub294 \uc18c\uc720\uad8c\uc774 \ud638\ucd9c\uc790\uae4c\uc9c0 \uc804\ub2ec\ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Functions/#note_29","text":"\uc704\uce58\ub294 \ubc18\ubcf5\uc790, \uc0c9\uc778(indices), \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574 \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4. \uc885\uc885 \ucc38\uc870\uac00 \ud3ec\uc778\ud130\ubcf4\ub2e4 \uc6b0\uc6d4\ud55c \ubc29\ubc95\uc774 \ub418\uae30\ub3c4 \ud55c\ub2e4. nullptr \ub97c \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub294 \uacbd\uc6b0 \ud639\uc740 \uac1c\uccb4\uac00 \ubcc0\uacbd\ub418\uc5b4\uc120 \uc548\ub418\ub294 \uacbd\uc6b0 .","title":"Note"},{"location":"Functions/#note_30","text":"Do not return a pointer to something that is not in the caller's scope; see F.43 .","title":"Note"},{"location":"Functions/#see-also_6","text":"\ud5c8\uc0c1 \ud3ec\uc778\ud130 \uc608\ubc29\uc5d0 \ub300\ud55c \ud1a0\uc758 (\ub9c1\ud06c \uc5c6\uc74c)","title":"See also"},{"location":"Functions/#enforcement_21","text":"\ub2e8\uc21c\ud55c(plain) T* \uc5d0 delete , free() \ub4f1\uc774 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4. \uc18c\uc720\uad8c\uc774 \uc788\uc744\ub54c\ub9cc delete\ub418\uc5b4\uc57c \ud55c\ub2e4. \ub2e8\uc21c\ud55c(plain) T* \uc5d0 new , malloc() \ub4f1\uc774 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4. \uc18c\uc720\uad8c\uc774 \uc788\uc744\ub54c\ub9cc delete\uc758 \ucc45\uc784\uc774 \ubc1c\uc0dd\ud55c\ub2e4.","title":"Enforcement"},{"location":"Functions/#f43","text":"","title":"F.43: \uc808\ub300\ub85c (\uc9c1\uc811\uc801\uc774\ub4e0 \uac04\uc811\uc801\uc774\ub4e0) \uc9c0\uc5ed \uac1c\uccb4\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Functions/#reason_24","text":"\ud5c8\uc0c1 \ud3ec\uc778\ud130(dangling pointer)\ub85c \uc778\ud55c \ud06c\ub798\uc2dc\uc640 \ub370\uc774\ud130 \uc190\uc0c1(corruption)\uc744 \ubc29\uc9c0\ud55c\ub2e4.","title":"Reason"},{"location":"Functions/#example-bad_1","text":"\ud568\uc218\uac00 \ubc18\ud658\ud558\uba74 \uc9c0\uc5ed \uac1c\uccb4\ub4e4\uc740 \ub354\uc774\uc0c1 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4: int * f () { int fx = 9 ; return & fx ; // BAD } void g ( int * p ) // looks innocent enough { int gx ; cout << \"*p == \" << * p << '\\n' ; * p = 999 ; cout << \"gx == \" << gx << '\\n' ; } void h () { int * p = f (); int z = * p ; // read from abandoned stack frame (bad) g ( p ); // pass pointer to abandoned stack frame to function (bad) } \uc704\uc640 \uac19\uc740 \ucf54\ub4dc\uc5d0\uc11c \uc544\ub798\uc640 \uac19\uc740 \ucd9c\ub825\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4: *p == 999 gx == 999 \uc774\ub294 g() \uc5d0\uc11c f() \uc5d0\uc11c \uc0ac\uc6a9\ud55c \uc2a4\ud0dd \uc601\uc5ed\uc744 \uc7ac\uc0ac\uc6a9\ud588\uae30 \ub54c\ubb38\uc778 \uac83\uc73c\ub85c \uc0dd\uac01\ub41c\ub2e4. *p \uc5d0\uc11c gx \uac00 \uc810\uc720\ud55c \uba54\ubaa8\ub9ac \uc601\uc5ed\uc744 \ucc38\uc870\ud55c \uac83\uc774\ub2e4. fx \uc640 gx \uac00 \ub2e4\ub978 \ud0c0\uc785\uc778 \uacbd\uc6b0\ub97c \uc0c1\uc0c1\ud574\ubcf4\ub77c fx \uc640 gx \uc5d0 \ubd88\ubcc0\uc870\uac74\uc774 \uc788\ub294 \uacbd\uc6b0\ub97c \uc0c1\uc0c1\ud574\ubcf4\ub77c \uc800\ub7f0 \ud5c8\uc0c1 \ud3ec\uc778\ud130\uac00 \ub354 \ub9ce\uc740 \ud568\uc218\ub4e4\uc5d0\uc11c \uc0ac\uc6a9\ub418\uc5c8\uc744 \uacbd\uc6b0\ub97c \uc0c1\uc0c1\ud574\ubcf4\ub77c \uc545\uc758\uc801\uc778 \uc0ac\uc6a9\uc790(cracker)\uac00 \ud5c8\uc0c1 \ud3ec\uc778\ud130\ub85c \ubb34\uc5c7\uc744 \ud560 \uc218 \uc788\uc744\uc9c0 \uc0c1\uc0c1\ud574\ubcf4\ub77c \ub2e4\ud589\uc2a4\ub7fd\uac8c\ub3c4 \ub300\ubd80\ubd84 (\ubaa8\ub4e0?) \ucd5c\uc2e0(modern) \ucef4\ud30c\uc77c\ub7ec\ub4e4\uc740 \uc774\ub7f0 \ub2e8\uc21c\ud55c \uc624\ub958\ub97c \uc7a1\uc544\ub0b4\uace0 \uacbd\uace0\ud560 \uc218 \uc788\ub2e4.","title":"Example, bad"},{"location":"Functions/#note_31","text":"\uc774 \uaddc\uce59\uc740 \ucc38\uc870\uc5d0\ub3c4 \ud574\ub2f9\ud55c\ub2e4: int & f () { int x = 7 ; // ... return x ; // Bad: returns reference to object that is about to be destroyed }","title":"Note"},{"location":"Functions/#note_32","text":"static \uc774 \uc544\ub2cc \uc9c0\uc5ed \ubcc0\uc218\uc5d0\ub9cc \uc801\uc6a9\ub41c\ub2e4. \ubaa8\ub4e0 static \ubcc0\uc218\ub294 (\uc774\ub984\uc5d0\uc11c \ub4dc\ub7ec\ub098\ub4ef\uc774) \uc815\uc801\uc73c\ub85c \ud560\ub2f9\ub418\ubbc0\ub85c, \uadf8 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\ub294 \ud5c8\uc0c1 \ud3ec\uc778\ud130\uac00 \uc544\ub2c8\ub2e4.","title":"Note"},{"location":"Functions/#example-bad_2","text":"\uc9c0\uc5ed \ubcc0\uc218\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uac00 \uc0c8\uc5b4\ub098\uc624\ub294 \uacbd\uc6b0\uac00 \uc608\uc2dc\ucc98\ub7fc \ubd84\uba85\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub2e4: int * glob ; // global variables are bad in so many ways template < class T > void steal ( T x ) { glob = x (); // BAD } void f () { int i = 99 ; steal ([ & ] { return & i ; }); } int main () { f (); cout << * glob << '\\n' ; } \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 f \uc758 \ud638\ucd9c \uc774\ud6c4 \ubc84\ub824\uc9c4 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc5d0\uc11c \uac12\uc744 \uc77d\uc5b4\uc628\ub2e4. glob \uc5d0 \uc800\uc7a5\ub41c \ud3ec\uc778\ud130\ub294 \uc608\uc0c1\uce58 \ubabb\ud55c \ubc29\ubc95\uc73c\ub85c \uba40\ub9ac(later) \uc788\ub294 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74\uc11c \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4.","title":"Example, bad"},{"location":"Functions/#note_33","text":"\uc9c0\uc5ed\ubcc0\uc218\uc758 \uc8fc\uc18c\ub294 return \uad6c\ubb38\uc774\ub098 T& \ucd9c\ub825 \ub9e4\uac1c\ubcc0\uc218\ub97c \ud1b5\ud574\uc11c \ubc18\ud658\ub418\uac70\ub098, \ubc18\ud658 \uac1c\uccb4\uc758 \uba64\ubc84, \ubc30\uc5f4\uacfc \uac19\uc740 \ud615\ud0dc\ub85c \uc0c8\uc5b4\ub098\uc62c \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Functions/#note_34","text":"\uc720\uc0ac\ud558\uac8c \uc548\ucabd \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \ubc14\uae65 \uc720\ud6a8\ubc94\uc704\ub85c \uc0c8\uc5b4\ub098\uc624\ub294 \ud3ec\uc778\ud130\uc758 \uc608\uc2dc\ub4e4\uc744 \ub354 \uc791\uc131\ud560 \uc218\ub3c4 \uc788\ub2e4; \uadf8\ub7f0 \uacbd\uc6b0\ub4e4\uc740 \ud568\uc218\ub85c\ubd80\ud130 \uc0c8\uc5b4\ub098\uc628 \ud3ec\uc778\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc744 \uadf8\ub300\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc774 \ubb38\uc81c\uc758 \ud30c\uc0dd\uc73c\ub85c\ub294 \ucee8\ud14c\uc774\ub108 \uc548\uc5d0 \ud3ec\uc778\ud130\ub97c \ubcf4\uad00\ud558\uba74\uc11c \uac1c\uccb4\ubcf4\ub2e4 \ud3ec\uc778\ud130\uac00 \ub354 \uc624\ub798 \uc0ac\uc6a9\ub418\ub294(outlives) \uacbd\uc6b0\uac00 \uc788\ub2e4.","title":"Note"},{"location":"Functions/#see-also_7","text":"\ud5c8\uc0c1 \ud3ec\uc778\ud130\uc5d0 \ub300\ud55c \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294 \ud3ec\uc778\ud130 \ubb34\ud6a8\ud654(\ub9c1\ud06c \uc5c6\uc74c) \ub97c \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. \uc774 \uc5ed\uc2dc \ube44\uc2b7\ud55c \ubc29\ubc95\uc73c\ub85c \ud0d0\uc9c0\ub418\uace0 \uc608\ubc29\ud560 \uc218 \uc788\ub2e4.","title":"See also"},{"location":"Functions/#enforcement_22","text":"\ucef4\ud30c\uc77c\ub7ec\uac00 \uc9c0\uc5ed\ubcc0\uc218\ub4e4\uc5d0 \ub300\ud55c \ucc38\uc870 \ud639\uc740 \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc744 \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4 \uc815\uc801 \ubd84\uc11d\uc5d0\uc11c \ub9ce\uc740 \uc77c\ubc18\uc801\uc778 \ud328\ud134\uc744 \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4 (\uadf8\ub7ec\ubbc0\ub85c \ud5c8\uc0c1 \ud3ec\uc778\ud130\ub97c \uc81c\uac70\ud560 \uc218 \uc788\ub2e4)","title":"Enforcement"},{"location":"Functions/#f44-t","text":"","title":"F.44: \ubcf5\uc0ac\ub97c \uad8c\uc7a5\ud558\uc9c0 \uc54a\uac70\ub098 \"\uac1c\uccb4\ub97c \ud56d\uc0c1 \ubc18\ud658\"\ud55c\ub2e4\uba74 T&amp;\ub97c \ubc18\ud658\ud558\ub77c"},{"location":"Functions/#reason_25","text":"\uc5b8\uc5b4\uac00 T& \ub294 \uac1d\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\uae30 \ub54c\ubb38\uc5d0 nullptr \uc778\uc9c0 \uc2dc\ud5d8\ud558\ub294 \uac83\uc740 \ud544\uc694\uc5c6\ub2e4.","title":"Reason"},{"location":"Functions/#see-also_8","text":"\ucc38\uc870\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc740 \uc18c\uc720\uad8c \uc774\uc804\uc73c\ub85c \uc0ac\uc6a9\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4: \ud5c8\uc0c1 \ud3ec\uc778\ud130 \uc608\ubc29\uc5d0 \ub300\ud55c \ud1a0\uc758(discussion) and \uc18c\uc720\uad8c\uc5d0 \ub300\ud55c \ud1a0\uc758(discussion) .","title":"See also"},{"location":"Functions/#example_28","text":"class Car { array < wheel , 4 > w ; // ... public : wheel & get_wheel ( int i ) { Expects ( i < w . size ()); return w [ i ]; } // ... }; void use () { Car c ; wheel & w0 = c . get_wheel ( 0 ); // w0 has the same lifetime as c }","title":"Example"},{"location":"Functions/#enforcement_23","text":"\ubc18\ud658\uc774 \uc5c6\ub294 \uacbd\uc6b0 nullptr \uac00 \ub420 \uc218 \uc788\ub294 \ud568\uc218\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f45-t","text":"","title":"F.45: T&amp;&amp;\ub97c \ubc18\ud658\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Functions/#reason_26","text":"\uc774\uac83\uc740 \uc18c\uba78\ub41c \uc784\uc2dc \uac1c\uccb4\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc774\ub2e4. && \ub294 \uc784\uc2dc \uac1c\uccb4\ub97c \ubd99\uc7a1\uae30 \uc704\ud55c \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Functions/#example_29","text":"r-value \ucc38\uc870\ub294 \ubc18\ud658\ud55c \ud45c\ud604\uc2dd\uc774 \ub05d\ub098\uba74 \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c \uc0ac\ub77c\uc9c4\ub2e4: auto && x = max ( 0 , 1 ); // OK, so far foo ( x ); // Undefined behavior \uc774\ub7f0 \uc885\ub958\uc758 \uc0ac\uc6a9\uc740 \ubc84\uadf8\uc758 \uc6d0\uc778\uc774\ub418\uace0, \ucef4\ud30c\uc77c\ub7ec \ubc84\uadf8\ub77c\uace0 \uc798\ubabb \ubcf4\uace0\ub41c\ub2e4. \ud568\uc218\ub97c \uad6c\ud604\ud560\ub54c \uc0ac\uc6a9\uc790\uac00 \uc774\ub7f0 \ud568\uc815\uc5d0 \ube60\uc9c0\uc9c0 \uc54a\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \uc218\uba85\uc8fc\uae30 \uc548\uc804\uc131 \ubd84\uc11d(profile) \uc5d0\uc11c \uc774\ub7f0 \ubb38\uc81c\ub97c \uc7a1\uc544\ub0bc \uac83\uc774\ub2e4(\uc644\uc804\ud788 \uad6c\ud604\ub41c\ub2e4\uba74).","title":"Example"},{"location":"Functions/#example_30","text":"r-value \ucc38\uc870\ub97c \ubc18\ud658\ud558\ub294 \uac83\uc740 \ud574\ub2f9 \uc784\uc2dc\ubcc0\uc218\uc5d0 \ub300\ud55c \ucc38\uc870\uac00 \ud53c\ud638\ucd9c\uc790\ub85c \"\ud558\ud5a5\uc2dd \uc804\ub2ec\" \ub418\ub41c\ub2e4\uba74 \ubb38\uc81c\uc5c6\ub2e4; \uadf8\ub7f0 \uacbd\uc6b0, \uadf8 \uc784\uc2dc\ubcc0\uc218\ub294 \ud568\uc218 \ud638\ucd9c\ubcf4\ub2e4 \uc624\ub798 \uc9c0\uc18d\ub420 \uc218 \uc788\ub2e4( F.18 \uc640 F.19 \ub97c \ud568\uaed8 \ubcf4\ub77c). \ud558\uc9c0\ub9cc, \ud638\ucd9c\uc790\ub85c \ucc38\uc870\uac00 \"\uc0c1\ud5a5\uc2dd \uc804\ub2ec\"\ub41c\ub2e4\uba74 \ubb38\uc81c\uac00 \ub420 \uc218 \uc788\ub2e4. (\ubcf4\ud1b5\uc758 \ucc38\uc870 \ud639\uc740 perfect forwarding\uc744 \ud1b5\ud574\uc11c) \ud568\uc218 \uc778\uc790\ub97c \uc5f0\uc18d \uc804\ub2ec(passthrough)\ud558\uace0\uc790 \ud55c\ub2e4\uba74, ( auto&& \uac00 \uc544\ub2c8\ub77c) auto \ub97c \uc0ac\uc6a9\ud558\ub77c F \uac00 \uac12\uc73c\ub85c \ubc18\ud658\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uba74: template < class F > auto && wrapper ( F f ) { log_call ( typeid ( f )); // or whatever instrumentation return f (); // BAD: \uc784\uc2dc\ubcc0\uc218\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \ubc18\ud658\ud55c\ub2e4 } \uc774\ub7f0 \ucf54\ub4dc\uac00 \ub354 \ub0ab\ub2e4: template < class F > auto wrapper ( F f ) { log_call ( typeid ( f )); // or whatever instrumentation return f (); // OK }","title":"Example"},{"location":"Functions/#exception_5","text":"std::move \uc640 std::forward \ub294 && \ub97c \ubc18\ud658\ud558\uc9c0\ub9cc \uc774\ub294 \ud615\ubcc0\ud658\uc77c \ubfd0\uc774\ub2e4 -- \ud45c\ud604\uc2dd \ubb38\ub9e5\ub0b4\uc5d0\uc11c \uc784\uc2dc \uac1c\uccb4\uac00 \ud30c\uad34\ub418\uae30 \uc804\uc5d0 \uac19\uc740 \ud45c\ud604\uc2dd \ub0b4\uc5d0\uc11c \uc784\uc2dc \uac1c\uccb4\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \uc804\ub2ec\ud55c\ub2e4. \uc6b0\ub9ac\ub294 && \ub97c \ubc18\ud658\ud558\ub294 \uac83\uc758 \ub2e4\ub978 \uc88b\uc740 \ud615\ud0dc\ub97c \uc54c\uc9c0 \ubabb\ud55c\ub2e4.","title":"Exception"},{"location":"Functions/#enforcement_24","text":"std::move \uc640 std::forward \ub97c \uc81c\uc678\ud558\uace0 && \ub97c \ubc18\ud658\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f46-main-int","text":"","title":"F.46: main()\ub294 int\ub97c \ubc18\ud658\ud574\uc57c \ud55c\ub2e4"},{"location":"Functions/#reason_27","text":"\uc5b8\uc5b4 \uaddc\uce59\uc73c\ub85c \uc815\ud574\uc838 \uc788\uc9c0\ub9cc. \"\uc5b8\uc5b4 \ud655\uc7a5\"\uc5d0 \uc758\ud574\uc11c \ub108\ubb34 \uc790\uc8fc \uc704\ubc18\ub41c\ub2e4. main (\ud574\ub2f9 \ud504\ub85c\uadf8\ub7a8\uc758 main \ud568\uc218)\uc5d0\uc11c void \ub97c \ubc18\ud658\ud558\ub3c4\ub85d \uc120\uc5b8\ud558\ub294 \uac83\uc740 \uc774\uc2dd\uc131\uc744 \uc81c\ud55c\ud55c\ub2e4.","title":"Reason"},{"location":"Functions/#example_31","text":"void main () { /* ... */ }; // bad, not C++ int main () { std :: cout << \"This is the way to do it \\n \" ; }","title":"Example"},{"location":"Functions/#note_35","text":"\ucee4\ubba4\ub2c8\ud2f0\uc5d0 \uc774 \ubb38\uc81c\uac00 \ub0a8\uc544\uc788\uae30 \ub54c\ubb38\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c \uba85\uc2dc\ud55c\ub2e4.","title":"Note"},{"location":"Functions/#enforcement_25","text":"\ucef4\ud30c\uc77c\ub7ec\uc5d0\uc11c \uae08\uc9c0\ud55c\ub2e4 \ucef4\ud30c\uc77c\ub7ec\uac00 \uae08\uc9c0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \ubd84\uc11d \ub3c4\uad6c\uc5d0\uc11c \uc774\ub97c \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f47-t","text":"","title":"F.47: \ub300\uc785 \uc5f0\uc0b0\uc790\ub294 T&amp;\ub97c \ubc18\ud658\ud558\ub77c"},{"location":"Functions/#reason_28","text":"\uac12 \ud0c0\uc785\uc758 \uc5f0\uc0b0\uc790 \uc911\ubcf5\uc815\uc758\ub294 \uc804\ud1b5\uc801\uc73c\ub85c \ub300\uc785\uc5d0 operator=(const T&) \ub97c \uc0ac\uc6a9\ud558\uace0 *this \ub97c ( const \uac00 \uc544\ub2cc \ud615\ud0dc\ub85c) \ubc18\ud658\ud558\ub294 \uac83\uc774\ub2e4. \uc774\ub807\uac8c \ud558\ub294 \uac83\uc774 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud0c0\uc785\ub4e4\uacfc \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud558\uace0 \"int\ucc98\ub7fc \ub3d9\uc791\ud558\ub294\" \uc6d0\uce59\uc744 \ub530\ub974\ub294 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Functions/#note_36","text":"\uacfc\uac70\uc5d0\ub294 \ub300\uc785 \uc5f0\uc0b0\uc5d0\uc11c const T& \ub97c \ubc18\ud658\ud558\ub3c4\ub85d \ud558\ub294 \uac00\uc774\ub4dc\uac00 \uc788\uc5c8\ub2e4. \uc774\ub294 (a = b) = c \uac19\uc740 \ud615\ud0dc\uc758 \ucf54\ub4dc\ub97c \uc608\ubc29\ud558\uae30 \uc704\ud55c \ubaa9\uc801\uc774\uc5c8\ub2e4 -- \uc774\ub7f0 \ucf54\ub4dc\ub294 \ud45c\uc900 \ud0c0\uc785\ub4e4\uacfc\uc758 \uc77c\uad00\uc131\uc744 \ud574\uce60 \uc815\ub3c4\ub85c \ube48\ubc88\ud558\uc9c0\ub294 \uc54a\ub2e4.","title":"Note"},{"location":"Functions/#example_32","text":"class Foo { public : ... Foo & operator = ( const Foo & rhs ) { // Copy members. ... return * this ; } };","title":"Example"},{"location":"Functions/#enforcement_26","text":"\uc774 \uaddc\uce59\uc740 \ubc18\ud658 \ud0c0\uc785(\uacfc \ubc18\ud658 \uac12)\uc744 \uac80\uc0ac\ud558\ub294 \ub3c4\uad6c\uc5d0 \uc758\ud574\uc11c \ubaa8\ub4e0 \ub300\uc785 \uc5f0\uc0b0\uc790\uc5d0 \ub300\ud574 \uc801\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Functions/#f48-return-stdmovelocal","text":"","title":"F.48: return std::move(local)\uc740 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Functions/#reason_29","text":"Guaranteed copy elision\uc774 \uc801\uc6a9\ub418\uba74 std::move \ub97c \ubc18\ud658 \uad6c\ubb38\uc5d0 \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.","title":"Reason"},{"location":"Functions/#example-bad_3","text":"S f () { S result ; return std :: move ( result ); }","title":"Example; bad"},{"location":"Functions/#example-good","text":"S f () { S result ; return result ; }","title":"Example; good"},{"location":"Functions/#enforcement_27","text":"\ubc18\ud658 \uad6c\ubb38\uc744 \uac80\uc0ac\ud558\ub294 \ub3c4\uad6c\uc5d0 \uc758\ud574\uc11c \uac80\uc0ac\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Functions/#f50","text":"","title":"F.50: \ud568\uc218\ub97c \uc4f8 \uc218 \uc5c6\uc744 \ub54c\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c(\uc9c0\uc5ed \ubcc0\uc218\ub97c \ucea1\uccd0\ud558\uac70\ub098 \uc9c0\uc5ed \ud568\uc218\ub97c \uc791\uc131\ud560 \ub54c)"},{"location":"Functions/#reason_30","text":"\ud568\uc218\ub294 \uc9c0\uc5ed\ubcc0\uc218\ub97c \ucea1\uccd0\ud560 \uc218 \uc5c6\uace0, \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704\ub85c \uc120\uc5b8\ub420 \uc218\ub3c4 \uc5c6\ub2e4; \uc774\ub7f0 \uae30\ub2a5\uc774 \ud544\uc694\ud558\ub2e4\uba74 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 \uc9c1\uc811 \uc791\uc131\ud55c \ud568\uc218 \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4 (\uac00\ub2a5\ud55c \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c). \ud558\uc9c0\ub9cc, \ub78c\ub2e4\uc640 \ud568\uc218\uac1c\uccb4\ub294 \uc624\ubc84\ub85c\ub4dc\uac00 \ub418\uc9c0 \uc54a\ub294\ub2e4; \uc624\ubc84\ub85c\ub4dc\uac00 \ud544\uc694\ud558\ub2e4\uba74 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c. \ub450 \ubc29\ubc95 \ubaa8\ub450 \uac00\ub2a5\ud558\ub2e4\uba74 \ud568\uc218\ub97c \uc120\ud638\ud558\ub77c; \ub2e8\uc21c\ud55c \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Reason"},{"location":"Functions/#example_33","text":"// writing a function that should only take an int or a string // -- overloading is natural void f ( int ); void f ( const string & ); // writing a function object that needs to capture local state and appear // at statement or expression scope -- a lambda is natural vector < work > v = lots_of_work (); for ( int tasknum = 0 ; tasknum < max ; ++ tasknum ) { pool . run ([ = , & v ]{ /* ... ... process 1 / max - th of v, the tasknum - th chunk ... */ }); } pool . join ();","title":"Example"},{"location":"Functions/#exception_6","text":"\uc81c\ub124\ub9ad \ub78c\ub2e4\ub294 \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \uad6c\ud604\ud558\ub294 \uac04\uacb0\ud55c \ubc29\ubc95\uc744 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 \ucf54\ub4dc\ub97c \uc870\uae08 \ub354 \uc791\uc131\ud558\uba74 \uc77c\ubc18 \ud568\uc218 \ud15c\ud50c\ub9bf\uacfc \uac19\uc740 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ubbf8\ub798\uc5d0 \ubaa8\ub4e0 \ud568\uc218\ub4e4\uc774 Concept \uc778\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub418\uba74 \uc774 \uae30\ub2a5\uc740 \uc0ac\ub77c\uc9c8\uc9c0\ub3c4 \ubaa8\ub978\ub2e4.","title":"Exception"},{"location":"Functions/#enforcement_28","text":"\uc544\ubb34\uac83\ub3c4 \ucea1\uccd0\ud558\uc9c0 \uc54a\ub294 \ube44-\uc81c\ub124\ub9ad \ub78c\ub2e4\uac00 \uc804\uc5ed \ubc94\uc704\uc5d0 \ub098\ud0c0\ub098\uba74 \uacbd\uace0\ud55c\ub2e4(\uc608\ub97c \ub4e4\uc5b4, auto x = [](int i){ /*...*/; }; \uc640 \uac19\uc740 \ud615\ud0dc). \uc774\ub7f0 \uacbd\uc6b0 \ub78c\ub2e4 \ub300\uc2e0 \ud3c9\ubc94\ud55c \ud568\uc218\ub97c \uc791\uc131\ud558\ub3c4\ub85d \ud55c\ub2e4.","title":"Enforcement"},{"location":"Functions/#f51","text":"","title":"F.51: \uc120\ud0dd\ud560 \uc218 \uc788\ub2e4\uba74, \uc911\ubcf5 \uc815\uc758\ubcf4\ub2e4\ub294 \uae30\ubcf8 \uc804\ub2ec\uc778\uc790\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Functions/#reason_31","text":"\uae30\ubcf8 \uc778\uc790\ub85c \ud558\ub098\uc758 \uad6c\ud604\uc5d0 \ub2e4\ub978 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 \uc911\ubcf5 \uc815\uc758\uac00 \uac19\uc740 \uc758\ubbf8\uad6c\uc870\ub97c \uad6c\ud604\ud55c\ub2e4\uace0 \ubcf4\uc7a5\ud560 \uc218 \uc5c6\ub2e4. \uae30\ubcf8\uc778\uc790\ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \ucf54\ub4dc \uc911\ubcf5\uc744 \ud53c\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Functions/#note_37","text":"\uc804\ub2ec\uc778\uc790\uac00 \uac19\uc740 \ud0c0\uc785\uc77c \ub54c\ub294 \uae30\ubcf8\uc778\uc790\uc640 \uc911\ubcf5\uc815\uc758 \uc911\uc5d0\uc11c \uc120\ud0dd\ud574\uc57c \ud560 \ub54c\uac00 \uc788\ub2e4: void print ( const string & s , format f = {}); \uadf8 \ubc18\ub300\ub85c\ub294 void print ( const string & s ); // use default format void print ( const string & s , format f ); \uc758\ubbf8\uad6c\uc870\uc801\uc73c\ub85c\ub294 \uac19\uc740 \uc5f0\uc0b0\uc774\uc9c0\ub9cc \uc804\ub2ec\uc778\uc790\uc758 \ud0c0\uc785\uc774 \ub2e4\ub974\ub2e4\uba74 \uc120\ud0dd\uc758 \uc5ec\uc9c0\uac00 \uc5c6\ub2e4. \uc608\ub97c \ub4e4\uc5b4: void print ( const char & ); void print ( int ); void print ( zstring );","title":"Note"},{"location":"Functions/#see-also_9","text":"\uac00\uc0c1 \ud568\uc218\ub4e4\uc758 \uae30\ubcf8 \uc778\uc790","title":"See also"},{"location":"Functions/#enforcement_29","text":"???","title":"Enforcement"},{"location":"Functions/#f52","text":"","title":"F.52: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4\uba74 \ub78c\ub2e4\uc758 \ucc38\uc870 \ucea1\uccd0\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Functions/#reason_32","text":"\uc9c0\uc5ed\ubc94\uc704\uc5d0\uc11c \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub294 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \ud6a8\uc728\uc131\uacfc \uc815\ud655\uc131\uc744 \uc704\ud574 \ucc38\uc870\ucea1\uccd0(capture by reference)\ub97c \uc120\ud638\ud560 \uac83\uc774\ub2e4. \uc5ec\uae30\uc5d0\ub294 \ud568\uc218\uac00 \ubc18\ud658\ud558\uae30 \uc804\uc5d0 \ubcd1\ub82c \uc54c\uace0\ub9ac\uc998\uc744 \uc791\uc131\ud558\uac70\ub098 \ud638\ucd9c\ud560\ub54c\ub3c4 \ud3ec\ud568\ub41c\ub2e4.","title":"Reason"},{"location":"Functions/#discussion","text":"\ud6a8\uc728\uc801\uc778 \uce21\uba74\uc5d0\uc11c\ub294 \ub300\ubd80\ubd84\uc758 \ud0c0\uc785\ub4e4\uc744 \ucc38\uc870\ub85c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \uac12\uc73c\ub85c \uc804\ub2ec\ud558\ub294 \uac83\ubcf4\ub2e4 \ud6a8\uc728\uc801\uc774\ub2e4. \uc815\ud655\uc131 \uce21\uba74\uc5d0\uc11c\ub294 \uc5f0\uc0b0\ub4e4\uc774 \ud638\ucd9c \uc9c0\uc810\uc5d0\uc11c \uc6d0\ub798 \uac1c\uccb4\uc5d0 \ubd80\uc218\ud6a8\uacfc\ub97c \ub9cc\ub4e4\uae38 \uc6d0\ud55c\ub2e4\ub294 \uac83\uc744 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \uac12\uc73c\ub85c \uc804\ub2ec\ud558\uba74 \uc774\ub7f0 \ubb38\uc81c\ub97c \uc608\ubc29\ud560 \uc218 \uc788\ub2e4.","title":"Discussion"},{"location":"Functions/#note_38","text":"\ubd88\ud589\ud558\uac8c\ub3c4, \ubd80\uc218\ud6a8\uacfc\ub97c \ub9c9\uae30 \uc704\ud574 \ucc38\uc870\ub97c const \ub85c \ubc1b\uc544\uc62c \ubc29\ubc95\uc774 \uc5c6\ub2e4","title":"Note"},{"location":"Functions/#example_34","text":"\uc774 \uc608\uc2dc\uc5d0\uc11c\ub294, \ud070 \uac1c\uccb4(\ub124\ud2b8\uc6cc\ud06c \uba54\uc138\uc9c0)\uac00 \ubc18\ubcf5 \uc54c\uace0\ub9ac\uc998\uc5d0 \uc804\ub2ec\ub41c\ub2e4. \uc774 \uac1c\uccb4\uac00 \ubcf5\uc0ac \uac00\ub2a5\ud558\ub354\ub77c\ub3c4 \ubcf5\uc0ac\ud558\ub294 \uac83\uc740 \ud6a8\uc728\uc801\uc774\uc9c0\ub3c4, \uc815\ud655\ud558\uc9c0\ub3c4 \uc54a\ub2e4: std :: for_each ( begin ( sockets ), end ( sockets ), [ & message ]( auto & socket ) { socket . send ( message ); });","title":"Example"},{"location":"Functions/#example_35","text":"\uc544\ub798 \uc608\uc81c\ub294 \uac04\ub2e8\ud55c 3\ub2e8\uacc4 \ubcd1\ub82c \ud30c\uc774\ud504\ub77c\uc778\uc774\ub2e4. \uac01 stage \uac1c\uccb4\ub294 process \ud568\uc218\ub97c \ud1b5\ud574 \uc791\uc5c5\uc744 \uc804\ub2ec\ud558\uace0 \uc791\uc5c5 \ud050\uac00 \uc18c\uc9c4\ub420 \ub54c\uae4c\uc9c0 \uc18c\uba78\ub418\uc9c0 \uc54a\ub294 \uc791\uc5c5\uc6a9 \uc2a4\ub808\ub4dc\ub4e4\uc744 \ucea1\uc290\ud654 \ud55c \uac83\uc774\ub2e4. void send_packets ( buffers & bufs ) { stage encryptor ([] ( buffer & b ){ encrypt ( b ); }); stage compressor ([ & ]( buffer & b ){ compress ( b ); encryptor . process ( b ); }); stage decorator ([ & ]( buffer & b ){ decorate ( b ); compressor . process ( b ); }); for ( auto & b : bufs ) { decorator . process ( b ); } } // automatically blocks waiting for pipeline to finish","title":"Example"},{"location":"Functions/#enforcement_30","text":"\uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uac70\ub098 \ucc38\uc870\ub85c \uc804\ub2ec\ub418\ub294\ub370 \ucc38\uc870\ub85c \ucea1\uccd0\ud558\ub294 \ub78c\ub2e4\ub97c \uc9c0\uc801\ud55c\ub2e4. (\uc8fc\uc758: \uc774 \uaddc\uce59\uc740 \ucd94\uc815\uc5d0 \uc758\ud55c \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ub41c\ub2e4\uba74 \ud53c\ud638\ucd9c\uc790\uc5d0 \uc800\uc7a5\ub418\uac70\ub098, \ub9e4\uac1c\ubcc0\uc218\ub85c \uc811\uadfc\ub418\uac70\ub098, \ub78c\ub2e4\uc5d0 \uc758\ud574\uc11c \ubc18\ud658\ub418\ub294 \ub4f1\uc73c\ub85c \uc0ac\uc6a9\ub420 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4. \uc218\uba85\uc8fc\uae30 \uaddc\uce59\ub4e4\uc774 \uc720\ud6a8\ubc94\uc704\ub97c \ubc97\uc5b4\ub098\ub294 \ud3ec\uc778\ud130\ub098 \ub78c\ub2e4\ub97c \ud1b5\ud574 \ucc38\uc870\ub418\ub294 \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\uae30 \uc704\ud55c \uaddc\uce59\ub4e4\uc744 \uc81c\uacf5\ud55c\ub2e4.)","title":"Enforcement"},{"location":"Functions/#f53","text":"","title":"F.53: \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \ucc38\uc870 \ucea1\uccd0\ub97c \ud53c\ud558\ub77c"},{"location":"Functions/#reason_33","text":"\uc9c0\uc5ed\ubc94\uc704\uc5d0 \uc788\ub294 \ud3ec\uc778\ud130\uc640 \ucc38\uc870\ub294 \ubc94\uc704\ub97c \ub118\uc5b4\uc11c\uba74 \ub354 \uc774\uc0c1 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294\ub2e4. \ucc38\uc870\ucea1\uccd0\ub97c \uac00\uc9c4 \ub78c\ub2e4\ub294 \uc9c0\uc5ed \uac1c\uccb4\ub97c \ucc38\uc870\ud558\uace0 \uc788\uc744 \ubfd0\uc774\uba70, \uc9c0\uc5ed\ubc94\uc704\ub97c \ub118\uc5b4\uc11c\uba74 \ub354 \uc774\uc0c1 \ucc38\uc870\ud574\uc11c\ub294 \uc54a\ub41c\ub2e4.","title":"Reason"},{"location":"Functions/#example-bad_4","text":"int local = 42 ; // Want a reference to local. // Note, that after program exits this scope, // local no longer exists, therefore // process() call will have undefined behavior! thread_pool . queue_work ([ & ]{ process ( local ); });","title":"Example, bad"},{"location":"Functions/#example-good_1","text":"int local = 42 ; // Want a copy of local. // Since a copy of local is made, it will // always be available for the call. thread_pool . queue_work ([ = ]{ process ( local ); });","title":"Example, good"},{"location":"Functions/#enforcement_31","text":"(\ub2e8\uc21c) \ucea1\uccd0 \ubaa9\ub85d\uc774 \uc9c0\uc5ed \ubcc0\uc218\ub97c \ucc38\uc870\ud558\uba74 \uacbd\uace0\ud55c\ub2e4 (\ubcf5\uc7a1) \ucea1\uccd0 \ubaa9\ub85d\uc774 \uc9c0\uc5ed \ubcc0\uc218\ub97c \ucc38\uc870\ud558\uace0 const \uac00 \uc544\ub2c8\uac70\ub098 \ube44-\uc9c0\uc5ed\uc801 \ubb38\ub9e5\uc73c\ub85c \uc804\ub2ec\ub418\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Functions/#f54-this","text":"","title":"F.54: this\ub97c \ucea1\uccd0\ud560 \ub54c\ub294, \ubaa8\ub4e0 \ubcc0\uc218\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ucea1\uccd0\ud558\ub77c(\uae30\ubcf8 \ucea1\uccd0\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4)"},{"location":"Functions/#reason_34","text":"\uba85\uc2dc\ud558\uc9c0 \uc54a\uc73c\uba74 \ud63c\ub780\uc2a4\ub7fd\ub2e4. \uba64\ubc84 \ud568\uc218 \uc548\uc5d0\uc11c [=] \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uac12\uc73c\ub85c \ucea1\uccd0\ud558\ub294 \uac83\uc774\uc9c0\ub9cc, \uc2e4\uc81c\ub85c\ub294 \ubcf4\uc774\uc9c0 \uc54a\ub294 this \ub97c \ubcf5\uc0ac\ud558\uba74\uc11c \ub370\uc774\ud130 \uba64\ubc84\ub97c \ucc38\uc870\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ucea1\uccd0\ud558\ub294 \uac83\uc774\ub2e4. \uc774\uac83\uc774 \uc758\ub3c4\ub41c \uac83\uc774\ub77c\uba74, this \ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Functions/#example_36","text":"class My_class { int x = 0 ; // ... void f () { int i = 0 ; // ... auto lambda = [ = ]{ use ( i , x ); }; // BAD: \"looks like\" copy/value capture // [&] has identical semantics and copies the this pointer under the current rules // [=,this] and [&,this] are not much better, and confusing x = 42 ; lambda (); // calls use(0, 42); x = 43 ; lambda (); // calls use(0, 43); // ... auto lambda2 = [ i , this ]{ use ( i , x ); }; // ok, most explicit and least confusing // ... } };","title":"Example"},{"location":"Functions/#note_39","text":"\ud45c\uc900\uc5d0\uc11c \uc774\uc5d0 \ub300\ud574 \uacc4\uc18d \ub17c\uc758\uc911\uc774\ub2e4. \uc774\ud6c4 \ud45c\uc900\uc5d0\uc11c \uc0c8\ub85c\uc6b4 \ucea1\uccd0 \ubc29\uc2dd\uc774 \ub3c4\uc785\ub418\uac70\ub098 [=] \uc758 \uc758\ubbf8\ub97c \uc218\uc815\ud558\ub294 \ud615\ud0dc\ub85c \uc870\uc815\ub420 \uc218 \uc788\ub2e4. \uc9c0\uae08\uc740 \uba85\uc2dc\uc801\uc73c\ub85c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub77c.","title":"Note"},{"location":"Functions/#enforcement_32","text":"\uae30\ubcf8 \ucea1\uccd0\uc640 this \uac00 \ucea1\uccd0\ubaa9\ub85d\uc5d0 \ud3ec\ud568\ub41c \ub78c\ub2e4\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4 (\uba85\uc2dc\uc801\uc774\ub4e0 \uae30\ubcf8 \ucea1\uccd0\ud55c \uac83\uc774\ub4e0)","title":"Enforcement"},{"location":"Functions/#f55-va_arg","text":"","title":"F.55: va_arg \uc804\ub2ec\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Functions/#reason_35","text":"va_arg \uc5d0\uc11c \uac12\uc744 \uc77d\uc5b4\uc62c \ub54c\ub294 \ud0c0\uc785\uc774 \uc815\ud655\ud788 \uc804\ub2ec\ub418\uc5c8\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4. va_arg \uc5d0 \uac12\uc744 \uc804\ub2ec\ud560\ub54c\ub294 \ud0c0\uc785\uc774 \uc815\ud655\ud788 \uc77d\ud790 \uac83\uc774\ub77c\uace0 \uac00\uc815\ud55c\ub2e4. \uc774\ub294 \uc704\ud0dc\ub85c\uc6b4 \ubc29\ubc95\uc778\ub370 \uc5b8\uc5b4\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uace0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uae30\ub2a5\uc744 \uc815\ud655\ud788 \uc0ac\uc6a9\ud574\uc57c \ub54c\ubb38\uc774\ub2e4.","title":"Reason"},{"location":"Functions/#example_37","text":"int sum (...) { // ... while ( /*...*/ ) result += va_arg ( list , int ); // BAD, assumes it will be passed ints // ... } sum ( 3 , 2 ); // ok sum ( 3.14159 , 2.71828 ); // BAD, undefined template < class ... Args > auto sum ( Args ... args ) { // GOOD, and much more flexible return (... + args ); // note: C++17 \"fold expression\" } sum ( 3 , 2 ); // ok: 5 sum ( 3.14159 , 2.71828 ); // ok: ~5.85987","title":"Example"},{"location":"Functions/#alternatives","text":"\uc911\ubcf5 \uc815\uc758(overloading) \uac00\ubcc0 \ud15c\ud50c\ub9bf(variadic templates) variant \uc804\ub2ec\uc778\uc790(argument) initializer_list (homogeneous)","title":"Alternatives"},{"location":"Functions/#note_40","text":"... \ub9e4\uac1c\ubcc0\uc218\ub97c \uc120\uc5b8\ud558\ub294 \uac83\uc740 \uc2e4\uc81c \uc804\ub2ec\uc778\uc790\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uac70\ub098, \ub2e4\ub978 \uc911\ubcf5 \uc815\uc758\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\uae30 \uc704\ud574 \"\uc778\uc790\ub97c \ubb34\uc5c7\uc774\ub4e0\" \ucc98\ub9ac\ud558\ub294 \ud568\uc218 \ud639\uc740 \ud15c\ud50c\ub9bf \uba54\ud0c0 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uacc4\uc0b0 \uc678\uc758 \uacbd\uc6b0\ub97c \uc7a1\uc544\ub0b4\ub294\ub370 \uc720\uc6a9\ud558\uac8c \uc4f0\uc774\uae30\ub3c4 \ud55c\ub2e4.","title":"Note"},{"location":"Functions/#enforcement_33","text":"va_list , va_start , va_arg \ub97c \uc0ac\uc6a9\ud558\uba74 \ubc18\ub300\ud55c\ub2e4(Issue a diagnostic). \ud568\uc218\uc758 \uac00\ubcc0 \ub9e4\uac1c\ubcc0\uc218\ub85c \ub118\uae30\ub294 \uc804\ub2ec\uc778\uc790\uc5d0 \ub300\ud574 \ubcf4\ub2e4 \uad6c\uccb4\uc801\uc778 \uc911\ubcf5\uc815\uc758\ub97c \uc81c\uacf5\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \uc774\uc758\ub97c \uc81c\uae30\ud55c\ub2e4(Issue a diagnostic). \uc218\uc815\ud558\ub824\uba74 \ub2e4\ub978 \ud568\uc218\ub97c \uc4f0\uac70\ub098 [[suppress(types)]] \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud55c\ub2e4.","title":"Enforcement"},{"location":"GSL/","text":"GSL: \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac GSL \uc740 \uac00\uc774\ub4dc\ub77c\uc778 \uc801\uc6a9\uc744 \ub3d5\uae30 \uc704\ud574 \uc124\uacc4\ub41c \uc791\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub2e4. \uc774\ub7f0 \uae30\ub2a5\uc774 \uc5c6\ub2e4\uba74, \uac00\uc774\ub4dc\ub77c\uc778\uc740 \uc5b8\uc5b4 \uc138\ubd80\uc0ac\ud56d\ub4e4\uc5d0 \ub300\ud574 \ub354 \uc5c4\uaca9\ud574\uc838\uc57c\ub9cc \ud588\uc744 \uac83\uc774\ub2e4. \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 gsl \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\uba70, \uc774 \uc774\ub984\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \ub2e4\ub978 \uc798 \uc54c\ub824\uc9c4 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud55c \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubcc4\uba85\uc77c \uc218 \uc788\ub2e4. \uc774\uc640 \uac19\uc740 (\ucef4\ud30c\uc77c \uc2dc\uac04) \uc6b0\ud68c\ub294 \uc9c0\uc6d0 \uae30\ub2a5\ub4e4\uc5d0 \ub300\ud55c \uc2e4\ud5d8 \ud639\uc740 \ubcc0\ud615\uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4. GSL\uc740 \ud5e4\ub354 \ud30c\uc77c\ub85c\ub9cc \uad6c\uc131\ub418\uba70, GSL: Guidelines support library \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uae30\ub2a5\ub4e4\uc740 \uc804\ud1b5\uc801\uc778 \ub2e4\ub978 \ubc29\ubc95\ub4e4\ubcf4\ub2e4 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \uadf9\ub3c4\ub85c \uac00\ubccd\uac8c(Zero-Overhead) \uc124\uacc4\ub418\uc5c8\ub2e4. \ub514\ubc84\uae45 \uc791\uc5c5\uacfc \uac19\uc774 \ud2b9\uc815 \uc791\uc5c5\uc5d0 \ucd94\uac00 \uae30\ub2a5(\uc608\ub97c \ub4e4\uc5b4 \ubb54\uac00\uc5d0 \ub300\ud55c \ud655\uc778)\uc73c\ub85c \"\uacc4\uce21\"\ud560 \ub54c \uc0ac\uc6a9\ub420 \uc218\ub3c4 \uc788\ub2e4. \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c\ub294 variant \ud0c0\uc785\uc774 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uc9c0\ub9cc, GSL\uc5d0\uc11c\ub294 \uc774\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. C++ 17\uc5d0\uc11c \uc81c\uc548\ub41c \ud615\ud0dc\ub97c \uc0ac\uc6a9\ud558\ub77c . GSL \uad6c\uc131\uc694\uc18c \uc694\uc57d: GSL.view: Views GSL.owner GSL.assert: Assertions GSL.util: Utilities GSL.concept: Concepts We plan for a \"ISO C++ standard style\" semi-formal specification of the GSL. ISO C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uae30\ubc18\uc744 \ub450\uba70, GSL\uc758 \uc77c\ubd80\uac00 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ud3ec\ud568\ub418\uae30\ub97c \ubc14\ub780\ub2e4. GSL.view: Views \uc774 \ud0c0\uc785\ub4e4\uc740 \uc0ac\uc6a9\uc790\uac00 \uc18c\uc720\uad8c\uc744 \uac00\uc9c4 \ud3ec\uc778\ud130\uc640 \uadf8\ub807\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\ub4e4, \ub2e8\uc77c \uac1c\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc640 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uad6c\ubd84\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc900\ub2e4 \"view\" \ud0c0\uc785\ub4e4\uc740 \uc790\uc6d0\uc744 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4. \ucc38\uc870 \uc5ed\uc2dc \uc790\uc6d0\uc744 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4. R.4 \ub97c \ucc38\uace0\ud558\ub77c. Note: References have many opportunities to outlive the objects they refer to (returning a local variable by reference, holding a reference to an element of a vector and doing push_back , binding to std::max(x, y + 1) , etc. The Lifetime safety profile aims to address those things, but even so owner<T&> does not make sense and is discouraged. \ud0c0\uc785 \uc774\ub984\ub4e4\uc740 \ub300\ubd80\ubd84 ISO \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc2a4\ud0c0\uc77c\uc744 \ub530\ub978\ub2e4(\uc18c\ubb38\uc790\uc640 '_'\ub97c \uc0ac\uc6a9): T* // The T* is not an owner, may be null; assumed to be pointing to a single element. T& // The T& is not an owner and can never be a \"null reference\"; references are always bound to objects. The \"raw-pointer\" notation (e.g. int* ) is assumed to have its most common meaning; that is, a pointer points to an object, but does not own it. Owners should be converted to resource handles (e.g., unique_ptr or vector<T> ) or marked owner<T*> . owner<T*> // a T* that owns the object pointed/referred to; may be nullptr . owner \ub294 \uc18c\uc720\uad8c\uc744 \uac00\uc9c4 \ud3ec\uc778\ud130\uc5d0 \uc0ac\uc6a9\ub418\uba70, \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc720\ub85c \uc774 \ud0c0\uc785\uc740 \uc801\ud569\ud55c \ub9ac\uc18c\uc2a4 \ud578\ub4e4 \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub420 \uc218 \uc5c6\ub2e4: \ubcc0\ud658 \ube44\uc6a9 \ubc1c\uc0dd \ud3ec\uc778\ud130\uac00 ABI\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0 \ud3ec\uc778\ud130\uac00 \ub9ac\uc18c\uc2a4 \ud578\ub4e4 \uad6c\ud604\uc758 \uc77c\ubd80\uc778 \uacbd\uc6b0 An owner<T> differs from a resource handle for a T by still requiring an explicit delete . An owner<T> is assumed to refer to an object on the free store (heap). If something is not supposed to be nullptr , say so: not_null<T> // T is usually a pointer type (e.g., not_null<int*> and not_null<owner<Foo*>> ) that may not be nullptr . T can be any type for which ==nullptr is meaningful. span<T> // [p:p+n) , constructor from {p, q} and {p, n} ; T is the pointer type span_p<T> // {p, predicate} [p:q) where q is the first element for which predicate(*p) is true string_span // span<char> cstring_span // span<const char> A span<T> refers to zero or more mutable T s unless T is a const type. \"Pointer arithmetic\" is best done within span s. A char* that points to more than one char but is not a C-style string (e.g., a pointer into an input buffer) should be represented by a span . zstring // a char* supposed to be a C-style string; that is, a zero-terminated sequence of char or nullptr czstring // a const char* supposed to be a C-style string; that is, a zero-terminated sequence of const char or nullptr \ub17c\ub9ac\uc801\uc73c\ub85c\ub294, \ub9c8\uc9c0\ub9c9 \ub450 \ubcc4\uce6d\uc740 \ud544\uc694\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc, \ud558\ub098\uc758 char \uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc640 C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uad6c\ubd84\ud558\uac8c \ud574\uc900\ub2e4. 0\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\ub294 \ubb38\uc790\uc5f4\uc740 zstring \ubcf4\ub2e4\ub294 char* \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Use not_null<zstring> for C-style strings that cannot be nullptr . ??? Do we need a name for not_null<zstring> ? or is its ugliness a feature? GSL.owner: Ownership pointers unique_ptr<T> // \ub3c5\uc810\uc801 \uc18c\uc720\uad8c: std::unique_ptr<T> shared_ptr<T> // \uacf5\uc720 \uc18c\uc720\uad8c: std::shared_ptr<T> (a counted pointer) stack_array<T> // A stack-allocated array. The number of elements are determined at construction and fixed thereafter. The elements are mutable unless T is a const type. dyn_array<T> // ??? needed ??? A heap-allocated array. The number of elements are determined at construction and fixed thereafter. The elements are mutable unless T is a const type. Basically a span that allocates and owns its elements. GSL.assert: Assertions Expects // precondition assertion. Currently placed in function bodies. Later, should be moved to declarations. // Expects(p) terminates the program unless p == true // Expect in under control of some options (enforcement, error message, alternatives to terminate) Ensures // postcondition assertion. Currently placed in function bodies. Later, should be moved to declarations. These assertions are currently macros (yuck!) and must appear in function definitions (only) pending standard committee decisions on contracts and assertion syntax. See the contract proposal ; using the attribute syntax, for example, Expects(p) will become [[expects: p]] . GSL.util: Utilities finally // finally(f) makes a final_action{f} with a destructor that invokes f narrow_cast // narrow_cast<T>(x) is static_cast<T>(x) narrow // narrow<T>(x) is static_cast<T>(x) if static_cast<T>(x) == x or it throws narrowing_error [[implicit]] // \"Marker\" to put on single-argument constructors to explicitly make them non-explicit. move_owner // p = move_owner(q) means p = q but ??? joining_thread // a RAII style version of std::thread that joins. index // a type to use for all container and array indexing (currently an alias for ptrdiff_t ) GSL.concept: Concepts \uc774\ud558\uc758 \uac1c\ub150\ub4e4(\ud0c0\uc785\uc758 \ub3d9\uc791\uc5d0 \ub300\ud55c \uac83\ub4e4)\uc740 Andrew Sutton\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac, Range \uc81c\uc548, ISO WG21 Palo Alto TR \uc5d0\uc11c \uac00\uc838\uc628 \uac83\uc774\ub2e4. \uc774\ub4e4\uc740 ISO C++ \ud45c\uc900\uc5d0 \ud3ec\ud568\ub420 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4. \ud45c\uae30\ubc95\uc740 ISO WG21 Concepts TS \uc758 \uac83\uc744 \ub530\ub978\ub2e4. \ud6c4\uc220\ud560 \ub300\ubd80\ubd84\uc758 \uac1c\ub150\ub4e4\uc740 the Ranges TS \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. Range String // ??? Number // ??? Sortable Pointer // A type with * , -> , == , and default construction (default construction is assumed to set the singular \"null\" value); see smart pointers Unique_ptr // A type that matches Pointer , has move (not copy), and matches the Lifetime profile criteria for a unique owner type; see smart pointers Shared_ptr // A type that matches Pointer , has copy, and matches the Lifetime profile criteria for a shared owner type; see smart pointers EqualityComparable // ???Must we suffer CaMelcAse??? Convertible Common Boolean Integral SignedIntegral SemiRegular // ??? Copyable? Regular TotallyOrdered Function RegularFunction Predicate Relation ... GSL.ptr: Smart pointer concepts See Lifetimes paper .","title":"GSL"},{"location":"GSL/#gsl","text":"GSL \uc740 \uac00\uc774\ub4dc\ub77c\uc778 \uc801\uc6a9\uc744 \ub3d5\uae30 \uc704\ud574 \uc124\uacc4\ub41c \uc791\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub2e4. \uc774\ub7f0 \uae30\ub2a5\uc774 \uc5c6\ub2e4\uba74, \uac00\uc774\ub4dc\ub77c\uc778\uc740 \uc5b8\uc5b4 \uc138\ubd80\uc0ac\ud56d\ub4e4\uc5d0 \ub300\ud574 \ub354 \uc5c4\uaca9\ud574\uc838\uc57c\ub9cc \ud588\uc744 \uac83\uc774\ub2e4. \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 gsl \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\uc73c\uba70, \uc774 \uc774\ub984\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 \ub2e4\ub978 \uc798 \uc54c\ub824\uc9c4 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud55c \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubcc4\uba85\uc77c \uc218 \uc788\ub2e4. \uc774\uc640 \uac19\uc740 (\ucef4\ud30c\uc77c \uc2dc\uac04) \uc6b0\ud68c\ub294 \uc9c0\uc6d0 \uae30\ub2a5\ub4e4\uc5d0 \ub300\ud55c \uc2e4\ud5d8 \ud639\uc740 \ubcc0\ud615\uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4. GSL\uc740 \ud5e4\ub354 \ud30c\uc77c\ub85c\ub9cc \uad6c\uc131\ub418\uba70, GSL: Guidelines support library \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uae30\ub2a5\ub4e4\uc740 \uc804\ud1b5\uc801\uc778 \ub2e4\ub978 \ubc29\ubc95\ub4e4\ubcf4\ub2e4 \uc624\ubc84\ud5e4\ub4dc\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \uadf9\ub3c4\ub85c \uac00\ubccd\uac8c(Zero-Overhead) \uc124\uacc4\ub418\uc5c8\ub2e4. \ub514\ubc84\uae45 \uc791\uc5c5\uacfc \uac19\uc774 \ud2b9\uc815 \uc791\uc5c5\uc5d0 \ucd94\uac00 \uae30\ub2a5(\uc608\ub97c \ub4e4\uc5b4 \ubb54\uac00\uc5d0 \ub300\ud55c \ud655\uc778)\uc73c\ub85c \"\uacc4\uce21\"\ud560 \ub54c \uc0ac\uc6a9\ub420 \uc218\ub3c4 \uc788\ub2e4. \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c\ub294 variant \ud0c0\uc785\uc774 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uc9c0\ub9cc, GSL\uc5d0\uc11c\ub294 \uc774\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. C++ 17\uc5d0\uc11c \uc81c\uc548\ub41c \ud615\ud0dc\ub97c \uc0ac\uc6a9\ud558\ub77c . GSL \uad6c\uc131\uc694\uc18c \uc694\uc57d: GSL.view: Views GSL.owner GSL.assert: Assertions GSL.util: Utilities GSL.concept: Concepts We plan for a \"ISO C++ standard style\" semi-formal specification of the GSL. ISO C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uae30\ubc18\uc744 \ub450\uba70, GSL\uc758 \uc77c\ubd80\uac00 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ud3ec\ud568\ub418\uae30\ub97c \ubc14\ub780\ub2e4.","title":"GSL: \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac"},{"location":"GSL/#gslview-views","text":"\uc774 \ud0c0\uc785\ub4e4\uc740 \uc0ac\uc6a9\uc790\uac00 \uc18c\uc720\uad8c\uc744 \uac00\uc9c4 \ud3ec\uc778\ud130\uc640 \uadf8\ub807\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\ub4e4, \ub2e8\uc77c \uac1c\uccb4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc640 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uad6c\ubd84\ud560 \uc218 \uc788\ub3c4\ub85d \ud574\uc900\ub2e4 \"view\" \ud0c0\uc785\ub4e4\uc740 \uc790\uc6d0\uc744 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4. \ucc38\uc870 \uc5ed\uc2dc \uc790\uc6d0\uc744 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294\ub2e4. R.4 \ub97c \ucc38\uace0\ud558\ub77c. Note: References have many opportunities to outlive the objects they refer to (returning a local variable by reference, holding a reference to an element of a vector and doing push_back , binding to std::max(x, y + 1) , etc. The Lifetime safety profile aims to address those things, but even so owner<T&> does not make sense and is discouraged. \ud0c0\uc785 \uc774\ub984\ub4e4\uc740 \ub300\ubd80\ubd84 ISO \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc2a4\ud0c0\uc77c\uc744 \ub530\ub978\ub2e4(\uc18c\ubb38\uc790\uc640 '_'\ub97c \uc0ac\uc6a9): T* // The T* is not an owner, may be null; assumed to be pointing to a single element. T& // The T& is not an owner and can never be a \"null reference\"; references are always bound to objects. The \"raw-pointer\" notation (e.g. int* ) is assumed to have its most common meaning; that is, a pointer points to an object, but does not own it. Owners should be converted to resource handles (e.g., unique_ptr or vector<T> ) or marked owner<T*> . owner<T*> // a T* that owns the object pointed/referred to; may be nullptr . owner \ub294 \uc18c\uc720\uad8c\uc744 \uac00\uc9c4 \ud3ec\uc778\ud130\uc5d0 \uc0ac\uc6a9\ub418\uba70, \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc720\ub85c \uc774 \ud0c0\uc785\uc740 \uc801\ud569\ud55c \ub9ac\uc18c\uc2a4 \ud578\ub4e4 \ud0c0\uc785\uc73c\ub85c \ubcc0\ud658\ub420 \uc218 \uc5c6\ub2e4: \ubcc0\ud658 \ube44\uc6a9 \ubc1c\uc0dd \ud3ec\uc778\ud130\uac00 ABI\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0 \ud3ec\uc778\ud130\uac00 \ub9ac\uc18c\uc2a4 \ud578\ub4e4 \uad6c\ud604\uc758 \uc77c\ubd80\uc778 \uacbd\uc6b0 An owner<T> differs from a resource handle for a T by still requiring an explicit delete . An owner<T> is assumed to refer to an object on the free store (heap). If something is not supposed to be nullptr , say so: not_null<T> // T is usually a pointer type (e.g., not_null<int*> and not_null<owner<Foo*>> ) that may not be nullptr . T can be any type for which ==nullptr is meaningful. span<T> // [p:p+n) , constructor from {p, q} and {p, n} ; T is the pointer type span_p<T> // {p, predicate} [p:q) where q is the first element for which predicate(*p) is true string_span // span<char> cstring_span // span<const char> A span<T> refers to zero or more mutable T s unless T is a const type. \"Pointer arithmetic\" is best done within span s. A char* that points to more than one char but is not a C-style string (e.g., a pointer into an input buffer) should be represented by a span . zstring // a char* supposed to be a C-style string; that is, a zero-terminated sequence of char or nullptr czstring // a const char* supposed to be a C-style string; that is, a zero-terminated sequence of const char or nullptr \ub17c\ub9ac\uc801\uc73c\ub85c\ub294, \ub9c8\uc9c0\ub9c9 \ub450 \ubcc4\uce6d\uc740 \ud544\uc694\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc, \ud558\ub098\uc758 char \uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc640 C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uad6c\ubd84\ud558\uac8c \ud574\uc900\ub2e4. 0\uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\ub294 \ubb38\uc790\uc5f4\uc740 zstring \ubcf4\ub2e4\ub294 char* \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Use not_null<zstring> for C-style strings that cannot be nullptr . ??? Do we need a name for not_null<zstring> ? or is its ugliness a feature?","title":"GSL.view: Views"},{"location":"GSL/#gslowner-ownership-pointers","text":"unique_ptr<T> // \ub3c5\uc810\uc801 \uc18c\uc720\uad8c: std::unique_ptr<T> shared_ptr<T> // \uacf5\uc720 \uc18c\uc720\uad8c: std::shared_ptr<T> (a counted pointer) stack_array<T> // A stack-allocated array. The number of elements are determined at construction and fixed thereafter. The elements are mutable unless T is a const type. dyn_array<T> // ??? needed ??? A heap-allocated array. The number of elements are determined at construction and fixed thereafter. The elements are mutable unless T is a const type. Basically a span that allocates and owns its elements.","title":"GSL.owner: Ownership pointers"},{"location":"GSL/#gslassert-assertions","text":"Expects // precondition assertion. Currently placed in function bodies. Later, should be moved to declarations. // Expects(p) terminates the program unless p == true // Expect in under control of some options (enforcement, error message, alternatives to terminate) Ensures // postcondition assertion. Currently placed in function bodies. Later, should be moved to declarations. These assertions are currently macros (yuck!) and must appear in function definitions (only) pending standard committee decisions on contracts and assertion syntax. See the contract proposal ; using the attribute syntax, for example, Expects(p) will become [[expects: p]] .","title":"GSL.assert: Assertions"},{"location":"GSL/#gslutil-utilities","text":"finally // finally(f) makes a final_action{f} with a destructor that invokes f narrow_cast // narrow_cast<T>(x) is static_cast<T>(x) narrow // narrow<T>(x) is static_cast<T>(x) if static_cast<T>(x) == x or it throws narrowing_error [[implicit]] // \"Marker\" to put on single-argument constructors to explicitly make them non-explicit. move_owner // p = move_owner(q) means p = q but ??? joining_thread // a RAII style version of std::thread that joins. index // a type to use for all container and array indexing (currently an alias for ptrdiff_t )","title":"GSL.util: Utilities"},{"location":"GSL/#gslconcept-concepts","text":"\uc774\ud558\uc758 \uac1c\ub150\ub4e4(\ud0c0\uc785\uc758 \ub3d9\uc791\uc5d0 \ub300\ud55c \uac83\ub4e4)\uc740 Andrew Sutton\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac, Range \uc81c\uc548, ISO WG21 Palo Alto TR \uc5d0\uc11c \uac00\uc838\uc628 \uac83\uc774\ub2e4. \uc774\ub4e4\uc740 ISO C++ \ud45c\uc900\uc5d0 \ud3ec\ud568\ub420 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4. \ud45c\uae30\ubc95\uc740 ISO WG21 Concepts TS \uc758 \uac83\uc744 \ub530\ub978\ub2e4. \ud6c4\uc220\ud560 \ub300\ubd80\ubd84\uc758 \uac1c\ub150\ub4e4\uc740 the Ranges TS \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. Range String // ??? Number // ??? Sortable Pointer // A type with * , -> , == , and default construction (default construction is assumed to set the singular \"null\" value); see smart pointers Unique_ptr // A type that matches Pointer , has move (not copy), and matches the Lifetime profile criteria for a unique owner type; see smart pointers Shared_ptr // A type that matches Pointer , has copy, and matches the Lifetime profile criteria for a shared owner type; see smart pointers EqualityComparable // ???Must we suffer CaMelcAse??? Convertible Common Boolean Integral SignedIntegral SemiRegular // ??? Copyable? Regular TotallyOrdered Function RegularFunction Predicate Relation ...","title":"GSL.concept: Concepts"},{"location":"GSL/#gslptr-smart-pointer-concepts","text":"See Lifetimes paper .","title":"GSL.ptr: Smart pointer concepts"},{"location":"Glossary/","text":"Glossary A relatively informal definition of terms used in the guidelines (based of the glossary in Programming: Principles and Practice using C++ ) More information on many topics about C++ can be found on the Standard C++ Foundation 's site. ABI : Application Binary Interface, a specification for a specific hardware platform combined with the operating system. Contrast with API. abstract class : a class that cannot be directly used to create objects; often used to define an interface to derived classes. A class is made abstract by having a pure virtual function or only protected constructors. abstraction : a description of something that selectively and deliberately ignores (hides) details (e.g., implementation details); selective ignorance. address : a value that allows us to find an object in a computer's memory. algorithm : a procedure or formula for solving a problem; a finite series of computational steps to produce a result. alias : an alternative way of referring to an object; often a name, pointer, or reference. API : Application Programming Interface, a set of functions that form the communication between various software components. Contrast with ABI. application : a program or a collection of programs that is considered an entity by its users. approximation : something (e.g., a value or a design) that is close to the perfect or ideal (value or design). Often an approximation is a result of trade-offs among ideals. argument : a value passed to a function or a template, in which it is accessed through a parameter. array : a homogeneous sequence of elements, usually numbered, e.g., [0:max) . assertion : a statement inserted into a program to state (assert) that something must always be true at this point in the program. base class : a class used as the base of a class hierarchy. Typically a base class has one or more virtual functions. bit : the basic unit of information in a computer. A bit can have the value 0 or the value 1. bug : an error in a program. byte : the basic unit of addressing in most computers. Typically, a byte holds 8 bits. class : a user-defined type that may contain data members, function members, and member types. code : a program or a part of a program; ambiguously used for both source code and object code. compiler : a program that turns source code into object code. complexity : a hard-to-precisely-define notion or measure of the difficulty of constructing a solution to a problem or of the solution itself. Sometimes complexity is used to (simply) mean an estimate of the number of operations needed to execute an algorithm. computation : the execution of some code, usually taking some input and producing some output. concept : (1) a notion, and idea; (2) a set of requirements, usually for a template argument. concrete class : class for which objects can be created. constant : a value that cannot be changed (in a given scope); not mutable. constructor : an operation that initializes (\"constructs\") an object. Typically a constructor establishes an invariant and often acquires resources needed for an object to be used (which are then typically released by a destructor). container : an object that holds elements (other objects). copy : an operation that makes two object have values that compare equal. See also move. correctness : a program or a piece of a program is correct if it meets its specification. Unfortunately, a specification can be incomplete or inconsistent, or can fail to meet users' reasonable expectations. Thus, to produce acceptable code, we sometimes have to do more than just follow the formal specification. cost : the expense (e.g., in programmer time, run time, or space) of producing a program or of executing it. Ideally, cost should be a function of complexity. customization point : ??? data : values used in a computation. debugging : the act of searching for and removing errors from a program; usually far less systematic than testing. declaration : the specification of a name with its type in a program. definition : a declaration of an entity that supplies all information necessary to complete a program using the entity. Simplified definition: a declaration that allocates memory. derived class : a class derived from one or more base classes. design : an overall description of how a piece of software should operate to meet its specification. destructor : an operation that is implicitly invoked (called) when an object is destroyed (e.g., at the end of a scope). Often, it releases resources. encapsulation : protecting something meant to be private (e.g., implementation details) from unauthorized access. error : a mismatch between reasonable expectations of program behavior (often expressed as a requirement or a users' guide) and what a program actually does. executable : a program ready to be run (executed) on a computer. feature creep : a tendency to add excess functionality to a program \"just in case.\" file : a container of permanent information in a computer. floating-point number : a computer's approximation of a real number, such as 7.93 and 10.78e-3. function : a named unit of code that can be invoked (called) from different parts of a program; a logical unit of computation. generic programming : a style of programming focused on the design and efficient implementation of algorithms. A generic algorithm will work for all argument types that meet its requirements. In C++, generic programming typically uses templates. global variable : technically, a named object in namespace scope. handle : a class that allows access to another through a member pointer or reference. See also resource, copy, move. header : a file containing declarations used to share interfaces between parts of a program. hiding : the act of preventing a piece of information from being directly seen or accessed. For example, a name from a nested (inner) scope can prevent that same name from an outer (enclosing) scope from being directly used. ideal : the perfect version of something we are striving for. Usually we have to make trade-offs and settle for an approximation. implementation : (1) the act of writing and testing code; (2) the code that implements a program. infinite loop : a loop where the termination condition never becomes true. See iteration. infinite recursion : a recursion that doesn't end until the machine runs out of memory to hold the calls. In reality, such recursion is never infinite but is terminated by some hardware error. information hiding : the act of separating interface and implementation, thus hiding implementation details not meant for the user's attention and providing an abstraction. initialize : giving an object its first (initial) value. input : values used by a computation (e.g., function arguments and characters typed on a keyboard). integer : a whole number, such as 42 and -99. interface : a declaration or a set of declarations specifying how a piece of code (such as a function or a class) can be called. invariant : something that must be always true at a given point (or points) of a program; typically used to describe the state (set of values) of an object or the state of a loop before entry into the repeated statement. iteration : the act of repeatedly executing a piece of code; see recursion. iterator : an object that identifies an element of a sequence. ISO : International Organization for Standardization. The C++ language is an ISO standard, ISO/IEC 14882. More information at iso.org . library : a collection of types, functions, classes, etc. implementing a set of facilities (abstractions) meant to be potentially used as part of more that one program. lifetime : the time from the initialization of an object until it becomes unusable (goes out of scope, is deleted, or the program terminates). linker : a program that combines object code files and libraries into an executable program. literal : a notation that directly specifies a value, such as 12 specifying the integer value \"twelve.\" loop : a piece of code executed repeatedly; in C++, typically a for-statement or a while -statement. move : an operation that transfers a value from one object to another leaving behind a value representing \"empty.\" See also copy. mutable : changeable; the opposite of immutable, constant, and invariable. object : (1) an initialized region of memory of a known type which holds a value of that type; (2) a region of memory. object code : output from a compiler intended as input for a linker (for the linker to produce executable code). object file : a file containing object code. object-oriented programming : (OOP) a style of programming focused on the design and use of classes and class hierarchies. operation : something that can perform some action, such as a function and an operator. output : values produced by a computation (e.g., a function result or lines of characters written on a screen). overflow : producing a value that cannot be stored in its intended target. overload : defining two functions or operators with the same name but different argument (operand) types. override : defining a function in a derived class with the same name and argument types as a virtual function in the base class, thus making the function callable through the interface defined by the base class. owner : an object responsible for releasing a resource. paradigm : a somewhat pretentious term for design or programming style; often used with the (erroneous) implication that there exists a paradigm that is superior to all others. parameter : a declaration of an explicit input to a function or a template. When called, a function can access the arguments passed through the names of its parameters. pointer : (1) a value used to identify a typed object in memory; (2) a variable holding such a value. post-condition : a condition that must hold upon exit from a piece of code, such as a function or a loop. pre-condition : a condition that must hold upon entry into a piece of code, such as a function or a loop. program : code (possibly with associated data) that is sufficiently complete to be executed by a computer. programming : the art of expressing solutions to problems as code. programming language : a language for expressing programs. pseudo code : a description of a computation written in an informal notation rather than a programming language. pure virtual function : a virtual function that must be overridden in a derived class. RAII : (\"Resource Acquisition Is Initialization\") a basic technique for resource management based on scopes. range : a sequence of values that can be described by a start point and an end point. For example, [0:5) means the values 0, 1, 2, 3, and 4. recursion : the act of a function calling itself; see also iteration. reference : (1) a value describing the location of a typed value in memory; (2) a variable holding such a value. regular expression : a notation for patterns in character strings. regular : a type that behaves similarly to built-in types like int and can be compared with == . In particular, an object of a regular type can be copied and the result of a copy is a separate object that compares equal to the original. See also semiregular type . requirement : (1) a description of the desired behavior of a program or part of a program; (2) a description of the assumptions a function or template makes of its arguments. resource : something that is acquired and must later be released, such as a file handle, a lock, or memory. See also handle, owner. rounding : conversion of a value to the mathematically nearest value of a less precise type. RTTI : Run-Time Type Information. ??? scope : the region of program text (source code) in which a name can be referred to. semiregular : a type that behaves roughly like an built-in type like int , but possibly without a == operator. See also regular type . sequence : elements that can be visited in a linear order. software : a collection of pieces of code and associated data; often used interchangeably with program. source code : code as produced by a programmer and (in principle) readable by other programmers. source file : a file containing source code. specification : a description of what a piece of code should do. standard : an officially agreed upon definition of something, such as a programming language. state : a set of values. STL : the containers, iterators, and algorithms part of the standard library. string : a sequence of characters. style : a set of techniques for programming leading to a consistent use of language features; sometimes used in a very restricted sense to refer just to low-level rules for naming and appearance of code. subtype : derived type; a type that has all the properties of a type and possibly more. supertype : base type; a type that has a subset of the properties of a type. system : (1) a program or a set of programs for performing a task on a computer; (2) a shorthand for \"operating system\", that is, the fundamental execution environment and tools for a computer. TS : Technical Specification , A Technical Specification addresses work still under technical development, or where it is believed that there will be a future, but not immediate, possibility of agreement on an International Standard. A Technical Specification is published for immediate use, but it also provides a means to obtain feedback. The aim is that it will eventually be transformed and republished as an International Standard. template : a class or a function parameterized by one or more types or (compile-time) values; the basic C++ language construct supporting generic programming. testing : a systematic search for errors in a program. trade-off : the result of balancing several design and implementation criteria. truncation : loss of information in a conversion from a type into another that cannot exactly represent the value to be converted. type : something that defines a set of possible values and a set of operations for an object. uninitialized : the (undefined) state of an object before it is initialized. unit : (1) a standard measure that gives meaning to a value (e.g., km for a distance); (2) a distinguished (e.g., named) part of a larger whole. use case : a specific (typically simple) use of a program meant to test its functionality and demonstrate its purpose. value : a set of bits in memory interpreted according to a type. variable : a named object of a given type; contains a value unless uninitialized. virtual function : a member function that can be overridden in a derived class. word : a basic unit of memory in a computer, often the unit used to hold an integer.","title":"Glossary"},{"location":"Glossary/#glossary","text":"A relatively informal definition of terms used in the guidelines (based of the glossary in Programming: Principles and Practice using C++ ) More information on many topics about C++ can be found on the Standard C++ Foundation 's site. ABI : Application Binary Interface, a specification for a specific hardware platform combined with the operating system. Contrast with API. abstract class : a class that cannot be directly used to create objects; often used to define an interface to derived classes. A class is made abstract by having a pure virtual function or only protected constructors. abstraction : a description of something that selectively and deliberately ignores (hides) details (e.g., implementation details); selective ignorance. address : a value that allows us to find an object in a computer's memory. algorithm : a procedure or formula for solving a problem; a finite series of computational steps to produce a result. alias : an alternative way of referring to an object; often a name, pointer, or reference. API : Application Programming Interface, a set of functions that form the communication between various software components. Contrast with ABI. application : a program or a collection of programs that is considered an entity by its users. approximation : something (e.g., a value or a design) that is close to the perfect or ideal (value or design). Often an approximation is a result of trade-offs among ideals. argument : a value passed to a function or a template, in which it is accessed through a parameter. array : a homogeneous sequence of elements, usually numbered, e.g., [0:max) . assertion : a statement inserted into a program to state (assert) that something must always be true at this point in the program. base class : a class used as the base of a class hierarchy. Typically a base class has one or more virtual functions. bit : the basic unit of information in a computer. A bit can have the value 0 or the value 1. bug : an error in a program. byte : the basic unit of addressing in most computers. Typically, a byte holds 8 bits. class : a user-defined type that may contain data members, function members, and member types. code : a program or a part of a program; ambiguously used for both source code and object code. compiler : a program that turns source code into object code. complexity : a hard-to-precisely-define notion or measure of the difficulty of constructing a solution to a problem or of the solution itself. Sometimes complexity is used to (simply) mean an estimate of the number of operations needed to execute an algorithm. computation : the execution of some code, usually taking some input and producing some output. concept : (1) a notion, and idea; (2) a set of requirements, usually for a template argument. concrete class : class for which objects can be created. constant : a value that cannot be changed (in a given scope); not mutable. constructor : an operation that initializes (\"constructs\") an object. Typically a constructor establishes an invariant and often acquires resources needed for an object to be used (which are then typically released by a destructor). container : an object that holds elements (other objects). copy : an operation that makes two object have values that compare equal. See also move. correctness : a program or a piece of a program is correct if it meets its specification. Unfortunately, a specification can be incomplete or inconsistent, or can fail to meet users' reasonable expectations. Thus, to produce acceptable code, we sometimes have to do more than just follow the formal specification. cost : the expense (e.g., in programmer time, run time, or space) of producing a program or of executing it. Ideally, cost should be a function of complexity. customization point : ??? data : values used in a computation. debugging : the act of searching for and removing errors from a program; usually far less systematic than testing. declaration : the specification of a name with its type in a program. definition : a declaration of an entity that supplies all information necessary to complete a program using the entity. Simplified definition: a declaration that allocates memory. derived class : a class derived from one or more base classes. design : an overall description of how a piece of software should operate to meet its specification. destructor : an operation that is implicitly invoked (called) when an object is destroyed (e.g., at the end of a scope). Often, it releases resources. encapsulation : protecting something meant to be private (e.g., implementation details) from unauthorized access. error : a mismatch between reasonable expectations of program behavior (often expressed as a requirement or a users' guide) and what a program actually does. executable : a program ready to be run (executed) on a computer. feature creep : a tendency to add excess functionality to a program \"just in case.\" file : a container of permanent information in a computer. floating-point number : a computer's approximation of a real number, such as 7.93 and 10.78e-3. function : a named unit of code that can be invoked (called) from different parts of a program; a logical unit of computation. generic programming : a style of programming focused on the design and efficient implementation of algorithms. A generic algorithm will work for all argument types that meet its requirements. In C++, generic programming typically uses templates. global variable : technically, a named object in namespace scope. handle : a class that allows access to another through a member pointer or reference. See also resource, copy, move. header : a file containing declarations used to share interfaces between parts of a program. hiding : the act of preventing a piece of information from being directly seen or accessed. For example, a name from a nested (inner) scope can prevent that same name from an outer (enclosing) scope from being directly used. ideal : the perfect version of something we are striving for. Usually we have to make trade-offs and settle for an approximation. implementation : (1) the act of writing and testing code; (2) the code that implements a program. infinite loop : a loop where the termination condition never becomes true. See iteration. infinite recursion : a recursion that doesn't end until the machine runs out of memory to hold the calls. In reality, such recursion is never infinite but is terminated by some hardware error. information hiding : the act of separating interface and implementation, thus hiding implementation details not meant for the user's attention and providing an abstraction. initialize : giving an object its first (initial) value. input : values used by a computation (e.g., function arguments and characters typed on a keyboard). integer : a whole number, such as 42 and -99. interface : a declaration or a set of declarations specifying how a piece of code (such as a function or a class) can be called. invariant : something that must be always true at a given point (or points) of a program; typically used to describe the state (set of values) of an object or the state of a loop before entry into the repeated statement. iteration : the act of repeatedly executing a piece of code; see recursion. iterator : an object that identifies an element of a sequence. ISO : International Organization for Standardization. The C++ language is an ISO standard, ISO/IEC 14882. More information at iso.org . library : a collection of types, functions, classes, etc. implementing a set of facilities (abstractions) meant to be potentially used as part of more that one program. lifetime : the time from the initialization of an object until it becomes unusable (goes out of scope, is deleted, or the program terminates). linker : a program that combines object code files and libraries into an executable program. literal : a notation that directly specifies a value, such as 12 specifying the integer value \"twelve.\" loop : a piece of code executed repeatedly; in C++, typically a for-statement or a while -statement. move : an operation that transfers a value from one object to another leaving behind a value representing \"empty.\" See also copy. mutable : changeable; the opposite of immutable, constant, and invariable. object : (1) an initialized region of memory of a known type which holds a value of that type; (2) a region of memory. object code : output from a compiler intended as input for a linker (for the linker to produce executable code). object file : a file containing object code. object-oriented programming : (OOP) a style of programming focused on the design and use of classes and class hierarchies. operation : something that can perform some action, such as a function and an operator. output : values produced by a computation (e.g., a function result or lines of characters written on a screen). overflow : producing a value that cannot be stored in its intended target. overload : defining two functions or operators with the same name but different argument (operand) types. override : defining a function in a derived class with the same name and argument types as a virtual function in the base class, thus making the function callable through the interface defined by the base class. owner : an object responsible for releasing a resource. paradigm : a somewhat pretentious term for design or programming style; often used with the (erroneous) implication that there exists a paradigm that is superior to all others. parameter : a declaration of an explicit input to a function or a template. When called, a function can access the arguments passed through the names of its parameters. pointer : (1) a value used to identify a typed object in memory; (2) a variable holding such a value. post-condition : a condition that must hold upon exit from a piece of code, such as a function or a loop. pre-condition : a condition that must hold upon entry into a piece of code, such as a function or a loop. program : code (possibly with associated data) that is sufficiently complete to be executed by a computer. programming : the art of expressing solutions to problems as code. programming language : a language for expressing programs. pseudo code : a description of a computation written in an informal notation rather than a programming language. pure virtual function : a virtual function that must be overridden in a derived class. RAII : (\"Resource Acquisition Is Initialization\") a basic technique for resource management based on scopes. range : a sequence of values that can be described by a start point and an end point. For example, [0:5) means the values 0, 1, 2, 3, and 4. recursion : the act of a function calling itself; see also iteration. reference : (1) a value describing the location of a typed value in memory; (2) a variable holding such a value. regular expression : a notation for patterns in character strings. regular : a type that behaves similarly to built-in types like int and can be compared with == . In particular, an object of a regular type can be copied and the result of a copy is a separate object that compares equal to the original. See also semiregular type . requirement : (1) a description of the desired behavior of a program or part of a program; (2) a description of the assumptions a function or template makes of its arguments. resource : something that is acquired and must later be released, such as a file handle, a lock, or memory. See also handle, owner. rounding : conversion of a value to the mathematically nearest value of a less precise type. RTTI : Run-Time Type Information. ??? scope : the region of program text (source code) in which a name can be referred to. semiregular : a type that behaves roughly like an built-in type like int , but possibly without a == operator. See also regular type . sequence : elements that can be visited in a linear order. software : a collection of pieces of code and associated data; often used interchangeably with program. source code : code as produced by a programmer and (in principle) readable by other programmers. source file : a file containing source code. specification : a description of what a piece of code should do. standard : an officially agreed upon definition of something, such as a programming language. state : a set of values. STL : the containers, iterators, and algorithms part of the standard library. string : a sequence of characters. style : a set of techniques for programming leading to a consistent use of language features; sometimes used in a very restricted sense to refer just to low-level rules for naming and appearance of code. subtype : derived type; a type that has all the properties of a type and possibly more. supertype : base type; a type that has a subset of the properties of a type. system : (1) a program or a set of programs for performing a task on a computer; (2) a shorthand for \"operating system\", that is, the fundamental execution environment and tools for a computer. TS : Technical Specification , A Technical Specification addresses work still under technical development, or where it is believed that there will be a future, but not immediate, possibility of agreement on an International Standard. A Technical Specification is published for immediate use, but it also provides a means to obtain feedback. The aim is that it will eventually be transformed and republished as an International Standard. template : a class or a function parameterized by one or more types or (compile-time) values; the basic C++ language construct supporting generic programming. testing : a systematic search for errors in a program. trade-off : the result of balancing several design and implementation criteria. truncation : loss of information in a conversion from a type into another that cannot exactly represent the value to be converted. type : something that defines a set of possible values and a set of operations for an object. uninitialized : the (undefined) state of an object before it is initialized. unit : (1) a standard measure that gives meaning to a value (e.g., km for a distance); (2) a distinguished (e.g., named) part of a larger whole. use case : a specific (typically simple) use of a program meant to test its functionality and demonstrate its purpose. value : a set of bits in memory interpreted according to a type. variable : a named object of a given type; contains a value unless uninitialized. virtual function : a member function that can be overridden in a derived class. word : a basic unit of memory in a computer, often the unit used to hold an integer.","title":"Glossary"},{"location":"Interfaces/","text":"I: \uc778\ud130\ud398\uc774\uc2a4 \uc778\ud130\ud398\uc774\uc2a4\ub294 \ud504\ub85c\uadf8\ub7a8 \ubd80\ubd84 \uc0ac\uc774\uc758 \uacc4\uc57d\uc774\ub2e4. \uc11c\ube44\uc2a4\uc758 \uacf5\uae09\uc790\uc640 \uc0ac\uc6a9\uc790\uac00 \uae30\ub300\ud558\ub294 \ubc14\ub97c \uc815\ud655\ud558\uac8c \uae30\uc220\ud558\ub294 \uac83\uc774 \ud575\uc2ec\uc774\ub2e4. \uc88b\uc740 \uc778\ud130\ud398\uc774\uc2a4(\uc774\ud574\ud558\uae30 \uc27d\uace0, \ud6a8\uc728\uc801\uc778 \uc0ac\uc6a9\uc744 \uc7a5\ub824\ud558\uace0, \uc27d\uac8c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uace0, \ud14c\uc2a4\ud2b8\ub97c \uc9c0\uc6d0\ud558\ub294 \ub4f1)\ub294 \uc544\ub9c8\ub3c4 \ucf54\ub4dc \uad6c\uc131 \uc911\uc5d0\uc11c \uac00\uc7a5 \uc911\uc694\ud55c \uc694\uc18c \uc911 \ud558\ub098\ub2e4. \uc778\ud130\ud398\uc774\uc2a4 \uaddc\uce59 \uc694\uc57d: I.1: \uc778\ud130\ud398\uc774\uc2a4\ub294 \uba85\ud655\ud558\uac8c(explicit) \uc791\uc131\ud558\ub77c I.2: const \uac00 \uc544\ub2cc \uc804\uc5ed\ubcc0\uc218\ub97c \uc9c0\uc591\ud558\ub77c I.3: \uc2f1\uae00\ud1a4 \ud328\ud134\uc744 \uc9c0\uc591\ud558\ub77c I.4: \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc744 \uc815\ud655\ud558\uace0 \uc5c4\uaca9\ud558\uac8c \uc900\uc218\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c I.5: (\ud558\ub098\ub77c\ub3c4 \uc788\ub2e4\uba74) \uc0ac\uc804 \uc870\uac74\uc744 \uae30\uc220\ud558\ub77c I.6: \uc0ac\uc804 \uc870\uac74\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 Expects() \ub97c \uc0ac\uc6a9\ud558\ub77c I.7: \uc0ac\ud6c4 \uc870\uac74\uc744 \uae30\uc220\ud558\ub77c I.8: \uc0ac\ud6c4 \uc870\uac74\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 Ensures() \ub97c \uc0ac\uc6a9\ud558\ub77c I.9: \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud15c\ud50c\ub9bf\uc774\ub77c\uba74 \ucee8\uc149(Concept)\uc744 \uc0ac\uc6a9\ud574\uc11c \ub9e4\uac1c \ubcc0\uc218\ub97c \ubb38\uc11c\ud654\ud558\ub77c I.10: \uc694\uad6c\ub41c \uc791\uc5c5\uc758 \uc218\ud589 \uc2e4\ud328\ub97c \uc54c\ub9ac\uae30 \uc704\ud574 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\ub77c I.11: \uc6d0\uc2dc \ud3ec\uc778\ud130( T* ) \ud639\uc740 \ucc38\uc870( T& )\ub97c \uc0ac\uc6a9\ud574 \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c I.12: null\uc774 \ub418\uc5b4\uc120 \uc548\ub418\ub294 \ud3ec\uc778\ud130\ub294 not_null \ub85c \uc120\uc5b8\ud558\ub77c I.13: \ubc30\uc5f4\uc744 \ub2e8\uc77c \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c I.22: \uc804\uc5ed \uac1c\uccb4\uac00 \ubcf5\uc7a1\ud558\uac8c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c I.23: \ud568\uc218 \uc778\uc790 \uac1c\uc218\ub97c \ucd5c\uc18c\ub85c \uc720\uc9c0\ud558\ub77c I.24: \uac19\uc740 \ud0c0\uc785\uc758 \uad00\ub828\uc5c6\ub294 \ub9e4\uac1c \ubcc0\uc218\uac00 \ubd99\uc5b4\uc788\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c I.25: \ud074\ub798\uc2a4 \uacc4\uce35\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ucd94\uc0c1 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub77c I.26: \ud06c\ub85c\uc2a4 \ucef4\ud30c\uc77c\ub7ec ABI\ub97c \uc6d0\ud55c\ub2e4\uba74 C \uc2a4\ud0c0\uc77c \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c I.27: \ubcc0\ud654\uac00 \uc801\uc740(stable) ABI\ub97c \uc6d0\ud55c\ub2e4\uba74, Pimpl idiom \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\ub77c I.30: \uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294 \ucf54\ub4dc\ub294 \ucea1\uc290\ud654\ud558\ub77c \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9 : F: \ud568\uc218(Functions) C.concrete: \uc2e4\uc81c \ud0c0\uc785(Concrete types) C.hier: \ud074\ub798\uc2a4 \uacc4\uce35(Class hierarchies) C.over: \uc624\ubc84\ub85c\ub529\uacfc \uc624\ubc84\ub85c\ub529 \ub41c \uc5f0\uc0b0\uc790(Overloading and overloaded operators) C.con: \ucee8\ud14c\uc774\ub108\uc640 \ub2e4\ub978 \ub9ac\uc18c\uc2a4 \ud578\ub4e4(Containers and other resource handles) E: \uc624\ub958 \ucc98\ub9ac(Error handling) T: \ud15c\ud50c\ub9bf\uacfc \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d(Templates and generic programming) I.1: \uc778\ud130\ud398\uc774\uc2a4\ub294 \uba85\ud655\ud558\uac8c(explicit) \uc791\uc131\ud558\ub77c Reason \uc815\ud655\uc131. \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc5b8\uae09\ub418\uc9c0 \uc54a\uc740 \uac00\uc815\uc740 \uac04\uacfc\ub418\uae30 \uc27d\uace0 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc5b4\ub835\ub2e4. Example, bad \uc804\uc5ed (\ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc5d0 \uc788\ub294) \ubcc0\uc218\ub97c \ud1b5\ud574 \ud568\uc218\uc758 \ud589\ub3d9\uc744 \uc81c\uc5b4\ud558\ub294 \uac83\uc740 \uc554\uc2dc\uc801\uc774\uace0 \ud63c\ub780\uc2a4\ub7fd\ub2e4. \uc608\ub97c \ub4e4\uc5b4: int round ( double d ) { return ( round_up ) ? ceil ( d ) : d ; // \uc774\ub807\uac8c \ud558\uba74 \uc548\ub41c\ub2e4: \"\ubcf4\uc774\uc9c0 \uc54a\ub294\" \uc758\uc874\uc131\uc774 \uc788\ub2e4 } round(7.2) \ub97c \ub450 \ubc88 \ud638\ucd9c\ud574\uc11c \uc11c\ub85c \ub2e4\ub978 \uacb0\uacfc\uac00 \ubc1c\uc0dd\ud55c\ub2e4\uba74 \ud638\ucd9c\ud558\ub294 \uc785\uc7a5\uc5d0\uc11c\ub294 \ud568\uc218\uc758 \uc758\ubbf8\ub97c \uba85\ud655\ud558\uac8c \uc54c\uc9c0 \ubabb\ud560 \uac83\uc774\ub2e4. Exception \uc6b0\ub9ac\ub294 \ub54c\ub54c\ub85c \ud658\uacbd \ubcc0\uc218\ub97c \ud1b5\ud574 \uc5f0\uc0b0\uc744 \uc138\uc138\ud558\uac8c \uc81c\uc5b4\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc608\ucee8\ub300, \uc77c\ubc18 \ucd9c\ub825\uacfc \uc0c1\uc138\ud55c(verbose) \ucd9c\ub825\uc911 \ud558\ub098\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud558\uac70\ub098, \ub514\ubc84\uadf8 \ud639\uc740 \ucd5c\uc801\ud654\ub97c \uc120\ud0dd\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc774\ub7f0 \ube44-\uc9c0\uc5ed\uc801\uc778(non-local) \uc81c\uc5b4\ub97c \uc0ac\uc6a9\ud558\uba74 \uc7a0\uc7ac\uc801\uc73c\ub85c \ud63c\ub780\uc758 \uc18c\uc9c0\uac00 \uc788\uc9c0\ub9cc, \ub300\uc2e0 \uad6c\ud604 \uc138\ubd80\uc0ac\ud56d\uc744 \uc81c\uc5b4\ud560 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \uc81c\uc5b4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 \uc758\ubbf8\uad6c\uc870\uac00 \uace0\uc815\ub418\uc5c8\uc744 \uac83\uc774\ub2e4. Example, bad errno \uc640 \uac19\uc774 \uc804\uc5ed \ubcc0\uc218\ub97c \ud1b5\ud574 \uc624\ub958\ub97c \ubcf4\uace0\ud558\ub294 \uac83\uc740 \ubb34\uc2dc\ub418\uae30 \uc27d\ub2e4. \uc608\ub97c \ub4e4\uc5b4: // \uc774\ub807\uac8c \ud558\uba74 \uc548\ub41c\ub2e4: printf\uc758 \ubc18\ud658\uac12\uc744 \uac80\uc0ac\ud558\uc9c0 \uc54a\ub294\ub2e4 fprintf ( connection , \"logging: %d %d %d \\n \" , x , y , s ); \ub9cc\uc57d \uc5f0\uacb0(connection)\uc774 \ub2e4\uc6b4\ub418\uc5b4 \ub85c\uadf8\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc5b4\ub5a8\uae4c? Alternative \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c. \uc608\uc678\ub294 \ubb34\uc2dc\ud560 \uc218 \uc5c6\ub2e4. Alternative Formulation : \uc804\uc5ed \ub610\ub294 \uc554\uc2dc\uc801 \uc0c1\ud0dc\uc758 \uac12\uc744 \ud1b5\ud574 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc815\ubcf4\uac00 \uc804\ub2ec\ub418\ub294 \uac83\uc744 \ud53c\ud558\ub77c. const \uac00 \uc544\ub2cc \uba64\ubc84 \ud568\uc218\ub294 \uac1c\uccb4\uc758 \uc0c1\ud0dc\ub97c \ud1b5\ud574 \ub2e4\ub978 \uba64\ubc84 \ud568\uc218\uc5d0\uac8c \uc815\ubcf4\ub97c \uc804\ub2ec\ud55c\ub2e4\ub294 \uc810\uc744 \ucc38\uace0\ud558\ub77c. Alternative Formulation : \uc778\ud130\ud398\uc774\uc2a4\ub294 \ud568\uc218\ub098 \ud568\uc218\uc758 \uc9d1\ud569\uc774\uc5b4\uc57c \ud55c\ub2e4. \ud568\uc218\ub294 \ud15c\ud50c\ub9bf \ud568\uc218\uc77c \uc218 \uc788\uace0 \ud568\uc218 \uc9d1\ud569\uc740 \ud074\ub798\uc2a4\ub098 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc77c \uc218 \uc788\ub2e4. Enforcement (\uac04\ub2e8\ud568) \ud568\uc218\ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218 \uac12\uc5d0 \ub530\ub77c \uc81c\uc5b4 \ud750\ub984\uc744 \uacb0\uc815\ud574\uc11c\ub294 \uc548\ub41c\ub2e4 (\uac04\ub2e8\ud568) \ud568\uc218\ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\uc5d0 \uac12\uc744 \uc800\uc7a5\ud574\uc11c\ub294 \uc548\ub41c\ub2e4 I.2: const \uac00 \uc544\ub2cc \uc804\uc5ed\ubcc0\uc218\ub97c \uc9c0\uc591\ud558\ub77c Reason const \uac00 \uc544\ub2cc \uc804\uc5ed \ubcc0\uc218\ub294 \uc758\uc874\uc131\uc744 \uc228\uae30\uace0 \uc608\uce21\ud558\uc9c0 \ubabb\ud55c \ubcc0\ud654\uc5d0 \uc758\uc874\ud558\uac8c \ub9cc\ub4e0\ub2e4. Example struct Data { // ... lots of stuff ... } data ; // non-const data void compute () // don't { // ... use `data` ... } void output () // don't { // ... use `data` ... } \ub610 \uc5b4\ub514\uc11c data \ub97c \uc218\uc815\ud558\ub294\uc9c0 \uc54c \uc218 \uc788\uaca0\ub294\uac00? Note \uc804\uc5ed \uc0c1\uc218 \ub294 \uc720\uc6a9\ud558\ub2e4. Note \uc804\uc5ed \ubcc0\uc218\uc5d0 \ubc18\ud558\ub294 \uaddc\uce59\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc758 \ubcc0\uc218\ub4e4\uc5d0\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ub41c\ub2e4. Alternative \ubcf5\uc0ac\ub97c \ud53c\ud558\uae30 \uc704\ud574 \uc804\uc5ed \ubcc0\uc218(\uc880 \ub354 \uc77c\ubc18\ud654\ud558\uc790\uba74 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc758 \ub370\uc774\ud130)\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 const \ub808\ud37c\ub7f0\uc2a4\ub85c \uac1c\uccb4\ub97c \uc804\ub2ec\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c. \ub2e4\ub978 \ud574\uacb0\ucc45\uc740 \uac1c\uccb4\uc758 \uc0c1\ud0dc\ub85c\uc11c\uc758 \ub370\uc774\ud130\uc640 \uba64\ubc84 \ud568\uc218\ub85c\uc11c\uc758 \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\ub294 \uac83\uc774\ub2e4. Warning \ub370\uc774\ud130 \uacbd\ud569(data race)\uc744 \uc870\uc2ec\ud558\ub77c. \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uc804\uc5ed \ub370\uc774\ud130(\ub610\ub294 \ub808\ud37c\ub7f0\uc2a4\ub85c \uc804\ub2ec\ub41c \ub370\uc774\ud130)\uc5d0 \uc811\uadfc\ud558\ub824\uace0 \ud55c\ub2e4\uba74, \ub370\uc774\ud130 \uacbd\ud569\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub294 \uc5b8\uc81c\ub098 \ub370\uc774\ud130 \uacbd\ud569\uc758 \uac00\ub2a5\uc131\uc774 \uc788\ub2e4. Note \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub294 \uacbd\ud569 \uc870\uac74(race condition)\uc774 \uc0dd\uae30\uc9c0 \uc54a\ub294\ub2e4. References \ud568\uc218 \ud638\ucd9c\uc5d0 \ub300\ud55c \uaddc\uce59 Note \uc774 \uaddc\uce59\uc740 \"\uc9c0\uc591\ud558\ub77c\"\ub294 \uac83\uc774\uc9c0, \"\uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c\"\uac00 \uc544\ub2c8\ub2e4. \ubb3c\ub860 (\ub4dc\ubb3c\uac8c) cin , cout , \uadf8\ub9ac\uace0 cerr \uac19\uc740 \uc608\uc678\uac00 \uc788\uc744 \uac83\uc774\ub2e4. Enforcement (\uac04\ub2e8\ud568) \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704 \ub0b4\uc5d0 \uc815\uc758\ub41c const \uac00 \uc544\ub2cc \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c \ubaa8\ub450 \ubcf4\uace0\ud55c\ub2e4. I.3: \uc2f1\uae00\ud1a4 \ud328\ud134\uc744 \uc9c0\uc591\ud558\ub77c Reason \uc2f1\uae00\ud1a4\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \ubcf5\uc7a1\ud55c \uc804\uc5ed \uac1c\uccb4\uc774\ub2e4. Example class Singleton { // ... \uc624\uc9c1 \ud558\ub098\ub9cc \uc0dd\uc131\ub418\uc5c8\uace0, \uc801\uc808\ud558\uac8c \ucd08\uae30\ud654 \ub418\uc5c8\ub294\uc9c0 \ub4f1\uc744 \ud655\uc2e0\ud558\uae30 \uc704\ud574\uc11c // \ub9ce\uc740 \uac83\ub4e4\uc774 \ud544\uc694\ud558\ub2e4. }; \uc2f1\uae00\ud1a4 \uc544\uc774\ub514\uc5b4\uc5d0\ub294 \ub9ce\uc740 \ubcc0\ud615\uc774 \uc788\ub2e4. \uc774\ub294 \ubb38\uc81c\uc758 \uc77c\ubd80\uc77c \ubfd0\uc774\ub2e4. Note \uc804\uc5ed \uac1c\uccb4\uac00 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uac8c \ud558\ub824\uba74, const \ub098 constexpr \ub85c \uc120\uc5b8\ud558\ub77c. Exception \uc81c\uc77c \ub2e8\uc21c\ud55c \"\uc2f1\uae00\ud1a4\"(\uc2f1\uae00\ud1a4\uc73c\ub85c \uc0dd\uac01\ub418\uc9c0 \uc54a\uc744 \uc815\ub3c4\ub85c \uac04\ub2e8\ud55c)\uc744 \uc0ac\uc6a9\ud574 \ucc98\uc74c \uc0ac\uc6a9\uc2dc \ucd08\uae30\ud654\ub97c \ud560 \uc218 \uc788\ub2e4. X & myX () { static X my_x { 3 }; return my_x ; } \uc5ed\uc8fc: Scott Meyers Singleton\uc73c\ub85c\ub3c4 \uc54c\ub824\uc838 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc740 \ucd08\uae30\ud654 \uc21c\uc11c\uc640 \uad00\ub828\ub41c \ubb38\uc81c\uc5d0 \ub300\ud574 \uac00\uc7a5 \ud6a8\uacfc\uc801\uc778 \ud574\uacb0\ucc45 \uc911 \ud558\ub098\ub2e4. \ub2e4\uc911 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c, \uc815\uc801 \uac1c\uccb4\uc758 \ucd08\uae30\ud654\ub294 \uacbd\ud569 \uc870\uac74\uc744 \uc720\ubc1c\ud558\uc9c0 \uc54a\ub294\ub2e4. (\ub2e8, \uc0dd\uc131\uc790 \ub0b4\uc5d0\uc11c \uacf5\uc720 \uac1c\uccb4\uc5d0 \ubd80\uc8fc\uc758\ud558\uac8c \uc811\uadfc\ud558\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4.) \uc9c0\uc5ed static \ubcc0\uc218\uc758 \ucd08\uae30\ud654\ub294 \uacbd\uc7c1 \uc0c1\ud0dc\uc758 \uac00\ub2a5\uc131\uc774 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc, X \uc758 \uc18c\uba78\uc774 \ub3d9\uae30\ud654\uac00 \ud544\uc694\ud55c \uc5f0\uc0b0\uc744 \ud3ec\ud568\ud55c\ub2e4\uba74 \uc870\uae08 \ub354 \ubcf5\uc7a1\ud55c \ud574\uacb0\ucc45\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4: X & myX () { static auto p = new X { 3 }; return * p ; // potential leak } \uc774 \uacbd\uc6b0 \ub204\uad70\uac00 \ud574\ub2f9 \uac1c\uccb4\ub97c \uc2a4\ub808\ub4dc \uc548\uc804\ud55c \ubc29\ubc95\uc73c\ub85c delete \ud574\uc57c \ud55c\ub2e4. \uc774\ub294 \uc624\ub958\ub97c \ub9cc\ub4e4\uae30 \uc27d\uae30 \ub54c\ubb38\uc5d0, \uc774 \ubc29\ubc95\uc740 \uc544\ub798\uc640 \uac19\uc740 \uc870\uac74\uc774 \uc544\ub2c8\uba74 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4. myX \uac00 \ub2e4\uc911 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\uc774\uba70, X \uac1c\uccb4\uac00 \uc18c\uba78\ub418\uc5b4\uc57c\ub9cc \ud558\uba70(\uac00\ub839, \uc5b4\ub5a4 \uc790\uc6d0\uc744 \ud574\uc81c\ud558\uae30 \ub54c\ubb38\uc5d0), X \uc758 \uc18c\uba78\uc790 \ucf54\ub4dc\uac00 \ub3d9\uae30\ud654 \ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. \ud558\ub098\uc758 \uac1c\uccb4\ub9cc \uc0dd\uc131\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\ub85c \uc2f1\uae00\ud1a4\uc744 \uc815\uc758\ud55c\ub2e4\uba74 myX \uc640 \uac19\uc740 \ud568\uc218\ub294 \uc2f1\uae00\ud1a4\uc774 \uc544\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774 \uc720\uc6a9\ud55c \ud14c\ud06c\ub2c9\uc740 \uc2f1\uae00\ud1a4\uc774 \uc544\ub2cc \uaddc\uce59\uc5d0 \ub300\ud55c \uc608\uc678\ub294 \uc544\ub2c8\ub2e4. Enforcement \uc77c\ubc18\uc801\uc73c\ub85c \ub9e4\uc6b0 \ud798\ub4e4\ub2e4. singleton \uc744 \ud3ec\ud568\ud558\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\ub97c \ucc3e\ub294\ub2e4 \uac1c\uccb4\ub97c \uc138\uac70\ub098 \uc0dd\uc131\uc790\ub97c \uac80\uc0ac\ud574 \ub2e8\uc77c \uac1c\uccb4\ub9cc \ub9cc\ub4e4\uc5b4\uc9c4 \ud074\ub798\uc2a4\ub97c \ucc3e\ub294\ub2e4 \ub9cc\uc57d \ud074\ub798\uc2a4 X \uac00 public static \ud568\uc218\ub97c \uac00\uc9c4\ub2e4\uba74, \uadf8\ub9ac\uace0 \ud574\ub2f9 \ud568\uc218 \uc548\uc5d0\uc11c X \ud0c0\uc785\uc758 static \ubcc0\uc218\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \ubc18\ud658\ud55c\ub2e4\uba74, \uae08\uc9c0\ud558\ub77c. I.4: \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc744 \uc815\ud655\ud558\uace0 \uc5c4\uaca9\ud558\uac8c \uc900\uc218\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c Reason \ud0c0\uc785\uc740 \uac00\uc7a5 \ub2e8\uc21c\ud558\uc9c0\ub9cc \ucd5c\uace0\uc758 \ubb38\uc11c\uc774\uae30\ub3c4 \ud558\ub2e4. \uc798 \uc815\uc758\ub41c \uc758\ubbf8\ub97c \uac16\uace0 \uc788\uace0, \ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc0ac\uac00 \ubcf4\uc7a5\ub41c\ub2e4. \ub610\ud55c \uc815\ud655\ud558\uac8c \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \ub354 \uc798 \ucd5c\uc801\ud654\ub41c\ub2e4. Example, don't \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void pass ( void * data ); // void* \uac00 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0, \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub418\ub294\uc9c0 \uc54c \uc218 \uc5c6\ub2e4(suspicious) \uc774\uc81c \ud53c\ud638\ucd9c\uc790\uc5d0\uc11c \uc62c\ubc14\ub978 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 data \ud3ec\uc778\ud130\ub97c \uce90\uc2a4\ud305\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\uace0, \uad6c\uc9c8\uad6c\uc9c8\ud558\ub2e4. \ud2b9\ud788 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c void* \ub97c \ud53c\ud558\ub77c. \ub300\uc2e0 \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\ub098 variant \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\ub77c. Alternative \ub54c\ub54c\ub85c \ud15c\ud50c\ub9bf \ub9e4\uac1c \ubcc0\uc218\ub294 void* \ub97c \uc81c\uac70\ud558\uace0 T* \ub098 T& \ub85c \ubcc0\ud658\ud560 \uc218 \uc788\ub2e4. \uc81c\ub124\ub9ad \ucf54\ub4dc\uc5d0\uc11c \uc774\ub807\uac8c \uc0ac\uc6a9\ub418\ub294 T \ub4e4\uc740 \uc77c\ubc18\uc801\uc778 \ud639\uc740 \ucee8\uc149(Concept)\ub85c \uc81c\ud55c\ub41c \ud15c\ud50c\ub9bf \uc778\uc790\uc77c \uc218 \uc788\ub2e4. Example, bad \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void draw_rect ( int , int , int , int ); // great opportunities for mistakes draw_rect ( p . x , p . y , 10 , 20 ); // what does 10, 20 mean? int \ub294 \uc784\uc758 \ud615\ud0dc\uc758 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\uc5b4\uc11c, int \ub4e4\uc774 \uac01\uac01 \uc5b4\ub5a4 \uc758\ubbf8\ub97c \uac16\ub294\uc9c0\ub97c \uc720\ucd94\ud574\uc57c \ud55c\ub2e4. \uc544\ub9c8\ub3c4 \ucc98\uc74c \ub450 int \ub294 x , y \uc88c\ud45c\uc77c \uac83 \uac19\uc9c0\ub9cc, \ub098\uba38\uc9c0 \ub450 int \ub294 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud560\uae4c? \uc8fc\uc11d\uc774\ub098 \ub9e4\uac1c \ubcc0\uc218 \uc774\ub984\uc774 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uc9c0\ub9cc, \uba85\ud655\ud788 \ud560 \uc218 \uc788\ub2e4: void draw_rectangle ( Point top_left , Point bottom_right ); void draw_rectangle ( Point top_left , Size height_width ); draw_rectangle ( p , Point { 10 , 20 }); // two corners draw_rectangle ( p , Size { 10 , 20 }); // one corner and a (height, width) pair \ubd84\uba85\ud788 \uc815\uc801 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc744 \ud1b5\ud574 \ubaa8\ub4e0 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218\ub294 \uc5c6\ub2e4. (\uc608\ub97c \ub4e4\uc5b4, \uccab\ubc88\uc9f8 \uc778\uc790\uac00 \uc67c\ucabd \uc0c1\ub2e8\uc5d0 \uc788\ub294 \uc810\uc774\ub77c\ub294 \uc0ac\uc2e4\uc740 \uc774\ub984\uc774\ub098 \uc8fc\uc11d \ub4f1\uc744 \ud1b5\ud574 \ud3b8\uc758\uc0c1 \uc815\ud574\uc838 \uc788\uc744 \ubfd0\uc774\ub2e4.) Example, bad \ub2e4\uc74c \uc608\uc81c\uc5d0\uc11c \uc778\ud130\ud398\uc774\uc2a4\ub9cc \ubcf4\uace0\ub294 time_to_blink \uc774 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0 \uc798 \ubaa8\ub974\uaca0\ub2e4. \ucd08\ub97c \uc758\ubbf8\ud560\uae4c? \ubc00\ub9ac\ucd08\ub97c \uc758\ubbf8\ud560\uae4c? void blink_led ( int time_to_blink ) // \ub098\uc05c \ucf54\ub4dc -- \uc2dc\uac04\uc758 \ub2e8\uc704\ub97c \uc54c \uc218 \uc5c6\ub2e4 { // ... // time_to_blink\ub85c \ubb34\uc5b8\uac00 \ud55c\ub2e4 // ... } void use () { blink_led ( 2 ); } Example, good C++11\uc5d0 \ub3c4\uc785\ub41c std::chrono::duration \ud0c0\uc785\uc740 \uc9c0\uc18d \uc2dc\uac04\uc758 \ub2e8\uc704\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ud45c\ud604\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. void blink_led ( milliseconds time_to_blink ) // \uc88b\uc740 \ucf54\ub4dc -- \ub2e8\uc704\ub97c \uba85\ud655\ud788 \uc54c \uc218 \uc788\ub2e4 { // ... // time_to_blink\ub85c \ubb34\uc5b8\uac00 \ud55c\ub2e4 // ... } void use () { blink_led ( 1500 ms ); } \uc5b4\ub5a4 \uc885\ub958\uc758 \uc9c0\uc18d \uc2dc\uac04\uc758 \ub2e8\uc704\ub3c4 \ud5c8\uc6a9\ud558\ub3c4\ub85d \ud568\uc218\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud560 \uc218\ub3c4 \uc788\ub2e4. template < class rep , class period > void blink_led ( duration < rep , period > time_to_blink ) // \uc88b\uc740 \ucf54\ub4dc -- \uc5b4\ub5a4 \ub2e8\uc704\ub85c\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 { // millisecond\uac00 \uac00\uc7a5 \uc815\ubc00\ud55c \ub2e8\uc704\ub77c\uace0 \uac00\uc815\ud55c\ub2e4 auto milliseconds_to_blink = duration_cast < milliseconds > ( time_to_blink ); // ... // milliseconds_to_blink\ub85c \ubb34\uc5b8\uac00 \ud55c\ub2e4 // ... } void use () { blink_led ( 2 s ); blink_led ( 1500 ms ); } Enforcement (\uac04\ub2e8\ud568) void* \ub97c \ub9e4\uac1c \ubcc0\uc218\ub098 \ub9ac\ud134 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ubcf4\uace0\ud55c\ub2e4 (\uac04\ub2e8\ud568) \ud558\ub098 \uc774\uc0c1\uc758 bool \ub9e4\uac1c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ubcf4\uace0\ud55c\ub2e4 (\uc798\ud558\uae30 \uc5b4\ub824\uc6c0) \ub2e4\uc218\uc758 \ub0b4\uc7a5 \ud0c0\uc785(primitive type) \uc778\uc790\ub97c \uac16\ub294 \ud568\uc218\ub97c \ucc3e\ub294\ub2e4 I.5: (\ud558\ub098\ub77c\ub3c4 \uc788\ub2e4\uba74) \uc0ac\uc804 \uc870\uac74\uc744 \uae30\uc220\ud558\ub77c Reason \uc804\ub2ec \uc778\uc790(argument)\ub294 \ud53c\ud638\ucd9c\uc790\uc5d0\uc11c \uc801\uc808\ud55c \uc0ac\uc6a9\uc744 \uc81c\ud55c\ud560 \uc218 \uc788\ub294 \uc758\ubbf8\ub97c \uac16\ub294\ub2e4. Example \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: double sqrt ( double x ); \uc5ec\uae30\uc11c x \ub294 \ubc18\ub4dc\uc2dc \uc74c\uc218\uac00 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4. \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc73c\ub85c\ub294 \uc774\ub97c (\uc788\ub294 \uadf8\ub300\ub85c \uc27d\uac8c) \ud45c\ud604\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0, \ub2e4\ub978 \uc218\ub2e8\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4: double sqrt ( double x ); // x must be nonnegative \uc77c\ubd80 \uc0ac\uc804 \uc870\uac74\uc740 \ub2e8\uc815\ubb38(assertion)\uc73c\ub85c \ud45c\ud604\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4: double sqrt ( double x ) { Expects ( x >= 0 ); /* ... */ } \uc774\uc0c1\uc801\uc73c\ub85c Expects(x >= 0) \uc870\uac74\uc774 sqrt() \uc758 \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc77c\ubd80\ubd84\uc774 \ub418\ub294\uac8c \uac00\uc7a5 \uc88b\uc9c0\ub9cc \uadf8\ub807\uac8c \ud558\uae30\ub294 \uc27d\uc9c0 \uc54a\ub2e4. \ub530\ub77c\uc11c \uc9c0\uae08\uc740 \ud568\uc218 \uc815\uc758\ubd80(\ud568\uc218 \ubcf8\ubb38)\uc5d0 \uc704\uce58\uc2dc\ud0a8\ub2e4. References Expects() \ub294 GSL \uc5d0 \uae30\uc220\ub418\uc5b4 \uc788\ub2e4. Note Excepts(p != nullptr); \ucc98\ub7fc \uc694\uad6c \uc0ac\ud56d\uc744 \uc815\ud655\ud788(formal) \uba85\uc138\ud558\ub294 \uac83\uc744 \uc120\ud638\ud558\ub77c. \ubd88\uac00\ub2a5\ud558\ub2e4\uba74, // the sequence [p:q) is ordered using < \uc640 \uac19\uc774 \uc8fc\uc11d\uc744 \uc0ac\uc6a9\ud558\ub77c. Note \ub300\ubd80\ubd84\uc758 \uba64\ubc84 \ud568\uc218\ub294 \ud074\ub798\uc2a4\uc758 \ubd88\ubcc0 \uc870\uac74(invariant) \uc911 \uc77c\ubd80\uc5d0 \ud574\ub2f9\ud558\ub294 \uc120\ud589 \uc870\uac74\uc744 \uac16\uace0 \uc788\ub2e4. \ud574\ub2f9 \ubd88\ubcc0 \uc870\uac74\uc740 \uc0dd\uc131\uc790\uc5d0\uc11c \uad6c\uc131\ub418\ub294\ub370 \ud074\ub798\uc2a4 \uc678\ubd80\ub85c\ubd80\ud130 \ud638\ucd9c\ub418\ub294 \ubaa8\ub4e0 \uba64\ubc84 \ud568\uc218\ub97c \ud1b5\ud574 \uc7ac\uad6c\uc131(reestablish)\ub418\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub97c \uac01 \uba64\ubc84 \ud568\uc218\ub9c8\ub2e4 \uc5b8\uae09\ud560 \ud544\uc694\ub294 \uc5c6\ub2e4. Enforcement (\uc801\uc6a9 \ubd88\uac00\ub2a5) See Also \ud3ec\uc778\ud130 \uc804\ub2ec\uc5d0 \ub300\ud55c \uaddc\uce59. ??? I.6: \uc0ac\uc804 \uc870\uac74(pre-condition)\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 Expects() \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc0ac\uc804 \uc870\uac74\uc784\uc744 \uba85\ud655\ud558\uac8c \ud45c\uc2dc\ud558\uace0 \ud234 \uc0ac\uc6a9\uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4. Example int area ( int height , int width ) { Expects ( height > 0 && width > 0 ); // good if ( height <= 0 || width <= 0 ) my_error (); // obscure // ... } Note \uc0ac\uc804 \uc870\uac74\uc740 if \ubb38, assert() \ubb38, \uc8fc\uc11d\ubb38 \ub4f1\uc73c\ub85c \uae30\uc220\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub7f0 \uad6c\ubb38\uc740 \uc77c\ubc18 \ucf54\ub4dc\uc640 \uad6c\ubd84, \uac31\uc2e0\ud558\uac70\ub098 \ud234\ub85c \uc870\uc791\ud558\uae30 \uc5b4\ub835\uace0 \uc798\ubabb\ub41c \uc758\ubbf8\ub97c \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4. (\ub514\ubc84\uadf8 \ubaa8\ub4dc\uc77c \ub54c\ub294 \uc911\ub2e8\uc2dc\ud0a4\uace0, \ub9b4\ub9ac\uc988 \ubaa8\ub4dc\uc77c\ub54c\ub294 \uac80\uc0ac\ud558\uace0 \uc2f6\uc740\uac00?) Note \uc0ac\uc804 \uc870\uac74\uc740 \uad6c\ud604 \ubd80\ubd84\ubcf4\ub2e4\ub294 \uc778\ud130\ud398\uc774\uc2a4 \ubd80\ubd84\uc5d0 \ud3ec\ud568\uc2dc\ucf1c\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc544\uc9c1\uc740 \uadf8\ub807\uac8c \ud560 \uc218 \uc788\ub294 \uc5b8\uc5b4 \uae30\ub2a5\uc774 \uc5c6\ub2e4. \uc5b8\uc5b4\uc5d0\uc11c \uc774\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4\uba74 (\ucc38\uace0: contract \uc81c\uc548\uc11c ) \ud45c\uc900\uc5d0 \ub9de\ub294 \uc0ac\uc804\uc870\uac74, \uc0ac\ud6c4\uc870\uac74, \ub2e8\uc815\ubb38\uc744 \uc801\uc6a9\ud558\uac8c \ub420 \uac83\uc774\ub2e4. Note Expects() \uc740 \uc54c\uace0\ub9ac\uc998 \uc911\uac04\uc5d0 \uc870\uac74\uc744 \uac80\uc0ac\ud558\ub294\ub370 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. Note unsigned \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uac12\uc774 \uc74c\uc218\uac00 \uc544\ub2c8\ub77c\uace0 \ubcf4\uc7a5\ud558\ub294 \ubb38\uc81c\ub97c \ud68c\ud53c\ud558\ub294 \uc88b\uc740 \ubc29\ubc95\uc774 \uc544\ub2c8\ub2e4. Enforcement (\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc0ac\uc804 \uc870\uac74\uc774 \ub2e8\uc815\ub420 \uc218 \uc788\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc744 \ucc3e\ub294 \uac83\uc740 \uc2e4\ud604 \uac00\ub2a5\ud558\uc9c0 \uc54a\ub2e4. \uc27d\uac8c \uc2dd\ubcc4\ud560 \uc218 \uc788\ub294 \uac83\ub4e4\uc5d0 \ub300\ud574 \uacbd\uace0( assert() )\ub97c \ud560 \uc218 \uc788\ub294 \uc5b8\uc5b4 \uae30\ub2a5\uc774 \uc5c6\ub2e4\uba74 \uc758\uc2ec\uc758 \uc5ec\uc9c0\uac00 \uc0dd\uae38 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. I.7: \uc0ac\ud6c4\uc870\uac74(post-condition)\uc744 \uae30\uc220\ud558\ub77c Reason \uacb0\uacfc\uc5d0 \ub300\ud574 \uc798\ubabb \uc774\ud574\ud558\uace0 \uc788\ub294 \ubd80\ubd84\uacfc \uc798\ubabb\ub41c \uad6c\ud604\uc744 \ucc3e\uc544\ub0b4\uae30 \uc704\ud574\uc11c\ub2e4. Example, bad \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: int area ( int height , int width ) { return height * width ; } // bad \uc5ec\uae30\uc11c \ubd80\uc8fc\uc758\ud558\uac8c \ub192\uc774\uc640 \ud3ed\uc774 \uc591\uc218\uc5ec\uc57c \ud55c\ub2e4\ub294 \uc0ac\uc804 \uc870\uac74 \uba85\uc138\ub97c \ube60\ub728\ub838\ub2e4. \uc5ed\uc2dc \ub113\uc774\ub97c \uad6c\ud558\ub294 \uc54c\uace0\ub9ac\uc998( height * width )\uc774 \uc815\uc218\uc758 \ucd5c\ub313\uac12\ubcf4\ub2e4 \ud074 \uc218 \uc788\ub2e4\ub294 \uc0ac\ud6c4 \uc870\uac74 \uba85\uc138\ub97c \ube60\ub728\ub838\ub2e4. \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \ub2e4\uc74c \uc0ac\uc6a9\uc744 \uace0\ub824\ud574 \ubcf4\uc790: int area ( int height , int width ) { auto res = height * width ; Ensures ( res > 0 ); return res ; } Example, bad \uc545\uba85 \ub192\uc740 \ubcf4\uc548 \ubc84\uadf8\ub97c \uace0\ub824\ud574 \ubcf4\uc790: void f () // \ubb38\uc81c\uac00 \uc788\ub2e4 { char buffer [ MAX ]; // ... memset ( buffer , 0 , sizeof ( buffer )); } \ubc84\ud37c\uac00 \ucd08\uae30\ud654\ub418\uc5b4\uc57c \ud558\uace0 \ucd5c\uc801\ud654\ud558\uba74\uc11c \uc911\ubcf5\ub418\ub294 memset() \uc758 \ud638\ucd9c\uc744 \uc81c\uac70\ud588\uc74c\uc744 \uc124\uba85\ud558\ub294 \uc0ac\ud6c4 \uc870\uac74\uc774 \uc5c6\ub2e4. void f () // \uc880 \ub354 \ub0ab\ub2e4 { char buffer [ MAX ]; // ... memset ( buffer , 0 , sizeof ( buffer )); Ensures ( buffer [ 0 ] == 0 ); } Note \uc0ac\ud6c4 \uc870\uac74\uc740 \uc885\uc885 \ud568\uc218\uc758 \ubaa9\uc801\uc744 \uae30\uc220\ud558\ub294 \uc8fc\uc11d\ubb38\uc5d0 \ube44\uacf5\uc2dd\uc801\uc73c\ub85c \uba85\uc2dc\ub418\uc5b4 \uc788\ub2e4. Ensures() \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc11c \ub354 \uc2dc\uc2a4\ud15c\uc801\uc73c\ub85c \uac80\uc0ac\ud558\ub294 \ubaa8\uc2b5\uc744 \ubcf4\uc5ec\uc904 \uc218 \uc788\ub2e4. Note \uc0ac\ud6c4 \uc870\uac74\uc740 \uc0ac\uc6a9\ub418\ub294 \uc790\ub8cc \uad6c\uc870\uc758 \uc0c1\ud0dc\ucc98\ub7fc \ubc18\ud658\ub41c \uacb0\uacfc\uc5d0 \uac04\uc811\uc801\uc73c\ub85c \uc601\ud5a5\uc744 \ubbf8\uce58\ub294 \ubb34\uc5b8\uac00\uc5d0 \uc5f0\uad00\ub418\uc5b4 \uc788\uc744 \ub54c \ud2b9\ud788 \uc911\uc694\ud558\ub2e4. Example \uacbd\ud569 \uc870\uac74\uc744 \ud53c\ud560 \ubaa9\uc801\uc73c\ub85c mutex \ub97c \uc0ac\uc6a9\ud574 Record \ub97c \uc870\uc791\ud558\ub294 \ud568\uc218\ub97c \uace0\ub824\ud574 \ubcf4\uc790: mutex m ; void manipulate ( Record & r ) // don't { m . lock (); // ... no m.unlock() ... } \uc5ec\uae30\uc11c mutex \ub97c \ud574\uc81c\ud574\uc57c \ud55c\ub2e4\ub294 \uc5b8\uae09\uc744 \"\uc78a\uc5b4\"\ubc84\ub838\ub294\ub370, mutex \ud574\uc81c\ub97c \uc5b8\uae09\ud558\uc9c0 \uc54a\uc740 \uac83\uc774 \ub2e8\uc21c\ud788 \ubc84\uadf8\uc778\uc9c0 \uc758\ub3c4\ud55c \uac83\uc778\uc9c0 \uc54c \uc218\uac00 \uc5c6\ub2e4. \uc0ac\ud6c4 \uc870\uac74\uc744 \uae30\uc220\ud568\uc73c\ub85c\uc11c \uc5b8\uae09\uc744 \uba85\ud655\ud558\uac8c \ud560 \uc218 \uc788\ub2e4: void manipulate ( Record & r ) // \uc0ac\ud6c4\uc870\uac74: m \uc740 \ud568\uc218\uac00 \uc885\ub8cc\ub41c \ud6c4 lock\uc774 \ud574\uc81c\ub418\uc5b4\uc788\ub2e4. { m . lock (); // ... no m.unlock() ... } \uc774\uc81c \ubc84\uadf8\uac00 \ubd84\uba85\ud558\uac8c \ubcf4\uc778\ub2e4. (\ub2e8, \uc8fc\uc11d\uc744 \uc77d\ub294 \uc0ac\ub78c\uc5d0\uac8c\ub9cc \ubcf4\uc778\ub2e4.) \ub354 \ub098\uc740 \ubc29\ubc95\uc740 RAII \ub97c \uc0ac\uc6a9\ud574 \uc0ac\ud6c4 \uc870\uac74(\"\uc7a0\uae08\uc744 \ud574\uc81c\ud574\uc57c \ud568\")\uc774 \ucf54\ub4dc\uc5d0 \uc801\uc6a9\ub418\ub3c4\ub85d \ud558\ub294 \uac83\uc774\ub2e4: void manipulate ( Record & r ) // best { lock_guard < mutex > _ { m }; // ... } Note \uc774\uc0c1\uc801\uc73c\ub85c, \uc0ac\ud6c4 \uc870\uac74\uc740 \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc27d\uac8c \ubcfc \uc218 \uc788\ub3c4\ub85d \uc778\ud130\ud398\uc774\uc2a4/\uc120\uc5b8\ubd80\uc5d0 \uae30\uc220\ud574\uc57c \ud55c\ub2e4. \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \uc5b8\uae09\ub418\uc5b4\uc57c \ud558\ub294 \uc0ac\ud6c4 \uc870\uac74\ub9cc \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uae30\uc220\ud574\uc57c \ud55c\ub2e4. \ub0b4\ubd80 \uc0c1\ud0dc\uc5d0 \ub300\ud55c \uc0ac\ud6c4 \uc870\uac74\uc740 \uc815\uc758/\uad6c\ud604\ubd80\uc5d0\ub9cc \uae30\uc220\ud55c\ub2e4. Enforcement (\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc774\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uac80\uc0ac\ud560 \uc218 \uc5c6\ub294 \uc774\ub860\uc801\uc778 \uaddc\uce59(philosophical guide)\uc774\ub2e4. \ud2b9\uc815 \ubd84\uc57c\uc5d0 \ub9de\ucdb0\uc11c \uac80\uc0ac\ud558\ub294 (\uc7a0\uae08 \ud574\uc81c \uac80\uc0ac\ucc98\ub7fc) \ub3c4\uad6c\ub4e4\uc740 \uc774\ubbf8 \uc5ec\ub7ec \ub3c4\uad6c\uc5d0 \uc874\uc7ac\ud55c\ub2e4. I.8: \uc0ac\ud6c4 \uc870\uac74\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 Ensures() \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc0ac\ud6c4 \uc870\uac74\uc774\ub77c\ub294 \uac83\uc744 \ubd84\uba85\ud788 \ud558\uae30 \uc704\ud574, \uadf8\ub9ac\uace0 \ubd84\uc11d \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub2e4. Example void f () { char buffer [ MAX ]; // ... memset ( buffer , 0 , MAX ); Ensures ( buffer [ 0 ] == 0 ); } Note \uc0ac\ud6c4 \uc870\uac74\uc740 \uc8fc\uc11d\ubb38, if \ubb38, assert() \ubb38 \ub4f1 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \uae30\uc220\ud560 \uc218 \uc788\ub2e4. \uc774\ub294 \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\uc640 \uad6c\ubd84\uc744 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uace0, \uac31\uc2e0\ud558\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uace0, \ud234\ub85c \uc870\uc791\ud558\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uba70 \uc798\ubabb\ub41c \uc758\ubbf8\ub97c \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4. Alternative \uc774 \ub9ac\uc18c\uc2a4\ub294 \ubc18\ub4dc\uc2dc \ud574\uc81c\ub418\uc5b4\uc57c \ud55c\ub2e4\" \ud615\ud0dc\uc758 \uc0ac\ud6c4 \uc870\uac74\uc740 RAII \ub97c \ud1b5\ud574 \uac00\uc7a5 \uc798 \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4. Note \uc774\uc0c1\uc801\uc73c\ub85c Ensures \ub294 \uc778\ud130\ud398\uc774\uc2a4\uc758 \uc77c\ubd80\uac00 \ub418\uc5b4\uc57c \ud558\uc9c0\ub9cc, \uc27d\uac8c \ud560 \uc218 \uc788\ub294 \uc791\uc5c5\uc774 \uc544\ub2c8\ub2e4. \ud604\uc7ac\ub85c\uc11c\ub294 \uc815\uc758 \ubd80\ubd84(\ud568\uc218 \ubcf8\ubb38)\uc5d0 \uc704\uce58\uc2dc\ud0a8\ub2e4. \uc5b8\uc5b4\uc5d0\uc11c \uc774\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4\uba74 (\ucc38\uace0: contract \uc81c\uc548\uc11c ) \ud45c\uc900\uc5d0 \ub9de\ub294 \uc0ac\uc804\uc870\uac74, \uc0ac\ud6c4\uc870\uac74, \ub2e8\uc815\ubb38\uc744 \uc801\uc6a9\ud558\uac8c \ub420 \uac83\uc774\ub2e4. Enforcement (\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc0ac\ud6c4 \uc870\uac74\uc744 \ub2e8\uc815\ud560 \uc218 \uc788\ub294 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc744 \ucc3e\ub294 \uac83\uc740 \uc2e4\ud604 \uac00\ub2a5\ud558\uc9c0 \uc54a\ub2e4. \uc27d\uac8c \ud655\uc778\ud560 \uc218 \uc788\ub294 \uac83\ub4e4( assert() )\uc5d0 \ub300\ud574 \uacbd\uace0\ud558\ub294 \uac83\uc740 \uc5b8\uc5b4 \uae30\ub2a5\uc774 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c\ub294 \ubbf8\uc2ec\uca4d\uc744 \uc218 \uc788\ub2e4. I.9: \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud15c\ud50c\ub9bf\uc774\ub77c\uba74 \ucee8\uc149(Concept)\uc744 \uc0ac\uc6a9\ud574\uc11c \ub9e4\uac1c \ubcc0\uc218\ub97c \ubb38\uc11c\ud654\ud558\ub77c Reason \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\ud655\ud558\uac8c, \uadf8\ub9ac\uace0 (\uba40\uc9c0 \uc54a\uc740) \ubbf8\ub798\uc5d0 \ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc0ac\ub97c \ud560 \uc218 \uc788\uac8c \ub9cc\ub4e4\uc5b4\ub77c. Example \uc694\uad6c \uc0ac\ud56d \uba85\uc138\uc5d0 ISO Concept TS \uc2a4\ud0c0\uc77c\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: template < typename Iter , typename Val > // requires InputIterator<Iter> && EqualityComparable<ValueType<Iter>>, Val> Iter find ( Iter first , Iter last , Val v ) { // ... } Note // \uac00 \uc81c\uac70\ub418\uba74 \ub300\ubd80\ubd84\uc758 \ucef4\ud30c\uc77c\ub7ec\uac00 requires \uad6c\ubb38\uc744 \uac80\uc0ac\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \ud604\uc7ac Concept\uc740 GCC 6.1\uacfc \uadf8 \uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc9c0\uc6d0\ub41c\ub2e4. See Also \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d \uacfc \ucee8\uc149 \uc744 \ucc38\uace0\ud558\ub77c Enforcement (\uc544\uc9c1 \uc801\uc6a9 \ubd88\uac00\ub2a5) \uc5b8\uc5b4 \uba85\uc138\ub97c \uc791\uc131\uc911\uc774\ub2e4. \uc5b8\uc5b4 \uba85\uc138\uac00 \uc815\uc758\ub41c \ud6c4, \ube44\uac00\ubcc0 \ud15c\ud50c\ub9bf \ub9e4\uac1c \ubcc0\uc218\uac00 (\uc120\uc5b8\uc774\ub098 requires \ubb38\uc5d0 \uc5b8\uae09\ub418\uc9c0 \uc54a\uc740) \ucee8\uc149\uc73c\ub85c \uc81c\ud55c\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. I.10: \uc694\uad6c\ub41c \uc791\uc5c5\uc758 \uc218\ud589 \uc2e4\ud328\ub97c \uc54c\ub9ac\uae30 \uc704\ud574 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc2dc\uc2a4\ud15c\uc774\ub098 \uacc4\uc0b0 \uacb0\uacfc\ub97c \uc815\uc758\ub418\uc9c0 \uc54a\uc740(\uc608\uce21 \ubd88\uac00\ub2a5\ud55c) \uc0c1\ud0dc\ub85c \ub458 \uc218 \uc5c6\uc73c\ubbc0\ub85c \uc624\ub958\ub97c \ubb34\uc2dc\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \uc774\ub294 \uc624\ub958\uc758 \uc8fc \ubc1c\uc0dd\uc9c0\uac00 \ub41c\ub2e4. Example int printf ( const char * ...); // \ub098\uc05c \ucf54\ub4dc: \ucd9c\ub825\uc5d0 \uc2e4\ud328\ud558\uba74 \uc74c\uc218\ub97c \ubc18\ud658\ud55c\ub2e4 template < class F , class ... Args > // \uc88b\uc740 \ucf54\ub4dc: \uc0c8 \uc2a4\ub808\ub4dc\ub97c \uc2dc\uc791\ud558\uc9c0 \ubabb\ud558\uba74 system_error\ub97c \ub358\uc9c4\ub2e4 explicit thread ( F && f , Args && ... args ); Note \uc624\ub958\ub780 \ubb34\uc5c7\uc778\uac00? \uc624\ub958\ub780 \ud568\uc218\uac00 (\uc0ac\ud6c4 \uc870\uac74 \uc124\uc815\uc744 \ud3ec\ud568\ud574) \uc758\ub3c4\ud55c \ubaa9\uc801\uc744 \uc774\ub8f0 \uc218 \uc5c6\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc624\ub958\ub97c \ubb34\uc2dc\ud558\ub294 \ucf54\ub4dc\ub97c \ud638\ucd9c\ud558\uba74 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub098 \uc798\ubabb\ub41c \uacb0\uacfc\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub9ac\ubaa8\ud2b8 \uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0 \uc790\uccb4\uc801\uc73c\ub85c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc11c\ubc84\ub294 \ub2e4\uc591\ud55c \uc774\uc720\ub85c \uc5f0\uacb0\uc744 \uac70\ubd80\ud560 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud638\ucd9c\ud558\ub294 \ucabd\uc5d0\uc11c \uacb0\uacfc\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub3c4\ub85d \ubc18\ud658\ud574 \uc8fc\ub294 \uac83\uc774 \uc790\uc5f0\uc2a4\ub7fd\ub2e4. \uadf8\ub7ec\ub098 \uc5f0\uacb0\uc5d0 \uc2e4\ud328\ud558\ub294 \uac83\uc744 \uc624\ub958\ub85c \uac04\uc8fc\ud560 \uc0dd\uac01\uc774\ub77c\uba74, \uc2e4\ud328\ud560 \uacbd\uc6b0 \uc608\uc678\ub97c \ub358\uc838\uc57c \ud55c\ub2e4. Exception \uae30\uc874\uc758 \ub9ce\uc740 \uc778\ud130\ud398\uc774\uc2a4 \ud568\uc218\ub4e4\uc740 \uc624\ub958\uac00 \uc544\ub2cc \uc2e4\uc81c \uc0c1\ud0dc \ucf54\ub4dc\ub97c \ubcf4\uace0\ud558\uae30 \uc704\ud574 \uc624\ub958 \ucf54\ub4dc(\uc608\ub97c \ub4e4\uc5b4, errno )\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc774\uc5d0 \ub300\ud574 \ubcc4\ub2e4\ub978 \ub300\uc548\uc774 \uc5c6\uc73c\ubbc0\ub85c \uaddc\uce59\uc744 \uc704\ubc18\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. Alternative \ub9cc\uc57d (\uc608\ub97c \ub4e4\uc5b4, \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub4dc\uac00 \uc608\uc804 \uc2a4\ud0c0\uc77c\uc758 \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\ub85c \uac00\ub4dd\ud558\uac70\ub098 \uc2e4\uc2dc\uac04 \uc81c\uc57d\uc774 \uc2ec\uac01\ud558\uae30 \ub54c\ubb38\uc5d0) \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74, \ud55c \uc30d\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc2a4\ud0c0\uc77c\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574 \ubcf4\ub77c: int val ; int error_code ; tie ( val , error_code ) = do_something (); if ( error_code ) { // ... handle the error or exit ... } // ... use val ... \uc548\ud0c0\uae5d\uac8c\ub3c4 \uc774\ub7f0 \ucf54\ub4dc \uc2a4\ud0c0\uc77c\uc740 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub97c \ub9cc\ub4e4\uac8c \ud55c\ub2e4. \uc774\uc5d0 \ub300\uc751\ud558\uae30 \uc704\ud55c structured bindings \uae30\ub2a5\uc774 C++17\uc5d0\uc11c\ubd80\ud130 \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. auto [ val , error_code ] = do_something (); if ( error_code ) { // ... handle the error or exit ... } // ... use val ... Note \"\uc131\ub2a5\"\uc774 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \ud0c0\ub2f9\ud55c \uc774\uc720\ub77c\uace0\ub294 \uc0dd\uac01\ud558\uc9c0 \uc54a\ub294\ub2e4. \uba85\uc2dc\uc801\uc778 \uc624\ub958 \uac80\uc0ac \ubc0f \ucc98\ub9ac\ub294 \uc885\uc885 \uc608\uc678 \ucc98\ub9ac\ub9cc\ud07c \ub9ce\uc740 \uc2dc\uac04\uacfc \uacf5\uac04\uc744 \uc4f0\uae30\ub3c4 \ud55c\ub2e4. \uac04\uacb0\ud55c \ucf54\ub4dc\ub294 \uc885\uc885 \uc608\uc678 \ucc98\ub9ac\ub97c \ud3ec\ud568\ud558\ub354\ub77c\ub3c4 \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \uac16\ub294\ub2e4. (\ud504\ub85c\uadf8\ub7a8\uacfc \ucd5c\uc801\ud654\ub97c \ud1b5\ud574 \uc2e4\ud589 \uacbd\ub85c\ub97c \ub2e8\uc21c\ud654\ud55c\ub2e4) \uc131\ub2a5\uc774 \uc911\uc694\ud55c \ucf54\ub4dc\uc758 \uc88b\uc740 \uaddc\uce59\uc740 \uc624\ub958 \uac80\uc0ac\ub97c \ucf54\ub4dc\uc758 \ud575\uc2ec \ubd80\ubd84 \ubc14\uae65\uc73c\ub85c \uc62e\uae30\ub294 \uac83\uc774\ub2e4 ( \uac80\uc0ac ). \uc7a5\uae30\uc801\uc73c\ub85c \ubcf4\uba74 \uc815\ub3c8\ub41c(regular) \ucf54\ub4dc\uac00 \ub354 \uc798 \ucd5c\uc801\ud654\ub41c\ub2e4. \uc131\ub2a5\uc5d0 \ub300\ud574 \uc9c0\uc801\ud558\uae30 \uc804\uc5d0\ub294 \ud56d\uc0c1 \uc2e0\uc911\ud558\uac8c \uce21\uc815\ud558\ub77c . See Also \uc0ac\uc804 \uc870\uac74, \uc0ac\ud6c4 \uc870\uac74\uc758 \uc704\ubc18 \ubcf4\uace0\ub97c \uc704\ud55c I.5 \ubc0f I.7 . Enforcement (\uc801\uc6a9 \ubd88\uac00\ub2a5) \ucca0\uc800\ud55c \uc810\uac80\uc774 \ubd88\uac00\ub2a5\ud55c \ucca0\ud559\uc801 \uac00\uc774\ub4dc\ub77c\uc778\uc774\ub2e4 errno \ub97c \ud0d0\uc0c9\ud55c\ub2e4 I.11: \uc6d0\uc2dc \ud3ec\uc778\ud130( T* ) \ud639\uc740 \ucc38\uc870( T& )\ub97c \uc0ac\uc6a9\ud574 \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c Reason \ud638\ucd9c\ud558\ub294 \ucabd\uc774\ub098 \ubc1b\ub294 \ucabd \uc911 \ub204\uac00 \uac1c\uccb4\ub97c \uc18c\uc720\ud560 \uac83\uc778\uc9c0 \ubaa8\ub978\ub2e4\uba74, \uba54\ubaa8\ub9ac \ub204\uc218\ub098 \uc870\uae30 \ud30c\uad34\uac00 \ubc1c\uc0dd\ud560 \uac83\uc774\ub2e4. Example \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: X * compute ( args ) // don't { X * res = new X {}; // ... return res ; } \ubc18\ud658\ub41c X \ub97c \ub204\uac00 \uc0ad\uc81c\ud560 \uac83\uc778\uac00? \ub9cc\uc57d \ub808\ud37c\ub7f0\uc2a4\ub97c \ubc18\ud658\ud55c\ub2e4\uba74 \ubb38\uc81c\ub294 \ub354 \uc5b4\ub824\uc6cc\uc9c8 \uac83\uc774\ub2e4. \uacb0\uacfc\uac00 \uac12\uc73c\ub85c \ubc18\ud658\ub418\uc5c8\ub2e4\uace0 \uace0\ub824\ud574 \ubcf4\uc790 (\uacb0\uacfc\ub85c \ubc18\ud658\ub418\ub294 \uac12\uc758 \ud06c\uae30\uac00 \ud06c\ub2e4\uba74 \uc774\ub3d9 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c): vector < double > compute ( args ) // good { vector < double > res ( 10000 ); // ... return res ; } Alternative \uc18c\uc720\uad8c \uc804\ub2ec \uc740 \ubc30\ud0c0\uc801 \uc18c\uc720\ub97c \uc704\ud55c unique_ptr \uc640 \uacf5\uc720\ub97c \uc704\ud55c shared_ptr \uac19\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub77c. \ud558\uc9c0\ub9cc \uc774\ub294 \uac1c\uccb4 \uadf8 \uc790\uccb4\ub97c \ubc18\ud658\ud558\ub294 \uac83\ubcf4\ub2e4 \ub35c \uc544\ub984\ub2f5\uace0 \ub35c \ud6a8\uc728\uc801\uc774\ub2e4. \uc624\uc9c1 \ucc38\uc870\ub85c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud560\ub54c\ub9cc \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub77c. ABI \ud638\ud658\uc131 \uc694\uad6c \uc0ac\ud56d \ub610\ub294 \ub9ac\uc18c\uc2a4 \ubd80\uc871\uc73c\ub85c \uc778\ud574 \uc624\ub798\ub41c \ucf54\ub4dc\ub97c \uc218\uc815\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\uac00 \uc788\ub2e4. \uc774 \uacbd\uc6b0, \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc758 owner \ub97c \uc0ac\uc6a9\ud574 \ud3ec\uc778\ud130\uc758 \uc18c\uc720\uad8c\uc744 \ud45c\uc2dc\ud558\ub77c: owner < X *> compute ( args ) // It is now clear that ownership is transferred { owner < X *> res = new X {}; // ... return res ; } \uc704\uc758 \ucf54\ub4dc\ub294 \ubd84\uc11d \ud234\uc5d0\uac8c res \uac00 \uc18c\uc720\uad8c\uc790\ub77c\uace0 \uc54c\ub824\uc900\ub2e4. \uc989, \uc774 \uac12\uc740 return \uc744 \ud1b5\ud574 \ud589\ud574\uc9c4 \uac83\ucc98\ub7fc delete \ub418\uac70\ub098 \ub2e4\ub978 \uc18c\uc720\uad8c\uc790\uc5d0\uac8c \ub118\uaca8\uc918\uc57c \ud55c\ub2e4. owner \ub294 \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc758 \uad6c\ud604\uc5d0\uc11c \ube44\uc2b7\ud558\uac8c \uc0ac\uc6a9\ub41c\ub2e4. Note \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130(\ub610\ub294 \ubc18\ubcf5\uc790)\ub85c \uc804\ub2ec\ub41c \ubaa8\ub4e0 \uac1c\uccb4\ub294 \ud638\ucd9c\uc790\uac00 \uc18c\uc720\ud55c \uac83\uc73c\ub85c \uac04\uc8fc\ub418\ubbc0\ub85c \ud638\ucd9c\uc790\uac00 \uc218\uba85\uc744 \ucc98\ub9ac\ud55c\ub2e4. \ub2e4\ub978 \uad00\uc810\uc5d0\uc11c \ubcf4\uc790\uba74: \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\ub294 API\ub294 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud558\ub294 API\uc5d0 \ube44\ud574 \uc0c1\ub300\uc801\uc73c\ub85c \uc801\ub2e4. \uadf8\ub7ec\ub2c8 \uc77c\ubc18\uc801\uc73c\ub85c \ub0b4\uc7ac\ub41c(default) \uc758\ubbf8\ub294 \"\uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\ub294\" \uac83\uc774\ub2e4. See Also \uc778\uc790 \uc804\ub2ec \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc758 \uc0ac\uc6a9 \uac12 \ubc18\ud658 Enforcement (\uac04\ub2e8\ud568) owner \uac00 \uc544\ub2cc \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\uc758 delete \uc5d0 \ub300\ud574 \uacbd\uace0\ud558\ub77c (\uac04\ub2e8\ud568) \ubaa8\ub4e0 \ucf54\ub4dc \uacbd\ub85c\uc5d0\uc11c owner \ud3ec\uc778\ud130\ub97c reset \ud558\uac70\ub098 \uba85\uc2dc\uc801\uc73c\ub85c delete \ub97c \uc2e4\ud328\ud558\uac8c \ub418\uba74 \uacbd\uace0\ud558\ub77c (\uac04\ub2e8\ud568) new \uc758 \ubc18\ud658 \uac12\uc774\ub098 \ud3ec\uc778\ud130 \ud0c0\uc785\uc758 \ubc18\ud658 \uac12\uc744 \uac16\ub294 \ud568\uc218 \ud638\ucd9c\uc774 \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\uc5d0 \ud560\ub2f9\ub418\uba74 \uacbd\uace0\ud558\ub77c I.12: null\uc774 \ub418\uc5b4\uc120 \uc548\ub418\ub294 \ud3ec\uc778\ud130\ub294 not_null \ub85c \uc120\uc5b8\ud558\ub77c Reason nullptr \uc5ed\ucc38\uc870 \uc624\ub958\ub97c \ud53c\ud558\uae30 \uc704\ud574\uc11c\ub2e4. \uadf8\ub9ac\uace0 nullptr \ub97c \ubc18\ubcf5\ud574\uc11c \uac80\uc0ac\ud558\ub294 \uacbd\uc6b0\ub97c \ud53c\ud574 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c\ub2e4. Example int length ( const char * p ); // nullptr\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\uc9c0 \ubd84\uba85\ud558\uc9c0 \uc54a\ub2e4. length ( nullptr ); // \uc774\ub807\uac8c \uc0ac\uc6a9\ud574\ub3c4 \uad1c\ucc2e\uc744\uae4c? int length ( not_null < const char *> p ); // \uc880 \ub354 \ub0ab\ub2e4: p\uac00 nullptr\uac00 \ub418\uba74 \uc548\ub41c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. int length ( const char * p ); // p\uac00 nullptr\uac00 \ub420\uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud574\uc57c \ud55c\ub2e4. \uc18c\uc2a4 \ucf54\ub4dc\uc5d0 \uc758\ub3c4\ub97c \uba85\uc2dc\ud568\uc73c\ub85c\uc368, \ucef4\ud30c\uc77c\ub7ec\uc640 \ud234\uc774 \uc815\uc801 \ubd84\uc11d\uc744 \ud1b5\ud574 \uc77c\ubd80 \uc624\ub958 \ud074\ub798\uc2a4\ub97c \ucc3e\uc544\ub0b4\ub294 \ub4f1\uc758 \ubcf4\ub2e4 \ub098\uc740 \uc9c4\ub2e8\uc744 \uc81c\uacf5\ud558\uace0 \ubd84\uae30 \ubc0f \ub110(NULL) \uac80\uc0ac\ub97c \uc81c\uac70\ud558\ub294 \ub4f1\uc758 \ucd5c\uc801\ud654 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub2e4. Note not_null \uc740 \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. Note char \uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uac00 C-\uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4( \\0 \uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790\uc5f4)\uc744 \uac00\ub9ac\ud0a4\uace0 \uc788\ub2e4\ub294 \uac00\uc815\uc740 \uc5ec\uc804\ud788 \uc554\ubb35\uc801\uc774\uba70 \ud63c\ub780\uacfc \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uc6d0\uc778\uc774 \ub420 \uc218 \uc788\ub2e4. const char* \ubcf4\ub2e4\ub294 czstring \uc744 \uc0ac\uc6a9\ud558\ub77c. // we can assume that p cannot be nullptr // we can assume that p points to a zero-terminated array of characters int length ( not_null < zstring > p ); \ubb3c\ub860 length() \ub294 std::strlen() \uc774\ub2e4. Enforcement (\uac04\ub2e8\ud568) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 \ubaa8\ub4e0 \uc81c\uc5b4-\ud750\ub984 \uacbd\ub85c\uc5d0\uc11c \ud3ec\uc778\ud130 \ub9e4\uac1c \ubcc0\uc218\uc5d0 \uc811\uadfc\ud558\uae30 \uc804\uc5d0 nullptr \uc778\uc9c0 \uac80\uc0ac\ud55c\ub2e4\uba74, not_null \uc73c\ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4\ub294 \uacbd\uace0\ud558\ub77c (\ubcf5\uc7a1\ud568) \ud3ec\uc778\ud130 \ubc18\ud658 \uac12\uc744 \uac16\ub294 \ud568\uc218\uac00 \ubaa8\ub4e0 \ubc18\ud658 \uacbd\ub85c\uc5d0\uc11c nullptr \uc774 \uc544\ub2cc\uc9c0 \ud655\uc778\ud55c\ub2e4\uba74, \ub9ac\ud134 \ud0c0\uc785\uc744 not_null \uc73c\ub85c \uc120\uc5b8\ud574\uc57c \ub41c\ub2e4\ub294 \uacbd\uace0\ud558\ub77c I.13: \ubc30\uc5f4\uc744 \ub2e8\uc77c \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c Reason (\ud3ec\uc778\ud130, \ud06c\uae30)-\uc2a4\ud0c0\uc77c \uc778\ud130\ud398\uc774\uc2a4\ub294 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4. \ub610\ud55c (\ubc30\uc5f4\uc5d0 \ub300\ud55c) \uc77c\ubc18 \ud3ec\uc778\ud130\ub294 \ud53c\ud638\ucd9c\uc790\uc5d0\uc11c \ud06c\uae30\ub97c \uacb0\uc815\ud560 \uc218 \uc788\ub3c4\ub85d \uba87 \uac00\uc9c0 \uad00\ub840\uc5d0 \uc758\uc874\ud574\uc57c \ud55c\ub2e4. Example \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void copy_n ( const T * p , T * q , int n ); // [p:p+n)\uc5d0\uc11c [q:q+n)\ub85c \ubcf5\uc0ac\ud55c\ub2e4 \ub9cc\uc57d q \uac00 \uac00\ub9ac\ud0a4\ub294 \ubc30\uc5f4\uc758 \uc6d0\uc18c \uac2f\uc218\uac00 n \ubcf4\ub2e4 \uc801\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c? \uad00\uacc4\uc5c6\ub294 \uba54\ubaa8\ub9ac\ub97c \ub36e\uc5b4\uc4f0\uac8c \ub41c\ub2e4. \ub9cc\uc57d p \uac00 \uac00\ub9ac\ud0a4\ub294 \ubc30\uc5f4\uc758 \uc6d0\uc18c \uac2f\uc218\uac00 n \ubcf4\ub2e4 \uc801\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c? \uad00\uacc4\uc5c6\ub294 \uba54\ubaa8\ub9ac\ub97c \uc77d\uc744 \uac83\uc774\ub2e4. \uc5b4\ub290 \ucabd\uc774\ub098 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ub3d9\uc791\uc744 \uc218\ud589\ud558\uac70\ub098 \ub9e4\uc6b0 \ubd88\ucf8c\ud55c \ubc84\uadf8\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Alternative \uba85\uc2dc\uc801\uc778 \ubc94\uc704( span ) \uc0ac\uc6a9\uc744 \uace0\ub824\ud574 \ubcf4\ub77c: void copy ( span < const T > r , span < T > r2 ); // r\uc5d0\uc11c r2\ub85c \ubcf5\uc0ac\ud55c\ub2e4 Example, bad \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void draw ( Shape * p , int n ); // \ud5c8\uc811\ud55c(poor) \uc778\ud130\ud398\uc774\uc2a4\ub294 \ud5c8\uc811\ud55c \ucf54\ub4dc\ub97c \ub0b3\ub294\ub2e4. Circle arr [ 10 ]; // ... draw ( arr , 10 ); n \uc758 \uc778\uc218\ub85c 10 \uc744 \uc804\ub2ec\ud558\ub294 \uac83\uc740 \uc2e4\uc218\uc77c \uc218 \uc788\ub2e4. \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \uad00\ub840\ub294 [ 0 : n )\uc774\ub77c\uace0 \uac00\uc815\ud558\ub294 \uac83\uc774\uc9c0\ub9cc, \uc774\ub7ec\ud55c \ub0b4\uc6a9\uc774 \uc5b4\ub514\uc5d0\ub3c4 \uc5b8\uae09\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \ub354 \ub098\uc05c \ubd80\ubd84\uc740 \uc5b4\uca0c\ub4e0 draw() \ud638\ucd9c\uc774 \ucef4\ud30c\uc77c\ub41c\ub2e4\ub294 \uac83\uc774\ub2e4. \ubc30\uc5f4\uc5d0\uc11c \ud3ec\uc778\ud130\ub85c\uc758 \uc554\uc2dc\uc801 \ubcc0\ud658(\ubc30\uc5f4 \ubd80\ud328(array decay))\uc774 \uc788\uc5c8\uace0, Circle \uc5d0\uc11c Shape \ub85c\uc758 \ub610 \ub2e4\ub978 \uc554\uc2dc\uc801 \ubcc0\ud658\uc774 \uc788\uc5c8\ub2e4. draw() \uac00 \uadf8 \ubc30\uc5f4\uc744 \ud1b5\ud574 \uc548\uc804\ud558\uac8c \ubc18\ubcf5\ubb38\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc740 \uc5c6\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc694\uc18c\uc758 \ud06c\uae30\ub97c \uc54c \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. Alternative \uc694\uc18c\uc758 \ud06c\uae30\ud55c\uacc4\ub97c \ubcf4\uc7a5\ud558\uace0 \uc704\ud5d8\ud55c \uc554\uc2dc\uc801 \ubcc0\ud658\uc744 \ubc29\uc9c0\ud558\ub294 \uc9c0\uc6d0 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: void draw2 ( span < Circle > ); Circle arr [ 10 ]; // ... draw2 ( span < Circle > ( arr )); // \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \uc54c \uc218 \uc788\ub2e4(deduce) draw2 ( arr ); // \uc6d0\uc18c \ud0c0\uc785\uacfc \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \uc54c \uc218 \uc788\ub2e4 void draw3 ( span < Shape > ); draw3 ( arr ); // \uc624\ub958: Circle[10]\ub294 span<Shape>\uac00 \ub420 \uc218 \uc5c6\ub2e4. \uc774 draw2() \ub294 \uac19\uc740 \uc591\uc758 \uc815\ubcf4\ub97c draw() \uc5d0 \uc804\ub2ec\ud558\uc9c0\ub9cc, \uba85\uc2dc\uc801\uc73c\ub85c Circle \uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c \uc218 \uc788\ub2e4. Exception zstring \uacfc czstring \uc744 \uc0ac\uc6a9\ud574 C-\uc2a4\ud0c0\uc77c\uc758 \\0 \ub85c \ub05d\ub098\ub294 \ubb38\uc790\uc5f4\uc744 \ub098\ud0c0\ub0b4\ub77c. \ud558\uc9c0\ub9cc \uc774\ub807\uac8c \ud560\ub54c\ub294 \ubc94\uc704 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d GSL \uc758 string_span \ub97c \uc0ac\uc6a9\ud558\ub77c. Enforcement (\uac04\ub2e8\ud568) ((\uacbd\uacc4)) \ubc30\uc5f4 \ud0c0\uc785\uc5d0\uc11c \ud3ec\uc778\ud130 \ud0c0\uc785\uc73c\ub85c\uc758 \uc554\uc2dc\uc801 \ubcc0\ud658\uc5d0 \uc758\uc874\ud558\ub294 \ud45c\ud604\uc2dd\uc5d0 \ub300\ud574 \uacbd\uace0\ub97c \ud45c\uc2dc\ud558\ub77c. string/czstring \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub294 \uc608\uc678\ub97c \ud5c8\uc6a9\ud55c\ub2e4. (\uac04\ub2e8\ud568) ((\uacbd\uacc4)) \ud3ec\uc778\ud130 \ud0c0\uc785\uc758 \uac12\uc744 \uac00\uc838\uc624\ub294 \ud3ec\uc778\ud130 \ud0c0\uc785\uc758 \ud45c\ud604\uc2dd\uc5d0 \ub300\ud55c \uc0b0\uc220 \uc5f0\uc0b0\uc5d0 \ub300\ud574 \uacbd\uace0\ub97c \ud45c\uc2dc\ud558\ub77c. zstring/czstring \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub294 \uc608\uc678\ub97c \ud5c8\uc6a9\ud55c\ub2e4. I.22: \uc804\uc5ed \uac1c\uccb4\uac00 \ubcf5\uc7a1\ud558\uac8c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c Reason \ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\ub294 \uc2e4\ud589 \uc21c\uc11c\ub97c \ubd88\ubd84\uba85(undefined order)\ud558\uac8c \ud55c\ub2e4. Example // file1.c extern const X x ; const Y y = f ( x ); // read x; write y // file2.c extern const Y y ; const X x = g ( y ); // read y; write x x \uc640 y \uac00 \uc11c\ub85c \ub2e4\ub978 \ud30c\uc77c(translation units)\uc5d0 \uc788\uae30 \ub54c\ubb38\uc5d0, f() \uc640 g() \uc758 \ud638\ucd9c \uc21c\uc11c\ub294 \uc54c \uc218 \uc5c6\ub2e4; \ub458 \uc911 \ud558\ub098\uac00 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 const \uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\ub2e4. \uc774\ub294 \uc804\uc5ed \uac1c\uccb4\ub4e4\uc758 \ucd08\uae30\ud654 \uc21c\uc11c \ubb38\uc81c\uac00 \ubcc0\uc218 \uc5d0\ub9cc \ud55c\uc815\ub41c\uac83\uc774 \uc544\ub2d8\uc744 \ubcf4\uc5ec\uc900\ub2e4. Note \ub3d9\uc2dc\uc131\uc744 \uace0\ub824\ud55c \ucf54\ub4dc\uc5d0\uc11c \ucd08\uae30\ud654 \uc21c\uc11c \ubb38\uc81c\ub294 \ud2b9\ud788 \ub2e4\ub8e8\uae30\uac00 \uc5b4\ub835\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc804\uc5ed \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \ucd5c\uc120\uc758 \ud574\uacb0\ucc45\uc774\ub2e4. Enforcement \ube44 constexpr \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uc804\uc5ed \ucd08\uae30\ud654\ub97c \uc9c0\uc801\ud55c\ub2e4. extern \uac1c\uccb4\uc5d0 \uc811\uadfc\ud558\ub294 \uc804\uc5ed \ucd08\uae30\ud654\ub97c \uc9c0\uc801\ud55c\ub2e4. I.23: \ud568\uc218 \uc778\uc790 \uac1c\uc218\ub97c \ucd5c\uc18c\ub85c \uc720\uc9c0\ud558\ub77c Reason \uc778\uc790 \uac2f\uc218\uac00 \ub9ce\uc73c\uba74 \ud63c\ub780\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. \uc778\uc790\ub97c \ub9ce\uc774 \uc804\ub2ec\ud558\ub294 \uac83\uc740 \ub2e4\ub978 \ubc29\ubc95\uc5d0 \ube44\ud574 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4. Discussion \ud568\uc218\uac00 \ub108\ubb34 \ub9ce\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac00\uc9c8\ub54c\ub294 \ubcf4\ud1b5 2\uac00\uc9c0 \uc774\uc720\uac00 \uc788\ub2e4: \ucd94\uc0c1\ud654 \ub418\uc9c0 \uc54a\uc74c \ucd94\uc0c1\ud654\ub97c \ud558\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \ubd88\ubcc0\uc870\uac74\uc774 \uc788\ub294 \ub2e8\uc77c \uac1c\uccb4\uac00 \uc544\ub2c8\ub77c \ubcf5\uc7a1\ud558\uace0 \uac1c\ubcc4\uc801\uc778 \ud615\ud0dc\ub85c \uac12\ub4e4\uc774 \uc804\ub2ec\ub418\uace0 \uc788\ub294 \uac83\uc774\ub2e4. \uc774\ub294 \uc778\uc790 \ubaa9\ub85d\uc744 \uae38\uac8c \ub9cc\ub4e4 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc778\uc790\ub4e4\uc774 \ubd88\ubcc0\uc870\uac74\uc73c\ub85c \ubcf4\ud638\ub418\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc624\ub958\ub85c \uc774\uc5b4\uc9c8 \uac00\ub2a5\uc131\ub3c4 \ub192\ub2e4. \"\ud558\ub098\uc758 \ud568\uc218\uac00 \ud55c\uac00\uc9c0 \uc77c\ub9cc \ud55c\ub2e4\"\ub294 \uaddc\uce59\uc744 \uc704\ubc18\" \ud574\ub2f9 \ud568\uc218\uac00 \ud558\ub098\ub97c \ucd08\uacfc\ud558\ub294 \uc791\uc5c5\uc744 \ud558\uace0 \uc788\ub2e4. \uc774\ub294 \uace0\uccd0\uc11c \ub2e4\uc2dc \uc791\uc131\ud574\uc57c(refactor) \ud55c\ub2e4. Example \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac merge() \ub294 \ud3b8\ud558\uac8c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ud55c\uacc4\uc5d0 \uc788\ub2e4: template < class InputIterator1 , class InputIterator2 , class OutputIterator , class Compare > OutputIterator merge ( InputIterator1 first1 , InputIterator1 last1 , InputIterator2 first2 , InputIterator2 last2 , OutputIterator result , Compare comp ); \uc55e\uc11c \uc9c0\uc801\ud55c 1\ubc88 \ubb38\uc81c\uc810\uc5d0 \ud574\ub2f9\ud55c\ub2e4 -- \ucd94\uc0c1\ud654\uac00 \ub418\uc9c0 \uc54a\uc740 \uac83\uc774\ub2e4. STL\uc5d0\uc11c \ubc94\uc704(\ucd94\uc0c1\ud654\ub41c \uac1c\ub150)\ub97c \uc804\ub2ec\ud558\uc9c0 \uc54a\uace0 \ubc18\ubcf5\uc790 \uc30d(pair)\ub4e4\uc744 \uc804\ub2ec\ud55c\ub2e4. \uc774\ub294 \ucea1\uc290\ud654\ub418\uc9c0 \uc54a\uc740 \uac12\ub4e4(unencapsulated component values)\uc5d0 \ud574\ub2f9\ud55c\ub2e4. \uc5ec\uae30\uc5d0\ub294 4\uac1c\uc758 \ud15c\ud50c\ub9bf \uc778\uc790\uc640 6\uac1c\uc758 \ud568\uc218 \uc778\uc790\uac00 \uc788\ub2e4. \uac00\uc7a5 \uc790\uc8fc \ubcf4\uc774\uace0 \ub2e8\uc21c\ud55c \uc0ac\uc6a9\ubc95\uc744 \ub2e8\uc21c\ud654\ud558\uae30 \uc704\ud574, \uc778\uc790\uc758 \uae30\ubcf8 \ube44\uad50\ub97c < \ub85c \uc815\ud560 \uc218 \uc788\ub2e4. template < class InputIterator1 , class InputIterator2 , class OutputIterator > OutputIterator merge ( InputIterator1 first1 , InputIterator1 last1 , InputIterator2 first2 , InputIterator2 last2 , OutputIterator result ); \uc774\ub807\uac8c \ud55c\ub2e4\uace0 \ud574\uc11c \uc804\uccb4\uc801\uc778 \ubcf5\uc7a1\uc131\uc774 \uc904\uc5b4\ub4e4\uc9c0\ub294 \uc54a\uc9c0\ub9cc \uc0ac\uc6a9\uc790 \uc785\uc7a5\uc5d0\uc11c \ubcfc \ub54c\ub294 \ubcf5\uc7a1\uc131\uc774 \uc904\uc5b4\ub4e0 \uac83\ucc98\ub7fc \ubcf4\uc778\ub2e4. \uc2e4\uc81c\ub85c \uc778\uc790 \uac2f\uc218\ub97c \uc904\uc774\ub824\uba74 \uc778\uc790\ub97c \uc880 \ub354 \ub192\uc740 \uc218\uc900\uc758 \ucd94\uc0c1\ud654\ub85c \ubb36\uc5b4\uc57c \ud55c\ub2e4: template < class InputRange1 , class InputRange2 , class OutputIterator > OutputIterator merge ( InputRange1 r1 , InputRange2 r2 , OutputIterator result ); \uc778\uc790\ub97c \"\ubb36\uc5b4\uc11c\" \uadf8\ub8f9\ud654\ud558\ub294 \uac83\uc740 \uc778\uc790\uc758 \uac2f\uc218\ub97c \uc904\uc774\uace0 \uac80\uc0ac\ud560 \uae30\ud68c\ub97c \ub298\ub9ac\ub294 \uc77c\ubc18\uc801\uc778 \uae30\ubc95\uc774\ub2e4. \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c, ISO TS\uc5d0\uc11c \uc815\uc758\ud55c \ucee8\uc149(concepts)\uc744 \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4. \uc138 \ud0c0\uc785\uc774 merge\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4\uace0 \uc815\uc758\ud558\ub294 \uac83\uc774\ub2e4. Mergeable { In1 , In2 , Out } OutputIterator merge ( In1 r1 , In2 r2 , Out result ); Example \uc548\uc804\uc131 \ubd84\uc11d(safety profile)\uc740 \uc544\ub798\uc640 \uac19\uc740 \ucf54\ub4dc\ub97c void f ( int * some_ints , int some_ints_length ); // \ub098\uc068: C \uc2a4\ud0c0\uc77c, \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4 \uc544\ub798 \ucc98\ub7fc \ubc14\uafb8\ub3c4\ub85d \uad8c\uc7a5\ud55c\ub2e4 void f ( gsl :: span < int > some_ints ); // \uc88b\uc74c: \uc548\uc804\ud558\uace0 \ubc94\uc704\ub97c \uac80\uc0ac\ud55c\ub2e4 \uc5ec\uae30\uc11c, \ucd94\uc0c1\ud654\ub97c \uc0ac\uc6a9\ud558\uba74 \uc548\uc804\uc131\uacfc \uacac\uace0\ud568\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. \ub3d9\uc2dc\uc5d0 \uc790\uc5f0\uc2a4\ub7fd\uac8c \uc778\uc790\uc758 \uc218\ub97c \uc904\uc774\uac8c \ub41c\ub2e4. Note \uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc778\uc790\uac00 \uc788\uc5b4\uc57c \ub108\ubb34 \ub9ce\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\uc744\uae4c? \uc778\uc790\uac00 4\uac1c\ub77c\uba74 \ub9ce\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. 4\uac1c\uc758 \uc778\uc790\ub85c \uac00\uc7a5 \uc798 \ud45c\ud604\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub4e4\ub3c4 \uc788\uc9c0\ub9cc, \ub9ce\uc9c0\ub294 \uc54a\ub2e4. Alternative \ub354 \ub098\uc740 \ucd94\uc0c1\ud654: \uc778\uc790\ub97c \uc758\ubbf8\uc788\ub294 \uac1c\uccb4\ub85c \uadf8\ub8f9\ud654\ud558\uace0 \uac1c\uccb4\ub97c \uc804\ub2ec\ud558\ub77c. (\uac12\uc5d0 \uc758\ud55c \uc804\ub2ec \ub610\ub294 \ub808\ud37c\ub7f0\uc2a4\uc5d0 \uc758\ud55c \uc804\ub2ec) \ub354 \uc801\uc740 \uc778\uc790 \uac2f\uc218\ub85c \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ud615\ud0dc\uc758 \ud638\ucd9c\uc744 \ud560 \uc218 \uc788\ub294 \ub514\ud3f4\ud2b8 \uc778\uc790\ub098 \uc624\ubc84\ub85c\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c. Enforcement \ubc94\uc704 \ub610\ub294 \ubdf0\uac00 \uc544\ub2cc \ub3d9\uc77c\ud55c \ud0c0\uc785\uc758 \ubc18\ubcf5\uc790(\ud3ec\uc778\ud130 \ud3ec\ud568)\ub97c 2\uac1c \uc774\uc0c1 \uc120\uc5b8\ud558\ub294 \ud568\uc218\uac00 \uc788\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. (\uc801\uc6a9 \ubd88\uac00\ub2a5) \ucca0\uc800\ud55c \uc810\uac80\uc774 \ubd88\uac00\ub2a5\ud55c \ucca0\ud559\uc801 \uac00\uc774\ub4dc\ub77c\uc778\uc774\ub2e4. I.24: \uac19\uc740 \ud0c0\uc785\uc758 \uad00\ub828\uc5c6\ub294 \ub9e4\uac1c \ubcc0\uc218\uac00 \ubd99\uc5b4\uc788\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c Reason \uc2e4\uc218\ub85c \ub3d9\uc77c \ud0c0\uc785\uc758 \uc778\uc811\ud55c \uc778\uc218\ub97c \uc27d\uac8c \ubc14\uafc0 \uc218 \uc788\ub2e4. Example, bad \ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void copy_n ( T * p , T * q , int n ); // copy from [p:p + n) to [q:q + n) \uc704 \ucf54\ub4dc\ub294 K&R C-\uc2a4\ud0c0\uc77c \uc778\ud130\ud398\uc774\uc2a4\uc758 \uc801\uc808\ud558\uc9c0 \ubabb\ud55c \ubcc0\ud615\uc774\ub2e4. \"to\"\uc640 \"from\" \uc778\uc218\ub97c \uc27d\uac8c \ubc14\uafc0 \uc218 \uc788\ub2e4. \"from\" \uc778\uc790\uc5d0 const \ub97c \uc0ac\uc6a9\ud558\ub77c: void copy_n ( const T * p , T * q , int n ); // copy from [p:p + n) to [q:q + n) Exception \ub9cc\uc57d \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc758 \uc21c\uc11c\uac00 \uc911\uc694\ud558\uc9c0 \uc54a\ub2e4\uba74, \ubb38\uc81c\uac00 \uc5c6\ub2e4: int max ( int a , int b ); Alternative \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uc9c0 \ub9d0\uace0 \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 \uac1c\uccb4(\uc608\ub97c \ub4e4\uc5b4, span )\ub85c \uc804\ub2ec\ud558\ub77c. void copy_n ( span < const T > p , span < T > q ); // copy from p to q Alternative struct \ub97c \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785\uc73c\ub85c \uc815\uc758\ud558\uace0 \uac01 \ud544\ub4dc\uc758 \uc774\ub984\uc744 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc5d0 \ub530\ub77c \ubd80\uc5ec\ud558\ub77c. struct SystemParams { string config_file ; string output_path ; seconds timeout ; }; void initialize ( SystemParams p ); \uc774\ub294 \ud638\ucd9c \uc9c0\uc810\uc5d0\uc11c (\uba64\ubc84\ub4e4\uc758) \uc774\ub984\uc744 \ud1b5\ud574 \uac12\uc744 \ubd80\uc5ec\ud568\uc73c\ub85c\uc368 \ub098\uc911\uc5d0 \ucf54\ub4dc\ub97c \uc77d\uc744 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \ud638\ucd9c\uc744 \uc774\ud574\ud558\uae30 \uc27d\uac8c \ud55c\ub2e4. Enforcement (\uac04\ub2e8\ud568) \uc5f0\uc18d\ud558\ub294 \ub450 \ub9e4\uac1c \ubcc0\uc218\uac00 \ub3d9\uc77c\ud55c \ud0c0\uc785\uc744 \uacf5\uc720\ud558\ub294 \uacbd\uc6b0 \uacbd\uace0\ub97c \ud45c\uc2dc\ud558\ub77c. I.25: \ud074\ub798\uc2a4 \uacc4\uce35(hierarchy)\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ucd94\uc0c1 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ucd94\uc0c1 \ud074\ub798\uc2a4(abstract class)\ub294 \uc0c1\ud0dc\uac00 \uc788\ub294 \ubd80\ubaa8 \ud074\ub798\uc2a4\ubcf4\ub2e4 \uc548\uc815\uc801\uc774\ub2e4. Example, bad \ub2f9\uc2e0\uc740 Shape \uc608\uc81c\ub97c \uc4f8 \uac83\uc774\ub77c\uace0 \uc608\uc0c1\ud588\uc744 \uac83\uc774\ub2e4. :-) class Shape { // bad: interface class loaded with data public : Point center () const { return c ; } virtual void draw () const ; virtual void rotate ( int ); // ... private : Point c ; vector < Point > outline ; Color col ; }; \uc774\ub807\uac8c \ud558\uba74 \ud30c\uc0dd\ub41c \ubaa8\ub4e0 \ud074\ub798\uc2a4\uac00 \uc911\uc2ec\uc744 \uacc4\uc0b0\ud558\uac8c \ub41c\ub2e4. \ube44\ub85d \uc911\uc694\ud558\uc9c0 \uc54a\uace0 \uc911\uc2ec\uc774 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub354\ub77c\ub3c4 \ub9d0\uc774\ub2e4. \ube44\uc2b7\ud558\uac8c, \ubaa8\ub4e0 Shape \uac00 Color \ub97c \uac16\uace0 \uc788\ub294 \uac83\uc740 \uc544\ub2c8\uba70 \ub9ce\uc740 Shape \ub4e4\uc740 \uc77c\ub828\uc758 Point \ub85c \uc815\uc758\ub41c \uc724\uacfd\uc120\uc5c6\uc774 \uac00\uc7a5 \uc798 \ud45c\ud604\ub41c\ub2e4. \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \uc0ac\uc6a9\uc790\uac00 \uadf8\ub7ec\ud55c \ud074\ub798\uc2a4\ub97c \uc791\uc131\ud558\uc9c0 \ubabb\ud558\ub3c4\ub85d \ub9cc\ub4e4\uae30 \uc704\ud574 \uace0\uc548\ub418\uc5c8\ub2e4. class Shape { // better: Shape is a pure interface public : virtual Point center () const = 0 ; // pure virtual functions virtual void draw () const = 0 ; virtual void rotate ( int ) = 0 ; // ... // ... no data members ... // ... virtual ~ Shape () = default ; }; Enforcement (\uac04\ub2e8\ud568) C \ud074\ub798\uc2a4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\uac00 C \uc758 \ubca0\uc774\uc2a4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\uc5d0 \ud560\ub2f9\ub418\uace0 \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4\uc5d0 \ub370\uc774\ud130 \uba64\ubc84\uac00 \uc788\uc73c\uba74 \uacbd\uace0\ud558\ub77c. I.26: \ud06c\ub85c\uc2a4 \ucef4\ud30c\uc77c\ub7ec ABI\ub97c \uc6d0\ud55c\ub2e4\uba74 C \uc2a4\ud0c0\uc77c \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ucef4\ud30c\uc77c\ub7ec\ub9c8\ub2e4 \ud074\ub798\uc2a4, \uc608\uc678 \ucc98\ub9ac, \ud568\uc218 \uc774\ub984 \ubc0f \uae30\ud0c0 \uad6c\ud604 \uc138\ubd80 \uc0ac\ud56d\uc5d0 \ub300\ud574 \uc11c\ub85c \ub2e4\ub978 \ubc14\uc774\ub108\ub9ac \ub808\uc774\uc544\uc6c3\uc744 \uad6c\ud604\ud55c\ub2e4. Exception \uc2e0\uc911\ud558\uac8c \uc120\ud0dd\ud55c \uba87 \uac00\uc9c0 \uace0\uae09 \uc218\uc900\uc758 C++ \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc2e0\uc911\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. Exception \uc77c\ubc18\uc801\uc778 ABI\ub294 \uc77c\ubd80 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \uc810\uc810 \ub354 \uc5c4\uaca9\ud55c \uc81c\ud55c\uc73c\ub85c\ubd80\ud130 \ubc97\uc5b4\ub098\uace0 \uc788\ub2e4. Note \ub2e8\uc77c \ucef4\ud30c\uc77c\ub7ec\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c C++ \uc804\uccb4\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc0c8 \ucef4\ud30c\uc77c\ub7ec \ubc84\uc804\uc73c\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc \ud55c \ud6c4\uc5d0\ub294 \ub2e4\uc2dc \ucef4\ud30c\uc77c\ud574\uc57c \ud560 \uc218 \uc788\ub2e4. Enforcement (\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc778\ud130\ud398\uc774\uc2a4\uac00 ABI\uc758 \uc77c\ubd80\uac00 \ub418\ub294 \ubd80\ubd84\uc744 \ud655\uc2e4\ud558\uac8c \uc2dd\ubcc4\ud558\uae30\ub294 \uc5b4\ub835\ub2e4. I.27: \ubcc0\ud654\uac00 \uc801\uc740(stable) ABI\ub97c \uc6d0\ud55c\ub2e4\uba74, Pimpl idiom \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\ub77c Reason private \ub370\uc774\ud130\ub294 \ud074\ub798\uc2a4\uc758 \uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uace0 \uba64\ubc84 \ud568\uc218\ub4e4\uc740 \uc911\ubcf5\uc815\uc758\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uae30 \ub54c\ubb38\uc5d0, \uc774\ub7f0 \uad6c\ud604 \uc138\ubd80\uc0ac\ud56d\uc774 \ubc14\ub00c\ub294 \uacbd\uc6b0\uc5d4 \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uae4c\uc9c0 \ub2e4\uc2dc \ucef4\ud30c\uc77c\ub418\uc5b4\uc57c \ud55c\ub2e4. \uad6c\ud604\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130(Pimpl)\ub97c \uc0ac\uc6a9\ud558\ub294 \ub2e4\ud615\uc801\uc774\uc9c0 \uc54a\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub294 \uac04\uc811 \ucc38\uc870\ud558\ub294 \ube44\uc6a9\ub9cc\uc73c\ub85c \uad6c\ud604\uc774 \ubc14\ub00c\uc5c8\uc744\ub54c\uc758 \uc5ec\ud30c\ub97c \uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub2e4. Example \uc778\ud130\ud398\uc774\uc2a4 (widget.h) class widget { class impl ; std :: unique_ptr < impl > pimpl ; public : void draw (); // public API that will be forwarded to the implementation widget ( int ); // defined in the implementation file ~ widget (); // defined in the implementation file, where impl is a complete type widget ( widget && ) = default ; widget ( const widget & ) = delete ; widget & operator = ( widget && ); // defined in the implementation file widget & operator = ( const widget & ) = delete ; }; \uad6c\ud604 (widget.cpp) class widget :: impl { int n ; // private data public : void draw ( const widget & w ) { /* ... */ } impl ( int n ) : n ( n ) {} }; void widget :: draw () { pimpl -> draw ( * this ); } widget :: widget ( int n ) : pimpl { std :: make_unique < impl > ( n )} {} widget ::~ widget () = default ; widget & widget :: operator = ( widget && ) = default ; Notes \uc774\ub7f0 \ubc29\ubc95\uc744 \uc801\uc6a9\ud588\uc744\ub54c\uc758 \uc601\ud5a5\uc744 \uc774\ud574\ud558\ub824\uba74 GOTW #100 \uc640 cppreference \ub97c \ud568\uaed8 \ubcf4\ub77c. Enforcement (\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc5b4\ub290 \ubd80\ubd84\uc774 ABI\uc758 \uc778\ud130\ud398\uc774\uc2a4 \ubd80\ubd84\uc778\uc9c0 \ud655\uc2e4\ud788 \uad6c\ubd84\ud558\uae30 \ud798\ub4e4\ub2e4. I.30: \uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294 \ucf54\ub4dc\ub294 \ucea1\uc290\ud654\ud558\ub77c Reason \ucf54\ub4dc\ub97c \ub2e8\uc21c\ud558\uace0 \uc548\uc804\ud558\uac8c \uc720\uc9c0\ud55c\ub2e4. \ub54c\ub54c\ub85c \ub17c\ub9ac\uc801\uc774\uac70\ub098 \uc131\ub2a5\uc0c1\uc758 \uc774\uc720\ub85c \uc9c0\uc800\ubd84\ud558\uace0 \uc548\uc804\ud558\uc9c0 \uc54a\uc73c\uba70 \uc624\ub958\ub97c \uc77c\uc73c\ud0a4\uae30 \uc26c\uc6b4 \uae30\uc220\ub4e4\uc774 \ud544\uc694\ud560 \ub54c\ub3c4 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74, \uadf8 \ucf54\ub4dc\ub4e4\uc740 \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \ub178\ucd9c\uc2dc\ud0a4\uc9c0 \ub9d0\uace0 \uc9c0\uc5ed\uc801\uc73c\ub85c \uc720\uc9c0\ud558\ub77c. \uc774\ub294 \ubcf4\ub2e4 \ub9ce\uc740 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc774 \uc138\uc138\ud558\uac8c \uc54c \ud544\uc694\uac00 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \uad6c\ud604\uc758 \ubcf5\uc7a1\ud568\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4. Example ( main \uc758 \uc778\uc790\ucc98\ub7fc) \ud2b9\uc815 \ud615\ud0dc\uc758 \uc785\ub825\uc5d0 \uc758\uc874\uc801\uc778 \ud504\ub85c\uadf8\ub7a8\uc744 \uc0dd\uac01\ud574\ubcf4\ub77c. \uc774\ub7f0 \ud504\ub85c\uadf8\ub7a8\uc740 \ud30c\uc77c, \ucee4\ub9e8\ub4dc\ub77c\uc778, \ud639\uc740 \ud45c\uc900 \uc785\ub825\uc73c\ub85c\ubd80\ud130 \uc785\ub825\uc744 \ubc1b\uc544\uc57c \ud55c\ub2e4. \uc544\ub9c8 \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uac83\uc774\ub2e4. bool owned ; owner < istream *> inp ; switch ( source ) { case std_in : owned = false ; inp = & cin ; break ; case command_line : owned = true ; inp = new istringstream { argv [ 2 ]}; break ; case file : owned = true ; inp = new ifstream { argv [ 2 ]}; break ; } istream & in = * inp ; \uc774\ub294 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub97c \ud53c\ud558\ub77c \ub294 \uaddc\uce59\uc744 \uc704\ubc18\ud55c\ub2e4. \ub610\ud55c \uc18c\uc720\uad8c\uc744 \ubb34\uc2dc \ud558\uba70, \ub9c8\ubc95 \uc0c1\uc218\ub97c \ud53c\ud558\ub77c \ub294 \uaddc\uce59\uc5d0\ub3c4 \ubc18\ud55c\ub2e4. \ud2b9\ud788, \uc774 \ucf54\ub4dc\ub294 \ub204\uad70\uac00 \uc5b4\ub518\uac00\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc57c \ud55c\ub2e4\ub294 \uc810\uc744 \uae30\uc5b5\ud574\uc57c\ub9cc \ud55c\ub2e4. if ( owned ) delete inp ; \uc774 \uc608\uc81c\uc5d0 \ud55c\ud574\uc11c\ub294 unique_ptr \ub97c \uc0ac\uc6a9\ud574 cin \uc5d0 \ud544\uc694\ud55c \uc18c\uba78 \ucf54\ub4dc\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ubb38\uc81c\ub97c \uc811\ud558\uae30 \uc26c\uc6b4 \ucd08\uc2ec\uc790(novices)\uc5d0\uac8c\ub294 \uadf8\ub7f0 \ubc29\ubc95\uc744 \uae30\ub300\ud558\uae30 \uc5b4\ub835\ub2e4. \ub3d9\uc2dc\uc5d0 \uc774 \ucf54\ub4dc\ub294 \uc815\uc801\uc778 \uc18d\uc131(\uc774 \uc608\uc2dc\uc5d0\uc11c\ub294, \uc18c\uc720\uad8c)\uc774 \uc2e4\ud589 \uc2dc\uac04\uc5d0 \uad00\ub9ac\ub418\ub294 \uc77c\ubc18\uc801\uc778 \ubb38\uc81c\uc758 \ud55c \uc0ac\ub840\uc5d0 \ubd88\uacfc\ud558\ub2e4. \ubcf4\ud3b8\uc801\uc73c\ub85c \uc790\uc8fc \ubcf4\uc774\uace0 \uc548\uc804\ud55c \uc608\uc2dc\ub4e4\uc740 \uc815\uc801\uc73c\ub85c \ud574\uacb0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \uadf8\ub7f0 \ucf54\ub4dc\uc5d0\ub294 \ube44\uc6a9\uacfc \ubcf5\uc7a1\uc131\uc744 \ub354\ud558\uace0 \uc2f6\uc9c0 \uc54a\ub2e4. \ud558\uc9c0\ub9cc \ubcf4\ud3b8\uc801\uc774\uc9c0 \uc54a\uace0, \ub35c \uc548\uc804\ud55c, \uadf8\ub9ac\uace0 \ubd88\ud544\uc694\ud558\uac8c \ube44\uc6a9\uc774 \ub4dc\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \ub300\ucc98\ud574\uc57c \ud55c\ub2e4. \uc77c\ub840\uac00 Str15 \uc5d0\uc11c \ub2e4\ub8e8\uc5b4\uc9c4\ub2e4. \uacb0\ub860\uc801\uc73c\ub85c, \uc6b0\ub9ac\ub294 \uc774\ub7f0 \ud074\ub798\uc2a4\ub97c \uc791\uc131\ud560 \uac83\uc774\ub2e4. class Istream { [[ gsl :: suppress ( lifetime )]] public : enum Opt { from_line = 1 }; Istream () { } Istream ( zstring p ) : owned { true }, inp { new ifstream { p }} {} // read from file Istream ( zstring p , Opt ) : owned { true }, inp { new istringstream { p }} {} // read from command line ~ Istream () { if ( owned ) delete inp ; } operator istream & () { return * inp ; } private : bool owned = false ; istream * inp = & cin ; }; \uc774\uc81c \ub3d9\uc801\uc73c\ub85c \uacb0\uc815\ub418\ub294 istream \uc758 \uc18c\uc720\uad8c\uc774 \ucea1\uc290\ud654 \ub418\uc5c8\ub2e4. \uc544\ub9c8 \uc2e4\uc81c\ub85c\ub294 \uc7a0\uc7ac\uc801\uc778 \uc624\ub958\ub97c \uac80\uc0ac\ud558\ub294 \ucf54\ub4dc\uac00 \ub354 \ucd94\uac00\ub420 \uac83\uc774\ub2e4. Enforcement \uc5b4\ub835\ub2e4. \uc5b4\ub5a4 (\uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294) \ucf54\ub4dc\uac00 \ud544\uc218\uc801\uc778\uc9c0 \uacb0\uc815\ud558\uae30 \uc5b4\ub835\ub2e4 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uaddc\uce59 \uc704\ubc18\uc744 \ud5c8\uc6a9\ud558\ub3c4\ub85d \uc81c\uc57d\ud558\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud55c\ub2e4.","title":"Interfaces"},{"location":"Interfaces/#i","text":"\uc778\ud130\ud398\uc774\uc2a4\ub294 \ud504\ub85c\uadf8\ub7a8 \ubd80\ubd84 \uc0ac\uc774\uc758 \uacc4\uc57d\uc774\ub2e4. \uc11c\ube44\uc2a4\uc758 \uacf5\uae09\uc790\uc640 \uc0ac\uc6a9\uc790\uac00 \uae30\ub300\ud558\ub294 \ubc14\ub97c \uc815\ud655\ud558\uac8c \uae30\uc220\ud558\ub294 \uac83\uc774 \ud575\uc2ec\uc774\ub2e4. \uc88b\uc740 \uc778\ud130\ud398\uc774\uc2a4(\uc774\ud574\ud558\uae30 \uc27d\uace0, \ud6a8\uc728\uc801\uc778 \uc0ac\uc6a9\uc744 \uc7a5\ub824\ud558\uace0, \uc27d\uac8c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uace0, \ud14c\uc2a4\ud2b8\ub97c \uc9c0\uc6d0\ud558\ub294 \ub4f1)\ub294 \uc544\ub9c8\ub3c4 \ucf54\ub4dc \uad6c\uc131 \uc911\uc5d0\uc11c \uac00\uc7a5 \uc911\uc694\ud55c \uc694\uc18c \uc911 \ud558\ub098\ub2e4. \uc778\ud130\ud398\uc774\uc2a4 \uaddc\uce59 \uc694\uc57d: I.1: \uc778\ud130\ud398\uc774\uc2a4\ub294 \uba85\ud655\ud558\uac8c(explicit) \uc791\uc131\ud558\ub77c I.2: const \uac00 \uc544\ub2cc \uc804\uc5ed\ubcc0\uc218\ub97c \uc9c0\uc591\ud558\ub77c I.3: \uc2f1\uae00\ud1a4 \ud328\ud134\uc744 \uc9c0\uc591\ud558\ub77c I.4: \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc744 \uc815\ud655\ud558\uace0 \uc5c4\uaca9\ud558\uac8c \uc900\uc218\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c I.5: (\ud558\ub098\ub77c\ub3c4 \uc788\ub2e4\uba74) \uc0ac\uc804 \uc870\uac74\uc744 \uae30\uc220\ud558\ub77c I.6: \uc0ac\uc804 \uc870\uac74\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 Expects() \ub97c \uc0ac\uc6a9\ud558\ub77c I.7: \uc0ac\ud6c4 \uc870\uac74\uc744 \uae30\uc220\ud558\ub77c I.8: \uc0ac\ud6c4 \uc870\uac74\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 Ensures() \ub97c \uc0ac\uc6a9\ud558\ub77c I.9: \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud15c\ud50c\ub9bf\uc774\ub77c\uba74 \ucee8\uc149(Concept)\uc744 \uc0ac\uc6a9\ud574\uc11c \ub9e4\uac1c \ubcc0\uc218\ub97c \ubb38\uc11c\ud654\ud558\ub77c I.10: \uc694\uad6c\ub41c \uc791\uc5c5\uc758 \uc218\ud589 \uc2e4\ud328\ub97c \uc54c\ub9ac\uae30 \uc704\ud574 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\ub77c I.11: \uc6d0\uc2dc \ud3ec\uc778\ud130( T* ) \ud639\uc740 \ucc38\uc870( T& )\ub97c \uc0ac\uc6a9\ud574 \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c I.12: null\uc774 \ub418\uc5b4\uc120 \uc548\ub418\ub294 \ud3ec\uc778\ud130\ub294 not_null \ub85c \uc120\uc5b8\ud558\ub77c I.13: \ubc30\uc5f4\uc744 \ub2e8\uc77c \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c I.22: \uc804\uc5ed \uac1c\uccb4\uac00 \ubcf5\uc7a1\ud558\uac8c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c I.23: \ud568\uc218 \uc778\uc790 \uac1c\uc218\ub97c \ucd5c\uc18c\ub85c \uc720\uc9c0\ud558\ub77c I.24: \uac19\uc740 \ud0c0\uc785\uc758 \uad00\ub828\uc5c6\ub294 \ub9e4\uac1c \ubcc0\uc218\uac00 \ubd99\uc5b4\uc788\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c I.25: \ud074\ub798\uc2a4 \uacc4\uce35\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ucd94\uc0c1 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub77c I.26: \ud06c\ub85c\uc2a4 \ucef4\ud30c\uc77c\ub7ec ABI\ub97c \uc6d0\ud55c\ub2e4\uba74 C \uc2a4\ud0c0\uc77c \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c I.27: \ubcc0\ud654\uac00 \uc801\uc740(stable) ABI\ub97c \uc6d0\ud55c\ub2e4\uba74, Pimpl idiom \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\ub77c I.30: \uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294 \ucf54\ub4dc\ub294 \ucea1\uc290\ud654\ud558\ub77c \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9 : F: \ud568\uc218(Functions) C.concrete: \uc2e4\uc81c \ud0c0\uc785(Concrete types) C.hier: \ud074\ub798\uc2a4 \uacc4\uce35(Class hierarchies) C.over: \uc624\ubc84\ub85c\ub529\uacfc \uc624\ubc84\ub85c\ub529 \ub41c \uc5f0\uc0b0\uc790(Overloading and overloaded operators) C.con: \ucee8\ud14c\uc774\ub108\uc640 \ub2e4\ub978 \ub9ac\uc18c\uc2a4 \ud578\ub4e4(Containers and other resource handles) E: \uc624\ub958 \ucc98\ub9ac(Error handling) T: \ud15c\ud50c\ub9bf\uacfc \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d(Templates and generic programming)","title":"I: \uc778\ud130\ud398\uc774\uc2a4"},{"location":"Interfaces/#i1-explicit","text":"","title":"I.1: \uc778\ud130\ud398\uc774\uc2a4\ub294 \uba85\ud655\ud558\uac8c(explicit) \uc791\uc131\ud558\ub77c"},{"location":"Interfaces/#reason","text":"\uc815\ud655\uc131. \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc5b8\uae09\ub418\uc9c0 \uc54a\uc740 \uac00\uc815\uc740 \uac04\uacfc\ub418\uae30 \uc27d\uace0 \ud14c\uc2a4\ud2b8\ud558\uae30 \uc5b4\ub835\ub2e4.","title":"Reason"},{"location":"Interfaces/#example-bad","text":"\uc804\uc5ed (\ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc5d0 \uc788\ub294) \ubcc0\uc218\ub97c \ud1b5\ud574 \ud568\uc218\uc758 \ud589\ub3d9\uc744 \uc81c\uc5b4\ud558\ub294 \uac83\uc740 \uc554\uc2dc\uc801\uc774\uace0 \ud63c\ub780\uc2a4\ub7fd\ub2e4. \uc608\ub97c \ub4e4\uc5b4: int round ( double d ) { return ( round_up ) ? ceil ( d ) : d ; // \uc774\ub807\uac8c \ud558\uba74 \uc548\ub41c\ub2e4: \"\ubcf4\uc774\uc9c0 \uc54a\ub294\" \uc758\uc874\uc131\uc774 \uc788\ub2e4 } round(7.2) \ub97c \ub450 \ubc88 \ud638\ucd9c\ud574\uc11c \uc11c\ub85c \ub2e4\ub978 \uacb0\uacfc\uac00 \ubc1c\uc0dd\ud55c\ub2e4\uba74 \ud638\ucd9c\ud558\ub294 \uc785\uc7a5\uc5d0\uc11c\ub294 \ud568\uc218\uc758 \uc758\ubbf8\ub97c \uba85\ud655\ud558\uac8c \uc54c\uc9c0 \ubabb\ud560 \uac83\uc774\ub2e4.","title":"Example, bad"},{"location":"Interfaces/#exception","text":"\uc6b0\ub9ac\ub294 \ub54c\ub54c\ub85c \ud658\uacbd \ubcc0\uc218\ub97c \ud1b5\ud574 \uc5f0\uc0b0\uc744 \uc138\uc138\ud558\uac8c \uc81c\uc5b4\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc608\ucee8\ub300, \uc77c\ubc18 \ucd9c\ub825\uacfc \uc0c1\uc138\ud55c(verbose) \ucd9c\ub825\uc911 \ud558\ub098\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud558\uac70\ub098, \ub514\ubc84\uadf8 \ud639\uc740 \ucd5c\uc801\ud654\ub97c \uc120\ud0dd\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc774\ub7f0 \ube44-\uc9c0\uc5ed\uc801\uc778(non-local) \uc81c\uc5b4\ub97c \uc0ac\uc6a9\ud558\uba74 \uc7a0\uc7ac\uc801\uc73c\ub85c \ud63c\ub780\uc758 \uc18c\uc9c0\uac00 \uc788\uc9c0\ub9cc, \ub300\uc2e0 \uad6c\ud604 \uc138\ubd80\uc0ac\ud56d\uc744 \uc81c\uc5b4\ud560 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \uc81c\uc5b4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 \uc758\ubbf8\uad6c\uc870\uac00 \uace0\uc815\ub418\uc5c8\uc744 \uac83\uc774\ub2e4.","title":"Exception"},{"location":"Interfaces/#example-bad_1","text":"errno \uc640 \uac19\uc774 \uc804\uc5ed \ubcc0\uc218\ub97c \ud1b5\ud574 \uc624\ub958\ub97c \ubcf4\uace0\ud558\ub294 \uac83\uc740 \ubb34\uc2dc\ub418\uae30 \uc27d\ub2e4. \uc608\ub97c \ub4e4\uc5b4: // \uc774\ub807\uac8c \ud558\uba74 \uc548\ub41c\ub2e4: printf\uc758 \ubc18\ud658\uac12\uc744 \uac80\uc0ac\ud558\uc9c0 \uc54a\ub294\ub2e4 fprintf ( connection , \"logging: %d %d %d \\n \" , x , y , s ); \ub9cc\uc57d \uc5f0\uacb0(connection)\uc774 \ub2e4\uc6b4\ub418\uc5b4 \ub85c\uadf8\uac00 \ub9cc\ub4e4\uc5b4\uc9c0\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc5b4\ub5a8\uae4c?","title":"Example, bad"},{"location":"Interfaces/#alternative","text":"\uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ucf1c\ub77c. \uc608\uc678\ub294 \ubb34\uc2dc\ud560 \uc218 \uc5c6\ub2e4. Alternative Formulation : \uc804\uc5ed \ub610\ub294 \uc554\uc2dc\uc801 \uc0c1\ud0dc\uc758 \uac12\uc744 \ud1b5\ud574 \uc778\ud130\ud398\uc774\uc2a4\ub85c \uc815\ubcf4\uac00 \uc804\ub2ec\ub418\ub294 \uac83\uc744 \ud53c\ud558\ub77c. const \uac00 \uc544\ub2cc \uba64\ubc84 \ud568\uc218\ub294 \uac1c\uccb4\uc758 \uc0c1\ud0dc\ub97c \ud1b5\ud574 \ub2e4\ub978 \uba64\ubc84 \ud568\uc218\uc5d0\uac8c \uc815\ubcf4\ub97c \uc804\ub2ec\ud55c\ub2e4\ub294 \uc810\uc744 \ucc38\uace0\ud558\ub77c. Alternative Formulation : \uc778\ud130\ud398\uc774\uc2a4\ub294 \ud568\uc218\ub098 \ud568\uc218\uc758 \uc9d1\ud569\uc774\uc5b4\uc57c \ud55c\ub2e4. \ud568\uc218\ub294 \ud15c\ud50c\ub9bf \ud568\uc218\uc77c \uc218 \uc788\uace0 \ud568\uc218 \uc9d1\ud569\uc740 \ud074\ub798\uc2a4\ub098 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc77c \uc218 \uc788\ub2e4.","title":"Alternative"},{"location":"Interfaces/#enforcement","text":"(\uac04\ub2e8\ud568) \ud568\uc218\ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218 \uac12\uc5d0 \ub530\ub77c \uc81c\uc5b4 \ud750\ub984\uc744 \uacb0\uc815\ud574\uc11c\ub294 \uc548\ub41c\ub2e4 (\uac04\ub2e8\ud568) \ud568\uc218\ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc5d0\uc11c \uc120\uc5b8\ub41c \ubcc0\uc218\uc5d0 \uac12\uc744 \uc800\uc7a5\ud574\uc11c\ub294 \uc548\ub41c\ub2e4","title":"Enforcement"},{"location":"Interfaces/#i2-const","text":"","title":"I.2: const\uac00 \uc544\ub2cc \uc804\uc5ed\ubcc0\uc218\ub97c \uc9c0\uc591\ud558\ub77c"},{"location":"Interfaces/#reason_1","text":"const \uac00 \uc544\ub2cc \uc804\uc5ed \ubcc0\uc218\ub294 \uc758\uc874\uc131\uc744 \uc228\uae30\uace0 \uc608\uce21\ud558\uc9c0 \ubabb\ud55c \ubcc0\ud654\uc5d0 \uc758\uc874\ud558\uac8c \ub9cc\ub4e0\ub2e4.","title":"Reason"},{"location":"Interfaces/#example","text":"struct Data { // ... lots of stuff ... } data ; // non-const data void compute () // don't { // ... use `data` ... } void output () // don't { // ... use `data` ... } \ub610 \uc5b4\ub514\uc11c data \ub97c \uc218\uc815\ud558\ub294\uc9c0 \uc54c \uc218 \uc788\uaca0\ub294\uac00?","title":"Example"},{"location":"Interfaces/#note","text":"\uc804\uc5ed \uc0c1\uc218 \ub294 \uc720\uc6a9\ud558\ub2e4.","title":"Note"},{"location":"Interfaces/#note_1","text":"\uc804\uc5ed \ubcc0\uc218\uc5d0 \ubc18\ud558\ub294 \uaddc\uce59\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc758 \ubcc0\uc218\ub4e4\uc5d0\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ub41c\ub2e4.","title":"Note"},{"location":"Interfaces/#alternative_1","text":"\ubcf5\uc0ac\ub97c \ud53c\ud558\uae30 \uc704\ud574 \uc804\uc5ed \ubcc0\uc218(\uc880 \ub354 \uc77c\ubc18\ud654\ud558\uc790\uba74 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704\uc758 \ub370\uc774\ud130)\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 const \ub808\ud37c\ub7f0\uc2a4\ub85c \uac1c\uccb4\ub97c \uc804\ub2ec\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub77c. \ub2e4\ub978 \ud574\uacb0\ucc45\uc740 \uac1c\uccb4\uc758 \uc0c1\ud0dc\ub85c\uc11c\uc758 \ub370\uc774\ud130\uc640 \uba64\ubc84 \ud568\uc218\ub85c\uc11c\uc758 \uc5f0\uc0b0\uc744 \uc815\uc758\ud558\ub294 \uac83\uc774\ub2e4.","title":"Alternative"},{"location":"Interfaces/#warning","text":"\ub370\uc774\ud130 \uacbd\ud569(data race)\uc744 \uc870\uc2ec\ud558\ub77c. \ud558\ub098\uc758 \uc2a4\ub808\ub4dc\uac00 \uc2e4\ud589\ub418\ub294 \ub3d9\uc548 \ub2e4\ub978 \uc2a4\ub808\ub4dc\uac00 \uc804\uc5ed \ub370\uc774\ud130(\ub610\ub294 \ub808\ud37c\ub7f0\uc2a4\ub85c \uc804\ub2ec\ub41c \ub370\uc774\ud130)\uc5d0 \uc811\uadfc\ud558\ub824\uace0 \ud55c\ub2e4\uba74, \ub370\uc774\ud130 \uacbd\ud569\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \ubcc0\uacbd \uac00\ub2a5\ud55c(mutable) \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub294 \uc5b8\uc81c\ub098 \ub370\uc774\ud130 \uacbd\ud569\uc758 \uac00\ub2a5\uc131\uc774 \uc788\ub2e4.","title":"Warning"},{"location":"Interfaces/#note_2","text":"\ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c\ub294 \uacbd\ud569 \uc870\uac74(race condition)\uc774 \uc0dd\uae30\uc9c0 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Interfaces/#references","text":"\ud568\uc218 \ud638\ucd9c\uc5d0 \ub300\ud55c \uaddc\uce59","title":"References"},{"location":"Interfaces/#note_3","text":"\uc774 \uaddc\uce59\uc740 \"\uc9c0\uc591\ud558\ub77c\"\ub294 \uac83\uc774\uc9c0, \"\uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c\"\uac00 \uc544\ub2c8\ub2e4. \ubb3c\ub860 (\ub4dc\ubb3c\uac8c) cin , cout , \uadf8\ub9ac\uace0 cerr \uac19\uc740 \uc608\uc678\uac00 \uc788\uc744 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Interfaces/#enforcement_1","text":"(\uac04\ub2e8\ud568) \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \ubc94\uc704 \ub0b4\uc5d0 \uc815\uc758\ub41c const \uac00 \uc544\ub2cc \ubcc0\uc218\uc5d0 \ub300\ud574\uc11c \ubaa8\ub450 \ubcf4\uace0\ud55c\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i3","text":"","title":"I.3: \uc2f1\uae00\ud1a4 \ud328\ud134\uc744 \uc9c0\uc591\ud558\ub77c"},{"location":"Interfaces/#reason_2","text":"\uc2f1\uae00\ud1a4\uc740 \uae30\ubcf8\uc801\uc73c\ub85c \ubcf5\uc7a1\ud55c \uc804\uc5ed \uac1c\uccb4\uc774\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_1","text":"class Singleton { // ... \uc624\uc9c1 \ud558\ub098\ub9cc \uc0dd\uc131\ub418\uc5c8\uace0, \uc801\uc808\ud558\uac8c \ucd08\uae30\ud654 \ub418\uc5c8\ub294\uc9c0 \ub4f1\uc744 \ud655\uc2e0\ud558\uae30 \uc704\ud574\uc11c // \ub9ce\uc740 \uac83\ub4e4\uc774 \ud544\uc694\ud558\ub2e4. }; \uc2f1\uae00\ud1a4 \uc544\uc774\ub514\uc5b4\uc5d0\ub294 \ub9ce\uc740 \ubcc0\ud615\uc774 \uc788\ub2e4. \uc774\ub294 \ubb38\uc81c\uc758 \uc77c\ubd80\uc77c \ubfd0\uc774\ub2e4.","title":"Example"},{"location":"Interfaces/#note_4","text":"\uc804\uc5ed \uac1c\uccb4\uac00 \ubcc0\uacbd\ub418\uc9c0 \uc54a\uac8c \ud558\ub824\uba74, const \ub098 constexpr \ub85c \uc120\uc5b8\ud558\ub77c.","title":"Note"},{"location":"Interfaces/#exception_1","text":"\uc81c\uc77c \ub2e8\uc21c\ud55c \"\uc2f1\uae00\ud1a4\"(\uc2f1\uae00\ud1a4\uc73c\ub85c \uc0dd\uac01\ub418\uc9c0 \uc54a\uc744 \uc815\ub3c4\ub85c \uac04\ub2e8\ud55c)\uc744 \uc0ac\uc6a9\ud574 \ucc98\uc74c \uc0ac\uc6a9\uc2dc \ucd08\uae30\ud654\ub97c \ud560 \uc218 \uc788\ub2e4. X & myX () { static X my_x { 3 }; return my_x ; } \uc5ed\uc8fc: Scott Meyers Singleton\uc73c\ub85c\ub3c4 \uc54c\ub824\uc838 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc740 \ucd08\uae30\ud654 \uc21c\uc11c\uc640 \uad00\ub828\ub41c \ubb38\uc81c\uc5d0 \ub300\ud574 \uac00\uc7a5 \ud6a8\uacfc\uc801\uc778 \ud574\uacb0\ucc45 \uc911 \ud558\ub098\ub2e4. \ub2e4\uc911 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c, \uc815\uc801 \uac1c\uccb4\uc758 \ucd08\uae30\ud654\ub294 \uacbd\ud569 \uc870\uac74\uc744 \uc720\ubc1c\ud558\uc9c0 \uc54a\ub294\ub2e4. (\ub2e8, \uc0dd\uc131\uc790 \ub0b4\uc5d0\uc11c \uacf5\uc720 \uac1c\uccb4\uc5d0 \ubd80\uc8fc\uc758\ud558\uac8c \uc811\uadfc\ud558\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4.) \uc9c0\uc5ed static \ubcc0\uc218\uc758 \ucd08\uae30\ud654\ub294 \uacbd\uc7c1 \uc0c1\ud0dc\uc758 \uac00\ub2a5\uc131\uc774 \uc5c6\ub2e4. \ud558\uc9c0\ub9cc, X \uc758 \uc18c\uba78\uc774 \ub3d9\uae30\ud654\uac00 \ud544\uc694\ud55c \uc5f0\uc0b0\uc744 \ud3ec\ud568\ud55c\ub2e4\uba74 \uc870\uae08 \ub354 \ubcf5\uc7a1\ud55c \ud574\uacb0\ucc45\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4: X & myX () { static auto p = new X { 3 }; return * p ; // potential leak } \uc774 \uacbd\uc6b0 \ub204\uad70\uac00 \ud574\ub2f9 \uac1c\uccb4\ub97c \uc2a4\ub808\ub4dc \uc548\uc804\ud55c \ubc29\ubc95\uc73c\ub85c delete \ud574\uc57c \ud55c\ub2e4. \uc774\ub294 \uc624\ub958\ub97c \ub9cc\ub4e4\uae30 \uc27d\uae30 \ub54c\ubb38\uc5d0, \uc774 \ubc29\ubc95\uc740 \uc544\ub798\uc640 \uac19\uc740 \uc870\uac74\uc774 \uc544\ub2c8\uba74 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4. myX \uac00 \ub2e4\uc911 \uc2a4\ub808\ub4dc \ud658\uacbd\uc5d0\uc11c \uc2e4\ud589\ub418\ub294 \ucf54\ub4dc\uc774\uba70, X \uac1c\uccb4\uac00 \uc18c\uba78\ub418\uc5b4\uc57c\ub9cc \ud558\uba70(\uac00\ub839, \uc5b4\ub5a4 \uc790\uc6d0\uc744 \ud574\uc81c\ud558\uae30 \ub54c\ubb38\uc5d0), X \uc758 \uc18c\uba78\uc790 \ucf54\ub4dc\uac00 \ub3d9\uae30\ud654 \ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4. \ud558\ub098\uc758 \uac1c\uccb4\ub9cc \uc0dd\uc131\ud574\uc57c \ud558\ub294 \ud074\ub798\uc2a4\ub85c \uc2f1\uae00\ud1a4\uc744 \uc815\uc758\ud55c\ub2e4\uba74 myX \uc640 \uac19\uc740 \ud568\uc218\ub294 \uc2f1\uae00\ud1a4\uc774 \uc544\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774 \uc720\uc6a9\ud55c \ud14c\ud06c\ub2c9\uc740 \uc2f1\uae00\ud1a4\uc774 \uc544\ub2cc \uaddc\uce59\uc5d0 \ub300\ud55c \uc608\uc678\ub294 \uc544\ub2c8\ub2e4.","title":"Exception"},{"location":"Interfaces/#enforcement_2","text":"\uc77c\ubc18\uc801\uc73c\ub85c \ub9e4\uc6b0 \ud798\ub4e4\ub2e4. singleton \uc744 \ud3ec\ud568\ud558\ub294 \uc774\ub984\uc744 \uac00\uc9c4 \ud074\ub798\uc2a4\ub97c \ucc3e\ub294\ub2e4 \uac1c\uccb4\ub97c \uc138\uac70\ub098 \uc0dd\uc131\uc790\ub97c \uac80\uc0ac\ud574 \ub2e8\uc77c \uac1c\uccb4\ub9cc \ub9cc\ub4e4\uc5b4\uc9c4 \ud074\ub798\uc2a4\ub97c \ucc3e\ub294\ub2e4 \ub9cc\uc57d \ud074\ub798\uc2a4 X \uac00 public static \ud568\uc218\ub97c \uac00\uc9c4\ub2e4\uba74, \uadf8\ub9ac\uace0 \ud574\ub2f9 \ud568\uc218 \uc548\uc5d0\uc11c X \ud0c0\uc785\uc758 static \ubcc0\uc218\uc758 \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \ubc18\ud658\ud55c\ub2e4\uba74, \uae08\uc9c0\ud558\ub77c.","title":"Enforcement"},{"location":"Interfaces/#i4","text":"","title":"I.4: \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc744 \uc815\ud655\ud558\uace0 \uc5c4\uaca9\ud558\uac8c \uc900\uc218\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Interfaces/#reason_3","text":"\ud0c0\uc785\uc740 \uac00\uc7a5 \ub2e8\uc21c\ud558\uc9c0\ub9cc \ucd5c\uace0\uc758 \ubb38\uc11c\uc774\uae30\ub3c4 \ud558\ub2e4. \uc798 \uc815\uc758\ub41c \uc758\ubbf8\ub97c \uac16\uace0 \uc788\uace0, \ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc0ac\uac00 \ubcf4\uc7a5\ub41c\ub2e4. \ub610\ud55c \uc815\ud655\ud558\uac8c \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub294 \ub354 \uc798 \ucd5c\uc801\ud654\ub41c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example-dont","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void pass ( void * data ); // void* \uac00 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0, \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub418\ub294\uc9c0 \uc54c \uc218 \uc5c6\ub2e4(suspicious) \uc774\uc81c \ud53c\ud638\ucd9c\uc790\uc5d0\uc11c \uc62c\ubc14\ub978 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 data \ud3ec\uc778\ud130\ub97c \uce90\uc2a4\ud305\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\uace0, \uad6c\uc9c8\uad6c\uc9c8\ud558\ub2e4. \ud2b9\ud788 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c void* \ub97c \ud53c\ud558\ub77c. \ub300\uc2e0 \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\ub098 variant \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\ub77c.","title":"Example, don't"},{"location":"Interfaces/#alternative_2","text":"\ub54c\ub54c\ub85c \ud15c\ud50c\ub9bf \ub9e4\uac1c \ubcc0\uc218\ub294 void* \ub97c \uc81c\uac70\ud558\uace0 T* \ub098 T& \ub85c \ubcc0\ud658\ud560 \uc218 \uc788\ub2e4. \uc81c\ub124\ub9ad \ucf54\ub4dc\uc5d0\uc11c \uc774\ub807\uac8c \uc0ac\uc6a9\ub418\ub294 T \ub4e4\uc740 \uc77c\ubc18\uc801\uc778 \ud639\uc740 \ucee8\uc149(Concept)\ub85c \uc81c\ud55c\ub41c \ud15c\ud50c\ub9bf \uc778\uc790\uc77c \uc218 \uc788\ub2e4.","title":"Alternative"},{"location":"Interfaces/#example-bad_2","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void draw_rect ( int , int , int , int ); // great opportunities for mistakes draw_rect ( p . x , p . y , 10 , 20 ); // what does 10, 20 mean? int \ub294 \uc784\uc758 \ud615\ud0dc\uc758 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\uc5b4\uc11c, int \ub4e4\uc774 \uac01\uac01 \uc5b4\ub5a4 \uc758\ubbf8\ub97c \uac16\ub294\uc9c0\ub97c \uc720\ucd94\ud574\uc57c \ud55c\ub2e4. \uc544\ub9c8\ub3c4 \ucc98\uc74c \ub450 int \ub294 x , y \uc88c\ud45c\uc77c \uac83 \uac19\uc9c0\ub9cc, \ub098\uba38\uc9c0 \ub450 int \ub294 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud560\uae4c? \uc8fc\uc11d\uc774\ub098 \ub9e4\uac1c \ubcc0\uc218 \uc774\ub984\uc774 \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\uc9c0\ub9cc, \uba85\ud655\ud788 \ud560 \uc218 \uc788\ub2e4: void draw_rectangle ( Point top_left , Point bottom_right ); void draw_rectangle ( Point top_left , Size height_width ); draw_rectangle ( p , Point { 10 , 20 }); // two corners draw_rectangle ( p , Size { 10 , 20 }); // one corner and a (height, width) pair \ubd84\uba85\ud788 \uc815\uc801 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc744 \ud1b5\ud574 \ubaa8\ub4e0 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218\ub294 \uc5c6\ub2e4. (\uc608\ub97c \ub4e4\uc5b4, \uccab\ubc88\uc9f8 \uc778\uc790\uac00 \uc67c\ucabd \uc0c1\ub2e8\uc5d0 \uc788\ub294 \uc810\uc774\ub77c\ub294 \uc0ac\uc2e4\uc740 \uc774\ub984\uc774\ub098 \uc8fc\uc11d \ub4f1\uc744 \ud1b5\ud574 \ud3b8\uc758\uc0c1 \uc815\ud574\uc838 \uc788\uc744 \ubfd0\uc774\ub2e4.)","title":"Example, bad"},{"location":"Interfaces/#example-bad_3","text":"\ub2e4\uc74c \uc608\uc81c\uc5d0\uc11c \uc778\ud130\ud398\uc774\uc2a4\ub9cc \ubcf4\uace0\ub294 time_to_blink \uc774 \ubb34\uc5c7\uc744 \uc758\ubbf8\ud558\ub294\uc9c0 \uc798 \ubaa8\ub974\uaca0\ub2e4. \ucd08\ub97c \uc758\ubbf8\ud560\uae4c? \ubc00\ub9ac\ucd08\ub97c \uc758\ubbf8\ud560\uae4c? void blink_led ( int time_to_blink ) // \ub098\uc05c \ucf54\ub4dc -- \uc2dc\uac04\uc758 \ub2e8\uc704\ub97c \uc54c \uc218 \uc5c6\ub2e4 { // ... // time_to_blink\ub85c \ubb34\uc5b8\uac00 \ud55c\ub2e4 // ... } void use () { blink_led ( 2 ); }","title":"Example, bad"},{"location":"Interfaces/#example-good","text":"C++11\uc5d0 \ub3c4\uc785\ub41c std::chrono::duration \ud0c0\uc785\uc740 \uc9c0\uc18d \uc2dc\uac04\uc758 \ub2e8\uc704\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ud45c\ud604\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. void blink_led ( milliseconds time_to_blink ) // \uc88b\uc740 \ucf54\ub4dc -- \ub2e8\uc704\ub97c \uba85\ud655\ud788 \uc54c \uc218 \uc788\ub2e4 { // ... // time_to_blink\ub85c \ubb34\uc5b8\uac00 \ud55c\ub2e4 // ... } void use () { blink_led ( 1500 ms ); } \uc5b4\ub5a4 \uc885\ub958\uc758 \uc9c0\uc18d \uc2dc\uac04\uc758 \ub2e8\uc704\ub3c4 \ud5c8\uc6a9\ud558\ub3c4\ub85d \ud568\uc218\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud560 \uc218\ub3c4 \uc788\ub2e4. template < class rep , class period > void blink_led ( duration < rep , period > time_to_blink ) // \uc88b\uc740 \ucf54\ub4dc -- \uc5b4\ub5a4 \ub2e8\uc704\ub85c\ub3c4 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 { // millisecond\uac00 \uac00\uc7a5 \uc815\ubc00\ud55c \ub2e8\uc704\ub77c\uace0 \uac00\uc815\ud55c\ub2e4 auto milliseconds_to_blink = duration_cast < milliseconds > ( time_to_blink ); // ... // milliseconds_to_blink\ub85c \ubb34\uc5b8\uac00 \ud55c\ub2e4 // ... } void use () { blink_led ( 2 s ); blink_led ( 1500 ms ); }","title":"Example, good"},{"location":"Interfaces/#enforcement_3","text":"(\uac04\ub2e8\ud568) void* \ub97c \ub9e4\uac1c \ubcc0\uc218\ub098 \ub9ac\ud134 \ud0c0\uc785\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ubcf4\uace0\ud55c\ub2e4 (\uac04\ub2e8\ud568) \ud558\ub098 \uc774\uc0c1\uc758 bool \ub9e4\uac1c \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ubcf4\uace0\ud55c\ub2e4 (\uc798\ud558\uae30 \uc5b4\ub824\uc6c0) \ub2e4\uc218\uc758 \ub0b4\uc7a5 \ud0c0\uc785(primitive type) \uc778\uc790\ub97c \uac16\ub294 \ud568\uc218\ub97c \ucc3e\ub294\ub2e4","title":"Enforcement"},{"location":"Interfaces/#i5","text":"","title":"I.5: (\ud558\ub098\ub77c\ub3c4 \uc788\ub2e4\uba74) \uc0ac\uc804 \uc870\uac74\uc744 \uae30\uc220\ud558\ub77c"},{"location":"Interfaces/#reason_4","text":"\uc804\ub2ec \uc778\uc790(argument)\ub294 \ud53c\ud638\ucd9c\uc790\uc5d0\uc11c \uc801\uc808\ud55c \uc0ac\uc6a9\uc744 \uc81c\ud55c\ud560 \uc218 \uc788\ub294 \uc758\ubbf8\ub97c \uac16\ub294\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_2","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: double sqrt ( double x ); \uc5ec\uae30\uc11c x \ub294 \ubc18\ub4dc\uc2dc \uc74c\uc218\uac00 \uc544\ub2c8\uc5b4\uc57c \ud55c\ub2e4. \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc73c\ub85c\ub294 \uc774\ub97c (\uc788\ub294 \uadf8\ub300\ub85c \uc27d\uac8c) \ud45c\ud604\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0, \ub2e4\ub978 \uc218\ub2e8\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4: double sqrt ( double x ); // x must be nonnegative \uc77c\ubd80 \uc0ac\uc804 \uc870\uac74\uc740 \ub2e8\uc815\ubb38(assertion)\uc73c\ub85c \ud45c\ud604\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4: double sqrt ( double x ) { Expects ( x >= 0 ); /* ... */ } \uc774\uc0c1\uc801\uc73c\ub85c Expects(x >= 0) \uc870\uac74\uc774 sqrt() \uc758 \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uc77c\ubd80\ubd84\uc774 \ub418\ub294\uac8c \uac00\uc7a5 \uc88b\uc9c0\ub9cc \uadf8\ub807\uac8c \ud558\uae30\ub294 \uc27d\uc9c0 \uc54a\ub2e4. \ub530\ub77c\uc11c \uc9c0\uae08\uc740 \ud568\uc218 \uc815\uc758\ubd80(\ud568\uc218 \ubcf8\ubb38)\uc5d0 \uc704\uce58\uc2dc\ud0a8\ub2e4.","title":"Example"},{"location":"Interfaces/#references_1","text":"Expects() \ub294 GSL \uc5d0 \uae30\uc220\ub418\uc5b4 \uc788\ub2e4.","title":"References"},{"location":"Interfaces/#note_5","text":"Excepts(p != nullptr); \ucc98\ub7fc \uc694\uad6c \uc0ac\ud56d\uc744 \uc815\ud655\ud788(formal) \uba85\uc138\ud558\ub294 \uac83\uc744 \uc120\ud638\ud558\ub77c. \ubd88\uac00\ub2a5\ud558\ub2e4\uba74, // the sequence [p:q) is ordered using < \uc640 \uac19\uc774 \uc8fc\uc11d\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"Interfaces/#note_6","text":"\ub300\ubd80\ubd84\uc758 \uba64\ubc84 \ud568\uc218\ub294 \ud074\ub798\uc2a4\uc758 \ubd88\ubcc0 \uc870\uac74(invariant) \uc911 \uc77c\ubd80\uc5d0 \ud574\ub2f9\ud558\ub294 \uc120\ud589 \uc870\uac74\uc744 \uac16\uace0 \uc788\ub2e4. \ud574\ub2f9 \ubd88\ubcc0 \uc870\uac74\uc740 \uc0dd\uc131\uc790\uc5d0\uc11c \uad6c\uc131\ub418\ub294\ub370 \ud074\ub798\uc2a4 \uc678\ubd80\ub85c\ubd80\ud130 \ud638\ucd9c\ub418\ub294 \ubaa8\ub4e0 \uba64\ubc84 \ud568\uc218\ub97c \ud1b5\ud574 \uc7ac\uad6c\uc131(reestablish)\ub418\uc5b4\uc57c \ud55c\ub2e4. \uc774\ub97c \uac01 \uba64\ubc84 \ud568\uc218\ub9c8\ub2e4 \uc5b8\uae09\ud560 \ud544\uc694\ub294 \uc5c6\ub2e4.","title":"Note"},{"location":"Interfaces/#enforcement_4","text":"(\uc801\uc6a9 \ubd88\uac00\ub2a5)","title":"Enforcement"},{"location":"Interfaces/#see-also","text":"\ud3ec\uc778\ud130 \uc804\ub2ec\uc5d0 \ub300\ud55c \uaddc\uce59. ???","title":"See Also"},{"location":"Interfaces/#i6-pre-condition-expects","text":"","title":"I.6: \uc0ac\uc804 \uc870\uac74(pre-condition)\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 Expects()\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Interfaces/#reason_5","text":"\uc0ac\uc804 \uc870\uac74\uc784\uc744 \uba85\ud655\ud558\uac8c \ud45c\uc2dc\ud558\uace0 \ud234 \uc0ac\uc6a9\uc744 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_3","text":"int area ( int height , int width ) { Expects ( height > 0 && width > 0 ); // good if ( height <= 0 || width <= 0 ) my_error (); // obscure // ... }","title":"Example"},{"location":"Interfaces/#note_7","text":"\uc0ac\uc804 \uc870\uac74\uc740 if \ubb38, assert() \ubb38, \uc8fc\uc11d\ubb38 \ub4f1\uc73c\ub85c \uae30\uc220\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub7f0 \uad6c\ubb38\uc740 \uc77c\ubc18 \ucf54\ub4dc\uc640 \uad6c\ubd84, \uac31\uc2e0\ud558\uac70\ub098 \ud234\ub85c \uc870\uc791\ud558\uae30 \uc5b4\ub835\uace0 \uc798\ubabb\ub41c \uc758\ubbf8\ub97c \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4. (\ub514\ubc84\uadf8 \ubaa8\ub4dc\uc77c \ub54c\ub294 \uc911\ub2e8\uc2dc\ud0a4\uace0, \ub9b4\ub9ac\uc988 \ubaa8\ub4dc\uc77c\ub54c\ub294 \uac80\uc0ac\ud558\uace0 \uc2f6\uc740\uac00?)","title":"Note"},{"location":"Interfaces/#note_8","text":"\uc0ac\uc804 \uc870\uac74\uc740 \uad6c\ud604 \ubd80\ubd84\ubcf4\ub2e4\ub294 \uc778\ud130\ud398\uc774\uc2a4 \ubd80\ubd84\uc5d0 \ud3ec\ud568\uc2dc\ucf1c\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc544\uc9c1\uc740 \uadf8\ub807\uac8c \ud560 \uc218 \uc788\ub294 \uc5b8\uc5b4 \uae30\ub2a5\uc774 \uc5c6\ub2e4. \uc5b8\uc5b4\uc5d0\uc11c \uc774\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4\uba74 (\ucc38\uace0: contract \uc81c\uc548\uc11c ) \ud45c\uc900\uc5d0 \ub9de\ub294 \uc0ac\uc804\uc870\uac74, \uc0ac\ud6c4\uc870\uac74, \ub2e8\uc815\ubb38\uc744 \uc801\uc6a9\ud558\uac8c \ub420 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Interfaces/#note_9","text":"Expects() \uc740 \uc54c\uace0\ub9ac\uc998 \uc911\uac04\uc5d0 \uc870\uac74\uc744 \uac80\uc0ac\ud558\ub294\ub370 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Interfaces/#note_10","text":"unsigned \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uac12\uc774 \uc74c\uc218\uac00 \uc544\ub2c8\ub77c\uace0 \ubcf4\uc7a5\ud558\ub294 \ubb38\uc81c\ub97c \ud68c\ud53c\ud558\ub294 \uc88b\uc740 \ubc29\ubc95\uc774 \uc544\ub2c8\ub2e4.","title":"Note"},{"location":"Interfaces/#enforcement_5","text":"(\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc0ac\uc804 \uc870\uac74\uc774 \ub2e8\uc815\ub420 \uc218 \uc788\ub294 \ub2e4\uc591\ud55c \ubc29\ubc95\uc744 \ucc3e\ub294 \uac83\uc740 \uc2e4\ud604 \uac00\ub2a5\ud558\uc9c0 \uc54a\ub2e4. \uc27d\uac8c \uc2dd\ubcc4\ud560 \uc218 \uc788\ub294 \uac83\ub4e4\uc5d0 \ub300\ud574 \uacbd\uace0( assert() )\ub97c \ud560 \uc218 \uc788\ub294 \uc5b8\uc5b4 \uae30\ub2a5\uc774 \uc5c6\ub2e4\uba74 \uc758\uc2ec\uc758 \uc5ec\uc9c0\uac00 \uc0dd\uae38 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i7-post-condition","text":"","title":"I.7: \uc0ac\ud6c4\uc870\uac74(post-condition)\uc744 \uae30\uc220\ud558\ub77c"},{"location":"Interfaces/#reason_6","text":"\uacb0\uacfc\uc5d0 \ub300\ud574 \uc798\ubabb \uc774\ud574\ud558\uace0 \uc788\ub294 \ubd80\ubd84\uacfc \uc798\ubabb\ub41c \uad6c\ud604\uc744 \ucc3e\uc544\ub0b4\uae30 \uc704\ud574\uc11c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example-bad_4","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: int area ( int height , int width ) { return height * width ; } // bad \uc5ec\uae30\uc11c \ubd80\uc8fc\uc758\ud558\uac8c \ub192\uc774\uc640 \ud3ed\uc774 \uc591\uc218\uc5ec\uc57c \ud55c\ub2e4\ub294 \uc0ac\uc804 \uc870\uac74 \uba85\uc138\ub97c \ube60\ub728\ub838\ub2e4. \uc5ed\uc2dc \ub113\uc774\ub97c \uad6c\ud558\ub294 \uc54c\uace0\ub9ac\uc998( height * width )\uc774 \uc815\uc218\uc758 \ucd5c\ub313\uac12\ubcf4\ub2e4 \ud074 \uc218 \uc788\ub2e4\ub294 \uc0ac\ud6c4 \uc870\uac74 \uba85\uc138\ub97c \ube60\ub728\ub838\ub2e4. \uc624\ubc84\ud50c\ub85c\uc6b0\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. \ub2e4\uc74c \uc0ac\uc6a9\uc744 \uace0\ub824\ud574 \ubcf4\uc790: int area ( int height , int width ) { auto res = height * width ; Ensures ( res > 0 ); return res ; }","title":"Example, bad"},{"location":"Interfaces/#example-bad_5","text":"\uc545\uba85 \ub192\uc740 \ubcf4\uc548 \ubc84\uadf8\ub97c \uace0\ub824\ud574 \ubcf4\uc790: void f () // \ubb38\uc81c\uac00 \uc788\ub2e4 { char buffer [ MAX ]; // ... memset ( buffer , 0 , sizeof ( buffer )); } \ubc84\ud37c\uac00 \ucd08\uae30\ud654\ub418\uc5b4\uc57c \ud558\uace0 \ucd5c\uc801\ud654\ud558\uba74\uc11c \uc911\ubcf5\ub418\ub294 memset() \uc758 \ud638\ucd9c\uc744 \uc81c\uac70\ud588\uc74c\uc744 \uc124\uba85\ud558\ub294 \uc0ac\ud6c4 \uc870\uac74\uc774 \uc5c6\ub2e4. void f () // \uc880 \ub354 \ub0ab\ub2e4 { char buffer [ MAX ]; // ... memset ( buffer , 0 , sizeof ( buffer )); Ensures ( buffer [ 0 ] == 0 ); }","title":"Example, bad"},{"location":"Interfaces/#note_11","text":"\uc0ac\ud6c4 \uc870\uac74\uc740 \uc885\uc885 \ud568\uc218\uc758 \ubaa9\uc801\uc744 \uae30\uc220\ud558\ub294 \uc8fc\uc11d\ubb38\uc5d0 \ube44\uacf5\uc2dd\uc801\uc73c\ub85c \uba85\uc2dc\ub418\uc5b4 \uc788\ub2e4. Ensures() \ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c\uc11c \ub354 \uc2dc\uc2a4\ud15c\uc801\uc73c\ub85c \uac80\uc0ac\ud558\ub294 \ubaa8\uc2b5\uc744 \ubcf4\uc5ec\uc904 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Interfaces/#note_12","text":"\uc0ac\ud6c4 \uc870\uac74\uc740 \uc0ac\uc6a9\ub418\ub294 \uc790\ub8cc \uad6c\uc870\uc758 \uc0c1\ud0dc\ucc98\ub7fc \ubc18\ud658\ub41c \uacb0\uacfc\uc5d0 \uac04\uc811\uc801\uc73c\ub85c \uc601\ud5a5\uc744 \ubbf8\uce58\ub294 \ubb34\uc5b8\uac00\uc5d0 \uc5f0\uad00\ub418\uc5b4 \uc788\uc744 \ub54c \ud2b9\ud788 \uc911\uc694\ud558\ub2e4.","title":"Note"},{"location":"Interfaces/#example_4","text":"\uacbd\ud569 \uc870\uac74\uc744 \ud53c\ud560 \ubaa9\uc801\uc73c\ub85c mutex \ub97c \uc0ac\uc6a9\ud574 Record \ub97c \uc870\uc791\ud558\ub294 \ud568\uc218\ub97c \uace0\ub824\ud574 \ubcf4\uc790: mutex m ; void manipulate ( Record & r ) // don't { m . lock (); // ... no m.unlock() ... } \uc5ec\uae30\uc11c mutex \ub97c \ud574\uc81c\ud574\uc57c \ud55c\ub2e4\ub294 \uc5b8\uae09\uc744 \"\uc78a\uc5b4\"\ubc84\ub838\ub294\ub370, mutex \ud574\uc81c\ub97c \uc5b8\uae09\ud558\uc9c0 \uc54a\uc740 \uac83\uc774 \ub2e8\uc21c\ud788 \ubc84\uadf8\uc778\uc9c0 \uc758\ub3c4\ud55c \uac83\uc778\uc9c0 \uc54c \uc218\uac00 \uc5c6\ub2e4. \uc0ac\ud6c4 \uc870\uac74\uc744 \uae30\uc220\ud568\uc73c\ub85c\uc11c \uc5b8\uae09\uc744 \uba85\ud655\ud558\uac8c \ud560 \uc218 \uc788\ub2e4: void manipulate ( Record & r ) // \uc0ac\ud6c4\uc870\uac74: m \uc740 \ud568\uc218\uac00 \uc885\ub8cc\ub41c \ud6c4 lock\uc774 \ud574\uc81c\ub418\uc5b4\uc788\ub2e4. { m . lock (); // ... no m.unlock() ... } \uc774\uc81c \ubc84\uadf8\uac00 \ubd84\uba85\ud558\uac8c \ubcf4\uc778\ub2e4. (\ub2e8, \uc8fc\uc11d\uc744 \uc77d\ub294 \uc0ac\ub78c\uc5d0\uac8c\ub9cc \ubcf4\uc778\ub2e4.) \ub354 \ub098\uc740 \ubc29\ubc95\uc740 RAII \ub97c \uc0ac\uc6a9\ud574 \uc0ac\ud6c4 \uc870\uac74(\"\uc7a0\uae08\uc744 \ud574\uc81c\ud574\uc57c \ud568\")\uc774 \ucf54\ub4dc\uc5d0 \uc801\uc6a9\ub418\ub3c4\ub85d \ud558\ub294 \uac83\uc774\ub2e4: void manipulate ( Record & r ) // best { lock_guard < mutex > _ { m }; // ... }","title":"Example"},{"location":"Interfaces/#note_13","text":"\uc774\uc0c1\uc801\uc73c\ub85c, \uc0ac\ud6c4 \uc870\uac74\uc740 \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc27d\uac8c \ubcfc \uc218 \uc788\ub3c4\ub85d \uc778\ud130\ud398\uc774\uc2a4/\uc120\uc5b8\ubd80\uc5d0 \uae30\uc220\ud574\uc57c \ud55c\ub2e4. \uc0ac\uc6a9\uc790\ub4e4\uc5d0\uac8c \uc5b8\uae09\ub418\uc5b4\uc57c \ud558\ub294 \uc0ac\ud6c4 \uc870\uac74\ub9cc \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \uae30\uc220\ud574\uc57c \ud55c\ub2e4. \ub0b4\ubd80 \uc0c1\ud0dc\uc5d0 \ub300\ud55c \uc0ac\ud6c4 \uc870\uac74\uc740 \uc815\uc758/\uad6c\ud604\ubd80\uc5d0\ub9cc \uae30\uc220\ud55c\ub2e4.","title":"Note"},{"location":"Interfaces/#enforcement_6","text":"(\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc774\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \uac80\uc0ac\ud560 \uc218 \uc5c6\ub294 \uc774\ub860\uc801\uc778 \uaddc\uce59(philosophical guide)\uc774\ub2e4. \ud2b9\uc815 \ubd84\uc57c\uc5d0 \ub9de\ucdb0\uc11c \uac80\uc0ac\ud558\ub294 (\uc7a0\uae08 \ud574\uc81c \uac80\uc0ac\ucc98\ub7fc) \ub3c4\uad6c\ub4e4\uc740 \uc774\ubbf8 \uc5ec\ub7ec \ub3c4\uad6c\uc5d0 \uc874\uc7ac\ud55c\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i8-ensures","text":"","title":"I.8: \uc0ac\ud6c4 \uc870\uac74\uc744 \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74 Ensures()\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Interfaces/#reason_7","text":"\uc0ac\ud6c4 \uc870\uac74\uc774\ub77c\ub294 \uac83\uc744 \ubd84\uba85\ud788 \ud558\uae30 \uc704\ud574, \uadf8\ub9ac\uace0 \ubd84\uc11d \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_5","text":"void f () { char buffer [ MAX ]; // ... memset ( buffer , 0 , MAX ); Ensures ( buffer [ 0 ] == 0 ); }","title":"Example"},{"location":"Interfaces/#note_14","text":"\uc0ac\ud6c4 \uc870\uac74\uc740 \uc8fc\uc11d\ubb38, if \ubb38, assert() \ubb38 \ub4f1 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \uae30\uc220\ud560 \uc218 \uc788\ub2e4. \uc774\ub294 \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\uc640 \uad6c\ubd84\uc744 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uace0, \uac31\uc2e0\ud558\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uace0, \ud234\ub85c \uc870\uc791\ud558\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4e4\uba70 \uc798\ubabb\ub41c \uc758\ubbf8\ub97c \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Interfaces/#alternative_3","text":"\uc774 \ub9ac\uc18c\uc2a4\ub294 \ubc18\ub4dc\uc2dc \ud574\uc81c\ub418\uc5b4\uc57c \ud55c\ub2e4\" \ud615\ud0dc\uc758 \uc0ac\ud6c4 \uc870\uac74\uc740 RAII \ub97c \ud1b5\ud574 \uac00\uc7a5 \uc798 \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4.","title":"Alternative"},{"location":"Interfaces/#note_15","text":"\uc774\uc0c1\uc801\uc73c\ub85c Ensures \ub294 \uc778\ud130\ud398\uc774\uc2a4\uc758 \uc77c\ubd80\uac00 \ub418\uc5b4\uc57c \ud558\uc9c0\ub9cc, \uc27d\uac8c \ud560 \uc218 \uc788\ub294 \uc791\uc5c5\uc774 \uc544\ub2c8\ub2e4. \ud604\uc7ac\ub85c\uc11c\ub294 \uc815\uc758 \ubd80\ubd84(\ud568\uc218 \ubcf8\ubb38)\uc5d0 \uc704\uce58\uc2dc\ud0a8\ub2e4. \uc5b8\uc5b4\uc5d0\uc11c \uc774\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\uac8c \ub41c\ub2e4\uba74 (\ucc38\uace0: contract \uc81c\uc548\uc11c ) \ud45c\uc900\uc5d0 \ub9de\ub294 \uc0ac\uc804\uc870\uac74, \uc0ac\ud6c4\uc870\uac74, \ub2e8\uc815\ubb38\uc744 \uc801\uc6a9\ud558\uac8c \ub420 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Interfaces/#enforcement_7","text":"(\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc0ac\ud6c4 \uc870\uac74\uc744 \ub2e8\uc815\ud560 \uc218 \uc788\ub294 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc744 \ucc3e\ub294 \uac83\uc740 \uc2e4\ud604 \uac00\ub2a5\ud558\uc9c0 \uc54a\ub2e4. \uc27d\uac8c \ud655\uc778\ud560 \uc218 \uc788\ub294 \uac83\ub4e4( assert() )\uc5d0 \ub300\ud574 \uacbd\uace0\ud558\ub294 \uac83\uc740 \uc5b8\uc5b4 \uae30\ub2a5\uc774 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c\ub294 \ubbf8\uc2ec\uca4d\uc744 \uc218 \uc788\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i9-concept","text":"","title":"I.9: \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud15c\ud50c\ub9bf\uc774\ub77c\uba74 \ucee8\uc149(Concept)\uc744 \uc0ac\uc6a9\ud574\uc11c \ub9e4\uac1c \ubcc0\uc218\ub97c \ubb38\uc11c\ud654\ud558\ub77c"},{"location":"Interfaces/#reason_8","text":"\uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\ud655\ud558\uac8c, \uadf8\ub9ac\uace0 (\uba40\uc9c0 \uc54a\uc740) \ubbf8\ub798\uc5d0 \ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc0ac\ub97c \ud560 \uc218 \uc788\uac8c \ub9cc\ub4e4\uc5b4\ub77c.","title":"Reason"},{"location":"Interfaces/#example_6","text":"\uc694\uad6c \uc0ac\ud56d \uba85\uc138\uc5d0 ISO Concept TS \uc2a4\ud0c0\uc77c\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: template < typename Iter , typename Val > // requires InputIterator<Iter> && EqualityComparable<ValueType<Iter>>, Val> Iter find ( Iter first , Iter last , Val v ) { // ... }","title":"Example"},{"location":"Interfaces/#note_16","text":"// \uac00 \uc81c\uac70\ub418\uba74 \ub300\ubd80\ubd84\uc758 \ucef4\ud30c\uc77c\ub7ec\uac00 requires \uad6c\ubb38\uc744 \uac80\uc0ac\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \ud604\uc7ac Concept\uc740 GCC 6.1\uacfc \uadf8 \uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc9c0\uc6d0\ub41c\ub2e4.","title":"Note"},{"location":"Interfaces/#see-also_1","text":"\uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d \uacfc \ucee8\uc149 \uc744 \ucc38\uace0\ud558\ub77c","title":"See Also"},{"location":"Interfaces/#enforcement_8","text":"(\uc544\uc9c1 \uc801\uc6a9 \ubd88\uac00\ub2a5) \uc5b8\uc5b4 \uba85\uc138\ub97c \uc791\uc131\uc911\uc774\ub2e4. \uc5b8\uc5b4 \uba85\uc138\uac00 \uc815\uc758\ub41c \ud6c4, \ube44\uac00\ubcc0 \ud15c\ud50c\ub9bf \ub9e4\uac1c \ubcc0\uc218\uac00 (\uc120\uc5b8\uc774\ub098 requires \ubb38\uc5d0 \uc5b8\uae09\ub418\uc9c0 \uc54a\uc740) \ucee8\uc149\uc73c\ub85c \uc81c\ud55c\ub418\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c.","title":"Enforcement"},{"location":"Interfaces/#i10","text":"","title":"I.10: \uc694\uad6c\ub41c \uc791\uc5c5\uc758 \uc218\ud589 \uc2e4\ud328\ub97c \uc54c\ub9ac\uae30 \uc704\ud574 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Interfaces/#reason_9","text":"\uc2dc\uc2a4\ud15c\uc774\ub098 \uacc4\uc0b0 \uacb0\uacfc\ub97c \uc815\uc758\ub418\uc9c0 \uc54a\uc740(\uc608\uce21 \ubd88\uac00\ub2a5\ud55c) \uc0c1\ud0dc\ub85c \ub458 \uc218 \uc5c6\uc73c\ubbc0\ub85c \uc624\ub958\ub97c \ubb34\uc2dc\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \uc774\ub294 \uc624\ub958\uc758 \uc8fc \ubc1c\uc0dd\uc9c0\uac00 \ub41c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_7","text":"int printf ( const char * ...); // \ub098\uc05c \ucf54\ub4dc: \ucd9c\ub825\uc5d0 \uc2e4\ud328\ud558\uba74 \uc74c\uc218\ub97c \ubc18\ud658\ud55c\ub2e4 template < class F , class ... Args > // \uc88b\uc740 \ucf54\ub4dc: \uc0c8 \uc2a4\ub808\ub4dc\ub97c \uc2dc\uc791\ud558\uc9c0 \ubabb\ud558\uba74 system_error\ub97c \ub358\uc9c4\ub2e4 explicit thread ( F && f , Args && ... args );","title":"Example"},{"location":"Interfaces/#note_17","text":"\uc624\ub958\ub780 \ubb34\uc5c7\uc778\uac00? \uc624\ub958\ub780 \ud568\uc218\uac00 (\uc0ac\ud6c4 \uc870\uac74 \uc124\uc815\uc744 \ud3ec\ud568\ud574) \uc758\ub3c4\ud55c \ubaa9\uc801\uc744 \uc774\ub8f0 \uc218 \uc5c6\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc624\ub958\ub97c \ubb34\uc2dc\ud558\ub294 \ucf54\ub4dc\ub97c \ud638\ucd9c\ud558\uba74 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \uc2dc\uc2a4\ud15c \uc0c1\ud0dc\ub098 \uc798\ubabb\ub41c \uacb0\uacfc\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub9ac\ubaa8\ud2b8 \uc11c\ubc84\uc5d0 \uc5f0\uacb0\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0 \uc790\uccb4\uc801\uc73c\ub85c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4. \uc11c\ubc84\ub294 \ub2e4\uc591\ud55c \uc774\uc720\ub85c \uc5f0\uacb0\uc744 \uac70\ubd80\ud560 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud638\ucd9c\ud558\ub294 \ucabd\uc5d0\uc11c \uacb0\uacfc\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub3c4\ub85d \ubc18\ud658\ud574 \uc8fc\ub294 \uac83\uc774 \uc790\uc5f0\uc2a4\ub7fd\ub2e4. \uadf8\ub7ec\ub098 \uc5f0\uacb0\uc5d0 \uc2e4\ud328\ud558\ub294 \uac83\uc744 \uc624\ub958\ub85c \uac04\uc8fc\ud560 \uc0dd\uac01\uc774\ub77c\uba74, \uc2e4\ud328\ud560 \uacbd\uc6b0 \uc608\uc678\ub97c \ub358\uc838\uc57c \ud55c\ub2e4.","title":"Note"},{"location":"Interfaces/#exception_2","text":"\uae30\uc874\uc758 \ub9ce\uc740 \uc778\ud130\ud398\uc774\uc2a4 \ud568\uc218\ub4e4\uc740 \uc624\ub958\uac00 \uc544\ub2cc \uc2e4\uc81c \uc0c1\ud0dc \ucf54\ub4dc\ub97c \ubcf4\uace0\ud558\uae30 \uc704\ud574 \uc624\ub958 \ucf54\ub4dc(\uc608\ub97c \ub4e4\uc5b4, errno )\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc774\uc5d0 \ub300\ud574 \ubcc4\ub2e4\ub978 \ub300\uc548\uc774 \uc5c6\uc73c\ubbc0\ub85c \uaddc\uce59\uc744 \uc704\ubc18\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4.","title":"Exception"},{"location":"Interfaces/#alternative_4","text":"\ub9cc\uc57d (\uc608\ub97c \ub4e4\uc5b4, \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub4dc\uac00 \uc608\uc804 \uc2a4\ud0c0\uc77c\uc758 \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\ub85c \uac00\ub4dd\ud558\uac70\ub098 \uc2e4\uc2dc\uac04 \uc81c\uc57d\uc774 \uc2ec\uac01\ud558\uae30 \ub54c\ubb38\uc5d0) \uc608\uc678\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub2e4\uba74, \ud55c \uc30d\uc758 \uac12\uc744 \ubc18\ud658\ud558\ub294 \uc2a4\ud0c0\uc77c\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uace0\ub824\ud574 \ubcf4\ub77c: int val ; int error_code ; tie ( val , error_code ) = do_something (); if ( error_code ) { // ... handle the error or exit ... } // ... use val ... \uc548\ud0c0\uae5d\uac8c\ub3c4 \uc774\ub7f0 \ucf54\ub4dc \uc2a4\ud0c0\uc77c\uc740 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub97c \ub9cc\ub4e4\uac8c \ud55c\ub2e4. \uc774\uc5d0 \ub300\uc751\ud558\uae30 \uc704\ud55c structured bindings \uae30\ub2a5\uc774 C++17\uc5d0\uc11c\ubd80\ud130 \uc0ac\uc6a9 \uac00\ub2a5\ud558\ub2e4. auto [ val , error_code ] = do_something (); if ( error_code ) { // ... handle the error or exit ... } // ... use val ...","title":"Alternative"},{"location":"Interfaces/#note_18","text":"\"\uc131\ub2a5\"\uc774 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \ud0c0\ub2f9\ud55c \uc774\uc720\ub77c\uace0\ub294 \uc0dd\uac01\ud558\uc9c0 \uc54a\ub294\ub2e4. \uba85\uc2dc\uc801\uc778 \uc624\ub958 \uac80\uc0ac \ubc0f \ucc98\ub9ac\ub294 \uc885\uc885 \uc608\uc678 \ucc98\ub9ac\ub9cc\ud07c \ub9ce\uc740 \uc2dc\uac04\uacfc \uacf5\uac04\uc744 \uc4f0\uae30\ub3c4 \ud55c\ub2e4. \uac04\uacb0\ud55c \ucf54\ub4dc\ub294 \uc885\uc885 \uc608\uc678 \ucc98\ub9ac\ub97c \ud3ec\ud568\ud558\ub354\ub77c\ub3c4 \ub354 \uc88b\uc740 \uc131\ub2a5\uc744 \uac16\ub294\ub2e4. (\ud504\ub85c\uadf8\ub7a8\uacfc \ucd5c\uc801\ud654\ub97c \ud1b5\ud574 \uc2e4\ud589 \uacbd\ub85c\ub97c \ub2e8\uc21c\ud654\ud55c\ub2e4) \uc131\ub2a5\uc774 \uc911\uc694\ud55c \ucf54\ub4dc\uc758 \uc88b\uc740 \uaddc\uce59\uc740 \uc624\ub958 \uac80\uc0ac\ub97c \ucf54\ub4dc\uc758 \ud575\uc2ec \ubd80\ubd84 \ubc14\uae65\uc73c\ub85c \uc62e\uae30\ub294 \uac83\uc774\ub2e4 ( \uac80\uc0ac ). \uc7a5\uae30\uc801\uc73c\ub85c \ubcf4\uba74 \uc815\ub3c8\ub41c(regular) \ucf54\ub4dc\uac00 \ub354 \uc798 \ucd5c\uc801\ud654\ub41c\ub2e4. \uc131\ub2a5\uc5d0 \ub300\ud574 \uc9c0\uc801\ud558\uae30 \uc804\uc5d0\ub294 \ud56d\uc0c1 \uc2e0\uc911\ud558\uac8c \uce21\uc815\ud558\ub77c .","title":"Note"},{"location":"Interfaces/#see-also_2","text":"\uc0ac\uc804 \uc870\uac74, \uc0ac\ud6c4 \uc870\uac74\uc758 \uc704\ubc18 \ubcf4\uace0\ub97c \uc704\ud55c I.5 \ubc0f I.7 .","title":"See Also"},{"location":"Interfaces/#enforcement_9","text":"(\uc801\uc6a9 \ubd88\uac00\ub2a5) \ucca0\uc800\ud55c \uc810\uac80\uc774 \ubd88\uac00\ub2a5\ud55c \ucca0\ud559\uc801 \uac00\uc774\ub4dc\ub77c\uc778\uc774\ub2e4 errno \ub97c \ud0d0\uc0c9\ud55c\ub2e4","title":"Enforcement"},{"location":"Interfaces/#i11-t-t","text":"","title":"I.11: \uc6d0\uc2dc \ud3ec\uc778\ud130(T*) \ud639\uc740 \ucc38\uc870(T&amp;)\ub97c \uc0ac\uc6a9\ud574 \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Interfaces/#reason_10","text":"\ud638\ucd9c\ud558\ub294 \ucabd\uc774\ub098 \ubc1b\ub294 \ucabd \uc911 \ub204\uac00 \uac1c\uccb4\ub97c \uc18c\uc720\ud560 \uac83\uc778\uc9c0 \ubaa8\ub978\ub2e4\uba74, \uba54\ubaa8\ub9ac \ub204\uc218\ub098 \uc870\uae30 \ud30c\uad34\uac00 \ubc1c\uc0dd\ud560 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_8","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: X * compute ( args ) // don't { X * res = new X {}; // ... return res ; } \ubc18\ud658\ub41c X \ub97c \ub204\uac00 \uc0ad\uc81c\ud560 \uac83\uc778\uac00? \ub9cc\uc57d \ub808\ud37c\ub7f0\uc2a4\ub97c \ubc18\ud658\ud55c\ub2e4\uba74 \ubb38\uc81c\ub294 \ub354 \uc5b4\ub824\uc6cc\uc9c8 \uac83\uc774\ub2e4. \uacb0\uacfc\uac00 \uac12\uc73c\ub85c \ubc18\ud658\ub418\uc5c8\ub2e4\uace0 \uace0\ub824\ud574 \ubcf4\uc790 (\uacb0\uacfc\ub85c \ubc18\ud658\ub418\ub294 \uac12\uc758 \ud06c\uae30\uac00 \ud06c\ub2e4\uba74 \uc774\ub3d9 \ubb38\ubc95\uc744 \uc0ac\uc6a9\ud558\ub77c): vector < double > compute ( args ) // good { vector < double > res ( 10000 ); // ... return res ; }","title":"Example"},{"location":"Interfaces/#alternative_5","text":"\uc18c\uc720\uad8c \uc804\ub2ec \uc740 \ubc30\ud0c0\uc801 \uc18c\uc720\ub97c \uc704\ud55c unique_ptr \uc640 \uacf5\uc720\ub97c \uc704\ud55c shared_ptr \uac19\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub77c. \ud558\uc9c0\ub9cc \uc774\ub294 \uac1c\uccb4 \uadf8 \uc790\uccb4\ub97c \ubc18\ud658\ud558\ub294 \uac83\ubcf4\ub2e4 \ub35c \uc544\ub984\ub2f5\uace0 \ub35c \ud6a8\uc728\uc801\uc774\ub2e4. \uc624\uc9c1 \ucc38\uc870\ub85c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud560\ub54c\ub9cc \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\ub77c. ABI \ud638\ud658\uc131 \uc694\uad6c \uc0ac\ud56d \ub610\ub294 \ub9ac\uc18c\uc2a4 \ubd80\uc871\uc73c\ub85c \uc778\ud574 \uc624\ub798\ub41c \ucf54\ub4dc\ub97c \uc218\uc815\ud560 \uc218 \uc5c6\ub294 \uacbd\uc6b0\uac00 \uc788\ub2e4. \uc774 \uacbd\uc6b0, \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc758 owner \ub97c \uc0ac\uc6a9\ud574 \ud3ec\uc778\ud130\uc758 \uc18c\uc720\uad8c\uc744 \ud45c\uc2dc\ud558\ub77c: owner < X *> compute ( args ) // It is now clear that ownership is transferred { owner < X *> res = new X {}; // ... return res ; } \uc704\uc758 \ucf54\ub4dc\ub294 \ubd84\uc11d \ud234\uc5d0\uac8c res \uac00 \uc18c\uc720\uad8c\uc790\ub77c\uace0 \uc54c\ub824\uc900\ub2e4. \uc989, \uc774 \uac12\uc740 return \uc744 \ud1b5\ud574 \ud589\ud574\uc9c4 \uac83\ucc98\ub7fc delete \ub418\uac70\ub098 \ub2e4\ub978 \uc18c\uc720\uad8c\uc790\uc5d0\uac8c \ub118\uaca8\uc918\uc57c \ud55c\ub2e4. owner \ub294 \ub9ac\uc18c\uc2a4 \ud578\ub4e4\uc758 \uad6c\ud604\uc5d0\uc11c \ube44\uc2b7\ud558\uac8c \uc0ac\uc6a9\ub41c\ub2e4.","title":"Alternative"},{"location":"Interfaces/#note_19","text":"\ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130(\ub610\ub294 \ubc18\ubcf5\uc790)\ub85c \uc804\ub2ec\ub41c \ubaa8\ub4e0 \uac1c\uccb4\ub294 \ud638\ucd9c\uc790\uac00 \uc18c\uc720\ud55c \uac83\uc73c\ub85c \uac04\uc8fc\ub418\ubbc0\ub85c \ud638\ucd9c\uc790\uac00 \uc218\uba85\uc744 \ucc98\ub9ac\ud55c\ub2e4. \ub2e4\ub978 \uad00\uc810\uc5d0\uc11c \ubcf4\uc790\uba74: \uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\ub294 API\ub294 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud558\ub294 API\uc5d0 \ube44\ud574 \uc0c1\ub300\uc801\uc73c\ub85c \uc801\ub2e4. \uadf8\ub7ec\ub2c8 \uc77c\ubc18\uc801\uc73c\ub85c \ub0b4\uc7ac\ub41c(default) \uc758\ubbf8\ub294 \"\uc18c\uc720\uad8c\uc744 \uc804\ub2ec\ud558\uc9c0 \uc54a\ub294\" \uac83\uc774\ub2e4.","title":"Note"},{"location":"Interfaces/#see-also_3","text":"\uc778\uc790 \uc804\ub2ec \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc758 \uc0ac\uc6a9 \uac12 \ubc18\ud658","title":"See Also"},{"location":"Interfaces/#enforcement_10","text":"(\uac04\ub2e8\ud568) owner \uac00 \uc544\ub2cc \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\uc758 delete \uc5d0 \ub300\ud574 \uacbd\uace0\ud558\ub77c (\uac04\ub2e8\ud568) \ubaa8\ub4e0 \ucf54\ub4dc \uacbd\ub85c\uc5d0\uc11c owner \ud3ec\uc778\ud130\ub97c reset \ud558\uac70\ub098 \uba85\uc2dc\uc801\uc73c\ub85c delete \ub97c \uc2e4\ud328\ud558\uac8c \ub418\uba74 \uacbd\uace0\ud558\ub77c (\uac04\ub2e8\ud568) new \uc758 \ubc18\ud658 \uac12\uc774\ub098 \ud3ec\uc778\ud130 \ud0c0\uc785\uc758 \ubc18\ud658 \uac12\uc744 \uac16\ub294 \ud568\uc218 \ud638\ucd9c\uc774 \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\uc5d0 \ud560\ub2f9\ub418\uba74 \uacbd\uace0\ud558\ub77c","title":"Enforcement"},{"location":"Interfaces/#i12-null-not_null","text":"","title":"I.12: null\uc774 \ub418\uc5b4\uc120 \uc548\ub418\ub294 \ud3ec\uc778\ud130\ub294 not_null\ub85c \uc120\uc5b8\ud558\ub77c"},{"location":"Interfaces/#reason_11","text":"nullptr \uc5ed\ucc38\uc870 \uc624\ub958\ub97c \ud53c\ud558\uae30 \uc704\ud574\uc11c\ub2e4. \uadf8\ub9ac\uace0 nullptr \ub97c \ubc18\ubcf5\ud574\uc11c \uac80\uc0ac\ud558\ub294 \uacbd\uc6b0\ub97c \ud53c\ud574 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_9","text":"int length ( const char * p ); // nullptr\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\uc9c0 \ubd84\uba85\ud558\uc9c0 \uc54a\ub2e4. length ( nullptr ); // \uc774\ub807\uac8c \uc0ac\uc6a9\ud574\ub3c4 \uad1c\ucc2e\uc744\uae4c? int length ( not_null < const char *> p ); // \uc880 \ub354 \ub0ab\ub2e4: p\uac00 nullptr\uac00 \ub418\uba74 \uc548\ub41c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. int length ( const char * p ); // p\uac00 nullptr\uac00 \ub420\uc218 \uc788\ub2e4\uace0 \uac00\uc815\ud574\uc57c \ud55c\ub2e4. \uc18c\uc2a4 \ucf54\ub4dc\uc5d0 \uc758\ub3c4\ub97c \uba85\uc2dc\ud568\uc73c\ub85c\uc368, \ucef4\ud30c\uc77c\ub7ec\uc640 \ud234\uc774 \uc815\uc801 \ubd84\uc11d\uc744 \ud1b5\ud574 \uc77c\ubd80 \uc624\ub958 \ud074\ub798\uc2a4\ub97c \ucc3e\uc544\ub0b4\ub294 \ub4f1\uc758 \ubcf4\ub2e4 \ub098\uc740 \uc9c4\ub2e8\uc744 \uc81c\uacf5\ud558\uace0 \ubd84\uae30 \ubc0f \ub110(NULL) \uac80\uc0ac\ub97c \uc81c\uac70\ud558\ub294 \ub4f1\uc758 \ucd5c\uc801\ud654 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Interfaces/#note_20","text":"not_null \uc740 \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4.","title":"Note"},{"location":"Interfaces/#note_21","text":"char \uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uac00 C-\uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4( \\0 \uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790\uc5f4)\uc744 \uac00\ub9ac\ud0a4\uace0 \uc788\ub2e4\ub294 \uac00\uc815\uc740 \uc5ec\uc804\ud788 \uc554\ubb35\uc801\uc774\uba70 \ud63c\ub780\uacfc \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uc6d0\uc778\uc774 \ub420 \uc218 \uc788\ub2e4. const char* \ubcf4\ub2e4\ub294 czstring \uc744 \uc0ac\uc6a9\ud558\ub77c. // we can assume that p cannot be nullptr // we can assume that p points to a zero-terminated array of characters int length ( not_null < zstring > p ); \ubb3c\ub860 length() \ub294 std::strlen() \uc774\ub2e4.","title":"Note"},{"location":"Interfaces/#enforcement_11","text":"(\uac04\ub2e8\ud568) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 \ubaa8\ub4e0 \uc81c\uc5b4-\ud750\ub984 \uacbd\ub85c\uc5d0\uc11c \ud3ec\uc778\ud130 \ub9e4\uac1c \ubcc0\uc218\uc5d0 \uc811\uadfc\ud558\uae30 \uc804\uc5d0 nullptr \uc778\uc9c0 \uac80\uc0ac\ud55c\ub2e4\uba74, not_null \uc73c\ub85c \uc120\uc5b8\ub418\uc5b4\uc57c \ud55c\ub2e4\ub294 \uacbd\uace0\ud558\ub77c (\ubcf5\uc7a1\ud568) \ud3ec\uc778\ud130 \ubc18\ud658 \uac12\uc744 \uac16\ub294 \ud568\uc218\uac00 \ubaa8\ub4e0 \ubc18\ud658 \uacbd\ub85c\uc5d0\uc11c nullptr \uc774 \uc544\ub2cc\uc9c0 \ud655\uc778\ud55c\ub2e4\uba74, \ub9ac\ud134 \ud0c0\uc785\uc744 not_null \uc73c\ub85c \uc120\uc5b8\ud574\uc57c \ub41c\ub2e4\ub294 \uacbd\uace0\ud558\ub77c","title":"Enforcement"},{"location":"Interfaces/#i13","text":"","title":"I.13: \ubc30\uc5f4\uc744 \ub2e8\uc77c \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Interfaces/#reason_12","text":"(\ud3ec\uc778\ud130, \ud06c\uae30)-\uc2a4\ud0c0\uc77c \uc778\ud130\ud398\uc774\uc2a4\ub294 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4. \ub610\ud55c (\ubc30\uc5f4\uc5d0 \ub300\ud55c) \uc77c\ubc18 \ud3ec\uc778\ud130\ub294 \ud53c\ud638\ucd9c\uc790\uc5d0\uc11c \ud06c\uae30\ub97c \uacb0\uc815\ud560 \uc218 \uc788\ub3c4\ub85d \uba87 \uac00\uc9c0 \uad00\ub840\uc5d0 \uc758\uc874\ud574\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_10","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void copy_n ( const T * p , T * q , int n ); // [p:p+n)\uc5d0\uc11c [q:q+n)\ub85c \ubcf5\uc0ac\ud55c\ub2e4 \ub9cc\uc57d q \uac00 \uac00\ub9ac\ud0a4\ub294 \ubc30\uc5f4\uc758 \uc6d0\uc18c \uac2f\uc218\uac00 n \ubcf4\ub2e4 \uc801\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c? \uad00\uacc4\uc5c6\ub294 \uba54\ubaa8\ub9ac\ub97c \ub36e\uc5b4\uc4f0\uac8c \ub41c\ub2e4. \ub9cc\uc57d p \uac00 \uac00\ub9ac\ud0a4\ub294 \ubc30\uc5f4\uc758 \uc6d0\uc18c \uac2f\uc218\uac00 n \ubcf4\ub2e4 \uc801\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ub420\uae4c? \uad00\uacc4\uc5c6\ub294 \uba54\ubaa8\ub9ac\ub97c \uc77d\uc744 \uac83\uc774\ub2e4. \uc5b4\ub290 \ucabd\uc774\ub098 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \ub3d9\uc791\uc744 \uc218\ud589\ud558\uac70\ub098 \ub9e4\uc6b0 \ubd88\ucf8c\ud55c \ubc84\uadf8\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Interfaces/#alternative_6","text":"\uba85\uc2dc\uc801\uc778 \ubc94\uc704( span ) \uc0ac\uc6a9\uc744 \uace0\ub824\ud574 \ubcf4\ub77c: void copy ( span < const T > r , span < T > r2 ); // r\uc5d0\uc11c r2\ub85c \ubcf5\uc0ac\ud55c\ub2e4","title":"Alternative"},{"location":"Interfaces/#example-bad_6","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void draw ( Shape * p , int n ); // \ud5c8\uc811\ud55c(poor) \uc778\ud130\ud398\uc774\uc2a4\ub294 \ud5c8\uc811\ud55c \ucf54\ub4dc\ub97c \ub0b3\ub294\ub2e4. Circle arr [ 10 ]; // ... draw ( arr , 10 ); n \uc758 \uc778\uc218\ub85c 10 \uc744 \uc804\ub2ec\ud558\ub294 \uac83\uc740 \uc2e4\uc218\uc77c \uc218 \uc788\ub2e4. \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \uad00\ub840\ub294 [ 0 : n )\uc774\ub77c\uace0 \uac00\uc815\ud558\ub294 \uac83\uc774\uc9c0\ub9cc, \uc774\ub7ec\ud55c \ub0b4\uc6a9\uc774 \uc5b4\ub514\uc5d0\ub3c4 \uc5b8\uae09\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4. \ub354 \ub098\uc05c \ubd80\ubd84\uc740 \uc5b4\uca0c\ub4e0 draw() \ud638\ucd9c\uc774 \ucef4\ud30c\uc77c\ub41c\ub2e4\ub294 \uac83\uc774\ub2e4. \ubc30\uc5f4\uc5d0\uc11c \ud3ec\uc778\ud130\ub85c\uc758 \uc554\uc2dc\uc801 \ubcc0\ud658(\ubc30\uc5f4 \ubd80\ud328(array decay))\uc774 \uc788\uc5c8\uace0, Circle \uc5d0\uc11c Shape \ub85c\uc758 \ub610 \ub2e4\ub978 \uc554\uc2dc\uc801 \ubcc0\ud658\uc774 \uc788\uc5c8\ub2e4. draw() \uac00 \uadf8 \ubc30\uc5f4\uc744 \ud1b5\ud574 \uc548\uc804\ud558\uac8c \ubc18\ubcf5\ubb38\uc744 \uc218\ud589\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc740 \uc5c6\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc694\uc18c\uc758 \ud06c\uae30\ub97c \uc54c \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4.","title":"Example, bad"},{"location":"Interfaces/#alternative_7","text":"\uc694\uc18c\uc758 \ud06c\uae30\ud55c\uacc4\ub97c \ubcf4\uc7a5\ud558\uace0 \uc704\ud5d8\ud55c \uc554\uc2dc\uc801 \ubcc0\ud658\uc744 \ubc29\uc9c0\ud558\ub294 \uc9c0\uc6d0 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: void draw2 ( span < Circle > ); Circle arr [ 10 ]; // ... draw2 ( span < Circle > ( arr )); // \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \uc54c \uc218 \uc788\ub2e4(deduce) draw2 ( arr ); // \uc6d0\uc18c \ud0c0\uc785\uacfc \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \uc54c \uc218 \uc788\ub2e4 void draw3 ( span < Shape > ); draw3 ( arr ); // \uc624\ub958: Circle[10]\ub294 span<Shape>\uac00 \ub420 \uc218 \uc5c6\ub2e4. \uc774 draw2() \ub294 \uac19\uc740 \uc591\uc758 \uc815\ubcf4\ub97c draw() \uc5d0 \uc804\ub2ec\ud558\uc9c0\ub9cc, \uba85\uc2dc\uc801\uc73c\ub85c Circle \uc774 \ub418\uc5b4\uc57c \ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c \uc218 \uc788\ub2e4.","title":"Alternative"},{"location":"Interfaces/#exception_3","text":"zstring \uacfc czstring \uc744 \uc0ac\uc6a9\ud574 C-\uc2a4\ud0c0\uc77c\uc758 \\0 \ub85c \ub05d\ub098\ub294 \ubb38\uc790\uc5f4\uc744 \ub098\ud0c0\ub0b4\ub77c. \ud558\uc9c0\ub9cc \uc774\ub807\uac8c \ud560\ub54c\ub294 \ubc94\uc704 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d GSL \uc758 string_span \ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Exception"},{"location":"Interfaces/#enforcement_12","text":"(\uac04\ub2e8\ud568) ((\uacbd\uacc4)) \ubc30\uc5f4 \ud0c0\uc785\uc5d0\uc11c \ud3ec\uc778\ud130 \ud0c0\uc785\uc73c\ub85c\uc758 \uc554\uc2dc\uc801 \ubcc0\ud658\uc5d0 \uc758\uc874\ud558\ub294 \ud45c\ud604\uc2dd\uc5d0 \ub300\ud574 \uacbd\uace0\ub97c \ud45c\uc2dc\ud558\ub77c. string/czstring \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub294 \uc608\uc678\ub97c \ud5c8\uc6a9\ud55c\ub2e4. (\uac04\ub2e8\ud568) ((\uacbd\uacc4)) \ud3ec\uc778\ud130 \ud0c0\uc785\uc758 \uac12\uc744 \uac00\uc838\uc624\ub294 \ud3ec\uc778\ud130 \ud0c0\uc785\uc758 \ud45c\ud604\uc2dd\uc5d0 \ub300\ud55c \uc0b0\uc220 \uc5f0\uc0b0\uc5d0 \ub300\ud574 \uacbd\uace0\ub97c \ud45c\uc2dc\ud558\ub77c. zstring/czstring \ud3ec\uc778\ud130 \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c\ub294 \uc608\uc678\ub97c \ud5c8\uc6a9\ud55c\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i22","text":"","title":"I.22: \uc804\uc5ed \uac1c\uccb4\uac00 \ubcf5\uc7a1\ud558\uac8c \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c"},{"location":"Interfaces/#reason_13","text":"\ubcf5\uc7a1\ud55c \ucd08\uae30\ud654\ub294 \uc2e4\ud589 \uc21c\uc11c\ub97c \ubd88\ubd84\uba85(undefined order)\ud558\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_11","text":"// file1.c extern const X x ; const Y y = f ( x ); // read x; write y // file2.c extern const Y y ; const X x = g ( y ); // read y; write x x \uc640 y \uac00 \uc11c\ub85c \ub2e4\ub978 \ud30c\uc77c(translation units)\uc5d0 \uc788\uae30 \ub54c\ubb38\uc5d0, f() \uc640 g() \uc758 \ud638\ucd9c \uc21c\uc11c\ub294 \uc54c \uc218 \uc5c6\ub2e4; \ub458 \uc911 \ud558\ub098\uac00 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 const \uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\ub2e4. \uc774\ub294 \uc804\uc5ed \uac1c\uccb4\ub4e4\uc758 \ucd08\uae30\ud654 \uc21c\uc11c \ubb38\uc81c\uac00 \ubcc0\uc218 \uc5d0\ub9cc \ud55c\uc815\ub41c\uac83\uc774 \uc544\ub2d8\uc744 \ubcf4\uc5ec\uc900\ub2e4.","title":"Example"},{"location":"Interfaces/#note_22","text":"\ub3d9\uc2dc\uc131\uc744 \uace0\ub824\ud55c \ucf54\ub4dc\uc5d0\uc11c \ucd08\uae30\ud654 \uc21c\uc11c \ubb38\uc81c\ub294 \ud2b9\ud788 \ub2e4\ub8e8\uae30\uac00 \uc5b4\ub835\ub2e4. \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc804\uc5ed \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \ucd5c\uc120\uc758 \ud574\uacb0\ucc45\uc774\ub2e4.","title":"Note"},{"location":"Interfaces/#enforcement_13","text":"\ube44 constexpr \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uc804\uc5ed \ucd08\uae30\ud654\ub97c \uc9c0\uc801\ud55c\ub2e4. extern \uac1c\uccb4\uc5d0 \uc811\uadfc\ud558\ub294 \uc804\uc5ed \ucd08\uae30\ud654\ub97c \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i23","text":"","title":"I.23: \ud568\uc218 \uc778\uc790 \uac1c\uc218\ub97c \ucd5c\uc18c\ub85c \uc720\uc9c0\ud558\ub77c"},{"location":"Interfaces/#reason_14","text":"\uc778\uc790 \uac2f\uc218\uac00 \ub9ce\uc73c\uba74 \ud63c\ub780\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. \uc778\uc790\ub97c \ub9ce\uc774 \uc804\ub2ec\ud558\ub294 \uac83\uc740 \ub2e4\ub978 \ubc29\ubc95\uc5d0 \ube44\ud574 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4.","title":"Reason"},{"location":"Interfaces/#discussion","text":"\ud568\uc218\uac00 \ub108\ubb34 \ub9ce\uc740 \ub9e4\uac1c\ubcc0\uc218\ub97c \uac00\uc9c8\ub54c\ub294 \ubcf4\ud1b5 2\uac00\uc9c0 \uc774\uc720\uac00 \uc788\ub2e4: \ucd94\uc0c1\ud654 \ub418\uc9c0 \uc54a\uc74c \ucd94\uc0c1\ud654\ub97c \ud558\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \ubd88\ubcc0\uc870\uac74\uc774 \uc788\ub294 \ub2e8\uc77c \uac1c\uccb4\uac00 \uc544\ub2c8\ub77c \ubcf5\uc7a1\ud558\uace0 \uac1c\ubcc4\uc801\uc778 \ud615\ud0dc\ub85c \uac12\ub4e4\uc774 \uc804\ub2ec\ub418\uace0 \uc788\ub294 \uac83\uc774\ub2e4. \uc774\ub294 \uc778\uc790 \ubaa9\ub85d\uc744 \uae38\uac8c \ub9cc\ub4e4 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc778\uc790\ub4e4\uc774 \ubd88\ubcc0\uc870\uac74\uc73c\ub85c \ubcf4\ud638\ub418\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uc624\ub958\ub85c \uc774\uc5b4\uc9c8 \uac00\ub2a5\uc131\ub3c4 \ub192\ub2e4. \"\ud558\ub098\uc758 \ud568\uc218\uac00 \ud55c\uac00\uc9c0 \uc77c\ub9cc \ud55c\ub2e4\"\ub294 \uaddc\uce59\uc744 \uc704\ubc18\" \ud574\ub2f9 \ud568\uc218\uac00 \ud558\ub098\ub97c \ucd08\uacfc\ud558\ub294 \uc791\uc5c5\uc744 \ud558\uace0 \uc788\ub2e4. \uc774\ub294 \uace0\uccd0\uc11c \ub2e4\uc2dc \uc791\uc131\ud574\uc57c(refactor) \ud55c\ub2e4.","title":"Discussion"},{"location":"Interfaces/#example_12","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac merge() \ub294 \ud3b8\ud558\uac8c \ucc98\ub9ac\ud560 \uc218 \uc788\ub294 \ud55c\uacc4\uc5d0 \uc788\ub2e4: template < class InputIterator1 , class InputIterator2 , class OutputIterator , class Compare > OutputIterator merge ( InputIterator1 first1 , InputIterator1 last1 , InputIterator2 first2 , InputIterator2 last2 , OutputIterator result , Compare comp ); \uc55e\uc11c \uc9c0\uc801\ud55c 1\ubc88 \ubb38\uc81c\uc810\uc5d0 \ud574\ub2f9\ud55c\ub2e4 -- \ucd94\uc0c1\ud654\uac00 \ub418\uc9c0 \uc54a\uc740 \uac83\uc774\ub2e4. STL\uc5d0\uc11c \ubc94\uc704(\ucd94\uc0c1\ud654\ub41c \uac1c\ub150)\ub97c \uc804\ub2ec\ud558\uc9c0 \uc54a\uace0 \ubc18\ubcf5\uc790 \uc30d(pair)\ub4e4\uc744 \uc804\ub2ec\ud55c\ub2e4. \uc774\ub294 \ucea1\uc290\ud654\ub418\uc9c0 \uc54a\uc740 \uac12\ub4e4(unencapsulated component values)\uc5d0 \ud574\ub2f9\ud55c\ub2e4. \uc5ec\uae30\uc5d0\ub294 4\uac1c\uc758 \ud15c\ud50c\ub9bf \uc778\uc790\uc640 6\uac1c\uc758 \ud568\uc218 \uc778\uc790\uac00 \uc788\ub2e4. \uac00\uc7a5 \uc790\uc8fc \ubcf4\uc774\uace0 \ub2e8\uc21c\ud55c \uc0ac\uc6a9\ubc95\uc744 \ub2e8\uc21c\ud654\ud558\uae30 \uc704\ud574, \uc778\uc790\uc758 \uae30\ubcf8 \ube44\uad50\ub97c < \ub85c \uc815\ud560 \uc218 \uc788\ub2e4. template < class InputIterator1 , class InputIterator2 , class OutputIterator > OutputIterator merge ( InputIterator1 first1 , InputIterator1 last1 , InputIterator2 first2 , InputIterator2 last2 , OutputIterator result ); \uc774\ub807\uac8c \ud55c\ub2e4\uace0 \ud574\uc11c \uc804\uccb4\uc801\uc778 \ubcf5\uc7a1\uc131\uc774 \uc904\uc5b4\ub4e4\uc9c0\ub294 \uc54a\uc9c0\ub9cc \uc0ac\uc6a9\uc790 \uc785\uc7a5\uc5d0\uc11c \ubcfc \ub54c\ub294 \ubcf5\uc7a1\uc131\uc774 \uc904\uc5b4\ub4e0 \uac83\ucc98\ub7fc \ubcf4\uc778\ub2e4. \uc2e4\uc81c\ub85c \uc778\uc790 \uac2f\uc218\ub97c \uc904\uc774\ub824\uba74 \uc778\uc790\ub97c \uc880 \ub354 \ub192\uc740 \uc218\uc900\uc758 \ucd94\uc0c1\ud654\ub85c \ubb36\uc5b4\uc57c \ud55c\ub2e4: template < class InputRange1 , class InputRange2 , class OutputIterator > OutputIterator merge ( InputRange1 r1 , InputRange2 r2 , OutputIterator result ); \uc778\uc790\ub97c \"\ubb36\uc5b4\uc11c\" \uadf8\ub8f9\ud654\ud558\ub294 \uac83\uc740 \uc778\uc790\uc758 \uac2f\uc218\ub97c \uc904\uc774\uace0 \uac80\uc0ac\ud560 \uae30\ud68c\ub97c \ub298\ub9ac\ub294 \uc77c\ubc18\uc801\uc778 \uae30\ubc95\uc774\ub2e4. \ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c, ISO TS\uc5d0\uc11c \uc815\uc758\ud55c \ucee8\uc149(concepts)\uc744 \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4. \uc138 \ud0c0\uc785\uc774 merge\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4\uace0 \uc815\uc758\ud558\ub294 \uac83\uc774\ub2e4. Mergeable { In1 , In2 , Out } OutputIterator merge ( In1 r1 , In2 r2 , Out result );","title":"Example"},{"location":"Interfaces/#example_13","text":"\uc548\uc804\uc131 \ubd84\uc11d(safety profile)\uc740 \uc544\ub798\uc640 \uac19\uc740 \ucf54\ub4dc\ub97c void f ( int * some_ints , int some_ints_length ); // \ub098\uc068: C \uc2a4\ud0c0\uc77c, \uc548\uc804\ud558\uc9c0 \uc54a\ub2e4 \uc544\ub798 \ucc98\ub7fc \ubc14\uafb8\ub3c4\ub85d \uad8c\uc7a5\ud55c\ub2e4 void f ( gsl :: span < int > some_ints ); // \uc88b\uc74c: \uc548\uc804\ud558\uace0 \ubc94\uc704\ub97c \uac80\uc0ac\ud55c\ub2e4 \uc5ec\uae30\uc11c, \ucd94\uc0c1\ud654\ub97c \uc0ac\uc6a9\ud558\uba74 \uc548\uc804\uc131\uacfc \uacac\uace0\ud568\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. \ub3d9\uc2dc\uc5d0 \uc790\uc5f0\uc2a4\ub7fd\uac8c \uc778\uc790\uc758 \uc218\ub97c \uc904\uc774\uac8c \ub41c\ub2e4.","title":"Example"},{"location":"Interfaces/#note_23","text":"\uc5bc\ub9c8\ub098 \ub9ce\uc740 \uc778\uc790\uac00 \uc788\uc5b4\uc57c \ub108\ubb34 \ub9ce\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\uc744\uae4c? \uc778\uc790\uac00 4\uac1c\ub77c\uba74 \ub9ce\ub2e4\uace0 \ub9d0\ud560 \uc218 \uc788\ub2e4. 4\uac1c\uc758 \uc778\uc790\ub85c \uac00\uc7a5 \uc798 \ud45c\ud604\ud560 \uc218 \uc788\ub294 \ud568\uc218\ub4e4\ub3c4 \uc788\uc9c0\ub9cc, \ub9ce\uc9c0\ub294 \uc54a\ub2e4.","title":"Note"},{"location":"Interfaces/#alternative_8","text":"\ub354 \ub098\uc740 \ucd94\uc0c1\ud654: \uc778\uc790\ub97c \uc758\ubbf8\uc788\ub294 \uac1c\uccb4\ub85c \uadf8\ub8f9\ud654\ud558\uace0 \uac1c\uccb4\ub97c \uc804\ub2ec\ud558\ub77c. (\uac12\uc5d0 \uc758\ud55c \uc804\ub2ec \ub610\ub294 \ub808\ud37c\ub7f0\uc2a4\uc5d0 \uc758\ud55c \uc804\ub2ec) \ub354 \uc801\uc740 \uc778\uc790 \uac2f\uc218\ub85c \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ud615\ud0dc\uc758 \ud638\ucd9c\uc744 \ud560 \uc218 \uc788\ub294 \ub514\ud3f4\ud2b8 \uc778\uc790\ub098 \uc624\ubc84\ub85c\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Alternative"},{"location":"Interfaces/#enforcement_14","text":"\ubc94\uc704 \ub610\ub294 \ubdf0\uac00 \uc544\ub2cc \ub3d9\uc77c\ud55c \ud0c0\uc785\uc758 \ubc18\ubcf5\uc790(\ud3ec\uc778\ud130 \ud3ec\ud568)\ub97c 2\uac1c \uc774\uc0c1 \uc120\uc5b8\ud558\ub294 \ud568\uc218\uac00 \uc788\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. (\uc801\uc6a9 \ubd88\uac00\ub2a5) \ucca0\uc800\ud55c \uc810\uac80\uc774 \ubd88\uac00\ub2a5\ud55c \ucca0\ud559\uc801 \uac00\uc774\ub4dc\ub77c\uc778\uc774\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i24","text":"","title":"I.24: \uac19\uc740 \ud0c0\uc785\uc758 \uad00\ub828\uc5c6\ub294 \ub9e4\uac1c \ubcc0\uc218\uac00 \ubd99\uc5b4\uc788\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c"},{"location":"Interfaces/#reason_15","text":"\uc2e4\uc218\ub85c \ub3d9\uc77c \ud0c0\uc785\uc758 \uc778\uc811\ud55c \uc778\uc218\ub97c \uc27d\uac8c \ubc14\uafc0 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Interfaces/#example-bad_7","text":"\ub2e4\uc74c\uc744 \uace0\ub824\ud574 \ubcf4\uc790: void copy_n ( T * p , T * q , int n ); // copy from [p:p + n) to [q:q + n) \uc704 \ucf54\ub4dc\ub294 K&R C-\uc2a4\ud0c0\uc77c \uc778\ud130\ud398\uc774\uc2a4\uc758 \uc801\uc808\ud558\uc9c0 \ubabb\ud55c \ubcc0\ud615\uc774\ub2e4. \"to\"\uc640 \"from\" \uc778\uc218\ub97c \uc27d\uac8c \ubc14\uafc0 \uc218 \uc788\ub2e4. \"from\" \uc778\uc790\uc5d0 const \ub97c \uc0ac\uc6a9\ud558\ub77c: void copy_n ( const T * p , T * q , int n ); // copy from [p:p + n) to [q:q + n)","title":"Example, bad"},{"location":"Interfaces/#exception_4","text":"\ub9cc\uc57d \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc758 \uc21c\uc11c\uac00 \uc911\uc694\ud558\uc9c0 \uc54a\ub2e4\uba74, \ubb38\uc81c\uac00 \uc5c6\ub2e4: int max ( int a , int b );","title":"Exception"},{"location":"Interfaces/#alternative_9","text":"\ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uc9c0 \ub9d0\uace0 \ubc94\uc704\ub97c \ub098\ud0c0\ub0b4\ub294 \uac1c\uccb4(\uc608\ub97c \ub4e4\uc5b4, span )\ub85c \uc804\ub2ec\ud558\ub77c. void copy_n ( span < const T > p , span < T > q ); // copy from p to q","title":"Alternative"},{"location":"Interfaces/#alternative_10","text":"struct \ub97c \ub9e4\uac1c\ubcc0\uc218 \ud0c0\uc785\uc73c\ub85c \uc815\uc758\ud558\uace0 \uac01 \ud544\ub4dc\uc758 \uc774\ub984\uc744 \ub9e4\uac1c\ubcc0\uc218\ub4e4\uc5d0 \ub530\ub77c \ubd80\uc5ec\ud558\ub77c. struct SystemParams { string config_file ; string output_path ; seconds timeout ; }; void initialize ( SystemParams p ); \uc774\ub294 \ud638\ucd9c \uc9c0\uc810\uc5d0\uc11c (\uba64\ubc84\ub4e4\uc758) \uc774\ub984\uc744 \ud1b5\ud574 \uac12\uc744 \ubd80\uc5ec\ud568\uc73c\ub85c\uc368 \ub098\uc911\uc5d0 \ucf54\ub4dc\ub97c \uc77d\uc744 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \ud638\ucd9c\uc744 \uc774\ud574\ud558\uae30 \uc27d\uac8c \ud55c\ub2e4.","title":"Alternative"},{"location":"Interfaces/#enforcement_15","text":"(\uac04\ub2e8\ud568) \uc5f0\uc18d\ud558\ub294 \ub450 \ub9e4\uac1c \ubcc0\uc218\uac00 \ub3d9\uc77c\ud55c \ud0c0\uc785\uc744 \uacf5\uc720\ud558\ub294 \uacbd\uc6b0 \uacbd\uace0\ub97c \ud45c\uc2dc\ud558\ub77c.","title":"Enforcement"},{"location":"Interfaces/#i25-hierarchy","text":"","title":"I.25: \ud074\ub798\uc2a4 \uacc4\uce35(hierarchy)\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ucd94\uc0c1 \ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Interfaces/#reason_16","text":"\ucd94\uc0c1 \ud074\ub798\uc2a4(abstract class)\ub294 \uc0c1\ud0dc\uac00 \uc788\ub294 \ubd80\ubaa8 \ud074\ub798\uc2a4\ubcf4\ub2e4 \uc548\uc815\uc801\uc774\ub2e4.","title":"Reason"},{"location":"Interfaces/#example-bad_8","text":"\ub2f9\uc2e0\uc740 Shape \uc608\uc81c\ub97c \uc4f8 \uac83\uc774\ub77c\uace0 \uc608\uc0c1\ud588\uc744 \uac83\uc774\ub2e4. :-) class Shape { // bad: interface class loaded with data public : Point center () const { return c ; } virtual void draw () const ; virtual void rotate ( int ); // ... private : Point c ; vector < Point > outline ; Color col ; }; \uc774\ub807\uac8c \ud558\uba74 \ud30c\uc0dd\ub41c \ubaa8\ub4e0 \ud074\ub798\uc2a4\uac00 \uc911\uc2ec\uc744 \uacc4\uc0b0\ud558\uac8c \ub41c\ub2e4. \ube44\ub85d \uc911\uc694\ud558\uc9c0 \uc54a\uace0 \uc911\uc2ec\uc774 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub354\ub77c\ub3c4 \ub9d0\uc774\ub2e4. \ube44\uc2b7\ud558\uac8c, \ubaa8\ub4e0 Shape \uac00 Color \ub97c \uac16\uace0 \uc788\ub294 \uac83\uc740 \uc544\ub2c8\uba70 \ub9ce\uc740 Shape \ub4e4\uc740 \uc77c\ub828\uc758 Point \ub85c \uc815\uc758\ub41c \uc724\uacfd\uc120\uc5c6\uc774 \uac00\uc7a5 \uc798 \ud45c\ud604\ub41c\ub2e4. \ucd94\uc0c1 \ud074\ub798\uc2a4\ub294 \uc0ac\uc6a9\uc790\uac00 \uadf8\ub7ec\ud55c \ud074\ub798\uc2a4\ub97c \uc791\uc131\ud558\uc9c0 \ubabb\ud558\ub3c4\ub85d \ub9cc\ub4e4\uae30 \uc704\ud574 \uace0\uc548\ub418\uc5c8\ub2e4. class Shape { // better: Shape is a pure interface public : virtual Point center () const = 0 ; // pure virtual functions virtual void draw () const = 0 ; virtual void rotate ( int ) = 0 ; // ... // ... no data members ... // ... virtual ~ Shape () = default ; };","title":"Example, bad"},{"location":"Interfaces/#enforcement_16","text":"(\uac04\ub2e8\ud568) C \ud074\ub798\uc2a4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\uac00 C \uc758 \ubca0\uc774\uc2a4\ub97c \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130\uc5d0 \ud560\ub2f9\ub418\uace0 \ubca0\uc774\uc2a4 \ud074\ub798\uc2a4\uc5d0 \ub370\uc774\ud130 \uba64\ubc84\uac00 \uc788\uc73c\uba74 \uacbd\uace0\ud558\ub77c.","title":"Enforcement"},{"location":"Interfaces/#i26-abi-c","text":"","title":"I.26: \ud06c\ub85c\uc2a4 \ucef4\ud30c\uc77c\ub7ec ABI\ub97c \uc6d0\ud55c\ub2e4\uba74 C \uc2a4\ud0c0\uc77c \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Interfaces/#reason_17","text":"\ucef4\ud30c\uc77c\ub7ec\ub9c8\ub2e4 \ud074\ub798\uc2a4, \uc608\uc678 \ucc98\ub9ac, \ud568\uc218 \uc774\ub984 \ubc0f \uae30\ud0c0 \uad6c\ud604 \uc138\ubd80 \uc0ac\ud56d\uc5d0 \ub300\ud574 \uc11c\ub85c \ub2e4\ub978 \ubc14\uc774\ub108\ub9ac \ub808\uc774\uc544\uc6c3\uc744 \uad6c\ud604\ud55c\ub2e4.","title":"Reason"},{"location":"Interfaces/#exception_5","text":"\uc2e0\uc911\ud558\uac8c \uc120\ud0dd\ud55c \uba87 \uac00\uc9c0 \uace0\uae09 \uc218\uc900\uc758 C++ \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc2e0\uc911\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub2e4.","title":"Exception"},{"location":"Interfaces/#exception_6","text":"\uc77c\ubc18\uc801\uc778 ABI\ub294 \uc77c\ubd80 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \uc810\uc810 \ub354 \uc5c4\uaca9\ud55c \uc81c\ud55c\uc73c\ub85c\ubd80\ud130 \ubc97\uc5b4\ub098\uace0 \uc788\ub2e4.","title":"Exception"},{"location":"Interfaces/#note_24","text":"\ub2e8\uc77c \ucef4\ud30c\uc77c\ub7ec\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c C++ \uc804\uccb4\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc0c8 \ucef4\ud30c\uc77c\ub7ec \ubc84\uc804\uc73c\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc \ud55c \ud6c4\uc5d0\ub294 \ub2e4\uc2dc \ucef4\ud30c\uc77c\ud574\uc57c \ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Interfaces/#enforcement_17","text":"(\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc778\ud130\ud398\uc774\uc2a4\uac00 ABI\uc758 \uc77c\ubd80\uac00 \ub418\ub294 \ubd80\ubd84\uc744 \ud655\uc2e4\ud558\uac8c \uc2dd\ubcc4\ud558\uae30\ub294 \uc5b4\ub835\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i27-stable-abi-pimpl-idiom","text":"","title":"I.27: \ubcc0\ud654\uac00 \uc801\uc740(stable) ABI\ub97c \uc6d0\ud55c\ub2e4\uba74, Pimpl idiom \uc0ac\uc6a9\uc744 \uace0\ub824\ud558\ub77c"},{"location":"Interfaces/#reason_18","text":"private \ub370\uc774\ud130\ub294 \ud074\ub798\uc2a4\uc758 \uba54\ubaa8\ub9ac \ub808\uc774\uc544\uc6c3\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uace0 \uba64\ubc84 \ud568\uc218\ub4e4\uc740 \uc911\ubcf5\uc815\uc758\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uae30 \ub54c\ubb38\uc5d0, \uc774\ub7f0 \uad6c\ud604 \uc138\ubd80\uc0ac\ud56d\uc774 \ubc14\ub00c\ub294 \uacbd\uc6b0\uc5d4 \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uae4c\uc9c0 \ub2e4\uc2dc \ucef4\ud30c\uc77c\ub418\uc5b4\uc57c \ud55c\ub2e4. \uad6c\ud604\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130(Pimpl)\ub97c \uc0ac\uc6a9\ud558\ub294 \ub2e4\ud615\uc801\uc774\uc9c0 \uc54a\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub294 \uac04\uc811 \ucc38\uc870\ud558\ub294 \ube44\uc6a9\ub9cc\uc73c\ub85c \uad6c\ud604\uc774 \ubc14\ub00c\uc5c8\uc744\ub54c\uc758 \uc5ec\ud30c\ub97c \uc0ac\uc6a9\uc790\ub85c\ubd80\ud130 \ubd84\ub9ac\uc2dc\ud0ac \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_14","text":"\uc778\ud130\ud398\uc774\uc2a4 (widget.h) class widget { class impl ; std :: unique_ptr < impl > pimpl ; public : void draw (); // public API that will be forwarded to the implementation widget ( int ); // defined in the implementation file ~ widget (); // defined in the implementation file, where impl is a complete type widget ( widget && ) = default ; widget ( const widget & ) = delete ; widget & operator = ( widget && ); // defined in the implementation file widget & operator = ( const widget & ) = delete ; }; \uad6c\ud604 (widget.cpp) class widget :: impl { int n ; // private data public : void draw ( const widget & w ) { /* ... */ } impl ( int n ) : n ( n ) {} }; void widget :: draw () { pimpl -> draw ( * this ); } widget :: widget ( int n ) : pimpl { std :: make_unique < impl > ( n )} {} widget ::~ widget () = default ; widget & widget :: operator = ( widget && ) = default ;","title":"Example"},{"location":"Interfaces/#notes","text":"\uc774\ub7f0 \ubc29\ubc95\uc744 \uc801\uc6a9\ud588\uc744\ub54c\uc758 \uc601\ud5a5\uc744 \uc774\ud574\ud558\ub824\uba74 GOTW #100 \uc640 cppreference \ub97c \ud568\uaed8 \ubcf4\ub77c.","title":"Notes"},{"location":"Interfaces/#enforcement_18","text":"(\uc801\uc6a9 \ubd88\uac00\ub2a5) \uc5b4\ub290 \ubd80\ubd84\uc774 ABI\uc758 \uc778\ud130\ud398\uc774\uc2a4 \ubd80\ubd84\uc778\uc9c0 \ud655\uc2e4\ud788 \uad6c\ubd84\ud558\uae30 \ud798\ub4e4\ub2e4.","title":"Enforcement"},{"location":"Interfaces/#i30","text":"","title":"I.30: \uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294 \ucf54\ub4dc\ub294 \ucea1\uc290\ud654\ud558\ub77c"},{"location":"Interfaces/#reason_19","text":"\ucf54\ub4dc\ub97c \ub2e8\uc21c\ud558\uace0 \uc548\uc804\ud558\uac8c \uc720\uc9c0\ud55c\ub2e4. \ub54c\ub54c\ub85c \ub17c\ub9ac\uc801\uc774\uac70\ub098 \uc131\ub2a5\uc0c1\uc758 \uc774\uc720\ub85c \uc9c0\uc800\ubd84\ud558\uace0 \uc548\uc804\ud558\uc9c0 \uc54a\uc73c\uba70 \uc624\ub958\ub97c \uc77c\uc73c\ud0a4\uae30 \uc26c\uc6b4 \uae30\uc220\ub4e4\uc774 \ud544\uc694\ud560 \ub54c\ub3c4 \uc788\ub2e4. \uadf8\ub807\ub2e4\uba74, \uadf8 \ucf54\ub4dc\ub4e4\uc740 \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \ub178\ucd9c\uc2dc\ud0a4\uc9c0 \ub9d0\uace0 \uc9c0\uc5ed\uc801\uc73c\ub85c \uc720\uc9c0\ud558\ub77c. \uc774\ub294 \ubcf4\ub2e4 \ub9ce\uc740 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc774 \uc138\uc138\ud558\uac8c \uc54c \ud544\uc694\uac00 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \uad6c\ud604\uc758 \ubcf5\uc7a1\ud568\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4.","title":"Reason"},{"location":"Interfaces/#example_15","text":"( main \uc758 \uc778\uc790\ucc98\ub7fc) \ud2b9\uc815 \ud615\ud0dc\uc758 \uc785\ub825\uc5d0 \uc758\uc874\uc801\uc778 \ud504\ub85c\uadf8\ub7a8\uc744 \uc0dd\uac01\ud574\ubcf4\ub77c. \uc774\ub7f0 \ud504\ub85c\uadf8\ub7a8\uc740 \ud30c\uc77c, \ucee4\ub9e8\ub4dc\ub77c\uc778, \ud639\uc740 \ud45c\uc900 \uc785\ub825\uc73c\ub85c\ubd80\ud130 \uc785\ub825\uc744 \ubc1b\uc544\uc57c \ud55c\ub2e4. \uc544\ub9c8 \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uac83\uc774\ub2e4. bool owned ; owner < istream *> inp ; switch ( source ) { case std_in : owned = false ; inp = & cin ; break ; case command_line : owned = true ; inp = new istringstream { argv [ 2 ]}; break ; case file : owned = true ; inp = new ifstream { argv [ 2 ]}; break ; } istream & in = * inp ; \uc774\ub294 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\ub97c \ud53c\ud558\ub77c \ub294 \uaddc\uce59\uc744 \uc704\ubc18\ud55c\ub2e4. \ub610\ud55c \uc18c\uc720\uad8c\uc744 \ubb34\uc2dc \ud558\uba70, \ub9c8\ubc95 \uc0c1\uc218\ub97c \ud53c\ud558\ub77c \ub294 \uaddc\uce59\uc5d0\ub3c4 \ubc18\ud55c\ub2e4. \ud2b9\ud788, \uc774 \ucf54\ub4dc\ub294 \ub204\uad70\uac00 \uc5b4\ub518\uac00\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc57c \ud55c\ub2e4\ub294 \uc810\uc744 \uae30\uc5b5\ud574\uc57c\ub9cc \ud55c\ub2e4. if ( owned ) delete inp ; \uc774 \uc608\uc81c\uc5d0 \ud55c\ud574\uc11c\ub294 unique_ptr \ub97c \uc0ac\uc6a9\ud574 cin \uc5d0 \ud544\uc694\ud55c \uc18c\uba78 \ucf54\ub4dc\ub97c \ucc98\ub9ac\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ubb38\uc81c\ub97c \uc811\ud558\uae30 \uc26c\uc6b4 \ucd08\uc2ec\uc790(novices)\uc5d0\uac8c\ub294 \uadf8\ub7f0 \ubc29\ubc95\uc744 \uae30\ub300\ud558\uae30 \uc5b4\ub835\ub2e4. \ub3d9\uc2dc\uc5d0 \uc774 \ucf54\ub4dc\ub294 \uc815\uc801\uc778 \uc18d\uc131(\uc774 \uc608\uc2dc\uc5d0\uc11c\ub294, \uc18c\uc720\uad8c)\uc774 \uc2e4\ud589 \uc2dc\uac04\uc5d0 \uad00\ub9ac\ub418\ub294 \uc77c\ubc18\uc801\uc778 \ubb38\uc81c\uc758 \ud55c \uc0ac\ub840\uc5d0 \ubd88\uacfc\ud558\ub2e4. \ubcf4\ud3b8\uc801\uc73c\ub85c \uc790\uc8fc \ubcf4\uc774\uace0 \uc548\uc804\ud55c \uc608\uc2dc\ub4e4\uc740 \uc815\uc801\uc73c\ub85c \ud574\uacb0\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \uadf8\ub7f0 \ucf54\ub4dc\uc5d0\ub294 \ube44\uc6a9\uacfc \ubcf5\uc7a1\uc131\uc744 \ub354\ud558\uace0 \uc2f6\uc9c0 \uc54a\ub2e4. \ud558\uc9c0\ub9cc \ubcf4\ud3b8\uc801\uc774\uc9c0 \uc54a\uace0, \ub35c \uc548\uc804\ud55c, \uadf8\ub9ac\uace0 \ubd88\ud544\uc694\ud558\uac8c \ube44\uc6a9\uc774 \ub4dc\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \ub300\ucc98\ud574\uc57c \ud55c\ub2e4. \uc77c\ub840\uac00 Str15 \uc5d0\uc11c \ub2e4\ub8e8\uc5b4\uc9c4\ub2e4. \uacb0\ub860\uc801\uc73c\ub85c, \uc6b0\ub9ac\ub294 \uc774\ub7f0 \ud074\ub798\uc2a4\ub97c \uc791\uc131\ud560 \uac83\uc774\ub2e4. class Istream { [[ gsl :: suppress ( lifetime )]] public : enum Opt { from_line = 1 }; Istream () { } Istream ( zstring p ) : owned { true }, inp { new ifstream { p }} {} // read from file Istream ( zstring p , Opt ) : owned { true }, inp { new istringstream { p }} {} // read from command line ~ Istream () { if ( owned ) delete inp ; } operator istream & () { return * inp ; } private : bool owned = false ; istream * inp = & cin ; }; \uc774\uc81c \ub3d9\uc801\uc73c\ub85c \uacb0\uc815\ub418\ub294 istream \uc758 \uc18c\uc720\uad8c\uc774 \ucea1\uc290\ud654 \ub418\uc5c8\ub2e4. \uc544\ub9c8 \uc2e4\uc81c\ub85c\ub294 \uc7a0\uc7ac\uc801\uc778 \uc624\ub958\ub97c \uac80\uc0ac\ud558\ub294 \ucf54\ub4dc\uac00 \ub354 \ucd94\uac00\ub420 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Interfaces/#enforcement_19","text":"\uc5b4\ub835\ub2e4. \uc5b4\ub5a4 (\uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294) \ucf54\ub4dc\uac00 \ud544\uc218\uc801\uc778\uc9c0 \uacb0\uc815\ud558\uae30 \uc5b4\ub835\ub2e4 \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c \uaddc\uce59 \uc704\ubc18\uc744 \ud5c8\uc6a9\ud558\ub3c4\ub85d \uc81c\uc57d\ud558\ub294 \uacbd\uc6b0 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Introduction/","text":"In: \uc18c\uac1c \uc774 \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc740 \ubaa8\ub358 C++ (\ud604\uc7ac\ub294 C++17) \ubc0f \ucd94\ud6c4 \uac1c\uc120\ub420 \ub0b4\uc6a9\uacfc ISO \uae30\uc220 \uba85\uc138(Technical Specification; TS)\ub97c \uace0\ub824\ud55c \uac83\uc774\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubaa9\ud45c\ub294 C++ \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc774 \ub354 \uac04\ub2e8\ud558\uace0, \ud6a8\uacfc\uc801\uc774\uba70, \uc720\uc9c0\ubcf4\uc218\ud558\uae30 \uc88b\uc740 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub3c4\ub85d \ub3d5\ub294 \uac83\uc774\ub2e4. \uc18c\uac1c \uc694\uc57d: In.target: \ub300\uc0c1 \ub3c5\uc790 In.aims: \ubaa9\ud45c In.not: \ubaa9\ud45c\uac00 \uc544\ub2cc \uac83\ub4e4 In.force: \uac00\uc774\ub4dc\ub77c\uc778 \uc801\uc6a9 In.struct: \ubb38\uc11c\uc758 \uad6c\uc870 In.sec: \uc8fc\uc694 \ubaa9\ucc28 In.target: \ub300\uc0c1 \ub3c5\uc790 \ubaa8\ub4e0 C++ \ud504\ub85c\uadf8\ub798\uba38. \ub610\ud55c C\ub97c \uc0dd\uac01 \uc911\uc778 \ud504\ub85c\uadf8\ub798\uba38 . In.aims: \ubaa9\ud45c \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubaa9\uc801\uc740 \uac1c\ubc1c\uc790\ub4e4\uc774 \ubaa8\ub358 C++ (\ud604\uc7ac\ub294 C++17)\uc744 \ubc1b\uc544\ub4e4\uc774\uace0 \ubcf4\ub2e4 \uc77c\uad00\uc801\uc778 \ud615\ud0dc\uc758 \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c \ub2e4\ub8e8\uace0 \uc788\ub294 \uaddc\uce59\ub4e4\uc774 \ubaa8\ub4e0 \ucf54\ub4dc\uc5d0 \ud6a8\uacfc\uc801\uc73c\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\ub2e4\uace0 \uc0dd\uac01\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \uc624\ub798\ub41c \uc2dc\uc2a4\ud15c\uc744 \uc0c8\ub86d\uac8c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\ub294 \uac83\uc740 \uc27d\uc9c0 \uc54a\uc740 \uc77c\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\uae30\uc11c \ub2e4\ub8e8\ub294 \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud55c\ub2e4\uba74 \uae30\uc874\uc758 \ubc29\uc2dd\ubcf4\ub2e4 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uac00\ub2a5\uc131\uc774 \ub0ae\uace0, \uc720\uc9c0 \ubcf4\uc218\uac00 \ud3b8\ub9ac\ud55c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub77c \ud655\uc2e0\ud55c\ub2e4. \ub610\ud55c \uc774\ub7ec\ud55c \uaddc\uce59\ub4e4\uc740 \uac1c\ubc1c \ucd08\uae30\uc5d0 \uc880 \ub354 \ube60\ub974\uace0 \uc27d\uac8c \uac1c\ubc1c\uc744 \uc9c4\ud589\ud558\ub294 \ub370\ub3c4 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub2e4. \ubd84\uba85\ud788 \ub9d0\ud560 \uc218 \uc788\ub294 \uac83\uc740, \uc774\ub7ec\ud55c \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud558\uba74 \uc81c\ub85c-\ube44\uc6a9 \uc6d0\uce59(Zero-overhead principle)\uc5d0 \uc785\uac01\ud574 \uc774\uc804\ubcf4\ub2e4 \ub354 \ub098\uc740 \ub3d9\uc791\uc744 \uc218\ud589\ub418\ub294 \ucf54\ub4dc\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub2e4\ub294 \uc810\uc774\ub2e4. (\uc81c\ub85c-\ube44\uc6a9 \uc6d0\uce59\uc774\ub780 \"\uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ubd80\ubd84\uc5d0 \ube44\uc6a9\uc744 \ub0ad\ube44\ud558\uc9c0 \ub9c8\ub77c.\", \ub610\ub294 \"\uc62c\ubc14\ub978 \ucd94\uc0c1\ud654 \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud588\uc744 \uacbd\uc6b0, \uc801\uc5b4\ub3c4 \uc800\uc218\uc900 \uc5b8\uc5b4\ub85c \ud558\ub4dc\ucf54\ub529\ud55c \uac83 \ub9cc\ud07c\uc758 \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4.\" \uc815\ub3c4\ub85c \uc124\uba85\ud560 \uc218 \uc788\ub2e4.) \uc0c8\ub85c\uc6b4 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uac70\ub098 \uae30\uc874 \ucf54\ub4dc\ub97c \uac1c\uc120\ud560 \uc5ec\uc9c0\uac00 \uc0dd\uacbc\ub2e4\uba74, \uc801\uc6a9 \uac00\ub2a5\ud55c \uc218\uc900\uc5d0\uc11c \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud574 \ubcf4\uae30 \ubc14\ub780\ub2e4. In.0: \ub2f9\ud669\ud558\uc9c0 \ub9c8\ub77c! \uc5ec\ub7ec\ubd84\uc758 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \ub098\uc628 \uaddc\uce59\uc744 \uc801\uc6a9\ud55c\ub2e4\uba74, \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc5b4\ub5a4 \uc601\ud5a5\uc744 \uc904 \uc9c0 \ucda9\ubd84\ud788 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc740 \"\uc0c1\uc704 \uc9d1\ud569\uc758 \ud558\uc704 \uc9d1\ud569(Subset of superset)\" ( Stroustrup05 ) \uc6d0\ub9ac\uc5d0 \ub530\ub77c \uad6c\uc131\ub418\uc5b4 \uc788\ub2e4. \uc6b0\ub9ac\ub294 \uc2e0\ub8b0\uc131, \uc548\uc815\uc131, \uc131\ub2a5 \ub4f1\uc744 \uace0\ub824\ud574 \ub2e8\uc21c\ud788 C++\uc758 \ud55c \ubd80\ubd84 \uc9d1\ud569\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub300\uc2e0, \uba87 \uac00\uc9c0 \uac04\ub2e8\ud55c \"\ud655\uc7a5\" ( \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac )\uc744 \uc0ac\uc6a9\ud558\uae38 \uac15\ub825\ud788 \uad8c\uace0\ud55c\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc26c\uc6b4 C++ \uae30\ub2a5\ub4e4\uc758 \ub300\ubd80\ubd84\uc744 \uc81c\uac70\ud560 \uc218 \uc788\ub2e4. \uaddc\uce59\ub4e4\uc740 \uc815\uc801 \ud0c0\uc785 \uc548\uc815\uc131\uacfc \ub9ac\uc18c\uc2a4 \uc548\uc815\uc131\uc5d0 \uc8fc\uc548\uc810\uc744 \ub450\uace0 \uc788\ub2e4. \uc774\ub7ec\ud55c \uc774\uc720\ub85c \ubc94\uc704 \ud655\uc778 \uac00\ub2a5\uc131, nullptr \ub97c \ud1b5\ud55c \uc5ed\ucc38\uc870 \ud68c\ud53c \uac00\ub2a5\uc131, \ub315\uae00\ub9c1 \ud3ec\uc778\ud130(Dangling pointer) \ud68c\ud53c \uac00\ub2a5\uc131, (RAII\ub97c \ud1b5\ud55c) \uc2dc\uc2a4\ud15c\uc801\uc778 \uc608\uc678 \uc0ac\uc6a9 \ub4f1\uc744 \uac15\uc870\ud55c\ub2e4. \uc798 \uc54c\ub824\uc838 \uc788\uc9c0 \uc54a\uc740 \uc18c\uc2a4 \ucf54\ub4dc\uc758 \uc624\ub958 \ubc1c\uc0dd \uac00\ub2a5\uc131\uc744 \ubd80\ubd84\uc801\uc73c\ub85c\ub098\ub9c8 \uadf9\ubcf5\ud558\uace0 \ucd5c\uc18c\ud654 \ud558\ub294 \ubc29\ubc95, \uc880 \ub354 \ub2e8\uc21c\ud55c \ud45c\ud604 \ubc29\uc2dd\ubfd0 \uc544\ub2c8\ub77c \uc62c\ubc14\ub974\uac8c \uc815\uc758\ub41c \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \ubcf5\uc7a1\ub3c4\ub97c \ub4dc\ub7ec\ub0b4\uc9c0 \uc54a\ub294 \ubc29\ubc95 \ub4f1\uc744 \uac15\uc870\ud55c\ub2e4. \ub9ce\uc740 \uaddc\uce59\ub4e4\uc740 \uaddc\ubc94\uc801\uc778 \uc131\uaca9\uc744 \ub744\uace0 \uc788\ub2e4. \ub300\uc548\ub3c4 \uc5c6\uc774 \uadf8\uc800 \"\uadf8\ub807\uac8c \ud558\uc9c0 \ub9c8\ub77c!\"\ub77c\uace0\ub9cc \ud558\ub294 \uaddc\uce59\ub4e4\uc740 \ubd88\ud3b8\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. \uc77c\ubd80 \uaddc\uce59\ub4e4\uc740 \uae30\uacc4\uc801\uc73c\ub85c \uc815\ubc00 \uac80\uc99d\ud560 \uc218 \uc788\ub2e4\uae30 \ubcf4\ub2e4\ub294 \uacbd\ud5d8\uc5d0 \uadfc\uac70\ud558\uc5ec \uc791\uc131\ub418\uc5c8\ub2e4. \ub2e4\ub978 \ubd80\ub958\uc758 \uaddc\uce59\ub4e4\uc740 \uc77c\ubc18\uc801\uc778 \uc6d0\uce59\uc744 \ub17c\ub9ac\uc801\uc73c\ub85c \uc815\ub9ac\ud55c \uac83\uc774\uba70, \ub110\ub9ac \uc0ac\uc6a9\ub420 \uac83\uc774\ub77c \uc0dd\uac01\ub418\ub294 \uaddc\uce59\ub4e4\uc740 \ub354\uc6b1 \uc790\uc138\ud558\uac8c, \uadf8\ub9ac\uace0 \ubd80\ubd84\uc801\uc73c\ub85c\ub098\ub9c8 \uac80\uc99d\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ud588\ub2e4. \ub610\ud55c \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc740 C++\uc5d0\uc11c \ud575\uc2ec\uc774 \ub418\ub294 \ub0b4\uc6a9\uacfc \uadf8 \uc0ac\uc6a9\ubc95\uc744 \ub2e4\ub8e8\uace0 \uc788\uae30\ub3c4 \ud558\ub2e4. \uc870\uc9c1\uc758 \uaddc\ubaa8\uac00 \ub9e4\uc6b0 \ud06c\uac70\ub098, \ud2b9\ud654\ub41c \ubd84\uc57c\uc758 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\uac70\ub098, \ud504\ub85c\uc81d\ud2b8\uc758 \uaddc\ubaa8\uac00 \ub9e4\uc6b0 \ud06c\ub2e4\uba74 \uc5ec\uae30\uc11c \ub2e4\ub8e8\ub294 \ub0b4\uc6a9\ubcf4\ub2e4 \ub354 \ub2e4\uc591\ud55c \uaddc\uce59\uacfc \uc81c\uc57d, \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud544\uc694\ud560 \uac83\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uace0\ub3c4\uc758 \uc2e4\uc2dc\uac04 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\ub294 \uacbd\uc6b0\ub77c\uba74 \uc790\uc720 \uc800\uc7a5\uc18c(Free Store, \ub3d9\uc801 \uba54\ubaa8\ub9ac)\ub97c \uc544\ubb34\ub807\uac8c\ub098 \uc0ac\uc6a9\ud558\uba74 \uc548\ub418\uae30 \ub54c\ubb38\uc5d0, \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc120\ud0dd\ud558\ub294\ub370 \uc81c\uc57d\uc774 \uc788\uc744 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. \uc774\ucc98\ub7fc \ud2b9\ud654\ub41c \uac1c\ubc1c \ubd84\uc57c\uc5d0\ub9cc \uc801\uc6a9 \ud560 \uc218 \uc788\ub294 \uaddc\uce59\ub4e4\uc740 \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubd80\ub85d\uc5d0 \ub2f4\uc558\ub2e4. \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\uc640 \uac19\uc774 \uc800\uc218\uc900\uc758 \ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd\uc744 \uace0\uc218\ud558\uae30 \ubcf4\ub2e4\ub294 \ud575\uc2ec \uae30\ub2a5\uc744 \uad6c\ud604\ud558\uace0 \uc788\ub294 \uc18c\uaddc\ubaa8\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ub9cc\ub4e4\uace0 \uc0ac\uc6a9\ud558\uae30 \ubc14\ub780\ub2e4. \uaddc\uce59\ub4e4\uc740 \uc810\uc9c4\uc801\uc73c\ub85c \uc801\uc6a9 \ud574 \ubcfc \uc218 \uc788\ub2e4. \uc77c\ubd80 \uaddc\uce59\ub4e4\uc740 \uc548\uc815\uc131\uc744 \ub192\uc774\uae30 \uc704\ud574 \ub2e4\uc591\ud55c \ubc29\ubc95\ub4e4\uc744 \uc124\uba85\ud558\uace0 \uc788\uc73c\uba70, \ub610 \ub2e4\ub978 \uaddc\uce59\ub4e4\uc740 \ubb38\uc81c \ubc1c\uc0dd \uac00\ub2a5\uc131\uc744 \ub0ae\ucd94\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud558\uace0 \uc788\ub2e4. \ud639\uc740 \uc774 \ub458\uc744 \ubaa8\ub450 \uace0\ub824\ud574 \ub9cc\ub4e4\uc5b4\uc9c4 \uaddc\uce59\ub4e4\ub3c4 \uc788\ub2e4. \uc0ac\uace0\ub97c \uc608\ubc29\ud558\uae30 \uc704\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ub54c\ub85c\ub294 \ud569\ubc95\uc801\uc778(legal) C++\uc5d0 \ubc18\ub300\ub418\uae30\ub3c4 \ud55c\ub2e4. \uaddc\uce59\uc744 \ud1b5\ud574 \uc804\ub2ec\ud558\uace0\uc790 \ud558\ub294 \ub0b4\uc6a9\uc744 \uae30\uc220\ud560 \ub54c \ud1b5\uc0c1 \uc624\ub958 \ubc1c\uc0dd \uac00\ub2a5\uc131\uc774 \ub192\uc740 \uacbd\uc6b0\uc640 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uac00 \uc788\ub2e4\uba74, \uac00\ub2a5\ud55c \uc624\ub958 \ubc1c\uc0dd \uac00\ub2a5\uc131\uc774 \ub0ae\uc740 \ubc29\ubc95\uc744 \ud0dd\ud588\ub2e4. In.not: \ubaa9\ud45c\uac00 \uc544\ub2cc \uac83\ub4e4 \ucd5c\uc18c\ud55c\uc758 \uaddc\uce59\ub9cc\uc744 \uc815\uc758\ud558\uac70\ub098, \uaddc\uce59\ub4e4\uc774 \uc11c\ub85c\ub97c \uc704\ubc18\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc791\uc131\ud55c \uac83\uc740 \uc544\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \ubc94\uc6a9\uc801\uc778 \uaddc\uce59\ub4e4 \uc911\uc5d0\ub294 \uac04\ub2e8\ud574 \ubcf4\uc774\uc9c0\ub9cc \uc2e4\uc81c\ub85c \uc801\uc6a9\ud558\uae30\uac00 \ub9e4\uc6b0 \uc5b4\ub824\uc6b4 \uac83\ub4e4\ub3c4 \uc788\uc73c\uba70, \uadf8\ub7ec\ud55c \uaddc\uce59\ub4e4\uc774 \uc9c0\ub2cc \ud568\ucd95\uc801\uc778 \uc758\ubbf8\ub97c \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218\ub3c4 \uc788\ub2e4. \uad6c\uccb4\uc801\uc778 \uaddc\uce59\ub4e4\uc774 \uc880 \ub354 \uc774\ud574 \ubc0f \uc801\uc6a9\ud558\uae30 \uc27d\uc9c0\ub9cc, \ubc94\uc6a9\uc801\uc778 \uaddc\uce59\ub4e4\uc744 \ub2e4\ub8e8\uc9c0 \uc54a\uace0\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\ub9cc\uc744 \uc7a5\ud669\ud558\uac8c \ub098\uc5f4\ud560 \uc218 \ubc16\uc5d0 \uc5c6\uc5c8\uc744 \uac83\uc774\ub2e4. \uac01\uac01\uc758 \uaddc\uce59\ub4e4\uc740 \ucd08\ubcf4 \uac1c\ubc1c\uc790 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc804\ubb38\uac00\ub4e4\uc5d0\uac8c\ub3c4 \ub3c4\uc6c0\uc774 \ub420 \uc218 \uc788\ub3c4\ub85d \uc791\uc131\ud588\ub2e4. \uc77c\ubd80 \uaddc\uce59\uc740 \ubc18\ub4dc\uc2dc \uc801\uc6a9\ub418\uc5b4\uc57c \ud558\uc9c0\ub9cc, \ud544\uc694\uc5d0 \ub530\ub77c \uc801\uc6a9 \uc5ec\ubd80\ub97c \uc120\ud0dd\uc801\uc73c\ub85c \uacb0\uc815\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. \uc5ec\uae30\uc11c \ub2e4\ub8e8\ub294 \uaddc\uce59\ub4e4\uc744 \ucc45\uc5d0\uc11c \ub2e4\ub8e8\ub294 \uac83\uc778\ub0e5 \ub108\ubb34 \uc2ec\uac01\ud558\uac8c \ubc1b\uc544\ub4e4\uc744 \ud544\uc694\ub294 \uc5c6\ub2e4. \ub9c1\ud06c\ub97c \ud1b5\ud574\uc11c \uaddc\uce59\ub4e4\uc744 \uac00\ubccd\uac8c \uc0b4\ud3b4\ubcf4\ub294 \uac83\ub3c4 \uad1c\ucc2e\ub2e4. \uc0ac\uc2e4 \uc774\ucc98\ub7fc \uaddc\uce59\uc744 \uc5c4\ubc00\ud558\uac8c \uc815\uc758\ud55c \uc774\uc720\ub294 \uaddc\uce59\ub4e4\uc744 \uc704\ubc30\ud55c \ucf54\ub4dc\ub97c \ucc3e\uace0, \uadf8\uc5d0 \ub300\ud55c \ub9c1\ud06c \uc815\ubcf4\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ud234\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\uc774\ub2e4. \uc989, \uaddc\uce59\uc774 \ub9cc\ub4e4\uc5b4\uc9c4 \uc774\uc720\ub97c \uc124\uba85\ud558\uace0, \ub9cc\uc57d \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\uc558\uc744 \ub54c \uc5b4\ub5a4 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uace0, \uadf8 \ubb38\uc81c\ub97c \uc5b4\ub5bb\uac8c \ud574\uacb0\ud560 \uc218 \uc788\ub294\uc9c0\ub97c \uc54c\ub824\uc8fc\uae30 \uc704\ud574\uc11c\ub2e4. \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc740 C++ \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ub300\uccb4\ud560 \uc6a9\ub3c4\ub85c \uc791\uc131\ub41c \uac83\uc774 \uc544\ub2c8\ub2e4. \uac1c\ubc1c\uc790\uc758 \uc218\uc900\uc5d0 \ubd80\ud569\ud558\ub294 \ud29c\ud1a0\ub9ac\uc5bc\uc774 \ud544\uc694\ud558\ub2e4\uba74, \ucc38\uace0 \ubb38\ud5cc \uc744 \ucc38\uc870\ud558\uae30 \ubc14\ub780\ub2e4. \uc774 \ubb38\uc11c\ub294 \uae30\uc874\uc758 C++ \ucf54\ub4dc\ub97c \ubaa8\ub358 C++ \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \ub2e4\ub8e8\uace0 \uc788\ub294 \uac83\ub3c4 \uc544\ub2c8\ub2e4. \ub2e4\ub9cc, \uc0c8\ub85c\uc6b4 C++ \ucf54\ub4dc\uc5d0 \ub300\ud55c \ub17c\ub9ac \uc815\uc5f0\ud55c \uc0dd\uac01\ub4e4\uc744 \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ud55c\ub2e4. \ub530\ub77c\uc11c \uae30\uc874 \ucf54\ub4dc\ub97c \ubaa8\ub358\ud558\uac8c, \uc80a\uace0 \ud65c\uae30\ucc28\uac8c, \uc5c5\uadf8\ub808\uc774\ub4dc \ud558\uace0 \uc2f6\ub2e4\uba74 \ubaa8\ub358 C++ \ucf54\ub4dc \ub97c \ucc38\uc870\ud558\uae30 \ubc14\ub780\ub2e4. \uc911\uc694\ud55c \uac83\uc740 \uc774 \ubb38\uc11c\uc5d0\uc11c \ub2e4\ub8e8\uace0 \uc788\ub294 \uaddc\uce59\ub4e4\uc744 \uc810\uc9c4\uc801\uc73c\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uc810\uc774\ub2e4. \uc5c4\uccad\ub09c \uc591\uc758 \ucf54\ub4dc\ub97c \ub2e8\ubc88\uc5d0 \ubc14\uafc0 \uc218\ub294 \uc5c6\ub294 \ub178\ub987\uc774\ub2e4. \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc5b8\uc5b4\uc758 \uae30\uc220 \uc138\ubd80 \uc0ac\ud56d\uc744 \uc644\ubcbd\ud558\uac8c, \ub610\ub294 \uc815\ud655\ud558\uac8c \uc124\uba85\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \uc5b8\uc5b4\uc758 \uba85\uc138, \uc77c\ubc18 \uaddc\uce59\uc5d0 \ub300\ud55c \uc608\uc678 \uc0ac\ud56d, \uadf8 \uc678 \uc138\ubd80 \uae30\ub2a5\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 ISO C++ \ud45c\uc900\uc744 \ucc38\uc870\ud558\uae30 \ubc14\ub780\ub2e4. \uaddc\uce59\ub4e4\uc744 \uc791\uc131\ud560 \ub54c C++\uc758 \uc77c\ubd80 \uae30\ub2a5\ub9cc\uc744 \uc774\uc6a9\ud574 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub3c4\ub85d \uc758\ub3c4\ud558\uc9c0\ub294 \uc54a\uc558\ub2e4. \ub9c8\uce58 C++\uc758 \uc77c\ubd80\ub9cc\uc744 \ub5bc\uc5b4\ub193\uc740 Java\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ucc98\ub7fc \uac15\uc81c\ud558\uae30 \uc704\ud568\uc740 \uc808\ub300\ub85c \uc544\ub2c8\ub77c\ub294 \uac83\uc774\ub2e4. \"\ub2e8 \ud558\ub098\uc758 \uc62c\ubc14\ub978 C++\" \uc5b8\uc5b4\ub77c\ub294 \uc2dd\uc758 \uc815\uc758 \ub610\ud55c \uc758\ub3c4\ud558\ub294 \ubc14\uac00 \uc544\ub2c8\ub2e4. \ub2e4\ub9cc \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \ud3ec\ud568\ub41c \uaddc\uce59\uc744 \ud1b5\ud574\uc11c C++\ub77c\ub294 \uc5b8\uc5b4\uac00 \uc131\ub2a5\uacfc \ud0c0\ud611\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c\ub3c4 \ud48d\ubd80\ud55c \ud45c\ud604\ub825\uc744 \uc9c0\ub2cc \uc5b8\uc5b4\ub77c\ub294 \uc810\uc744 \uac15\uc870\ud558\uace0\uc790 \ud588\ub2e4. \uc138\ubd80 \uaddc\uce59\ub4e4\uc744 \ud1b5\ud574\uc11c \uc804\ub2ec\ud558\ub824\ub294 \uac00\uce58\ub294 \uba85\ud655\ud558\ub2e4. \uae30\uc874\uc758 C++ \ucf54\ub4dc\ubcf4\ub2e4 \ub354\uc6b1 \uac04\ub2e8\ud558\uace0, \uc62c\ubc14\ub974\uace0, \uc548\uc804\ud55c \ucf54\ub4dc\ub97c \uc131\ub2a5\uc744 \uc190\ud574\ubcf4\uc9c0 \uc54a\uace0 \uc791\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uac83\uc774\ub2e4. \ub610\ud55c \uc720\ud6a8\ud55c C++ \ucf54\ub4dc\uc774\uae34 \ud558\uc9c0\ub9cc \uc624\ub958\ub97c \uc720\ubc1c\ud560 \uac00\ub2a5\uc131\uc774 \ub192\uace0, \ubd88\ud544\uc694\ud558\uac8c \ubcf5\uc7a1\ud558\uace0, \uc131\ub2a5\ub3c4 \uc88b\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub97c \ud53c\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uac83\uc774\ub2e4. \uaddc\uce59\ub4e4\uc774 \uc644\ubcbd\ud558\uc9c0\ub294 \uc54a\ub2e4. \uaddc\uce59\uc774 \uc8fc\uc5b4\uc9c4 \uc0c1\ud669\uc5d0\uc11c \uc720\uc775\ud55c \uc694\uc18c\ub97c \uae08\uc9c0\ud560 \uc218\ub3c4 \uc788\ub2e4. \uaddc\uce59\uc774 \uc8fc\uc5b4\uc9c4 \uc0c1\ud669\uc5d0\uc11c \uc911\ub300\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\uc744 \ub9c9\uc9c0 \ubabb\ud560 \uc218\ub3c4 \uc788\ub2e4. \uaddc\uce59\uc774 \ubaa8\ud638\ud558\uace0, \uc2e4\ud589 \ubd88\uac00\ub2a5\ud558\uace0, \ubb38\uc81c\ub97c \uc704\ud55c \ubaa8\ub4e0 \ud574\uacb0\ucc45\uc744 \uc5f4\uc5b4\ub193\uc74c\uc73c\ub85c\uc368 \ub354 \ub9ce\uc740 \ud574\ub85c\uc6c0\uc744 \uac00\uc838\uc62c \uc218 \uc788\ub2e4. \"\uc5b4\ub5a0\ud55c \ud574\ub85c\uc6c0\ub3c4 \uc5c6\ub294\" \uae30\uc900\uc744 \uc644\ubcbd\ud558\uac8c \ub9cc\uc871\ud558\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4 \uc6b0\ub9ac\uc758 \ubaa9\ud45c\ub294, \ub300\uc2e0, \"\ub2e4\uc218\uc758 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc5d0\uac8c \uac00\uc7a5 \uc88b\uc740 \uac83\"\uc744 \uc704\ud55c \uae30\uc900\uc744 \uc81c\uc2dc\ud558\ub294 \uac83\uc774\ub2e4. \uaddc\uce59\uc744 \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub530\ub974\uc9c0 \uc54a\uac70\ub098 \ubb34\uc2dc\ud574\ub3c4 \uc88b\ub2e4. \ud558\uc9c0\ub9cc \uaddc\uce59\uc774 \ubb34\uc758\ubbf8\ud574\uc9c0\uae30 \uc804\uae4c\uc9c0\ub294 \ud3c4\ud558\ud558\uc9c0 \ub9d0\ub77c. \ub610 \uac00\ub2a5\ud558\ub2e4\uba74, \uac1c\uc120 \uc0ac\ud56d\uc744 \uc81c\uc548\ud558\uae30\ub97c \ubc14\ub780\ub2e4. In.force: \uac00\uc774\ub4dc\ub77c\uc778 \uc801\uc6a9 \uc0ac\uc2e4\uc0c1 \ub2e4\uc591\ud55c \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud558\ub3c4\ub85d \uac15\uc81c\ud558\uc9c0 \uc54a\uace0\uc11c\ub294 \uc774\ub7ec\ud55c \uaddc\uce59\ub4e4\uc774 \ubc29\ub300\ud55c \ucf54\ub4dc\uc5d0 \ubaa8\ub450 \uc801\uc6a9\ub418\ub9ac\ub77c\uace0 \uae30\ub300\ud558\uae30\ub294 \uc5b4\ub835\ub2e4. \uc2e4\uc0c1, \ubaa8\ub4e0 \uaddc\uce59\uc744 \uac15\uc81c\uc801\uc73c\ub85c \uc801\uc6a9\ud558\ub294 \uac83\uc740 \uaddc\uce59\uc758 \uc218\uac00 \uba87 \uac1c \ub418\uc9c0 \uc54a\uac70\ub098 \ud2b9\uc218\ud55c \uc0ac\uc6a9\uc790 \uc9d1\ub2e8\uc5d0\uc11c\ub098 \uac00\ub2a5\ud55c \uc77c\uc77c\uc9c0\ub3c4 \ubaa8\ub974\uaca0\ub2e4. \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc740 \ubaa8\ub4e0 \uc0ac\ub78c\ub4e4\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub2e4\uc591\ud55c \uaddc\uce59\ub4e4\uc744 \uc6d0\ud55c\ub2e4 \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc740 \uc11c\ub85c \ub2e4\ub978 \uaddc\uce59\ub4e4\uc744 \uac16\ub294\ub2e4 \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc740 \ubc29\ub300\ud55c \uaddc\uce59\uc744 \ubaa8\ub450 \uc77d\uace0 \uc2f6\uc5b4\ud558\uc9c0 \uc54a\ub294\ub2e4 \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc740 \uc218\ub9ce\uc740 \uaddc\uce59\ub4e4\uc744 \uae30\uc5b5\ud560 \uc218 \uc5c6\ub2e4 \uc774\ub7ec\ud55c \uc774\uc720\ub85c \ub2e4\uc591\ud55c \uc694\uad6c \uc0ac\ud56d\ub4e4\uc758 \uacf5\ud1b5\uc801\uc778 \ubd80\ubd84\ub9cc\uc744 \ubf51\uc544\ub0b4\ub824\uace0 \ud574\ubd24\ub2e4. \uadf8\ub7ec\ub098 \uc784\uc758\uc758 \uaddc\uce59\uc744 \uc815\ud558\ub294 \uac83 \uc870\ucc28 \ud63c\ub3c8\uc744 \ucd08\ub798\ud560 \uac83\uc774\ub2e4 \uc6b0\ub9ac\ub294 \ub354 \ub9ce\uc740 \uac1c\ubc1c\uc790\ub4e4\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub418\uace0, \ucf54\ub4dc\ub97c \uc880 \ub354 \uac04\uacb0\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc73c\uba70, \uae30\uc874 \ucf54\ub4dc\ub97c \ubaa8\ub358\ud654 \ud560 \uc218 \uc788\ub294 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub9cc\ub4e4\uace0 \uc2f6\uc5c8\ub2e4. \uac1c\uc778\uc758 \uc120\ud0dd\uc758 \ubb38\uc81c\ub77c\uac70\ub098 \uad00\ub9ac\uc758 \uc555\ubc15\uc73c\ub85c \uc778\ud574 \uc2e0\uacbd\uc4f0\uc9c0 \uc54a\uc558\ub358 \ubd80\ubd84\ub4e4\ub3c4 \ub3c4\uc678\uc2dc\ud558\uc9c0 \uc54a\uace0 \ucd5c\uc120\uc758 \uc2e4\uc6a9\uc801\uc778 \uc608\ub97c \ub2e4\ub8e8\uace0\uc790 \ud588\ub2e4. \ubc14\ub77c\uac74\ub300 \ubaa8\ub4e0 \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\ub2e4\uace0 \uc0dd\uac01\ud55c\ub2e4. \uadf8\ub807\uac8c \ud574\uc57c\ub9cc \ucd5c\uace0\uc758 \uc774\ub4dd\uc744 \ubcf8\ub2e4\uace0 \uc0dd\uac01\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub294 \uaf64\ub098 \uc2ec\uac01\ud55c \ub51c\ub808\ub9c8\uac00 \uc544\ub2d0 \uc218 \uc5c6\ub294\ub370, \uc6b0\ub9ac\ub294 \uc774\ub7ec\ud55c \ub51c\ub808\ub9c8\uc758 \ud574\uacb0\ucc45\uc774 \ud234\uc744 \uac1c\ubc1c\ud558\ub294 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud588\ub2e4. \uac01\uac01\uc758 \uaddc\uce59\ub4e4\uc740 \uc801\uc6a9 \ubc29\ubc95\uc744 \uc124\uba85\ud558\uace0 \uc788\ub294 Enforcement \ub2e8\ub77d\uc744 \uac16\uace0 \uc788\ub294\ub370, \ucf54\ub4dc \ub9ac\ubdf0, \uc815\uc801 \ubd84\uc11d, \ucef4\ud30c\uc77c\ub7ec, \ub7f0\ud0c0\uc784 \uccb4\ud06c \ub4f1\uc758 \ubc29\ubc95\uc744 \ub098\uc5f4\ud558\uace0 \uc788\ub2e4. \uc5b4\ub5a4 \ubc29\uc2dd\uc774\ub4e0 \uc6b0\ub9ac\ub294 \"\uae30\uacc4\uc801\"\uc774\uba70(\uc0ac\ub78c\uc740 \ub290\ub9ac\uae30\ub3c4 \ud558\uace0, \uc27d\uac8c \uc9c0\ub8e8\ud574 \ud560 \uc218 \uc788\uc73c\ubbc0\ub85c) \uc77c\uad00\ub41c \ubc29\ubc95\uc73c\ub85c \uac1c\ubcc4 \uaddc\uce59\ub4e4\uc774 \uc801\uc6a9\ub418\uae30\ub97c \uc6d0\ud588\ub2e4. \uc774\ub7f0 \uc774\uc720\ub85c \ub7f0\ud0c0\uc784 \uccb4\ud06c\ub294 \ub2e4\ub978 \ub300\uc548\uc774 \uc5c6\uc744 \uacbd\uc6b0\uc5d0 \ud55c\ud574\uc11c\ub9cc \uc5b8\uae09\ud588\ub2e4. \uc774 \uac19\uc740 \ub0b4\uc6a9\ub4e4\uc744 \uc5ec\uae30\uc800\uae30\uc5d0 \ud769\uc5b4\ub193\uae30 \ubcf4\ub2e4\ub294 \uc0ac\uc6a9\uc790\uac00 \uc6d0\ud560 \uacbd\uc6b0 \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\ub3c4\ub85d \ud558\uace0 \uc2f6\uc5c8\uae30\uc5d0, ( Enforcement \ub2e8\ub77d \ub0b4\uc5d0) \uc801\uc808\ud55c \uc704\uce58\ub77c\uace0 \uc0dd\uac01\ub418\ub294 \uacf3\uc5d0 \uc5f0\uad00\ub41c \uaddc\uce59\ub4e4\uc744 \"\ud504\ub85c\ud544\"\uc774\ub77c\ub294 \uc774\ub984\uc73c\ub85c \ub098\uc5f4\ud574 \ub450\uc5c8\ub2e4. \ud558\ub098\uc758 \uaddc\uce59\uc740 \uc5ec\ub7ec \ud504\ub85c\ud544\uc5d0 \uc18d\ud560 \uc218 \uc788\uc73c\uba70, \uc5b4\ub5a4 \ud504\ub85c\ud544\uc5d0\ub3c4 \uc18d\ud558\uc9c0 \uc54a\uc740 \uaddc\uce59\ub4e4\ub3c4 \uc788\ub2e4. \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \ud504\ub85c\ud544 \uba87 \uac00\uc9c0\ub97c \uba3c\uc800 \uc0b4\ud3b4\ubcf4\uc790. \ud0c0\uc785 : (\uce90\uc2a4\ud305, \uacf5\uc6a9\uccb4, \uac00\ubcc0 \uc778\uc218\ub97c \ud1b5\ud574 T \ub97c U \ub85c \uc7ac\ud574\uc11d \ud558\ub294) \ud0c0\uc785 \uc704\ubc18 \uc5c6\uc74c \ud55c\uacc4 : (\ubc30\uc5f4\uc758 \ubc94\uc704\ub97c \ub118\uc5b4\uc11c \uc811\uadfc\ud558\ub294) \ubc94\uc704 \uc704\ubc18 \uc5c6\uc74c \uc218\uba85 : ( delete \ub098 delete[] \uc774 \uc2e4\ud328\ud558\ub294) \ub204\uc218 \uc5c6\uc74c, ( nullptr \ub97c \uc5ed\ucc38\uc870\ud558\uace0 \ub315\uae00\ub9c1\ub41c \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574) \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac1c\uccb4\uc5d0 \uc811\uadfc\ud558\uc9c0 \uc54a\uc74c \ud504\ub85c\ud544\uc740 \ud234\uc5d0\uc11c \ud65c\uc6a9\ud560 \uc6a9\ub3c4\ub85c \ub9cc\ub4e4\uc5c8\uc9c0\ub9cc, \ub0b4\uc6a9\uc744 \uc77d\uc5b4\ubcf4\uba74 \ub9ce\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uc801\uc6a9 \ub2e8\ub77d\uc744 \ub2e8\uc21c\ud788 \uc6b0\ub9ac\uac00 \uc54c\uace0 \uc788\ub294 \uc801\uc6a9 \ubc29\ubc95\uc744 \uc81c\uc2dc\ud558\ub294 \uac83\uc73c\ub85c\ub9cc \uc81c\ud55c\ud558\uace0 \uc2f6\uc9c0 \uc54a\ub2e4. \ub2e8\ub77d \uc911 \uc77c\ubd80\ub294 \ud234 \uac1c\ubc1c\uc790\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub420\ub9cc\ud55c \ub0b4\uc6a9\uc77c \uac83\uc774\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc758 \uaddc\uce59\ub4e4\uc744 \uad6c\ud604\ud55c \ud234\uc5d0\uc11c\ub294 \uba85\uc2dc\uc801\uc73c\ub85c \uaddc\uce59\uc744 \ubb34\uc2dc\ud558\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ubb38\ubc95\uc744 \uc9c0\uc6d0\ud558\uae30\ub97c \ubc14\ub780\ub2e4: [[ gsl :: suppress ( tag )]] \uc5ec\uae30\uc11c \"tag\"\ub294 HTML anchor\uc758 \uc774\ub984\uc73c\ub85c, \uac00\uc774\ub4dc\ub77c\uc778 \ub0b4\uc5d0\uc11c \uaddc\uce59\uc774 \uc788\ub294 \uc9c0\uc810\uc744 \uc758\ubbf8\ud55c\ub2e4. (\uac00\ub839, C.134 \uaddc\uce59\uc758 \uacbd\uc6b0, Anchor \uac12\uc740 \"Rh-public\"\uc774\ub2e4. ) In.struct: \ubb38\uc11c\uc758 \uad6c\uc870 \uac01 \uaddc\uce59(\uac00\uc774\ub4dc\ub77c\uc778, \uc81c\uc548)\uc740 \uc5ec\ub7ec \ubd80\ubd84\uc73c\ub85c \ub098\ub25c\ub2e4. \uaddc\uce59 \uadf8 \uc790\uccb4 -- \uc608) new \ub97c \ubb34\ubc29\ube44 \uc0c1\ud0dc\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c \uaddc\uce59 \ucc38\uc870 \ubc88\ud638 -- \uc608), C.7 (\ud074\ub798\uc2a4\uc640 \uad00\ub828\ub41c 7\ubc88\uc9f8 \uaddc\uce59). \uc8fc\uc694 \ub2e8\uc6d0\uc774 \uc21c\uc11c\ub300\ub85c \ub098\uc5f4\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uaddc\uce59 \ucc38\uc870 \"\ubc88\ud638\"\uc758 \uccab \ubc88\uc9f8 \ubd80\ubd84\uc740 \ubb38\uc790\ub85c \uc2dc\uc791\ud55c\ub2e4. \uaddc\uce59\uc744 \ucd94\uac00\ud558\uac70\ub098 \uc0ad\uc81c\ud560 \ub54c \ud63c\ub780\uc744 \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \uc22b\uc790\ub97c \ub9e4\uae38\ub54c \uac04\uaca9\uc744 \ub454\ub2e4. \uc774\uc720 \ub4e4 (\uadfc\uac70) -- \uc774\ud574\ud560 \uc218 \uc5c6\ub294 \uaddc\uce59\uc744 \ub530\ub974\uace0 \uc2f6\uc9c0\ub294 \uc54a\uc744 \uac83\uc774\ubbc0\ub85c \uad6c\uccb4\uc801\uc778 \uc774\uc720\ub97c \uc124\uba85\ud55c\ub2e4. \uc608\uc81c \ub4e4 -- \ucd94\uc0c1\uc801\uc778 \ud45c\ud604\ub9cc\uc73c\ub85c \ub0b4\uc6a9\uc744 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b8 \uacbd\uc6b0 \uad6c\uccb4\uc801\uc778 \uc608(\uc88b\uc740 \uc608\ub098 \ub098\uc05c \uc608)\ub97c \uae30\uc220\ud55c\ub2e4. \ub300\uc548 \ub4e4 -- \"\uc774\ub7f0 \uc2dd\uc73c\ub85c \ud558\uc9c0 \ub9c8\ub77c\"\uc5d0 \ub300\ud55c \ub300\uc548\uc744 \uc81c\uc2dc\ud55c\ub2e4. \uc608\uc678 \ub4e4 -- \ub2e8\uc21c\ud558\uace0 \ubcf4\ud3b8\uc801\uc778 \uaddc\uce59\uc774 \uc88b\ub2e4. \ub9ce\uc740 \uaddc\uce59\ub4e4\uc774 \ub110\ub9ac \uc0ac\uc6a9\ub418\uc9c0\ub9cc \ub9cc\ub2a5\uc740 \uc544\ub2c8\ubbc0\ub85c \uc608\uc678\uac00 \uc788\uc744 \uacbd\uc6b0 \uc774\ub97c \ub098\uc5f4\ud55c\ub2e4. \uc801\uc6a9 -- \"\uae30\uacc4\uc801\uc73c\ub85c\" \uaddc\uce59\uc744 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \uc544\uc774\ub514\uc5b4\ub97c \uc124\uba85\ud55c\ub2e4. \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9 \ub4e4 -- (\uc774 \ubb38\uc11c\ub098 \ub2e4\ub978 \ubb38\uc11c\uc5d0 \ub300\ud574) \uaddc\uce59\uc774\ub098 \uad00\ub828 \ub0b4\uc6a9\uacfc \uc5f0\uad00\ub41c \ud56d\ubaa9\ub4e4\uc744 \uc548\ub0b4\ud55c\ub2e4. \ube44\uace0 \ub4e4 (\uc5b8\uae09) -- \ub2e4\ub978\ub370\uc11c \ub2e4\ub8e8\uae30 \uc801\ud569\ud558\uc9c0 \uc54a\uc740 \ubd80\ubd84\uc5d0 \ub300\ud574 \ucd94\uac00\ub85c \uc124\uba85\ud55c\ub2e4. \ub17c\uc758 -- \uaddc\uce59\uc744 \uc81c\uc2dc\ud55c \uadfc\ubcf8\uc801\uc778 \uc774\uc720\ub97c \ub2f4\uace0 \uc788\ub294 \ub2e4\ub978 \uae00\uc5d0 \ub300\ud55c \ucc38\uc870\ub098 \uaddc\uce59\uc758 \uc8fc\uc694 \ub9ac\uc2a4\ud2b8\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\ub294 \uc608 \ub4f1\uc744 \uc124\uba85\ud55c\ub2e4. \uc77c\ubd80 \uaddc\uce59\ub4e4\uc740 \uae30\uacc4\uc801\uc73c\ub85c \ud655\uc778\ud558\uae30\uc5d0 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc73c\ub098 \uc804\ubb38\uc801\uc778 \ud504\ub85c\uadf8\ub798\uba38\ub77c\uba74 \uc190\uc27d\uac8c \uc704\ubc18 \uc5ec\ubd80\ub97c \ubc1c\uacac\ud560 \uc218 \uc788\ub2e4. \"\uae30\uacc4\uc801\uc778\" \ub3c4\uad6c\ub4e4\uc774 \uadf8\ub7f0 \uc804\ubb38 \ud504\ub85c\uadf8\ub798\uba38 \ucc98\ub7fc \uc9c0\uc801\ud560 \uc218 \uc788\ub3c4\ub85d \ubc1c\uc804\ud558\uae30\ub97c \ud76c\ub9dd\ud55c\ub2e4. \ub610, \uaddc\uce59\ub4e4\uc774 \uc2dc\uac04\uc774 \uc9c0\ub0a0\uc218\ub85d \ub354 \uc815\ud655\ud558\uace0 \uac80\uc0ac\uac00 \uac00\ub2a5\ud558\ub3c4\ub85d \ubc1c\uc804\ud558\ub3c4\ub85d \ud560 \uac83\uc774\ub2e4. \uac01 \uaddc\uce59\ub4e4\uc774 \uac00\ub2a5\ud55c \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\ub418\uae38 \ubc14\ub780\ub2e4. \uc801\uc6a9 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \ub300\uc548\uacfc \ud2b9\ubcc4\ud55c \uc608\uc678\uc0ac\ud56d\uae4c\uc9c0 \ubaa8\ub450 \uc5b8\uae09\ud558\uae30\ub97c \ubc14\ub77c\uc9c0\ub294 \uc54a\ub294\ub2e4. \uc774\ub7ec\ud55c \uc815\ubcf4\ub294 \ub300\uc548 \ub2e8\ub77d\uacfc \ud1a0\ub860 \uc808\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\ub2e4. \uaddc\uce59\uc744 \uc774\ud574\ud560 \uc218 \uc5c6\uac70\ub098 \ub3d9\uc758\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub17c\uc758 \ub97c \uc0b4\ud3b4\ubcf4\uae30 \ubc14\ub780\ub2e4. \ub610\ud55c, \ub17c\uc758\uac00 \uc5c6\uac70\ub098 \ubd88\uc644\uc804\ud558\ub2e4\uace0 \uc0dd\uac01\ub41c\ub2e4\uba74 Issue\uc5d0 \uc5ec\ub7ec\ubd84\uc774 \uc5fc\ub824\ud558\ub294 \ubd80\ubd84\uacfc \uac00\ub2a5\ud558\ub2e4\uba74 \uad00\ub828 PR\uc5d0 \ub300\ud55c \uc124\uba85\uc744 \uc801\uc5b4\uc8fc\uae30 \ubc14\ub780\ub2e4. \uc774 \ubb38\uc11c\ub294 \uc5b8\uc5b4\uc5b4 \ub300\ud55c \ub9e4\ub274\uc5bc\uc774 \uc544\ub2c8\ub2e4. \ub530\ub77c\uc11c \uae30\uc220\uc801\uc778 \uc138\ubd80 \uc0ac\ud56d\uc744 \uc790\uc138\ud788 \ub2e4\ub8e8\uae30\ubcf4\ub2e4\ub294 \uae30\uc874\uc5d0 \uc791\uc131\ub41c \ucf54\ub4dc\uc5d0 \ub300\ud55c \uac00\uc774\ub4dc\ub85c\uc368\uc758 \uc5ed\ud560\uc744 \ud588\uc73c\uba74 \ud55c\ub2e4. \ub3c4\uc6c0\uc774 \ub418\ub294 \uc815\ubcf4\uc758 \ucd9c\ucc98\ub294 \ucc38\uace0 \ubb38\ud5cc \uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\ub2e4. In.sec: \uc8fc\uc694 \ubaa9\ucc28 In(Introduction): \uc18c\uac1c P(Philosophy): \ucca0\ud559 I(Interfaces): \uc778\ud130\ud398\uc774\uc2a4 F(Functions): \ud568\uc218 C(Classes and class hierarchies): \ud074\ub798\uc2a4\uc640 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 Enum(Enumerations): \uc5f4\uac70\ud615 R(Resource management): \ub9ac\uc18c\uc2a4 \uad00\ub9ac ES(Expressions and statements): \ud45c\ud604\uc2dd\uacfc \uad6c\ubb38 Per(Performance): \uc131\ub2a5 CP(Concurrency): \ub3d9\uc2dc\uc131 E(Error handling): \uc624\ub958 \ucc98\ub9ac Con(Constants and immutability): \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 T(Templates and generic programming): \ud15c\ud50c\ub9bf\uacfc \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d CPL(C-style programming): C \uc2a4\ud0c0\uc77c \ud504\ub85c\uadf8\ub798\ubc0d SF(Source files): \uc18c\uc2a4 \ud30c\uc77c SL(The Standard library): \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9: A(Architectural Ideas): \ud504\ub85c\uadf8\ub7a8 \uad6c\uc870 \uad00\ub828 \uc544\uc774\ub514\uc5b4 NR(Non-Rules and myths): \uaddc\uce59\uc774 \uc544\ub2cc \ubbf8\uc2e0 RF(References): \ucc38\uace0 \ubb38\ud5cc Pro(Profiles): \ud504\ub85c\ud30c\uc77c GSL(Guideline support library): \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac NL(Naming and layout): \uc774\ub984 \uba85\uba85 \uaddc\uce59\uacfc \ub808\uc774\uc544\uc6c3 FAQ(Answers to frequently asked questions): \uc790\uc8fc \ubb3b\ub294 \uc9c8\ubb38\uc5d0 \ub300\ud55c \ub300\ub2f5 \ubd80\ub85d A: \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd80\ub85d B: \ubaa8\ub358 C++ \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\uae30 \ubd80\ub85d C: \ud1a0\ub860 \ubd80\ub85d D: \uc720\uc6a9\ud55c \ub3c4\uad6c \uc6a9\uc5b4 \uc124\uba85 To-do(Unclassified proto-rules): \ubbf8\ubd84\ub958 \uaddc\uce59 \uac01 \ubd80\ubd84\ub4e4\uc740 \uc11c\ub85c \uc5f0\uad00\ub418\uc5b4 \uc788\ub2e4. \uac01 \ubaa9\ucc28(\"P\"\ub294 \"\ucca0\ud559(Philosophy)\")\uc640 \ubd80 \ubaa9\ucc28(\"C.hier\"\ub294 \"\ud074\ub798\uc2a4 \uacc4\uce35(Class Hierarchies) (OOP)\")\uc740 \uac80\uc0c9, \ucc38\uc870\uc758 \ud3b8\uc758\ub97c \uc704\ud574 \uc57d\uc5b4\ub85c \ud45c\uae30\ud55c\ub2e4. \uc8fc\uc694 \ubaa9\ucc28\uc5d0 \ub300\ud55c \uc57d\uc5b4\ub85c \uaddc\uce59 \ubc88\ud638\ub97c \uc0ac\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4. (\uc989, \"\uac01 \ud0c0\uc785\uc744 \uc77c\ubc18\uc801\uc778 \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub77c.\"\ub77c\ub294 \uaddc\uce59\uc744 \"C.11\"\ub85c \ub098\ud0c0\ub0b4\uae30\ub3c4 \ud55c\ub2e4.)","title":"<a name=\"S-introduction\"></a>In: \uc18c\uac1c"},{"location":"Introduction/#in","text":"\uc774 \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc740 \ubaa8\ub358 C++ (\ud604\uc7ac\ub294 C++17) \ubc0f \ucd94\ud6c4 \uac1c\uc120\ub420 \ub0b4\uc6a9\uacfc ISO \uae30\uc220 \uba85\uc138(Technical Specification; TS)\ub97c \uace0\ub824\ud55c \uac83\uc774\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubaa9\ud45c\ub294 C++ \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc774 \ub354 \uac04\ub2e8\ud558\uace0, \ud6a8\uacfc\uc801\uc774\uba70, \uc720\uc9c0\ubcf4\uc218\ud558\uae30 \uc88b\uc740 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub3c4\ub85d \ub3d5\ub294 \uac83\uc774\ub2e4. \uc18c\uac1c \uc694\uc57d: In.target: \ub300\uc0c1 \ub3c5\uc790 In.aims: \ubaa9\ud45c In.not: \ubaa9\ud45c\uac00 \uc544\ub2cc \uac83\ub4e4 In.force: \uac00\uc774\ub4dc\ub77c\uc778 \uc801\uc6a9 In.struct: \ubb38\uc11c\uc758 \uad6c\uc870 In.sec: \uc8fc\uc694 \ubaa9\ucc28","title":"In: \uc18c\uac1c"},{"location":"Introduction/#intarget","text":"\ubaa8\ub4e0 C++ \ud504\ub85c\uadf8\ub798\uba38. \ub610\ud55c C\ub97c \uc0dd\uac01 \uc911\uc778 \ud504\ub85c\uadf8\ub798\uba38 .","title":"In.target: \ub300\uc0c1 \ub3c5\uc790"},{"location":"Introduction/#inaims","text":"\ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubaa9\uc801\uc740 \uac1c\ubc1c\uc790\ub4e4\uc774 \ubaa8\ub358 C++ (\ud604\uc7ac\ub294 C++17)\uc744 \ubc1b\uc544\ub4e4\uc774\uace0 \ubcf4\ub2e4 \uc77c\uad00\uc801\uc778 \ud615\ud0dc\uc758 \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c \ub2e4\ub8e8\uace0 \uc788\ub294 \uaddc\uce59\ub4e4\uc774 \ubaa8\ub4e0 \ucf54\ub4dc\uc5d0 \ud6a8\uacfc\uc801\uc73c\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\ub2e4\uace0 \uc0dd\uac01\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \uc624\ub798\ub41c \uc2dc\uc2a4\ud15c\uc744 \uc0c8\ub86d\uac8c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\ub294 \uac83\uc740 \uc27d\uc9c0 \uc54a\uc740 \uc77c\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc5ec\uae30\uc11c \ub2e4\ub8e8\ub294 \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud55c\ub2e4\uba74 \uae30\uc874\uc758 \ubc29\uc2dd\ubcf4\ub2e4 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uac00\ub2a5\uc131\uc774 \ub0ae\uace0, \uc720\uc9c0 \ubcf4\uc218\uac00 \ud3b8\ub9ac\ud55c \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub77c \ud655\uc2e0\ud55c\ub2e4. \ub610\ud55c \uc774\ub7ec\ud55c \uaddc\uce59\ub4e4\uc740 \uac1c\ubc1c \ucd08\uae30\uc5d0 \uc880 \ub354 \ube60\ub974\uace0 \uc27d\uac8c \uac1c\ubc1c\uc744 \uc9c4\ud589\ud558\ub294 \ub370\ub3c4 \ub3c4\uc6c0\uc774 \ub420 \uac83\uc774\ub2e4. \ubd84\uba85\ud788 \ub9d0\ud560 \uc218 \uc788\ub294 \uac83\uc740, \uc774\ub7ec\ud55c \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud558\uba74 \uc81c\ub85c-\ube44\uc6a9 \uc6d0\uce59(Zero-overhead principle)\uc5d0 \uc785\uac01\ud574 \uc774\uc804\ubcf4\ub2e4 \ub354 \ub098\uc740 \ub3d9\uc791\uc744 \uc218\ud589\ub418\ub294 \ucf54\ub4dc\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub2e4\ub294 \uc810\uc774\ub2e4. (\uc81c\ub85c-\ube44\uc6a9 \uc6d0\uce59\uc774\ub780 \"\uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \ubd80\ubd84\uc5d0 \ube44\uc6a9\uc744 \ub0ad\ube44\ud558\uc9c0 \ub9c8\ub77c.\", \ub610\ub294 \"\uc62c\ubc14\ub978 \ucd94\uc0c1\ud654 \uba54\ucee4\ub2c8\uc998\uc744 \uc0ac\uc6a9\ud588\uc744 \uacbd\uc6b0, \uc801\uc5b4\ub3c4 \uc800\uc218\uc900 \uc5b8\uc5b4\ub85c \ud558\ub4dc\ucf54\ub529\ud55c \uac83 \ub9cc\ud07c\uc758 \uc131\ub2a5\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4.\" \uc815\ub3c4\ub85c \uc124\uba85\ud560 \uc218 \uc788\ub2e4.) \uc0c8\ub85c\uc6b4 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uac70\ub098 \uae30\uc874 \ucf54\ub4dc\ub97c \uac1c\uc120\ud560 \uc5ec\uc9c0\uac00 \uc0dd\uacbc\ub2e4\uba74, \uc801\uc6a9 \uac00\ub2a5\ud55c \uc218\uc900\uc5d0\uc11c \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud574 \ubcf4\uae30 \ubc14\ub780\ub2e4.","title":"In.aims: \ubaa9\ud45c"},{"location":"Introduction/#in0","text":"\uc5ec\ub7ec\ubd84\uc758 \ud504\ub85c\uadf8\ub7a8\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \ub098\uc628 \uaddc\uce59\uc744 \uc801\uc6a9\ud55c\ub2e4\uba74, \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc5b4\ub5a4 \uc601\ud5a5\uc744 \uc904 \uc9c0 \ucda9\ubd84\ud788 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc740 \"\uc0c1\uc704 \uc9d1\ud569\uc758 \ud558\uc704 \uc9d1\ud569(Subset of superset)\" ( Stroustrup05 ) \uc6d0\ub9ac\uc5d0 \ub530\ub77c \uad6c\uc131\ub418\uc5b4 \uc788\ub2e4. \uc6b0\ub9ac\ub294 \uc2e0\ub8b0\uc131, \uc548\uc815\uc131, \uc131\ub2a5 \ub4f1\uc744 \uace0\ub824\ud574 \ub2e8\uc21c\ud788 C++\uc758 \ud55c \ubd80\ubd84 \uc9d1\ud569\uc744 \uc815\uc758\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub300\uc2e0, \uba87 \uac00\uc9c0 \uac04\ub2e8\ud55c \"\ud655\uc7a5\" ( \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac )\uc744 \uc0ac\uc6a9\ud558\uae38 \uac15\ub825\ud788 \uad8c\uace0\ud55c\ub2e4. \uc774\ub97c \ud1b5\ud574 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc26c\uc6b4 C++ \uae30\ub2a5\ub4e4\uc758 \ub300\ubd80\ubd84\uc744 \uc81c\uac70\ud560 \uc218 \uc788\ub2e4. \uaddc\uce59\ub4e4\uc740 \uc815\uc801 \ud0c0\uc785 \uc548\uc815\uc131\uacfc \ub9ac\uc18c\uc2a4 \uc548\uc815\uc131\uc5d0 \uc8fc\uc548\uc810\uc744 \ub450\uace0 \uc788\ub2e4. \uc774\ub7ec\ud55c \uc774\uc720\ub85c \ubc94\uc704 \ud655\uc778 \uac00\ub2a5\uc131, nullptr \ub97c \ud1b5\ud55c \uc5ed\ucc38\uc870 \ud68c\ud53c \uac00\ub2a5\uc131, \ub315\uae00\ub9c1 \ud3ec\uc778\ud130(Dangling pointer) \ud68c\ud53c \uac00\ub2a5\uc131, (RAII\ub97c \ud1b5\ud55c) \uc2dc\uc2a4\ud15c\uc801\uc778 \uc608\uc678 \uc0ac\uc6a9 \ub4f1\uc744 \uac15\uc870\ud55c\ub2e4. \uc798 \uc54c\ub824\uc838 \uc788\uc9c0 \uc54a\uc740 \uc18c\uc2a4 \ucf54\ub4dc\uc758 \uc624\ub958 \ubc1c\uc0dd \uac00\ub2a5\uc131\uc744 \ubd80\ubd84\uc801\uc73c\ub85c\ub098\ub9c8 \uadf9\ubcf5\ud558\uace0 \ucd5c\uc18c\ud654 \ud558\ub294 \ubc29\ubc95, \uc880 \ub354 \ub2e8\uc21c\ud55c \ud45c\ud604 \ubc29\uc2dd\ubfd0 \uc544\ub2c8\ub77c \uc62c\ubc14\ub974\uac8c \uc815\uc758\ub41c \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \ubcf5\uc7a1\ub3c4\ub97c \ub4dc\ub7ec\ub0b4\uc9c0 \uc54a\ub294 \ubc29\ubc95 \ub4f1\uc744 \uac15\uc870\ud55c\ub2e4. \ub9ce\uc740 \uaddc\uce59\ub4e4\uc740 \uaddc\ubc94\uc801\uc778 \uc131\uaca9\uc744 \ub744\uace0 \uc788\ub2e4. \ub300\uc548\ub3c4 \uc5c6\uc774 \uadf8\uc800 \"\uadf8\ub807\uac8c \ud558\uc9c0 \ub9c8\ub77c!\"\ub77c\uace0\ub9cc \ud558\ub294 \uaddc\uce59\ub4e4\uc740 \ubd88\ud3b8\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. \uc77c\ubd80 \uaddc\uce59\ub4e4\uc740 \uae30\uacc4\uc801\uc73c\ub85c \uc815\ubc00 \uac80\uc99d\ud560 \uc218 \uc788\ub2e4\uae30 \ubcf4\ub2e4\ub294 \uacbd\ud5d8\uc5d0 \uadfc\uac70\ud558\uc5ec \uc791\uc131\ub418\uc5c8\ub2e4. \ub2e4\ub978 \ubd80\ub958\uc758 \uaddc\uce59\ub4e4\uc740 \uc77c\ubc18\uc801\uc778 \uc6d0\uce59\uc744 \ub17c\ub9ac\uc801\uc73c\ub85c \uc815\ub9ac\ud55c \uac83\uc774\uba70, \ub110\ub9ac \uc0ac\uc6a9\ub420 \uac83\uc774\ub77c \uc0dd\uac01\ub418\ub294 \uaddc\uce59\ub4e4\uc740 \ub354\uc6b1 \uc790\uc138\ud558\uac8c, \uadf8\ub9ac\uace0 \ubd80\ubd84\uc801\uc73c\ub85c\ub098\ub9c8 \uac80\uc99d\uc774 \uac00\ub2a5\ud558\ub3c4\ub85d \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ud588\ub2e4. \ub610\ud55c \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc740 C++\uc5d0\uc11c \ud575\uc2ec\uc774 \ub418\ub294 \ub0b4\uc6a9\uacfc \uadf8 \uc0ac\uc6a9\ubc95\uc744 \ub2e4\ub8e8\uace0 \uc788\uae30\ub3c4 \ud558\ub2e4. \uc870\uc9c1\uc758 \uaddc\ubaa8\uac00 \ub9e4\uc6b0 \ud06c\uac70\ub098, \ud2b9\ud654\ub41c \ubd84\uc57c\uc758 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\uac70\ub098, \ud504\ub85c\uc81d\ud2b8\uc758 \uaddc\ubaa8\uac00 \ub9e4\uc6b0 \ud06c\ub2e4\uba74 \uc5ec\uae30\uc11c \ub2e4\ub8e8\ub294 \ub0b4\uc6a9\ubcf4\ub2e4 \ub354 \ub2e4\uc591\ud55c \uaddc\uce59\uacfc \uc81c\uc57d, \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud544\uc694\ud560 \uac83\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uace0\ub3c4\uc758 \uc2e4\uc2dc\uac04 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uac1c\ubc1c\ud558\ub294 \uacbd\uc6b0\ub77c\uba74 \uc790\uc720 \uc800\uc7a5\uc18c(Free Store, \ub3d9\uc801 \uba54\ubaa8\ub9ac)\ub97c \uc544\ubb34\ub807\uac8c\ub098 \uc0ac\uc6a9\ud558\uba74 \uc548\ub418\uae30 \ub54c\ubb38\uc5d0, \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc120\ud0dd\ud558\ub294\ub370 \uc81c\uc57d\uc774 \uc788\uc744 \uc218 \ubc16\uc5d0 \uc5c6\ub2e4. \uc774\ucc98\ub7fc \ud2b9\ud654\ub41c \uac1c\ubc1c \ubd84\uc57c\uc5d0\ub9cc \uc801\uc6a9 \ud560 \uc218 \uc788\ub294 \uaddc\uce59\ub4e4\uc740 \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubd80\ub85d\uc5d0 \ub2f4\uc558\ub2e4. \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\uc640 \uac19\uc774 \uc800\uc218\uc900\uc758 \ud504\ub85c\uadf8\ub798\ubc0d \ubc29\uc2dd\uc744 \uace0\uc218\ud558\uae30 \ubcf4\ub2e4\ub294 \ud575\uc2ec \uae30\ub2a5\uc744 \uad6c\ud604\ud558\uace0 \uc788\ub294 \uc18c\uaddc\ubaa8\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ub9cc\ub4e4\uace0 \uc0ac\uc6a9\ud558\uae30 \ubc14\ub780\ub2e4. \uaddc\uce59\ub4e4\uc740 \uc810\uc9c4\uc801\uc73c\ub85c \uc801\uc6a9 \ud574 \ubcfc \uc218 \uc788\ub2e4. \uc77c\ubd80 \uaddc\uce59\ub4e4\uc740 \uc548\uc815\uc131\uc744 \ub192\uc774\uae30 \uc704\ud574 \ub2e4\uc591\ud55c \ubc29\ubc95\ub4e4\uc744 \uc124\uba85\ud558\uace0 \uc788\uc73c\uba70, \ub610 \ub2e4\ub978 \uaddc\uce59\ub4e4\uc740 \ubb38\uc81c \ubc1c\uc0dd \uac00\ub2a5\uc131\uc744 \ub0ae\ucd94\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud558\uace0 \uc788\ub2e4. \ud639\uc740 \uc774 \ub458\uc744 \ubaa8\ub450 \uace0\ub824\ud574 \ub9cc\ub4e4\uc5b4\uc9c4 \uaddc\uce59\ub4e4\ub3c4 \uc788\ub2e4. \uc0ac\uace0\ub97c \uc608\ubc29\ud558\uae30 \uc704\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ub54c\ub85c\ub294 \ud569\ubc95\uc801\uc778(legal) C++\uc5d0 \ubc18\ub300\ub418\uae30\ub3c4 \ud55c\ub2e4. \uaddc\uce59\uc744 \ud1b5\ud574 \uc804\ub2ec\ud558\uace0\uc790 \ud558\ub294 \ub0b4\uc6a9\uc744 \uae30\uc220\ud560 \ub54c \ud1b5\uc0c1 \uc624\ub958 \ubc1c\uc0dd \uac00\ub2a5\uc131\uc774 \ub192\uc740 \uacbd\uc6b0\uc640 \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0\uac00 \uc788\ub2e4\uba74, \uac00\ub2a5\ud55c \uc624\ub958 \ubc1c\uc0dd \uac00\ub2a5\uc131\uc774 \ub0ae\uc740 \ubc29\ubc95\uc744 \ud0dd\ud588\ub2e4.","title":"In.0: \ub2f9\ud669\ud558\uc9c0 \ub9c8\ub77c!"},{"location":"Introduction/#innot","text":"\ucd5c\uc18c\ud55c\uc758 \uaddc\uce59\ub9cc\uc744 \uc815\uc758\ud558\uac70\ub098, \uaddc\uce59\ub4e4\uc774 \uc11c\ub85c\ub97c \uc704\ubc18\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc791\uc131\ud55c \uac83\uc740 \uc544\ub2c8\ub2e4. \uc2e4\uc81c\ub85c \ubc94\uc6a9\uc801\uc778 \uaddc\uce59\ub4e4 \uc911\uc5d0\ub294 \uac04\ub2e8\ud574 \ubcf4\uc774\uc9c0\ub9cc \uc2e4\uc81c\ub85c \uc801\uc6a9\ud558\uae30\uac00 \ub9e4\uc6b0 \uc5b4\ub824\uc6b4 \uac83\ub4e4\ub3c4 \uc788\uc73c\uba70, \uadf8\ub7ec\ud55c \uaddc\uce59\ub4e4\uc774 \uc9c0\ub2cc \ud568\ucd95\uc801\uc778 \uc758\ubbf8\ub97c \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218\ub3c4 \uc788\ub2e4. \uad6c\uccb4\uc801\uc778 \uaddc\uce59\ub4e4\uc774 \uc880 \ub354 \uc774\ud574 \ubc0f \uc801\uc6a9\ud558\uae30 \uc27d\uc9c0\ub9cc, \ubc94\uc6a9\uc801\uc778 \uaddc\uce59\ub4e4\uc744 \ub2e4\ub8e8\uc9c0 \uc54a\uace0\ub294 \ud2b9\ubcc4\ud55c \uacbd\uc6b0\ub9cc\uc744 \uc7a5\ud669\ud558\uac8c \ub098\uc5f4\ud560 \uc218 \ubc16\uc5d0 \uc5c6\uc5c8\uc744 \uac83\uc774\ub2e4. \uac01\uac01\uc758 \uaddc\uce59\ub4e4\uc740 \ucd08\ubcf4 \uac1c\ubc1c\uc790 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc804\ubb38\uac00\ub4e4\uc5d0\uac8c\ub3c4 \ub3c4\uc6c0\uc774 \ub420 \uc218 \uc788\ub3c4\ub85d \uc791\uc131\ud588\ub2e4. \uc77c\ubd80 \uaddc\uce59\uc740 \ubc18\ub4dc\uc2dc \uc801\uc6a9\ub418\uc5b4\uc57c \ud558\uc9c0\ub9cc, \ud544\uc694\uc5d0 \ub530\ub77c \uc801\uc6a9 \uc5ec\ubd80\ub97c \uc120\ud0dd\uc801\uc73c\ub85c \uacb0\uc815\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. \uc5ec\uae30\uc11c \ub2e4\ub8e8\ub294 \uaddc\uce59\ub4e4\uc744 \ucc45\uc5d0\uc11c \ub2e4\ub8e8\ub294 \uac83\uc778\ub0e5 \ub108\ubb34 \uc2ec\uac01\ud558\uac8c \ubc1b\uc544\ub4e4\uc744 \ud544\uc694\ub294 \uc5c6\ub2e4. \ub9c1\ud06c\ub97c \ud1b5\ud574\uc11c \uaddc\uce59\ub4e4\uc744 \uac00\ubccd\uac8c \uc0b4\ud3b4\ubcf4\ub294 \uac83\ub3c4 \uad1c\ucc2e\ub2e4. \uc0ac\uc2e4 \uc774\ucc98\ub7fc \uaddc\uce59\uc744 \uc5c4\ubc00\ud558\uac8c \uc815\uc758\ud55c \uc774\uc720\ub294 \uaddc\uce59\ub4e4\uc744 \uc704\ubc30\ud55c \ucf54\ub4dc\ub97c \ucc3e\uace0, \uadf8\uc5d0 \ub300\ud55c \ub9c1\ud06c \uc815\ubcf4\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ud234\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\uc774\ub2e4. \uc989, \uaddc\uce59\uc774 \ub9cc\ub4e4\uc5b4\uc9c4 \uc774\uc720\ub97c \uc124\uba85\ud558\uace0, \ub9cc\uc57d \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\uc558\uc744 \ub54c \uc5b4\ub5a4 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uace0, \uadf8 \ubb38\uc81c\ub97c \uc5b4\ub5bb\uac8c \ud574\uacb0\ud560 \uc218 \uc788\ub294\uc9c0\ub97c \uc54c\ub824\uc8fc\uae30 \uc704\ud574\uc11c\ub2e4. \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc740 C++ \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ub300\uccb4\ud560 \uc6a9\ub3c4\ub85c \uc791\uc131\ub41c \uac83\uc774 \uc544\ub2c8\ub2e4. \uac1c\ubc1c\uc790\uc758 \uc218\uc900\uc5d0 \ubd80\ud569\ud558\ub294 \ud29c\ud1a0\ub9ac\uc5bc\uc774 \ud544\uc694\ud558\ub2e4\uba74, \ucc38\uace0 \ubb38\ud5cc \uc744 \ucc38\uc870\ud558\uae30 \ubc14\ub780\ub2e4. \uc774 \ubb38\uc11c\ub294 \uae30\uc874\uc758 C++ \ucf54\ub4dc\ub97c \ubaa8\ub358 C++ \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \ub2e4\ub8e8\uace0 \uc788\ub294 \uac83\ub3c4 \uc544\ub2c8\ub2e4. \ub2e4\ub9cc, \uc0c8\ub85c\uc6b4 C++ \ucf54\ub4dc\uc5d0 \ub300\ud55c \ub17c\ub9ac \uc815\uc5f0\ud55c \uc0dd\uac01\ub4e4\uc744 \uad6c\uccb4\uc801\uc73c\ub85c \uc124\uba85\ud55c\ub2e4. \ub530\ub77c\uc11c \uae30\uc874 \ucf54\ub4dc\ub97c \ubaa8\ub358\ud558\uac8c, \uc80a\uace0 \ud65c\uae30\ucc28\uac8c, \uc5c5\uadf8\ub808\uc774\ub4dc \ud558\uace0 \uc2f6\ub2e4\uba74 \ubaa8\ub358 C++ \ucf54\ub4dc \ub97c \ucc38\uc870\ud558\uae30 \ubc14\ub780\ub2e4. \uc911\uc694\ud55c \uac83\uc740 \uc774 \ubb38\uc11c\uc5d0\uc11c \ub2e4\ub8e8\uace0 \uc788\ub294 \uaddc\uce59\ub4e4\uc744 \uc810\uc9c4\uc801\uc73c\ub85c \uc801\uc6a9\ud560 \uc218 \uc788\ub2e4\ub294 \uc810\uc774\ub2e4. \uc5c4\uccad\ub09c \uc591\uc758 \ucf54\ub4dc\ub97c \ub2e8\ubc88\uc5d0 \ubc14\uafc0 \uc218\ub294 \uc5c6\ub294 \ub178\ub987\uc774\ub2e4. \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc5b8\uc5b4\uc758 \uae30\uc220 \uc138\ubd80 \uc0ac\ud56d\uc744 \uc644\ubcbd\ud558\uac8c, \ub610\ub294 \uc815\ud655\ud558\uac8c \uc124\uba85\ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \uc5b8\uc5b4\uc758 \uba85\uc138, \uc77c\ubc18 \uaddc\uce59\uc5d0 \ub300\ud55c \uc608\uc678 \uc0ac\ud56d, \uadf8 \uc678 \uc138\ubd80 \uae30\ub2a5\ub4e4\uc5d0 \ub300\ud574\uc11c\ub294 ISO C++ \ud45c\uc900\uc744 \ucc38\uc870\ud558\uae30 \ubc14\ub780\ub2e4. \uaddc\uce59\ub4e4\uc744 \uc791\uc131\ud560 \ub54c C++\uc758 \uc77c\ubd80 \uae30\ub2a5\ub9cc\uc744 \uc774\uc6a9\ud574 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub3c4\ub85d \uc758\ub3c4\ud558\uc9c0\ub294 \uc54a\uc558\ub2e4. \ub9c8\uce58 C++\uc758 \uc77c\ubd80\ub9cc\uc744 \ub5bc\uc5b4\ub193\uc740 Java\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ucc98\ub7fc \uac15\uc81c\ud558\uae30 \uc704\ud568\uc740 \uc808\ub300\ub85c \uc544\ub2c8\ub77c\ub294 \uac83\uc774\ub2e4. \"\ub2e8 \ud558\ub098\uc758 \uc62c\ubc14\ub978 C++\" \uc5b8\uc5b4\ub77c\ub294 \uc2dd\uc758 \uc815\uc758 \ub610\ud55c \uc758\ub3c4\ud558\ub294 \ubc14\uac00 \uc544\ub2c8\ub2e4. \ub2e4\ub9cc \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \ud3ec\ud568\ub41c \uaddc\uce59\uc744 \ud1b5\ud574\uc11c C++\ub77c\ub294 \uc5b8\uc5b4\uac00 \uc131\ub2a5\uacfc \ud0c0\ud611\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c\ub3c4 \ud48d\ubd80\ud55c \ud45c\ud604\ub825\uc744 \uc9c0\ub2cc \uc5b8\uc5b4\ub77c\ub294 \uc810\uc744 \uac15\uc870\ud558\uace0\uc790 \ud588\ub2e4. \uc138\ubd80 \uaddc\uce59\ub4e4\uc744 \ud1b5\ud574\uc11c \uc804\ub2ec\ud558\ub824\ub294 \uac00\uce58\ub294 \uba85\ud655\ud558\ub2e4. \uae30\uc874\uc758 C++ \ucf54\ub4dc\ubcf4\ub2e4 \ub354\uc6b1 \uac04\ub2e8\ud558\uace0, \uc62c\ubc14\ub974\uace0, \uc548\uc804\ud55c \ucf54\ub4dc\ub97c \uc131\ub2a5\uc744 \uc190\ud574\ubcf4\uc9c0 \uc54a\uace0 \uc791\uc131\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uac83\uc774\ub2e4. \ub610\ud55c \uc720\ud6a8\ud55c C++ \ucf54\ub4dc\uc774\uae34 \ud558\uc9c0\ub9cc \uc624\ub958\ub97c \uc720\ubc1c\ud560 \uac00\ub2a5\uc131\uc774 \ub192\uace0, \ubd88\ud544\uc694\ud558\uac8c \ubcf5\uc7a1\ud558\uace0, \uc131\ub2a5\ub3c4 \uc88b\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub97c \ud53c\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uac83\uc774\ub2e4. \uaddc\uce59\ub4e4\uc774 \uc644\ubcbd\ud558\uc9c0\ub294 \uc54a\ub2e4. \uaddc\uce59\uc774 \uc8fc\uc5b4\uc9c4 \uc0c1\ud669\uc5d0\uc11c \uc720\uc775\ud55c \uc694\uc18c\ub97c \uae08\uc9c0\ud560 \uc218\ub3c4 \uc788\ub2e4. \uaddc\uce59\uc774 \uc8fc\uc5b4\uc9c4 \uc0c1\ud669\uc5d0\uc11c \uc911\ub300\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\uc744 \ub9c9\uc9c0 \ubabb\ud560 \uc218\ub3c4 \uc788\ub2e4. \uaddc\uce59\uc774 \ubaa8\ud638\ud558\uace0, \uc2e4\ud589 \ubd88\uac00\ub2a5\ud558\uace0, \ubb38\uc81c\ub97c \uc704\ud55c \ubaa8\ub4e0 \ud574\uacb0\ucc45\uc744 \uc5f4\uc5b4\ub193\uc74c\uc73c\ub85c\uc368 \ub354 \ub9ce\uc740 \ud574\ub85c\uc6c0\uc744 \uac00\uc838\uc62c \uc218 \uc788\ub2e4. \"\uc5b4\ub5a0\ud55c \ud574\ub85c\uc6c0\ub3c4 \uc5c6\ub294\" \uae30\uc900\uc744 \uc644\ubcbd\ud558\uac8c \ub9cc\uc871\ud558\ub294 \uac83\uc740 \ubd88\uac00\ub2a5\ud558\ub2e4 \uc6b0\ub9ac\uc758 \ubaa9\ud45c\ub294, \ub300\uc2e0, \"\ub2e4\uc218\uc758 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc5d0\uac8c \uac00\uc7a5 \uc88b\uc740 \uac83\"\uc744 \uc704\ud55c \uae30\uc900\uc744 \uc81c\uc2dc\ud558\ub294 \uac83\uc774\ub2e4. \uaddc\uce59\uc744 \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub530\ub974\uc9c0 \uc54a\uac70\ub098 \ubb34\uc2dc\ud574\ub3c4 \uc88b\ub2e4. \ud558\uc9c0\ub9cc \uaddc\uce59\uc774 \ubb34\uc758\ubbf8\ud574\uc9c0\uae30 \uc804\uae4c\uc9c0\ub294 \ud3c4\ud558\ud558\uc9c0 \ub9d0\ub77c. \ub610 \uac00\ub2a5\ud558\ub2e4\uba74, \uac1c\uc120 \uc0ac\ud56d\uc744 \uc81c\uc548\ud558\uae30\ub97c \ubc14\ub780\ub2e4.","title":"In.not: \ubaa9\ud45c\uac00 \uc544\ub2cc \uac83\ub4e4"},{"location":"Introduction/#inforce","text":"\uc0ac\uc2e4\uc0c1 \ub2e4\uc591\ud55c \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud558\ub3c4\ub85d \uac15\uc81c\ud558\uc9c0 \uc54a\uace0\uc11c\ub294 \uc774\ub7ec\ud55c \uaddc\uce59\ub4e4\uc774 \ubc29\ub300\ud55c \ucf54\ub4dc\uc5d0 \ubaa8\ub450 \uc801\uc6a9\ub418\ub9ac\ub77c\uace0 \uae30\ub300\ud558\uae30\ub294 \uc5b4\ub835\ub2e4. \uc2e4\uc0c1, \ubaa8\ub4e0 \uaddc\uce59\uc744 \uac15\uc81c\uc801\uc73c\ub85c \uc801\uc6a9\ud558\ub294 \uac83\uc740 \uaddc\uce59\uc758 \uc218\uac00 \uba87 \uac1c \ub418\uc9c0 \uc54a\uac70\ub098 \ud2b9\uc218\ud55c \uc0ac\uc6a9\uc790 \uc9d1\ub2e8\uc5d0\uc11c\ub098 \uac00\ub2a5\ud55c \uc77c\uc77c\uc9c0\ub3c4 \ubaa8\ub974\uaca0\ub2e4. \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc740 \ubaa8\ub4e0 \uc0ac\ub78c\ub4e4\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub2e4\uc591\ud55c \uaddc\uce59\ub4e4\uc744 \uc6d0\ud55c\ub2e4 \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc740 \uc11c\ub85c \ub2e4\ub978 \uaddc\uce59\ub4e4\uc744 \uac16\ub294\ub2e4 \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc740 \ubc29\ub300\ud55c \uaddc\uce59\uc744 \ubaa8\ub450 \uc77d\uace0 \uc2f6\uc5b4\ud558\uc9c0 \uc54a\ub294\ub2e4 \uadf8\ub7ec\ub098 \uc0ac\ub78c\ub4e4\uc740 \uc218\ub9ce\uc740 \uaddc\uce59\ub4e4\uc744 \uae30\uc5b5\ud560 \uc218 \uc5c6\ub2e4 \uc774\ub7ec\ud55c \uc774\uc720\ub85c \ub2e4\uc591\ud55c \uc694\uad6c \uc0ac\ud56d\ub4e4\uc758 \uacf5\ud1b5\uc801\uc778 \ubd80\ubd84\ub9cc\uc744 \ubf51\uc544\ub0b4\ub824\uace0 \ud574\ubd24\ub2e4. \uadf8\ub7ec\ub098 \uc784\uc758\uc758 \uaddc\uce59\uc744 \uc815\ud558\ub294 \uac83 \uc870\ucc28 \ud63c\ub3c8\uc744 \ucd08\ub798\ud560 \uac83\uc774\ub2e4 \uc6b0\ub9ac\ub294 \ub354 \ub9ce\uc740 \uac1c\ubc1c\uc790\ub4e4\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub418\uace0, \ucf54\ub4dc\ub97c \uc880 \ub354 \uac04\uacb0\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc73c\uba70, \uae30\uc874 \ucf54\ub4dc\ub97c \ubaa8\ub358\ud654 \ud560 \uc218 \uc788\ub294 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub9cc\ub4e4\uace0 \uc2f6\uc5c8\ub2e4. \uac1c\uc778\uc758 \uc120\ud0dd\uc758 \ubb38\uc81c\ub77c\uac70\ub098 \uad00\ub9ac\uc758 \uc555\ubc15\uc73c\ub85c \uc778\ud574 \uc2e0\uacbd\uc4f0\uc9c0 \uc54a\uc558\ub358 \ubd80\ubd84\ub4e4\ub3c4 \ub3c4\uc678\uc2dc\ud558\uc9c0 \uc54a\uace0 \ucd5c\uc120\uc758 \uc2e4\uc6a9\uc801\uc778 \uc608\ub97c \ub2e4\ub8e8\uace0\uc790 \ud588\ub2e4. \ubc14\ub77c\uac74\ub300 \ubaa8\ub4e0 \uaddc\uce59\ub4e4\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\ub2e4\uace0 \uc0dd\uac01\ud55c\ub2e4. \uadf8\ub807\uac8c \ud574\uc57c\ub9cc \ucd5c\uace0\uc758 \uc774\ub4dd\uc744 \ubcf8\ub2e4\uace0 \uc0dd\uac01\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub294 \uaf64\ub098 \uc2ec\uac01\ud55c \ub51c\ub808\ub9c8\uac00 \uc544\ub2d0 \uc218 \uc5c6\ub294\ub370, \uc6b0\ub9ac\ub294 \uc774\ub7ec\ud55c \ub51c\ub808\ub9c8\uc758 \ud574\uacb0\ucc45\uc774 \ud234\uc744 \uac1c\ubc1c\ud558\ub294 \uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud588\ub2e4. \uac01\uac01\uc758 \uaddc\uce59\ub4e4\uc740 \uc801\uc6a9 \ubc29\ubc95\uc744 \uc124\uba85\ud558\uace0 \uc788\ub294 Enforcement \ub2e8\ub77d\uc744 \uac16\uace0 \uc788\ub294\ub370, \ucf54\ub4dc \ub9ac\ubdf0, \uc815\uc801 \ubd84\uc11d, \ucef4\ud30c\uc77c\ub7ec, \ub7f0\ud0c0\uc784 \uccb4\ud06c \ub4f1\uc758 \ubc29\ubc95\uc744 \ub098\uc5f4\ud558\uace0 \uc788\ub2e4. \uc5b4\ub5a4 \ubc29\uc2dd\uc774\ub4e0 \uc6b0\ub9ac\ub294 \"\uae30\uacc4\uc801\"\uc774\uba70(\uc0ac\ub78c\uc740 \ub290\ub9ac\uae30\ub3c4 \ud558\uace0, \uc27d\uac8c \uc9c0\ub8e8\ud574 \ud560 \uc218 \uc788\uc73c\ubbc0\ub85c) \uc77c\uad00\ub41c \ubc29\ubc95\uc73c\ub85c \uac1c\ubcc4 \uaddc\uce59\ub4e4\uc774 \uc801\uc6a9\ub418\uae30\ub97c \uc6d0\ud588\ub2e4. \uc774\ub7f0 \uc774\uc720\ub85c \ub7f0\ud0c0\uc784 \uccb4\ud06c\ub294 \ub2e4\ub978 \ub300\uc548\uc774 \uc5c6\uc744 \uacbd\uc6b0\uc5d0 \ud55c\ud574\uc11c\ub9cc \uc5b8\uae09\ud588\ub2e4. \uc774 \uac19\uc740 \ub0b4\uc6a9\ub4e4\uc744 \uc5ec\uae30\uc800\uae30\uc5d0 \ud769\uc5b4\ub193\uae30 \ubcf4\ub2e4\ub294 \uc0ac\uc6a9\uc790\uac00 \uc6d0\ud560 \uacbd\uc6b0 \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\ub3c4\ub85d \ud558\uace0 \uc2f6\uc5c8\uae30\uc5d0, ( Enforcement \ub2e8\ub77d \ub0b4\uc5d0) \uc801\uc808\ud55c \uc704\uce58\ub77c\uace0 \uc0dd\uac01\ub418\ub294 \uacf3\uc5d0 \uc5f0\uad00\ub41c \uaddc\uce59\ub4e4\uc744 \"\ud504\ub85c\ud544\"\uc774\ub77c\ub294 \uc774\ub984\uc73c\ub85c \ub098\uc5f4\ud574 \ub450\uc5c8\ub2e4. \ud558\ub098\uc758 \uaddc\uce59\uc740 \uc5ec\ub7ec \ud504\ub85c\ud544\uc5d0 \uc18d\ud560 \uc218 \uc788\uc73c\uba70, \uc5b4\ub5a4 \ud504\ub85c\ud544\uc5d0\ub3c4 \uc18d\ud558\uc9c0 \uc54a\uc740 \uaddc\uce59\ub4e4\ub3c4 \uc788\ub2e4. \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \ud504\ub85c\ud544 \uba87 \uac00\uc9c0\ub97c \uba3c\uc800 \uc0b4\ud3b4\ubcf4\uc790. \ud0c0\uc785 : (\uce90\uc2a4\ud305, \uacf5\uc6a9\uccb4, \uac00\ubcc0 \uc778\uc218\ub97c \ud1b5\ud574 T \ub97c U \ub85c \uc7ac\ud574\uc11d \ud558\ub294) \ud0c0\uc785 \uc704\ubc18 \uc5c6\uc74c \ud55c\uacc4 : (\ubc30\uc5f4\uc758 \ubc94\uc704\ub97c \ub118\uc5b4\uc11c \uc811\uadfc\ud558\ub294) \ubc94\uc704 \uc704\ubc18 \uc5c6\uc74c \uc218\uba85 : ( delete \ub098 delete[] \uc774 \uc2e4\ud328\ud558\ub294) \ub204\uc218 \uc5c6\uc74c, ( nullptr \ub97c \uc5ed\ucc38\uc870\ud558\uace0 \ub315\uae00\ub9c1\ub41c \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574) \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac1c\uccb4\uc5d0 \uc811\uadfc\ud558\uc9c0 \uc54a\uc74c \ud504\ub85c\ud544\uc740 \ud234\uc5d0\uc11c \ud65c\uc6a9\ud560 \uc6a9\ub3c4\ub85c \ub9cc\ub4e4\uc5c8\uc9c0\ub9cc, \ub0b4\uc6a9\uc744 \uc77d\uc5b4\ubcf4\uba74 \ub9ce\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uc801\uc6a9 \ub2e8\ub77d\uc744 \ub2e8\uc21c\ud788 \uc6b0\ub9ac\uac00 \uc54c\uace0 \uc788\ub294 \uc801\uc6a9 \ubc29\ubc95\uc744 \uc81c\uc2dc\ud558\ub294 \uac83\uc73c\ub85c\ub9cc \uc81c\ud55c\ud558\uace0 \uc2f6\uc9c0 \uc54a\ub2e4. \ub2e8\ub77d \uc911 \uc77c\ubd80\ub294 \ud234 \uac1c\ubc1c\uc790\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub420\ub9cc\ud55c \ub0b4\uc6a9\uc77c \uac83\uc774\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc758 \uaddc\uce59\ub4e4\uc744 \uad6c\ud604\ud55c \ud234\uc5d0\uc11c\ub294 \uba85\uc2dc\uc801\uc73c\ub85c \uaddc\uce59\uc744 \ubb34\uc2dc\ud558\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ubb38\ubc95\uc744 \uc9c0\uc6d0\ud558\uae30\ub97c \ubc14\ub780\ub2e4: [[ gsl :: suppress ( tag )]] \uc5ec\uae30\uc11c \"tag\"\ub294 HTML anchor\uc758 \uc774\ub984\uc73c\ub85c, \uac00\uc774\ub4dc\ub77c\uc778 \ub0b4\uc5d0\uc11c \uaddc\uce59\uc774 \uc788\ub294 \uc9c0\uc810\uc744 \uc758\ubbf8\ud55c\ub2e4. (\uac00\ub839, C.134 \uaddc\uce59\uc758 \uacbd\uc6b0, Anchor \uac12\uc740 \"Rh-public\"\uc774\ub2e4. )","title":"In.force: \uac00\uc774\ub4dc\ub77c\uc778 \uc801\uc6a9"},{"location":"Introduction/#instruct","text":"\uac01 \uaddc\uce59(\uac00\uc774\ub4dc\ub77c\uc778, \uc81c\uc548)\uc740 \uc5ec\ub7ec \ubd80\ubd84\uc73c\ub85c \ub098\ub25c\ub2e4. \uaddc\uce59 \uadf8 \uc790\uccb4 -- \uc608) new \ub97c \ubb34\ubc29\ube44 \uc0c1\ud0dc\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c \uaddc\uce59 \ucc38\uc870 \ubc88\ud638 -- \uc608), C.7 (\ud074\ub798\uc2a4\uc640 \uad00\ub828\ub41c 7\ubc88\uc9f8 \uaddc\uce59). \uc8fc\uc694 \ub2e8\uc6d0\uc774 \uc21c\uc11c\ub300\ub85c \ub098\uc5f4\ub418\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \uaddc\uce59 \ucc38\uc870 \"\ubc88\ud638\"\uc758 \uccab \ubc88\uc9f8 \ubd80\ubd84\uc740 \ubb38\uc790\ub85c \uc2dc\uc791\ud55c\ub2e4. \uaddc\uce59\uc744 \ucd94\uac00\ud558\uac70\ub098 \uc0ad\uc81c\ud560 \ub54c \ud63c\ub780\uc744 \ucd5c\uc18c\ud654\ud558\uae30 \uc704\ud574 \uc22b\uc790\ub97c \ub9e4\uae38\ub54c \uac04\uaca9\uc744 \ub454\ub2e4. \uc774\uc720 \ub4e4 (\uadfc\uac70) -- \uc774\ud574\ud560 \uc218 \uc5c6\ub294 \uaddc\uce59\uc744 \ub530\ub974\uace0 \uc2f6\uc9c0\ub294 \uc54a\uc744 \uac83\uc774\ubbc0\ub85c \uad6c\uccb4\uc801\uc778 \uc774\uc720\ub97c \uc124\uba85\ud55c\ub2e4. \uc608\uc81c \ub4e4 -- \ucd94\uc0c1\uc801\uc778 \ud45c\ud604\ub9cc\uc73c\ub85c \ub0b4\uc6a9\uc744 \uc774\ud574\ud558\uae30 \uc5b4\ub824\uc6b8 \uacbd\uc6b0 \uad6c\uccb4\uc801\uc778 \uc608(\uc88b\uc740 \uc608\ub098 \ub098\uc05c \uc608)\ub97c \uae30\uc220\ud55c\ub2e4. \ub300\uc548 \ub4e4 -- \"\uc774\ub7f0 \uc2dd\uc73c\ub85c \ud558\uc9c0 \ub9c8\ub77c\"\uc5d0 \ub300\ud55c \ub300\uc548\uc744 \uc81c\uc2dc\ud55c\ub2e4. \uc608\uc678 \ub4e4 -- \ub2e8\uc21c\ud558\uace0 \ubcf4\ud3b8\uc801\uc778 \uaddc\uce59\uc774 \uc88b\ub2e4. \ub9ce\uc740 \uaddc\uce59\ub4e4\uc774 \ub110\ub9ac \uc0ac\uc6a9\ub418\uc9c0\ub9cc \ub9cc\ub2a5\uc740 \uc544\ub2c8\ubbc0\ub85c \uc608\uc678\uac00 \uc788\uc744 \uacbd\uc6b0 \uc774\ub97c \ub098\uc5f4\ud55c\ub2e4. \uc801\uc6a9 -- \"\uae30\uacc4\uc801\uc73c\ub85c\" \uaddc\uce59\uc744 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud55c \uc544\uc774\ub514\uc5b4\ub97c \uc124\uba85\ud55c\ub2e4. \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9 \ub4e4 -- (\uc774 \ubb38\uc11c\ub098 \ub2e4\ub978 \ubb38\uc11c\uc5d0 \ub300\ud574) \uaddc\uce59\uc774\ub098 \uad00\ub828 \ub0b4\uc6a9\uacfc \uc5f0\uad00\ub41c \ud56d\ubaa9\ub4e4\uc744 \uc548\ub0b4\ud55c\ub2e4. \ube44\uace0 \ub4e4 (\uc5b8\uae09) -- \ub2e4\ub978\ub370\uc11c \ub2e4\ub8e8\uae30 \uc801\ud569\ud558\uc9c0 \uc54a\uc740 \ubd80\ubd84\uc5d0 \ub300\ud574 \ucd94\uac00\ub85c \uc124\uba85\ud55c\ub2e4. \ub17c\uc758 -- \uaddc\uce59\uc744 \uc81c\uc2dc\ud55c \uadfc\ubcf8\uc801\uc778 \uc774\uc720\ub97c \ub2f4\uace0 \uc788\ub294 \ub2e4\ub978 \uae00\uc5d0 \ub300\ud55c \ucc38\uc870\ub098 \uaddc\uce59\uc758 \uc8fc\uc694 \ub9ac\uc2a4\ud2b8\uc5d0 \ud3ec\ud568\ub418\uc9c0 \uc54a\ub294 \uc608 \ub4f1\uc744 \uc124\uba85\ud55c\ub2e4. \uc77c\ubd80 \uaddc\uce59\ub4e4\uc740 \uae30\uacc4\uc801\uc73c\ub85c \ud655\uc778\ud558\uae30\uc5d0 \uc5b4\ub824\uc6b8 \uc218 \uc788\uc73c\ub098 \uc804\ubb38\uc801\uc778 \ud504\ub85c\uadf8\ub798\uba38\ub77c\uba74 \uc190\uc27d\uac8c \uc704\ubc18 \uc5ec\ubd80\ub97c \ubc1c\uacac\ud560 \uc218 \uc788\ub2e4. \"\uae30\uacc4\uc801\uc778\" \ub3c4\uad6c\ub4e4\uc774 \uadf8\ub7f0 \uc804\ubb38 \ud504\ub85c\uadf8\ub798\uba38 \ucc98\ub7fc \uc9c0\uc801\ud560 \uc218 \uc788\ub3c4\ub85d \ubc1c\uc804\ud558\uae30\ub97c \ud76c\ub9dd\ud55c\ub2e4. \ub610, \uaddc\uce59\ub4e4\uc774 \uc2dc\uac04\uc774 \uc9c0\ub0a0\uc218\ub85d \ub354 \uc815\ud655\ud558\uace0 \uac80\uc0ac\uac00 \uac00\ub2a5\ud558\ub3c4\ub85d \ubc1c\uc804\ud558\ub3c4\ub85d \ud560 \uac83\uc774\ub2e4. \uac01 \uaddc\uce59\ub4e4\uc774 \uac00\ub2a5\ud55c \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\ub418\uae38 \ubc14\ub780\ub2e4. \uc801\uc6a9 \uac00\ub2a5\ud55c \ubaa8\ub4e0 \ub300\uc548\uacfc \ud2b9\ubcc4\ud55c \uc608\uc678\uc0ac\ud56d\uae4c\uc9c0 \ubaa8\ub450 \uc5b8\uae09\ud558\uae30\ub97c \ubc14\ub77c\uc9c0\ub294 \uc54a\ub294\ub2e4. \uc774\ub7ec\ud55c \uc815\ubcf4\ub294 \ub300\uc548 \ub2e8\ub77d\uacfc \ud1a0\ub860 \uc808\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\ub2e4. \uaddc\uce59\uc744 \uc774\ud574\ud560 \uc218 \uc5c6\uac70\ub098 \ub3d9\uc758\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub17c\uc758 \ub97c \uc0b4\ud3b4\ubcf4\uae30 \ubc14\ub780\ub2e4. \ub610\ud55c, \ub17c\uc758\uac00 \uc5c6\uac70\ub098 \ubd88\uc644\uc804\ud558\ub2e4\uace0 \uc0dd\uac01\ub41c\ub2e4\uba74 Issue\uc5d0 \uc5ec\ub7ec\ubd84\uc774 \uc5fc\ub824\ud558\ub294 \ubd80\ubd84\uacfc \uac00\ub2a5\ud558\ub2e4\uba74 \uad00\ub828 PR\uc5d0 \ub300\ud55c \uc124\uba85\uc744 \uc801\uc5b4\uc8fc\uae30 \ubc14\ub780\ub2e4. \uc774 \ubb38\uc11c\ub294 \uc5b8\uc5b4\uc5b4 \ub300\ud55c \ub9e4\ub274\uc5bc\uc774 \uc544\ub2c8\ub2e4. \ub530\ub77c\uc11c \uae30\uc220\uc801\uc778 \uc138\ubd80 \uc0ac\ud56d\uc744 \uc790\uc138\ud788 \ub2e4\ub8e8\uae30\ubcf4\ub2e4\ub294 \uae30\uc874\uc5d0 \uc791\uc131\ub41c \ucf54\ub4dc\uc5d0 \ub300\ud55c \uac00\uc774\ub4dc\ub85c\uc368\uc758 \uc5ed\ud560\uc744 \ud588\uc73c\uba74 \ud55c\ub2e4. \ub3c4\uc6c0\uc774 \ub418\ub294 \uc815\ubcf4\uc758 \ucd9c\ucc98\ub294 \ucc38\uace0 \ubb38\ud5cc \uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\ub2e4.","title":"In.struct: \ubb38\uc11c\uc758 \uad6c\uc870"},{"location":"Introduction/#insec","text":"In(Introduction): \uc18c\uac1c P(Philosophy): \ucca0\ud559 I(Interfaces): \uc778\ud130\ud398\uc774\uc2a4 F(Functions): \ud568\uc218 C(Classes and class hierarchies): \ud074\ub798\uc2a4\uc640 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 Enum(Enumerations): \uc5f4\uac70\ud615 R(Resource management): \ub9ac\uc18c\uc2a4 \uad00\ub9ac ES(Expressions and statements): \ud45c\ud604\uc2dd\uacfc \uad6c\ubb38 Per(Performance): \uc131\ub2a5 CP(Concurrency): \ub3d9\uc2dc\uc131 E(Error handling): \uc624\ub958 \ucc98\ub9ac Con(Constants and immutability): \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 T(Templates and generic programming): \ud15c\ud50c\ub9bf\uacfc \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d CPL(C-style programming): C \uc2a4\ud0c0\uc77c \ud504\ub85c\uadf8\ub798\ubc0d SF(Source files): \uc18c\uc2a4 \ud30c\uc77c SL(The Standard library): \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9: A(Architectural Ideas): \ud504\ub85c\uadf8\ub7a8 \uad6c\uc870 \uad00\ub828 \uc544\uc774\ub514\uc5b4 NR(Non-Rules and myths): \uaddc\uce59\uc774 \uc544\ub2cc \ubbf8\uc2e0 RF(References): \ucc38\uace0 \ubb38\ud5cc Pro(Profiles): \ud504\ub85c\ud30c\uc77c GSL(Guideline support library): \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac NL(Naming and layout): \uc774\ub984 \uba85\uba85 \uaddc\uce59\uacfc \ub808\uc774\uc544\uc6c3 FAQ(Answers to frequently asked questions): \uc790\uc8fc \ubb3b\ub294 \uc9c8\ubb38\uc5d0 \ub300\ud55c \ub300\ub2f5 \ubd80\ub85d A: \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd80\ub85d B: \ubaa8\ub358 C++ \uc2a4\ud0c0\uc77c\ub85c \ucf54\ub529\ud558\uae30 \ubd80\ub85d C: \ud1a0\ub860 \ubd80\ub85d D: \uc720\uc6a9\ud55c \ub3c4\uad6c \uc6a9\uc5b4 \uc124\uba85 To-do(Unclassified proto-rules): \ubbf8\ubd84\ub958 \uaddc\uce59 \uac01 \ubd80\ubd84\ub4e4\uc740 \uc11c\ub85c \uc5f0\uad00\ub418\uc5b4 \uc788\ub2e4. \uac01 \ubaa9\ucc28(\"P\"\ub294 \"\ucca0\ud559(Philosophy)\")\uc640 \ubd80 \ubaa9\ucc28(\"C.hier\"\ub294 \"\ud074\ub798\uc2a4 \uacc4\uce35(Class Hierarchies) (OOP)\")\uc740 \uac80\uc0c9, \ucc38\uc870\uc758 \ud3b8\uc758\ub97c \uc704\ud574 \uc57d\uc5b4\ub85c \ud45c\uae30\ud55c\ub2e4. \uc8fc\uc694 \ubaa9\ucc28\uc5d0 \ub300\ud55c \uc57d\uc5b4\ub85c \uaddc\uce59 \ubc88\ud638\ub97c \uc0ac\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4. (\uc989, \"\uac01 \ud0c0\uc785\uc744 \uc77c\ubc18\uc801\uc778 \ud0c0\uc785\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ub77c.\"\ub77c\ub294 \uaddc\uce59\uc744 \"C.11\"\ub85c \ub098\ud0c0\ub0b4\uae30\ub3c4 \ud55c\ub2e4.)","title":"In.sec: \uc8fc\uc694 \ubaa9\ucc28"},{"location":"Naming/","text":"NL: \uc774\ub984\uacfc \ucf54\ub4dc \ubc30\uce58 \ubcc4\ub2e4\ub978 \uc774\uc720\uc5c6\uc774 \"\ub0b4 \uc2a4\ud0c0\uc77c\uc774 \ub2f9\uc2e0 \uac83\ubcf4\ub2e4 \ub354 \uc88b\ub2e4\"\ub294 \ub17c\ub780\uc744 \uc904\uc774\uae30 \uc704\ud574\uc11c\ub77c\uba74 \uc77c\uad00\uc131\uc788\ub294 \uc774\ub984\uc9d3\uae30\uc640 \ub808\uc774\uc544\uc6c3\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uad49\uc7a5\ud788 \ub9ce\uace0 \ub9ce\uc740 \uc2a4\ud0c0\uc77c\uc774 \uc874\uc7ac\ud558\uace0 \uc0ac\ub78c\ub4e4\uc740 \uadf8 \uc2a4\ud0c0\uc77c\uc5d0 \ub300\ud574 \uc5f4\ub82c\ud558\uac8c \uad00\uc2ec(\ucc2c\uc131 \ud639\uc740 \ubc18\ub300)\uc744 \ubcf4\uc778\ub2e4. \ud604\uc2e4\uc758 \ud504\ub85c\uc81d\ud2b8\ub4e4\uc740 \ub9ce\uc740 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\uace0, \ubaa8\ub4e0 \ucf54\ub4dc\uc5d0 \ud558\ub098\uc758 \ud45c\uc900\ud654\ub41c \uc2a4\ud0c0\uc77c\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc740 \uac70\uc758 \ubd88\uac00\ub2a5\uc5d0 \uac00\uae5d\ub2e4. \uc5ec\uae30\uc11c \ub354 \uc88b\uc740 \uc544\uc774\ub514\uc5b4\uac00 \uc5c6\ub2e4\uba74 \ub3c4\uc785\ud574\ub3c4 \ubb34\ubc29\ud55c \uaddc\uce59\ub4e4\uc744 \uc18c\uac1c\ud558\uaca0\ub2e4. \uadf8\ub7ec\ub098 \uaddc\uce59\uc744 \uc18c\uac1c\ud558\ub294 \uc9c4\uc9dc \ubaa9\uc801\uc740 \ud2b9\uc815\ud55c \uaddc\uce59 \uadf8 \uc790\uccb4\uac00 \uc544\ub2c8\ub77c \uc77c\uad00\uc131\uc774\ub2e4. IDE\ub098 \ud234\ub4e4\uc774 \uc774\uac83\uc744 \ub3c4\uc640\uc904 \uac83\uc774\ub2e4. (\uc5b4\uca4c\uba74 \ubc29\ud574\ud560\uc9c0\ub3c4 \ubaa8\ub978\ub2e4.) \uc774\ub984\uacfc \ucf54\ub4dc \ubc30\uce58 \uaddc\uce59 \uc694\uc57d: NL.1: Don't say in comments what can be clearly stated in code NL.2: State intent in comments NL.3: Keep comments crisp NL.4: Maintain a consistent indentation style NL.5: Avoid encoding type information in names NL.7: Make the length of a name roughly proportional to the length of its scope NL.8: Use a consistent naming style NL.9: Use ALL_CAPS for macro names only NL.10: Prefer underscore_style names NL.11: Make literals readable NL.15: Use spaces sparingly NL.16: Use a conventional class member declaration order NL.17: Use K&R-derived layout NL.18: Use C++-style declarator layout NL.19: Avoid names that are easily misread NL.20: Don't place two statements on the same line NL.21: Declare one name (only) per declaration NL.25: Don't use void as an argument type NL.26: Use conventional const notation \uaddc\uce59\ub4e4 \ub300\ubd80\ubd84\uc774 \uc2ec\ubbf8\uc801\uc774\uace0 \uac1c\ubc1c\uc790\ub4e4\uc740 \uc790\uae30 \uc758\uacac\uc744 \uac15\ud558\uac8c \ud45c\ud604\ud55c\ub2e4. IDE \uc5ed\uc2dc \uae30\ubcf8\uac12 \uc678\uc5d0 \uba87\uac00\uc9c0 \ub300\uc548\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uc0c1\ud669\uc774\ub2e4. \ud2b9\ubcc4\ud55c \uc774\uc720\uac00 \uc5c6\ub2e4\uba74 \uc774 \uaddc\uce59\ub4e4\uc744 \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud560 \uac83\uc744 \uc81c\uc548\ud55c\ub2e4. We have had comments to the effect that naming and layout are so personal and/or arbitrary that we should not try to \"legislate\" them. We are not \"legislating\" (see the previous paragraph). However, we have had many requests for a set of naming and layout conventions to use when there are no external constraints. \ub354 \uc790\uc138\ud55c \ub0b4\uc6a9\ub4e4\uc774 \uc801\uc6a9\ud558\uae30 \uc26c\uc6b8 \uac83\uc774\ub2e4. These rules bear a strong resemblance to the recommendations in the PPP Style Guide written in support of Stroustrup's Programming: Principles and Practice using C++ . NL.1: \ucf54\ub4dc\ub9cc\uc73c\ub85c \uc54c \uc218 \uc788\ub294 \ub0b4\uc6a9\uc744 \uc8fc\uc11d\ubb38\uc5d0 \ub123\uc9c0 \ub9c8\ub77c Reason \ucef4\ud30c\uc77c\ub7ec\ub294 \uc8fc\uc11d\uc744 \uc77d\uc9c0 \uc54a\ub294\ub2e4. \uc8fc\uc11d\uc774 \ucf54\ub4dc\ub9cc\ud07c \uc815\ud655\ud558\uc9c0 \uc54a\ub2e4. \uc8fc\uc11d\uc740 \ucf54\ub4dc\uc640 \ub3d9\uc2dc\uc5d0 \uc5c5\ub370\uc774\ud2b8\ub418\uc9c0 \uc54a\ub294\ub2e4. Example, bad auto x = m * v1 + vv ; // multiply m with v1 and add the result to vv Enforcement \uad6c\uc5b4\uccb4 \ubb38\uc7a5\uc744 \ubc88\uc5ed\ud558\ub294 \uc778\uacf5\uc9c0\ub2a5 \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4e4\uace0 C++\ub85c \uc798 \ud45c\ud604\ud560 \uc218 \uc788\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4. NL.2: \uc8fc\uc11d\uc5d0\ub294 \uc758\ub3c4\ub97c \uae30\uc220\ud558\ub77c Reason \ucf54\ub4dc\ub294 \ubb34\uc5c7\uc744 \ud560\uc9c0\uac00 \uc544\ub2c8\ub77c \ubb34\uc5c7\uc744 \ud588\ub294\uc9c0\ub97c \ub9d0\ud55c\ub2e4. \uc8fc\uc11d\uc740 \uad6c\ud604\ub41c \ub0b4\uc6a9\ubcf4\ub2e4 \ubaa9\uc801\uc774\ub098 \uc758\ub3c4\ub97c \uac04\uacb0\ud558\uace0 \uba85\ucf8c\ud558\uac8c \uae30\uc220\ud560 \uc218 \uc788\ub2e4. Example void stable_sort ( Sortable & c ) // sort c in the order determined by <, keep equal elements (as defined by ==) in // their original relative order { // ... quite a few lines of non-trivial code ... } Note \uc8fc\uc11d\uacfc \ucf54\ub4dc\uac00 \ub2e4\ub974\ub2e4\uba74 \ub458\ub2e4 \ud2c0\ub838\uc744\uac70\ub2e4. NL.3: \uc8fc\uc11d\uc744 \uac04\ub7b5\ud558\uac8c \uc720\uc9c0\ud558\ub77c Reason \ub9d0\uc774 \ub9ce\uc73c\uba74 \uc774\ud574\ub3c4\uac00 \ub5a8\uc5b4\uc9c0\uace0 \uc18c\uc2a4\ud30c\uc77c\uc5d0 \ud37c\uc838 \ubcf4\uc5ec\uc11c \ucf54\ub4dc\ub97c \uc77d\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4e0\ub2e4. Note Use intelligible English. I may be fluent in Danish, but most programmers are not; the maintainers of my code may not be. Avoid SMS lingo and watch your grammar, punctuation, and capitalization. Aim for professionalism, not \"cool.\" Enforcement not possible. NL.4: \ub4e4\uc5ec\uc4f0\uae30 \uc2a4\ud0c0\uc77c\uc744 \uc77c\uad00\uc131 \uc788\uac8c \ud558\ub77c Reason \uac00\ub3c5\uc131 \ud5a5\uc0c1. \uba4d\uccad\ud55c \uc2e4\uc218\ub97c \ud53c\ud558\uae30 \uc704\ud574. Example, bad int i ; for ( i = 0 ; i < max ; ++ i ); // bug waiting to happen if ( i == j ) return i ; Note Always indenting the statement after if (...) , for (...) , and while (...) is usually a good idea: if ( i < 0 ) error ( \"negative argument\" ); if ( i < 0 ) error ( \"negative argument\" ); Enforcement \ud234\uc744 \uc0ac\uc6a9\ud558\ub77c. NL.5: \uc774\ub984 \uc548\uc5d0 \ud0c0\uc785 \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uc9c0 \ub9c8\ub77c Rationale \uc774\ub984\uc774 \uae30\ub2a5\ubcf4\ub2e4\ub294 \ud0c0\uc785\uc744 \ubc18\uc601\ud55c\ub2e4\uba74, \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \ud0c0\uc785\ub4e4\uc744 \ubc14\uafb8\uae30 \uc5b4\ub824\uc6cc\uc9c4\ub2e4. \ub610\ud55c, \ud0c0\uc785\uc774 \ubc14\ub00c\uba74 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \ubcc0\uc218\ub3c4 \ud568\uaed8 \ubc14\ub00c\uc5b4\uc57c \ud55c\ub2e4. Minimize unintentional conversions. Example, bad void print_int ( int i ); void print_string ( const char * ); print_int ( 1 ); // repetitive, manual type matching print_string ( \"xyzzy\" ); // repetitive, manual type matching Example, good void print ( int i ); void print ( string_view ); // also works on any string-like sequence print ( 1 ); // clear, automatic type matching print ( \"xyzzy\" ); // clear, automatic type matching Note Names with types encoded are either verbose or cryptic. printS // print a std::string prints // print a C-style string printi // print an int Requiring techniques like Hungarian notation to encode a type in a name is needed in C, but is generally unnecessary and actively harmful in a strongly statically-typed language like C++, because the annotations get out of date (the warts are just like comments and rot just like them) and they interfere with good use of the language (use the same name and overload resolution instead). Note Some styles use very general (not type-specific) prefixes to denote the general use of a variable. auto p = new User (); auto p = make_unique < User > (); // note: \"p\" is not being used to say \"raw pointer to type User,\" // just generally to say \"this is an indirection\" auto cntHits = calc_total_of_hits ( /*...*/ ); // note: \"cnt\" is not being used to encode a type, // just generally to say \"this is a count of something\" This is not harmful and does not fall under this guideline because it does not encode type information. Note \uc5b4\ub5a4 \uc2a4\ud0c0\uc77c\uc740 \uc9c0\uc5ed\ubcc0\uc218\uc640 \uba64\ubc84\ubcc0\uc218\ub97c \uad6c\ubd84\ud558\uac70\ub098 \uc804\uc5ed\ubcc0\uc218\ub97c \uad6c\ubd84\ud558\ub824\uace0 \ud55c\ub2e4. struct S { int m_ ; S ( int m ) : m_ { abs ( m )} { } }; \uc774\ub294 \uc720\ud574\ud558\uc9c0 \uc54a\uace0 \ud0c0\uc785 \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\ub3c4 \uc704\ubc30\ub418\uc9c0 \uc54a\ub294\ub2e4. Note \uc5b4\ub5a4 \uc2a4\ud0c0\uc77c\uc740 \ud0c0\uc785\uacfc \ube44\ud0c0\uc785\uc744 \uad6c\ubd84\ud558\ub824\uace0 \ud55c\ub2e4. For example, by capitalizing type names, but not the names of functions and variables. typename < typename T > class HashTable { // maps string to T // ... }; HashTable < int > index ; \uc774\ub294 \uc720\ud574\ud558\uc9c0 \uc54a\uace0 \ud0c0\uc785 \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\ub3c4 \uc704\ubc30\ub418\uc9c0 \uc54a\ub294\ub2e4. NL.7: Make the length of a name roughly proportional to the length of its scope Rationale : The larger the scope the greater the chance of confusion and of an unintended name clash. Example double sqrt ( double x ); // return the square root of x; x must be non-negative int length ( const char * p ); // return the number of characters in a zero-terminated C-style string int length_of_string ( const char zero_terminated_array_of_char []) // bad: verbose int g ; // bad: global variable with a cryptic name int open ; // bad: global variable with a short, popular name The use of p for pointer and x for a floating-point variable is conventional and non-confusing in a restricted scope. Enforcement ??? NL.8: \uc77c\uad00\uc801\uc778 \uc774\ub984\uc9d3\uae30 \uc2a4\ud0c0\uc77c\uc744 \uc0ac\uc6a9\ud558\ub77c Rationale : \uc77c\uad00\uc131 \uc788\uac8c \uc774\ub984\uc744 \uc815\ud558\uba74 \uac00\ub3c5\uc131\uc744 \ub192\uc5ec\uc900\ub2e4. Note \ub9ce\uc740 \uc2a4\ud0c0\uc77c\uc774 \uacf5\uc874\ud558\uace0 \ubcf5\uc218\uac1c\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \ub54c \ubaa8\ub4e0 \ub124\uc774\ubc0d \ubc29\uc2dd\uc744 \ub530\ub97c \uc218\ub294 \uc5c6\ub2e4. \"\uac00\uc838\uc640 \uc0ac\uc6a9\ud558\ub294\" \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uac00\uc9c4 \uace0\uc720 \uc2a4\ud0c0\uc77c\uc740 \uadf8\ub300\ub85c \ub450\uace0\uc790\uae30 \uc2a4\ud0c0\uc77c\uc744 \uc120\ud0dd\ud558\ub77c. Example ISO \ud45c\uc900\uc740 \uc18c\ubb38\uc790, \uc22b\uc790, _ \ub85c \uad6c\ubd84\ub41c \ub2e8\uc5b4\ub9cc \uc0ac\uc6a9\ud55c\ub2e4: int vector my_map \ub450\uac1c \uc9dc\ub9ac __ \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Example Stroustrup : ISO Standard, but with upper case used for your own types and concepts: int vector My_map Example \ub099\ud0c0\ud45c\uae30\ubc95(CamelCase): \uc5ec\ub7ec \ub2e8\uc5b4\ub85c \uad6c\uc131\ub41c \uc2dd\ubcc4\uc790\uc5d0\uc11c \ub2e8\uc5b4\uc758 \uccab\uae00\uc790\ub97c \ub300\ubb38\uc790\ub85c \ud55c\ub2e4: int vector MyMap myMap \ub9e8 \uccab\uae00\uc790\ub97c \uc18c\ubb38\uc790\ub85c \ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. Note \uc57d\uc5b4(acronym)\ub098 \uc2dd\ubcc4\uc790 \uae38\uc774\ub3c4 \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud558\ub3c4\ub85d \ud558\ub77c: int mtbf { 12 }; int mean_time_between_failures { 12 }; // make up your mind Enforcement \uc2a4\ud0c0\uc77c\uc774 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub97c \ubeec\uace0\ub294 \uc2dc\ud589\uc774 \uac00\ub2a5\ud560 \uac83\uc774\ub2e4. NL.9: \ub9e4\ud06c\ub85c \uba85\uce6d\uc5d0\ub9cc \uc804\uccb4 \ub300\ubb38\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ubc94\uc704\uc640 \ud0c0\uc785 \uaddc\uce59\uc744 \uc9c0\ud0a4\ub294 \uc774\ub984\uc5d0 \ub300\ud574\uc11c\ub294 \ub9e4\ud06c\ub85c\uc640 \ud63c\ub3c8\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\uae30 \uc704\ud574. Example void f () { const int SIZE { 1000 }; // Bad, use 'size' instead int v [ SIZE ]; } Note \uc774 \uaddc\uce59\uc740 \ub9e4\ud06c\ub85c\uac00 \uc544\ub2cc \uc0c1\uc218\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4: enum bad { BAD , WORSE , HORRIBLE }; // BAD Enforcement \uc18c\ubb38\uc790\ub85c \ub41c \ub9e4\ud06c\ub85c\ub97c \uc9c0\uc801\ud558\ub77c \ub9e4\ud06c\ub85c\uac00 \uc544\ub2cc\ub370 \ub300\ubb38\uc790\ub85c \ub41c \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c NL.10: underscore_style \ud615\ud0dc\uc758 \uc774\ub984\uc744 \uc120\ud638\ud558\ub77c Reason \uc774\ub984\uc758 \uac01 \ubd80\ubd84\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud574 _ \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc6d0\ub798 C/C++ \uc2a4\ud0c0\uc77c\uc774\uace0 C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\ub3c4 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4. Note \uc774 \uaddc\uce59\uc740 \uc120\ud0dd\uc774 \ud544\uc694\ud560 \ub54c\uc758 \uae30\ubcf8 \uaddc\uce59\uc774\ub2e4. \uc774\ubbf8 \uc815\ub9bd\ub41c \uc2a4\ud0c0\uc77c\uacfc\uc758 \uc77c\uad00\uc131 \uc744 \uc9c0\ucf1c\uc57c \ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc744 \uc218 \uc788\ub2e4. \uac1c\uc778\uc758 \ucde8\ud5a5\ubcf4\ub2e4\ub294 \uc77c\uad00\uc131\uc774 \uc911\uc694\ud558\ub2e4. This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance. Example Stroustrup : \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785, \uac1c\ub150\uc5d0 \ub300\ud574 \ub300\ubb38\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 ISO \ud45c\uc900: int vector My_map Enforcement \ubd88\uac00\ub2a5\ud558\ub2e4. NL.15: \uc2a4\ud398\uc774\uc2a4\ub97c \uc544\uaef4\uc11c \uc0ac\uc6a9\ud558\ub77c Reason \ub108\ubb34 \ub9ce\uc740 \uc2a4\ud398\uc774\uc2a4\ub294 \ucf54\ub4dc\ub97c \uae38\uace0 \uc0b0\ub9cc\ud558\uac8c \ub9cc\ub4e0\ub2e4 Example, bad #include < map > int main ( int argc , char * argv [ ]) { // ... } Example #include <map> int main ( int argc , char * argv []) { // ... } Note \uba87\uba87 IDE\ub294 \uadf8\ub4e4\ub9cc\uc758 \ud655\uc2e0\uc5d0 \ub530\ub77c \ucd94\uac00\uc801\uc778 \uc2a4\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4. This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance. Note \uc798 \uc815\ub9ac\ub41c \uc2a4\ud398\uc774\uc2a4\ub294 \uac00\ub3c5\uc131 \ud5a5\uc0c1\uc5d0 \ub9ce\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uacfc\ub3c4\ud558\uc9c0\ub9cc \uc54a\uc73c\uba74 \ub41c\ub2e4. NL.11: Make literals readable Reason Readability. Example Use digit separators to avoid long strings of digits auto c = 299 ' 792 ' 458 ; // m/s2 auto q2 = 0 b0000 ' 1111 ' 0000 ' 0000 ; auto ss_number = 123 ' 456 ' 7890 ; Example Use literal suffixes where clarification is needed auto hello = \"Hello!\" s ; // a std::string auto world = \"world\" ; // a C-style string auto interval = 100 ms ; // using <chrono> Note Literals should not be sprinkled all over the code as \"magic constants\" , but it is still a good idea to make them readable where they are defined. It is easy to make a typo in a long string of integers. Enforcement Flag long digit sequences. The trouble is to define \"long\"; maybe 7. NL.16: \uc77c\ubc18\uc801\uc778 \ud074\ub798\uc2a4 \uba64\ubc84 \uc120\uc5b8 \uc21c\uc11c\ub97c \uc9c0\ucf1c\ub77c Reason \uba64\ubc84 \uc120\uc5b8 \uc21c\uc11c\ub294 \uac00\ub3c5\uc131\uc744 \ub192\uc5ec\uc900\ub2e4. \ud074\ub798\uc2a4 \uc120\uc5b8\uc2dc \ub2e4\uc74c \uc21c\uc11c\ub97c \uc0ac\uc6a9\ud558\ub77c \ud0c0\uc785: class, enum, alias ( using \uad6c\ubb38) \uc0dd\uc131\uc790, \ubcf5\uc0ac \uc0dd\uc131\uc790, \ud574\uc81c\uc790. \ud568\uc218 \ub370\uc774\ud130 public , protected , private \uc21c\uc73c\ub85c \uc120\uc5b8\ud558\ub77c. This is a recommendation for when you have no constraints or better ideas . \uc774 \uaddc\uce59\uc740 \uc218\ub9ce\uc740 \uc694\uccad\uc5d0 \uc758\ud574 \ucd94\uac00\ub418\uc5c8\ub2e4. Example class X { public : // interface protected : // unchecked function for use by derived class implementations private : // implementation details }; Example Sometimes, the default order of members conflicts with a desire to separate the public interface from implementation details. In such cases, private types and functions can be placed with private data. class X { public : // interface protected : // unchecked function for use by derived class implementations private : // implementation details (types, functions, and data) }; Example, bad Avoid multiple blocks of declarations of one access (e.g., public ) dispersed among blocks of declarations with different access (e.g. private ). class X { // bad public : void f (); public : int g (); // ... }; The use of macros to declare groups of members often leads to violation of any ordering rules. However, macros obscures what is being expressed anyway. Enforcement \uc81c\uc548\ub41c \uc21c\uc11c\uc640 \ub2e4\ub974\uba74 \uc9c0\uc801\ud558\ub77c. \uc774 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294 \uc608\uc804 \ucf54\ub4dc\uac00 \ub9ce\uc774 \uc788\uc744 \uac83\uc774\ub2e4. NL.17: K&R \ubc29\uc2dd\uc758 \ub808\uc774\uc544\uc6c3\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uc774 \ubc29\uc2dd\uc774 C/C++\uc758 \uace0\uc720\ud55c \ub808\uc774\uc544\uc6c3\uc774\ub2e4. \uc218\uc9c1\uc801\uc778 \ubc30\uce58\uac00 \uc720\uc9c0\ub418\uace0 (\ud568\uc218\ub098 \ud074\ub798\uc2a4 \uac19\uc740) \uc5b8\uc5b4 \uc694\uc18c\ub97c \uad6c\ubd84\ud558\uae30\uac00 \uc27d\ub2e4. Note C++\uc5d0\uc11c\ub294 \"Stroustrup\" \uc2a4\ud0c0\uc77c\uc774\ub77c\uace0 \ubd80\ub974\uae30\ub3c4 \ud55c\ub2e4. This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance. Example struct Cable { int x ; // ... }; double foo ( int x ) { if ( 0 < x ) { // ... } switch ( x ) { case 0 : // ... break ; case amazing : // ... break ; default : // ... break ; } if ( 0 < x ) ++ x ; if ( x < 0 ) something (); else something_else (); return some_value ; } if \uc640 ( \uc0ac\uc774\uc5d0 \uc2a4\ud398\uc774\uc2a4\ub97c \ud55c\uce78 \ub123\ub294\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. Note Use separate lines for each statement, the branches of an if , and the body of a for . Note The { for a class and a struct is not on a separate line, but the { for a function is. Note \ud45c\uc900\ub77c\uc774\ube0c\ub7ec\ub9ac \ud0c0\uc785\uacfc \uad6c\ubd84\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc740 \ub300\ubb38\uc790\ub85c \uc774\ub984\uc744 \uc9d3\ub294\ub2e4. Note \ud568\uc218 \uc774\ub984\uc5d0\ub294 \ub300\ubb38\uc790\ub97c \uc4f0\uc9c0 \ub9c8\ub77c. Enforcement IDE\ub85c \ub2e4\uc2dc \ud3ec\ub9f7\uc744 \ub9de\ucdb0\ub77c. NL.18: C++ \uc2a4\ud0c0\uc77c\uc758 \uc120\uc5b8 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub77c Reason C \uc2a4\ud0c0\uc77c\uc758 \uc120\uc5b8 \ubc29\uc2dd\uc740 \ud45c\ud604\uc2dd\uacfc \ubb38\ubc95\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294\ub370 \uac15\uc870\ub97c \ub454\ub2e4\uba74, C++ \uc2a4\ud0c0\uc77c\uc740 \ud0c0\uc785\uc744 \uac15\uc870\ud55c\ub2e4. \uc120\uc5b8\uc5d0\uc11c \uc0ac\uc6a9\uc2dc \uc778\uc790\ub294 \ucc38\uc870\ub97c \ubd99\uc774\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4. Example T & operator []( size_t ); // OK T & operator []( size_t ); // just strange T & operator []( size_t ); // undecided Note This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance. Enforcement \uc5ed\uc0ac\uc801\uc73c\ub85c \ubcfc\ub54c \ubd88\uac00\ub2a5. NL.19: Avoid names that are easily misread Reason Readability. Not everyone has screens and printers that make it easy to distinguish all characters. We easily confuse similarly spelled and slightly misspelled words. Example int oO01lL = 6 ; // bad int splunk = 7 ; int splonk = 8 ; // bad: splunk and splonk are easily confused Enforcement ??? NL.20: Don't place two statements on the same line Reason Readability. It is really easy to overlook a statement when there is more on a line. Example int x = 7 ; char * p = 29 ; // don't int x = 7 ; f ( x ); ++ x ; // don't Enforcement Easy. NL.21: Declare one name (only) per declaration Reason Readability. Minimizing confusion with the declarator syntax. Note For details, see ES.10 . NL.25: \uc778\uc790 \ud0c0\uc785\uc73c\ub85c void \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason C \ud638\ud658\uc774 \ubb38\uc81c\ub420 \ub54c\ub9cc \ud544\uc694\ud558\ub2e4. Example void f ( void ); // bad void g (); // better Note \ub370\ub2c8\uc2a4 \ub9ac\uce58\ub3c4 void f(void) \ub294 \uc2eb\uc5b4\ud55c\ub2e4\uace0 \ub9d0\ud588\ub2e4. \ud568\uc218 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub4dc\ubb3c\uac8c \uae08\uc9c0\ub420 \uacbd\uc6b0 C\uc5d0\uc11c \uadf8\ub7f0 abomination\uc5d0 \ub300\ud574\uc11c \uc778\uc790\ub97c \ucd94\uac00\ud560 \uc218 \uc788\ub2e4: int f (); f ( 1 , 2 , \"weird but valid C89\" ); // hope that f() is defined int f(a, b, c) char* c; { /* ... */ } \uc911\uc694\ud55c \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uac83\uc778\ub370 21\uc138\uae30\uc758 C\ub098 C++\uc5d0\ub294 \uc804\ud600 \ubb38\uc81c\ub418\uc9c0 \uc54a\ub294\ub2e4. NL.26: Use conventional const notation Reason Conventional notation is more familiar to more programmers. Consistency in large code bases. Example const int x = 7 ; // OK int const y = 9 ; // bad const int * const p = nullptr ; // OK, constant pointer to constant int int const * const p = nullptr ; // bad, constant pointer to constant int Note We are well aware that you could claim the \"bad\" examples more logical than the ones marked \"OK\", but they also confuse more people, especially novices relying on teaching material using the far more common, conventional OK style. As ever, remember that the aim of these naming and layout rules is consistency and that aesthetics vary immensely. This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance. Enforcement Flag const used as a suffix for a type.","title":"Naming"},{"location":"Naming/#nl","text":"\ubcc4\ub2e4\ub978 \uc774\uc720\uc5c6\uc774 \"\ub0b4 \uc2a4\ud0c0\uc77c\uc774 \ub2f9\uc2e0 \uac83\ubcf4\ub2e4 \ub354 \uc88b\ub2e4\"\ub294 \ub17c\ub780\uc744 \uc904\uc774\uae30 \uc704\ud574\uc11c\ub77c\uba74 \uc77c\uad00\uc131\uc788\ub294 \uc774\ub984\uc9d3\uae30\uc640 \ub808\uc774\uc544\uc6c3\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uad49\uc7a5\ud788 \ub9ce\uace0 \ub9ce\uc740 \uc2a4\ud0c0\uc77c\uc774 \uc874\uc7ac\ud558\uace0 \uc0ac\ub78c\ub4e4\uc740 \uadf8 \uc2a4\ud0c0\uc77c\uc5d0 \ub300\ud574 \uc5f4\ub82c\ud558\uac8c \uad00\uc2ec(\ucc2c\uc131 \ud639\uc740 \ubc18\ub300)\uc744 \ubcf4\uc778\ub2e4. \ud604\uc2e4\uc758 \ud504\ub85c\uc81d\ud2b8\ub4e4\uc740 \ub9ce\uc740 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\uace0, \ubaa8\ub4e0 \ucf54\ub4dc\uc5d0 \ud558\ub098\uc758 \ud45c\uc900\ud654\ub41c \uc2a4\ud0c0\uc77c\uc744 \uc801\uc6a9\ud558\ub294 \uac83\uc740 \uac70\uc758 \ubd88\uac00\ub2a5\uc5d0 \uac00\uae5d\ub2e4. \uc5ec\uae30\uc11c \ub354 \uc88b\uc740 \uc544\uc774\ub514\uc5b4\uac00 \uc5c6\ub2e4\uba74 \ub3c4\uc785\ud574\ub3c4 \ubb34\ubc29\ud55c \uaddc\uce59\ub4e4\uc744 \uc18c\uac1c\ud558\uaca0\ub2e4. \uadf8\ub7ec\ub098 \uaddc\uce59\uc744 \uc18c\uac1c\ud558\ub294 \uc9c4\uc9dc \ubaa9\uc801\uc740 \ud2b9\uc815\ud55c \uaddc\uce59 \uadf8 \uc790\uccb4\uac00 \uc544\ub2c8\ub77c \uc77c\uad00\uc131\uc774\ub2e4. IDE\ub098 \ud234\ub4e4\uc774 \uc774\uac83\uc744 \ub3c4\uc640\uc904 \uac83\uc774\ub2e4. (\uc5b4\uca4c\uba74 \ubc29\ud574\ud560\uc9c0\ub3c4 \ubaa8\ub978\ub2e4.) \uc774\ub984\uacfc \ucf54\ub4dc \ubc30\uce58 \uaddc\uce59 \uc694\uc57d: NL.1: Don't say in comments what can be clearly stated in code NL.2: State intent in comments NL.3: Keep comments crisp NL.4: Maintain a consistent indentation style NL.5: Avoid encoding type information in names NL.7: Make the length of a name roughly proportional to the length of its scope NL.8: Use a consistent naming style NL.9: Use ALL_CAPS for macro names only NL.10: Prefer underscore_style names NL.11: Make literals readable NL.15: Use spaces sparingly NL.16: Use a conventional class member declaration order NL.17: Use K&R-derived layout NL.18: Use C++-style declarator layout NL.19: Avoid names that are easily misread NL.20: Don't place two statements on the same line NL.21: Declare one name (only) per declaration NL.25: Don't use void as an argument type NL.26: Use conventional const notation \uaddc\uce59\ub4e4 \ub300\ubd80\ubd84\uc774 \uc2ec\ubbf8\uc801\uc774\uace0 \uac1c\ubc1c\uc790\ub4e4\uc740 \uc790\uae30 \uc758\uacac\uc744 \uac15\ud558\uac8c \ud45c\ud604\ud55c\ub2e4. IDE \uc5ed\uc2dc \uae30\ubcf8\uac12 \uc678\uc5d0 \uba87\uac00\uc9c0 \ub300\uc548\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uc0c1\ud669\uc774\ub2e4. \ud2b9\ubcc4\ud55c \uc774\uc720\uac00 \uc5c6\ub2e4\uba74 \uc774 \uaddc\uce59\ub4e4\uc744 \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud560 \uac83\uc744 \uc81c\uc548\ud55c\ub2e4. We have had comments to the effect that naming and layout are so personal and/or arbitrary that we should not try to \"legislate\" them. We are not \"legislating\" (see the previous paragraph). However, we have had many requests for a set of naming and layout conventions to use when there are no external constraints. \ub354 \uc790\uc138\ud55c \ub0b4\uc6a9\ub4e4\uc774 \uc801\uc6a9\ud558\uae30 \uc26c\uc6b8 \uac83\uc774\ub2e4. These rules bear a strong resemblance to the recommendations in the PPP Style Guide written in support of Stroustrup's Programming: Principles and Practice using C++ .","title":"NL: \uc774\ub984\uacfc \ucf54\ub4dc \ubc30\uce58"},{"location":"Naming/#nl1","text":"","title":"NL.1: \ucf54\ub4dc\ub9cc\uc73c\ub85c \uc54c \uc218 \uc788\ub294 \ub0b4\uc6a9\uc744 \uc8fc\uc11d\ubb38\uc5d0 \ub123\uc9c0 \ub9c8\ub77c"},{"location":"Naming/#reason","text":"\ucef4\ud30c\uc77c\ub7ec\ub294 \uc8fc\uc11d\uc744 \uc77d\uc9c0 \uc54a\ub294\ub2e4. \uc8fc\uc11d\uc774 \ucf54\ub4dc\ub9cc\ud07c \uc815\ud655\ud558\uc9c0 \uc54a\ub2e4. \uc8fc\uc11d\uc740 \ucf54\ub4dc\uc640 \ub3d9\uc2dc\uc5d0 \uc5c5\ub370\uc774\ud2b8\ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"Reason"},{"location":"Naming/#example-bad","text":"auto x = m * v1 + vv ; // multiply m with v1 and add the result to vv","title":"Example, bad"},{"location":"Naming/#enforcement","text":"\uad6c\uc5b4\uccb4 \ubb38\uc7a5\uc744 \ubc88\uc5ed\ud558\ub294 \uc778\uacf5\uc9c0\ub2a5 \ud504\ub85c\uadf8\ub7a8\uc744 \ub9cc\ub4e4\uace0 C++\ub85c \uc798 \ud45c\ud604\ud560 \uc218 \uc788\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4.","title":"Enforcement"},{"location":"Naming/#nl2","text":"","title":"NL.2: \uc8fc\uc11d\uc5d0\ub294 \uc758\ub3c4\ub97c \uae30\uc220\ud558\ub77c"},{"location":"Naming/#reason_1","text":"\ucf54\ub4dc\ub294 \ubb34\uc5c7\uc744 \ud560\uc9c0\uac00 \uc544\ub2c8\ub77c \ubb34\uc5c7\uc744 \ud588\ub294\uc9c0\ub97c \ub9d0\ud55c\ub2e4. \uc8fc\uc11d\uc740 \uad6c\ud604\ub41c \ub0b4\uc6a9\ubcf4\ub2e4 \ubaa9\uc801\uc774\ub098 \uc758\ub3c4\ub97c \uac04\uacb0\ud558\uace0 \uba85\ucf8c\ud558\uac8c \uae30\uc220\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Naming/#example","text":"void stable_sort ( Sortable & c ) // sort c in the order determined by <, keep equal elements (as defined by ==) in // their original relative order { // ... quite a few lines of non-trivial code ... }","title":"Example"},{"location":"Naming/#note","text":"\uc8fc\uc11d\uacfc \ucf54\ub4dc\uac00 \ub2e4\ub974\ub2e4\uba74 \ub458\ub2e4 \ud2c0\ub838\uc744\uac70\ub2e4.","title":"Note"},{"location":"Naming/#nl3","text":"","title":"NL.3: \uc8fc\uc11d\uc744 \uac04\ub7b5\ud558\uac8c \uc720\uc9c0\ud558\ub77c"},{"location":"Naming/#reason_2","text":"\ub9d0\uc774 \ub9ce\uc73c\uba74 \uc774\ud574\ub3c4\uac00 \ub5a8\uc5b4\uc9c0\uace0 \uc18c\uc2a4\ud30c\uc77c\uc5d0 \ud37c\uc838 \ubcf4\uc5ec\uc11c \ucf54\ub4dc\ub97c \uc77d\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4e0\ub2e4.","title":"Reason"},{"location":"Naming/#note_1","text":"Use intelligible English. I may be fluent in Danish, but most programmers are not; the maintainers of my code may not be. Avoid SMS lingo and watch your grammar, punctuation, and capitalization. Aim for professionalism, not \"cool.\"","title":"Note"},{"location":"Naming/#enforcement_1","text":"not possible.","title":"Enforcement"},{"location":"Naming/#nl4","text":"","title":"NL.4: \ub4e4\uc5ec\uc4f0\uae30 \uc2a4\ud0c0\uc77c\uc744 \uc77c\uad00\uc131 \uc788\uac8c \ud558\ub77c"},{"location":"Naming/#reason_3","text":"\uac00\ub3c5\uc131 \ud5a5\uc0c1. \uba4d\uccad\ud55c \uc2e4\uc218\ub97c \ud53c\ud558\uae30 \uc704\ud574.","title":"Reason"},{"location":"Naming/#example-bad_1","text":"int i ; for ( i = 0 ; i < max ; ++ i ); // bug waiting to happen if ( i == j ) return i ;","title":"Example, bad"},{"location":"Naming/#note_2","text":"Always indenting the statement after if (...) , for (...) , and while (...) is usually a good idea: if ( i < 0 ) error ( \"negative argument\" ); if ( i < 0 ) error ( \"negative argument\" );","title":"Note"},{"location":"Naming/#enforcement_2","text":"\ud234\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Enforcement"},{"location":"Naming/#nl5","text":"","title":"NL.5: \uc774\ub984 \uc548\uc5d0 \ud0c0\uc785 \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Naming/#rationale","text":"\uc774\ub984\uc774 \uae30\ub2a5\ubcf4\ub2e4\ub294 \ud0c0\uc785\uc744 \ubc18\uc601\ud55c\ub2e4\uba74, \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\ub294 \ud0c0\uc785\ub4e4\uc744 \ubc14\uafb8\uae30 \uc5b4\ub824\uc6cc\uc9c4\ub2e4. \ub610\ud55c, \ud0c0\uc785\uc774 \ubc14\ub00c\uba74 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \ubcc0\uc218\ub3c4 \ud568\uaed8 \ubc14\ub00c\uc5b4\uc57c \ud55c\ub2e4. Minimize unintentional conversions.","title":"Rationale"},{"location":"Naming/#example-bad_2","text":"void print_int ( int i ); void print_string ( const char * ); print_int ( 1 ); // repetitive, manual type matching print_string ( \"xyzzy\" ); // repetitive, manual type matching","title":"Example, bad"},{"location":"Naming/#example-good","text":"void print ( int i ); void print ( string_view ); // also works on any string-like sequence print ( 1 ); // clear, automatic type matching print ( \"xyzzy\" ); // clear, automatic type matching","title":"Example, good"},{"location":"Naming/#note_3","text":"Names with types encoded are either verbose or cryptic. printS // print a std::string prints // print a C-style string printi // print an int Requiring techniques like Hungarian notation to encode a type in a name is needed in C, but is generally unnecessary and actively harmful in a strongly statically-typed language like C++, because the annotations get out of date (the warts are just like comments and rot just like them) and they interfere with good use of the language (use the same name and overload resolution instead).","title":"Note"},{"location":"Naming/#note_4","text":"Some styles use very general (not type-specific) prefixes to denote the general use of a variable. auto p = new User (); auto p = make_unique < User > (); // note: \"p\" is not being used to say \"raw pointer to type User,\" // just generally to say \"this is an indirection\" auto cntHits = calc_total_of_hits ( /*...*/ ); // note: \"cnt\" is not being used to encode a type, // just generally to say \"this is a count of something\" This is not harmful and does not fall under this guideline because it does not encode type information.","title":"Note"},{"location":"Naming/#note_5","text":"\uc5b4\ub5a4 \uc2a4\ud0c0\uc77c\uc740 \uc9c0\uc5ed\ubcc0\uc218\uc640 \uba64\ubc84\ubcc0\uc218\ub97c \uad6c\ubd84\ud558\uac70\ub098 \uc804\uc5ed\ubcc0\uc218\ub97c \uad6c\ubd84\ud558\ub824\uace0 \ud55c\ub2e4. struct S { int m_ ; S ( int m ) : m_ { abs ( m )} { } }; \uc774\ub294 \uc720\ud574\ud558\uc9c0 \uc54a\uace0 \ud0c0\uc785 \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\ub3c4 \uc704\ubc30\ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Naming/#note_6","text":"\uc5b4\ub5a4 \uc2a4\ud0c0\uc77c\uc740 \ud0c0\uc785\uacfc \ube44\ud0c0\uc785\uc744 \uad6c\ubd84\ud558\ub824\uace0 \ud55c\ub2e4. For example, by capitalizing type names, but not the names of functions and variables. typename < typename T > class HashTable { // maps string to T // ... }; HashTable < int > index ; \uc774\ub294 \uc720\ud574\ud558\uc9c0 \uc54a\uace0 \ud0c0\uc785 \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\ub3c4 \uc704\ubc30\ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Naming/#nl7-make-the-length-of-a-name-roughly-proportional-to-the-length-of-its-scope","text":"Rationale : The larger the scope the greater the chance of confusion and of an unintended name clash.","title":"NL.7: Make the length of a name roughly proportional to the length of its scope"},{"location":"Naming/#example_1","text":"double sqrt ( double x ); // return the square root of x; x must be non-negative int length ( const char * p ); // return the number of characters in a zero-terminated C-style string int length_of_string ( const char zero_terminated_array_of_char []) // bad: verbose int g ; // bad: global variable with a cryptic name int open ; // bad: global variable with a short, popular name The use of p for pointer and x for a floating-point variable is conventional and non-confusing in a restricted scope.","title":"Example"},{"location":"Naming/#enforcement_3","text":"???","title":"Enforcement"},{"location":"Naming/#nl8","text":"Rationale : \uc77c\uad00\uc131 \uc788\uac8c \uc774\ub984\uc744 \uc815\ud558\uba74 \uac00\ub3c5\uc131\uc744 \ub192\uc5ec\uc900\ub2e4.","title":"NL.8: \uc77c\uad00\uc801\uc778 \uc774\ub984\uc9d3\uae30 \uc2a4\ud0c0\uc77c\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Naming/#note_7","text":"\ub9ce\uc740 \uc2a4\ud0c0\uc77c\uc774 \uacf5\uc874\ud558\uace0 \ubcf5\uc218\uac1c\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \ub54c \ubaa8\ub4e0 \ub124\uc774\ubc0d \ubc29\uc2dd\uc744 \ub530\ub97c \uc218\ub294 \uc5c6\ub2e4. \"\uac00\uc838\uc640 \uc0ac\uc6a9\ud558\ub294\" \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uac00\uc9c4 \uace0\uc720 \uc2a4\ud0c0\uc77c\uc740 \uadf8\ub300\ub85c \ub450\uace0\uc790\uae30 \uc2a4\ud0c0\uc77c\uc744 \uc120\ud0dd\ud558\ub77c.","title":"Note"},{"location":"Naming/#example_2","text":"ISO \ud45c\uc900\uc740 \uc18c\ubb38\uc790, \uc22b\uc790, _ \ub85c \uad6c\ubd84\ub41c \ub2e8\uc5b4\ub9cc \uc0ac\uc6a9\ud55c\ub2e4: int vector my_map \ub450\uac1c \uc9dc\ub9ac __ \ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c.","title":"Example"},{"location":"Naming/#example_3","text":"Stroustrup : ISO Standard, but with upper case used for your own types and concepts: int vector My_map","title":"Example"},{"location":"Naming/#example_4","text":"\ub099\ud0c0\ud45c\uae30\ubc95(CamelCase): \uc5ec\ub7ec \ub2e8\uc5b4\ub85c \uad6c\uc131\ub41c \uc2dd\ubcc4\uc790\uc5d0\uc11c \ub2e8\uc5b4\uc758 \uccab\uae00\uc790\ub97c \ub300\ubb38\uc790\ub85c \ud55c\ub2e4: int vector MyMap myMap \ub9e8 \uccab\uae00\uc790\ub97c \uc18c\ubb38\uc790\ub85c \ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\ub2e4.","title":"Example"},{"location":"Naming/#note_8","text":"\uc57d\uc5b4(acronym)\ub098 \uc2dd\ubcc4\uc790 \uae38\uc774\ub3c4 \uc77c\uad00\uc131\uc744 \uc720\uc9c0\ud558\ub3c4\ub85d \ud558\ub77c: int mtbf { 12 }; int mean_time_between_failures { 12 }; // make up your mind","title":"Note"},{"location":"Naming/#enforcement_4","text":"\uc2a4\ud0c0\uc77c\uc774 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \ub54c\ub97c \ubeec\uace0\ub294 \uc2dc\ud589\uc774 \uac00\ub2a5\ud560 \uac83\uc774\ub2e4.","title":"Enforcement"},{"location":"Naming/#nl9","text":"","title":"NL.9: \ub9e4\ud06c\ub85c \uba85\uce6d\uc5d0\ub9cc \uc804\uccb4 \ub300\ubb38\uc790\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Naming/#reason_4","text":"\ubc94\uc704\uc640 \ud0c0\uc785 \uaddc\uce59\uc744 \uc9c0\ud0a4\ub294 \uc774\ub984\uc5d0 \ub300\ud574\uc11c\ub294 \ub9e4\ud06c\ub85c\uc640 \ud63c\ub3c8\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\uae30 \uc704\ud574.","title":"Reason"},{"location":"Naming/#example_5","text":"void f () { const int SIZE { 1000 }; // Bad, use 'size' instead int v [ SIZE ]; }","title":"Example"},{"location":"Naming/#note_9","text":"\uc774 \uaddc\uce59\uc740 \ub9e4\ud06c\ub85c\uac00 \uc544\ub2cc \uc0c1\uc218\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4: enum bad { BAD , WORSE , HORRIBLE }; // BAD","title":"Note"},{"location":"Naming/#enforcement_5","text":"\uc18c\ubb38\uc790\ub85c \ub41c \ub9e4\ud06c\ub85c\ub97c \uc9c0\uc801\ud558\ub77c \ub9e4\ud06c\ub85c\uac00 \uc544\ub2cc\ub370 \ub300\ubb38\uc790\ub85c \ub41c \uacbd\uc6b0\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Naming/#nl10-underscore_style","text":"","title":"NL.10: underscore_style\ud615\ud0dc\uc758 \uc774\ub984\uc744 \uc120\ud638\ud558\ub77c"},{"location":"Naming/#reason_5","text":"\uc774\ub984\uc758 \uac01 \ubd80\ubd84\uc744 \uad6c\ubd84\ud558\uae30 \uc704\ud574 _ \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc6d0\ub798 C/C++ \uc2a4\ud0c0\uc77c\uc774\uace0 C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\ub3c4 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4.","title":"Reason"},{"location":"Naming/#note_10","text":"\uc774 \uaddc\uce59\uc740 \uc120\ud0dd\uc774 \ud544\uc694\ud560 \ub54c\uc758 \uae30\ubcf8 \uaddc\uce59\uc774\ub2e4. \uc774\ubbf8 \uc815\ub9bd\ub41c \uc2a4\ud0c0\uc77c\uacfc\uc758 \uc77c\uad00\uc131 \uc744 \uc9c0\ucf1c\uc57c \ud558\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc744 \uc218 \uc788\ub2e4. \uac1c\uc778\uc758 \ucde8\ud5a5\ubcf4\ub2e4\ub294 \uc77c\uad00\uc131\uc774 \uc911\uc694\ud558\ub2e4. This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance.","title":"Note"},{"location":"Naming/#example_6","text":"Stroustrup : \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785, \uac1c\ub150\uc5d0 \ub300\ud574 \ub300\ubb38\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 ISO \ud45c\uc900: int vector My_map","title":"Example"},{"location":"Naming/#enforcement_6","text":"\ubd88\uac00\ub2a5\ud558\ub2e4.","title":"Enforcement"},{"location":"Naming/#nl15","text":"","title":"NL.15: \uc2a4\ud398\uc774\uc2a4\ub97c \uc544\uaef4\uc11c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Naming/#reason_6","text":"\ub108\ubb34 \ub9ce\uc740 \uc2a4\ud398\uc774\uc2a4\ub294 \ucf54\ub4dc\ub97c \uae38\uace0 \uc0b0\ub9cc\ud558\uac8c \ub9cc\ub4e0\ub2e4","title":"Reason"},{"location":"Naming/#example-bad_3","text":"#include < map > int main ( int argc , char * argv [ ]) { // ... }","title":"Example, bad"},{"location":"Naming/#example_7","text":"#include <map> int main ( int argc , char * argv []) { // ... }","title":"Example"},{"location":"Naming/#note_11","text":"\uba87\uba87 IDE\ub294 \uadf8\ub4e4\ub9cc\uc758 \ud655\uc2e0\uc5d0 \ub530\ub77c \ucd94\uac00\uc801\uc778 \uc2a4\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud55c\ub2e4. This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance.","title":"Note"},{"location":"Naming/#note_12","text":"\uc798 \uc815\ub9ac\ub41c \uc2a4\ud398\uc774\uc2a4\ub294 \uac00\ub3c5\uc131 \ud5a5\uc0c1\uc5d0 \ub9ce\uc740 \ub3c4\uc6c0\uc774 \ub41c\ub2e4. \uacfc\ub3c4\ud558\uc9c0\ub9cc \uc54a\uc73c\uba74 \ub41c\ub2e4.","title":"Note"},{"location":"Naming/#nl11-make-literals-readable","text":"","title":"NL.11: Make literals readable"},{"location":"Naming/#reason_7","text":"Readability.","title":"Reason"},{"location":"Naming/#example_8","text":"Use digit separators to avoid long strings of digits auto c = 299 ' 792 ' 458 ; // m/s2 auto q2 = 0 b0000 ' 1111 ' 0000 ' 0000 ; auto ss_number = 123 ' 456 ' 7890 ;","title":"Example"},{"location":"Naming/#example_9","text":"Use literal suffixes where clarification is needed auto hello = \"Hello!\" s ; // a std::string auto world = \"world\" ; // a C-style string auto interval = 100 ms ; // using <chrono>","title":"Example"},{"location":"Naming/#note_13","text":"Literals should not be sprinkled all over the code as \"magic constants\" , but it is still a good idea to make them readable where they are defined. It is easy to make a typo in a long string of integers.","title":"Note"},{"location":"Naming/#enforcement_7","text":"Flag long digit sequences. The trouble is to define \"long\"; maybe 7.","title":"Enforcement"},{"location":"Naming/#nl16","text":"","title":"NL.16: \uc77c\ubc18\uc801\uc778 \ud074\ub798\uc2a4 \uba64\ubc84 \uc120\uc5b8 \uc21c\uc11c\ub97c \uc9c0\ucf1c\ub77c"},{"location":"Naming/#reason_8","text":"\uba64\ubc84 \uc120\uc5b8 \uc21c\uc11c\ub294 \uac00\ub3c5\uc131\uc744 \ub192\uc5ec\uc900\ub2e4. \ud074\ub798\uc2a4 \uc120\uc5b8\uc2dc \ub2e4\uc74c \uc21c\uc11c\ub97c \uc0ac\uc6a9\ud558\ub77c \ud0c0\uc785: class, enum, alias ( using \uad6c\ubb38) \uc0dd\uc131\uc790, \ubcf5\uc0ac \uc0dd\uc131\uc790, \ud574\uc81c\uc790. \ud568\uc218 \ub370\uc774\ud130 public , protected , private \uc21c\uc73c\ub85c \uc120\uc5b8\ud558\ub77c. This is a recommendation for when you have no constraints or better ideas . \uc774 \uaddc\uce59\uc740 \uc218\ub9ce\uc740 \uc694\uccad\uc5d0 \uc758\ud574 \ucd94\uac00\ub418\uc5c8\ub2e4.","title":"Reason"},{"location":"Naming/#example_10","text":"class X { public : // interface protected : // unchecked function for use by derived class implementations private : // implementation details };","title":"Example"},{"location":"Naming/#example_11","text":"Sometimes, the default order of members conflicts with a desire to separate the public interface from implementation details. In such cases, private types and functions can be placed with private data. class X { public : // interface protected : // unchecked function for use by derived class implementations private : // implementation details (types, functions, and data) };","title":"Example"},{"location":"Naming/#example-bad_4","text":"Avoid multiple blocks of declarations of one access (e.g., public ) dispersed among blocks of declarations with different access (e.g. private ). class X { // bad public : void f (); public : int g (); // ... }; The use of macros to declare groups of members often leads to violation of any ordering rules. However, macros obscures what is being expressed anyway.","title":"Example, bad"},{"location":"Naming/#enforcement_8","text":"\uc81c\uc548\ub41c \uc21c\uc11c\uc640 \ub2e4\ub974\uba74 \uc9c0\uc801\ud558\ub77c. \uc774 \uaddc\uce59\uc744 \ub530\ub974\uc9c0 \uc54a\ub294 \uc608\uc804 \ucf54\ub4dc\uac00 \ub9ce\uc774 \uc788\uc744 \uac83\uc774\ub2e4.","title":"Enforcement"},{"location":"Naming/#nl17-kr","text":"","title":"NL.17: K&amp;R \ubc29\uc2dd\uc758 \ub808\uc774\uc544\uc6c3\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Naming/#reason_9","text":"\uc774 \ubc29\uc2dd\uc774 C/C++\uc758 \uace0\uc720\ud55c \ub808\uc774\uc544\uc6c3\uc774\ub2e4. \uc218\uc9c1\uc801\uc778 \ubc30\uce58\uac00 \uc720\uc9c0\ub418\uace0 (\ud568\uc218\ub098 \ud074\ub798\uc2a4 \uac19\uc740) \uc5b8\uc5b4 \uc694\uc18c\ub97c \uad6c\ubd84\ud558\uae30\uac00 \uc27d\ub2e4.","title":"Reason"},{"location":"Naming/#note_14","text":"C++\uc5d0\uc11c\ub294 \"Stroustrup\" \uc2a4\ud0c0\uc77c\uc774\ub77c\uace0 \ubd80\ub974\uae30\ub3c4 \ud55c\ub2e4. This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance.","title":"Note"},{"location":"Naming/#example_12","text":"struct Cable { int x ; // ... }; double foo ( int x ) { if ( 0 < x ) { // ... } switch ( x ) { case 0 : // ... break ; case amazing : // ... break ; default : // ... break ; } if ( 0 < x ) ++ x ; if ( x < 0 ) something (); else something_else (); return some_value ; } if \uc640 ( \uc0ac\uc774\uc5d0 \uc2a4\ud398\uc774\uc2a4\ub97c \ud55c\uce78 \ub123\ub294\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c.","title":"Example"},{"location":"Naming/#note_15","text":"Use separate lines for each statement, the branches of an if , and the body of a for .","title":"Note"},{"location":"Naming/#note_16","text":"The { for a class and a struct is not on a separate line, but the { for a function is.","title":"Note"},{"location":"Naming/#note_17","text":"\ud45c\uc900\ub77c\uc774\ube0c\ub7ec\ub9ac \ud0c0\uc785\uacfc \uad6c\ubd84\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc740 \ub300\ubb38\uc790\ub85c \uc774\ub984\uc744 \uc9d3\ub294\ub2e4.","title":"Note"},{"location":"Naming/#note_18","text":"\ud568\uc218 \uc774\ub984\uc5d0\ub294 \ub300\ubb38\uc790\ub97c \uc4f0\uc9c0 \ub9c8\ub77c.","title":"Note"},{"location":"Naming/#enforcement_9","text":"IDE\ub85c \ub2e4\uc2dc \ud3ec\ub9f7\uc744 \ub9de\ucdb0\ub77c.","title":"Enforcement"},{"location":"Naming/#nl18-c","text":"","title":"NL.18: C++ \uc2a4\ud0c0\uc77c\uc758 \uc120\uc5b8 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Naming/#reason_10","text":"C \uc2a4\ud0c0\uc77c\uc758 \uc120\uc5b8 \ubc29\uc2dd\uc740 \ud45c\ud604\uc2dd\uacfc \ubb38\ubc95\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294\ub370 \uac15\uc870\ub97c \ub454\ub2e4\uba74, C++ \uc2a4\ud0c0\uc77c\uc740 \ud0c0\uc785\uc744 \uac15\uc870\ud55c\ub2e4. \uc120\uc5b8\uc5d0\uc11c \uc0ac\uc6a9\uc2dc \uc778\uc790\ub294 \ucc38\uc870\ub97c \ubd99\uc774\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4.","title":"Reason"},{"location":"Naming/#example_13","text":"T & operator []( size_t ); // OK T & operator []( size_t ); // just strange T & operator []( size_t ); // undecided","title":"Example"},{"location":"Naming/#note_19","text":"This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance.","title":"Note"},{"location":"Naming/#enforcement_10","text":"\uc5ed\uc0ac\uc801\uc73c\ub85c \ubcfc\ub54c \ubd88\uac00\ub2a5.","title":"Enforcement"},{"location":"Naming/#nl19-avoid-names-that-are-easily-misread","text":"","title":"NL.19: Avoid names that are easily misread"},{"location":"Naming/#reason_11","text":"Readability. Not everyone has screens and printers that make it easy to distinguish all characters. We easily confuse similarly spelled and slightly misspelled words.","title":"Reason"},{"location":"Naming/#example_14","text":"int oO01lL = 6 ; // bad int splunk = 7 ; int splonk = 8 ; // bad: splunk and splonk are easily confused","title":"Example"},{"location":"Naming/#enforcement_11","text":"???","title":"Enforcement"},{"location":"Naming/#nl20-dont-place-two-statements-on-the-same-line","text":"","title":"NL.20: Don't place two statements on the same line"},{"location":"Naming/#reason_12","text":"Readability. It is really easy to overlook a statement when there is more on a line.","title":"Reason"},{"location":"Naming/#example_15","text":"int x = 7 ; char * p = 29 ; // don't int x = 7 ; f ( x ); ++ x ; // don't","title":"Example"},{"location":"Naming/#enforcement_12","text":"Easy.","title":"Enforcement"},{"location":"Naming/#nl21-declare-one-name-only-per-declaration","text":"","title":"NL.21: Declare one name (only) per declaration"},{"location":"Naming/#reason_13","text":"Readability. Minimizing confusion with the declarator syntax.","title":"Reason"},{"location":"Naming/#note_20","text":"For details, see ES.10 .","title":"Note"},{"location":"Naming/#nl25-void","text":"","title":"NL.25: \uc778\uc790 \ud0c0\uc785\uc73c\ub85c void\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Naming/#reason_14","text":"C \ud638\ud658\uc774 \ubb38\uc81c\ub420 \ub54c\ub9cc \ud544\uc694\ud558\ub2e4.","title":"Reason"},{"location":"Naming/#example_16","text":"void f ( void ); // bad void g (); // better","title":"Example"},{"location":"Naming/#note_21","text":"\ub370\ub2c8\uc2a4 \ub9ac\uce58\ub3c4 void f(void) \ub294 \uc2eb\uc5b4\ud55c\ub2e4\uace0 \ub9d0\ud588\ub2e4. \ud568\uc218 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ub4dc\ubb3c\uac8c \uae08\uc9c0\ub420 \uacbd\uc6b0 C\uc5d0\uc11c \uadf8\ub7f0 abomination\uc5d0 \ub300\ud574\uc11c \uc778\uc790\ub97c \ucd94\uac00\ud560 \uc218 \uc788\ub2e4: int f (); f ( 1 , 2 , \"weird but valid C89\" ); // hope that f() is defined int f(a, b, c) char* c; { /* ... */ } \uc911\uc694\ud55c \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uac83\uc778\ub370 21\uc138\uae30\uc758 C\ub098 C++\uc5d0\ub294 \uc804\ud600 \ubb38\uc81c\ub418\uc9c0 \uc54a\ub294\ub2e4.","title":"Note"},{"location":"Naming/#nl26-use-conventional-const-notation","text":"","title":"NL.26: Use conventional const notation"},{"location":"Naming/#reason_15","text":"Conventional notation is more familiar to more programmers. Consistency in large code bases.","title":"Reason"},{"location":"Naming/#example_17","text":"const int x = 7 ; // OK int const y = 9 ; // bad const int * const p = nullptr ; // OK, constant pointer to constant int int const * const p = nullptr ; // bad, constant pointer to constant int","title":"Example"},{"location":"Naming/#note_22","text":"We are well aware that you could claim the \"bad\" examples more logical than the ones marked \"OK\", but they also confuse more people, especially novices relying on teaching material using the far more common, conventional OK style. As ever, remember that the aim of these naming and layout rules is consistency and that aesthetics vary immensely. This is a recommendation for when you have no constraints or better ideas . Thus rule was added after many requests for guidance.","title":"Note"},{"location":"Naming/#enforcement_13","text":"Flag const used as a suffix for a type.","title":"Enforcement"},{"location":"Not/","text":"NR: \uaddc\uce59\uc774 \uc544\ub2cc \uac83\ub4e4\uacfc \uadfc\uac70\uc5c6\ub294 \uc774\uc57c\uae30\ub4e4 \uc774 \uc808\uc740 \uc5b4\ub514\uc120\uac00 \ub110\ub9ac \uc54c\ub824\uc84c\uc9c0\ub9cc, \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c \ucd94\ucc9c\ud558\uc9c0 \uc54a\ub294 \uaddc\uce59\uacfc \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc744 \ud3ec\ud568\ud55c\ub2e4. \uc774\ub7f0 \uaddc\uce59\ub4e4\uc774 \ud0c0\ub2f9\ud558\ub358 \uc2dc\uac04\uacfc \uc7a5\uc18c\uac00 \uc788\uc5c8\ub2e4\ub294 \uac83\uc744 \uc6b0\ub9ac\ub294 \ucda9\ubd84\ud788 \uc798 \uc54c\uace0, \uc0ac\uc6a9\ud574\uc654\ub2e4. \ud558\uc9c0\ub9cc, \uc6b0\ub9ac\uac00 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ud1b5\ud574 \uad8c\uc7a5\ud558\uace0 \uc9c0\uc9c0\ud558\ub294 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uc2a4\ud0c0\uc77c\uc5d0 \ubbf8\ub8e8\uc5b4 \ubd24\uc744\ub54c, \uc774 \"\ube44-\uaddc\uce59\"\ub4e4\uc740 \ud574\ub85c\uc6b8(harm) \uc218 \uc788\ub2e4. \uc624\ub298\ub0a0\uc5d0\ub3c4, \uc774 \uaddc\uce59\ub4e4\uc774 \ub4e4\uc5b4\ub9de\uc744 \uc218 \uc788\ub2e4. \uc801\uc808\ud55c \uc9c0\uc6d0 \ub3c4\uad6c\uac00 \uc5c6\uc5b4 \uc815\ud574\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \uc751\ub2f5\ud574\uc57c \ud558\ub294 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc608\uc678\ub97c \uc4f0\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0\ub97c \uc608\ub85c \ub4e4 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \"\uc54c\ub824\uc9c4 \uc9c0\ud61c\"\ub97c \ub9f9\uc2e0\ud574\uc120 \uc548\ub41c\ub2e4 (\"\ud6a8\uc728\uc131\"\uc5d0 \ub300\ud55c \uadfc\uac70 \uc5c6\ub294 \ubb38\uad6c\ub4e4\uc774\ub77c\ub358\uac00); \uadf8\ub7f0 \"\uc9c0\ud61c\"\ub294 \uc2ed\ub144\uc740 \ub354 \ub41c \uc815\ubcf4\uc5d0 \uadfc\uac70\ud558\uac70\ub098 (C\ub098 Java \ucc98\ub7fc) C++\uc640\ub294 \ub9e4\uc6b0 \ub2e4\ub978 \uc18d\uc131\uc744 \uac00\uc9c4 \uc5b8\uc5b4\uacbd\ud5d8\uc5d0 \uadfc\uac70\ud55c \uac83\uc77c \uc218 \uc788\ub2e4. \uc774\ub7f0 \ube44-\uaddc\uce59\ub4e4\uc744 \ub300\uc2e0\ud558\uae30 \uc704\ud55c \uae0d\uc815\uc801\uc778 \ub17c\uc7c1(positive arguments)\ub4e4\uc740 \"\ub300\uc548\ub4e4\"\uc5d0\uc11c \uae30\uc220\ud55c\ub2e4. \ube44-\uaddc\uce59 \uc694\uc57d: NR.1: \uae08\uc9c0: \ubaa8\ub4e0 \uc120\uc5b8\uc774 \ud568\uc218\uc758 \uc0c1\ub2e8\uc5d0 \uc624\uac8c \ud558\ub77c NR.2: \uae08\uc9c0: \ud568\uc218\uc5d0\uc11c \uc624\uc9c1 \ud558\ub098\uc758 return \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c NR.3: \uae08\uc9c0: \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c NR.4: \uae08\uc9c0: \ud074\ub798\uc2a4 \uc120\uc5b8\uc744 \uac01\uac01\uc758 \ud30c\uc77c\uc5d0 \ubc30\uce58\ud558\ub77c NR.5: \uae08\uc9c0: \uc0dd\uc131\uc790\uc5d0\uc11c \ub9ce\uc740 \uc77c\uc744 \ud558\uc9c0\ub9c8\ub77c; \ub300\uc2e0 2 \ub2e8\uacc4 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c NR.6: \uae08\uc9c0: \ubaa8\ub4e0 \uc815\ub9ac \ub3d9\uc791\uc744 \ud568\uc218 \ub05d\uc5d0 \ubc30\uce58\ud558\uace0 goto exit \uc744 \uc0ac\uc6a9\ud558\ub77c NR.7: \uae08\uc9c0: \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub97c protected \ub85c \ud558\ub77c ??? NR.1: \uae08\uc9c0: \ubaa8\ub4e0 \uc120\uc5b8\uc774 \ud568\uc218\uc758 \uc0c1\ub2e8\uc5d0 \uc624\uac8c \ud558\ub77c Reason (not to follow this rule) \uc774 \uaddc\uce59\uc740 \uad6c\ubb38\uc774 \uc2e4\ud589\ub41c \uc774\ud6c4\uc758 \ubcc0\uc218\uc640 \uc0c1\uc218\uc758 \ucd08\uae30\ud654\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub358 \uc624\ub798\ub41c \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub4e4\uc758 \uc794\uc7ac\ub2e4. \uc774 \uaddc\uce59\uc740 \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\ub97c \uae38\uac8c \ub9cc\ub4e4\uace0 \ucd08\uae30\ud654\uac00 \uc0dd\ub7b5\ub418\uac70\ub098 \uc798\ubabb\ub41c \uac12\uc73c\ub85c \ucd08\uae30\ud654\ub418\ub294 \uac83\uc73c\ub85c \uc778\ud55c \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4. Example, bad int use ( int x ) { int i ; char c ; double d ; // ... some stuff ... if ( x < i ) { // ... i = f ( x , d ); } if ( i < x ) { // ... i = g ( x , c ); } return i ; } \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\uc640 \uc2e4\uc81c \uc0ac\uc6a9 \ucf54\ub4dc\uc758 \uac04\uaca9\uc774 \uba40\uc5b4\uc9c8 \uc218\ub85d, \ubc84\uadf8\uac00 \ubc1c\uc0dd\ud560 \uae30\ud68c\uac00 \ub9ce\uc544\uc9c4\ub2e4. \ub2e4\ud589\ud788\ub3c4, \ucef4\ud30c\uc77c\ub7ec\uac00 \ub9ce\uc740 \"\uac12\uc744 \uacb0\uc815\ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub294\" \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4. \ubd88\ud589\ud558\uac8c\ub3c4, \ucef4\ud30c\uc77c\ub7ec\uac00 \ubaa8\ub4e0 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218\ub294 \uc5c6\uace0 \uc774 \uc9e7\uc740 \uc608\uc81c\uc640 \uac19\uc774 \uc27d\uac8c \ucc3e\uc544\ub0bc\ub9cc\ud55c \uacbd\uc6b0\ub9cc \uc788\ub294 \uac83\ub3c4 \uc544\ub2c8\ub2e4. Alternative \uc5b8\uc81c\ub098 \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud558\ub77c ES.21: \ubcc0\uc218(\ud639\uc740 \uc0c1\uc218) \uc0ac\uc6a9\uc774 \ud544\uc694\ud558\uae30 \uc804\uae4c\uc9c0\ub294 \ub178\ucd9c\uc2dc\ud0a4\uc9c0 \ub9d0\uc544\ub77c NR.2: \uae08\uc9c0: \ud568\uc218\uc5d0\uc11c \uc624\uc9c1 \ud558\ub098\uc758 return \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c Reason (not to follow this rule) \ud568\uc218\uc5d0 \ubc18\ud658 \uc9c0\uc810\uc774 \ud558\ub098\ub9cc \uc788\uc73c\uba74 \ubd88\ud544\uc694\ud558\uac8c \ub4a4\uc5bd\ud78c \ucf54\ub4dc\ub97c \ub9cc\ub4e4 \uc218 \uc788\uace0 \ucd94\uac00\uc801\uc778 \uc0c1\ud0dc \ubcc0\uc218\ub4e4\uc744 \ub9cc\ub4e4\uac8c \ub41c\ub2e4. \ud2b9\ud788, \ub2e8\uc77c \ubc18\ud658 \uaddc\uce59\uc740 \ud568\uc218 \uc0c1\ub2e8\uc5d0\uc11c \uc624\ub958 \uac80\uc0ac\uc5d0 \uc9d1\uc911\ud560 \uc218 \uc5c6\uac8c \ub9cc\ub4e0\ub2e4. Example template < class T > // requires Number<T> string sign ( T x ) { if ( x < 0 ) return \"negative\" ; else if ( x > 0 ) return \"positive\" ; return \"zero\" ; } \ubc18\ud658 \uc9c0\uc810\uc744 \ud558\ub098\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574\uc120 \ub2e4\uc74c\uacfc \uac19\uc740 \uc77c\uc744 \ud574\uc57c\ud55c\ub2e4 template < class T > // requires Number<T> string sign ( T x ) // bad { string res ; if ( x < 0 ) res = \"negative\" ; else if ( x > 0 ) res = \"positive\" ; else res = \"zero\" ; return res ; } \uc774\ub294 \ub354 \uae34 \ucf54\ub4dc\uc77c \ubfd0\ub9cc \uc544\ub2c8\ub77c \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4. \ud568\uc218\uac00 \ucee4\uc9c0\uace0 \ubcf5\uc7a1\ud574\uc9c8\uc218\ub85d, \ub354 \uc791\uc131\ud558\uac70\ub098 \uc0ac\uc6a9\ud558\uae30\uc5d0 \uace0\ud1b5\uc2a4\ub7ec\uc6b4 \ud568\uc218\uac00 \ub41c\ub2e4. \ubb3c\ub860 \ub9ce\uc740 \ub2e8\uc21c\ud55c \ud568\uc218\ub4e4\uc740 \uadf8 \ub0b4\uc6a9\uc5d0 \ub2f4\uaca8\uc788\ub294 \ub2e8\uc21c\ud55c \ub17c\ub9ac \ub355\ubd84\uc5d0 \uc790\uc5f0\uc2a4\ub7fd\uac8c \ud558\ub098\uc758 return \uc744 \uac00\uc9c0\uac8c \ub420 \uac83\uc774\ub2e4. Example int index ( const char * p ) { if ( ! p ) return - 1 ; // error indicator: alternatively \"throw nullptr_error{}\" // ... do a lookup to find the index for p return i ; } \ub2e8\uc77c \ubc18\ud658 \uaddc\uce59\uc744 \uc801\uc6a9\ud558\uba74 \uc774\ub807\uac8c \ubcc0\ud55c\ub2e4 int index2 ( const char * p ) { int i ; if ( ! p ) i = - 1 ; // error indicator else { // ... do a lookup to find the index for p } return i ; } (\uc758\ub3c4\uc801\uc73c\ub85c) \uaddc\uce59\uc744 \uc704\ubc18\ud588\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\ub77c. \uc774\ub7f0 \ucf54\ub4dc \uc2a4\ud0c0\uc77c\uc740 \ubcf4\ud1b5 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\uac00 \uc788\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uac8c \ub41c\ub2e4. \ub610\ud55c, \uc774 \uc2a4\ud0c0\uc77c\uc740 goto exit \uacfc \uac19\uc740 \ubc29\uc2dd\uc744 \uc801\uc6a9\ud558\uace0 \uc2f6\uc740 \uc720\ud639\uc744 \ubd88\ub7ec\uc77c\uc73c\ud0a8\ub2e4. Alternative \ud568\uc218\ub294 \uc9e7\uace0 \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\ud558\ub77c return \uad6c\ubb38\uc744 \uc5ec\ub7ec\ubc88 \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4 (\uc608\uc678\ub97c \ub358\uc838\ub3c4 \uad1c\ucc2e\ub2e4) NR.3: \uae08\uc9c0: \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason (not to follow this rule) \uc774 \ube44-\uaddc\uce59\uc5d0\ub294 3\uac00\uc9c0 \uc774\uc720\uac00 \ub530\ub77c\uc628\ub2e4. \uc608\uc678\ub294 \ube44\ud6a8\uc728\uc801\uc774\ub2e4(inefficient) \uc608\uc678\ub294 \ub204\uc218\uc640 \uc624\ub958\ub85c \uc774\uc5b4\uc9c4\ub2e4(leaks and errors) \uc608\uc678\uc758 \uc131\ub2a5\uc740 \uc608\uce21\ud560 \uc218 \uc5c6\ub2e4(not predictable) \uc774 \uc7c1\uc810\uc5d0 \ub300\ud574\uc11c \ubaa8\ub450\uac00 \ub9cc\uc871\ud558\ub3c4\ub85d \ud0c0\ud611\ud560 \ubc29\ubc95\uc740 \uc5c6\ub2e4. \ubb34\uc5c7\ubcf4\ub2e4, \uc608\uc678\uc5d0 \ub300\ud55c \ud1a0\ub860\uc740 40\ub144 \ub118\uac8c \uc774\uc5b4\uc9c0\uace0 \uc788\ub2e4. \uc77c\ubd80 \uc5b8\uc5b4\ub4e4\uc740 \uc608\uc678 \uc5c6\uc774\ub294 \uc4f8\uc218\uac00 \uc5c6\uace0, \ub2e4\ub978 \uc77c\ubd80\ub294 \uc608\uc678\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uae30\ub3c4 \ud55c\ub2e4. \uc774 \ub54c\ubb38\uc5d0 \uc608\uc678\ub97c \uc4f0\uac70\ub098 \uc4f0\uc9c0 \uc54a\ub294 \uac15\ud55c \uc804\ud1b5\uacfc \uc5f4\ub764 \ub17c\uc7c1\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uadf8\ub807\uc9c0\ub9cc \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc791\uc131\ud558\ub294 \uc6b0\ub9ac\uac00 \ubc94\uc6a9 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c\ub294 \uc608\uc678\uac00 \ucd5c\uc120\uc758 \ubc29\uc548\uc774\ub77c\uace0 \uc0dd\uac01\ud558\ub294 \uc774\uc720\ub294 \ub2e8\uc21c\ud55c \ucc2c\ubc18 \uc591\ub860\uc740 \uc885\uc885 \uacb0\ub860\uc744 \ub0b4\ub9b4 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. \uc608\uc678\uac00 \uc2e4\uc81c\ub85c \ubd80\uc801\ud569\ud55c \ud2b9\ubcc4\ud55c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\ub4e4\ub3c4 \uc874\uc7ac\ud55c\ub2e4. (\uc608\uc678 \ucc98\ub9ac\uc758 \ube44\uc6a9\uc744 \uc815\ud655\ud788 \ud3c9\uac00\ud558\uae30 \uc704\ud55c \uc9c0\uc6d0\uc774 \uc5c6\uc73c\uba74\uc11c \uc2dc\uac04 \ub0b4 \uc751\ub2f5\uc131\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294(hard-real-time) \uc2dc\uc2a4\ud15c \ucc98\ub7fc) \uc608\uc678\ub97c \ubc18\ub300\ud558\ub294 \uc8fc\uc7a5\uc73c\ub85c \ub3cc\uc544\uc640\uc11c \uc0dd\uac01\ud574\ubcf4\uba74 \uc608\uc678\ub294 \ube44\ud6a8\uc728\uc801\uc774\ub2e4: \ubb34\uc5c7\uc5d0 \ube44\ud574\uc11c \ube44\ud6a8\uc728\uc801\uc778\uac00? \ube44\uad50\ub97c \ud55c\ub2e4\uba74 \uac19\uc740 \uc624\ub958 \uc9d1\ud569\uc744 \ucc98\ub9ac\ud558\uace0 \uac01\uac01\uc744 \ub3d9\ub4f1\ud558\uac8c \ucc98\ub9ac\ud560 \ub54c\ub97c \ube44\uad50\ud574\uc57c \ud55c\ub2e4. \ud2b9\ud788, \uc989\uc2dc \ube44\uc815\uc0c1 \uc885\ub8cc\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uacfc \uc624\ub958\ub97c \uae30\ub85d\ud558\uae30 \uc804\uc5d0 \uc8fc\uc758\uae4a\uac8c \uc790\uc6d0\ub4e4\uc744 \uc815\ub9ac\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \ube44\uad50\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \uc2e4\uc81c\ub85c, \uc77c\ubd80 \uc2dc\uc2a4\ud15c\ub4e4\uc740 \ud615\ud3b8\uc5c6\ub294 \uc608\uc678 \ucc98\ub9ac \uad6c\ud604\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4; \ub54c\ub85c\ub294 \uadf8\ub7f0 \uad6c\ud604\uc774 \ub2e4\ub978 \uc624\ub958 \ucc98\ub9ac \uc811\uadfc\ubc95\ub4e4\uc744 \ucde8\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac8c \uc624\ub958\uc758 \uadfc\ubcf8\uc801\uc778 \ubb38\uc81c\ub294 \uc544\ub2c8\ub2e4. \ud6a8\uc728\uc131\uc744 \ub530\uc9c4\ub2e4\uba74 - \uc5b4\ub5a4 \uacbd\uc6b0\uc5d0\ub4e0 - \ubb38\uc81c\uc5d0 \ub300\ud55c \ud1b5\ucc30\uc744 \uc904 \uc218 \uc788\ub294 \uc88b\uc740 \ub370\uc774\ud130\ub97c \uac00\uc84c\ub294\uc9c0 \uc8fc\uc758 \uae4a\uac8c \ub530\uc838\ubcf4\ub77c. \uc608\uc678\ub294 \ub204\uc218\uc640 \uc624\ub958\ub85c \uc774\uc5b4\uc9c4\ub2e4: \uadf8\ub807\uc9c0 \uc54a\ub2e4. \ub9cc\uc57d \ub2f9\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \uc790\uc6d0 \uad00\ub9ac\ub97c \uc704\ud55c \uc804\ub7b5 \uc5c6\uc774 \uc644\uc804\ud788 \uaf2c\uc5ec\uc788\ub294 \ud3ec\uc778\ud130\ub4e4\uc774\ub77c\uba74, \ubb34\uc5c7\uc744 \ud558\ub354\ub77c\ub3c4 \ubb38\uc81c\uac00 \ub420 \uac83\uc774\ub2e4. \uadf8\ub7f0 \ucf54\ub4dc\uac00 \ubc31\ub9cc\uc904\uc774 \uc788\ub2e4\uba74 \uc608\uc678\ub97c \uc4f0\ub294 \uac83\uc774 \ubd88\uac00\ub2a5\ud560 \uac83\uc774\ub2e4, \ud558\uc9c0\ub9cc \uadf8\uac83\uc740 \ubb34\ubd84\ubcc4\ud558\uace0 \uacfc\uc6a9\ub41c \ud3ec\uc778\ud130 \uc0ac\uc6a9\uc73c\ub85c \uc778\ud55c \ubb38\uc81c\ub2e4. \uc6b0\ub9ac\uc758 \uc758\uacac\uc740, \uc608\uc678 \uae30\ubc18 \uc624\ub958 \ucc98\ub9ac\ub97c \ub2e8\uc21c\ud558\uace0 \uc548\uc804\ud558\uac8c \ud558\uae30 \uc704\ud574\uc11c\ub294 RAII\uac00 \ud544\uc694\ud558\ub2e4 -- \uc774\ub294 \uc608\uc678\ub97c \uc4f0\uc9c0 \uc54a\uc744\ub54c\ubcf4\ub2e4 \ub2e8\uc21c\ud558\uace0 \uc548\uc804\ud558\ub2e4. \uc608\uc678\uc758 \uc131\ub2a5\uc740 \uc608\uce21\ud560 \uc218 \uc5c6\ub2e4: \uc8fc\uc5b4\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \uc791\uc5c5\uc744 \ub9c8\uce5c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e0\ub2e4\uba74, \uadf8\ub7f0 \ubcf4\uc7a5\uc744 \ub4b7\ubc1b\uce68\ud560 \ub3c4\uad6c\ub4e4\uc774 \ud544\uc694\ud558\ub2e4. \uc6b0\ub9ac\uac00 \uc544\ub294 \ud55c \uadf8\ub7f0 \ub3c4\uad6c\ub294 (\ucd5c\uc18c\ud55c \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc5d0\uac8c\ub294) \uc5c6\ub2e4 \uc8fc\ub85c, \ubcf4\ud1b5 \ub300\ubd80\ubd84, \uc608\uc678\ub85c \uc778\ud55c \ubb38\uc81c\ub294 \uc624\ub798\ub41c \uc9c0\uc800\ubd84\ud55c \ucf54\ub4dc\uc640 \ud568\uaed8 \ub3d9\uc791\ud574\uc57c\ud558\ub294 \uc694\uad6c\uc5d0 \uae30\uc778\ud55c\ub2e4. \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc790\ub294 \uc8fc\uc7a5\ub4e4 \uc911 \ud575\uc2ec\uc740 \uc608\uc678\ub294 \uc798\ubabb\ub41c \ubc18\ud658\uacfc \uc815\uc0c1\uc801\uc778 \ubc18\ud658\uc744 \uc644\uc804\ud788 \ub2e4\ub974\uac8c \ucde8\uae09\ud55c\ub2e4 \uc608\uc678\ub294 \uc78a\uc5b4\ubc84\ub9ac\uac70\ub098 \ubb34\uc2dc\ud560 \uc218 \uc5c6\ub2e4 \uc608\uc678\ub294 \uccb4\uacc4\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 \uc774 \uc810\ub4e4\uc744 \uae30\uc5b5\ud558\ub77c \uc608\uc678\ub294 \uc624\ub958\ub97c \uc54c\ub9ac\uae30 \uc704\ud55c \uac83\uc774\ub2e4 (C++\uc5d0\uc11c\ub294 \uadf8\ub807\ub2e4; \ub2e4\ub978 \uc5b8\uc5b4\ub4e4\uc740 \ub2e4\ub978 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4). \uc608\uc678\ub294 \uc9c0\uc5ed\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub294 \uc624\ub958\ub97c \uc704\ud55c \uac83\uc774\ub2e4. \ubaa8\ub4e0 \ud568\uc218\uc5d0\uc11c \ubaa8\ub4e0 \uc608\uc678\ub97c \uc7a1\uc73c\ub824(catch) \ud558\uc9c0 \ub9d0\uc544\ub77c (\uc9c0\ub8e8\ud558\uace0, \ubcf4\uae30 \ud749\ud558\uba70, \ub290\ub9b0 \ucf54\ub4dc\uac00 \uc0dd\uc131\ub41c\ub2e4). \uc608\uc678\ub294 \ubcf5\uad6c\ud560 \uc218 \uc5c6\ub294 \uc624\ub958 \uc774\ud6c4 \ubaa8\ub4c8/\uc2dc\uc2a4\ud15c\uc744 \uc885\ub8cc\ud558\uae30 \uc704\ud55c \ucc98\ub9ac\ubc29\uc2dd\uc774 \uc544\ub2c8\ub2e4. Example ??? Alternative RAII Contracts/assertions: GSL(\uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac) \uc758 Expects \uc640 Ensures \ub97c \uc0ac\uc6a9\ud558\ub77c. (\uc5b8\uc5b4\uc5d0\uc11c contract\ub97c \uc9c0\uc6d0\ud558\uae30 \uc804\uae4c\uc9c0) NR.4: \uae08\uc9c0: \ud074\ub798\uc2a4 \uc120\uc5b8\uc744 \uac01\uac01\uc758 \ud30c\uc77c\uc5d0 \ubc30\uce58\ud558\ub77c Reason (not to follow this rule) \uc774 \uaddc\uce59\uc744 \ub530\ub974\uba74\uc11c \uc0dd\uc131\ub418\ub294 \ud30c\uc77c\ub4e4\uc740 \uad00\ub9ac\ud558\uae30 \ud798\ub4e4\uace0 \ucef4\ud30c\uc77c \uc18d\ub3c4\ub97c \uc800\ud558\uc2dc\ud0a8\ub2e4. \uac01\uac01\uc758 \ud074\ub798\uc2a4\ub4e4\uc774 \uc720\uc9c0\ubcf4\uc218\uc640 \ubc30\ud3ec\ub97c \uc704\ud55c \ub9e4\uc6b0 \uc88b\uc740 \ub17c\ub9ac\uc801\uc778 \ub2e8\uc704\uc778 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\ub2e4. Example ??? Alternative \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub85c \uc11c\ub85c \uacb0\ud569\ub41c(cohesive) \ud074\ub798\uc2a4\ub4e4\uacfc \ud568\uc218\ub4e4\uc744 \ud3ec\ud568\uc2dc\ucf1c\ub77c NR.5: \uae08\uc9c0: \uc0dd\uc131\uc790\uc5d0\uc11c \ub9ce\uc740 \uc77c\uc744 \ud558\uc9c0\ub9c8\ub77c; \ub300\uc2e0 2 \ub2e8\uacc4 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c Reason (not to follow this rule) \uc774 \uaddc\uce59\uc744 \ub530\ub974\uba74 \ubd88\ubcc0\uc870\uac74\uc774 \uc57d\ud654\ub418\uace0, \ub354 \ubcf5\uc7a1\ud55c \ucf54\ub4dc(\uc808\ubc18\ub9cc \uc0dd\uc131\ub41c \uac1c\uccb4\ub4e4\uc744 \ub2e4\ub904\uc57c \ud55c\ub2e4)\uc640 \uc624\ub958(\uadf8 \uac1c\uccb4\ub4e4\uc744 \uc77c\uad00\uc801\uc774\uace0 \uc815\ud655\ud55c \ubc29\ubc95\uc73c\ub85c \ub2e4\ub8e8\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0)\uac00 \ubc1c\uc0dd\ud55c\ub2e4. Example ??? Alternative \uc0dd\uc131\uc790\uc5d0\uc11c \ud074\ub798\uc2a4 \ubd88\ubcc0\uc870\uac74\uc744 \ud655\uc2e4\ud788\ud558\ub77c(establish) \ud544\uc694\ud574\uc9c0\uae30 \uc804\uae4c\uc9c0\ub294 \uac1c\uccb4\ub97c \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c NR.6: \uae08\uc9c0: \ubaa8\ub4e0 \uc815\ub9ac \ub3d9\uc791\uc744 \ud568\uc218 \ub05d\uc5d0 \ubc30\uce58\ud558\uace0 goto exit \uc744 \uc0ac\uc6a9\ud558\ub77c Reason (not to follow this rule) goto \ub294 \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\ub2e4. \uc774 \uae30\uc220\uc740 \uc608\uc678\uac00 \uc5c6\uc5c8\ub358 \ub54c RAII \uac19\uc740 \uc790\uc6d0\uacfc \uc624\ub958 \ucc98\ub9ac\ud558\ub358 \ubc29\ubc95\uc774\ub2e4. Example, bad void do_something ( int n ) { if ( n < 100 ) goto exit ; // ... int * p = ( int * ) malloc ( n ); // ... if ( some_error ) goto_exit ; // ... exit : free ( p ); } \ubc84\uadf8\ub97c \ucc3e\uc544\ubcf4\ub77c. Alternative RAII \uc640 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\ub77c RAII\ub97c \ub530\ub974\uc9c0 \uc54a\ub294 \uc790\uc6d0\uc5d0\ub294 finally \ub97c \uc0ac\uc6a9\ud558\ub77c NR.7: \uae08\uc9c0: \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub97c protected \ub85c \ud558\ub77c Reason (not to follow this rule) protected \ub370\uc774\ud130\ub294 \uc624\ub958\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. protected \ub370\uc774\ud130\ub294 \uacc4\uce21\ud560 \uc218 \uc5c6\ub294 \uc591\uc758 \ucf54\ub4dc\uc5d0 \uc758\ud574\uc11c, \ub2e4\uc591\ud55c \uc704\uce58\uc5d0\uc11c \ubcc0\uacbd\ub420 \uc218 \uc788\ub2e4. protected \ub370\uc774\ud130\ub294 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uc5d0\uc11c \uc804\uc5ed\ubcc0\uc218\uc640 \ub3d9\uc77c\ud558\ub2e4. Example ??? Alternative \uba64\ubc84\ubcc0\uc218\ub294 public \ud639\uc740 (\uac00\ub2a5\ud55c) private \uc73c\ub85c \ud558\ub77c","title":"Not-Rule"},{"location":"Not/#nr","text":"\uc774 \uc808\uc740 \uc5b4\ub514\uc120\uac00 \ub110\ub9ac \uc54c\ub824\uc84c\uc9c0\ub9cc, \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc5d0\uc11c \ucd94\ucc9c\ud558\uc9c0 \uc54a\ub294 \uaddc\uce59\uacfc \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc744 \ud3ec\ud568\ud55c\ub2e4. \uc774\ub7f0 \uaddc\uce59\ub4e4\uc774 \ud0c0\ub2f9\ud558\ub358 \uc2dc\uac04\uacfc \uc7a5\uc18c\uac00 \uc788\uc5c8\ub2e4\ub294 \uac83\uc744 \uc6b0\ub9ac\ub294 \ucda9\ubd84\ud788 \uc798 \uc54c\uace0, \uc0ac\uc6a9\ud574\uc654\ub2e4. \ud558\uc9c0\ub9cc, \uc6b0\ub9ac\uac00 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ud1b5\ud574 \uad8c\uc7a5\ud558\uace0 \uc9c0\uc9c0\ud558\ub294 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uc2a4\ud0c0\uc77c\uc5d0 \ubbf8\ub8e8\uc5b4 \ubd24\uc744\ub54c, \uc774 \"\ube44-\uaddc\uce59\"\ub4e4\uc740 \ud574\ub85c\uc6b8(harm) \uc218 \uc788\ub2e4. \uc624\ub298\ub0a0\uc5d0\ub3c4, \uc774 \uaddc\uce59\ub4e4\uc774 \ub4e4\uc5b4\ub9de\uc744 \uc218 \uc788\ub2e4. \uc801\uc808\ud55c \uc9c0\uc6d0 \ub3c4\uad6c\uac00 \uc5c6\uc5b4 \uc815\ud574\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \uc751\ub2f5\ud574\uc57c \ud558\ub294 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc608\uc678\ub97c \uc4f0\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0\ub97c \uc608\ub85c \ub4e4 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \"\uc54c\ub824\uc9c4 \uc9c0\ud61c\"\ub97c \ub9f9\uc2e0\ud574\uc120 \uc548\ub41c\ub2e4 (\"\ud6a8\uc728\uc131\"\uc5d0 \ub300\ud55c \uadfc\uac70 \uc5c6\ub294 \ubb38\uad6c\ub4e4\uc774\ub77c\ub358\uac00); \uadf8\ub7f0 \"\uc9c0\ud61c\"\ub294 \uc2ed\ub144\uc740 \ub354 \ub41c \uc815\ubcf4\uc5d0 \uadfc\uac70\ud558\uac70\ub098 (C\ub098 Java \ucc98\ub7fc) C++\uc640\ub294 \ub9e4\uc6b0 \ub2e4\ub978 \uc18d\uc131\uc744 \uac00\uc9c4 \uc5b8\uc5b4\uacbd\ud5d8\uc5d0 \uadfc\uac70\ud55c \uac83\uc77c \uc218 \uc788\ub2e4. \uc774\ub7f0 \ube44-\uaddc\uce59\ub4e4\uc744 \ub300\uc2e0\ud558\uae30 \uc704\ud55c \uae0d\uc815\uc801\uc778 \ub17c\uc7c1(positive arguments)\ub4e4\uc740 \"\ub300\uc548\ub4e4\"\uc5d0\uc11c \uae30\uc220\ud55c\ub2e4. \ube44-\uaddc\uce59 \uc694\uc57d: NR.1: \uae08\uc9c0: \ubaa8\ub4e0 \uc120\uc5b8\uc774 \ud568\uc218\uc758 \uc0c1\ub2e8\uc5d0 \uc624\uac8c \ud558\ub77c NR.2: \uae08\uc9c0: \ud568\uc218\uc5d0\uc11c \uc624\uc9c1 \ud558\ub098\uc758 return \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c NR.3: \uae08\uc9c0: \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c NR.4: \uae08\uc9c0: \ud074\ub798\uc2a4 \uc120\uc5b8\uc744 \uac01\uac01\uc758 \ud30c\uc77c\uc5d0 \ubc30\uce58\ud558\ub77c NR.5: \uae08\uc9c0: \uc0dd\uc131\uc790\uc5d0\uc11c \ub9ce\uc740 \uc77c\uc744 \ud558\uc9c0\ub9c8\ub77c; \ub300\uc2e0 2 \ub2e8\uacc4 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c NR.6: \uae08\uc9c0: \ubaa8\ub4e0 \uc815\ub9ac \ub3d9\uc791\uc744 \ud568\uc218 \ub05d\uc5d0 \ubc30\uce58\ud558\uace0 goto exit \uc744 \uc0ac\uc6a9\ud558\ub77c NR.7: \uae08\uc9c0: \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub97c protected \ub85c \ud558\ub77c ???","title":"NR: \uaddc\uce59\uc774 \uc544\ub2cc \uac83\ub4e4\uacfc \uadfc\uac70\uc5c6\ub294 \uc774\uc57c\uae30\ub4e4"},{"location":"Not/#nr1","text":"","title":"NR.1: \uae08\uc9c0: \ubaa8\ub4e0 \uc120\uc5b8\uc774 \ud568\uc218\uc758 \uc0c1\ub2e8\uc5d0 \uc624\uac8c \ud558\ub77c"},{"location":"Not/#reason-not-to-follow-this-rule","text":"\uc774 \uaddc\uce59\uc740 \uad6c\ubb38\uc774 \uc2e4\ud589\ub41c \uc774\ud6c4\uc758 \ubcc0\uc218\uc640 \uc0c1\uc218\uc758 \ucd08\uae30\ud654\ub97c \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub358 \uc624\ub798\ub41c \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub4e4\uc758 \uc794\uc7ac\ub2e4. \uc774 \uaddc\uce59\uc740 \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\ub97c \uae38\uac8c \ub9cc\ub4e4\uace0 \ucd08\uae30\ud654\uac00 \uc0dd\ub7b5\ub418\uac70\ub098 \uc798\ubabb\ub41c \uac12\uc73c\ub85c \ucd08\uae30\ud654\ub418\ub294 \uac83\uc73c\ub85c \uc778\ud55c \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.","title":"Reason (not to follow this rule)"},{"location":"Not/#example-bad","text":"int use ( int x ) { int i ; char c ; double d ; // ... some stuff ... if ( x < i ) { // ... i = f ( x , d ); } if ( i < x ) { // ... i = g ( x , c ); } return i ; } \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\uc640 \uc2e4\uc81c \uc0ac\uc6a9 \ucf54\ub4dc\uc758 \uac04\uaca9\uc774 \uba40\uc5b4\uc9c8 \uc218\ub85d, \ubc84\uadf8\uac00 \ubc1c\uc0dd\ud560 \uae30\ud68c\uac00 \ub9ce\uc544\uc9c4\ub2e4. \ub2e4\ud589\ud788\ub3c4, \ucef4\ud30c\uc77c\ub7ec\uac00 \ub9ce\uc740 \"\uac12\uc744 \uacb0\uc815\ud558\uae30 \uc804\uc5d0 \uc0ac\uc6a9\ud558\ub294\" \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\ub2e4. \ubd88\ud589\ud558\uac8c\ub3c4, \ucef4\ud30c\uc77c\ub7ec\uac00 \ubaa8\ub4e0 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218\ub294 \uc5c6\uace0 \uc774 \uc9e7\uc740 \uc608\uc81c\uc640 \uac19\uc774 \uc27d\uac8c \ucc3e\uc544\ub0bc\ub9cc\ud55c \uacbd\uc6b0\ub9cc \uc788\ub294 \uac83\ub3c4 \uc544\ub2c8\ub2e4.","title":"Example, bad"},{"location":"Not/#alternative","text":"\uc5b8\uc81c\ub098 \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud558\ub77c ES.21: \ubcc0\uc218(\ud639\uc740 \uc0c1\uc218) \uc0ac\uc6a9\uc774 \ud544\uc694\ud558\uae30 \uc804\uae4c\uc9c0\ub294 \ub178\ucd9c\uc2dc\ud0a4\uc9c0 \ub9d0\uc544\ub77c","title":"Alternative"},{"location":"Not/#nr2-return","text":"","title":"NR.2: \uae08\uc9c0: \ud568\uc218\uc5d0\uc11c \uc624\uc9c1 \ud558\ub098\uc758 return \uad6c\ubb38\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Not/#reason-not-to-follow-this-rule_1","text":"\ud568\uc218\uc5d0 \ubc18\ud658 \uc9c0\uc810\uc774 \ud558\ub098\ub9cc \uc788\uc73c\uba74 \ubd88\ud544\uc694\ud558\uac8c \ub4a4\uc5bd\ud78c \ucf54\ub4dc\ub97c \ub9cc\ub4e4 \uc218 \uc788\uace0 \ucd94\uac00\uc801\uc778 \uc0c1\ud0dc \ubcc0\uc218\ub4e4\uc744 \ub9cc\ub4e4\uac8c \ub41c\ub2e4. \ud2b9\ud788, \ub2e8\uc77c \ubc18\ud658 \uaddc\uce59\uc740 \ud568\uc218 \uc0c1\ub2e8\uc5d0\uc11c \uc624\ub958 \uac80\uc0ac\uc5d0 \uc9d1\uc911\ud560 \uc218 \uc5c6\uac8c \ub9cc\ub4e0\ub2e4.","title":"Reason (not to follow this rule)"},{"location":"Not/#example","text":"template < class T > // requires Number<T> string sign ( T x ) { if ( x < 0 ) return \"negative\" ; else if ( x > 0 ) return \"positive\" ; return \"zero\" ; } \ubc18\ud658 \uc9c0\uc810\uc744 \ud558\ub098\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574\uc120 \ub2e4\uc74c\uacfc \uac19\uc740 \uc77c\uc744 \ud574\uc57c\ud55c\ub2e4 template < class T > // requires Number<T> string sign ( T x ) // bad { string res ; if ( x < 0 ) res = \"negative\" ; else if ( x > 0 ) res = \"positive\" ; else res = \"zero\" ; return res ; } \uc774\ub294 \ub354 \uae34 \ucf54\ub4dc\uc77c \ubfd0\ub9cc \uc544\ub2c8\ub77c \ube44\ud6a8\uc728\uc801\uc77c \uc218 \uc788\ub2e4. \ud568\uc218\uac00 \ucee4\uc9c0\uace0 \ubcf5\uc7a1\ud574\uc9c8\uc218\ub85d, \ub354 \uc791\uc131\ud558\uac70\ub098 \uc0ac\uc6a9\ud558\uae30\uc5d0 \uace0\ud1b5\uc2a4\ub7ec\uc6b4 \ud568\uc218\uac00 \ub41c\ub2e4. \ubb3c\ub860 \ub9ce\uc740 \ub2e8\uc21c\ud55c \ud568\uc218\ub4e4\uc740 \uadf8 \ub0b4\uc6a9\uc5d0 \ub2f4\uaca8\uc788\ub294 \ub2e8\uc21c\ud55c \ub17c\ub9ac \ub355\ubd84\uc5d0 \uc790\uc5f0\uc2a4\ub7fd\uac8c \ud558\ub098\uc758 return \uc744 \uac00\uc9c0\uac8c \ub420 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Not/#example_1","text":"int index ( const char * p ) { if ( ! p ) return - 1 ; // error indicator: alternatively \"throw nullptr_error{}\" // ... do a lookup to find the index for p return i ; } \ub2e8\uc77c \ubc18\ud658 \uaddc\uce59\uc744 \uc801\uc6a9\ud558\uba74 \uc774\ub807\uac8c \ubcc0\ud55c\ub2e4 int index2 ( const char * p ) { int i ; if ( ! p ) i = - 1 ; // error indicator else { // ... do a lookup to find the index for p } return i ; } (\uc758\ub3c4\uc801\uc73c\ub85c) \uaddc\uce59\uc744 \uc704\ubc18\ud588\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\ub77c. \uc774\ub7f0 \ucf54\ub4dc \uc2a4\ud0c0\uc77c\uc740 \ubcf4\ud1b5 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc740 \ubcc0\uc218\uac00 \uc788\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uac8c \ub41c\ub2e4. \ub610\ud55c, \uc774 \uc2a4\ud0c0\uc77c\uc740 goto exit \uacfc \uac19\uc740 \ubc29\uc2dd\uc744 \uc801\uc6a9\ud558\uace0 \uc2f6\uc740 \uc720\ud639\uc744 \ubd88\ub7ec\uc77c\uc73c\ud0a8\ub2e4.","title":"Example"},{"location":"Not/#alternative_1","text":"\ud568\uc218\ub294 \uc9e7\uace0 \ub2e8\uc21c\ud558\uac8c \uc720\uc9c0\ud558\ub77c return \uad6c\ubb38\uc744 \uc5ec\ub7ec\ubc88 \uc0ac\uc6a9\ud574\ub3c4 \uc88b\ub2e4 (\uc608\uc678\ub97c \ub358\uc838\ub3c4 \uad1c\ucc2e\ub2e4)","title":"Alternative"},{"location":"Not/#nr3","text":"","title":"NR.3: \uae08\uc9c0: \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Not/#reason-not-to-follow-this-rule_2","text":"\uc774 \ube44-\uaddc\uce59\uc5d0\ub294 3\uac00\uc9c0 \uc774\uc720\uac00 \ub530\ub77c\uc628\ub2e4. \uc608\uc678\ub294 \ube44\ud6a8\uc728\uc801\uc774\ub2e4(inefficient) \uc608\uc678\ub294 \ub204\uc218\uc640 \uc624\ub958\ub85c \uc774\uc5b4\uc9c4\ub2e4(leaks and errors) \uc608\uc678\uc758 \uc131\ub2a5\uc740 \uc608\uce21\ud560 \uc218 \uc5c6\ub2e4(not predictable) \uc774 \uc7c1\uc810\uc5d0 \ub300\ud574\uc11c \ubaa8\ub450\uac00 \ub9cc\uc871\ud558\ub3c4\ub85d \ud0c0\ud611\ud560 \ubc29\ubc95\uc740 \uc5c6\ub2e4. \ubb34\uc5c7\ubcf4\ub2e4, \uc608\uc678\uc5d0 \ub300\ud55c \ud1a0\ub860\uc740 40\ub144 \ub118\uac8c \uc774\uc5b4\uc9c0\uace0 \uc788\ub2e4. \uc77c\ubd80 \uc5b8\uc5b4\ub4e4\uc740 \uc608\uc678 \uc5c6\uc774\ub294 \uc4f8\uc218\uac00 \uc5c6\uace0, \ub2e4\ub978 \uc77c\ubd80\ub294 \uc608\uc678\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uae30\ub3c4 \ud55c\ub2e4. \uc774 \ub54c\ubb38\uc5d0 \uc608\uc678\ub97c \uc4f0\uac70\ub098 \uc4f0\uc9c0 \uc54a\ub294 \uac15\ud55c \uc804\ud1b5\uacfc \uc5f4\ub764 \ub17c\uc7c1\uc774 \ubc1c\uc0dd\ud55c\ub2e4. \uadf8\ub807\uc9c0\ub9cc \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc791\uc131\ud558\ub294 \uc6b0\ub9ac\uac00 \ubc94\uc6a9 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c\ub294 \uc608\uc678\uac00 \ucd5c\uc120\uc758 \ubc29\uc548\uc774\ub77c\uace0 \uc0dd\uac01\ud558\ub294 \uc774\uc720\ub294 \ub2e8\uc21c\ud55c \ucc2c\ubc18 \uc591\ub860\uc740 \uc885\uc885 \uacb0\ub860\uc744 \ub0b4\ub9b4 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. \uc608\uc678\uac00 \uc2e4\uc81c\ub85c \ubd80\uc801\ud569\ud55c \ud2b9\ubcc4\ud55c \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\ub4e4\ub3c4 \uc874\uc7ac\ud55c\ub2e4. (\uc608\uc678 \ucc98\ub9ac\uc758 \ube44\uc6a9\uc744 \uc815\ud655\ud788 \ud3c9\uac00\ud558\uae30 \uc704\ud55c \uc9c0\uc6d0\uc774 \uc5c6\uc73c\uba74\uc11c \uc2dc\uac04 \ub0b4 \uc751\ub2f5\uc131\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294(hard-real-time) \uc2dc\uc2a4\ud15c \ucc98\ub7fc) \uc608\uc678\ub97c \ubc18\ub300\ud558\ub294 \uc8fc\uc7a5\uc73c\ub85c \ub3cc\uc544\uc640\uc11c \uc0dd\uac01\ud574\ubcf4\uba74 \uc608\uc678\ub294 \ube44\ud6a8\uc728\uc801\uc774\ub2e4: \ubb34\uc5c7\uc5d0 \ube44\ud574\uc11c \ube44\ud6a8\uc728\uc801\uc778\uac00? \ube44\uad50\ub97c \ud55c\ub2e4\uba74 \uac19\uc740 \uc624\ub958 \uc9d1\ud569\uc744 \ucc98\ub9ac\ud558\uace0 \uac01\uac01\uc744 \ub3d9\ub4f1\ud558\uac8c \ucc98\ub9ac\ud560 \ub54c\ub97c \ube44\uad50\ud574\uc57c \ud55c\ub2e4. \ud2b9\ud788, \uc989\uc2dc \ube44\uc815\uc0c1 \uc885\ub8cc\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uacfc \uc624\ub958\ub97c \uae30\ub85d\ud558\uae30 \uc804\uc5d0 \uc8fc\uc758\uae4a\uac8c \uc790\uc6d0\ub4e4\uc744 \uc815\ub9ac\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \ube44\uad50\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \uc2e4\uc81c\ub85c, \uc77c\ubd80 \uc2dc\uc2a4\ud15c\ub4e4\uc740 \ud615\ud3b8\uc5c6\ub294 \uc608\uc678 \ucc98\ub9ac \uad6c\ud604\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4; \ub54c\ub85c\ub294 \uadf8\ub7f0 \uad6c\ud604\uc774 \ub2e4\ub978 \uc624\ub958 \ucc98\ub9ac \uc811\uadfc\ubc95\ub4e4\uc744 \ucde8\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac8c \uc624\ub958\uc758 \uadfc\ubcf8\uc801\uc778 \ubb38\uc81c\ub294 \uc544\ub2c8\ub2e4. \ud6a8\uc728\uc131\uc744 \ub530\uc9c4\ub2e4\uba74 - \uc5b4\ub5a4 \uacbd\uc6b0\uc5d0\ub4e0 - \ubb38\uc81c\uc5d0 \ub300\ud55c \ud1b5\ucc30\uc744 \uc904 \uc218 \uc788\ub294 \uc88b\uc740 \ub370\uc774\ud130\ub97c \uac00\uc84c\ub294\uc9c0 \uc8fc\uc758 \uae4a\uac8c \ub530\uc838\ubcf4\ub77c. \uc608\uc678\ub294 \ub204\uc218\uc640 \uc624\ub958\ub85c \uc774\uc5b4\uc9c4\ub2e4: \uadf8\ub807\uc9c0 \uc54a\ub2e4. \ub9cc\uc57d \ub2f9\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \uc790\uc6d0 \uad00\ub9ac\ub97c \uc704\ud55c \uc804\ub7b5 \uc5c6\uc774 \uc644\uc804\ud788 \uaf2c\uc5ec\uc788\ub294 \ud3ec\uc778\ud130\ub4e4\uc774\ub77c\uba74, \ubb34\uc5c7\uc744 \ud558\ub354\ub77c\ub3c4 \ubb38\uc81c\uac00 \ub420 \uac83\uc774\ub2e4. \uadf8\ub7f0 \ucf54\ub4dc\uac00 \ubc31\ub9cc\uc904\uc774 \uc788\ub2e4\uba74 \uc608\uc678\ub97c \uc4f0\ub294 \uac83\uc774 \ubd88\uac00\ub2a5\ud560 \uac83\uc774\ub2e4, \ud558\uc9c0\ub9cc \uadf8\uac83\uc740 \ubb34\ubd84\ubcc4\ud558\uace0 \uacfc\uc6a9\ub41c \ud3ec\uc778\ud130 \uc0ac\uc6a9\uc73c\ub85c \uc778\ud55c \ubb38\uc81c\ub2e4. \uc6b0\ub9ac\uc758 \uc758\uacac\uc740, \uc608\uc678 \uae30\ubc18 \uc624\ub958 \ucc98\ub9ac\ub97c \ub2e8\uc21c\ud558\uace0 \uc548\uc804\ud558\uac8c \ud558\uae30 \uc704\ud574\uc11c\ub294 RAII\uac00 \ud544\uc694\ud558\ub2e4 -- \uc774\ub294 \uc608\uc678\ub97c \uc4f0\uc9c0 \uc54a\uc744\ub54c\ubcf4\ub2e4 \ub2e8\uc21c\ud558\uace0 \uc548\uc804\ud558\ub2e4. \uc608\uc678\uc758 \uc131\ub2a5\uc740 \uc608\uce21\ud560 \uc218 \uc5c6\ub2e4: \uc8fc\uc5b4\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \uc791\uc5c5\uc744 \ub9c8\uce5c\ub2e4\ub294 \uac83\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e0\ub2e4\uba74, \uadf8\ub7f0 \ubcf4\uc7a5\uc744 \ub4b7\ubc1b\uce68\ud560 \ub3c4\uad6c\ub4e4\uc774 \ud544\uc694\ud558\ub2e4. \uc6b0\ub9ac\uac00 \uc544\ub294 \ud55c \uadf8\ub7f0 \ub3c4\uad6c\ub294 (\ucd5c\uc18c\ud55c \ub300\ubd80\ubd84\uc758 \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc5d0\uac8c\ub294) \uc5c6\ub2e4 \uc8fc\ub85c, \ubcf4\ud1b5 \ub300\ubd80\ubd84, \uc608\uc678\ub85c \uc778\ud55c \ubb38\uc81c\ub294 \uc624\ub798\ub41c \uc9c0\uc800\ubd84\ud55c \ucf54\ub4dc\uc640 \ud568\uaed8 \ub3d9\uc791\ud574\uc57c\ud558\ub294 \uc694\uad6c\uc5d0 \uae30\uc778\ud55c\ub2e4. \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\uc790\ub294 \uc8fc\uc7a5\ub4e4 \uc911 \ud575\uc2ec\uc740 \uc608\uc678\ub294 \uc798\ubabb\ub41c \ubc18\ud658\uacfc \uc815\uc0c1\uc801\uc778 \ubc18\ud658\uc744 \uc644\uc804\ud788 \ub2e4\ub974\uac8c \ucde8\uae09\ud55c\ub2e4 \uc608\uc678\ub294 \uc78a\uc5b4\ubc84\ub9ac\uac70\ub098 \ubb34\uc2dc\ud560 \uc218 \uc5c6\ub2e4 \uc608\uc678\ub294 \uccb4\uacc4\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 \uc774 \uc810\ub4e4\uc744 \uae30\uc5b5\ud558\ub77c \uc608\uc678\ub294 \uc624\ub958\ub97c \uc54c\ub9ac\uae30 \uc704\ud55c \uac83\uc774\ub2e4 (C++\uc5d0\uc11c\ub294 \uadf8\ub807\ub2e4; \ub2e4\ub978 \uc5b8\uc5b4\ub4e4\uc740 \ub2e4\ub978 \ubaa9\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4). \uc608\uc678\ub294 \uc9c0\uc5ed\uc801\uc73c\ub85c \ucc98\ub9ac\ud560 \uc218 \uc5c6\ub294 \uc624\ub958\ub97c \uc704\ud55c \uac83\uc774\ub2e4. \ubaa8\ub4e0 \ud568\uc218\uc5d0\uc11c \ubaa8\ub4e0 \uc608\uc678\ub97c \uc7a1\uc73c\ub824(catch) \ud558\uc9c0 \ub9d0\uc544\ub77c (\uc9c0\ub8e8\ud558\uace0, \ubcf4\uae30 \ud749\ud558\uba70, \ub290\ub9b0 \ucf54\ub4dc\uac00 \uc0dd\uc131\ub41c\ub2e4). \uc608\uc678\ub294 \ubcf5\uad6c\ud560 \uc218 \uc5c6\ub294 \uc624\ub958 \uc774\ud6c4 \ubaa8\ub4c8/\uc2dc\uc2a4\ud15c\uc744 \uc885\ub8cc\ud558\uae30 \uc704\ud55c \ucc98\ub9ac\ubc29\uc2dd\uc774 \uc544\ub2c8\ub2e4.","title":"Reason (not to follow this rule)"},{"location":"Not/#example_2","text":"???","title":"Example"},{"location":"Not/#alternative_2","text":"RAII Contracts/assertions: GSL(\uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac) \uc758 Expects \uc640 Ensures \ub97c \uc0ac\uc6a9\ud558\ub77c. (\uc5b8\uc5b4\uc5d0\uc11c contract\ub97c \uc9c0\uc6d0\ud558\uae30 \uc804\uae4c\uc9c0)","title":"Alternative"},{"location":"Not/#nr4","text":"","title":"NR.4: \uae08\uc9c0: \ud074\ub798\uc2a4 \uc120\uc5b8\uc744 \uac01\uac01\uc758 \ud30c\uc77c\uc5d0 \ubc30\uce58\ud558\ub77c"},{"location":"Not/#reason-not-to-follow-this-rule_3","text":"\uc774 \uaddc\uce59\uc744 \ub530\ub974\uba74\uc11c \uc0dd\uc131\ub418\ub294 \ud30c\uc77c\ub4e4\uc740 \uad00\ub9ac\ud558\uae30 \ud798\ub4e4\uace0 \ucef4\ud30c\uc77c \uc18d\ub3c4\ub97c \uc800\ud558\uc2dc\ud0a8\ub2e4. \uac01\uac01\uc758 \ud074\ub798\uc2a4\ub4e4\uc774 \uc720\uc9c0\ubcf4\uc218\uc640 \ubc30\ud3ec\ub97c \uc704\ud55c \ub9e4\uc6b0 \uc88b\uc740 \ub17c\ub9ac\uc801\uc778 \ub2e8\uc704\uc778 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\ub2e4.","title":"Reason (not to follow this rule)"},{"location":"Not/#example_3","text":"???","title":"Example"},{"location":"Not/#alternative_3","text":"\ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub85c \uc11c\ub85c \uacb0\ud569\ub41c(cohesive) \ud074\ub798\uc2a4\ub4e4\uacfc \ud568\uc218\ub4e4\uc744 \ud3ec\ud568\uc2dc\ucf1c\ub77c","title":"Alternative"},{"location":"Not/#nr5-2","text":"","title":"NR.5: \uae08\uc9c0: \uc0dd\uc131\uc790\uc5d0\uc11c \ub9ce\uc740 \uc77c\uc744 \ud558\uc9c0\ub9c8\ub77c; \ub300\uc2e0 2 \ub2e8\uacc4 \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Not/#reason-not-to-follow-this-rule_4","text":"\uc774 \uaddc\uce59\uc744 \ub530\ub974\uba74 \ubd88\ubcc0\uc870\uac74\uc774 \uc57d\ud654\ub418\uace0, \ub354 \ubcf5\uc7a1\ud55c \ucf54\ub4dc(\uc808\ubc18\ub9cc \uc0dd\uc131\ub41c \uac1c\uccb4\ub4e4\uc744 \ub2e4\ub904\uc57c \ud55c\ub2e4)\uc640 \uc624\ub958(\uadf8 \uac1c\uccb4\ub4e4\uc744 \uc77c\uad00\uc801\uc774\uace0 \uc815\ud655\ud55c \ubc29\ubc95\uc73c\ub85c \ub2e4\ub8e8\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0)\uac00 \ubc1c\uc0dd\ud55c\ub2e4.","title":"Reason (not to follow this rule)"},{"location":"Not/#example_4","text":"???","title":"Example"},{"location":"Not/#alternative_4","text":"\uc0dd\uc131\uc790\uc5d0\uc11c \ud074\ub798\uc2a4 \ubd88\ubcc0\uc870\uac74\uc744 \ud655\uc2e4\ud788\ud558\ub77c(establish) \ud544\uc694\ud574\uc9c0\uae30 \uc804\uae4c\uc9c0\ub294 \uac1c\uccb4\ub97c \uc815\uc758\ud558\uc9c0 \ub9c8\ub77c","title":"Alternative"},{"location":"Not/#nr6-goto-exit","text":"","title":"NR.6: \uae08\uc9c0: \ubaa8\ub4e0 \uc815\ub9ac \ub3d9\uc791\uc744 \ud568\uc218 \ub05d\uc5d0 \ubc30\uce58\ud558\uace0 goto exit\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Not/#reason-not-to-follow-this-rule_5","text":"goto \ub294 \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\ub2e4. \uc774 \uae30\uc220\uc740 \uc608\uc678\uac00 \uc5c6\uc5c8\ub358 \ub54c RAII \uac19\uc740 \uc790\uc6d0\uacfc \uc624\ub958 \ucc98\ub9ac\ud558\ub358 \ubc29\ubc95\uc774\ub2e4.","title":"Reason (not to follow this rule)"},{"location":"Not/#example-bad_1","text":"void do_something ( int n ) { if ( n < 100 ) goto exit ; // ... int * p = ( int * ) malloc ( n ); // ... if ( some_error ) goto_exit ; // ... exit : free ( p ); } \ubc84\uadf8\ub97c \ucc3e\uc544\ubcf4\ub77c.","title":"Example, bad"},{"location":"Not/#alternative_5","text":"RAII \uc640 \uc608\uc678\ub97c \uc0ac\uc6a9\ud558\ub77c RAII\ub97c \ub530\ub974\uc9c0 \uc54a\ub294 \uc790\uc6d0\uc5d0\ub294 finally \ub97c \uc0ac\uc6a9\ud558\ub77c","title":"Alternative"},{"location":"Not/#nr7-protected","text":"","title":"NR.7: \uae08\uc9c0: \ubaa8\ub4e0 \ub370\uc774\ud130 \uba64\ubc84\ub97c protected\ub85c \ud558\ub77c"},{"location":"Not/#reason-not-to-follow-this-rule_6","text":"protected \ub370\uc774\ud130\ub294 \uc624\ub958\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. protected \ub370\uc774\ud130\ub294 \uacc4\uce21\ud560 \uc218 \uc5c6\ub294 \uc591\uc758 \ucf54\ub4dc\uc5d0 \uc758\ud574\uc11c, \ub2e4\uc591\ud55c \uc704\uce58\uc5d0\uc11c \ubcc0\uacbd\ub420 \uc218 \uc788\ub2e4. protected \ub370\uc774\ud130\ub294 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uc5d0\uc11c \uc804\uc5ed\ubcc0\uc218\uc640 \ub3d9\uc77c\ud558\ub2e4.","title":"Reason (not to follow this rule)"},{"location":"Not/#example_5","text":"???","title":"Example"},{"location":"Not/#alternative_6","text":"\uba64\ubc84\ubcc0\uc218\ub294 public \ud639\uc740 (\uac00\ub2a5\ud55c) private \uc73c\ub85c \ud558\ub77c","title":"Alternative"},{"location":"Performance/","text":"Per: \uc131\ub2a5 ??? should this section be in the main guide??? \uc774 \uc7a5\uc5d0\uc11c\ub294 \ub192\uc740 \uc131\ub2a5 \ub610\ub294 \uc9c0\uc5f0\uc774 \uac70\uc758 \uc5c6\uc5b4\uc57c \ud558\ub294 \uc0ac\ub78c\ub4e4\uc744 \uc704\ud55c \uaddc\uce59\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub2e4. \ub2e4\uc2dc \ub9d0\ud574 \uc608\uce21 \uac00\ub2a5\ud55c \uc9e7\uc740 \uc2dc\uac04 \uc548\uc5d0 \uc791\uc5c5\uc744 \uc644\ub8cc\ud558\uae30 \uc704\ud574 \uac00\ub2a5\ud55c \uc801\uc740 \uc2dc\uac04\uacfc \ub9ac\uc18c\uc2a4\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0\uc640 \uad00\ub828\ub41c \uaddc\uce59\uc774\ub2e4. \uaddc\uce59\ub4e4\uc740 (\ub300\ubd80\ubd84\uc758) \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud544\uc694\ud55c \uac83\ubcf4\ub2e4 \ub354 \uc81c\ud55c\uc801\uc774\uace0 \uc5b4\ub5bb\uac8c \ubcf4\uba74 \uac70\uc2ac\ub9b4 \uc218\ub3c4 \uc788\ub294 \uac83\uc774\ub2e4. \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\uc5d0 \uc774\ub7ec\ud55c \uac83\ub4e4\uc744 \ub9f9\ubaa9\uc801\uc73c\ub85c \ub530\ub77c \ud558\uc9c0 \uc54a\uae30 \ubc14\ub780\ub2e4: \uc9c0\uc5f0\uc744 \uc5c6\uc560\ub294 \ubaa9\uc801\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 \uad49\uc7a5\ud55c \ub178\ub825\uc774 \ud544\uc694\ud558\ub2e4. \uc131\ub2a5 \uaddc\uce59 \uc694\uc57d: Per.1: Don't optimize without reason Per.2: Don't optimize prematurely Per.3: Don't optimize something that's not performance critical Per.4: Don't assume that complicated code is necessarily faster than simple code Per.5: Don't assume that low-level code is necessarily faster than high-level code Per.6: Don't make claims about performance without measurements Per.7: Design to enable optimization Per.10: Rely on the static type system Per.11: Move computation from run time to compile time Per.12: Eliminate redundant aliases Per.13: Eliminate redundant indirections Per.14: Minimize the number of allocations and deallocations Per.15: Do not allocate on a critical branch Per.16: Use compact data structures Per.17: Declare the most used member of a time-critical struct first Per.18: Space is time Per.19: Access memory predictably Per.30: Avoid context switches on the critical path Per.1: \uc774\uc720\uc5c6\uc774 \ucd5c\uc801\ud654\ud558\uc9c0 \ub9c8\ub77c Reason If there is no need for optimization, the main result of the effort will be more errors and higher maintenance costs. Note Some people optimize out of habit or because it's fun. ??? Per.2: \uc131\uae09\ud558\uac8c \ucd5c\uc801\ud654\ud558\uc9c0 \ub9c8\ub77c Reason Elaborately optimized code is usually larger and harder to change than unoptimized code. ??? Per.3: \uc131\ub2a5 \ud06c\ub9ac\ud2f0\uceec\ud558\uc9c0 \uc54a\ub294 \uacf3\uc5d0\ub294 \ucd5c\uc801\ud654\ub97c \ud558\uc9c0 \ub9c8\ub77c Reason Optimizing a non-performance-critical part of a program has no effect on system performance. Note If your program spends most of its time waiting for the web or for a human, optimization of in-memory computation is probably useless. Put another way: If your program spends 4% of its processing time doing computation A and 40% of its time doing computation B, a 50% improvement on A is only as impactful as a 5% improvement on B. (If you don't even know how much time is spent on A or B, see Per.1 and Per.2 .) Per.4: \ubcf5\uc7a1\ud55c \ucf54\ub4dc\uac00 \uac04\ub2e8\ud55c \ucf54\ub4dc\ubcf4\ub2e4 \ube60\ub974\ub2e4\uace0 \ucd94\uce21\ud558\uc9c0 \ub9c8\ub77c Reason Simple code can be very fast. Optimizers sometimes do marvels with simple code Example, good // clear expression of intent, fast execution vector < uint8_t > v ( 100000 ); for ( auto & c : v ) c = ~ c ; Example, bad // intended to be faster, but is actually slower vector < uint8_t > v ( 100000 ); for ( size_t i = 0 ; i < v . size (); i += sizeof ( uint64_t )) { uint64_t & quad_word = * reinterpret_cast < uint64_t *> ( & v [ i ]); quad_word = ~ quad_word ; } Note ??? ??? Per.5: \uc800\uc218\uc900 \ucf54\ub4dc\uac00 \uace0\uc218\uc900 \ucf54\ub4dc\ubcf4\ub2e4 \ud544\uc5f0\uc801\uc73c\ub85c \ube60\ub97c \uac83\uc774\ub77c\uace0 \ucd94\uce21\ud558\uc9c0 \ub9c8\ub77c Reason Low-level code sometimes inhibits optimizations. Optimizers sometimes do marvels with high-level code. Note ??? ??? Per.6: \uce21\uc815\uc5c6\uc774 \uc131\ub2a5 \uac1c\uc120\uc744 \uc8fc\uc7a5\ud558\uc9c0 \ub9c8\ub77c Reason The field of performance is littered with myth and bogus folklore. Modern hardware and optimizers defy naive assumptions; even experts are regularly surprised. Note Getting good performance measurements can be hard and require specialized tools. Note A few simple microbenchmarks using Unix time or the standard-library <chrono> can help dispel the most obvious myths. If you can't measure your complete system accurately, at least try to measure a few of your key operations and algorithms. A profiler can help tell you which parts of your system are performance critical. Often, you will be surprised. ??? Per.7: \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud558\uac8c \uc124\uacc4\ud558\ub77c Reason Because we often need to optimize the initial design. Because a design that ignore the possibility of later improvement is hard to change. Example From the C (and C++) standard: void qsort ( void * base , size_t num , size_t size , int ( * compar )( const void * , const void * )); When did you even want to sort memory? Really, we sort sequences of elements, typically stored in containers. A call to qsort throws away much useful information (e.g., the element type), forces the user to repeat information already known (e.g., the element size), and forces the user to write extra code (e.g., a function to compare double s). This implies added work for the programmer, is error-prone, and deprives the compiler of information needed for optimization. double data [ 100 ]; // ... fill a ... // 100 chunks of memory of sizeof(double) starting at // address data using the order defined by compare_doubles qsort ( data , 100 , sizeof ( double ), compare_doubles ); From the point of view of interface design is that qsort throws away useful information. We can do better (in C++98) template < typename Iter > void sort ( Iter b , Iter e ); // sort [b:e) sort ( data , data + 100 ); Here, we use the compiler's knowledge about the size of the array, the type of elements, and how to compare double s. With C++11 plus concepts , we can do better still // Sortable specifies that c must be a // random-access sequence of elements comparable with < void sort ( Sortable & c ); sort ( c ); The key is to pass sufficient information for a good implementation to be chosen. In this, the sort interfaces shown here still have a weakness: They implicitly rely on the element type having less-than ( < ) defined. To complete the interface, we need a second version that accepts a comparison criteria: // compare elements of c using p void sort ( Sortable & c , Predicate < Value_type < Sortable >> p ); The standard-library specification of sort offers those two versions, but the semantics is expressed in English rather than code using concepts. Note Premature optimization is said to be the root of all evil , but that's not a reason to despise performance. It is never premature to consider what makes a design amenable to improvement, and improved performance is a commonly desired improvement. Aim to build a set of habits that by default results in efficient, maintainable, and optimizable code. In particular, when you write a function that is not a one-off implementation detail, consider Information passing: Prefer clean interfaces carrying sufficient information for later improvement of implementation. Note that information flows into and out of an implementation through the interfaces we provide. Compact data: By default, use compact data , such as std::vector and access it in a systematic fashion . If you think you need a linked structure, try to craft the interface so that this structure isn't seen by users. Function argument passing and return: Distinguish between mutable and non-mutable data. Don't impose a resource management burden on your users. Don't impose spurious run-time indirections on your users. Use conventional ways of passing information through an interface; unconventional and/or \"optimized\" ways of passing data can seriously complicate later reimplementation. Abstraction: Don't overgeneralize; a design that tries to cater for every possible use (and misuse) and defers every design decision for later (using compile-time or run-time indirections) is usually a complicated, bloated, hard-to-understand mess. Generalize from concrete examples, preserving performance as we generalize. Do not generalize based on mere speculation about future needs. The ideal is zero-overhead generalization. Libraries: Use libraries with good interfaces. If no library is available build one yourself and imitate the interface style from a good library. The standard library is a good first place to look for inspiration. Isolation: Isolate your code from messy and/or old-style code by providing an interface of your choosing to it. This is sometimes called \"providing a wrapper\" for the useful/necessary but messy code. Don't let bad designs \"bleed into\" your code. Example Consider: template < class ForwardIterator , class T > bool binary_search ( ForwardIterator first , ForwardIterator last , const T & val ); binary_search(begin(c), end(c), 7) will tell you whether 7 is in c or not. However, it will not tell you where that 7 is or whether there are more than one 7 . Sometimes, just passing the minimal amount of information back (here, true or false ) is sufficient, but a good interface passes needed information back to the caller. Therefore, the standard library also offers template < class ForwardIterator , class T > ForwardIterator lower_bound ( ForwardIterator first , ForwardIterator last , const T & val ); lower_bound returns an iterator to the first match if any, otherwise to the first element greater than val , or last if no such element is found. However, lower_bound still doesn't return enough information for all uses, so the standard library also offers template < class ForwardIterator , class T > pair < ForwardIterator , ForwardIterator > equal_range ( ForwardIterator first , ForwardIterator last , const T & val ); equal_range returns a pair of iterators specifying the first and one beyond last match. auto r = equal_range ( begin ( c ), end ( c ), 7 ); for ( auto p = r . first (); p != r . second (), ++ p ) cout << * p << '\\n' ; Obviously, these three interfaces are implemented by the same basic code. They are simply three ways of presenting the basic binary search algorithm to users, ranging from the simplest (\"make simple things simple!\") to returning complete, but not always needed, information (\"don't hide useful information\"). Naturally, crafting such a set of interfaces requires experience and domain knowledge. Note Do not simply craft the interface to match the first implementation and the first use case you think of. Once your first initial implementation is complete, review it; once you deploy it, mistakes will be hard to remedy. Note A need for efficiency does not imply a need for low-level code . High-level code does not imply slow or bloated. Note Things have costs. Don't be paranoid about costs (modern computers really are very fast), but have a rough idea of the order of magnitude of cost of what you use. For example, have a rough idea of the cost of a memory access, a function call, a string comparison, a system call, a disk access, and a message through a network. Note If you can only think of one implementation, you probably don't have something for which you can devise a stable interface. Maybe, it is just an implementation detail - not every piece of code needs a stable interface - but pause and consider. One question that can be useful is \"what interface would be needed if this operation should be implemented using multiple threads? be vectorized?\" Note This rule does not contradict the Don't optimize prematurely rule. It complements it encouraging developers enable later - appropriate and non-premature - optimization, if and where needed. Enforcement Tricky. Maybe looking for void* function arguments will find examples of interfaces that hinder later optimization. Per.10: \uc815\uc801 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc5d0 \uc758\uc9c0\ud558\ub77c Reason Type violations, weak types (e.g. void* s), and low-level code (e.g., manipulation of sequences as individual bytes) make the job of the optimizer much harder. Simple code often optimizes better than hand-crafted complex code. ??? Per.11: \uacc4\uc0b0\uc744 \uc2e4\ud589 \uc2dc\uac04\uc5d0\uc11c \ucef4\ud30c\uc77c \uc2dc\uac04\uc73c\ub85c \uc62e\uaca8\ub77c Reason To decrease code size and run time. To avoid data races by using constants. To catch errors at compile time (and thus eliminate the need for error-handling code). Example double square ( double d ) { return d * d ; } static double s2 = square ( 2 ); // old-style: dynamic initialization constexpr double ntimes ( double d , int n ) // assume 0 <= n { double m = 1 ; while ( n -- ) m *= d ; return m ; } constexpr double s3 { ntimes ( 2 , 3 )}; // modern-style: compile-time initialization Code like the initialization of s2 isn't uncommon, especially for initialization that's a bit more complicated than square() . However, compared to the initialization of s3 there are two problems: we suffer the overhead of a function call at run time s2 just might be accessed by another thread before the initialization happens. Note: you can't have a data race on a constant. Example Consider a popular technique for providing a handle for storing small objects in the handle itself and larger ones on the heap. constexpr int on_stack_max = 20 ; template < typename T > struct Scoped { // store a T in Scoped // ... T obj ; }; template < typename T > struct On_heap { // store a T on the free store // ... T * objp ; }; template < typename T > using Handle = typename std :: conditional < ( sizeof ( T ) <= on_stack_max ), Scoped < T > , // first alternative On_heap < T > // second alternative >:: type ; void f () { Handle < double > v1 ; // the double goes on the stack Handle < std :: array < double , 200 >> v2 ; // the array goes on the free store // ... } Assume that Scoped and On_heap provide compatible user interfaces. Here we compute the optimal type to use at compile time. There are similar techniques for selecting the optimal function to call. Note The ideal is {not} to try execute everything at compile time. Obviously, most computations depend on inputs so they can't be moved to compile time, but beyond that logical constraint is the fact that complex compile-time computation can seriously increase compile times and complicate debugging. It is even possible to slow down code by compile-time computation. This is admittedly rare, but by factoring out a general computation into separate optimal sub-calculations it is possible to render the instruction cache less effective. Enforcement Look for simple functions that might be constexpr (but are not). Look for functions called with all constant-expression arguments. Look for macros that could be constexpr. Per.12: \ubd88\ud544\uc694\ud55c \ubcc4\uce6d\uc744 \uc81c\uac70\ud558\ub77c ??? Per.13: \ubd88\ud544\uc694\ud55c \uac04\uc811 \uc811\uadfc(indirection)\uc744 \uc81c\uac70\ud558\ub77c ??? Per.14: \ud560\ub2f9\uacfc \ud574\uc81c\uc758 \uc218\ub97c \ucd5c\uc18c\ud654\ud558\ub77c ??? Per.15: \uc911\uc694 \ubd84\uae30\uc5d0\uc11c\ub294 \ud560\ub2f9\uc744 \ud558\uc9c0 \ub9c8\ub77c ??? Per.16: \uc555\ucd95\uc801\uc778 \uc790\ub8cc \uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ubcf4\ud1b5 \uc131\ub2a5\uc740 \uba54\ubaa8\ub9ac \uc811\uadfc\uc2dc\uac04\uc5d0 \ubc18\ube44\ub840\ud55c\ub2e4. ??? Per.17: \ube60\ub978 \ucc98\ub9ac\ub97c \uc694\uad6c\ud558\ub294 \uad6c\uc870\uccb4\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc4f0\uc774\ub294 \uba64\ubc84\ub97c \uba3c\uc800 \uc120\uc5b8\ud574\ub77c ??? Per.18: \uacf5\uac04\uc740 \uc2dc\uac04\uc774\ub2e4 Reason \ubcf4\ud1b5 \uc131\ub2a5\uc740 \uba54\ubaa8\ub9ac \uc811\uadfc\uc2dc\uac04\uc5d0 \ubc18\ube44\ub840\ud55c\ub2e4. ??? Per.19: \uc608\uce21\ud560 \uc218 \uc788\ub294 \uba54\ubaa8\ub9ac \uc811\uadfc\uc744 \ud574\ub77c Reason Performance is very sensitive to cache performance and cache algorithms favor simple (usually linear) access to adjacent data. Example int matrix [ rows ][ cols ]; // bad for ( int c = 0 ; c < cols ; ++ c ) for ( int r = 0 ; r < rows ; ++ r ) sum += matrix [ r ][ c ]; // good for ( int r = 0 ; r < rows ; ++ r ) for ( int c = 0 ; c < cols ; ++ c ) sum += matrix [ r ][ c ]; Per.30: \uc911\uc694 \uacbd\ub85c\uc5d0\uc11c \ubb38\ub9e5\uc804\ud658\uc744 \ud53c\ud558\ub77c ???","title":"Performance"},{"location":"Performance/#per","text":"??? should this section be in the main guide??? \uc774 \uc7a5\uc5d0\uc11c\ub294 \ub192\uc740 \uc131\ub2a5 \ub610\ub294 \uc9c0\uc5f0\uc774 \uac70\uc758 \uc5c6\uc5b4\uc57c \ud558\ub294 \uc0ac\ub78c\ub4e4\uc744 \uc704\ud55c \uaddc\uce59\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub2e4. \ub2e4\uc2dc \ub9d0\ud574 \uc608\uce21 \uac00\ub2a5\ud55c \uc9e7\uc740 \uc2dc\uac04 \uc548\uc5d0 \uc791\uc5c5\uc744 \uc644\ub8cc\ud558\uae30 \uc704\ud574 \uac00\ub2a5\ud55c \uc801\uc740 \uc2dc\uac04\uacfc \ub9ac\uc18c\uc2a4\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294\uc9c0\uc640 \uad00\ub828\ub41c \uaddc\uce59\uc774\ub2e4. \uaddc\uce59\ub4e4\uc740 (\ub300\ubd80\ubd84\uc758) \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ud544\uc694\ud55c \uac83\ubcf4\ub2e4 \ub354 \uc81c\ud55c\uc801\uc774\uace0 \uc5b4\ub5bb\uac8c \ubcf4\uba74 \uac70\uc2ac\ub9b4 \uc218\ub3c4 \uc788\ub294 \uac83\uc774\ub2e4. \uc77c\ubc18\uc801\uc778 \ucf54\ub4dc\uc5d0 \uc774\ub7ec\ud55c \uac83\ub4e4\uc744 \ub9f9\ubaa9\uc801\uc73c\ub85c \ub530\ub77c \ud558\uc9c0 \uc54a\uae30 \ubc14\ub780\ub2e4: \uc9c0\uc5f0\uc744 \uc5c6\uc560\ub294 \ubaa9\uc801\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud574\uc11c\ub294 \uad49\uc7a5\ud55c \ub178\ub825\uc774 \ud544\uc694\ud558\ub2e4. \uc131\ub2a5 \uaddc\uce59 \uc694\uc57d: Per.1: Don't optimize without reason Per.2: Don't optimize prematurely Per.3: Don't optimize something that's not performance critical Per.4: Don't assume that complicated code is necessarily faster than simple code Per.5: Don't assume that low-level code is necessarily faster than high-level code Per.6: Don't make claims about performance without measurements Per.7: Design to enable optimization Per.10: Rely on the static type system Per.11: Move computation from run time to compile time Per.12: Eliminate redundant aliases Per.13: Eliminate redundant indirections Per.14: Minimize the number of allocations and deallocations Per.15: Do not allocate on a critical branch Per.16: Use compact data structures Per.17: Declare the most used member of a time-critical struct first Per.18: Space is time Per.19: Access memory predictably Per.30: Avoid context switches on the critical path","title":"Per: \uc131\ub2a5"},{"location":"Performance/#per1","text":"","title":"Per.1: \uc774\uc720\uc5c6\uc774 \ucd5c\uc801\ud654\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Performance/#reason","text":"If there is no need for optimization, the main result of the effort will be more errors and higher maintenance costs.","title":"Reason"},{"location":"Performance/#note","text":"Some people optimize out of habit or because it's fun. ???","title":"Note"},{"location":"Performance/#per2","text":"","title":"Per.2: \uc131\uae09\ud558\uac8c \ucd5c\uc801\ud654\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Performance/#reason_1","text":"Elaborately optimized code is usually larger and harder to change than unoptimized code. ???","title":"Reason"},{"location":"Performance/#per3","text":"","title":"Per.3: \uc131\ub2a5 \ud06c\ub9ac\ud2f0\uceec\ud558\uc9c0 \uc54a\ub294 \uacf3\uc5d0\ub294 \ucd5c\uc801\ud654\ub97c \ud558\uc9c0 \ub9c8\ub77c"},{"location":"Performance/#reason_2","text":"Optimizing a non-performance-critical part of a program has no effect on system performance.","title":"Reason"},{"location":"Performance/#note_1","text":"If your program spends most of its time waiting for the web or for a human, optimization of in-memory computation is probably useless. Put another way: If your program spends 4% of its processing time doing computation A and 40% of its time doing computation B, a 50% improvement on A is only as impactful as a 5% improvement on B. (If you don't even know how much time is spent on A or B, see Per.1 and Per.2 .)","title":"Note"},{"location":"Performance/#per4","text":"","title":"Per.4: \ubcf5\uc7a1\ud55c \ucf54\ub4dc\uac00 \uac04\ub2e8\ud55c \ucf54\ub4dc\ubcf4\ub2e4 \ube60\ub974\ub2e4\uace0 \ucd94\uce21\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Performance/#reason_3","text":"Simple code can be very fast. Optimizers sometimes do marvels with simple code","title":"Reason"},{"location":"Performance/#example-good","text":"// clear expression of intent, fast execution vector < uint8_t > v ( 100000 ); for ( auto & c : v ) c = ~ c ;","title":"Example, good"},{"location":"Performance/#example-bad","text":"// intended to be faster, but is actually slower vector < uint8_t > v ( 100000 ); for ( size_t i = 0 ; i < v . size (); i += sizeof ( uint64_t )) { uint64_t & quad_word = * reinterpret_cast < uint64_t *> ( & v [ i ]); quad_word = ~ quad_word ; }","title":"Example, bad"},{"location":"Performance/#note_2","text":"??? ???","title":"Note"},{"location":"Performance/#per5","text":"","title":"Per.5: \uc800\uc218\uc900 \ucf54\ub4dc\uac00 \uace0\uc218\uc900 \ucf54\ub4dc\ubcf4\ub2e4 \ud544\uc5f0\uc801\uc73c\ub85c \ube60\ub97c \uac83\uc774\ub77c\uace0 \ucd94\uce21\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Performance/#reason_4","text":"Low-level code sometimes inhibits optimizations. Optimizers sometimes do marvels with high-level code.","title":"Reason"},{"location":"Performance/#note_3","text":"??? ???","title":"Note"},{"location":"Performance/#per6","text":"","title":"Per.6: \uce21\uc815\uc5c6\uc774 \uc131\ub2a5 \uac1c\uc120\uc744 \uc8fc\uc7a5\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Performance/#reason_5","text":"The field of performance is littered with myth and bogus folklore. Modern hardware and optimizers defy naive assumptions; even experts are regularly surprised.","title":"Reason"},{"location":"Performance/#note_4","text":"Getting good performance measurements can be hard and require specialized tools.","title":"Note"},{"location":"Performance/#note_5","text":"A few simple microbenchmarks using Unix time or the standard-library <chrono> can help dispel the most obvious myths. If you can't measure your complete system accurately, at least try to measure a few of your key operations and algorithms. A profiler can help tell you which parts of your system are performance critical. Often, you will be surprised. ???","title":"Note"},{"location":"Performance/#per7","text":"","title":"Per.7: \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud558\uac8c \uc124\uacc4\ud558\ub77c"},{"location":"Performance/#reason_6","text":"Because we often need to optimize the initial design. Because a design that ignore the possibility of later improvement is hard to change.","title":"Reason"},{"location":"Performance/#example","text":"From the C (and C++) standard: void qsort ( void * base , size_t num , size_t size , int ( * compar )( const void * , const void * )); When did you even want to sort memory? Really, we sort sequences of elements, typically stored in containers. A call to qsort throws away much useful information (e.g., the element type), forces the user to repeat information already known (e.g., the element size), and forces the user to write extra code (e.g., a function to compare double s). This implies added work for the programmer, is error-prone, and deprives the compiler of information needed for optimization. double data [ 100 ]; // ... fill a ... // 100 chunks of memory of sizeof(double) starting at // address data using the order defined by compare_doubles qsort ( data , 100 , sizeof ( double ), compare_doubles ); From the point of view of interface design is that qsort throws away useful information. We can do better (in C++98) template < typename Iter > void sort ( Iter b , Iter e ); // sort [b:e) sort ( data , data + 100 ); Here, we use the compiler's knowledge about the size of the array, the type of elements, and how to compare double s. With C++11 plus concepts , we can do better still // Sortable specifies that c must be a // random-access sequence of elements comparable with < void sort ( Sortable & c ); sort ( c ); The key is to pass sufficient information for a good implementation to be chosen. In this, the sort interfaces shown here still have a weakness: They implicitly rely on the element type having less-than ( < ) defined. To complete the interface, we need a second version that accepts a comparison criteria: // compare elements of c using p void sort ( Sortable & c , Predicate < Value_type < Sortable >> p ); The standard-library specification of sort offers those two versions, but the semantics is expressed in English rather than code using concepts.","title":"Example"},{"location":"Performance/#note_6","text":"Premature optimization is said to be the root of all evil , but that's not a reason to despise performance. It is never premature to consider what makes a design amenable to improvement, and improved performance is a commonly desired improvement. Aim to build a set of habits that by default results in efficient, maintainable, and optimizable code. In particular, when you write a function that is not a one-off implementation detail, consider Information passing: Prefer clean interfaces carrying sufficient information for later improvement of implementation. Note that information flows into and out of an implementation through the interfaces we provide. Compact data: By default, use compact data , such as std::vector and access it in a systematic fashion . If you think you need a linked structure, try to craft the interface so that this structure isn't seen by users. Function argument passing and return: Distinguish between mutable and non-mutable data. Don't impose a resource management burden on your users. Don't impose spurious run-time indirections on your users. Use conventional ways of passing information through an interface; unconventional and/or \"optimized\" ways of passing data can seriously complicate later reimplementation. Abstraction: Don't overgeneralize; a design that tries to cater for every possible use (and misuse) and defers every design decision for later (using compile-time or run-time indirections) is usually a complicated, bloated, hard-to-understand mess. Generalize from concrete examples, preserving performance as we generalize. Do not generalize based on mere speculation about future needs. The ideal is zero-overhead generalization. Libraries: Use libraries with good interfaces. If no library is available build one yourself and imitate the interface style from a good library. The standard library is a good first place to look for inspiration. Isolation: Isolate your code from messy and/or old-style code by providing an interface of your choosing to it. This is sometimes called \"providing a wrapper\" for the useful/necessary but messy code. Don't let bad designs \"bleed into\" your code.","title":"Note"},{"location":"Performance/#example_1","text":"Consider: template < class ForwardIterator , class T > bool binary_search ( ForwardIterator first , ForwardIterator last , const T & val ); binary_search(begin(c), end(c), 7) will tell you whether 7 is in c or not. However, it will not tell you where that 7 is or whether there are more than one 7 . Sometimes, just passing the minimal amount of information back (here, true or false ) is sufficient, but a good interface passes needed information back to the caller. Therefore, the standard library also offers template < class ForwardIterator , class T > ForwardIterator lower_bound ( ForwardIterator first , ForwardIterator last , const T & val ); lower_bound returns an iterator to the first match if any, otherwise to the first element greater than val , or last if no such element is found. However, lower_bound still doesn't return enough information for all uses, so the standard library also offers template < class ForwardIterator , class T > pair < ForwardIterator , ForwardIterator > equal_range ( ForwardIterator first , ForwardIterator last , const T & val ); equal_range returns a pair of iterators specifying the first and one beyond last match. auto r = equal_range ( begin ( c ), end ( c ), 7 ); for ( auto p = r . first (); p != r . second (), ++ p ) cout << * p << '\\n' ; Obviously, these three interfaces are implemented by the same basic code. They are simply three ways of presenting the basic binary search algorithm to users, ranging from the simplest (\"make simple things simple!\") to returning complete, but not always needed, information (\"don't hide useful information\"). Naturally, crafting such a set of interfaces requires experience and domain knowledge.","title":"Example"},{"location":"Performance/#note_7","text":"Do not simply craft the interface to match the first implementation and the first use case you think of. Once your first initial implementation is complete, review it; once you deploy it, mistakes will be hard to remedy.","title":"Note"},{"location":"Performance/#note_8","text":"A need for efficiency does not imply a need for low-level code . High-level code does not imply slow or bloated.","title":"Note"},{"location":"Performance/#note_9","text":"Things have costs. Don't be paranoid about costs (modern computers really are very fast), but have a rough idea of the order of magnitude of cost of what you use. For example, have a rough idea of the cost of a memory access, a function call, a string comparison, a system call, a disk access, and a message through a network.","title":"Note"},{"location":"Performance/#note_10","text":"If you can only think of one implementation, you probably don't have something for which you can devise a stable interface. Maybe, it is just an implementation detail - not every piece of code needs a stable interface - but pause and consider. One question that can be useful is \"what interface would be needed if this operation should be implemented using multiple threads? be vectorized?\"","title":"Note"},{"location":"Performance/#note_11","text":"This rule does not contradict the Don't optimize prematurely rule. It complements it encouraging developers enable later - appropriate and non-premature - optimization, if and where needed.","title":"Note"},{"location":"Performance/#enforcement","text":"Tricky. Maybe looking for void* function arguments will find examples of interfaces that hinder later optimization.","title":"Enforcement"},{"location":"Performance/#per10","text":"","title":"Per.10: \uc815\uc801 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc5d0 \uc758\uc9c0\ud558\ub77c"},{"location":"Performance/#reason_7","text":"Type violations, weak types (e.g. void* s), and low-level code (e.g., manipulation of sequences as individual bytes) make the job of the optimizer much harder. Simple code often optimizes better than hand-crafted complex code. ???","title":"Reason"},{"location":"Performance/#per11","text":"","title":"Per.11: \uacc4\uc0b0\uc744 \uc2e4\ud589 \uc2dc\uac04\uc5d0\uc11c \ucef4\ud30c\uc77c \uc2dc\uac04\uc73c\ub85c \uc62e\uaca8\ub77c"},{"location":"Performance/#reason_8","text":"To decrease code size and run time. To avoid data races by using constants. To catch errors at compile time (and thus eliminate the need for error-handling code).","title":"Reason"},{"location":"Performance/#example_2","text":"double square ( double d ) { return d * d ; } static double s2 = square ( 2 ); // old-style: dynamic initialization constexpr double ntimes ( double d , int n ) // assume 0 <= n { double m = 1 ; while ( n -- ) m *= d ; return m ; } constexpr double s3 { ntimes ( 2 , 3 )}; // modern-style: compile-time initialization Code like the initialization of s2 isn't uncommon, especially for initialization that's a bit more complicated than square() . However, compared to the initialization of s3 there are two problems: we suffer the overhead of a function call at run time s2 just might be accessed by another thread before the initialization happens. Note: you can't have a data race on a constant.","title":"Example"},{"location":"Performance/#example_3","text":"Consider a popular technique for providing a handle for storing small objects in the handle itself and larger ones on the heap. constexpr int on_stack_max = 20 ; template < typename T > struct Scoped { // store a T in Scoped // ... T obj ; }; template < typename T > struct On_heap { // store a T on the free store // ... T * objp ; }; template < typename T > using Handle = typename std :: conditional < ( sizeof ( T ) <= on_stack_max ), Scoped < T > , // first alternative On_heap < T > // second alternative >:: type ; void f () { Handle < double > v1 ; // the double goes on the stack Handle < std :: array < double , 200 >> v2 ; // the array goes on the free store // ... } Assume that Scoped and On_heap provide compatible user interfaces. Here we compute the optimal type to use at compile time. There are similar techniques for selecting the optimal function to call.","title":"Example"},{"location":"Performance/#note_12","text":"The ideal is {not} to try execute everything at compile time. Obviously, most computations depend on inputs so they can't be moved to compile time, but beyond that logical constraint is the fact that complex compile-time computation can seriously increase compile times and complicate debugging. It is even possible to slow down code by compile-time computation. This is admittedly rare, but by factoring out a general computation into separate optimal sub-calculations it is possible to render the instruction cache less effective.","title":"Note"},{"location":"Performance/#enforcement_1","text":"Look for simple functions that might be constexpr (but are not). Look for functions called with all constant-expression arguments. Look for macros that could be constexpr.","title":"Enforcement"},{"location":"Performance/#per12","text":"???","title":"Per.12: \ubd88\ud544\uc694\ud55c \ubcc4\uce6d\uc744 \uc81c\uac70\ud558\ub77c"},{"location":"Performance/#per13-indirection","text":"???","title":"Per.13: \ubd88\ud544\uc694\ud55c \uac04\uc811 \uc811\uadfc(indirection)\uc744 \uc81c\uac70\ud558\ub77c"},{"location":"Performance/#per14","text":"???","title":"Per.14: \ud560\ub2f9\uacfc \ud574\uc81c\uc758 \uc218\ub97c \ucd5c\uc18c\ud654\ud558\ub77c"},{"location":"Performance/#per15","text":"???","title":"Per.15: \uc911\uc694 \ubd84\uae30\uc5d0\uc11c\ub294 \ud560\ub2f9\uc744 \ud558\uc9c0 \ub9c8\ub77c"},{"location":"Performance/#per16","text":"","title":"Per.16: \uc555\ucd95\uc801\uc778 \uc790\ub8cc \uad6c\uc870\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Performance/#reason_9","text":"\ubcf4\ud1b5 \uc131\ub2a5\uc740 \uba54\ubaa8\ub9ac \uc811\uadfc\uc2dc\uac04\uc5d0 \ubc18\ube44\ub840\ud55c\ub2e4. ???","title":"Reason"},{"location":"Performance/#per17","text":"???","title":"Per.17: \ube60\ub978 \ucc98\ub9ac\ub97c \uc694\uad6c\ud558\ub294 \uad6c\uc870\uccb4\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \uc4f0\uc774\ub294 \uba64\ubc84\ub97c \uba3c\uc800 \uc120\uc5b8\ud574\ub77c"},{"location":"Performance/#per18","text":"","title":"Per.18: \uacf5\uac04\uc740 \uc2dc\uac04\uc774\ub2e4"},{"location":"Performance/#reason_10","text":"\ubcf4\ud1b5 \uc131\ub2a5\uc740 \uba54\ubaa8\ub9ac \uc811\uadfc\uc2dc\uac04\uc5d0 \ubc18\ube44\ub840\ud55c\ub2e4. ???","title":"Reason"},{"location":"Performance/#per19","text":"","title":"Per.19: \uc608\uce21\ud560 \uc218 \uc788\ub294 \uba54\ubaa8\ub9ac \uc811\uadfc\uc744 \ud574\ub77c"},{"location":"Performance/#reason_11","text":"Performance is very sensitive to cache performance and cache algorithms favor simple (usually linear) access to adjacent data.","title":"Reason"},{"location":"Performance/#example_4","text":"int matrix [ rows ][ cols ]; // bad for ( int c = 0 ; c < cols ; ++ c ) for ( int r = 0 ; r < rows ; ++ r ) sum += matrix [ r ][ c ]; // good for ( int r = 0 ; r < rows ; ++ r ) for ( int c = 0 ; c < cols ; ++ c ) sum += matrix [ r ][ c ];","title":"Example"},{"location":"Performance/#per30","text":"???","title":"Per.30: \uc911\uc694 \uacbd\ub85c\uc5d0\uc11c \ubb38\ub9e5\uc804\ud658\uc744 \ud53c\ud558\ub77c"},{"location":"Philosophy/","text":"P: \ucca0\ud559 \uc774 \uc7a5\uc758 \uaddc\uce59\ub4e4\uc740 \ub9e4\uc6b0 \uc77c\ubc18\uc801\uc774\ub2e4. \ucca0\ud559 \uaddc\uce59 \uc694\uc57d: P.1: \uc544\uc774\ub514\uc5b4\ub97c \uc9c1\uc811 \ucf54\ub4dc\ub85c \ud45c\ud604\ud558\ub77c P.2: ISO \ud45c\uc900 C++\ub85c \uc791\uc131\ud558\ub77c P.3: \uc758\ub3c4\ub97c \ud45c\ud604\ud558\ub77c P.4: \uc774\uc0c1\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc740 \uc815\uc801\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\ud574\uc57c \ud55c\ub2e4 P.5: \ub7f0\ud0c0\uc784 \uac80\uc0ac\ubcf4\ub2e4\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc0ac\ub97c \uc120\ud638\ud558\ub77c P.6: \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc5c6\ub2e4\uba74 \ub7f0\ud0c0\uc784\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4 P.7: \ub7f0\ud0c0\uc784 \uc624\ub958\ub294 \ucd08\uae30\uc5d0 \uc7a1\uc544\ub77c P.8: \ub9ac\uc18c\uc2a4\uac00 \uc0c8\ub3c4\ub85d \ud558\uc9c0 \ub9c8\ub77c P.9: \uc2dc\uac04\uc774\ub098 \uacf5\uac04\uc744 \ub0ad\ube44\ud558\uc9c0 \ub9c8\ub77c P.10: \ubcc0\uacbd \uac00\ub2a5\ud55c \ub370\uc774\ud130\ubcf4\ub2e4 \ubcc0\uacbd \ubd88\uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \ub354 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub77c P.11: \ubcf5\uc7a1\ud55c \uc0dd\uc131\uacfc\uc815\uc740 \ucea1\uc290\ud558\ub77c P.12: \uc9c0\uc6d0 \ub3c4\uad6c\ub97c \uc801\uc808\ud788 \ud65c\uc6a9\ud558\ub77c P.13: \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc801\uc808\ud788 \ud65c\uc6a9\ud558\ub77c \ucca0\ud559\uc801 \uaddc\uce59\uc740 \ubcf4\ud1b5 \uae30\uacc4\uc801\uc73c\ub85c \uac80\uc0ac\ud560 \uc218 \uc5c6\ub2e4 . \uadf8\ub7ec\ub098 \ucca0\ud559\uc801\uc778 \ud14c\ub9c8\ub97c \ubc18\uc601\ud558\ub294 \uac1c\ubcc4\uc801\uc778 \uaddc\uce59\ub4e4\uc740 \uac80\uc0ac\ud560 \uc218 \ud558\ub2e4. \ucca0\ud559\uc801\uc778 \uae30\ucd08\uac00 \uc5c6\uc774 \uad6c\uccb4\uc801\uc774\uace0/\ud2b9\uc218\ud558\uace0/\uac80\uc0ac \uac00\ub2a5\ud55c \uaddc\uce59\uc740 \uadfc\uac70\uac00 \ubd80\uc871\ud558\ub2e4. P.1: \uc544\uc774\ub514\uc5b4\ub97c \uc9c1\uc811 \ucf54\ub4dc\ub85c \ud45c\ud604\ud558\ub77c Reason \ucef4\ud30c\uc77c\ub7ec\ub294 \uc8fc\uc11d\ubb38(\ub610\ub294 \ub514\uc790\uc778 \ubb38\uc11c)\uc744 \uc77d\uc9c0 \uc54a\ub294\ub2e4. \uc218\ub9ce\uc740 \ud504\ub85c\uadf8\ub798\uba38 \ub610\ud55c \uc8fc\uc11d\uc744 (\uc77c\uad00\ub418\uac8c) \uc77d\uc9c0 \uc54a\ub294\ub2e4. \ucf54\ub4dc\ub85c \ud45c\ud604\ub41c \ub0b4\uc6a9\uc774\ub77c\uba74 \uadf8 \uc758\ubbf8(\uc758\ub3c4)\ub97c \uc774\ubbf8 \uc815\uc758\ud588\uc744 \uac83\uc774\uba70 (\ub300\uccb4\ub85c) \ucef4\ud30c\uc77c\ub7ec\ub098 \ub2e4\ub978 \ud234\ub85c \uac80\uc0ac\ud560 \uc218 \uc788\ub2e4. Example class Date { // ... public : Month month () const ; // do int month (); // don't // ... }; \uccab\ubc88\uc9f8 month \ud568\uc218\ub294 \uba85\ud655\ud788 Month \ub97c \ubc18\ud658\ud558\ub3c4\ub85d \uc120\uc5b8\ub418\uc5b4 \uc788\uc73c\uba70, Date \uac1c\uccb4\uc758 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc744 \uac83\ucc98\ub7fc \ubcf4\uc778\ub2e4. \ub450\ubc88\uc9f8 \ubc84\uc804\uc740 \ucf54\ub4dc\ub97c \uc77d\ub294 \uac1c\ubc1c\uc790\ub4e4\uc744 \uace0\ubbfc\ud558\uac8c \ub9cc\ub4e4\uba70, \ubc1c\uacac\ud558\uae30 \uc5b4\ub824\uc6b4 \ubc84\uadf8\ub97c \uc720\ubc1c\ud560 \uac00\ub2a5\uc131\uc774 \uc788\ub2e4. Example; bad \uc544\ub798\uc758 \ubc18\ubcf5\ubb38\uc740 std::find \ub97c \uc774\uc6a9\ud574 \ud45c\ud604 \uac00\ub2a5\ud558\ub2e4. void f ( vector < string >& v ) { string val ; cin >> val ; // ... int index = - 1 ; // bad, plus should use gsl::index for ( int i = 0 ; i < v . size (); ++ i ) { if ( v [ i ] == val ) { index = i ; break ; } } // ... } Example; good \uc758\ub3c4\ub97c \ub354 \uba85\ud655\ud558\uac8c \ub4dc\ub7ec\ub0b4\uae30 \uc704\ud574 \uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \ubc14\uafc0 \uc218 \uc788\ub2e4: void f ( vector < string >& v ) { string val ; cin >> val ; // ... auto p = find ( begin ( v ), end ( v ), val ); // better // ... } \uc5b8\uc5b4\uac00 \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\uc744 \uc9c1\uc811 \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4 \uc798 \uc124\uacc4\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uadf8 \uc758\ub3c4(\uc5b4\ub5bb\uac8c \uc218\ud589\ub418\ub294\uc9c0\ubcf4\ub2e4 \ubb34\uc5c7\uc774 \uc218\ud589\ub418\ub294\uc9c0\ub97c) \ud45c\ud604\ud558\ub294 \uac83\uc774 \ud6e8\uc52c \ub0ab\ub2e4. C++ \ud504\ub85c\uadf8\ub798\uba38\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uae30\ubcf8 \ub0b4\uc6a9\uc744 \ubc18\ub4dc\uc2dc \uc774\ud574\ud558\uace0 \uc62c\ubc14\ub978 \uacf3\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc5b4\ub5a4 \ud504\ub85c\uadf8\ub798\uba38\ub4e0 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uae30\ubc18\ud558\uace0 \uc788\ub294 \ud575\uc2ec \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uae30\ubcf8 \ub0b4\uc6a9\uc744 \ubc18\ub4dc\uc2dc \uc774\ud574\ud558\uace0 \uc788\uc5b4\uc57c \ud558\uba70, \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud560 \uc904 \uc54c\uc544\uc57c \ud55c\ub2e4. \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc0ac\uc6a9\ud558\ub294 \ud504\ub85c\uadf8\ub798\uba38\ub294 \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc744 \ubc18\ub4dc\uc2dc \uc54c\uc544\uc57c \ud558\uace0 \uc801\uc808\ud788 \uc0ac\uc6a9\ud560 \uc904 \uc54c\uc544\uc57c \ud55c\ub2e4. Example change_speed ( double s ); // bad: what does s signify? // ... change_speed ( 2.3 ); \ub354 \uc88b\uc740 \uc811\uadfc\ubc95\uc740 double \uc758 \uc758\ubbf8\uc640 \ub2e8\uc704(\uc0c8\ub85c\uc6b4 \uc18d\ub3c4 \uac12\uc778\uc9c0, \ud639\uc740 \uc774\uc804 \uc18d\ub3c4\uc5d0\uc11c\uc758 \uc99d\ubd84\uc744 \uc758\ubbf8\ud558\ub294\uc9c0)\ub97c \uba85\ud655\ud788 \ud558\ub294 \uac83\uc774\ub2e4: change_speed ( Speed s ); // better: the meaning of s is specified // ... change_speed ( 2.3 ); // error: no unit change_speed ( 23 m / 10 s ); // meters per second (\ub2e8\uc704\uac00 \uc5c6\ub294) \ub2e8\uc21c\ud55c double \uc744 \ubcc0\ud654\ub7c9(\uc18d\ub3c4\uc758 \ucc28)\uc73c\ub85c \ubc1b\uc544\ub4e4\uc77c \uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, \uc544\ubb34\ub798\ub3c4 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4. \uc18d\ub3c4\uc640 \ubcc0\ud654\ub7c9 \ub458 \ub2e4 \ud544\uc694\ud558\ub2e4\uba74, Delta \ud0c0\uc785\uc744 \uc815\uc758\ud574\uc57c \ud560 \uac83\uc774\ub2e4. Enforcement \uc77c\ubc18\uc801\uc73c\ub85c \ub9e4\uc6b0 \uc5b4\ub835\ub2e4. \uc77c\uad00\uc131 \uc788\uac8c const \ub97c \uc0ac\uc6a9\ud558\ub77c (\uba64\ubc84 \ud568\uc218\uac00 \uac1c\uccb4\ub97c \ubcc0\uacbd\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub77c. \uadf8\ub9ac\uace0 \ud3ec\uc778\ud130\ub098 \ub808\ud37c\ub7f0\uc2a4\ub85c \ub118\uc5b4\uc628 \uc778\uc790\ub97c \ubcc0\uacbd\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub77c) \ud0c0\uc785 \ubcc0\ud658\uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud558\ub77c (\ud0c0\uc785 \ubcc0\ud658\uc740 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc744 \ubb34\ub825\ud654\uc2dc\ud0a8\ub2e4) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud749\ub0b4\ub0b4\ub294 \ucf54\ub4dc\ub97c \ucc3e\uc544\ub77c (\ucc3e\uae30 \uc5b4\ub835\ub2e4) P.2: ISO \ud45c\uc900 C++\ub85c \uc791\uc131\ud558\ub77c Reason \uc774 \ubb38\uc11c\ub294 ISO \ud45c\uc900 C++\ub85c \uc791\uc131\ud558\ub294 \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc744 \ubaa8\uc544\ub454 \uac83\uc774\ub2e4. Note \uc2dc\uc2a4\ud15c \ub9ac\uc18c\uc2a4\uc5d0 \uc811\uadfc\ud558\ub294 \ub4f1\uc758 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uae30 \uc704\ud574\uc11c \ud655\uc7a5 \uae30\ub2a5\uc774 \ud544\uc694\ud560 \uc218 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 \ud544\uc694\ud55c \ud655\uc7a5 \uae30\ub2a5\uc744 \uc9c0\uc5ed\uc801\uc73c\ub85c \uc81c\ud55c\ud574\uc11c \uc0ac\uc6a9\ud558\uace0, \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc544\ub2cc \ub2e4\ub978 \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ud65c\uc6a9\ud574 \uad00\ub9ac\ud558\ub77c. If possible, build interfaces that encapsulate the extensions so they can be turned off or compiled away on systems that do not support those extensions. Extensions often do not have rigorously defined semantics. Even extensions that are common and implemented by multiple compilers may have slightly different behaviors and edge case behavior as a direct result of not having a rigorous standard definition. With sufficient use of any such extension, expected portability will be impacted. Note Using valid ISO C++ does not guarantee portability (let alone correctness). Avoid dependence on undefined behavior (e.g., undefined order of evaluation ) and be aware of constructs with implementation defined meaning (e.g., sizeof(int) ). Note \ud45c\uc900 C++ \uc5b8\uc5b4\uc758 \uae30\ub2a5\uc774\ub098 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc870\ucc28 \uc81c\ud55c\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub294 \ud658\uacbd\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74, \ud56d\uacf5\uae30 \uc81c\uc5b4 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \ud45c\uc900\uc5d0\ub294 \ub3d9\uc801 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud53c\ud560 \uac83\uc744 \uc8fc\ubb38\ud558\uace0 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 \ud2b9\uc815 \ud658\uacbd\uc5d0 \ub9de\ucd98 \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ud655\uc7a5\ud574\uc11c \uc0ac\uc6a9\ud558\uac70\ub098 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \uae30\ub2a5\ub4e4\uc744 \uad00\ub9ac\ud558\ub77c. Enforcement \ud655\uc7a5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub3c4\ub85d \uae30\ub2a5 \uc124\uc815\uc774 \uac00\ub2a5\ud55c \ucd5c\uc2e0 C++ \ucef4\ud30c\uc77c\ub7ec(C++17, C++14 \ud639\uc740 C++11)\ub97c \uc0ac\uc6a9\ud558\ub77c. P.3: \uc758\ub3c4\ub97c \ud45c\ud604\ud558\ub77c Reason (\uc774\ub984\uc774\ub098 \uc8fc\uc11d\uc744 \ud1b5\ud574) \ucf54\ub4dc\uc758 \uc758\ub3c4\ub97c \uc81c\ub300\ub85c \ub4dc\ub7ec\ub0b4\uc9c0 \ubabb\ud55c\ub2e4\uba74, \ucf54\ub4dc\uac00 \uc81c\ub300\ub85c \uc218\ud589\ub418\ub294\uc9c0\uc870\ucc28 \ub9d0\ud560 \uc218 \uc5c6\uc744 \uac83\uc774\ub2e4. Example gsl :: index i = 0 ; while ( i < v . size ()) { // ... do something with v[i] ... } \uc704 \ucf54\ub4dc\ub9cc \ubcf4\uc558\uc744 \ub54c\ub294 v \uc758 \uac01 \uc694\uc18c\ub97c \uc21c\ud68c\ud558\uaca0\ub2e4\ub294 \uc758\ub3c4\uac00 \ub4dc\ub7ec\ub098\uc9c0 \uc54a\ub294\ub2e4. \uc778\ub371\uc2a4\uc5d0 \ub300\ud55c \uc138\ubd80\uc801\uc778 \uad6c\ud604\ubd80\uac00 \ub178\ucd9c\ub41c\ub2e4 (\ub530\ub77c\uc11c \uc798\ubabb \uc0ac\uc6a9\ub420 \uc9c0\ub3c4 \ubaa8\ub978\ub2e4). \uadf8\ub9ac\uace0 \uc758\ub3c4\uc801\uc778\uc9c0\ub294 \uc54c \uc218 \uc5c6\uc9c0\ub9cc i \ub97c \ubc18\ubcf5\ubb38 \ubc16\uc5d0\uc11c\ub3c4 \uc5ec\uc804\ud788 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc774 \ubd80\ubd84\uc758 \ucf54\ub4dc\ub9cc \uc77d\uc5b4\uc11c\ub294 \uadf8 \uc758\ub3c4\ub97c \uc54c\uc9c0 \ubabb\ud55c\ub2e4. \uac1c\uc120: for ( const auto & x : v ) { /* do something with the value of x */ } \uc704 \ucf54\ub4dc\ub97c \ubcf4\uba74 v\uc5d0 \ub300\ud55c \uc21c\ud68c \uba54\ucee4\ub2c8\uc998\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc5b8\uae09\ud558\uc9c0 \uc54a\ub294\ub2e4. \uadf8\ub9ac\uace0 \uc21c\ud68c\ud558\ub294 \ub3d9\uc548 v\uc758 \uac01 const \uc694\uc18c\uc758 \ub808\ud37c\ub7f0\uc2a4\uc5d0 \ub300\ud574 \ub3d9\uc791\uc774 \uc77c\uc5b4\ub098\uae30 \ub54c\ubb38\uc5d0 \uac01 \uc694\uc18c\ub97c \uc218\uc815\ud560 \uc218 \uc5c6\ub2e4. \ub9cc\uc57d \uc218\uc815\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\ub77c\uba74 \uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc57c \ud55c\ub2e4. for ( auto & x : v ) { /* modify x */ } For more details about for-statements, see ES.71 . Sometimes better still, use a named algorithm. This example uses the for_each from the Ranges TS because it directly expresses the intent: for_each ( v , []( int x ) { /* do something with the value of x */ }); for_each ( par , v , []( int x ) { /* do something with the value of x */ }); \ub9c8\uc9c0\ub9c9 \uc608\ub294 v \uc758 \uac01 \uc694\uc18c\uac00 \ucc98\ub9ac\ub418\ub294 \uc21c\uc11c\uc5d0 \uad00\uc2ec\uc774 \uc5c6\ub2e4\ub294 \uc810\uc744 \uba85\ud655\ud788 \ud558\uace0 \uc788\ub2e4. \ud504\ub85c\uadf8\ub798\uba38\ub77c\uba74 \ub2e4\uc74c\uc5d0 \uc775\uc219\ud574\uc838\uc57c \ud55c\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac ISO C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud604\uc7ac \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc0ac\uc6a9\ub418\uace0 \uc788\ub294 \ubaa8\ub4e0 \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4 Note \uacf5\uc2dd \ub300\uc548: \uc5b4\ub5bb\uac8c \uc791\uc5c5\uc774 \uc218\ud589\ub418\ub294\uc9c0\ub97c \ub9d0\ud558\uc9c0 \ub9d0\uace0 \ubb34\uc5c7\uc774 \uc218\ud589\ub420\uc9c0\ub97c \ub9d0\ud558\ub77c. Note \uc5b8\uc5b4\uc758 \uae30\ubcf8 \uc694\uc18c\ub294 \ub2e4\ub978 \ubb34\uc5c7\ubcf4\ub2e4\ub3c4 \uadf8 \uc758\ub3c4\ub97c \ub354 \uc798 \ud45c\ud604\ud55c\ub2e4. Example 2\uac1c\uc758 int \uac12\uc73c\ub85c 2\ucc28\uc6d0 \uc88c\ud45c\ub97c \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \uc368\ub77c: draw_line ( int , int , int , int ); // obscure draw_line ( Point , Point ); // clearer Enforcement \uc880 \ub354 \ub098\uc740 \ub300\uc548\uc774 \uc788\ub294 \ubc94\uc6a9\uc801\uc778 \ud328\ud134\uc744 \ucc3e\uc544\ubcf4\ub77c. \ub2e8\uc21c\ud55c for \ubb38 \ub300 \ubc94\uc704 \uae30\ubc18 for \ubb38 f(T*, int) \uc778\ud130\ud398\uc774\uc2a4 \ub300 f(span<T>) \uc778\ud130\ud398\uc774\uc2a4 \uc544\uc8fc \ud070 \uc2a4\ucf54\ud504\uc5d0\uc11c \uc21c\ud68c\ud558\ub294 \ubcc0\uc218 \uadf8\ub300\ub85c \ub178\ucd9c\ub41c new \uc640 delete \uc778\uc790\ub85c \ub0b4\uc7a5 \ud0c0\uc785\uc744 \uc5ec\ub7ec\uac1c \uac16\ub294 \ud568\uc218 There is a huge scope for cleverness and semi-automated program transformation. P.4: \uc774\uc0c1\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc740 \uc815\uc801\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\ud574\uc57c \ud55c\ub2e4 Reason \uc774\uc0c1\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc740 \uc644\uc804\ud788 \uc815\uc801\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \ubd88\ud589\ud558\uac8c\ub3c4 \ubd88\uac00\ub2a5\ud558\ub2e4. \uc65c\ub0d0\ud558\uba74 \ub2e4\uc74c\ucc98\ub7fc \ubb38\uc81c\uac00 \ub418\ub294 \uc601\uc5ed\ub4e4\uc774 \uc874\uc7ac\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uacf5\uc6a9\uccb4 \ud0c0\uc785 \ubcc0\ud658 \ubc30\uc5f4 \ubd95\uad34 \ubc94\uc704 \uc624\ub958 \ucd95\uc18c \ud0c0\uc785 \ubcc0\ud658 Note \uc774\ub7ec\ud55c \uc601\uc5ed\ub4e4\uc740 \uc2ec\uac01\ud55c \ubb38\uc81c\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. (\uc608\ub97c \ub4e4\uc5b4, \ud06c\ub798\uc2dc\uc640 \ubcf4\uc548 \uc704\ubc18) \ub530\ub77c\uc11c \ub2e4\ub978 \uae30\ubc95\uc744 \uc81c\uacf5\ud558\uace0\uc790 \ud55c\ub2e4. Enforcement \uac01 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud574 \ud544\uc694\ud558\uace0 \uc2e4\ud604 \uac00\ub2a5\ud558\ub3c4\ub85d \uac01 \ubb38\uc81c \ubc94\uc8fc\ub97c \uac1c\ubcc4\uc801\uc73c\ub85c \uae08\uc9c0, \uc5b5\uc81c \ub610\ub294 \ud0d0\uc9c0\ud560 \uc218 \uc788\ub2e4. \ud56d\uc0c1 \ub300\uc548\uc744 \uc81c\uc2dc\ud558\ub77c. \uc608\uc2dc: \uacf5\uc6a9\uccb4 -- (C++17\uc5d0 \uc788\ub294) variant \ub97c \uc0ac\uc6a9\ud558\ub77c. \ud0c0\uc785 \ubcc0\ud658 -- \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c. \ud15c\ud50c\ub9bf\uc774 \ub3c4\uc6c0\uc774 \ub420 \uc218 \uc788\ub2e4. \ubc30\uc5f4 \ubd95\uad34 -- (GSL\uc5d0 \uc788\ub294) span \uc744 \uc0ac\uc6a9\ud558\ub77c. \ubc94\uc704 \uc624\ub958 -- span \uc744 \uc0ac\uc6a9\ud558\ub77c. \ucd95\uc18c \ud0c0\uc785 \ubcc0\ud658 -- \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c. \ud544\uc694\ud558\uba74 narrow \ub098 (GSL\uc5d0 \uc788\ub294) narrow_cast \ub97c \uc0ac\uc6a9\ud558\ub77c. P.5:\ub7f0\ud0c0\uc784 \uac80\uc0ac\ubcf4\ub2e4\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc0ac\ub97c \uc120\ud638\ud558\ub77c Reason \ucf54\ub4dc \uba85\ud655\uc131, \uc131\ub2a5 \ud5a5\uc0c1. \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ubc1c\uacac\ub418\ub294 \uc624\ub958\uc5d0 \ub300\ud574\uc11c\ub294 \ucc98\ub9ac\ud558\ub294 \ubd80\ubd84\uc744 \ub530\ub85c \uc791\uc131\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. Example // Int is an alias used for integers int bits = 0 ; // don't: avoidable code for ( Int i = 1 ; i ; i <<= 1 ) ++ bits ; if ( bits < 32 ) cerr << \"Int too small \\n \" ; This example fails to achieve what it is trying to achieve (because overflow is undefined) and should be replaced with a simple static_assert : // Int is an alias used for integers static_assert ( sizeof ( Int ) >= 4 ); // do: compile-time check Or better still just use the type system and replace Int with int32_t . Example void read ( int * p , int n ); // read max n integers into *p int a [ 100 ]; read ( a , 1000 ); // bad, off the end better void read ( span < int > r ); // read into the range of integers r int a [ 100 ]; read ( a ); // better: let the compiler figure out the number of elements Alternative formulation : \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ud560 \uc218 \uc788\ub294 \uac83\uc744 \ub7f0\ud0c0\uc784\uc73c\ub85c \uc5f0\uae30\ud558\uc9c0 \ub9c8\ub77c. Enforcement Look for pointer arguments. Look for run-time checks for range violations. P.6: \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc5c6\ub2e4\uba74 \ub7f0\ud0c0\uc784\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4 Reason \ud504\ub85c\uadf8\ub7a8 \uc548\uc5d0 \ucc3e\uae30 \uc5b4\ub824\uc6b4 \uc624\ub958\ub97c \ub0a8\uaca8\ub454\ub2e4\uba74 \ud06c\ub798\uc2dc\ub098 \ub098\uc05c \uacb0\uacfc\ub97c \uc57c\uae30\ud55c\ub2e4. Note \uc774\uc0c1\uc801\uc73c\ub85c \uc6b0\ub9ac\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784, \ub7f0\ud0c0\uc784\uc5d0 (\ud504\ub85c\uadf8\ub798\uba38\uc758 \ub17c\ub9ac\uc5d0\uc11c\ub294 \uc624\ub958\uac00 \uc544\ub2cc) \ubaa8\ub4e0 \uc624\ub958\ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4. \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ubaa8\ub4e0 \uc624\ub958\ub97c \ucc3e\uc544\ub0b4\ub294 \uac74 \ubd88\uac00\ub2a5\ud558\uace0 \ub7f0\ud0c0\uc784\uc5d0 \ub0a8\uc544 \uc788\ub294 \ubaa8\ub4e0 \uc624\ub958\ub97c \ucc3e\ub294 \uac83\ub3c4 \ubd88\uac00\ub2a5\ud558\ub2e4. \uadf8\ub7ec\ub098 \ucda9\ubd84\ud55c \ub9ac\uc18c\uc2a4\ub97c \uc900\ub2e4\uba74 \uc6d0\ub860\uc801\uc73c\ub85c \uac80\uc0ac \uac00\ub2a5\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub824\uace0 \ub178\ub825\ud574\uc57c \ud55c\ub2e4. (\ubd84\uc11d \ud504\ub85c\uadf8\ub7a8, \ub7f0\ud0c0\uc784 \uac80\uc0ac, \ucef4\ud4e8\ud130 \ub9ac\uc18c\uc2a4, \uc2dc\uac04) Example, bad // separately compiled, possibly dynamically loaded extern void f ( int * p ); void g ( int n ) { // bad: the number of elements is not passed to f() f ( new int [ n ]); } \uc5ec\uae30\uc11c \uacb0\uc815\uc801\uc778 \uc815\ubcf4(\uc694\uc18c\uc758 \uac2f\uc218)\uac00 \uc544\uc8fc \ucca0\uc800\ud558\uac8c \uc228\uaca8\uc838 \uc788\uc5b4\uc11c, f() \uac00 ABI\uc758 \uc77c\ubd80\uc77c \ub54c \uc815\uc801 \ubd84\uc11d\uc740 \uc544\ub9c8\ub3c4 \ubd88\uac00\ub2a5\ud574 \ubcf4\uc774\uace0 \ub3d9\uc801 \uac80\uc0ac\ub294 \ub9e4\uc6b0 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 \ud3ec\uc778\ud130\ub97c \"\uce21\uc815\"\ud560 \uc218 \uc5c6\ub2e4. \ub3c4\uc6c0\uc774 \ub420\ub9cc\ud55c \uc815\ubcf4\ub97c \ub0a8\uc740 \uacf5\uac04\uc5d0 \ub123\uc744 \uc218 \uc788\uc9c0\ub9cc, \uc774\ub294 \uc2dc\uc2a4\ud15c\uc774\ub098 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \uc804\ubc18\uc801\uc778 \ubcc0\uacbd\uc744 \uc694\uad6c\ud55c\ub2e4. \uc608\uc81c\uc5d0 \uc788\ub294 \ucf54\ub4dc\ub294 \uc624\ub958 \ubc1c\uacac\uc744 \uc544\uc8fc \uc5b4\ub835\uac8c \ub9cc\ub4dc\ub294 \ub514\uc790\uc778\uc774\ub2e4. Example, bad We can of course pass the number of elements along with the pointer: // separately compiled, possibly dynamically loaded extern void f2 ( int * p , int n ); void g2 ( int n ) { f2 ( new int [ n ], m ); // bad: a wrong number of elements can be passed to f() } \uc778\uc790\ub85c \uc694\uc18c\uc758 \uac2f\uc218\ub97c \uc804\ub2ec\ud558\ub294 \uac83\uc740 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud558\uba74\uc11c \uad00\ub840\uc5d0 \ub530\ub77c \uc694\uc18c\uc758 \uac2f\uc218\ub97c \uad6c\ud558\ub294 \uac83\ubcf4\ub2e4 \ub0ab\ub2e4. \uadf8\ub7ec\ub098, \ub2e8\uc21c\ud788 \ucca0\uc790 \ud558\ub098\ub9cc \ud2c0\ub824\ub3c4 \uc2ec\uac01\ud55c \uc624\ub958\ub97c \uc57c\uae30\ud55c\ub2e4. f2() \uc5d0\uc11c \ub450 \uc778\uc790\uac04\uc758 \uc5f0\uacb0\uc740 \uad6c\uccb4\uc801\uc774\uc9c0 \uc54a\uace0 \uad00\ub840\uc5d0 \ub530\ub978 \uac83\uc774\ub2e4. \uac8c\ub2e4\uac00 f2() \uac00 \uc778\uc790\ub97c delete \ud560 \uac83\uc778\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. (\ud638\ucd9c\uc790\uac00 \ub450\ubc88\uc9f8 \uc2e4\uc218\ub97c \ud55c \uac83\uc778\uac00?) Example, bad \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc788\ub294 \ub9ac\uc18c\uc2a4 \uad00\ub9ac \ud3ec\uc778\ud130\ub294 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\uc744 \ub54c \ud06c\uae30\ub97c \ub118\uae38 \uc218 \uc5c6\ub2e4: // separately compiled, possibly dynamically loaded // NB: this assumes the calling code is ABI-compatible, using a // compatible C++ compiler and the same stdlib implementation extern void f3 ( unique_ptr < int [] > , int n ); void g3 ( int n ) { f3 ( make_unique < int [] > ( n ), m ); // bad: pass ownership and size separately } Example \ud3ec\uc778\ud130\uc640 \uc694\uc18c\uc758 \uac2f\uc218\ub97c \ud558\ub098\uc758 \uac1c\uccb4\ub85c \ud569\uccd0\uc11c \uc804\ub2ec\ud574\uc57c \ud55c\ub2e4: extern void f4 ( vector < int >& ); // separately compiled, possibly dynamically loaded extern void f4 ( span < int > ); // separately compiled, possibly dynamically loaded // NB: this assumes the calling code is ABI-compatible, using a // compatible C++ compiler and the same stdlib implementation void g3 ( int n ) { vector < int > v ( n ); f4 ( v ); // pass a reference, retain ownership f4 ( span < int > { v }); // pass a view, retain ownership } \uc774 \ub514\uc790\uc778\uc740 \uac1c\uccb4\uc758 \ud544\uc218 \ubd80\ubd84\uc73c\ub85c \uc694\uc18c\uc758 \uac2f\uc218\ub97c \uc804\ub2ec\ud558\ubbc0\ub85c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uace0 \ud56d\uc0c1 \uc800\ub834\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc \ub3d9\uc801(\ub7f0\ud0c0\uc784) \uac80\uc0ac\ub97c \ud560 \uc218 \uc788\ub2e4. Example \uc62c\ubc14\ub978 \uc0ac\uc6a9\uc744 \uc704\ud574 \uc5b4\ub5bb\uac8c \uc18c\uc720\uad8c\uacfc \ubaa8\ub4e0 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uac83\uc778\uac00? vector < int > f5 ( int n ) // OK: move { vector < int > v ( n ); // ... initialize v ... return v ; } unique_ptr < int [] > f6 ( int n ) // bad: loses n { auto p = make_unique < int [] > ( n ); // ... initialize *p ... return p ; } owner < int *> f7 ( int n ) // bad: loses n and we might forget to delete { owner < int *> p = new int [ n ]; // ... initialize *p ... return p ; } Example ??? \ud544\uc694\ud55c \uac83\uc744 \uc2e4\uc81c\ub85c \uc54c\uace0 \uc788\uc744 \ub54c, \ub2e4\ud615 \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \uc804\ub2ec\ud558\ub294 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc5b4\ub5bb\uac8c \uac80\uc0ac\ub97c \ud53c\ud560 \uc218 \uc788\ub294\uc9c0 \ubcf4\uc5ec\uc900\ub2e4. \ub610\ub294 \"\uc790\uc720\ud615\" \uc635\uc158\uc73c\ub85c \ubb38\uc790\uc5f4\uc774 \uc788\ub2e4. Enforcement (\ud3ec\uc778\ud130, \uac2f\uc218)-\uc2a4\ud0c0\uc77c \uc778\ud130\ud398\uc774\uc2a4\ub77c\uba74 \ud45c\uc2dc\ud55c\ub2e4. (\ud638\ud658\uc131\uc744 \uc774\uc720\ub85c \uace0\uce60 \uc218 \uc5c6\ub294 \ub9ce\uc740 \uc608\uc81c\ub97c \ud45c\uc2dc\ud560 \uac83\uc774\ub2e4.) ??? P.7: \ub7f0\ud0c0\uc784 \uc624\ub958\ub294 \ucd08\uae30\uc5d0 \uc7a1\uc544\ub77c Reason \"\ubbf8\uc2a4\ud130\ub9ac\"\ud55c \ud06c\ub798\uc2dc\ub97c \ud53c\ud55c\ub2e4. (\uc544\ub9c8 \ubab0\ub790\uc744 \uc218\ub3c4 \uc788\ub294) \uc798\ubabb\ub41c \uacb0\uacfc\ub97c \uc57c\uae30\ud558\ub294 \uc624\ub958\ub97c \ud53c\ud55c\ub2e4. Example void increment1 ( int * p , int n ) // bad: error-prone { for ( int i = 0 ; i < n ; ++ i ) ++ p [ i ]; } void use1 ( int m ) { const int n = 10 ; int a [ n ] = {}; // ... increment1 ( a , m ); // maybe typo, maybe m <= n is supposed // but assume that m == 20 // ... } \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 use1 \uc5d0 \ub370\uc774\ud130\uac00 \uc190\uc2e4\ub418\uac70\ub098 \ud06c\ub798\uc2dc\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub294 \uc791\uc740 \uc624\ub958\ub97c \ubc94\ud588\ub2e4. (\ud3ec\uc778\ud130, \ud06c\uae30)-\uc2a4\ud0c0\uc77c \uc778\ud130\ud398\uc774\uc2a4\ub294 \ubc94\uc704 \uc624\ub958\uc5d0 \ub300\ud574 increment1() \uc5d0\uc11c \ubc29\uc5b4\ud560 \uc218 \uc788\ub294 \ud604\uc2e4\uc801\uc778 \ubc29\uc548\uc744 \uc5c6\uc560\ubc84\ub9b0\ub2e4. \ubc30\uc5f4 \ucca8\uc790\uac00 \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uba74, p[10] \uae4c\uc9c0 \uc624\ub958\uac00 \ubc1c\uacac\ub418\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \uc880 \ub354 \ube68\ub9ac \uac80\uc0ac\ud558\ub3c4\ub85d \ucf54\ub4dc\ub97c \uac1c\uc120\ud574 \ubcf4\uc790: void increment2 ( span < int > p ) { for ( int & x : p ) ++ x ; } void use2 ( int m ) { const int n = 10 ; int a [ n ] = {}; // ... increment2 ({ a , m }); // maybe typo, maybe m <= n is supposed // ... } \uc774\uc81c m<=n \uc740 \ud638\ucd9c \uc2dc\uc810\uc5d0\uc11c (\uc77c\ucc0d) \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \uc6b0\ub9ac\uac00 \uac00\uc9c4 \ubaa8\ub4e0 \uac83\uc774 \uc624\ud0c0\uc774\ubbc0\ub85c n \uc744 \ubc94\uc704\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ucf54\ub4dc\ub97c \ub354 \ub2e8\uc21c\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. (\uc624\ub958\uc758 \uac00\ub2a5\uc131 \uc81c\uac70) void use3 ( int m ) { const int n = 10 ; int a [ n ] = {}; // ... increment2 ( a ); // the number of elements of a need not be repeated // ... } Example, bad \ub3d9\uc77c\ud55c \uac12\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \uac80\uc0ac\ud558\uc9c0 \ub9c8\ub77c. \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130\ub97c \ubb38\uc790\uc5f4\ub85c \ub118\uae30\uc9c0 \ub9c8\ub77c: Date read_date ( istream & is ); // read date from istream Date extract_date ( const string & s ); // extract date from string void user1 ( const string & date ) // manipulate date { auto d = extract_date ( date ); // ... } void user2 () { Date d = read_date ( cin ); // ... user1 ( d . to_string ()); // ... } ( Date \uc0dd\uc131\uc790\uc5d0 \uc758\ud574) \ub0a0\uc9dc\uac00 \ub450 \ubc88 \uacc4\uc0b0\ub418\uace0 (\ube44\uad6c\uc870\ud654\ub41c \ub370\uc774\ud130\uc778) \ubb38\uc790\uc5f4\ub85c \uc804\ub2ec\ub41c\ub2e4. Example \uc9c0\ub098\uce5c \uac80\uc0ac\ub294 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4. \uac12\uc774 \ud544\uc694\ud55c\uc9c0\ub3c4 \ubaa8\ub974\uae30 \ub54c\ubb38\uc5d0 \uc77c\ucc0d \uac80\uc0ac\ud558\ub294 \uac83\uc774 \uc548 \uc88b\uc740 \uacbd\uc6b0\ub3c4 \uc788\uace0 \uc804\uccb4\uac00 \uc544\ub2cc \uac12\uc758 \uc77c\ubd80\ub9cc \uac80\uc0ac\ud558\ub294 \uac83\uc774 \uc26c\uc6b4 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. Similarly, don't add validity checks that change the asymptotic behavior of your interface (e.g., don't add a O(n) check to an interface with an average complexity of O(1) ). class Jet { // Physics says: e * e < x * x + y * y + z * z float x ; float y ; float z ; float e ; public : Jet ( float x , float y , float z , float e ) : x ( x ), y ( y ), z ( z ), e ( e ) { // Should I check here that the values are physically meaningful? } float m () const { // Should I handle the degenerate case here? return sqrt ( x * x + y * y + z * z - e * e ); } ??? }; \uc81c\ud2b8\uae30\uc5d0 \ub300\ud55c \ubb3c\ub9ac\uc801 \ubc95\uce59( e * e < x * x + y * y + z * z )\uc740 \uce21\uc815 \uc624\ub958\uc758 \uac00\ub2a5\uc131 \ub54c\ubb38\uc5d0 \uac12\uc774 \ubc14\ub014 \uc218 \uc788\ub2e4. ??? Enforcement \ud3ec\uc778\ud130\uc640 \ubc30\uc5f4\uc744 \ucc3e\uc544\ub77c: \ubc94\uc704\ub97c \ube68\ub9ac \uac80\uc0ac\ud558\uace0 \ubc18\ubcf5\ub418\uc9c0 \uc54a\uac8c \ud558\ub77c. \ud0c0\uc785 \ubcc0\ud658\uc744 \ucc3e\uc544\ub77c: \ucd95\uc18c \ubcc0\ud658\uc744 \ud45c\uc2dc\ud558\uac70\ub098 \uc81c\uac70\ud558\ub77c. \uc785\ub825\ub41c \uac12 \uc911 \uac80\uc0ac\ub418\uc9c0 \uc54a\uc740 \uac12\uc744 \ucc3e\uc544\ub77c. \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ub418\uace0 \uc788\ub294 \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130(\ubd88\ubcc0 \uc870\uac74\uc744 \uac16\ub294 \ud074\ub798\uc2a4\uc758 \uac1c\uccb4)\ub97c \ucc3e\uc544\ub77c. ??? P.8: \ub9ac\uc18c\uc2a4\uac00 \uc0c8\ub3c4\ub85d \ud558\uc9c0 \ub9c8\ub77c Reason Even a slow growth in resources will, over time, exhaust the availability of those resources. This is particularly important for long-running programs, but is an essential piece of responsible programming behavior. Example, bad void f ( char * name ) { FILE * input = fopen ( name , \"r\" ); // ... if ( something ) return ; // bad: if something == true, a file handle is leaked // ... fclose ( input ); } RAII \ub97c \uc0ac\uc6a9\ud55c \uac1c\uc120: void f ( char * name ) { ifstream input { name }; // ... if ( something ) return ; // OK: no leak // ... } See also : \ub9ac\uc18c\uc2a4 \uad00\ub9ac Note A leak is colloquially \"anything that isn't cleaned up.\" The more important classification is \"anything that can no longer be cleaned up.\" For example, allocating an object on the heap and then losing the last pointer that points to that allocation. This rule should not be taken as requiring that allocations within long-lived objects must be returned during program shutdown. For example, relying on system guaranteed cleanup such as file closing and memory deallocation upon process shutdown can simplify code. However, relying on abstractions that implicitly clean up can be as simple, and often safer. Note Enforcing the lifetime safety profile eliminates leaks. When combined with resource safety provided by RAII , it eliminates the need for \"garbage collection\" (by generating no garbage). Combine this with enforcement of the type and bounds profiles and you get complete type- and resource-safety, guaranteed by tools. Enforcement \ud3ec\uc778\ud130\ub97c \uc0b4\ud3b4\ubd10\ub77c: \uc18c\uc720\uc790\uc640 \ube44\uc18c\uc720\uc790\ub85c \uad6c\ubd84\ud574\ub77c. \uac00\ub2a5\ud558\ub2e4\uba74 \uc18c\uc720\uc790\ub97c (\uc704\uc758 \uc608\uc81c\ucc98\ub7fc) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub9ac\uc18c\uc2a4 \ud578\ub4e4\ub85c \ubc14\uafd4\ub77c. \ub610\ub294 GSL \uc5d0\uc11c owner \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ucc98\ub7fc \uc18c\uc720\uc790\ub97c \ud45c\uc2dc\ud558\ub77c. \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 new , delete \ub97c \ucc3e\uc544\ub77c. \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub294 \uc798 \uc54c\ub824\uc9c4 \ub9ac\uc18c\uc2a4 \ud560\ub2f9 \ud568\uc218\ub97c \ucc3e\uc544\ub77c. (\uc608\ub97c \ub4e4\uc5b4, fopen , malloc , strdup ) P.9: \uc2dc\uac04\uc774\ub098 \uacf5\uac04\uc744 \ub0ad\ube44\ud558\uc9c0 \ub9c8\ub77c Reason \uc774\uac83\uc774 C++\uc774\ub2e4. Note \uc5b4\ub5a4 \ubaa9\ud45c(\uc608\ub97c \ub4e4\uc5b4, \uac1c\ubc1c \uc18d\ub3c4, \ub9ac\uc18c\uc2a4 \uc548\uc804\uc131, \ub610\ub294 \ud14c\uc2a4\ud2b8 \ub2e8\uc21c\ud654)\ub97c \ub2ec\uc131\ud558\uae30 \uc704\ud574 \uc18c\ubaa8\ud558\ub294 \uc2dc\uac04\uacfc \uacf5\uac04\uc740 \ub0ad\ube44\uac00 \uc544\ub2c8\ub2e4. \"\ud6a8\uc728\uc131\uc744 \uc704\ud574 \ub178\ub825\ud560 \ub54c \uc5bb\uc744 \uc218 \uc788\ub294 \ub610\ub2e4\ub978 \uc774\uc810\uc740 \uadf8\ub7ec\ud55c \ud589\uc704\uac00 \ubb38\uc81c\ub97c \ub354 \uae4a\uc774 \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \uac15\uc81c\ud55c\ub2e4\ub294 \uac81\ub2c8\ub2e4.\" - Alex Stepanov Example, bad struct X { char ch ; int i ; string s ; char ch2 ; X & operator = ( const X & a ); X ( const X & ); }; X waste ( const char * p ) { if ( ! p ) throw Nullptr_error {}; int n = strlen ( p ); auto buf = new char [ n ]; if ( ! buf ) throw Allocation_error {}; for ( int i = 0 ; i < n ; ++ i ) buf [ i ] = p [ i ]; // ... manipulate buffer ... X x ; x . ch = 'a' ; x . s = string ( n ); // give x.s space for *p for ( gsl :: index i = 0 ; i < x . s . size (); ++ i ) x . s [ i ] = buf [ i ]; // copy buf into x.s delete [] buf ; return x ; } void driver () { X x = waste ( \"Typical argument\" ); // ... } \uadf8\ub807\ub2e4. \ud48d\uc790\ub97c \uc704\ud55c \uc608\uc81c\uc774\uae30\ub294 \ud558\uc9c0\ub9cc, \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c \uc774\ubcf4\ub2e4 \uc2ec\uac01\ud55c \uc2e4\uc218\ub3c4 \ubcf8 \uc801\uc774 \uc788\ub2e4. X \uc758 \ub808\uc774\uc544\uc6c3\uc5d0 (\ub354 \ub9ce\uc744\uc9c0\ub3c4 \ubaa8\ub974\uc9c0\ub9cc) \uc801\uc5b4\ub3c4 6\ubc14\uc774\ud2b8\uc758 \ub0ad\ube44\uac00 \uc788\ub2e4\ub294 \uc810\uc744 \uc8fc\ubaa9\ud558\ub77c. \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \uadf8\ub7f4\uc2f8\ud558\uac8c \uc815\uc758\ud574 \ub450\ub2e4 \ubcf4\ub2c8 \uc774\ub3d9 \uc5f0\uc0b0\uc774 \ube44\ud65c\uc131\ud654 \ub428\uc73c\ub85c\uc368 \ubc18\ud658 \uc5f0\uc0b0\uc774 \ub290\ub824\uc84c\ub2e4(\uc5ec\uae30\uc5d0\uc120 \ubc18\ud658\uac12 \ucd5c\uc801\ud654(Return Value Optimization, RVO)\uac00 \ubcf4\uc7a5\ub418\uc9c0 \uc54a\uc74c\uc5d0 \uc8fc\ubaa9\ud558\ub77c). buf \uc5d0\uc11c new , delete \uc758 \uc0ac\uc6a9\uc774 \uc911\ubcf5\ub41c\ub2e4. \uc9c4\uc9dc \uc9c0\uc5ed \ubb38\uc790\uc5f4\uc744 \uc6d0\ud588\ub2e4\uba74, string \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud588\uc744 \uac83\uc774\ub2e4. \ub354 \ub9ce\uc740 \uc131\ub2a5 \ubc84\uadf8\uc640 \uc0c1\ud669\uc744 \ub354 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4dc\ub294 \ubd88\ud544\uc694\ud55c \ubb38\uc81c\uac00 \uc788\ub2e4. Example, bad void lower ( zstring s ) { for ( int i = 0 ; i < strlen ( s ); ++ i ) s [ i ] = tolower ( s [ i ]); } \uadf8\ub807\ub2e4, \uc774\uac83\uc740 \uc2e4\uc81c \ucf54\ub4dc\ub85c\ubd80\ud130 \uac00\uc838\uc628 \uc608\uc81c\uc774\ub2e4. \uc6b0\ub9ac\ub294 \uc774 \uc608\uc81c\ub97c \ub3c5\uc790\uac00 \uc9c1\uc811 \ubb34\uc5c7\uc774 \ub0ad\ube44\ub418\ub294\uc9c0 \ucc3e\uac8c \ud558\uae30 \uc704\ud574 \ub0a8\uaca8\ub454\ub2e4. Note \ub0ad\ube44\uc5d0 \ub300\ud55c \uac01 \uc608\uc81c\ub294 \ubcc4\ub85c \uc911\uc694\ud558\uc9c0 \uc54a\ub2e4. \uadf8\ub9ac\uace0 \uc911\uc694\ud588\ub2e4\uba74 \uc774\ubbf8 \uc804\ubb38\uac00\ub4e4\uc774 \uc27d\uac8c \uc81c\uac70\ud588\uc744 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ucf54\ub4dc \uc804\uccb4\uc5d0 \uac78\uccd0 \ub0ad\ube44\uac00 \ud37c\uc838\ubc84\ub9ac\uba74 \uc911\uc694\ud574 \uc9c8 \uc218 \uc788\uace0, \ub0ad\ube44\ub97c \uc81c\uac70\ud558\uae30 \uc704\ud574\uc11c \uc804\ubb38\uac00\ub4e4\uc744 \ud56d\uc0c1 \uc6d0\ud558\ub294\ub370\ub85c \ub370\ub824\uc62c \uc218\ub294 \uc5c6\ub2e4. \uc774 \uaddc\uce59(\uadf8\ub9ac\uace0 \ubcf4\ub2e4 \uad6c\uccb4\uc801\uc778 \uaddc\uce59)\uc758 \ubaa9\uc801\uc740 C++ \uc0ac\uc6a9\uacfc \uad00\ub828\ub41c \ub300\ubd80\ubd84\uc758 \ub0ad\ube44\ub97c \ubc1c\uc0dd\ud558\uae30 \uc804\uc5d0 \uc5c6\uc560\uae30 \uc704\ud574\uc11c\ub2e4. \uadf8 \ud6c4\uc5d0 \uc54c\uace0\ub9ac\uc998\uc774\ub098 \uc694\uad6c \uc0ac\ud56d\uacfc \uad00\ub828\ub41c \ub0ad\ube44\ub97c \uc0b4\ud3b4\ubcfc \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac74 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubc94\uc704\ub97c \ubc97\uc5b4\ub09c\ub2e4. Enforcement \ub354 \ub9ce\uc740 \ud2b9\uc815 \uaddc\uce59\ub4e4\uc740 \uc4f8\ub370\uc5c6\ub294 \ub0ad\ube44\uc758 \ub2e8\uc21c\ud654\uc640 \uc81c\uac70\ub97c \uc804\ubc18\uc801\uc778 \ubaa9\ud45c\ub85c \ud558\uace0 \uc788\ub2e4. * \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \uae30\ubcf8 \uc815\uc758\uac00 \uc544\ub2cc \uc811\ubbf8 \uc5f0\uc0b0\uc790 ++ \ub610\ub294 -- \ud568\uc218\uc758 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 \ubc18\ud658\uac12\uc5d0 \ud45c\uc2dc\ub97c \ud55c\ub2e4. \ub300\uc2e0 \uc811\ub450 \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. (\uc8fc\uc758: \"\uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \uae30\ubcf8 \uc815\uc758\uac00 \uc544\ub2cc\"\uc740 \uc7a1\uc74c\uc744 \uc904\uc774\ub824\ub294 \uc758\ub3c4\uac00 \uc788\ub2e4. \uc2e4\uc0ac\uc6a9\uc5d0\uc11c \uc5ec\uc804\ud788 \ub108\ubb34 \uc7a1\uc74c\uc774 \ub9ce\uc744\ub54c, \uc774 \uc2dc\ud589\uc744 \uac80\ud1a0\ud558\ub77c.) P.10: \ubcc0\uacbd \uac00\ub2a5\ud55c \ub370\uc774\ud130\ubcf4\ub2e4 \ubd88\ubcc0\uc758 \ub370\uc774\ud130\ub97c \uc120\ud638\ud558\ub77c Reason \ubcc0\uc218\ubcf4\ub2e4\ub294 \uc0c1\uc218\uc5d0 \ub300\ud55c \uac83\uc774 \ucd94\ub860\uc744 \ud558\uae30\uac00 \ub354 \uc27d\ub2e4. \ubd88\ubcc0\ud55c \uac83\uc740 \uc608\uc0c1\uce58 \ubabb\ud558\uac8c \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub54c\ub54c\ub85c \ubd88\ubcc0\uc131\uc740 \ub354 \ub098\uc740 \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4. \ub2f9\uc2e0\uc740 \uc0c1\uc218\ub97c \uacbd\uc7c1\uc0c1\ud0dc(Race condition)\ub85c \ub9cc\ub4e4 \uc218 \uc5c6\ub2e4. Con: \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 \uc744 \ucc38\uc870\ud558\ub77c. P.11: \uc9c0\uc800\ubd84\ud55c \uad6c\uc870\uac00 \ucf54\ub4dc\ub97c \ud1b5\ud574 \ud37c\uc9c0\uae30 \ubcf4\ub2e8, \ucea0\uc290\ud654\ub97c \ud558\ub77c. Reason \uc9c0\uc800\ubd84\ud55c \ucf54\ub4dc\ub294 \ubc84\uadf8\ub97c \uc228\uae30\uace0 \uc4f0\uae30\uac00 \ub354 \uc5b4\ub835\ub2e4. \uc88b\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub294 \uc0ac\uc6a9\ud558\uae30 \ub354 \uc27d\uace0 \ub354 \uc548\uc804\ud558\ub2e4. \uc9c0\uc800\ubd84\ud55c, \uc800\uc218\uc900\uc758 \ucf54\ub4dc\ub294 \uadf8\ub7f0 \ucf54\ub4dc\ub97c \ub354 \ub9ce\uc774 \ub0b3\ub294\ub2e4. Example int sz = 100 ; int * p = ( int * ) malloc ( sizeof ( int ) * sz ); int count = 0 ; // ... for (;;) { // ... read an int into x, exit loop if end of file is reached ... // ... check that x is valid ... if ( count == sz ) p = ( int * ) realloc ( p , sizeof ( int ) * sz * 2 ); p [ count ++ ] = x ; // ... } \uc774 \uac83\uc740 \uc800\uc218\uc900\uc774\uace0, \uc7a5\ud669\ud558\uba70, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc6b0\ub9ac\ub294 \uba54\ubaa8\ub9ac \uc18c\ubaa8\ub97c \ud14c\uc2a4\ud2b8\ud558\ub294 \uac83\uc744 \uc78a\uc5c8\ub2e4. \ub300\uc2e0, \uc6b0\ub9ac\ub294 vector \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5c8\ub2e4: vector < int > v ; v . reserve ( 100 ); // ... for ( int x ; cin >> x ; ) { // ... check that x is valid ... v . push_back ( x ); } Note \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 GSL\uc740 \uc774\ub7f0 \ucca0\ud559\uc758 \uc608\ub4e4 \uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, vector , span , lock_guard , future \uc640 \uac19\uc774 \ud575\uc2ec\uc801\uc778 \ucd94\uc0c1\ud654 \uad6c\ud604\uc5d0 \ud544\uc694\ud55c, \ubc30\uc5f4\ub4e4\uacfc \uc720\ub2c8\uc628\ub4e4, \uce90\uc2a4\ud305, \uae4c\ub2e4\ub85c\uc6b4 \uc0dd\uba85\uc8fc\uae30 \ubb38\uc81c, gsl::owner \ub4f1\uc73c\ub85c \uc9c0\uc800\ubd84\ud558\uac8c \ud558\ub294 \ub300\uc2e0, \uc6b0\ub9ac\ub294 \uc6b0\ub9ac\ubcf4\ub2e4 \uc804\ubb38\uc801\uc774\uace0 \ub354 \ub9ce\uc740 \uc2dc\uac04\uc744 \ud22c\uc790\ud55c \uc0ac\ub78c\ub4e4\uc774 \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c, \uc6b0\ub9ac\ub294 \uc0ac\uc6a9\uc790\ub4e4(\ud754\ud788 \uc6b0\ub9ac \uc790\uc2e0)\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \ub0ae\uc740 \uc218\uc900\uc758 \ucf54\ub4dc\ub97c \uc5bb\uae30 \uc26c\uc6b4 \ud658\uacbd\uc5d0 \ubc84\ub824\ub450\uc9c0 \ub9d0\uace0, \ub354 \uc804\ubb38\ud654\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud574\uc57c\ud558\uace0 \ud560 \uc218 \uc788\ub2e4. \uc774\uac83\uc740 \ubcf8 \uc9c0\uce68\uc758 \uae30\ucd08\uac00 \ub418\ub294 subset of superset principle \uc758 \ubcc0\ud615\uc774\ub2e4. Enforcement \ubcf5\uc7a1\ud55c \ud3ec\uc778\ud130 \uc870\uc791\uc774\ub098 \ucd94\uc0c1\ud654 \uad6c\ud604 \ubc16\uc5d0\uc11c\uc758 \uce90\uc2a4\ud305 \uac19\uc740 \"\uc9c0\uc800\ubd84\ud55c \ucf54\ub4dc\"\ub97c \ucc3e\uc544\ubd10\ub77c. P.12: \ud544\uc694\uc5d0 \ub9de\uac8c \uc9c0\uc6d0 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \"\uae30\uacc4\uc5d0 \uc758\ud574\" \ub354 \uc798 \ub420 \uc218 \uc788\ub294 \ub9ce\uc740 \uac83\ub4e4\uc774 \uc788\ub2e4. \ucef4\ud4e8\ud130\ub294 \ubc18\ubcf5\uc801\uc778 \uc791\uc5c5\uc5d0 \uc758\ud574 \uc9c0\uce58\uac70\ub098 \uc9c0\ub8e8\ud574 \ud558\uc9c0 \uc54a\ub294\ub2e4. \uc6b0\ub9ac\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ubc18\ubcf5\uc801\uc774\uace0 \uc9c0\ub8e8\ud55c \uc77c\uc744 \ud558\ub294 \uac83\ubcf4\ub2e4 \ub354 \ub098\uc740 \uc77c\uc744 \ud55c\ub2e4. Example \uc815\uc801 \ubd84\uc11d\uae30\ub97c \uc2e4\ud589\ud558\uc5ec \ucf54\ub4dc\uac00 \uc6d0\ud558\ub294 \uc9c0\uce68(Guideline)\uc744 \ub530\ub974\ub294 \uc9c0 \ud655\uc778\ud558\ub77c. Note \ub2e4\uc74c\uc744 \ucc38\uace0\ud558\ub77c. \uc815\uc801 \ubd84\uc11d \ub3c4\uad6c\ub4e4 \ub3d9\uc2dc\uc131 \ub3c4\uad6c\ub4e4 \ud14c\uc2a4\ud305 \ub3c4\uad6c\ub4e4 \uc18c\uc2a4\ucf54\ub4dc \uc800\uc7a5\uc18c\ub4e4, \ube4c\ub4dc \ub3c4\uad6c\ub4e4\ub4f1\uacfc \uac19\uc740 \ub9ce\uc740 \ub2e4\ub978 \uc885\ub958\uc758 \ub3c4\uad6c\ub4e4\uc774 \uc788\ub2e4. \uadf8\ub7ec\ub098 \uadf8\uac83\ub4e4\uc5d0 \ub300\ud574 \uc124\uba85\ud558\ub294 \uac83\uc740 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubc94\uc704\ub97c \ubc97\uc5b4\ub09c\ub2e4. Note \uc9c0\ub098\uce58\uac8c \uc815\uad50\ud558\uac70\ub098 \uc9c0\ub098\uce58\uac8c \ud2b9\uc218\ud654 \ub41c \ud234 \uccb4\uc778\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud558\ub77c. \uadf8\uac83\ub4e4\uc740 \ub2f9\uc2e0\uc758 \uc774\uc2dd\uac00\ub2a5\ud55c \ucf54\ub4dc\ub97c \uc774\uc2dd\uc774 \ubd88\uac00\ub2a5\ud558\ub3c4\ub85d \ub9cc\ub4e4 \uc218 \uc788\ub2e4. P.13: \ud544\uc694\uc5d0 \ub9de\uac8c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uc798 \uc124\uacc4\ub418\uace0(well-designed), \uc798 \ubb38\uc11c\ud654\ub41c(well-documented) \uadf8\ub9ac\uace0 \uc798 \uc9c0\uc6d0\ub418\ub294(well-supported) \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uacfc \ub178\ub825\uc744 \uc808\uc57d\ud55c\ub2e4. \ub9cc\uc57d\uc5d0 \ub2f9\uc2e0\uc758 \ub300\ubd80\ubd84\uc758 \uc2dc\uac04\uc744 \uad6c\ud604\uc5d0 \uc368\uc57c\ub9cc \ud55c\ub2e4\uba74, \uc774\uac83\uc758 \ud488\uc9c8\uacfc \ubb38\uc11c\ub294 \ub2f9\uc2e0\uc774 \ub9cc\ub4dc\ub294 \uac83\ubcf4\ub2e4 \ub354 \uc88b\uc744 \uac83\uc774\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ube44\uc6a9(\uc2dc\uac04, \ub178\ub825, \ub3c8, \ub4f1\ub4f1)\uc740 \ub9ce\uc740 \uc0ac\uc6a9\uc790\ub4e4\uacfc \uacf5\uc720\ub420 \uc218 \uc788\ub2e4. \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uac1c\uac1c\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ube44\ud574, \ucd5c\uc2e0\uc73c\ub85c \uc720\uc9c0\ub418\uace0 \uc0c8\ub85c\uc6b4 \uc2dc\uc2a4\ud15c\uc5d0 \ud3ec\ud305\uc774 \ub354 \uc798\ub418\uc5b4 \uc788\uc744 \uac83\uc774\ub2e4. \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub2e4\ub978/\ubbf8\ub798\uc758 \ud504\ub85c\uc81d\ud2b8\ub4e4\uc758 \uc2dc\uac04\uc744 \uc808\uc57d\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c, \ub9cc\uc57d\uc5d0 \ub2f9\uc2e0\uc758 \uc751\uc6a9 \ub3c4\uba54\uc778(Domain)\uc5d0 \uc801\ud569\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc788\uc73c\uba74 \uadf8\uac83\uc744 \uc0ac\uc6a9\ud558\ub77c. Example std :: sort ( begin ( v ), end ( v ), std :: greater <> ()); \ub2f9\uc2e0\uc774 \uc815\ub82c \uc54c\uace0\ub9ac\uc998\ub4e4\uc5d0 \ub300\ud55c \uc804\ubb38\uac00\uc774\uac70\ub098 \uc2dc\uac04\uc774 \ub9ce\uc774 \uc788\uc9c0 \uc54a\uc740 \uc774\uc0c1, \uc774 \ucf54\ub4dc\ub294 \ub2f9\uc2e0\uc774 \ud2b9\uc815\ud55c \uc751\uc6a9\uc744 \uc704\ud574 \uc791\uc131\ud55c \uadf8 \uc5b4\ub5a4 \uac83\ubcf4\ub2e4 \ub354 \uc815\ud655\ud558\uace0 \ube60\ub974\uac8c \ub3d9\uc791\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 \uc9c1\uc811 \uc791\uc131\ud55c \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub824\uba74, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac(\ub610\ub294 \ub2f9\uc2e0\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \uc0ac\uc6a9\ud558\ub294 \uadf8 \uc5b4\ub5a4 \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4)\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744 \uc774\uc720\uac00 \ud544\uc694\ud558\ub2e4. Note \uae30\ubcf8\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \uac83 ISO C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub77c\uc774\ube0c\ub7ec\ub9ac \uc9c0\uc6d0 \uc9c0\uce68\ub4e4 Note \ub9cc\uc57d\uc5d0 \uc798 \uc124\uacc4\ub418\uace0, \uc798 \ubb38\uc11c\ud654\ub418\uace0, \uc798 \uc9c0\uc6d0\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc911\uc694\ud55c \ub3c4\uba54\uc778\uc5d0 \uc5c6\ub2e4\uba74, \uc544\ub9c8\ub3c4 \ub2f9\uc2e0\uc740 \uadf8\uac83\uc744 \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud55c \ub4a4, \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83\uc774\ub2e4.","title":"Philosophy"},{"location":"Philosophy/#p","text":"\uc774 \uc7a5\uc758 \uaddc\uce59\ub4e4\uc740 \ub9e4\uc6b0 \uc77c\ubc18\uc801\uc774\ub2e4. \ucca0\ud559 \uaddc\uce59 \uc694\uc57d: P.1: \uc544\uc774\ub514\uc5b4\ub97c \uc9c1\uc811 \ucf54\ub4dc\ub85c \ud45c\ud604\ud558\ub77c P.2: ISO \ud45c\uc900 C++\ub85c \uc791\uc131\ud558\ub77c P.3: \uc758\ub3c4\ub97c \ud45c\ud604\ud558\ub77c P.4: \uc774\uc0c1\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc740 \uc815\uc801\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\ud574\uc57c \ud55c\ub2e4 P.5: \ub7f0\ud0c0\uc784 \uac80\uc0ac\ubcf4\ub2e4\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc0ac\ub97c \uc120\ud638\ud558\ub77c P.6: \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc5c6\ub2e4\uba74 \ub7f0\ud0c0\uc784\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4 P.7: \ub7f0\ud0c0\uc784 \uc624\ub958\ub294 \ucd08\uae30\uc5d0 \uc7a1\uc544\ub77c P.8: \ub9ac\uc18c\uc2a4\uac00 \uc0c8\ub3c4\ub85d \ud558\uc9c0 \ub9c8\ub77c P.9: \uc2dc\uac04\uc774\ub098 \uacf5\uac04\uc744 \ub0ad\ube44\ud558\uc9c0 \ub9c8\ub77c P.10: \ubcc0\uacbd \uac00\ub2a5\ud55c \ub370\uc774\ud130\ubcf4\ub2e4 \ubcc0\uacbd \ubd88\uac00\ub2a5\ud55c \ub370\uc774\ud130\ub97c \ub354 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub77c P.11: \ubcf5\uc7a1\ud55c \uc0dd\uc131\uacfc\uc815\uc740 \ucea1\uc290\ud558\ub77c P.12: \uc9c0\uc6d0 \ub3c4\uad6c\ub97c \uc801\uc808\ud788 \ud65c\uc6a9\ud558\ub77c P.13: \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc801\uc808\ud788 \ud65c\uc6a9\ud558\ub77c \ucca0\ud559\uc801 \uaddc\uce59\uc740 \ubcf4\ud1b5 \uae30\uacc4\uc801\uc73c\ub85c \uac80\uc0ac\ud560 \uc218 \uc5c6\ub2e4 . \uadf8\ub7ec\ub098 \ucca0\ud559\uc801\uc778 \ud14c\ub9c8\ub97c \ubc18\uc601\ud558\ub294 \uac1c\ubcc4\uc801\uc778 \uaddc\uce59\ub4e4\uc740 \uac80\uc0ac\ud560 \uc218 \ud558\ub2e4. \ucca0\ud559\uc801\uc778 \uae30\ucd08\uac00 \uc5c6\uc774 \uad6c\uccb4\uc801\uc774\uace0/\ud2b9\uc218\ud558\uace0/\uac80\uc0ac \uac00\ub2a5\ud55c \uaddc\uce59\uc740 \uadfc\uac70\uac00 \ubd80\uc871\ud558\ub2e4.","title":"P: \ucca0\ud559"},{"location":"Philosophy/#p1","text":"","title":"P.1: \uc544\uc774\ub514\uc5b4\ub97c \uc9c1\uc811 \ucf54\ub4dc\ub85c \ud45c\ud604\ud558\ub77c"},{"location":"Philosophy/#reason","text":"\ucef4\ud30c\uc77c\ub7ec\ub294 \uc8fc\uc11d\ubb38(\ub610\ub294 \ub514\uc790\uc778 \ubb38\uc11c)\uc744 \uc77d\uc9c0 \uc54a\ub294\ub2e4. \uc218\ub9ce\uc740 \ud504\ub85c\uadf8\ub798\uba38 \ub610\ud55c \uc8fc\uc11d\uc744 (\uc77c\uad00\ub418\uac8c) \uc77d\uc9c0 \uc54a\ub294\ub2e4. \ucf54\ub4dc\ub85c \ud45c\ud604\ub41c \ub0b4\uc6a9\uc774\ub77c\uba74 \uadf8 \uc758\ubbf8(\uc758\ub3c4)\ub97c \uc774\ubbf8 \uc815\uc758\ud588\uc744 \uac83\uc774\uba70 (\ub300\uccb4\ub85c) \ucef4\ud30c\uc77c\ub7ec\ub098 \ub2e4\ub978 \ud234\ub85c \uac80\uc0ac\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Philosophy/#example","text":"class Date { // ... public : Month month () const ; // do int month (); // don't // ... }; \uccab\ubc88\uc9f8 month \ud568\uc218\ub294 \uba85\ud655\ud788 Month \ub97c \ubc18\ud658\ud558\ub3c4\ub85d \uc120\uc5b8\ub418\uc5b4 \uc788\uc73c\uba70, Date \uac1c\uccb4\uc758 \uc0c1\ud0dc\ub97c \ubcc0\uacbd\ud558\uc9c0 \uc54a\uc744 \uac83\ucc98\ub7fc \ubcf4\uc778\ub2e4. \ub450\ubc88\uc9f8 \ubc84\uc804\uc740 \ucf54\ub4dc\ub97c \uc77d\ub294 \uac1c\ubc1c\uc790\ub4e4\uc744 \uace0\ubbfc\ud558\uac8c \ub9cc\ub4e4\uba70, \ubc1c\uacac\ud558\uae30 \uc5b4\ub824\uc6b4 \ubc84\uadf8\ub97c \uc720\ubc1c\ud560 \uac00\ub2a5\uc131\uc774 \uc788\ub2e4.","title":"Example"},{"location":"Philosophy/#example-bad","text":"\uc544\ub798\uc758 \ubc18\ubcf5\ubb38\uc740 std::find \ub97c \uc774\uc6a9\ud574 \ud45c\ud604 \uac00\ub2a5\ud558\ub2e4. void f ( vector < string >& v ) { string val ; cin >> val ; // ... int index = - 1 ; // bad, plus should use gsl::index for ( int i = 0 ; i < v . size (); ++ i ) { if ( v [ i ] == val ) { index = i ; break ; } } // ... }","title":"Example; bad"},{"location":"Philosophy/#example-good","text":"\uc758\ub3c4\ub97c \ub354 \uba85\ud655\ud558\uac8c \ub4dc\ub7ec\ub0b4\uae30 \uc704\ud574 \uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \ubc14\uafc0 \uc218 \uc788\ub2e4: void f ( vector < string >& v ) { string val ; cin >> val ; // ... auto p = find ( begin ( v ), end ( v ), val ); // better // ... } \uc5b8\uc5b4\uac00 \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\uc744 \uc9c1\uc811 \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4 \uc798 \uc124\uacc4\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uadf8 \uc758\ub3c4(\uc5b4\ub5bb\uac8c \uc218\ud589\ub418\ub294\uc9c0\ubcf4\ub2e4 \ubb34\uc5c7\uc774 \uc218\ud589\ub418\ub294\uc9c0\ub97c) \ud45c\ud604\ud558\ub294 \uac83\uc774 \ud6e8\uc52c \ub0ab\ub2e4. C++ \ud504\ub85c\uadf8\ub798\uba38\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uae30\ubcf8 \ub0b4\uc6a9\uc744 \ubc18\ub4dc\uc2dc \uc774\ud574\ud558\uace0 \uc62c\ubc14\ub978 \uacf3\uc5d0 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc5b4\ub5a4 \ud504\ub85c\uadf8\ub798\uba38\ub4e0 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uae30\ubc18\ud558\uace0 \uc788\ub294 \ud575\uc2ec \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uae30\ubcf8 \ub0b4\uc6a9\uc744 \ubc18\ub4dc\uc2dc \uc774\ud574\ud558\uace0 \uc788\uc5b4\uc57c \ud558\uba70, \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud560 \uc904 \uc54c\uc544\uc57c \ud55c\ub2e4. \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc0ac\uc6a9\ud558\ub294 \ud504\ub85c\uadf8\ub798\uba38\ub294 \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc744 \ubc18\ub4dc\uc2dc \uc54c\uc544\uc57c \ud558\uace0 \uc801\uc808\ud788 \uc0ac\uc6a9\ud560 \uc904 \uc54c\uc544\uc57c \ud55c\ub2e4.","title":"Example; good"},{"location":"Philosophy/#example_1","text":"change_speed ( double s ); // bad: what does s signify? // ... change_speed ( 2.3 ); \ub354 \uc88b\uc740 \uc811\uadfc\ubc95\uc740 double \uc758 \uc758\ubbf8\uc640 \ub2e8\uc704(\uc0c8\ub85c\uc6b4 \uc18d\ub3c4 \uac12\uc778\uc9c0, \ud639\uc740 \uc774\uc804 \uc18d\ub3c4\uc5d0\uc11c\uc758 \uc99d\ubd84\uc744 \uc758\ubbf8\ud558\ub294\uc9c0)\ub97c \uba85\ud655\ud788 \ud558\ub294 \uac83\uc774\ub2e4: change_speed ( Speed s ); // better: the meaning of s is specified // ... change_speed ( 2.3 ); // error: no unit change_speed ( 23 m / 10 s ); // meters per second (\ub2e8\uc704\uac00 \uc5c6\ub294) \ub2e8\uc21c\ud55c double \uc744 \ubcc0\ud654\ub7c9(\uc18d\ub3c4\uc758 \ucc28)\uc73c\ub85c \ubc1b\uc544\ub4e4\uc77c \uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, \uc544\ubb34\ub798\ub3c4 \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4. \uc18d\ub3c4\uc640 \ubcc0\ud654\ub7c9 \ub458 \ub2e4 \ud544\uc694\ud558\ub2e4\uba74, Delta \ud0c0\uc785\uc744 \uc815\uc758\ud574\uc57c \ud560 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Philosophy/#enforcement","text":"\uc77c\ubc18\uc801\uc73c\ub85c \ub9e4\uc6b0 \uc5b4\ub835\ub2e4. \uc77c\uad00\uc131 \uc788\uac8c const \ub97c \uc0ac\uc6a9\ud558\ub77c (\uba64\ubc84 \ud568\uc218\uac00 \uac1c\uccb4\ub97c \ubcc0\uacbd\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub77c. \uadf8\ub9ac\uace0 \ud3ec\uc778\ud130\ub098 \ub808\ud37c\ub7f0\uc2a4\ub85c \ub118\uc5b4\uc628 \uc778\uc790\ub97c \ubcc0\uacbd\ud558\ub294\uc9c0 \ud655\uc778\ud558\ub77c) \ud0c0\uc785 \ubcc0\ud658\uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud558\ub77c (\ud0c0\uc785 \ubcc0\ud658\uc740 \ud0c0\uc785 \uc2dc\uc2a4\ud15c\uc744 \ubb34\ub825\ud654\uc2dc\ud0a8\ub2e4) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud749\ub0b4\ub0b4\ub294 \ucf54\ub4dc\ub97c \ucc3e\uc544\ub77c (\ucc3e\uae30 \uc5b4\ub835\ub2e4)","title":"Enforcement"},{"location":"Philosophy/#p2-iso-c","text":"","title":"P.2: ISO \ud45c\uc900 C++\ub85c \uc791\uc131\ud558\ub77c"},{"location":"Philosophy/#reason_1","text":"\uc774 \ubb38\uc11c\ub294 ISO \ud45c\uc900 C++\ub85c \uc791\uc131\ud558\ub294 \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc744 \ubaa8\uc544\ub454 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Philosophy/#note","text":"\uc2dc\uc2a4\ud15c \ub9ac\uc18c\uc2a4\uc5d0 \uc811\uadfc\ud558\ub294 \ub4f1\uc758 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uae30 \uc704\ud574\uc11c \ud655\uc7a5 \uae30\ub2a5\uc774 \ud544\uc694\ud560 \uc218 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 \ud544\uc694\ud55c \ud655\uc7a5 \uae30\ub2a5\uc744 \uc9c0\uc5ed\uc801\uc73c\ub85c \uc81c\ud55c\ud574\uc11c \uc0ac\uc6a9\ud558\uace0, \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc544\ub2cc \ub2e4\ub978 \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ud65c\uc6a9\ud574 \uad00\ub9ac\ud558\ub77c. If possible, build interfaces that encapsulate the extensions so they can be turned off or compiled away on systems that do not support those extensions. Extensions often do not have rigorously defined semantics. Even extensions that are common and implemented by multiple compilers may have slightly different behaviors and edge case behavior as a direct result of not having a rigorous standard definition. With sufficient use of any such extension, expected portability will be impacted.","title":"Note"},{"location":"Philosophy/#note_1","text":"Using valid ISO C++ does not guarantee portability (let alone correctness). Avoid dependence on undefined behavior (e.g., undefined order of evaluation ) and be aware of constructs with implementation defined meaning (e.g., sizeof(int) ).","title":"Note"},{"location":"Philosophy/#note_2","text":"\ud45c\uc900 C++ \uc5b8\uc5b4\uc758 \uae30\ub2a5\uc774\ub098 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc870\ucc28 \uc81c\ud55c\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \ubc16\uc5d0 \uc5c6\ub294 \ud658\uacbd\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74, \ud56d\uacf5\uae30 \uc81c\uc5b4 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \ud45c\uc900\uc5d0\ub294 \ub3d9\uc801 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \ud53c\ud560 \uac83\uc744 \uc8fc\ubb38\ud558\uace0 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 \ud2b9\uc815 \ud658\uacbd\uc5d0 \ub9de\ucd98 \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ud655\uc7a5\ud574\uc11c \uc0ac\uc6a9\ud558\uac70\ub098 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc544\uc57c \ud558\ub294 \uae30\ub2a5\ub4e4\uc744 \uad00\ub9ac\ud558\ub77c.","title":"Note"},{"location":"Philosophy/#enforcement_1","text":"\ud655\uc7a5\uc744 \ud5c8\uc6a9\ud558\uc9c0 \uc54a\ub3c4\ub85d \uae30\ub2a5 \uc124\uc815\uc774 \uac00\ub2a5\ud55c \ucd5c\uc2e0 C++ \ucef4\ud30c\uc77c\ub7ec(C++17, C++14 \ud639\uc740 C++11)\ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Enforcement"},{"location":"Philosophy/#p3","text":"","title":"P.3: \uc758\ub3c4\ub97c \ud45c\ud604\ud558\ub77c"},{"location":"Philosophy/#reason_2","text":"(\uc774\ub984\uc774\ub098 \uc8fc\uc11d\uc744 \ud1b5\ud574) \ucf54\ub4dc\uc758 \uc758\ub3c4\ub97c \uc81c\ub300\ub85c \ub4dc\ub7ec\ub0b4\uc9c0 \ubabb\ud55c\ub2e4\uba74, \ucf54\ub4dc\uac00 \uc81c\ub300\ub85c \uc218\ud589\ub418\ub294\uc9c0\uc870\ucc28 \ub9d0\ud560 \uc218 \uc5c6\uc744 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Philosophy/#example_2","text":"gsl :: index i = 0 ; while ( i < v . size ()) { // ... do something with v[i] ... } \uc704 \ucf54\ub4dc\ub9cc \ubcf4\uc558\uc744 \ub54c\ub294 v \uc758 \uac01 \uc694\uc18c\ub97c \uc21c\ud68c\ud558\uaca0\ub2e4\ub294 \uc758\ub3c4\uac00 \ub4dc\ub7ec\ub098\uc9c0 \uc54a\ub294\ub2e4. \uc778\ub371\uc2a4\uc5d0 \ub300\ud55c \uc138\ubd80\uc801\uc778 \uad6c\ud604\ubd80\uac00 \ub178\ucd9c\ub41c\ub2e4 (\ub530\ub77c\uc11c \uc798\ubabb \uc0ac\uc6a9\ub420 \uc9c0\ub3c4 \ubaa8\ub978\ub2e4). \uadf8\ub9ac\uace0 \uc758\ub3c4\uc801\uc778\uc9c0\ub294 \uc54c \uc218 \uc5c6\uc9c0\ub9cc i \ub97c \ubc18\ubcf5\ubb38 \ubc16\uc5d0\uc11c\ub3c4 \uc5ec\uc804\ud788 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc774 \ubd80\ubd84\uc758 \ucf54\ub4dc\ub9cc \uc77d\uc5b4\uc11c\ub294 \uadf8 \uc758\ub3c4\ub97c \uc54c\uc9c0 \ubabb\ud55c\ub2e4. \uac1c\uc120: for ( const auto & x : v ) { /* do something with the value of x */ } \uc704 \ucf54\ub4dc\ub97c \ubcf4\uba74 v\uc5d0 \ub300\ud55c \uc21c\ud68c \uba54\ucee4\ub2c8\uc998\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc5b8\uae09\ud558\uc9c0 \uc54a\ub294\ub2e4. \uadf8\ub9ac\uace0 \uc21c\ud68c\ud558\ub294 \ub3d9\uc548 v\uc758 \uac01 const \uc694\uc18c\uc758 \ub808\ud37c\ub7f0\uc2a4\uc5d0 \ub300\ud574 \ub3d9\uc791\uc774 \uc77c\uc5b4\ub098\uae30 \ub54c\ubb38\uc5d0 \uac01 \uc694\uc18c\ub97c \uc218\uc815\ud560 \uc218 \uc5c6\ub2e4. \ub9cc\uc57d \uc218\uc815\uc774 \ud544\uc694\ud55c \uacbd\uc6b0\ub77c\uba74 \uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \uc791\uc131\ud574\uc57c \ud55c\ub2e4. for ( auto & x : v ) { /* modify x */ } For more details about for-statements, see ES.71 . Sometimes better still, use a named algorithm. This example uses the for_each from the Ranges TS because it directly expresses the intent: for_each ( v , []( int x ) { /* do something with the value of x */ }); for_each ( par , v , []( int x ) { /* do something with the value of x */ }); \ub9c8\uc9c0\ub9c9 \uc608\ub294 v \uc758 \uac01 \uc694\uc18c\uac00 \ucc98\ub9ac\ub418\ub294 \uc21c\uc11c\uc5d0 \uad00\uc2ec\uc774 \uc5c6\ub2e4\ub294 \uc810\uc744 \uba85\ud655\ud788 \ud558\uace0 \uc788\ub2e4. \ud504\ub85c\uadf8\ub798\uba38\ub77c\uba74 \ub2e4\uc74c\uc5d0 \uc775\uc219\ud574\uc838\uc57c \ud55c\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac ISO C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud604\uc7ac \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc0ac\uc6a9\ub418\uace0 \uc788\ub294 \ubaa8\ub4e0 \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4","title":"Example"},{"location":"Philosophy/#note_3","text":"\uacf5\uc2dd \ub300\uc548: \uc5b4\ub5bb\uac8c \uc791\uc5c5\uc774 \uc218\ud589\ub418\ub294\uc9c0\ub97c \ub9d0\ud558\uc9c0 \ub9d0\uace0 \ubb34\uc5c7\uc774 \uc218\ud589\ub420\uc9c0\ub97c \ub9d0\ud558\ub77c.","title":"Note"},{"location":"Philosophy/#note_4","text":"\uc5b8\uc5b4\uc758 \uae30\ubcf8 \uc694\uc18c\ub294 \ub2e4\ub978 \ubb34\uc5c7\ubcf4\ub2e4\ub3c4 \uadf8 \uc758\ub3c4\ub97c \ub354 \uc798 \ud45c\ud604\ud55c\ub2e4.","title":"Note"},{"location":"Philosophy/#example_3","text":"2\uac1c\uc758 int \uac12\uc73c\ub85c 2\ucc28\uc6d0 \uc88c\ud45c\ub97c \ud45c\ud604\ud558\uace0 \uc2f6\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc774 \uc368\ub77c: draw_line ( int , int , int , int ); // obscure draw_line ( Point , Point ); // clearer","title":"Example"},{"location":"Philosophy/#enforcement_2","text":"\uc880 \ub354 \ub098\uc740 \ub300\uc548\uc774 \uc788\ub294 \ubc94\uc6a9\uc801\uc778 \ud328\ud134\uc744 \ucc3e\uc544\ubcf4\ub77c. \ub2e8\uc21c\ud55c for \ubb38 \ub300 \ubc94\uc704 \uae30\ubc18 for \ubb38 f(T*, int) \uc778\ud130\ud398\uc774\uc2a4 \ub300 f(span<T>) \uc778\ud130\ud398\uc774\uc2a4 \uc544\uc8fc \ud070 \uc2a4\ucf54\ud504\uc5d0\uc11c \uc21c\ud68c\ud558\ub294 \ubcc0\uc218 \uadf8\ub300\ub85c \ub178\ucd9c\ub41c new \uc640 delete \uc778\uc790\ub85c \ub0b4\uc7a5 \ud0c0\uc785\uc744 \uc5ec\ub7ec\uac1c \uac16\ub294 \ud568\uc218 There is a huge scope for cleverness and semi-automated program transformation.","title":"Enforcement"},{"location":"Philosophy/#p4","text":"","title":"P.4: \uc774\uc0c1\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc740 \uc815\uc801\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\ud574\uc57c \ud55c\ub2e4"},{"location":"Philosophy/#reason_3","text":"\uc774\uc0c1\uc801\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc740 \uc644\uc804\ud788 \uc815\uc801\uc73c\ub85c \ud0c0\uc785 \uc548\uc804\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \ubd88\ud589\ud558\uac8c\ub3c4 \ubd88\uac00\ub2a5\ud558\ub2e4. \uc65c\ub0d0\ud558\uba74 \ub2e4\uc74c\ucc98\ub7fc \ubb38\uc81c\uac00 \ub418\ub294 \uc601\uc5ed\ub4e4\uc774 \uc874\uc7ac\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uacf5\uc6a9\uccb4 \ud0c0\uc785 \ubcc0\ud658 \ubc30\uc5f4 \ubd95\uad34 \ubc94\uc704 \uc624\ub958 \ucd95\uc18c \ud0c0\uc785 \ubcc0\ud658","title":"Reason"},{"location":"Philosophy/#note_5","text":"\uc774\ub7ec\ud55c \uc601\uc5ed\ub4e4\uc740 \uc2ec\uac01\ud55c \ubb38\uc81c\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. (\uc608\ub97c \ub4e4\uc5b4, \ud06c\ub798\uc2dc\uc640 \ubcf4\uc548 \uc704\ubc18) \ub530\ub77c\uc11c \ub2e4\ub978 \uae30\ubc95\uc744 \uc81c\uacf5\ud558\uace0\uc790 \ud55c\ub2e4.","title":"Note"},{"location":"Philosophy/#enforcement_3","text":"\uac01 \ud504\ub85c\uadf8\ub7a8\uc5d0 \ub300\ud574 \ud544\uc694\ud558\uace0 \uc2e4\ud604 \uac00\ub2a5\ud558\ub3c4\ub85d \uac01 \ubb38\uc81c \ubc94\uc8fc\ub97c \uac1c\ubcc4\uc801\uc73c\ub85c \uae08\uc9c0, \uc5b5\uc81c \ub610\ub294 \ud0d0\uc9c0\ud560 \uc218 \uc788\ub2e4. \ud56d\uc0c1 \ub300\uc548\uc744 \uc81c\uc2dc\ud558\ub77c. \uc608\uc2dc: \uacf5\uc6a9\uccb4 -- (C++17\uc5d0 \uc788\ub294) variant \ub97c \uc0ac\uc6a9\ud558\ub77c. \ud0c0\uc785 \ubcc0\ud658 -- \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c. \ud15c\ud50c\ub9bf\uc774 \ub3c4\uc6c0\uc774 \ub420 \uc218 \uc788\ub2e4. \ubc30\uc5f4 \ubd95\uad34 -- (GSL\uc5d0 \uc788\ub294) span \uc744 \uc0ac\uc6a9\ud558\ub77c. \ubc94\uc704 \uc624\ub958 -- span \uc744 \uc0ac\uc6a9\ud558\ub77c. \ucd95\uc18c \ud0c0\uc785 \ubcc0\ud658 -- \uc0ac\uc6a9\uc744 \ucd5c\uc18c\ud654\ud558\ub77c. \ud544\uc694\ud558\uba74 narrow \ub098 (GSL\uc5d0 \uc788\ub294) narrow_cast \ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Enforcement"},{"location":"Philosophy/#p5","text":"","title":"P.5:\ub7f0\ud0c0\uc784 \uac80\uc0ac\ubcf4\ub2e4\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784 \uac80\uc0ac\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Philosophy/#reason_4","text":"\ucf54\ub4dc \uba85\ud655\uc131, \uc131\ub2a5 \ud5a5\uc0c1. \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ubc1c\uacac\ub418\ub294 \uc624\ub958\uc5d0 \ub300\ud574\uc11c\ub294 \ucc98\ub9ac\ud558\ub294 \ubd80\ubd84\uc744 \ub530\ub85c \uc791\uc131\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.","title":"Reason"},{"location":"Philosophy/#example_4","text":"// Int is an alias used for integers int bits = 0 ; // don't: avoidable code for ( Int i = 1 ; i ; i <<= 1 ) ++ bits ; if ( bits < 32 ) cerr << \"Int too small \\n \" ; This example fails to achieve what it is trying to achieve (because overflow is undefined) and should be replaced with a simple static_assert : // Int is an alias used for integers static_assert ( sizeof ( Int ) >= 4 ); // do: compile-time check Or better still just use the type system and replace Int with int32_t .","title":"Example"},{"location":"Philosophy/#example_5","text":"void read ( int * p , int n ); // read max n integers into *p int a [ 100 ]; read ( a , 1000 ); // bad, off the end better void read ( span < int > r ); // read into the range of integers r int a [ 100 ]; read ( a ); // better: let the compiler figure out the number of elements Alternative formulation : \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ud560 \uc218 \uc788\ub294 \uac83\uc744 \ub7f0\ud0c0\uc784\uc73c\ub85c \uc5f0\uae30\ud558\uc9c0 \ub9c8\ub77c.","title":"Example"},{"location":"Philosophy/#enforcement_4","text":"Look for pointer arguments. Look for run-time checks for range violations.","title":"Enforcement"},{"location":"Philosophy/#p6","text":"","title":"P.6: \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc5c6\ub2e4\uba74 \ub7f0\ud0c0\uc784\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4"},{"location":"Philosophy/#reason_5","text":"\ud504\ub85c\uadf8\ub7a8 \uc548\uc5d0 \ucc3e\uae30 \uc5b4\ub824\uc6b4 \uc624\ub958\ub97c \ub0a8\uaca8\ub454\ub2e4\uba74 \ud06c\ub798\uc2dc\ub098 \ub098\uc05c \uacb0\uacfc\ub97c \uc57c\uae30\ud55c\ub2e4.","title":"Reason"},{"location":"Philosophy/#note_6","text":"\uc774\uc0c1\uc801\uc73c\ub85c \uc6b0\ub9ac\ub294 \ucef4\ud30c\uc77c \ud0c0\uc784, \ub7f0\ud0c0\uc784\uc5d0 (\ud504\ub85c\uadf8\ub798\uba38\uc758 \ub17c\ub9ac\uc5d0\uc11c\ub294 \uc624\ub958\uac00 \uc544\ub2cc) \ubaa8\ub4e0 \uc624\ub958\ub97c \ucc3e\uc744 \uc218 \uc788\ub2e4. \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ubaa8\ub4e0 \uc624\ub958\ub97c \ucc3e\uc544\ub0b4\ub294 \uac74 \ubd88\uac00\ub2a5\ud558\uace0 \ub7f0\ud0c0\uc784\uc5d0 \ub0a8\uc544 \uc788\ub294 \ubaa8\ub4e0 \uc624\ub958\ub97c \ucc3e\ub294 \uac83\ub3c4 \ubd88\uac00\ub2a5\ud558\ub2e4. \uadf8\ub7ec\ub098 \ucda9\ubd84\ud55c \ub9ac\uc18c\uc2a4\ub97c \uc900\ub2e4\uba74 \uc6d0\ub860\uc801\uc73c\ub85c \uac80\uc0ac \uac00\ub2a5\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub824\uace0 \ub178\ub825\ud574\uc57c \ud55c\ub2e4. (\ubd84\uc11d \ud504\ub85c\uadf8\ub7a8, \ub7f0\ud0c0\uc784 \uac80\uc0ac, \ucef4\ud4e8\ud130 \ub9ac\uc18c\uc2a4, \uc2dc\uac04)","title":"Note"},{"location":"Philosophy/#example-bad_1","text":"// separately compiled, possibly dynamically loaded extern void f ( int * p ); void g ( int n ) { // bad: the number of elements is not passed to f() f ( new int [ n ]); } \uc5ec\uae30\uc11c \uacb0\uc815\uc801\uc778 \uc815\ubcf4(\uc694\uc18c\uc758 \uac2f\uc218)\uac00 \uc544\uc8fc \ucca0\uc800\ud558\uac8c \uc228\uaca8\uc838 \uc788\uc5b4\uc11c, f() \uac00 ABI\uc758 \uc77c\ubd80\uc77c \ub54c \uc815\uc801 \ubd84\uc11d\uc740 \uc544\ub9c8\ub3c4 \ubd88\uac00\ub2a5\ud574 \ubcf4\uc774\uace0 \ub3d9\uc801 \uac80\uc0ac\ub294 \ub9e4\uc6b0 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \ud574\ub2f9 \ud3ec\uc778\ud130\ub97c \"\uce21\uc815\"\ud560 \uc218 \uc5c6\ub2e4. \ub3c4\uc6c0\uc774 \ub420\ub9cc\ud55c \uc815\ubcf4\ub97c \ub0a8\uc740 \uacf5\uac04\uc5d0 \ub123\uc744 \uc218 \uc788\uc9c0\ub9cc, \uc774\ub294 \uc2dc\uc2a4\ud15c\uc774\ub098 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uac8c \uc804\ubc18\uc801\uc778 \ubcc0\uacbd\uc744 \uc694\uad6c\ud55c\ub2e4. \uc608\uc81c\uc5d0 \uc788\ub294 \ucf54\ub4dc\ub294 \uc624\ub958 \ubc1c\uacac\uc744 \uc544\uc8fc \uc5b4\ub835\uac8c \ub9cc\ub4dc\ub294 \ub514\uc790\uc778\uc774\ub2e4.","title":"Example, bad"},{"location":"Philosophy/#example-bad_2","text":"We can of course pass the number of elements along with the pointer: // separately compiled, possibly dynamically loaded extern void f2 ( int * p , int n ); void g2 ( int n ) { f2 ( new int [ n ], m ); // bad: a wrong number of elements can be passed to f() } \uc778\uc790\ub85c \uc694\uc18c\uc758 \uac2f\uc218\ub97c \uc804\ub2ec\ud558\ub294 \uac83\uc740 \ud3ec\uc778\ud130\ub97c \uc804\ub2ec\ud558\uba74\uc11c \uad00\ub840\uc5d0 \ub530\ub77c \uc694\uc18c\uc758 \uac2f\uc218\ub97c \uad6c\ud558\ub294 \uac83\ubcf4\ub2e4 \ub0ab\ub2e4. \uadf8\ub7ec\ub098, \ub2e8\uc21c\ud788 \ucca0\uc790 \ud558\ub098\ub9cc \ud2c0\ub824\ub3c4 \uc2ec\uac01\ud55c \uc624\ub958\ub97c \uc57c\uae30\ud55c\ub2e4. f2() \uc5d0\uc11c \ub450 \uc778\uc790\uac04\uc758 \uc5f0\uacb0\uc740 \uad6c\uccb4\uc801\uc774\uc9c0 \uc54a\uace0 \uad00\ub840\uc5d0 \ub530\ub978 \uac83\uc774\ub2e4. \uac8c\ub2e4\uac00 f2() \uac00 \uc778\uc790\ub97c delete \ud560 \uac83\uc778\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. (\ud638\ucd9c\uc790\uac00 \ub450\ubc88\uc9f8 \uc2e4\uc218\ub97c \ud55c \uac83\uc778\uac00?)","title":"Example, bad"},{"location":"Philosophy/#example-bad_3","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc788\ub294 \ub9ac\uc18c\uc2a4 \uad00\ub9ac \ud3ec\uc778\ud130\ub294 \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a4\uace0 \uc788\uc744 \ub54c \ud06c\uae30\ub97c \ub118\uae38 \uc218 \uc5c6\ub2e4: // separately compiled, possibly dynamically loaded // NB: this assumes the calling code is ABI-compatible, using a // compatible C++ compiler and the same stdlib implementation extern void f3 ( unique_ptr < int [] > , int n ); void g3 ( int n ) { f3 ( make_unique < int [] > ( n ), m ); // bad: pass ownership and size separately }","title":"Example, bad"},{"location":"Philosophy/#example_6","text":"\ud3ec\uc778\ud130\uc640 \uc694\uc18c\uc758 \uac2f\uc218\ub97c \ud558\ub098\uc758 \uac1c\uccb4\ub85c \ud569\uccd0\uc11c \uc804\ub2ec\ud574\uc57c \ud55c\ub2e4: extern void f4 ( vector < int >& ); // separately compiled, possibly dynamically loaded extern void f4 ( span < int > ); // separately compiled, possibly dynamically loaded // NB: this assumes the calling code is ABI-compatible, using a // compatible C++ compiler and the same stdlib implementation void g3 ( int n ) { vector < int > v ( n ); f4 ( v ); // pass a reference, retain ownership f4 ( span < int > { v }); // pass a view, retain ownership } \uc774 \ub514\uc790\uc778\uc740 \uac1c\uccb4\uc758 \ud544\uc218 \ubd80\ubd84\uc73c\ub85c \uc694\uc18c\uc758 \uac2f\uc218\ub97c \uc804\ub2ec\ud558\ubbc0\ub85c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uace0 \ud56d\uc0c1 \uc800\ub834\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc \ub3d9\uc801(\ub7f0\ud0c0\uc784) \uac80\uc0ac\ub97c \ud560 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Philosophy/#example_7","text":"\uc62c\ubc14\ub978 \uc0ac\uc6a9\uc744 \uc704\ud574 \uc5b4\ub5bb\uac8c \uc18c\uc720\uad8c\uacfc \ubaa8\ub4e0 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uac83\uc778\uac00? vector < int > f5 ( int n ) // OK: move { vector < int > v ( n ); // ... initialize v ... return v ; } unique_ptr < int [] > f6 ( int n ) // bad: loses n { auto p = make_unique < int [] > ( n ); // ... initialize *p ... return p ; } owner < int *> f7 ( int n ) // bad: loses n and we might forget to delete { owner < int *> p = new int [ n ]; // ... initialize *p ... return p ; }","title":"Example"},{"location":"Philosophy/#example_8","text":"??? \ud544\uc694\ud55c \uac83\uc744 \uc2e4\uc81c\ub85c \uc54c\uace0 \uc788\uc744 \ub54c, \ub2e4\ud615 \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \uc804\ub2ec\ud558\ub294 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc5b4\ub5bb\uac8c \uac80\uc0ac\ub97c \ud53c\ud560 \uc218 \uc788\ub294\uc9c0 \ubcf4\uc5ec\uc900\ub2e4. \ub610\ub294 \"\uc790\uc720\ud615\" \uc635\uc158\uc73c\ub85c \ubb38\uc790\uc5f4\uc774 \uc788\ub2e4.","title":"Example"},{"location":"Philosophy/#enforcement_5","text":"(\ud3ec\uc778\ud130, \uac2f\uc218)-\uc2a4\ud0c0\uc77c \uc778\ud130\ud398\uc774\uc2a4\ub77c\uba74 \ud45c\uc2dc\ud55c\ub2e4. (\ud638\ud658\uc131\uc744 \uc774\uc720\ub85c \uace0\uce60 \uc218 \uc5c6\ub294 \ub9ce\uc740 \uc608\uc81c\ub97c \ud45c\uc2dc\ud560 \uac83\uc774\ub2e4.) ???","title":"Enforcement"},{"location":"Philosophy/#p7","text":"","title":"P.7: \ub7f0\ud0c0\uc784 \uc624\ub958\ub294 \ucd08\uae30\uc5d0 \uc7a1\uc544\ub77c"},{"location":"Philosophy/#reason_6","text":"\"\ubbf8\uc2a4\ud130\ub9ac\"\ud55c \ud06c\ub798\uc2dc\ub97c \ud53c\ud55c\ub2e4. (\uc544\ub9c8 \ubab0\ub790\uc744 \uc218\ub3c4 \uc788\ub294) \uc798\ubabb\ub41c \uacb0\uacfc\ub97c \uc57c\uae30\ud558\ub294 \uc624\ub958\ub97c \ud53c\ud55c\ub2e4.","title":"Reason"},{"location":"Philosophy/#example_9","text":"void increment1 ( int * p , int n ) // bad: error-prone { for ( int i = 0 ; i < n ; ++ i ) ++ p [ i ]; } void use1 ( int m ) { const int n = 10 ; int a [ n ] = {}; // ... increment1 ( a , m ); // maybe typo, maybe m <= n is supposed // but assume that m == 20 // ... } \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 use1 \uc5d0 \ub370\uc774\ud130\uac00 \uc190\uc2e4\ub418\uac70\ub098 \ud06c\ub798\uc2dc\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub294 \uc791\uc740 \uc624\ub958\ub97c \ubc94\ud588\ub2e4. (\ud3ec\uc778\ud130, \ud06c\uae30)-\uc2a4\ud0c0\uc77c \uc778\ud130\ud398\uc774\uc2a4\ub294 \ubc94\uc704 \uc624\ub958\uc5d0 \ub300\ud574 increment1() \uc5d0\uc11c \ubc29\uc5b4\ud560 \uc218 \uc788\ub294 \ud604\uc2e4\uc801\uc778 \ubc29\uc548\uc744 \uc5c6\uc560\ubc84\ub9b0\ub2e4. \ubc30\uc5f4 \ucca8\uc790\uac00 \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\ub294\uc9c0 \uac80\uc0ac\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uba74, p[10] \uae4c\uc9c0 \uc624\ub958\uac00 \ubc1c\uacac\ub418\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \uc880 \ub354 \ube68\ub9ac \uac80\uc0ac\ud558\ub3c4\ub85d \ucf54\ub4dc\ub97c \uac1c\uc120\ud574 \ubcf4\uc790: void increment2 ( span < int > p ) { for ( int & x : p ) ++ x ; } void use2 ( int m ) { const int n = 10 ; int a [ n ] = {}; // ... increment2 ({ a , m }); // maybe typo, maybe m <= n is supposed // ... } \uc774\uc81c m<=n \uc740 \ud638\ucd9c \uc2dc\uc810\uc5d0\uc11c (\uc77c\ucc0d) \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \uc6b0\ub9ac\uac00 \uac00\uc9c4 \ubaa8\ub4e0 \uac83\uc774 \uc624\ud0c0\uc774\ubbc0\ub85c n \uc744 \ubc94\uc704\ub85c \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ucf54\ub4dc\ub97c \ub354 \ub2e8\uc21c\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. (\uc624\ub958\uc758 \uac00\ub2a5\uc131 \uc81c\uac70) void use3 ( int m ) { const int n = 10 ; int a [ n ] = {}; // ... increment2 ( a ); // the number of elements of a need not be repeated // ... }","title":"Example"},{"location":"Philosophy/#example-bad_4","text":"\ub3d9\uc77c\ud55c \uac12\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \uac80\uc0ac\ud558\uc9c0 \ub9c8\ub77c. \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130\ub97c \ubb38\uc790\uc5f4\ub85c \ub118\uae30\uc9c0 \ub9c8\ub77c: Date read_date ( istream & is ); // read date from istream Date extract_date ( const string & s ); // extract date from string void user1 ( const string & date ) // manipulate date { auto d = extract_date ( date ); // ... } void user2 () { Date d = read_date ( cin ); // ... user1 ( d . to_string ()); // ... } ( Date \uc0dd\uc131\uc790\uc5d0 \uc758\ud574) \ub0a0\uc9dc\uac00 \ub450 \ubc88 \uacc4\uc0b0\ub418\uace0 (\ube44\uad6c\uc870\ud654\ub41c \ub370\uc774\ud130\uc778) \ubb38\uc790\uc5f4\ub85c \uc804\ub2ec\ub41c\ub2e4.","title":"Example, bad"},{"location":"Philosophy/#example_10","text":"\uc9c0\ub098\uce5c \uac80\uc0ac\ub294 \ube44\uc6a9\uc774 \ub9ce\uc774 \ub4e0\ub2e4. \uac12\uc774 \ud544\uc694\ud55c\uc9c0\ub3c4 \ubaa8\ub974\uae30 \ub54c\ubb38\uc5d0 \uc77c\ucc0d \uac80\uc0ac\ud558\ub294 \uac83\uc774 \uc548 \uc88b\uc740 \uacbd\uc6b0\ub3c4 \uc788\uace0 \uc804\uccb4\uac00 \uc544\ub2cc \uac12\uc758 \uc77c\ubd80\ub9cc \uac80\uc0ac\ud558\ub294 \uac83\uc774 \uc26c\uc6b4 \uacbd\uc6b0\ub3c4 \uc788\ub2e4. Similarly, don't add validity checks that change the asymptotic behavior of your interface (e.g., don't add a O(n) check to an interface with an average complexity of O(1) ). class Jet { // Physics says: e * e < x * x + y * y + z * z float x ; float y ; float z ; float e ; public : Jet ( float x , float y , float z , float e ) : x ( x ), y ( y ), z ( z ), e ( e ) { // Should I check here that the values are physically meaningful? } float m () const { // Should I handle the degenerate case here? return sqrt ( x * x + y * y + z * z - e * e ); } ??? }; \uc81c\ud2b8\uae30\uc5d0 \ub300\ud55c \ubb3c\ub9ac\uc801 \ubc95\uce59( e * e < x * x + y * y + z * z )\uc740 \uce21\uc815 \uc624\ub958\uc758 \uac00\ub2a5\uc131 \ub54c\ubb38\uc5d0 \uac12\uc774 \ubc14\ub014 \uc218 \uc788\ub2e4. ???","title":"Example"},{"location":"Philosophy/#enforcement_6","text":"\ud3ec\uc778\ud130\uc640 \ubc30\uc5f4\uc744 \ucc3e\uc544\ub77c: \ubc94\uc704\ub97c \ube68\ub9ac \uac80\uc0ac\ud558\uace0 \ubc18\ubcf5\ub418\uc9c0 \uc54a\uac8c \ud558\ub77c. \ud0c0\uc785 \ubcc0\ud658\uc744 \ucc3e\uc544\ub77c: \ucd95\uc18c \ubcc0\ud658\uc744 \ud45c\uc2dc\ud558\uac70\ub098 \uc81c\uac70\ud558\ub77c. \uc785\ub825\ub41c \uac12 \uc911 \uac80\uc0ac\ub418\uc9c0 \uc54a\uc740 \uac12\uc744 \ucc3e\uc544\ub77c. \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ub418\uace0 \uc788\ub294 \uad6c\uc870\ud654\ub41c \ub370\uc774\ud130(\ubd88\ubcc0 \uc870\uac74\uc744 \uac16\ub294 \ud074\ub798\uc2a4\uc758 \uac1c\uccb4)\ub97c \ucc3e\uc544\ub77c. ???","title":"Enforcement"},{"location":"Philosophy/#p8","text":"","title":"P.8: \ub9ac\uc18c\uc2a4\uac00 \uc0c8\ub3c4\ub85d \ud558\uc9c0 \ub9c8\ub77c"},{"location":"Philosophy/#reason_7","text":"Even a slow growth in resources will, over time, exhaust the availability of those resources. This is particularly important for long-running programs, but is an essential piece of responsible programming behavior.","title":"Reason"},{"location":"Philosophy/#example-bad_5","text":"void f ( char * name ) { FILE * input = fopen ( name , \"r\" ); // ... if ( something ) return ; // bad: if something == true, a file handle is leaked // ... fclose ( input ); } RAII \ub97c \uc0ac\uc6a9\ud55c \uac1c\uc120: void f ( char * name ) { ifstream input { name }; // ... if ( something ) return ; // OK: no leak // ... } See also : \ub9ac\uc18c\uc2a4 \uad00\ub9ac","title":"Example, bad"},{"location":"Philosophy/#note_7","text":"A leak is colloquially \"anything that isn't cleaned up.\" The more important classification is \"anything that can no longer be cleaned up.\" For example, allocating an object on the heap and then losing the last pointer that points to that allocation. This rule should not be taken as requiring that allocations within long-lived objects must be returned during program shutdown. For example, relying on system guaranteed cleanup such as file closing and memory deallocation upon process shutdown can simplify code. However, relying on abstractions that implicitly clean up can be as simple, and often safer.","title":"Note"},{"location":"Philosophy/#note_8","text":"Enforcing the lifetime safety profile eliminates leaks. When combined with resource safety provided by RAII , it eliminates the need for \"garbage collection\" (by generating no garbage). Combine this with enforcement of the type and bounds profiles and you get complete type- and resource-safety, guaranteed by tools.","title":"Note"},{"location":"Philosophy/#enforcement_7","text":"\ud3ec\uc778\ud130\ub97c \uc0b4\ud3b4\ubd10\ub77c: \uc18c\uc720\uc790\uc640 \ube44\uc18c\uc720\uc790\ub85c \uad6c\ubd84\ud574\ub77c. \uac00\ub2a5\ud558\ub2e4\uba74 \uc18c\uc720\uc790\ub97c (\uc704\uc758 \uc608\uc81c\ucc98\ub7fc) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub9ac\uc18c\uc2a4 \ud578\ub4e4\ub85c \ubc14\uafd4\ub77c. \ub610\ub294 GSL \uc5d0\uc11c owner \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\ucc98\ub7fc \uc18c\uc720\uc790\ub97c \ud45c\uc2dc\ud558\ub77c. \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 new , delete \ub97c \ucc3e\uc544\ub77c. \ucc98\ub9ac\ub418\uc9c0 \uc54a\uc740 \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub294 \uc798 \uc54c\ub824\uc9c4 \ub9ac\uc18c\uc2a4 \ud560\ub2f9 \ud568\uc218\ub97c \ucc3e\uc544\ub77c. (\uc608\ub97c \ub4e4\uc5b4, fopen , malloc , strdup )","title":"Enforcement"},{"location":"Philosophy/#p9","text":"","title":"P.9: \uc2dc\uac04\uc774\ub098 \uacf5\uac04\uc744 \ub0ad\ube44\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Philosophy/#reason_8","text":"\uc774\uac83\uc774 C++\uc774\ub2e4.","title":"Reason"},{"location":"Philosophy/#note_9","text":"\uc5b4\ub5a4 \ubaa9\ud45c(\uc608\ub97c \ub4e4\uc5b4, \uac1c\ubc1c \uc18d\ub3c4, \ub9ac\uc18c\uc2a4 \uc548\uc804\uc131, \ub610\ub294 \ud14c\uc2a4\ud2b8 \ub2e8\uc21c\ud654)\ub97c \ub2ec\uc131\ud558\uae30 \uc704\ud574 \uc18c\ubaa8\ud558\ub294 \uc2dc\uac04\uacfc \uacf5\uac04\uc740 \ub0ad\ube44\uac00 \uc544\ub2c8\ub2e4. \"\ud6a8\uc728\uc131\uc744 \uc704\ud574 \ub178\ub825\ud560 \ub54c \uc5bb\uc744 \uc218 \uc788\ub294 \ub610\ub2e4\ub978 \uc774\uc810\uc740 \uadf8\ub7ec\ud55c \ud589\uc704\uac00 \ubb38\uc81c\ub97c \ub354 \uae4a\uc774 \uc774\ud574\ud560 \uc218 \uc788\ub3c4\ub85d \uac15\uc81c\ud55c\ub2e4\ub294 \uac81\ub2c8\ub2e4.\" - Alex Stepanov","title":"Note"},{"location":"Philosophy/#example-bad_6","text":"struct X { char ch ; int i ; string s ; char ch2 ; X & operator = ( const X & a ); X ( const X & ); }; X waste ( const char * p ) { if ( ! p ) throw Nullptr_error {}; int n = strlen ( p ); auto buf = new char [ n ]; if ( ! buf ) throw Allocation_error {}; for ( int i = 0 ; i < n ; ++ i ) buf [ i ] = p [ i ]; // ... manipulate buffer ... X x ; x . ch = 'a' ; x . s = string ( n ); // give x.s space for *p for ( gsl :: index i = 0 ; i < x . s . size (); ++ i ) x . s [ i ] = buf [ i ]; // copy buf into x.s delete [] buf ; return x ; } void driver () { X x = waste ( \"Typical argument\" ); // ... } \uadf8\ub807\ub2e4. \ud48d\uc790\ub97c \uc704\ud55c \uc608\uc81c\uc774\uae30\ub294 \ud558\uc9c0\ub9cc, \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c \uc774\ubcf4\ub2e4 \uc2ec\uac01\ud55c \uc2e4\uc218\ub3c4 \ubcf8 \uc801\uc774 \uc788\ub2e4. X \uc758 \ub808\uc774\uc544\uc6c3\uc5d0 (\ub354 \ub9ce\uc744\uc9c0\ub3c4 \ubaa8\ub974\uc9c0\ub9cc) \uc801\uc5b4\ub3c4 6\ubc14\uc774\ud2b8\uc758 \ub0ad\ube44\uac00 \uc788\ub2e4\ub294 \uc810\uc744 \uc8fc\ubaa9\ud558\ub77c. \ubcf5\uc0ac \uc5f0\uc0b0\uc744 \uadf8\ub7f4\uc2f8\ud558\uac8c \uc815\uc758\ud574 \ub450\ub2e4 \ubcf4\ub2c8 \uc774\ub3d9 \uc5f0\uc0b0\uc774 \ube44\ud65c\uc131\ud654 \ub428\uc73c\ub85c\uc368 \ubc18\ud658 \uc5f0\uc0b0\uc774 \ub290\ub824\uc84c\ub2e4(\uc5ec\uae30\uc5d0\uc120 \ubc18\ud658\uac12 \ucd5c\uc801\ud654(Return Value Optimization, RVO)\uac00 \ubcf4\uc7a5\ub418\uc9c0 \uc54a\uc74c\uc5d0 \uc8fc\ubaa9\ud558\ub77c). buf \uc5d0\uc11c new , delete \uc758 \uc0ac\uc6a9\uc774 \uc911\ubcf5\ub41c\ub2e4. \uc9c4\uc9dc \uc9c0\uc5ed \ubb38\uc790\uc5f4\uc744 \uc6d0\ud588\ub2e4\uba74, string \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud588\uc744 \uac83\uc774\ub2e4. \ub354 \ub9ce\uc740 \uc131\ub2a5 \ubc84\uadf8\uc640 \uc0c1\ud669\uc744 \ub354 \ubcf5\uc7a1\ud558\uac8c \ub9cc\ub4dc\ub294 \ubd88\ud544\uc694\ud55c \ubb38\uc81c\uac00 \uc788\ub2e4.","title":"Example, bad"},{"location":"Philosophy/#example-bad_7","text":"void lower ( zstring s ) { for ( int i = 0 ; i < strlen ( s ); ++ i ) s [ i ] = tolower ( s [ i ]); } \uadf8\ub807\ub2e4, \uc774\uac83\uc740 \uc2e4\uc81c \ucf54\ub4dc\ub85c\ubd80\ud130 \uac00\uc838\uc628 \uc608\uc81c\uc774\ub2e4. \uc6b0\ub9ac\ub294 \uc774 \uc608\uc81c\ub97c \ub3c5\uc790\uac00 \uc9c1\uc811 \ubb34\uc5c7\uc774 \ub0ad\ube44\ub418\ub294\uc9c0 \ucc3e\uac8c \ud558\uae30 \uc704\ud574 \ub0a8\uaca8\ub454\ub2e4.","title":"Example, bad"},{"location":"Philosophy/#note_10","text":"\ub0ad\ube44\uc5d0 \ub300\ud55c \uac01 \uc608\uc81c\ub294 \ubcc4\ub85c \uc911\uc694\ud558\uc9c0 \uc54a\ub2e4. \uadf8\ub9ac\uace0 \uc911\uc694\ud588\ub2e4\uba74 \uc774\ubbf8 \uc804\ubb38\uac00\ub4e4\uc774 \uc27d\uac8c \uc81c\uac70\ud588\uc744 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ucf54\ub4dc \uc804\uccb4\uc5d0 \uac78\uccd0 \ub0ad\ube44\uac00 \ud37c\uc838\ubc84\ub9ac\uba74 \uc911\uc694\ud574 \uc9c8 \uc218 \uc788\uace0, \ub0ad\ube44\ub97c \uc81c\uac70\ud558\uae30 \uc704\ud574\uc11c \uc804\ubb38\uac00\ub4e4\uc744 \ud56d\uc0c1 \uc6d0\ud558\ub294\ub370\ub85c \ub370\ub824\uc62c \uc218\ub294 \uc5c6\ub2e4. \uc774 \uaddc\uce59(\uadf8\ub9ac\uace0 \ubcf4\ub2e4 \uad6c\uccb4\uc801\uc778 \uaddc\uce59)\uc758 \ubaa9\uc801\uc740 C++ \uc0ac\uc6a9\uacfc \uad00\ub828\ub41c \ub300\ubd80\ubd84\uc758 \ub0ad\ube44\ub97c \ubc1c\uc0dd\ud558\uae30 \uc804\uc5d0 \uc5c6\uc560\uae30 \uc704\ud574\uc11c\ub2e4. \uadf8 \ud6c4\uc5d0 \uc54c\uace0\ub9ac\uc998\uc774\ub098 \uc694\uad6c \uc0ac\ud56d\uacfc \uad00\ub828\ub41c \ub0ad\ube44\ub97c \uc0b4\ud3b4\ubcfc \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uadf8\uac74 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubc94\uc704\ub97c \ubc97\uc5b4\ub09c\ub2e4.","title":"Note"},{"location":"Philosophy/#enforcement_8","text":"\ub354 \ub9ce\uc740 \ud2b9\uc815 \uaddc\uce59\ub4e4\uc740 \uc4f8\ub370\uc5c6\ub294 \ub0ad\ube44\uc758 \ub2e8\uc21c\ud654\uc640 \uc81c\uac70\ub97c \uc804\ubc18\uc801\uc778 \ubaa9\ud45c\ub85c \ud558\uace0 \uc788\ub2e4. * \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \uae30\ubcf8 \uc815\uc758\uac00 \uc544\ub2cc \uc811\ubbf8 \uc5f0\uc0b0\uc790 ++ \ub610\ub294 -- \ud568\uc218\uc758 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 \ubc18\ud658\uac12\uc5d0 \ud45c\uc2dc\ub97c \ud55c\ub2e4. \ub300\uc2e0 \uc811\ub450 \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. (\uc8fc\uc758: \"\uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \uae30\ubcf8 \uc815\uc758\uac00 \uc544\ub2cc\"\uc740 \uc7a1\uc74c\uc744 \uc904\uc774\ub824\ub294 \uc758\ub3c4\uac00 \uc788\ub2e4. \uc2e4\uc0ac\uc6a9\uc5d0\uc11c \uc5ec\uc804\ud788 \ub108\ubb34 \uc7a1\uc74c\uc774 \ub9ce\uc744\ub54c, \uc774 \uc2dc\ud589\uc744 \uac80\ud1a0\ud558\ub77c.)","title":"Enforcement"},{"location":"Philosophy/#p10","text":"","title":"P.10: \ubcc0\uacbd \uac00\ub2a5\ud55c \ub370\uc774\ud130\ubcf4\ub2e4 \ubd88\ubcc0\uc758 \ub370\uc774\ud130\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Philosophy/#reason_9","text":"\ubcc0\uc218\ubcf4\ub2e4\ub294 \uc0c1\uc218\uc5d0 \ub300\ud55c \uac83\uc774 \ucd94\ub860\uc744 \ud558\uae30\uac00 \ub354 \uc27d\ub2e4. \ubd88\ubcc0\ud55c \uac83\uc740 \uc608\uc0c1\uce58 \ubabb\ud558\uac8c \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub54c\ub54c\ub85c \ubd88\ubcc0\uc131\uc740 \ub354 \ub098\uc740 \ucd5c\uc801\ud654\uac00 \uac00\ub2a5\ud558\uac8c \ud55c\ub2e4. \ub2f9\uc2e0\uc740 \uc0c1\uc218\ub97c \uacbd\uc7c1\uc0c1\ud0dc(Race condition)\ub85c \ub9cc\ub4e4 \uc218 \uc5c6\ub2e4. Con: \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 \uc744 \ucc38\uc870\ud558\ub77c.","title":"Reason"},{"location":"Philosophy/#p11","text":"","title":"P.11: \uc9c0\uc800\ubd84\ud55c \uad6c\uc870\uac00 \ucf54\ub4dc\ub97c \ud1b5\ud574 \ud37c\uc9c0\uae30 \ubcf4\ub2e8, \ucea0\uc290\ud654\ub97c \ud558\ub77c."},{"location":"Philosophy/#reason_10","text":"\uc9c0\uc800\ubd84\ud55c \ucf54\ub4dc\ub294 \ubc84\uadf8\ub97c \uc228\uae30\uace0 \uc4f0\uae30\uac00 \ub354 \uc5b4\ub835\ub2e4. \uc88b\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub294 \uc0ac\uc6a9\ud558\uae30 \ub354 \uc27d\uace0 \ub354 \uc548\uc804\ud558\ub2e4. \uc9c0\uc800\ubd84\ud55c, \uc800\uc218\uc900\uc758 \ucf54\ub4dc\ub294 \uadf8\ub7f0 \ucf54\ub4dc\ub97c \ub354 \ub9ce\uc774 \ub0b3\ub294\ub2e4.","title":"Reason"},{"location":"Philosophy/#example_11","text":"int sz = 100 ; int * p = ( int * ) malloc ( sizeof ( int ) * sz ); int count = 0 ; // ... for (;;) { // ... read an int into x, exit loop if end of file is reached ... // ... check that x is valid ... if ( count == sz ) p = ( int * ) realloc ( p , sizeof ( int ) * sz * 2 ); p [ count ++ ] = x ; // ... } \uc774 \uac83\uc740 \uc800\uc218\uc900\uc774\uace0, \uc7a5\ud669\ud558\uba70, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc6b0\ub9ac\ub294 \uba54\ubaa8\ub9ac \uc18c\ubaa8\ub97c \ud14c\uc2a4\ud2b8\ud558\ub294 \uac83\uc744 \uc78a\uc5c8\ub2e4. \ub300\uc2e0, \uc6b0\ub9ac\ub294 vector \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5c8\ub2e4: vector < int > v ; v . reserve ( 100 ); // ... for ( int x ; cin >> x ; ) { // ... check that x is valid ... v . push_back ( x ); }","title":"Example"},{"location":"Philosophy/#note_11","text":"\ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 GSL\uc740 \uc774\ub7f0 \ucca0\ud559\uc758 \uc608\ub4e4 \uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, vector , span , lock_guard , future \uc640 \uac19\uc774 \ud575\uc2ec\uc801\uc778 \ucd94\uc0c1\ud654 \uad6c\ud604\uc5d0 \ud544\uc694\ud55c, \ubc30\uc5f4\ub4e4\uacfc \uc720\ub2c8\uc628\ub4e4, \uce90\uc2a4\ud305, \uae4c\ub2e4\ub85c\uc6b4 \uc0dd\uba85\uc8fc\uae30 \ubb38\uc81c, gsl::owner \ub4f1\uc73c\ub85c \uc9c0\uc800\ubd84\ud558\uac8c \ud558\ub294 \ub300\uc2e0, \uc6b0\ub9ac\ub294 \uc6b0\ub9ac\ubcf4\ub2e4 \uc804\ubb38\uc801\uc774\uace0 \ub354 \ub9ce\uc740 \uc2dc\uac04\uc744 \ud22c\uc790\ud55c \uc0ac\ub78c\ub4e4\uc774 \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \ub9c8\ucc2c\uac00\uc9c0\ub85c, \uc6b0\ub9ac\ub294 \uc0ac\uc6a9\uc790\ub4e4(\ud754\ud788 \uc6b0\ub9ac \uc790\uc2e0)\uc744 \ubc18\ubcf5\uc801\uc73c\ub85c \ub0ae\uc740 \uc218\uc900\uc758 \ucf54\ub4dc\ub97c \uc5bb\uae30 \uc26c\uc6b4 \ud658\uacbd\uc5d0 \ubc84\ub824\ub450\uc9c0 \ub9d0\uace0, \ub354 \uc804\ubb38\ud654\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud574\uc57c\ud558\uace0 \ud560 \uc218 \uc788\ub2e4. \uc774\uac83\uc740 \ubcf8 \uc9c0\uce68\uc758 \uae30\ucd08\uac00 \ub418\ub294 subset of superset principle \uc758 \ubcc0\ud615\uc774\ub2e4.","title":"Note"},{"location":"Philosophy/#enforcement_9","text":"\ubcf5\uc7a1\ud55c \ud3ec\uc778\ud130 \uc870\uc791\uc774\ub098 \ucd94\uc0c1\ud654 \uad6c\ud604 \ubc16\uc5d0\uc11c\uc758 \uce90\uc2a4\ud305 \uac19\uc740 \"\uc9c0\uc800\ubd84\ud55c \ucf54\ub4dc\"\ub97c \ucc3e\uc544\ubd10\ub77c.","title":"Enforcement"},{"location":"Philosophy/#p12","text":"","title":"P.12: \ud544\uc694\uc5d0 \ub9de\uac8c \uc9c0\uc6d0 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Philosophy/#reason_11","text":"\"\uae30\uacc4\uc5d0 \uc758\ud574\" \ub354 \uc798 \ub420 \uc218 \uc788\ub294 \ub9ce\uc740 \uac83\ub4e4\uc774 \uc788\ub2e4. \ucef4\ud4e8\ud130\ub294 \ubc18\ubcf5\uc801\uc778 \uc791\uc5c5\uc5d0 \uc758\ud574 \uc9c0\uce58\uac70\ub098 \uc9c0\ub8e8\ud574 \ud558\uc9c0 \uc54a\ub294\ub2e4. \uc6b0\ub9ac\ub294 \uc77c\ubc18\uc801\uc73c\ub85c \ubc18\ubcf5\uc801\uc774\uace0 \uc9c0\ub8e8\ud55c \uc77c\uc744 \ud558\ub294 \uac83\ubcf4\ub2e4 \ub354 \ub098\uc740 \uc77c\uc744 \ud55c\ub2e4.","title":"Reason"},{"location":"Philosophy/#example_12","text":"\uc815\uc801 \ubd84\uc11d\uae30\ub97c \uc2e4\ud589\ud558\uc5ec \ucf54\ub4dc\uac00 \uc6d0\ud558\ub294 \uc9c0\uce68(Guideline)\uc744 \ub530\ub974\ub294 \uc9c0 \ud655\uc778\ud558\ub77c.","title":"Example"},{"location":"Philosophy/#note_12","text":"\ub2e4\uc74c\uc744 \ucc38\uace0\ud558\ub77c. \uc815\uc801 \ubd84\uc11d \ub3c4\uad6c\ub4e4 \ub3d9\uc2dc\uc131 \ub3c4\uad6c\ub4e4 \ud14c\uc2a4\ud305 \ub3c4\uad6c\ub4e4 \uc18c\uc2a4\ucf54\ub4dc \uc800\uc7a5\uc18c\ub4e4, \ube4c\ub4dc \ub3c4\uad6c\ub4e4\ub4f1\uacfc \uac19\uc740 \ub9ce\uc740 \ub2e4\ub978 \uc885\ub958\uc758 \ub3c4\uad6c\ub4e4\uc774 \uc788\ub2e4. \uadf8\ub7ec\ub098 \uadf8\uac83\ub4e4\uc5d0 \ub300\ud574 \uc124\uba85\ud558\ub294 \uac83\uc740 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubc94\uc704\ub97c \ubc97\uc5b4\ub09c\ub2e4.","title":"Note"},{"location":"Philosophy/#note_13","text":"\uc9c0\ub098\uce58\uac8c \uc815\uad50\ud558\uac70\ub098 \uc9c0\ub098\uce58\uac8c \ud2b9\uc218\ud654 \ub41c \ud234 \uccb4\uc778\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud558\ub77c. \uadf8\uac83\ub4e4\uc740 \ub2f9\uc2e0\uc758 \uc774\uc2dd\uac00\ub2a5\ud55c \ucf54\ub4dc\ub97c \uc774\uc2dd\uc774 \ubd88\uac00\ub2a5\ud558\ub3c4\ub85d \ub9cc\ub4e4 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Philosophy/#p13","text":"","title":"P.13: \ud544\uc694\uc5d0 \ub9de\uac8c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Philosophy/#reason_12","text":"\uc798 \uc124\uacc4\ub418\uace0(well-designed), \uc798 \ubb38\uc11c\ud654\ub41c(well-documented) \uadf8\ub9ac\uace0 \uc798 \uc9c0\uc6d0\ub418\ub294(well-supported) \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc2dc\uac04\uacfc \ub178\ub825\uc744 \uc808\uc57d\ud55c\ub2e4. \ub9cc\uc57d\uc5d0 \ub2f9\uc2e0\uc758 \ub300\ubd80\ubd84\uc758 \uc2dc\uac04\uc744 \uad6c\ud604\uc5d0 \uc368\uc57c\ub9cc \ud55c\ub2e4\uba74, \uc774\uac83\uc758 \ud488\uc9c8\uacfc \ubb38\uc11c\ub294 \ub2f9\uc2e0\uc774 \ub9cc\ub4dc\ub294 \uac83\ubcf4\ub2e4 \ub354 \uc88b\uc744 \uac83\uc774\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ube44\uc6a9(\uc2dc\uac04, \ub178\ub825, \ub3c8, \ub4f1\ub4f1)\uc740 \ub9ce\uc740 \uc0ac\uc6a9\uc790\ub4e4\uacfc \uacf5\uc720\ub420 \uc218 \uc788\ub2e4. \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uac1c\uac1c\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc5d0 \ube44\ud574, \ucd5c\uc2e0\uc73c\ub85c \uc720\uc9c0\ub418\uace0 \uc0c8\ub85c\uc6b4 \uc2dc\uc2a4\ud15c\uc5d0 \ud3ec\ud305\uc774 \ub354 \uc798\ub418\uc5b4 \uc788\uc744 \uac83\uc774\ub2e4. \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub2e4\ub978/\ubbf8\ub798\uc758 \ud504\ub85c\uc81d\ud2b8\ub4e4\uc758 \uc2dc\uac04\uc744 \uc808\uc57d\ud560 \uc218 \uc788\ub2e4. \uadf8\ub7ec\ubbc0\ub85c, \ub9cc\uc57d\uc5d0 \ub2f9\uc2e0\uc758 \uc751\uc6a9 \ub3c4\uba54\uc778(Domain)\uc5d0 \uc801\ud569\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc788\uc73c\uba74 \uadf8\uac83\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Reason"},{"location":"Philosophy/#example_13","text":"std :: sort ( begin ( v ), end ( v ), std :: greater <> ()); \ub2f9\uc2e0\uc774 \uc815\ub82c \uc54c\uace0\ub9ac\uc998\ub4e4\uc5d0 \ub300\ud55c \uc804\ubb38\uac00\uc774\uac70\ub098 \uc2dc\uac04\uc774 \ub9ce\uc774 \uc788\uc9c0 \uc54a\uc740 \uc774\uc0c1, \uc774 \ucf54\ub4dc\ub294 \ub2f9\uc2e0\uc774 \ud2b9\uc815\ud55c \uc751\uc6a9\uc744 \uc704\ud574 \uc791\uc131\ud55c \uadf8 \uc5b4\ub5a4 \uac83\ubcf4\ub2e4 \ub354 \uc815\ud655\ud558\uace0 \ube60\ub974\uac8c \ub3d9\uc791\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 \uc9c1\uc811 \uc791\uc131\ud55c \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud558\ub824\uba74, \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac(\ub610\ub294 \ub2f9\uc2e0\uc758 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc774 \uc0ac\uc6a9\ud558\ub294 \uadf8 \uc5b4\ub5a4 \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4)\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744 \uc774\uc720\uac00 \ud544\uc694\ud558\ub2e4.","title":"Example"},{"location":"Philosophy/#note_14","text":"\uae30\ubcf8\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \uac83 ISO C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ub77c\uc774\ube0c\ub7ec\ub9ac \uc9c0\uc6d0 \uc9c0\uce68\ub4e4","title":"Note"},{"location":"Philosophy/#note_15","text":"\ub9cc\uc57d\uc5d0 \uc798 \uc124\uacc4\ub418\uace0, \uc798 \ubb38\uc11c\ud654\ub418\uace0, \uc798 \uc9c0\uc6d0\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc911\uc694\ud55c \ub3c4\uba54\uc778\uc5d0 \uc5c6\ub2e4\uba74, \uc544\ub9c8\ub3c4 \ub2f9\uc2e0\uc740 \uadf8\uac83\uc744 \uc124\uacc4\ud558\uace0 \uad6c\ud604\ud55c \ub4a4, \uc0ac\uc6a9\ud574\uc57c \ud560 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Profile/","text":"Pro: \ud504\ub85c\ud544(Profiles) \uc774\uc0c1\uc801\uc73c\ub85c\ub294 \uc6b0\ub9ac\uc758 \ucf54\ub4dc\uac00 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubaa8\ub4e0 \uaddc\uce59\uc744 \ub530\ub97c \uac83\uc774\ub2e4. \uadf8\ub807\uac8c \ud568\uc73c\ub85c\uc368 \uae54\ub054\ud558\uace0, \uaddc\uce59\uc801\uc774\uba74\uc11c \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\uc9c0\ub3c4 \uc54a\uc740 \ucf54\ub4dc\uac00 \ub420 \uac83\uc774\ub2e4. \uc5b4\uca4c\uba74 \uac00\uc7a5 \ube60\ub978 \ucf54\ub4dc\uac00 \ub420\uc218\ub3c4 \uc788\ub2e4. \ubd88\ud589\ud558\uac8c\ub3c4, \uadf8\ub807\uac8c \ub418\ub294\uac83\uc740 \ubd88\uac00\ub2a5\uc5d0 \uac00\uae4c\uc6b4\ub370, \ubcf4\ud1b5 \uc6b0\ub9ac\uac00 \uc791\uc131\ud558\ub294 \ucf54\ub4dc\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ucf54\ub4dc\ub4e4\uc5d0 \ub9de\ucd94\uac70\ub098 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7f0 \ucf54\ub4dc\uac00 \uc218\uc2ed\ub144\uac04 \uc791\uc131\ub418\uc5b4 \uc654\uace0, \uadf8 \ucf54\ub4dc\ub4e4\uc740 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4. \uc810\uc9c4\uc801\uc73c\ub85c \uc801\uc6a9 \ud558\ub294 \uac83\uc744 \ubaa9\ud45c\ud574\uc57c \ud55c\ub2e4. \uc810\uc9c4\uc801\uc73c\ub85c \uc801\uc6a9\ud558\uae30 \uc704\ud55c \uc804\ub7b5\uc774 \ubb34\uc5c7\uc774\ub358\uac04\uc5d0, \uc5b4\ub5a4 \ubb38\uc81c\ub4e4\uc5d0 \uc77c\ub828\uc758 \uc11c\ub85c \uc5f0\uad00\ub41c \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uac8c \ub418\uace0, \ub098\uba38\uc9c0 \ubb38\uc81c\ub4e4\uc740 \ub098\uc911\uc744 \uc704\ud574 \ub0a8\uaca8\ub193\uc744 \ud544\uc694\uac00 \uc788\ub2e4. \uc5b8\uc81c\ub098 \uadf8\ub7f0 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc \"\uc5f0\uad00\ub41c \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\"\uacfc \uac19\uc740 \uc0dd\uac01\uc774 \uc911\uc694\ud560 \ub584\uac00 \uc788\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc774\ubbf8 \uc791\uc131\ub41c \ucf54\ub4dc(code base)\uc640 \uad00\ub828\uc788\ub2e4\uace0 \uc5ec\uaca8\uc9c0\uac70\ub098 \ud2b9\ubcc4\ud55c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \uc601\uc5ed\uc5d0 \uc801\uc6a9\ub418\uae30 \uc704\ud55c \uc77c\ub828\uc758 \ud2b9\ubcc4\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc801\uc6a9\ub418\uba74 \uc6b0\ub9ac\ub294 \uadf8\ub7f0 \uac00\uc774\ub4dc\ub77c\uc778 \ubb36\uc74c\ub4e4\uc744 \"\ud504\ub85c\ud544\"\uc774\ub77c\uace0 \ubd80\ub978\ub2e4. \uc6b0\ub9ac\uc758 \uc758\ub3c4\ub294 \uc774\ub7f0 \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc774 \uc77c\uad00\uc131\uc744 \uac00\uc9c0\uace0 \"\ubc94\uc704 \uc624\ub958\ub4e4\uc744 \uc5c6\uc560\ub294 \uac83\"\uc774\ub098 \"\uc815\uc801 \ud0c0\uc785 \uc548\uc804\uc131\"\uacfc \uac19\uc740 \ud2b9\uc815\ud55c \ubaa9\uc801\uc744 \uc774\ub8e8\ub294 \uac83\uc744 \ub3d5\ub294 \uac83\uc774\ub2e4. \uac01 \ud504\ub85c\ud544\ub4e4\uc740 \uc624\ub958\uc758 \ud55c \uc885\ub958(class)\ub97c \uc5c6\uc560\uae30 \uc704\ud574 \uc124\uacc4\ub418\uc5c8\ub2e4. \uac1c\ubcc4\uc801\uc778 \uaddc\uce59\uc744\uc744 \"\uc544\ubb34\uac70\ub098\" \ub530\ub974\ub294 \uac83\uc740 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ucf54\ub4dc\uc5d0 \ud574\ub2f9 \uaddc\uce59\uc5d0\uc11c \uc815\uc758\ud558\ub294 \uac1c\uc120(improvement)\ubcf4\ub2e4 \uad50\ub780(disruptive)\uc744 \ub0b3\uc744 \uac00\ub2a5\uc131\uc774 \ud06c\ub2e4. \"\ud504\ub85c\ud544\"\uc740 \uacb0\uc815\ub860\uc801(deterministic)\uc774\uace0 \uc5b4\ub514\uc5d0\uc11c\ub3c4 \uc801\uc6a9 \uac00\ub2a5(portably enforceable)\ud558\uba70 \ud2b9\uc815\ud55c \ubcf4\uc99d(specific guarantee)\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud574 \uc124\uacc4\ub41c \uaddc\uce59(\uc989, \uaddc\uc815)\ub4e4\uc758 \ubd80\ubd84\uc9d1\ud569\uc744 \ub9d0\ud55c\ub2e4. \"\uacb0\uc815\ub860\uc801\"\uc774\ub77c\ub294 \ud45c\ud604\uc758 \uc758\ubbf8\ub294 \uc9c0\uc5ed\uc801\uc778 \ubd84\uc11d\ub9cc\uc744 \ud544\uc694\ub85c \ud558\uace0 \ucef4\ud30c\uc77c\ub7ec \uc548\uc5d0\uc11c \uad6c\ud604\ud560 \uc218 \uc788\ub294 \uac83(\ube44\ub85d \uadf8\ub7f4 \ud544\uc694\uac00 \uc5c6\ub354\ub77c\ub3c4)\uc744 \uc758\ubbf8\ud55c\ub2e4. \"\uc5b4\ub514\uc5d0\ub3c4 \uc801\uc6a9\uac00\ub2a5\"\ud558\ub2e4\ub294 \ud574\ub2f9 \uaddc\uce59\ub4e4\uc774 \uc5b8\uc5b4\uc758 \uaddc\uce59\uacfc \ube44\uc2b7\ud558\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. \ub530\ub77c\uc11c \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc740 \uac19\uc740 \ucf54\ub4dc\uc5d0 \ub300\ud574\uc11c \uac19\uc740 \ud574\ub2f5\uc744 \uc81c\uc2dc\ud558\ub294 \uc11c\ub85c \ub2e4\ub978 \ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc5b8\uc5b4 \ud504\ub85c\ud544\uc744 \uc0ac\uc6a9\ud574 \uacbd\uace0\uac00 \uc5c6\ub3c4\ub85d \uc791\uc131\ub41c \ucf54\ub4dc\ub294 \ud504\ub85c\ud544\uc5d0 \ubd80\ud569\ud558\ub294(conform) \uac83\uc73c\ub85c \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. \ud504\ub85c\ud544\uc5d0 \ubd80\ud569\ud558\ub294 \ucf54\ub4dc\ub294 \uc791\uc131\ud558\ub294 \uc21c\uac04\ubd80\ud130 \ud574\ub2f9 \ud504\ub85c\ud544\uc774 \ubaa9\ud45c\ud558\ub294 \uc548\uc804\uc131 \uc18d\uc131(safety property)\uc5d0 \ub300\ud574\uc11c\ub294 \uc548\uc804\ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\uc744\uac83\uc774\ub2e4. \ud504\ub85c\ud544\uc5d0\uc11c \ubaa9\ud45c\ud558\ub294 \uc18d\uc131\uc5d0 \ub300\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c, \uc124\ub839 \ud574\ub2f9 \uc624\ub958\uac00 \ub2e4\ub978 \ucf54\ub4dc, \ub77c\uc774\ube0c\ub7ec\ub9ac \ud639\uc740 \uc678\ubd80 \ud658\uacbd\uc5d0 \uc758\ud574\uc11c \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc0dd\uaca8\ub0ac\ub354\ub77c\ub3c4 \ud504\ub85c\ud544\uc5d0 \ubd80\ud569\ud558\ub294 \ucf54\ub4dc\uac00 \uadf8 \uc624\ub958\uc758 \uadfc\ubcf8 \uc6d0\uc778(root cause)\uc774 \ub418\uc9c0\ub294 \uc54a\uc744 \uac83\uc774\ub2e4. \ud504\ub85c\ud544\uc5d0\uc11c\ub294 \uc27d\uace0 \uc815\ud655\ud558\uac8c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub3c4\ub85d \uc720\ub3c4\ud558\uae30 \uc704\ud574 \uc0c8\ub85c\uc6b4 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud0c0\uc785\uc744 \uc81c\uc2dc\ud560\uc218\ub3c4 \uc788\ub2e4. \ud504\ub85c\ud544 \uc694\uc57d: Pro.type: \ud0c0\uc785 \uc548\uc804\uc131 Pro.bounds: \uacbd\uacc4 \uc548\uc804\uc131 Pro.lifetime: \uc218\uba85 \uc548\uc804\uc131 \ubbf8\ub798\uc5d0\ub294, \ud6e8\uc52c \ub354 \ub9ce\uc740 \ud504\ub85c\ud544\uc744 \uc815\uc758\ud558\uace0 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ud504\ub85c\ud544\ub4e4\uc5d0 \uac80\uc0ac \ubc29\ubc95\uc744 \ucd94\uac00\ud558\uae30\ub97c \uae30\ub300\ud55c\ub2e4. \uadf8 \ud6c4\ubcf4\ub4e4\ub85c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uac83\ub4e4\uc774 \uc788\ub2e4: narrowing arithmetic promotions/conversions (likely part of a separate safe-arithmetic profile) arithmetic cast from negative floating point to unsigned integral type (ditto) selected undefined behavior: Start with Gabriel Dos Reis's UB list developed for the WG21 study group selected unspecified behavior: Addressing portability concerns. const violations: Mostly done by compilers already, but we can catch inappropriate casting and underuse of const . \ud504\ub85c\ud544\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294\uac83\uc740 \uad6c\ud604\uc5d0 \ub2ec\ub824\uc788\ub2e4(implementation defined); \ubcf4\ud3b8\uc801\uc73c\ub85c, \uc774\ub294 \uc0ac\uc6a9\ub418\ub294 \ubd84\uc11d \ub3c4\uad6c\ub4e4\uc5d0 \ub2ec\ub824\uc788\ub2e4. \ud504\ub85c\ud544 \uac80\uc0ac\ub97c \uc218\ud589\ud558\uc9c0 \uc54a\ub3c4\ub85d \ub9cc\ub4e4\uace0 \uc2f6\ub2e4\uba74, \uc5b8\uc5b4\uc758 Contract\ub97c \uc0ac\uc6a9\ud574\uc11c suppress \ub77c\uace0 \ud45c\uae30\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: [[ suppress ( bounds )]] char * raw_find ( char * p , int n , char x ) // find x in p[0]..p[n - 1] { // ... } \uc774\uc81c raw_find() \ub294 \uc8fc\uc5b4\uc9c4 \ub0b4\uc6a9\uc5d0 \ub9c8\uc74c\ub300\ub85c(scramble) \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub2f9\uc5f0\ud788, \uc774\ub7f0 \uc5b5\uc81c(suppression)\ub294 \uac70\uc758 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4. Pro.safety: \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc774 \ud504\ub85c\ud544\uc740 \ud0c0\uc785\uc744 \uc815\ud655\ud558\uac8c \uc0ac\uc6a9\ud558\uace0, \ubd80\uc8fc\uc758\ud558\uac8c(inadvertent) \ud0c0\uc785\uc744 \uc870\uc791\ud558\uc9c0 \uc54a\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac83\uc744 \ub3d5\ub294\ub2e4. \uadf8 \ubc29\ubc95\uc73c\ub85c \ud0c0\uc785\uc744 \uc704\ubc30(violate)\ud558\ub294 \uad81\uadf9\uc801\uc778 \uc6d0\uc778\uc744 \uc81c\uac70\ud558\ub294\ub370 \uc9d1\uc911\ud55c\ub2e4. \uc6d0\uc778\uc5d0\ub294 \ud0c0\uc785 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \uacf5\uc6a9\uccb4( union )\uc758 \uc0ac\uc6a9\uc774 \ud3ec\ud568\ub41c\ub2e4. \uc774 \ubaa9\uc801\uc744 \uc704\ud574\uc11c, \ud0c0\uc785 \uc548\uc804\uc131\uc740 \uc784\uc758\uc758 \ubcc0\uc218\uac00 \uadf8 \ud0c0\uc785\uc5d0\uc11c \uc815\uc758\ud55c \uaddc\uce59\uc744 \uc900\uc218\ud558\uc9c0 \uc54a\ub294 \ubc29\ubc95\uc73c\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uac83\uc73c\ub85c \uc815\uc758\ud55c\ub2e4. \ud0c0\uc785 T \ub85c \uc811\uadfc\ud558\ub294 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc774 \uc2e4\uc81c\ub85c\ub294 \uc804\ud600 \uc0c1\uad00\uc5c6\ub294 \ud0c0\uc785 U \uc758 \uac1c\uccb4\ub97c \ub2f4\uace0 \uc788\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4. \ud0c0\uc785 \uc548\uc804\uc131\uc774 \uacbd\uacc4 \uc548\uc804\uc131 , \uc218\uba85 \uc548\uc804\uc131 \uacfc \uac19\uc774 \ucda9\uc871\ub418\uc5b4\uc57c \uc644\uc804\ud574\uc9c0\ub3c4\ub85d \uc758\ub3c4\ub418\uc5c8\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. \uc774 \ud504\ub85c\ud544\uc758 \uad6c\ud604\uccb4\ub294 \uc18c\uc2a4\ucf54\ub4dc\uc5d0\uc11c \uc544\ub798\uc758 \ud328\ud134\uc5d0 \ub9de\uc9c0 \uc54a\ub294 \ubd80\ubd84\uc744 \ucc3e\uc544\ub0b4\uace0 \uc9c4\ub2e8\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4. \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc694\uc57d: Type.1: Avoid casts : Don't use reinterpret_cast ; A strict version of Avoid casts and prefer named casts Don't use static_cast for arithmetic types; A strict version of Avoid casts and prefer named casts . Don't cast between pointer types where the source type and the target type are the same; A strict version of Avoid casts . Don't cast between pointer types when the conversion could be implicit; A strict version of Avoid casts . Type.2: Don't use static_cast to downcast: Use dynamic_cast instead . Type.3: Don't use const_cast to cast away const (i.e., at all): Don't cast away const . Type.4: Don't use C-style (T)expression or functional T(expression) casts: Prefer construction or named casts . Type.5: Don't use a variable before it has been initialized: always initialize . Type.6: Always initialize a member variable: always initialize , possibly using default constructors or default member initializers . Type.7: Avoid naked union: Use variant instead . Type.8: Avoid varargs: Don't use va_arg arguments . Impact \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544\uc744 \uc900\uc218\ud558\uba74 \ubaa8\ub4e0 \ucc98\ub9ac(operation)\ub4e4\uc774 \uc720\ud6a8\ud55c \uac1c\uccb4\uc5d0\uc11c \uc218\ud589\ub41c\ub2e4\uace0 \ud655\uc2e0\ud560 \uc218 \uc788\ub2e4. \uc624\ub958\ub97c \uc54c\ub9ac\uae30 \uc704\ud574\uc11c \ubc1c\uc0dd\ud558\ub294 \uc608\uc678\ub294 \uc815\uc801\uc73c\ub85c\ub294(\ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0) \ud0d0\uc9c0\ud574\ub0bc \uc218 \uc5c6\ub2e4. \ud0c0\uc785 \uc548\uc804\uc131\uc774 \uacbd\uacc4 \uc548\uc804\uc131 , \uc218\uba85 \uc548\uc804\uc131 \uacfc \uac19\uc774 \ucda9\uc871\ub418\uc5b4\uc57c \uc644\uc804\ud574\uc9c0\ub3c4\ub85d \uc758\ub3c4\ub418\uc5c8\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. \uc774\ub97c \ubcf4\uc7a5\ud560 \uc218 \uc5c6\ub2e4\uba74, \uc784\uc758\uc758 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc5d0 \uc5b4\ub5a4 \uac1c\uccb4, \uac1c\uccb4\ub4e4, \ud639\uc740 \uac1c\uccb4\uc758 \uc77c\ubd80\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294\uc9c0\uc640 \uc0c1\uad00\uc5c6\ub294 \uc811\uadfc\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Pro.bounds: \uacbd\uacc4(bound) \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc774 \ud504\ub85c\ud544\uc740 \uba54\ubaa8\ub9ac\uc758 \ud560\ub2f9\ub41c \ube14\ub85d\ub4e4\uc758 \uacbd\uacc4 \ub0b4\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac83\uc744 \ub3d5\ub294\ub2e4 \uadf8 \ubc29\ubc95\uc73c\ub85c \uacbd\uacc4\ub97c \uc704\ubc18\ud558\ub294 \uad81\uadf9\uc801\uc778 \uc6d0\uc778\uc744 \uc81c\uac70\ud558\ub294\ub370 \uc9d1\uc911\ud55c\ub2e4: \ubc14\ub85c \ud3ec\uc778\ud130\ub97c \uacc4\uc0b0\ud558\uac70\ub098 \ubc30\uc5f4\uc758 \uc778\ub371\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \ubd80\ubd84\uc774\ub2e4. \uc774 \ud504\ub85c\ud544\uc758 \ud575\uc2ec\uc801\uc778 \ud2b9\uc9d5 \uc911 \ud558\ub098\ub294 \ud3ec\uc778\ud130\uac00 \ubc30\uc5f4\uc774 \uc544\ub2c8\ub77c \uc624\uc9c1 \ud558\ub098\uc758 \uac1c\uccb4\ub9cc\uc744 \uac00\ub9ac\ud0a4\ub3c4\ub85d \uc81c\ud55c\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \uacbd\uacc4 \uc548\uc804\uc131\uc740 \ud504\ub85c\uadf8\ub7a8\uc774 \ud560\ub2f9\ub41c \uad6c\uac04(range)\uc744 \ubc97\uc5b4\ub09c \uba54\ubaa8\ub9ac\uc5d0 \uc704\uce58\ud55c \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uacbd\uacc4 \uc548\uc804\uc131\uc740 \ud0c0\uc785 \uc548\uc804\uc131\uacfc \uc218\uba85 \uc548\uc804\uc131\uacfc \uac19\uc774 \ucda9\uc871\ub418\uc5b4\uc57c \uc644\uc804\ud574\uc9c0\ub3c4\ub85d \uc758\ub3c4\ub418\uc5c8\ub2e4. \ub2e4\ub978 \uc548\uc804\uc131\ub4e4\uc774 \uacbd\uacc4 \uc704\ubc18\uc744 \ud5c8\uc6a9\ud558\ub294 \uc548\uc804\ud558\uc9c0 \uc54a\uc740 \ucc98\ub9ac\ub4e4\uc5d0 \ub300\ud574 \ub2e4\ub8f0 \uac83\uc774\ub2e4. \uacbd\uacc4 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc694\uc57d: Bounds.1: Don't use pointer arithmetic. Use span instead: Pass pointers to single objects (only) and Keep pointer arithmetic simple . Bounds.2: Only index into arrays using constant expressions: Pass pointers to single objects (only) and Keep pointer arithmetic simple . Bounds.3: No array-to-pointer decay: Pass pointers to single objects (only) and Keep pointer arithmetic simple . Bounds.4: Don't use standard-library functions and types that are not bounds-checked: Use the standard library in a type-safe manner . Impact \uacbd\uacc4 \uc548\uc804\uc131\uc744 \ub530\ub974\uba74 \uac1c\uccb4\uc5d0 - \ud2b9\ud788 \ubc30\uc5f4\uc5d0 - \uc811\uadfc\ud560 \ub54c \uac1c\uccb4\uc5d0 \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac \ub108\uba38\uc5d0 \uc811\uadfc\ud558\uc9c0 \uc54a\uac8c \ub41c\ub2e4. \uc774\ub294 (\uc545\uba85\ub192\uc740) \"\ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0\"\ub97c \ube44\ub86f\ud574 \ucc3e\uae30 \uc5b4\ub824\uc6b4 \uc624\ub958\ub4e4\uc744 \uc18c\uba78\uc2dc\ud0a8\ub2e4. \uc774\ub294 (\uacbd\uacc4\ub97c \ubc97\uc5b4\ub098\uc11c \uac12\uc744 \ubcc0\uacbd\ud560 \ub54c \ubc1c\uc0dd\ud558\ub294) \uba54\ubaa8\ub9ac \uc624\uc5fc(corruption)\uc758 \uc720\uba85\ud55c \uc6d0\uc778\uc744 \ube44\ub86f\ud574 \ubcf4\uc548 \uc57d\uc810\ub3c4 \ud568\uaed8 \ub9c9\ub294\ub2e4. \uacbd\uacc4\ub97c \ubc97\uc5b4\ub09c \uc811\uadfc\uc774 \"\ub2e8\uc21c\ud788 \uc77d\uae30\"\ub9cc \uc218\ud589\ud558\ub354\ub77c\ub3c4, (\uc811\uadfc \ub300\uc0c1\uc774 \uc758\ub3c4\ud55c \ud0c0\uc785\uc774 \uc544\ub2cc \uacbd\uc6b0) \ubd88\ubcc0\uc870\uac74\uc744 \uc704\ubc18\ud558\uac70\ub098 \"\uc774\uc0c1\ud55c \uac12\"\uc744 \ubc18\ud658\ud560 \uc218\ub3c4 \uc788\ub2e4. Pro.lifetime: \uc218\uba85 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc544\ubb34\uac83\ub3c4 \uac00\ub9ac\ud0a4\uc9c0 \uc54a\ub294 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uc811\uadfc\ud558\ub294 \uac83\uc740 \uc624\ub958\uc758 \uc8fc \uc6d0\uc778\uc774\ub2e4. \ub610\ud55c \uc804\ud1b5\uc801\uc778 C \ud639\uc740 C++ \uc2a4\ud0c0\uc77c\uc758 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc774 \ubb38\uc81c\ub97c \ud53c\ud558\uae30 \ub9e4\uc6b0 \uc5b4\ub835\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ud3ec\uc778\ud130\uac00 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\uac70\ub098, nullptr \uc774\uac70\ub098, \ubc30\uc5f4\uc758 \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\uac70\ub098, \uc0ad\uc81c\ub41c \uac1c\uccb4\uc77c \uc218 \uc788\ub2e4. \ud604\uc7ac \ub514\uc790\uc778 \uba85\uc138\ub97c \ud568\uaed8 \ubcf4\ub77c . \uc218\uba85 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc694\uc57d: Lifetime.1: Don't dereference a possibly invalid pointer: detect or avoid . Impact \ucf54\ub529 \uc2a4\ud0c0\uc77c \uaddc\uce59, \uc815\uc801 \ubd84\uc11d, \ub77c\uc774\ube0c\ub7ec\ub9ac \uc9c0\uc6d0\uc774 \uc644\uc804\ud788 \ud568\uaed8 \uc801\uc6a9\ub418\uba74 \uc774 \ud504\ub85c\ud544\uc740 C++\uc758 \uc9dc\uc99d\ub098\ub294(nasty) \uc624\ub958\uc758 \uc8fc \uc6d0\uc778 \uc911 \ud558\ub098\ub97c \uc5c6\uc560\ubc84\ub9b0\ub2e4 \uc7a0\uc7ac\uc801\uc778 \ubcf4\uc548 \ubb38\uc81c\uc758 \uc6d0\uc778\uc744 \uc5c6\uc564\ub2e4 \"\ud3b8\uc9d1\uc99d\uc801\uc778(paranoia)\" \uac80\uc0ac\ub97c \uc5c6\uc560 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4 \ucf54\ub4dc\uc758 \uc815\ud655\ud568\uc5d0 \uc790\uc2e0\uac10\uc744 \uac00\uc9c0\uac8c \ud55c\ub2e4 C++ \uc5b8\uc5b4\uc758 \ud575\uc2ec \uaddc\uce59\uc744 \ub530\ub984\uc73c\ub85c\uc368 \ubbf8\uc815\uc758 \ud589\ub3d9\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud55c\ub2e4.","title":"Profile"},{"location":"Profile/#pro-profiles","text":"\uc774\uc0c1\uc801\uc73c\ub85c\ub294 \uc6b0\ub9ac\uc758 \ucf54\ub4dc\uac00 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubaa8\ub4e0 \uaddc\uce59\uc744 \ub530\ub97c \uac83\uc774\ub2e4. \uadf8\ub807\uac8c \ud568\uc73c\ub85c\uc368 \uae54\ub054\ud558\uace0, \uaddc\uce59\uc801\uc774\uba74\uc11c \uc624\ub958\uc5d0 \ucde8\uc57d\ud558\uc9c0\ub3c4 \uc54a\uc740 \ucf54\ub4dc\uac00 \ub420 \uac83\uc774\ub2e4. \uc5b4\uca4c\uba74 \uac00\uc7a5 \ube60\ub978 \ucf54\ub4dc\uac00 \ub420\uc218\ub3c4 \uc788\ub2e4. \ubd88\ud589\ud558\uac8c\ub3c4, \uadf8\ub807\uac8c \ub418\ub294\uac83\uc740 \ubd88\uac00\ub2a5\uc5d0 \uac00\uae4c\uc6b4\ub370, \ubcf4\ud1b5 \uc6b0\ub9ac\uac00 \uc791\uc131\ud558\ub294 \ucf54\ub4dc\uac00 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ucf54\ub4dc\ub4e4\uc5d0 \ub9de\ucd94\uac70\ub098 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub7f0 \ucf54\ub4dc\uac00 \uc218\uc2ed\ub144\uac04 \uc791\uc131\ub418\uc5b4 \uc654\uace0, \uadf8 \ucf54\ub4dc\ub4e4\uc740 \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub974\uc9c0 \uc54a\ub294\ub2e4. \uc810\uc9c4\uc801\uc73c\ub85c \uc801\uc6a9 \ud558\ub294 \uac83\uc744 \ubaa9\ud45c\ud574\uc57c \ud55c\ub2e4. \uc810\uc9c4\uc801\uc73c\ub85c \uc801\uc6a9\ud558\uae30 \uc704\ud55c \uc804\ub7b5\uc774 \ubb34\uc5c7\uc774\ub358\uac04\uc5d0, \uc5b4\ub5a4 \ubb38\uc81c\ub4e4\uc5d0 \uc77c\ub828\uc758 \uc11c\ub85c \uc5f0\uad00\ub41c \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uac8c \ub418\uace0, \ub098\uba38\uc9c0 \ubb38\uc81c\ub4e4\uc740 \ub098\uc911\uc744 \uc704\ud574 \ub0a8\uaca8\ub193\uc744 \ud544\uc694\uac00 \uc788\ub2e4. \uc5b8\uc81c\ub098 \uadf8\ub7f0 \uac83\uc740 \uc544\ub2c8\uc9c0\ub9cc \"\uc5f0\uad00\ub41c \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\"\uacfc \uac19\uc740 \uc0dd\uac01\uc774 \uc911\uc694\ud560 \ub584\uac00 \uc788\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc774\ubbf8 \uc791\uc131\ub41c \ucf54\ub4dc(code base)\uc640 \uad00\ub828\uc788\ub2e4\uace0 \uc5ec\uaca8\uc9c0\uac70\ub098 \ud2b9\ubcc4\ud55c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \uc601\uc5ed\uc5d0 \uc801\uc6a9\ub418\uae30 \uc704\ud55c \uc77c\ub828\uc758 \ud2b9\ubcc4\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc801\uc6a9\ub418\uba74 \uc6b0\ub9ac\ub294 \uadf8\ub7f0 \uac00\uc774\ub4dc\ub77c\uc778 \ubb36\uc74c\ub4e4\uc744 \"\ud504\ub85c\ud544\"\uc774\ub77c\uace0 \ubd80\ub978\ub2e4. \uc6b0\ub9ac\uc758 \uc758\ub3c4\ub294 \uc774\ub7f0 \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uc774 \uc77c\uad00\uc131\uc744 \uac00\uc9c0\uace0 \"\ubc94\uc704 \uc624\ub958\ub4e4\uc744 \uc5c6\uc560\ub294 \uac83\"\uc774\ub098 \"\uc815\uc801 \ud0c0\uc785 \uc548\uc804\uc131\"\uacfc \uac19\uc740 \ud2b9\uc815\ud55c \ubaa9\uc801\uc744 \uc774\ub8e8\ub294 \uac83\uc744 \ub3d5\ub294 \uac83\uc774\ub2e4. \uac01 \ud504\ub85c\ud544\ub4e4\uc740 \uc624\ub958\uc758 \ud55c \uc885\ub958(class)\ub97c \uc5c6\uc560\uae30 \uc704\ud574 \uc124\uacc4\ub418\uc5c8\ub2e4. \uac1c\ubcc4\uc801\uc778 \uaddc\uce59\uc744\uc744 \"\uc544\ubb34\uac70\ub098\" \ub530\ub974\ub294 \uac83\uc740 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ucf54\ub4dc\uc5d0 \ud574\ub2f9 \uaddc\uce59\uc5d0\uc11c \uc815\uc758\ud558\ub294 \uac1c\uc120(improvement)\ubcf4\ub2e4 \uad50\ub780(disruptive)\uc744 \ub0b3\uc744 \uac00\ub2a5\uc131\uc774 \ud06c\ub2e4. \"\ud504\ub85c\ud544\"\uc740 \uacb0\uc815\ub860\uc801(deterministic)\uc774\uace0 \uc5b4\ub514\uc5d0\uc11c\ub3c4 \uc801\uc6a9 \uac00\ub2a5(portably enforceable)\ud558\uba70 \ud2b9\uc815\ud55c \ubcf4\uc99d(specific guarantee)\uc744 \ub2ec\uc131\ud558\uae30 \uc704\ud574 \uc124\uacc4\ub41c \uaddc\uce59(\uc989, \uaddc\uc815)\ub4e4\uc758 \ubd80\ubd84\uc9d1\ud569\uc744 \ub9d0\ud55c\ub2e4. \"\uacb0\uc815\ub860\uc801\"\uc774\ub77c\ub294 \ud45c\ud604\uc758 \uc758\ubbf8\ub294 \uc9c0\uc5ed\uc801\uc778 \ubd84\uc11d\ub9cc\uc744 \ud544\uc694\ub85c \ud558\uace0 \ucef4\ud30c\uc77c\ub7ec \uc548\uc5d0\uc11c \uad6c\ud604\ud560 \uc218 \uc788\ub294 \uac83(\ube44\ub85d \uadf8\ub7f4 \ud544\uc694\uac00 \uc5c6\ub354\ub77c\ub3c4)\uc744 \uc758\ubbf8\ud55c\ub2e4. \"\uc5b4\ub514\uc5d0\ub3c4 \uc801\uc6a9\uac00\ub2a5\"\ud558\ub2e4\ub294 \ud574\ub2f9 \uaddc\uce59\ub4e4\uc774 \uc5b8\uc5b4\uc758 \uaddc\uce59\uacfc \ube44\uc2b7\ud558\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4. \ub530\ub77c\uc11c \ud504\ub85c\uadf8\ub798\uba38\ub4e4\uc740 \uac19\uc740 \ucf54\ub4dc\uc5d0 \ub300\ud574\uc11c \uac19\uc740 \ud574\ub2f5\uc744 \uc81c\uc2dc\ud558\ub294 \uc11c\ub85c \ub2e4\ub978 \ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc5b8\uc5b4 \ud504\ub85c\ud544\uc744 \uc0ac\uc6a9\ud574 \uacbd\uace0\uac00 \uc5c6\ub3c4\ub85d \uc791\uc131\ub41c \ucf54\ub4dc\ub294 \ud504\ub85c\ud544\uc5d0 \ubd80\ud569\ud558\ub294(conform) \uac83\uc73c\ub85c \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. \ud504\ub85c\ud544\uc5d0 \ubd80\ud569\ud558\ub294 \ucf54\ub4dc\ub294 \uc791\uc131\ud558\ub294 \uc21c\uac04\ubd80\ud130 \ud574\ub2f9 \ud504\ub85c\ud544\uc774 \ubaa9\ud45c\ud558\ub294 \uc548\uc804\uc131 \uc18d\uc131(safety property)\uc5d0 \ub300\ud574\uc11c\ub294 \uc548\uc804\ud558\ub2e4\uace0 \ubcfc \uc218 \uc788\uc744\uac83\uc774\ub2e4. \ud504\ub85c\ud544\uc5d0\uc11c \ubaa9\ud45c\ud558\ub294 \uc18d\uc131\uc5d0 \ub300\ud55c \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c, \uc124\ub839 \ud574\ub2f9 \uc624\ub958\uac00 \ub2e4\ub978 \ucf54\ub4dc, \ub77c\uc774\ube0c\ub7ec\ub9ac \ud639\uc740 \uc678\ubd80 \ud658\uacbd\uc5d0 \uc758\ud574\uc11c \ud504\ub85c\uadf8\ub7a8\uc5d0 \uc0dd\uaca8\ub0ac\ub354\ub77c\ub3c4 \ud504\ub85c\ud544\uc5d0 \ubd80\ud569\ud558\ub294 \ucf54\ub4dc\uac00 \uadf8 \uc624\ub958\uc758 \uadfc\ubcf8 \uc6d0\uc778(root cause)\uc774 \ub418\uc9c0\ub294 \uc54a\uc744 \uac83\uc774\ub2e4. \ud504\ub85c\ud544\uc5d0\uc11c\ub294 \uc27d\uace0 \uc815\ud655\ud558\uac8c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub3c4\ub85d \uc720\ub3c4\ud558\uae30 \uc704\ud574 \uc0c8\ub85c\uc6b4 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud0c0\uc785\uc744 \uc81c\uc2dc\ud560\uc218\ub3c4 \uc788\ub2e4. \ud504\ub85c\ud544 \uc694\uc57d: Pro.type: \ud0c0\uc785 \uc548\uc804\uc131 Pro.bounds: \uacbd\uacc4 \uc548\uc804\uc131 Pro.lifetime: \uc218\uba85 \uc548\uc804\uc131 \ubbf8\ub798\uc5d0\ub294, \ud6e8\uc52c \ub354 \ub9ce\uc740 \ud504\ub85c\ud544\uc744 \uc815\uc758\ud558\uace0 \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ud504\ub85c\ud544\ub4e4\uc5d0 \uac80\uc0ac \ubc29\ubc95\uc744 \ucd94\uac00\ud558\uae30\ub97c \uae30\ub300\ud55c\ub2e4. \uadf8 \ud6c4\ubcf4\ub4e4\ub85c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uac83\ub4e4\uc774 \uc788\ub2e4: narrowing arithmetic promotions/conversions (likely part of a separate safe-arithmetic profile) arithmetic cast from negative floating point to unsigned integral type (ditto) selected undefined behavior: Start with Gabriel Dos Reis's UB list developed for the WG21 study group selected unspecified behavior: Addressing portability concerns. const violations: Mostly done by compilers already, but we can catch inappropriate casting and underuse of const . \ud504\ub85c\ud544\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294\uac83\uc740 \uad6c\ud604\uc5d0 \ub2ec\ub824\uc788\ub2e4(implementation defined); \ubcf4\ud3b8\uc801\uc73c\ub85c, \uc774\ub294 \uc0ac\uc6a9\ub418\ub294 \ubd84\uc11d \ub3c4\uad6c\ub4e4\uc5d0 \ub2ec\ub824\uc788\ub2e4. \ud504\ub85c\ud544 \uac80\uc0ac\ub97c \uc218\ud589\ud558\uc9c0 \uc54a\ub3c4\ub85d \ub9cc\ub4e4\uace0 \uc2f6\ub2e4\uba74, \uc5b8\uc5b4\uc758 Contract\ub97c \uc0ac\uc6a9\ud574\uc11c suppress \ub77c\uace0 \ud45c\uae30\ud558\ub77c. \uc608\ub97c \ub4e4\uc5b4: [[ suppress ( bounds )]] char * raw_find ( char * p , int n , char x ) // find x in p[0]..p[n - 1] { // ... } \uc774\uc81c raw_find() \ub294 \uc8fc\uc5b4\uc9c4 \ub0b4\uc6a9\uc5d0 \ub9c8\uc74c\ub300\ub85c(scramble) \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub2f9\uc5f0\ud788, \uc774\ub7f0 \uc5b5\uc81c(suppression)\ub294 \uac70\uc758 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4.","title":"Pro: \ud504\ub85c\ud544(Profiles)"},{"location":"Profile/#prosafety","text":"\uc774 \ud504\ub85c\ud544\uc740 \ud0c0\uc785\uc744 \uc815\ud655\ud558\uac8c \uc0ac\uc6a9\ud558\uace0, \ubd80\uc8fc\uc758\ud558\uac8c(inadvertent) \ud0c0\uc785\uc744 \uc870\uc791\ud558\uc9c0 \uc54a\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac83\uc744 \ub3d5\ub294\ub2e4. \uadf8 \ubc29\ubc95\uc73c\ub85c \ud0c0\uc785\uc744 \uc704\ubc30(violate)\ud558\ub294 \uad81\uadf9\uc801\uc778 \uc6d0\uc778\uc744 \uc81c\uac70\ud558\ub294\ub370 \uc9d1\uc911\ud55c\ub2e4. \uc6d0\uc778\uc5d0\ub294 \ud0c0\uc785 \ubcc0\ud658\uc744 \uc0ac\uc6a9\ud558\uac70\ub098 \uacf5\uc6a9\uccb4( union )\uc758 \uc0ac\uc6a9\uc774 \ud3ec\ud568\ub41c\ub2e4. \uc774 \ubaa9\uc801\uc744 \uc704\ud574\uc11c, \ud0c0\uc785 \uc548\uc804\uc131\uc740 \uc784\uc758\uc758 \ubcc0\uc218\uac00 \uadf8 \ud0c0\uc785\uc5d0\uc11c \uc815\uc758\ud55c \uaddc\uce59\uc744 \uc900\uc218\ud558\uc9c0 \uc54a\ub294 \ubc29\ubc95\uc73c\ub85c \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294 \uac83\uc73c\ub85c \uc815\uc758\ud55c\ub2e4. \ud0c0\uc785 T \ub85c \uc811\uadfc\ud558\ub294 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc774 \uc2e4\uc81c\ub85c\ub294 \uc804\ud600 \uc0c1\uad00\uc5c6\ub294 \ud0c0\uc785 U \uc758 \uac1c\uccb4\ub97c \ub2f4\uace0 \uc788\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4. \ud0c0\uc785 \uc548\uc804\uc131\uc774 \uacbd\uacc4 \uc548\uc804\uc131 , \uc218\uba85 \uc548\uc804\uc131 \uacfc \uac19\uc774 \ucda9\uc871\ub418\uc5b4\uc57c \uc644\uc804\ud574\uc9c0\ub3c4\ub85d \uc758\ub3c4\ub418\uc5c8\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. \uc774 \ud504\ub85c\ud544\uc758 \uad6c\ud604\uccb4\ub294 \uc18c\uc2a4\ucf54\ub4dc\uc5d0\uc11c \uc544\ub798\uc758 \ud328\ud134\uc5d0 \ub9de\uc9c0 \uc54a\ub294 \ubd80\ubd84\uc744 \ucc3e\uc544\ub0b4\uace0 \uc9c4\ub2e8\ud560 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4. \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc694\uc57d: Type.1: Avoid casts : Don't use reinterpret_cast ; A strict version of Avoid casts and prefer named casts Don't use static_cast for arithmetic types; A strict version of Avoid casts and prefer named casts . Don't cast between pointer types where the source type and the target type are the same; A strict version of Avoid casts . Don't cast between pointer types when the conversion could be implicit; A strict version of Avoid casts . Type.2: Don't use static_cast to downcast: Use dynamic_cast instead . Type.3: Don't use const_cast to cast away const (i.e., at all): Don't cast away const . Type.4: Don't use C-style (T)expression or functional T(expression) casts: Prefer construction or named casts . Type.5: Don't use a variable before it has been initialized: always initialize . Type.6: Always initialize a member variable: always initialize , possibly using default constructors or default member initializers . Type.7: Avoid naked union: Use variant instead . Type.8: Avoid varargs: Don't use va_arg arguments .","title":"Pro.safety: \ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544"},{"location":"Profile/#impact","text":"\ud0c0\uc785 \uc548\uc804\uc131 \ud504\ub85c\ud544\uc744 \uc900\uc218\ud558\uba74 \ubaa8\ub4e0 \ucc98\ub9ac(operation)\ub4e4\uc774 \uc720\ud6a8\ud55c \uac1c\uccb4\uc5d0\uc11c \uc218\ud589\ub41c\ub2e4\uace0 \ud655\uc2e0\ud560 \uc218 \uc788\ub2e4. \uc624\ub958\ub97c \uc54c\ub9ac\uae30 \uc704\ud574\uc11c \ubc1c\uc0dd\ud558\ub294 \uc608\uc678\ub294 \uc815\uc801\uc73c\ub85c\ub294(\ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0) \ud0d0\uc9c0\ud574\ub0bc \uc218 \uc5c6\ub2e4. \ud0c0\uc785 \uc548\uc804\uc131\uc774 \uacbd\uacc4 \uc548\uc804\uc131 , \uc218\uba85 \uc548\uc804\uc131 \uacfc \uac19\uc774 \ucda9\uc871\ub418\uc5b4\uc57c \uc644\uc804\ud574\uc9c0\ub3c4\ub85d \uc758\ub3c4\ub418\uc5c8\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. \uc774\ub97c \ubcf4\uc7a5\ud560 \uc218 \uc5c6\ub2e4\uba74, \uc784\uc758\uc758 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc5d0 \uc5b4\ub5a4 \uac1c\uccb4, \uac1c\uccb4\ub4e4, \ud639\uc740 \uac1c\uccb4\uc758 \uc77c\ubd80\uac00 \uc800\uc7a5\ub418\uc5b4 \uc788\ub294\uc9c0\uc640 \uc0c1\uad00\uc5c6\ub294 \uc811\uadfc\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","title":"Impact"},{"location":"Profile/#probounds-bound","text":"\uc774 \ud504\ub85c\ud544\uc740 \uba54\ubaa8\ub9ac\uc758 \ud560\ub2f9\ub41c \ube14\ub85d\ub4e4\uc758 \uacbd\uacc4 \ub0b4\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uac83\uc744 \ub3d5\ub294\ub2e4 \uadf8 \ubc29\ubc95\uc73c\ub85c \uacbd\uacc4\ub97c \uc704\ubc18\ud558\ub294 \uad81\uadf9\uc801\uc778 \uc6d0\uc778\uc744 \uc81c\uac70\ud558\ub294\ub370 \uc9d1\uc911\ud55c\ub2e4: \ubc14\ub85c \ud3ec\uc778\ud130\ub97c \uacc4\uc0b0\ud558\uac70\ub098 \ubc30\uc5f4\uc758 \uc778\ub371\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub294 \ubd80\ubd84\uc774\ub2e4. \uc774 \ud504\ub85c\ud544\uc758 \ud575\uc2ec\uc801\uc778 \ud2b9\uc9d5 \uc911 \ud558\ub098\ub294 \ud3ec\uc778\ud130\uac00 \ubc30\uc5f4\uc774 \uc544\ub2c8\ub77c \uc624\uc9c1 \ud558\ub098\uc758 \uac1c\uccb4\ub9cc\uc744 \uac00\ub9ac\ud0a4\ub3c4\ub85d \uc81c\ud55c\ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \uacbd\uacc4 \uc548\uc804\uc131\uc740 \ud504\ub85c\uadf8\ub7a8\uc774 \ud560\ub2f9\ub41c \uad6c\uac04(range)\uc744 \ubc97\uc5b4\ub09c \uba54\ubaa8\ub9ac\uc5d0 \uc704\uce58\ud55c \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uacbd\uacc4 \uc548\uc804\uc131\uc740 \ud0c0\uc785 \uc548\uc804\uc131\uacfc \uc218\uba85 \uc548\uc804\uc131\uacfc \uac19\uc774 \ucda9\uc871\ub418\uc5b4\uc57c \uc644\uc804\ud574\uc9c0\ub3c4\ub85d \uc758\ub3c4\ub418\uc5c8\ub2e4. \ub2e4\ub978 \uc548\uc804\uc131\ub4e4\uc774 \uacbd\uacc4 \uc704\ubc18\uc744 \ud5c8\uc6a9\ud558\ub294 \uc548\uc804\ud558\uc9c0 \uc54a\uc740 \ucc98\ub9ac\ub4e4\uc5d0 \ub300\ud574 \ub2e4\ub8f0 \uac83\uc774\ub2e4. \uacbd\uacc4 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc694\uc57d: Bounds.1: Don't use pointer arithmetic. Use span instead: Pass pointers to single objects (only) and Keep pointer arithmetic simple . Bounds.2: Only index into arrays using constant expressions: Pass pointers to single objects (only) and Keep pointer arithmetic simple . Bounds.3: No array-to-pointer decay: Pass pointers to single objects (only) and Keep pointer arithmetic simple . Bounds.4: Don't use standard-library functions and types that are not bounds-checked: Use the standard library in a type-safe manner .","title":"Pro.bounds: \uacbd\uacc4(bound) \uc548\uc804\uc131 \ud504\ub85c\ud544"},{"location":"Profile/#impact_1","text":"\uacbd\uacc4 \uc548\uc804\uc131\uc744 \ub530\ub974\uba74 \uac1c\uccb4\uc5d0 - \ud2b9\ud788 \ubc30\uc5f4\uc5d0 - \uc811\uadfc\ud560 \ub54c \uac1c\uccb4\uc5d0 \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac \ub108\uba38\uc5d0 \uc811\uadfc\ud558\uc9c0 \uc54a\uac8c \ub41c\ub2e4. \uc774\ub294 (\uc545\uba85\ub192\uc740) \"\ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0\"\ub97c \ube44\ub86f\ud574 \ucc3e\uae30 \uc5b4\ub824\uc6b4 \uc624\ub958\ub4e4\uc744 \uc18c\uba78\uc2dc\ud0a8\ub2e4. \uc774\ub294 (\uacbd\uacc4\ub97c \ubc97\uc5b4\ub098\uc11c \uac12\uc744 \ubcc0\uacbd\ud560 \ub54c \ubc1c\uc0dd\ud558\ub294) \uba54\ubaa8\ub9ac \uc624\uc5fc(corruption)\uc758 \uc720\uba85\ud55c \uc6d0\uc778\uc744 \ube44\ub86f\ud574 \ubcf4\uc548 \uc57d\uc810\ub3c4 \ud568\uaed8 \ub9c9\ub294\ub2e4. \uacbd\uacc4\ub97c \ubc97\uc5b4\ub09c \uc811\uadfc\uc774 \"\ub2e8\uc21c\ud788 \uc77d\uae30\"\ub9cc \uc218\ud589\ud558\ub354\ub77c\ub3c4, (\uc811\uadfc \ub300\uc0c1\uc774 \uc758\ub3c4\ud55c \ud0c0\uc785\uc774 \uc544\ub2cc \uacbd\uc6b0) \ubd88\ubcc0\uc870\uac74\uc744 \uc704\ubc18\ud558\uac70\ub098 \"\uc774\uc0c1\ud55c \uac12\"\uc744 \ubc18\ud658\ud560 \uc218\ub3c4 \uc788\ub2e4.","title":"Impact"},{"location":"Profile/#prolifetime","text":"\uc544\ubb34\uac83\ub3c4 \uac00\ub9ac\ud0a4\uc9c0 \uc54a\ub294 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uc811\uadfc\ud558\ub294 \uac83\uc740 \uc624\ub958\uc758 \uc8fc \uc6d0\uc778\uc774\ub2e4. \ub610\ud55c \uc804\ud1b5\uc801\uc778 C \ud639\uc740 C++ \uc2a4\ud0c0\uc77c\uc758 \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc774 \ubb38\uc81c\ub97c \ud53c\ud558\uae30 \ub9e4\uc6b0 \uc5b4\ub835\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ud3ec\uc778\ud130\uac00 \ucd08\uae30\ud654\ub418\uc9c0 \uc54a\uc558\uac70\ub098, nullptr \uc774\uac70\ub098, \ubc30\uc5f4\uc758 \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\uac70\ub098, \uc0ad\uc81c\ub41c \uac1c\uccb4\uc77c \uc218 \uc788\ub2e4. \ud604\uc7ac \ub514\uc790\uc778 \uba85\uc138\ub97c \ud568\uaed8 \ubcf4\ub77c . \uc218\uba85 \uc548\uc804\uc131 \ud504\ub85c\ud544 \uc694\uc57d: Lifetime.1: Don't dereference a possibly invalid pointer: detect or avoid .","title":"Pro.lifetime: \uc218\uba85 \uc548\uc804\uc131 \ud504\ub85c\ud544"},{"location":"Profile/#impact_2","text":"\ucf54\ub529 \uc2a4\ud0c0\uc77c \uaddc\uce59, \uc815\uc801 \ubd84\uc11d, \ub77c\uc774\ube0c\ub7ec\ub9ac \uc9c0\uc6d0\uc774 \uc644\uc804\ud788 \ud568\uaed8 \uc801\uc6a9\ub418\uba74 \uc774 \ud504\ub85c\ud544\uc740 C++\uc758 \uc9dc\uc99d\ub098\ub294(nasty) \uc624\ub958\uc758 \uc8fc \uc6d0\uc778 \uc911 \ud558\ub098\ub97c \uc5c6\uc560\ubc84\ub9b0\ub2e4 \uc7a0\uc7ac\uc801\uc778 \ubcf4\uc548 \ubb38\uc81c\uc758 \uc6d0\uc778\uc744 \uc5c6\uc564\ub2e4 \"\ud3b8\uc9d1\uc99d\uc801\uc778(paranoia)\" \uac80\uc0ac\ub97c \uc5c6\uc560 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ud0a8\ub2e4 \ucf54\ub4dc\uc758 \uc815\ud655\ud568\uc5d0 \uc790\uc2e0\uac10\uc744 \uac00\uc9c0\uac8c \ud55c\ub2e4 C++ \uc5b8\uc5b4\uc758 \ud575\uc2ec \uaddc\uce59\uc744 \ub530\ub984\uc73c\ub85c\uc368 \ubbf8\uc815\uc758 \ud589\ub3d9\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uac8c \ud55c\ub2e4.","title":"Impact"},{"location":"References/","text":"RF: \ub808\ud37c\ub7f0\uc2a4 C++\uc744 \ubcf4\ub2e4 \uc804\ubb38\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud558\uc5ec \ub9ce\uc740 \ucf54\ub529 \ud45c\uc900, \uaddc\uce59\ub4e4\uc774 \ub9cc\ub4e4\uc5b4 \uc9c0\uace0 \uc788\ub2e4. \ub9ce\uc740 \uaddc\uce59\ub4e4\uc774 \uc2dd\ubcc4\uc790\ub4e4\uc758 \uc2a4\ud3a0\ub9c1\uac19\uc774 \uc0ac\uc18c\ud55c \uc0ac\ud56d\ub4e4\uc5d0 \ucd08\uc810\uc744 \ub9de\ucd98\ub2e4 C++\uc5d0 \ubbf8\uc219\ud55c \uc0ac\ub78c\ub4e4 \uc758\ud574 \uc791\uc131\ub418\uc5c8\ub2e4 \"\uac1c\ubc1c\uc790\ub97c \uc62c\ubc14\ub974\uac8c \uc778\ub3c4\ud558\ub294\"\uac83\uc744 \uae30\ubcf8 \ubaa9\ud45c\ub85c \ud55c\ub2e4 \uc5ec\ub7ec \ucef4\ud30c\uc77c\ub7ec\ub4e4(\uc77c\ubd80\ub294 10\ub144\ub3c4 \ub118\uc740) \uac04\uc758 \uc774\uc2dd\uc131\uc744 \uc704\ud55c \uac83\uc774\ub2e4 \uc218\uc2ed\ub144\ub41c \uc624\ub798\ub41c \ucf54\ub4dc \ubca0\uc774\uc2a4\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud574 \uc791\uc131\ub418\uc5c8\ub2e4 \ud558\ub098\uc758 \ubd84\uc57c\uc5d0\ub9cc \uad6d\ud55c\ub41c\ub2e4 \uba85\ubc31\ud788 \uc5ed\ud6a8\uacfc\ub97c \ub0b3\ub294\ub2e4 \ubb34\uc2dc\ub41c\ub2e4 (\uadf8\ub9ac\uace0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc790\uc2e0\uc758 \uc18c\uc784\uc744 \ub2e4\ud558\uae30 \uc704\ud574\uc120 \ubb34\uc2dc\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4) \uc798\ubabb\ub41c \ucf54\ub529 \ud45c\uc900\uc740 \ucc28\ub77c\ub9ac \uc5c6\ub290\ub2c8\ub9cc \ubabb\ud558\ub2e4. \uadf8\ub7ec\ub098 \uc801\uc808\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc774\ub77c\ub294 \uac83\uc740 \ud45c\uc900\uc774 \uc5c6\ub294\uac83 \ubcf4\ub2e4 \ud6e8\uc52c \ub0ab\ub2e4: \"\ud615\uc2dd\uc740 \uc790\uc720\ub97c \uac00\uc838 \uc624\ub9ac\ub77c\" \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \ub300\ub85c \ud560 \uc218 \uc788\uace0 \uc6d0\ud558\uc9c0 \uc54a\ub294 \uac83\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294, \uc18c\uc704 \"\uc644\ubcbd\ud55c \uc5b8\uc5b4\"\uac00 \ub420 \uc218 \uc788\uc744\uae4c? \uae30\ubcf8\uc801\uc73c\ub85c, \uc54c\ub9de\uc740 \uc5b8\uc5b4\ub294 (\uadf8\ub9ac\uace0 \uc5b8\uc5b4\ub97c \uc704\ud55c \ud234 \uccb4\uc778\uc744 \ud3ec\ud568\ud574\uc11c) \ub354 \ub9ce\uc740 \uc694\uad6c\uc0ac\ud56d\uc744 \ucda9\uc871\uc2dc\ud0a4\uace0 \uae30\ub2a5\uc744 \uc81c\uacf5\ud574\uc57c \ud55c\ub2e4. \uc2dc\uac04\uc774 \ud750\ub97c\uc218\ub85d \uc5b8\uc5b4\uc5d0 \ub300\ud55c \uc694\uad6c\uc0ac\ud56d\uc740 \ubcc0\ud654\ud558\uace0, \uc774\uc5d0 \ubd80\uc751\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubc94\uc6a9\uc801\uc778 \uc5b8\uc5b4\uac00 \ud544\uc694\ud558\uac8c \ub41c\ub2e4. \uc624\ub298\uc740 \uc774\uc0c1\uc801\uc778 \uc5b8\uc5b4\uac00 \ub0b4\uc77c\uc740 \ub108\ubb34 \uc81c\ud55c\uc801\uc77c \uc218 \uc788\ub2e4. \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc740 \ud2b9\uc815 \uc694\uad6c\uc5d0 \ub9de\uac8c \uc5b8\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c, \ubaa8\ub450\ub97c \uc704\ud55c \ub2e8\uc77c \ucf54\ub529 \uc2a4\ud0c0\uc77c\uc740 \uc788\uc744 \uc218 \uc5c6\ub2e4. \uac01 \uac1c\ubc1c\uc870\uc9c1 \ubcc4\ub85c \uc81c\uc57d\uc0ac\ud56d\uc744 \ucd94\uac00\ud558\uac70\ub098 \ud655\uace0\ud55c \uaddc\uce59\uc744 \ub354\ud574\uc11c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Reference sections: RF.rules: Coding rules RF.books: Books with coding guidelines RF.C++: C++ Programming (C++11/C++14/C++17) RF.web: Websites RS.video: Videos about \"modern C++\" RF.man: Manuals RF.core: Core Guidelines materials RF.rules: \ucf54\ub529 \uaddc\uce59 Boost Library Requirements and Guidelines . ???. Bloomberg: BDE C++ Coding . \ucf54\ub4dc \uc870\uc9c1\ud654\uc640 \ubc30\uce58\uc5d0 \uc911\uc810\uc744 \ub450\uace0 \uc788\ub2e4 Facebook: ??? GCC Coding Conventions . C++03\uacfc \uc57d\uac04 \uc62c\ub4dc \ud558\uc9c0\ub9cc \uadf8\ub7ed\uc800\ub7ed \uad1c\ucc2e\ub2e4 Google C++ Style Guide . Geared toward C++03 and (also) older code bases. \uad6c\uae00 \uc804\ubb38\uac00\ub4e4\uc740 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uac1c\uc120\ud558\uae30 \uc704\ud574 \ud65c\ubc1c\ud788 \ud611\ub825\ud558\uace0 \uc788\uace0, \uadf8\ub4e4 \ub610\ud55c \uad8c\ud560 \uc218 \uc788\ub294 \ud604\ub300\uc801\uc774\uace0 \uc77c\ubc18\uc801\uc778 \uaddc\uce59 \uc9d1\ud569\uc774 \ub420 \uc218 \uc788\uae30\ub97c \uae30\ub300\ud55c\ub2e4 JSF++: JOINT STRIKE FIGHTER AIR VEHICLE C++ CODING STANDARDS . Document Number 2RDU00001 Rev C. December 2005. \ube44\ud589 \uc81c\uc5b4 \uc18c\ud504\ud2b8\uc6e8\uc5b4, \uc81c\ud55c\uc2dc\uac04 \ub0b4\uc5d0 \ubc18\uc751\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ub41c\ub2e4. \uc774\ub294 \ub9e4\uc6b0 \uc81c\uc57d\uc774 \uac15\ud558\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.(\"\ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud328\ud558\uba74 \ub204\uad70\uac00 \uc8fd\ub294\ub2e4\uac70\ub098\"). \uc608\ub97c \ub4e4\uba74, \ube44\ud589\uae30\uac00 \uc774\ub959\ud55c \uc774\ud6c4\ub85c\ub294 \ub3d9\uc801 \ud560\ub2f9\uc774\ub098 \ud574\uc81c\uac00 \ubd88\uac00\ub2a5\ud558\uace0 (\uba54\ubaa8\ub9ac \uc624\ubc84\ud50c\ub85c\uc6b0\ub098 \ud30c\ud3b8\ud654\uac00 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4), (\uc608\uc678\uac00 \uace0\uc815\ub41c \uc9e7\uc740 \uc2dc\uac04 \uc548\uc5d0 \ucc98\ub9ac\ub41c\ub2e4\ub294 \uac83\uc744 \ud655\uc2e4\ud788 \ubcf4\uc7a5\ud560 \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0) \uc608\uc678 \uae30\ub2a5\uc774 \uc0ac\uc6a9\ub418\uc5b4\uc120 \uc548\ub418\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ud2b9\uc218 \ubaa9\uc801 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc704\ud574 \uc2b9\uc778\uc744 \ubc1b\uc544\uc57c\ub9cc \ud55c\ub2e4. \ube44\uc57c\ub124 \uc2a4\ud2b8\ub85c\uc2a4\ud2b8\ub86d\uc740 JSF++\uc758 \uc800\uc790\uc774\uae30 \ub54c\ubb38\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uacfc\uc758 \uc720\uc0ac\uc131\uc5d0 \uadf8\ub2e4\uc9c0 \ub180\ub78d\uc9c0 \uc54a\ub2e4. \ucd94\ucc9c\ud560\ub9cc \ud558\uc9c0\ub9cc, \ub9e4\uc6b0 \ud2b9\ubcc4\ud55c \uc0c1\ud669\uc5d0 \ub300\ud55c \uac83\uc784\uc744 \uba85\uc2ec\ud558\ub77c. Mozilla Portability Guide . \uc774\ub984\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef, \ub9ce\uc740 (\uc624\ub798\ub41c) \ucef4\ud30c\uc77c\ub7ec\uc5d0 \ub300\ud55c \uc774\uc2dd\uc744 \ubaa9\ud45c\ub85c \ud558\uace0 \uc788\ub2e4. \ub530\ub77c\uc11c \ud55c\uc815\uc801\uc774\ub2e4. Geosoft.no: C++ Programming Style Guidelines . ???. Possibility.com: C++ Coding Standard . ???. SEI CERT: Secure C++ Coding Standard . \uc608\uc81c\uc640 \ud569\ub9ac\uc131\uc774 \uacc1\ub4e4\uc5ec\uc9c4 \uaddc\uce59\ub4e4\uc774\ub2e4. \ubcf4\uc548\uc5d0 \ubbfc\uac10\ud55c \ucf54\ub4dc\ub97c \uc704\ud55c \uac83\uc774\uc9c0\ub9cc \ub300\ubd80\ubd84\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uc801\uc6a9\ub420 \uc218 \uc788\ub2e4. High Integrity C++ Coding Standard . llvm . Somewhat brief, pre-C++11, and (not unreasonably) adjusted to its domain. ??? RF.books: \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc788\ub294 \ubb38\ud5cc Meyers96 Scott Meyers: More Effective C++ . Addison-Wesley 1996. Meyers97 Scott Meyers: Effective C++, Second Edition . Addison-Wesley 1997. Meyers01 Scott Meyers: Effective STL . Addison-Wesley 2001. Meyers05 Scott Meyers: Effective C++, Third Edition . Addison-Wesley 2005. Meyers15 Scott Meyers: Effective Modern C++ . O'Reilly 2015. SuttAlex05 Sutter and Alexandrescu: C++ Coding Standards . Addison-Wesley 2005. More a set of meta-rules than a set of rules. Pre-C++11. Stroustrup05 Bjarne Stroustrup: A rationale for semantically enhanced library languages . LCSD05. October 2005. Stroustrup14 Stroustrup: A Tour of C++ . Addison Wesley 2014. Each chapter ends with an advice section consisting of a set of recommendations. Stroustrup13 Stroustrup: The C++ Programming Language (4th Edition) . Addison Wesley 2013. Each chapter ends with an advice section consisting of a set of recommendations. Stroustrup: Style Guide for Programming: Principles and Practice using C++ . Mostly low-level naming and layout rules. Primarily a teaching tool. RF.C++: C++ \ud504\ub85c\uadf8\ub798\ubc0d (C++11/C++14) TC++PL4 : A thorough description of the C++ language and standard libraries for experienced programmers. Tour++ : An overview of the C++ language and standard libraries for experienced programmers. Programming: Principles and Practice using C++ : A textbook for beginners and relative novices. RF.web: \uc6f9\uc0ac\uc774\ud2b8 isocpp.org Bjarne Stroustrup's home pages WG21 Boost Adobe open source Poco libraries Sutter's Mill? ??? RS.video: \"\ubaa8\ub358 C++\" \ub3d9\uc601\uc0c1 Bjarne Stroustrup: C++11 Style . 2012. Bjarne Stroustrup: The Essence of C++: With Examples in C++84, C++98, C++11, and C++14 . 2013 All the talks from CppCon '14 Bjarne Stroustrup: The essence of C++ at the University of Edinburgh. 2014. Bjarne Stroustrup: The Evolution of C++ Past, Present and Future . CppCon 2016 keynote. Bjarne Stroustrup: Make Simple Tasks Simple! . CppCon 2014 keynote. Bjarne Stroustrup: Writing Good C++14 . CppCon 2015 keynote about the Core Guidelines. Herb Sutter: Writing Good C++14... By Default . CppCon 2015 keynote about the Core Guidelines. CppCon 15 ??? C++ Next ??? Meting C++ ??? more ??? RF.man: \ub9e4\ub274\uc5bc ISO C++ Standard C++11. ISO C++ Standard C++14. ISO C++ Standard C++17 . Committee Draft. Palo Alto \"Concepts\" TR . ISO C++ Concepts TS . WG21 Ranges report . Draft. RF.core: \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778 \uc790\ub8cc\ub4e4 This section contains materials that has been useful for presenting the core guidelines and the ideas behind them: Our documents directory Stroustrup, Sutter, and Dos Reis: A brief introduction to C++'s model for type- and resource-safety . A paper with lots of examples. Sergey Zubkov: a Core Guidelines talk and here are the slides . In Russian. 2017. Neil MacIntosh: The Guideline Support Library: One Year Later . CppCon 2016. Bjarne Stroustrup: Writing Good C++14 . CppCon 2015 keynote. Herb Sutter: Writing Good C++14... By Default . CppCon 2015 keynote. Peter Sommerlad: C++ Core Guidelines - Modernize your C++ Code Base . ACCU 2017. Bjarne Stroustrup: No Littering! . Bay Area ACCU 2016. It gives some idea of the ambition level for the Core Guidelines. Note that slides for CppCon presentations are available (links with the posted videos). Contributions to this list would be most welcome. \uac10\uc0ac\uc758 \ub9d0 \uaddc\uce59, \uc81c\uc548, \ucd94\uac00 \uc815\ubcf4, \ucc38\uace0\uc0ac\ud56d \ub4f1 \ub3c4\uc6c0\uc744 \uc8fc\uc2e0 \ubd84\ub4e4\uc5d0\uac8c \uac10\uc0ac\uc758 \ub9d0\uc500\uc744 \uc804\ud55c\ub2e4: Peter Juhl Neil MacIntosh Axel Naumann Andrew Pardoe Gabriel Dos Reis Zhuang, Jiangang (Jeff) Sergey Zubkov \uadf8\ub9ac\uace0 Github\uc5d0 \uc788\ub294 \uae30\uc5ec\uc790 \ubaa9\ub85d\ub3c4 \ud568\uaed8 \ubd10\uc8fc\uae30\ub97c.","title":"<a name=\"S-references\"></a>RF: \ub808\ud37c\ub7f0\uc2a4"},{"location":"References/#rf","text":"C++\uc744 \ubcf4\ub2e4 \uc804\ubb38\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30 \uc704\ud558\uc5ec \ub9ce\uc740 \ucf54\ub529 \ud45c\uc900, \uaddc\uce59\ub4e4\uc774 \ub9cc\ub4e4\uc5b4 \uc9c0\uace0 \uc788\ub2e4. \ub9ce\uc740 \uaddc\uce59\ub4e4\uc774 \uc2dd\ubcc4\uc790\ub4e4\uc758 \uc2a4\ud3a0\ub9c1\uac19\uc774 \uc0ac\uc18c\ud55c \uc0ac\ud56d\ub4e4\uc5d0 \ucd08\uc810\uc744 \ub9de\ucd98\ub2e4 C++\uc5d0 \ubbf8\uc219\ud55c \uc0ac\ub78c\ub4e4 \uc758\ud574 \uc791\uc131\ub418\uc5c8\ub2e4 \"\uac1c\ubc1c\uc790\ub97c \uc62c\ubc14\ub974\uac8c \uc778\ub3c4\ud558\ub294\"\uac83\uc744 \uae30\ubcf8 \ubaa9\ud45c\ub85c \ud55c\ub2e4 \uc5ec\ub7ec \ucef4\ud30c\uc77c\ub7ec\ub4e4(\uc77c\ubd80\ub294 10\ub144\ub3c4 \ub118\uc740) \uac04\uc758 \uc774\uc2dd\uc131\uc744 \uc704\ud55c \uac83\uc774\ub2e4 \uc218\uc2ed\ub144\ub41c \uc624\ub798\ub41c \ucf54\ub4dc \ubca0\uc774\uc2a4\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud574 \uc791\uc131\ub418\uc5c8\ub2e4 \ud558\ub098\uc758 \ubd84\uc57c\uc5d0\ub9cc \uad6d\ud55c\ub41c\ub2e4 \uba85\ubc31\ud788 \uc5ed\ud6a8\uacfc\ub97c \ub0b3\ub294\ub2e4 \ubb34\uc2dc\ub41c\ub2e4 (\uadf8\ub9ac\uace0 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc790\uc2e0\uc758 \uc18c\uc784\uc744 \ub2e4\ud558\uae30 \uc704\ud574\uc120 \ubb34\uc2dc\ub418\uc5b4\uc57c\ub9cc \ud55c\ub2e4) \uc798\ubabb\ub41c \ucf54\ub529 \ud45c\uc900\uc740 \ucc28\ub77c\ub9ac \uc5c6\ub290\ub2c8\ub9cc \ubabb\ud558\ub2e4. \uadf8\ub7ec\ub098 \uc801\uc808\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc774\ub77c\ub294 \uac83\uc740 \ud45c\uc900\uc774 \uc5c6\ub294\uac83 \ubcf4\ub2e4 \ud6e8\uc52c \ub0ab\ub2e4: \"\ud615\uc2dd\uc740 \uc790\uc720\ub97c \uac00\uc838 \uc624\ub9ac\ub77c\" \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 \ub300\ub85c \ud560 \uc218 \uc788\uace0 \uc6d0\ud558\uc9c0 \uc54a\ub294 \uac83\uc740 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294, \uc18c\uc704 \"\uc644\ubcbd\ud55c \uc5b8\uc5b4\"\uac00 \ub420 \uc218 \uc788\uc744\uae4c? \uae30\ubcf8\uc801\uc73c\ub85c, \uc54c\ub9de\uc740 \uc5b8\uc5b4\ub294 (\uadf8\ub9ac\uace0 \uc5b8\uc5b4\ub97c \uc704\ud55c \ud234 \uccb4\uc778\uc744 \ud3ec\ud568\ud574\uc11c) \ub354 \ub9ce\uc740 \uc694\uad6c\uc0ac\ud56d\uc744 \ucda9\uc871\uc2dc\ud0a4\uace0 \uae30\ub2a5\uc744 \uc81c\uacf5\ud574\uc57c \ud55c\ub2e4. \uc2dc\uac04\uc774 \ud750\ub97c\uc218\ub85d \uc5b8\uc5b4\uc5d0 \ub300\ud55c \uc694\uad6c\uc0ac\ud56d\uc740 \ubcc0\ud654\ud558\uace0, \uc774\uc5d0 \ubd80\uc751\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubc94\uc6a9\uc801\uc778 \uc5b8\uc5b4\uac00 \ud544\uc694\ud558\uac8c \ub41c\ub2e4. \uc624\ub298\uc740 \uc774\uc0c1\uc801\uc778 \uc5b8\uc5b4\uac00 \ub0b4\uc77c\uc740 \ub108\ubb34 \uc81c\ud55c\uc801\uc77c \uc218 \uc788\ub2e4. \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc740 \ud2b9\uc815 \uc694\uad6c\uc5d0 \ub9de\uac8c \uc5b8\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\ubbc0\ub85c, \ubaa8\ub450\ub97c \uc704\ud55c \ub2e8\uc77c \ucf54\ub529 \uc2a4\ud0c0\uc77c\uc740 \uc788\uc744 \uc218 \uc5c6\ub2e4. \uac01 \uac1c\ubc1c\uc870\uc9c1 \ubcc4\ub85c \uc81c\uc57d\uc0ac\ud56d\uc744 \ucd94\uac00\ud558\uac70\ub098 \ud655\uace0\ud55c \uaddc\uce59\uc744 \ub354\ud574\uc11c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Reference sections: RF.rules: Coding rules RF.books: Books with coding guidelines RF.C++: C++ Programming (C++11/C++14/C++17) RF.web: Websites RS.video: Videos about \"modern C++\" RF.man: Manuals RF.core: Core Guidelines materials","title":"RF: \ub808\ud37c\ub7f0\uc2a4"},{"location":"References/#rfrules","text":"Boost Library Requirements and Guidelines . ???. Bloomberg: BDE C++ Coding . \ucf54\ub4dc \uc870\uc9c1\ud654\uc640 \ubc30\uce58\uc5d0 \uc911\uc810\uc744 \ub450\uace0 \uc788\ub2e4 Facebook: ??? GCC Coding Conventions . C++03\uacfc \uc57d\uac04 \uc62c\ub4dc \ud558\uc9c0\ub9cc \uadf8\ub7ed\uc800\ub7ed \uad1c\ucc2e\ub2e4 Google C++ Style Guide . Geared toward C++03 and (also) older code bases. \uad6c\uae00 \uc804\ubb38\uac00\ub4e4\uc740 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uac1c\uc120\ud558\uae30 \uc704\ud574 \ud65c\ubc1c\ud788 \ud611\ub825\ud558\uace0 \uc788\uace0, \uadf8\ub4e4 \ub610\ud55c \uad8c\ud560 \uc218 \uc788\ub294 \ud604\ub300\uc801\uc774\uace0 \uc77c\ubc18\uc801\uc778 \uaddc\uce59 \uc9d1\ud569\uc774 \ub420 \uc218 \uc788\uae30\ub97c \uae30\ub300\ud55c\ub2e4 JSF++: JOINT STRIKE FIGHTER AIR VEHICLE C++ CODING STANDARDS . Document Number 2RDU00001 Rev C. December 2005. \ube44\ud589 \uc81c\uc5b4 \uc18c\ud504\ud2b8\uc6e8\uc5b4, \uc81c\ud55c\uc2dc\uac04 \ub0b4\uc5d0 \ubc18\uc751\uc744 \ubcf4\uc7a5\ud574\uc57c \ud558\ub294 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ub41c\ub2e4. \uc774\ub294 \ub9e4\uc6b0 \uc81c\uc57d\uc774 \uac15\ud558\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.(\"\ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud328\ud558\uba74 \ub204\uad70\uac00 \uc8fd\ub294\ub2e4\uac70\ub098\"). \uc608\ub97c \ub4e4\uba74, \ube44\ud589\uae30\uac00 \uc774\ub959\ud55c \uc774\ud6c4\ub85c\ub294 \ub3d9\uc801 \ud560\ub2f9\uc774\ub098 \ud574\uc81c\uac00 \ubd88\uac00\ub2a5\ud558\uace0 (\uba54\ubaa8\ub9ac \uc624\ubc84\ud50c\ub85c\uc6b0\ub098 \ud30c\ud3b8\ud654\uac00 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4), (\uc608\uc678\uac00 \uace0\uc815\ub41c \uc9e7\uc740 \uc2dc\uac04 \uc548\uc5d0 \ucc98\ub9ac\ub41c\ub2e4\ub294 \uac83\uc744 \ud655\uc2e4\ud788 \ubcf4\uc7a5\ud560 \ubc29\ubc95\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0) \uc608\uc678 \uae30\ub2a5\uc774 \uc0ac\uc6a9\ub418\uc5b4\uc120 \uc548\ub418\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ud2b9\uc218 \ubaa9\uc801 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc744 \uc704\ud574 \uc2b9\uc778\uc744 \ubc1b\uc544\uc57c\ub9cc \ud55c\ub2e4. \ube44\uc57c\ub124 \uc2a4\ud2b8\ub85c\uc2a4\ud2b8\ub86d\uc740 JSF++\uc758 \uc800\uc790\uc774\uae30 \ub54c\ubb38\uc5d0 \uac00\uc774\ub4dc\ub77c\uc778\ub4e4\uacfc\uc758 \uc720\uc0ac\uc131\uc5d0 \uadf8\ub2e4\uc9c0 \ub180\ub78d\uc9c0 \uc54a\ub2e4. \ucd94\ucc9c\ud560\ub9cc \ud558\uc9c0\ub9cc, \ub9e4\uc6b0 \ud2b9\ubcc4\ud55c \uc0c1\ud669\uc5d0 \ub300\ud55c \uac83\uc784\uc744 \uba85\uc2ec\ud558\ub77c. Mozilla Portability Guide . \uc774\ub984\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef, \ub9ce\uc740 (\uc624\ub798\ub41c) \ucef4\ud30c\uc77c\ub7ec\uc5d0 \ub300\ud55c \uc774\uc2dd\uc744 \ubaa9\ud45c\ub85c \ud558\uace0 \uc788\ub2e4. \ub530\ub77c\uc11c \ud55c\uc815\uc801\uc774\ub2e4. Geosoft.no: C++ Programming Style Guidelines . ???. Possibility.com: C++ Coding Standard . ???. SEI CERT: Secure C++ Coding Standard . \uc608\uc81c\uc640 \ud569\ub9ac\uc131\uc774 \uacc1\ub4e4\uc5ec\uc9c4 \uaddc\uce59\ub4e4\uc774\ub2e4. \ubcf4\uc548\uc5d0 \ubbfc\uac10\ud55c \ucf54\ub4dc\ub97c \uc704\ud55c \uac83\uc774\uc9c0\ub9cc \ub300\ubd80\ubd84\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \uc801\uc6a9\ub420 \uc218 \uc788\ub2e4. High Integrity C++ Coding Standard . llvm . Somewhat brief, pre-C++11, and (not unreasonably) adjusted to its domain. ???","title":"RF.rules: \ucf54\ub529 \uaddc\uce59"},{"location":"References/#rfbooks","text":"Meyers96 Scott Meyers: More Effective C++ . Addison-Wesley 1996. Meyers97 Scott Meyers: Effective C++, Second Edition . Addison-Wesley 1997. Meyers01 Scott Meyers: Effective STL . Addison-Wesley 2001. Meyers05 Scott Meyers: Effective C++, Third Edition . Addison-Wesley 2005. Meyers15 Scott Meyers: Effective Modern C++ . O'Reilly 2015. SuttAlex05 Sutter and Alexandrescu: C++ Coding Standards . Addison-Wesley 2005. More a set of meta-rules than a set of rules. Pre-C++11. Stroustrup05 Bjarne Stroustrup: A rationale for semantically enhanced library languages . LCSD05. October 2005. Stroustrup14 Stroustrup: A Tour of C++ . Addison Wesley 2014. Each chapter ends with an advice section consisting of a set of recommendations. Stroustrup13 Stroustrup: The C++ Programming Language (4th Edition) . Addison Wesley 2013. Each chapter ends with an advice section consisting of a set of recommendations. Stroustrup: Style Guide for Programming: Principles and Practice using C++ . Mostly low-level naming and layout rules. Primarily a teaching tool.","title":"RF.books: \ucf54\ub529 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \uc788\ub294 \ubb38\ud5cc"},{"location":"References/#rfc-c-c11c14","text":"TC++PL4 : A thorough description of the C++ language and standard libraries for experienced programmers. Tour++ : An overview of the C++ language and standard libraries for experienced programmers. Programming: Principles and Practice using C++ : A textbook for beginners and relative novices.","title":"RF.C++: C++ \ud504\ub85c\uadf8\ub798\ubc0d (C++11/C++14)"},{"location":"References/#rfweb","text":"isocpp.org Bjarne Stroustrup's home pages WG21 Boost Adobe open source Poco libraries Sutter's Mill? ???","title":"RF.web: \uc6f9\uc0ac\uc774\ud2b8"},{"location":"References/#rsvideo-c","text":"Bjarne Stroustrup: C++11 Style . 2012. Bjarne Stroustrup: The Essence of C++: With Examples in C++84, C++98, C++11, and C++14 . 2013 All the talks from CppCon '14 Bjarne Stroustrup: The essence of C++ at the University of Edinburgh. 2014. Bjarne Stroustrup: The Evolution of C++ Past, Present and Future . CppCon 2016 keynote. Bjarne Stroustrup: Make Simple Tasks Simple! . CppCon 2014 keynote. Bjarne Stroustrup: Writing Good C++14 . CppCon 2015 keynote about the Core Guidelines. Herb Sutter: Writing Good C++14... By Default . CppCon 2015 keynote about the Core Guidelines. CppCon 15 ??? C++ Next ??? Meting C++ ??? more ???","title":"RS.video: \"\ubaa8\ub358 C++\" \ub3d9\uc601\uc0c1"},{"location":"References/#rfman","text":"ISO C++ Standard C++11. ISO C++ Standard C++14. ISO C++ Standard C++17 . Committee Draft. Palo Alto \"Concepts\" TR . ISO C++ Concepts TS . WG21 Ranges report . Draft.","title":"RF.man: \ub9e4\ub274\uc5bc"},{"location":"References/#rfcore","text":"This section contains materials that has been useful for presenting the core guidelines and the ideas behind them: Our documents directory Stroustrup, Sutter, and Dos Reis: A brief introduction to C++'s model for type- and resource-safety . A paper with lots of examples. Sergey Zubkov: a Core Guidelines talk and here are the slides . In Russian. 2017. Neil MacIntosh: The Guideline Support Library: One Year Later . CppCon 2016. Bjarne Stroustrup: Writing Good C++14 . CppCon 2015 keynote. Herb Sutter: Writing Good C++14... By Default . CppCon 2015 keynote. Peter Sommerlad: C++ Core Guidelines - Modernize your C++ Code Base . ACCU 2017. Bjarne Stroustrup: No Littering! . Bay Area ACCU 2016. It gives some idea of the ambition level for the Core Guidelines. Note that slides for CppCon presentations are available (links with the posted videos). Contributions to this list would be most welcome.","title":"RF.core: \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778 \uc790\ub8cc\ub4e4"},{"location":"References/#_1","text":"\uaddc\uce59, \uc81c\uc548, \ucd94\uac00 \uc815\ubcf4, \ucc38\uace0\uc0ac\ud56d \ub4f1 \ub3c4\uc6c0\uc744 \uc8fc\uc2e0 \ubd84\ub4e4\uc5d0\uac8c \uac10\uc0ac\uc758 \ub9d0\uc500\uc744 \uc804\ud55c\ub2e4: Peter Juhl Neil MacIntosh Axel Naumann Andrew Pardoe Gabriel Dos Reis Zhuang, Jiangang (Jeff) Sergey Zubkov \uadf8\ub9ac\uace0 Github\uc5d0 \uc788\ub294 \uae30\uc5ec\uc790 \ubaa9\ub85d\ub3c4 \ud568\uaed8 \ubd10\uc8fc\uae30\ub97c.","title":" \uac10\uc0ac\uc758 \ub9d0"},{"location":"Resource/","text":"R: \uc790\uc6d0 \uad00\ub9ac \uc774 \uc7a5\uc740 \uc790\uc6d0\uacfc \uad00\ub828\ub41c \uaddc\uce59\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub2e4. \uc790\uc6d0\uc774\ub780 \ud68d\ub4dd\ud574\uc57c\ub9cc \ud558\uace0, (\uba85\uc2dc\uc801 \ud639\uc740 \ubb35\uc2dc\uc801\uc73c\ub85c) \ud574\uc81c\ub41c\ub2e4. \uc8fc\ub85c \uba54\ubaa8\ub9ac, \ud30c\uc77c \ud578\ub4e4, \uc18c\ucf13, \uc7a0\uae08(lock) \uac19\uc740 \uac83\ub4e4\uc774\ub2e4. \ubc18\ub4dc\uc2dc \ud574\uccb4\ub418\uc5b4\uc57c \ud558\ub294 \uc774\uc720\ub294 \uc790\uc6d0 \ubd80\uc871\uc778\ub370, \uc9c0\uc5f0\ub41c \ud615\ud0dc\uc758 \ud574\uccb4\uc870\ucc28\ub3c4 \uc774\ub7f0 \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. \uae30\ubcf8\uc801\uc778 \ubaa9\ud45c\ub294 \uc5b4\ub5a4 \uc790\uc6d0\ub3c4 \ub204\uc218\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uace0, \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \uc790\uc6d0\uc744 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4. \uc790\uc6d0\uc744 \ud574\uccb4\ud558\ub294 \ucc45\uc784\uc744 \uac00\uc9c0\ub294 \uc8fc\uccb4\ub97c \uc6b0\ub9ac\ub294 \uc18c\uc720\uc790(owner)\ub77c\uace0 \ud55c\ub2e4. \ub4dc\ubb3c\uac8c \uc790\uc6d0 \ub204\uc218\uac00 \uc6a9\uc778\ub418\uac70\ub098 \ucd5c\uc120\uc778 \uacbd\uc6b0\uac00 \uc788\ub2e4: \uc785\ub825\uc744 \uae30\ubc18\uc73c\ub85c \ub2e8\uc21c\ud788 \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uad6c\ud604\ud558\uace0 \uc785\ub825\uc5d0 \ube44\ub840\ud558\uc5ec \ud544\uc694\ud55c \uba54\ubaa8\ub9ac \uc591\uc774 \uc99d\uac00\ud55c\ub2e4\uba74, (\uc131\ub2a5\uacfc \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uae30 \uc704\ud55c) \ucd5c\uc120\uc758 \uc804\ub7b5\uc740 \uc5b4\ub5a4 \uc790\uc6d0\ub3c4 \uc0ad\uc81c\ud558\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4. \uac00\uc7a5 \ud070 \uc785\ub825\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc11c \ucda9\ubd84\ud55c \uba54\ubaa8\ub9ac\ub97c \uac00\uc84c\ub2e4\uba74 \uc790\uc6d0\uc774 \uc18c\ube44\ub418\ub3c4\ub85d \ub0b4\ubc84\ub824 \ub46c\ub77c. \ub2e4\ub9cc \ubb54\uac00 \uc798\ubabb\uc744 \ud588\ub2e4\uba74 \uc0c1\ud669\uc5d0 \uc54c\ub9de\ub294 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \uc8fc\ub3c4\ub85d \ud574\ub77c. \uc774\ub7f0 \uacbd\uc6b0\ub294 \ub354 \uc774\uc0c1 \uc5b8\uae09\ud558\uc9c0 \uc54a\uaca0\ub2e4. \uc790\uc6d0 \uad00\ub9ac \uaddc\uce59 \uc694\uc57d: R.1: \uc790\uc6d0 \ud578\ub4e4\uacfc RAII(\uc790\uc6d0 \ud68d\ub4dd\uc2dc \ucd08\uae30\ud654)\ub97c \uc0ac\uc6a9\ud574\uc11c \uc790\ub3d9\uc801\uc73c\ub85c \uad00\ub9ac\ub418\ub3c4\ub85d \ud558\ub77c R.2: \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c\ub294, \ud3ec\uc778\ud130\ub294 \uc11c\ub85c \ub2e4\ub978 \uac1c\uccb4\ub4e4\uc744 \ud45c\uc2dc\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c R.3: \uc6d0\uc2dc \ud3ec\uc778\ud130( T* )\ub294 \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\ub294\ub2e4 R.4: \ucc38\uc870( T& )\ub294 \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\ub294\ub2e4 R.5: \uc720\ud6a8 \ubc94\uc704 \uc548\uc758 \uac1c\uccb4\ub97c \uc120\ud638\ud558\ub77c. \ubd88\ud544\uc694\ud55c \ub3d9\uc801\ud560\ub2f9\uc744 \ud558\uc9c0 \ub9c8\ub77c R.6: const \uac00 \uc544\ub2cc \uc804\uc5ed \ubcc0\uc218\ub97c \uc9c0\uc591\ud558\ub77c \ud560\ub2f9\uacfc \ud574\uc81c \uaddc\uce59 \uc694\uc57d: R.10: malloc() \uacfc free() \uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c R.11: \uba85\uc2dc\uc801\uc778 new \uc640 delete \ud638\ucd9c\uc744 \uc9c0\uc591\ud558\ub77c R.12: \uba85\uc2dc\uc801\uc778 \ud560\ub2f9\uc758 \uacb0\uacfc\ub294 \uc989\uc2dc \uad00\ub9ac \uac1c\uccb4\uc5d0 \uc804\ub2ec\ud558\ub77c R.13: \ud558\ub098\uc758 \ud45c\ud604\uc2dd \uad6c\ubb38\uc5d0\uc11c \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc740 \ucd5c\ub300 \ud55c\ubc88\ub9cc \uc218\ud589\ud558\ub77c R.14: ??? \ubc30\uc5f4 vs. \ud3ec\uc778\ud130 \ub9e4\uac1c\ubcc0\uc218 R.15: \ud560\ub2f9/\ud574\uc81c\uac00 \uc9dd\uc744 \uc774\ub8e8\ub3c4\ub85d \uc911\ubcf5\uc815\uc758\ud558\ub77c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \uaddc\uce59 \uc694\uc57d: R.20: \uc18c\uc720\uad8c\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 unique_ptr \ud639\uc740 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c R.21: \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4\uba74 shared_ptr \ubcf4\ub2e4\ub294 unique_ptr \ub97c \uc120\ud638\ud558\ub77c R.22: shared_ptr \ub97c \ub9cc\ub4e4\ub54c\ub294 make_shared() \ub97c \uc0ac\uc6a9\ud558\ub77c R.23: unique_ptr \ub97c \ub9cc\ub4e4\ub54c\ub294 make_unique() \ub97c \uc0ac\uc6a9\ud558\ub77c R.24: shared_ptr \uc758 \uc21c\ud658\ucc38\uc870\ub97c \ubd80\uc218\uae30 \uc704\ud574 weak_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c R.30: \uc218\uba85\uc8fc\uae30 \uc758\ubbf8\uad6c\uc870\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c R.31: \ud45c\uc900 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc788\ub2e4\uba74, \ud45c\uc900\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\ub77c R.32: \ud568\uc218\uac00 widget \uc758 \uc18c\uc720\uad8c\uc744 \ub9e1\ub294\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 unique_ptr<widget> \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c R.33: \ud568\uc218\uac00 widget \uc744 \uc0c8\ub85c \uc124\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 unique_ptr<widget>& \ub97c \uc0ac\uc6a9\ud558\ub77c R.34: \ud568\uc218\uac00 \uc18c\uc720\uc790 \uc911 \ud558\ub098\ub77c\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 shared_ptr<widget> \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c R.35: \ud568\uc218\uac00 \uacf5\uc720 \ud3ec\uc778\ud130\ub97c \uc7ac\uc124\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 shared_ptr<widget>& \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c R.36: \ud568\uc218\uac00 \uac1c\uccb4\uc5d0 \ub300\ud55c \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc720\uc9c0\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 const shared_ptr<widget>& \uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c ??? R.37: \uc7ac\uba85\uba85(aliased)\ub41c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0\uc11c \ud68d\ub4dd\ud55c \ud3ec\uc778\ud130 \ud639\uc740 \ucc38\uc870\ub97c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c R.1: \uc790\uc6d0 \ud578\ub4e4\uacfc RAII(\uc790\uc6d0 \ud68d\ub4dd\uc2dc \ucd08\uae30\ud654)\ub97c \uc0ac\uc6a9\ud574\uc11c \uc790\ub3d9\uc801\uc73c\ub85c \uad00\ub9ac\ub418\ub3c4\ub85d \ud558\ub77c Reason \uc218\ub3d9 \uc790\uc6d0 \uad00\ub9ac\uc758 \ubcf5\uc7a1\uc131\uacfc \ub204\ucd9c\uc744 \ud53c\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc744 \uc54c\uc544\ubcf8\ub2e4. C++ \uc5b8\uc5b4\uc801 \uac15\uc81c\uc778 \uc0dd\uc131\uc790 \uc18c\uba78\uc790 \ub300\uce6d\uc740 fopen / fclose , \uadf8\ub9ac\uace0 lock / unlock , new / delete \uacfc \uac19\uc740 \uc790\uc6d0 \ud68d\ub4dd/\ud574\uccb4 \ud568\uc218\uc758 \uc9dd\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. \uc774 \ud2b9\uc9d5\uc744 \uc0ac\uc6a9\ud574\uc11c \uc790\uc6d0\uc758 \ud68d\ub4dd/\ud574\uccb4\uc2dc \uc9dd \ud568\uc218 \ud638\ucd9c\uc774 \ud544\uc694\ud55c \uc790\uc6d0\uc744 \ub2e4\ub8f0 \ub54c\ub294 \uc0dd\uc131\uc790\uc5d0\uc11c \uc790\uc6d0\uc744 \ud68d\ub4dd\ud558\uace0 \uc18c\uba78\uc790\uc5d0\uc11c \ud574\uccb4\uac00 \uac15\uc81c\ub418\ub3c4\ub85d \uac1c\uccb4\ub85c \ub9ac\uc18c\uc2a4\ub97c \ucea1\uc290\ud654\ud574\ub77c. Example, bad \ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void send ( X * x , cstring_span destination ) { auto port = open_port ( destination ); my_mutex . lock (); // ... send ( port , x ); // ... my_mutex . unlock (); close_port ( port ); delete x ; } \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0 unlock , close_port , delete \uac00 \uc815\ud655\ud788 \uc21c\uc11c\ub300\ub85c \ud638\ucd9c\ub418\uc5b4\uc57c \ud55c\ub2e4\ub294 \uc810\uc744 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \ub9cc\uc57d ... \ub85c \ud45c\uc2dc\ub41c \ucf54\ub4dc\uc5d0\uc11c \uc608\uc678\uac00 \ub358\uc838\uc9c0\uba74, \uadf8\ub85c\uc778\ud574 x \ub294 \ub204\ucd9c\ub418\uace0 my_mutex \ub294 \uc7a0\uae08\uc744 \ud574\uc81c\ud558\uc9c0 \uc54a\uac8c \ub41c\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void send ( unique_ptr < X > x , cstring_span destination ) // x owns the X { Port port { destination }; // port owns the PortHandle lock_guard < mutex > guard { my_mutex }; // guard owns the lock // ... send ( port , x ); // ... } // automatically unlocks my_mutex and deletes the pointer in x \ubaa8\ub4e0 \uc790\uc6d0 \uad00\ub9ac\uac00 \uc790\ub3d9\ud654\ub418\uc5c8\uace0 \uc608\uc678\uc640 \uc0c1\uad00\uc5c6\uc774 \ubaa8\ub4e0 \uacbd\ub85c\uc5d0\uc11c \ud55c\ubc88 \uc218\ud589\ub41c\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c \ud568\uc218\uac00 \ud3ec\uc778\ud130 \uc18c\uc720\uad8c\uc744 \uac00\uc838\uac04 \uac83\ub3c4 \ubcf4\uc5ec\uc8fc\uace0 \uc788\ub2e4. Port \ub294 \uc5b4\ub5bb\uac8c \uad6c\ud604\ud560 \uc218 \uc788\uc744\uae4c? \uc790\uc6d0\uc744 \ucea1\uc290\ud654\ud558\ub294 \uac04\ub2e8\ud55c \ub798\ud37c\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4: class Port { PortHandle port ; public : Port ( cstring_span destination ) : port { open_port ( destination )} { } ~ Port () { close_port ( port ); } operator PortHandle () { return port ; } // port handles can't usually be cloned, so disable copying and assignment if necessary Port ( const Port & ) = delete ; Port & operator = ( const Port & ) = delete ; }; Note \uc18c\uba78\uc790\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub85c \ud45c\ud604\ub418\uc9c0 \uc54a\uace0 \ub2e4\ub8e8\uae30 \ud798\ub4e0 \uc790\uc6d0\uc778 \uacbd\uc6b0 \ud074\ub798\uc2a4\ub85c \uac10\uc2f8\uc11c \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\uac70\ub098 finally \ub97c \uc0ac\uc6a9\ud558\ub77c. See Also RAII R.2: \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c\ub294, \ud3ec\uc778\ud130\ub294 \uc11c\ub85c \ub2e4\ub978 \uac1c\uccb4\ub4e4\uc744 \ud45c\uc2dc\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c Reason \ubc30\uc5f4\uc740 \ucee8\ud14c\uc774\ub108 \ud0c0\uc785(\uac00\ub839, vector (\uc18c\uc720)\uc774\ub098 span (\ube44 \uc18c\uc720))\uc73c\ub85c \uac00\uc7a5 \uc798 \ud45c\ud604\ub41c\ub2e4. \uc774\ub7f0 \ucee8\ud14c\uc774\ub108\uc640 \ubdf0\ub294 \ubc94\uc704 \uac80\uc0ac\ub97c \uc704\ud55c \ucda9\ubd84\ud55c \uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4. Example, bad void f ( int * p , int n ) // n is the number of elements in p[] { // ... p [ 2 ] = 7 ; // bad: subscript raw pointer // ... } \ucef4\ud30c\uc77c\ub7ec \uc8fc\uc11d\uc744 \uc77d\uc9c0 \uc54a\ub294\ub2e4. \ub610\ud55c \ub2e4\ub978 \ucf54\ub4dc\ub97c \uc77d\uc9c0 \uc54a\uace0\ub294 p \uac00 \uc815\ub9d0\ub85c n \ub9cc\ud07c\uc744 \uac00\ub974\ud0a4\ub294\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. \ub300\uc2e0 span \uc744 \uc0ac\uc6a9\ud558\ub77c. Example void g ( int * p , int fmt ) // print *p using format #fmt { // ... uses *p and p[0] only ... } Exception C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc740 0\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790 \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uae30\ub3c4 \ud55c\ub2e4. \uad00\ub840\ub97c \ub530\ub978\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc8fc\uae30 \uc704\ud574 char* \ubcf4\ub2e4\ub294 zstring \uc744 \uc0ac\uc6a9\ud558\ub77c Note \ud558\ub098\uc758 \uc6d0\uc18c\ub97c \uc704\ud574\uc11c\ub294 \ucc38\uc870\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7ec\ub098 nullptr \uc774 \uac00\ub2a5\ud55c \uacbd\uc6b0\ub77c\uba74 \ucc38\uc870\uac00 \uc88b\uc740 \ub300\uc548\uc740 \uc544\ub2c8\ub2e4. Enforcement \ucee8\ud14c\uc774\ub108 \ub610\ub294 \ubdf0, \ubc18\ubcf5\uc790(iterator)\uac00 \uc544\ub2cc \ud3ec\uc778\ud130\uc5d0\uc11c \uc8fc\uc18c \uacc4\uc0b0(++ \ud3ec\ud568)\uc744 \uc0bc\uac00\ud558\ub77c. \uc774 \uaddc\uce59\uc774 \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0 \uc801\uc6a9\ub41c\ub2e4\uba74 \uc218\ub9ce\uc740 false positive\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uac04\ub2e8\ud55c \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\ub294 \ubc30\uc5f4 \uc774\ub984\uc744 \uc9c0\uc801\ud558\ub77c \ucee8\ud14c\uc774\ub108, \ubdf0, \ubc18\ubcf5\uc790\uac00 \uc544\ub2cc \ud3ec\uc778\ud130 \uc5f0\uc0b0\uc744 \uc9c0\uc801\ud558\ub77c. (\uc774\ub294 ++ \ub97c \ud3ec\ud568\ud55c\ub2e4) \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud574 \uc804\ub2ec\ud560 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c R.3: \uc6d0\uc2dc \ud3ec\uc778\ud130\ub294( T* ) \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\ub294\ub2e4 raw pointer: \uc6d0\uc2dc \ud3ec\uc778\ud130 Reason C++ \ud45c\uc900 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc6d0\uc2dc \ud3ec\uc778\ud130\ub294 \uc18c\uc720\ub97c \ud558\uc9c0 \uc54a\ub294\ub2e4. \uc2e0\ub8b0\ud560 \uc218 \uc788\uace0 \ud6a8\uacfc\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uac1c\uccb4\ub97c \uc81c\uac70\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uccb4\ub97c \uc18c\uc720\ud558\ub294 \ud3ec\uc778\ud130\uac00 \ud544\uc694\ud558\ub2e4. Example void f () { int * p1 = new int { 7 }; // bad: raw owning pointer auto p2 = make_unique < int > ( 7 ); // OK: the int is owned by a unique pointer // ... } unique_ptr \ub294 \uac1c\uccb4\uc758 \uc81c\uac70\ub97c \ubcf4\uc7a5\ud558\uae30 \ub54c\ubb38\uc5d0 \uba54\ubaa8\ub9ac \ub204\uc218\ub97c \ucc28\ub2e8\ud574\uc900\ub2e4. (\uc608\uc678 \ubc1c\uc0dd\uc5d0\uc11c\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub2e4.) T* \ub294 \uadf8\ub807\uc9c0 \uc54a\ub2e4. Example template < typename T > class X { // ... public : T * p ; // bad: it is unclear whether p is owning or not T * q ; // bad: it is unclear whether q is owning or not }; \uba85\uc2dc\uc801\uc778 \uc18c\uc720\uad8c\uc744 \ub9cc\ub4e4\uc5b4 \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc218 \uc788\ub2e4: template < typename T > class X2 { // ... public : owner < T *> p ; // OK: p is owning T * q ; // OK: q is not owning }; Exception \uc8fc\uc694 \uc608\uc678\uc0ac\ud56d\uc740 \ub808\uac70\uc2dc \ucf54\ub4dc\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ud2b9\ud788 ABI\ub97c \ud1b5\ud574\uc11c C \ud639\uc740 C \uc2a4\ud0c0\uc77c C++ \uc778\ud130\ud398\uc774\uc2a4\uc640 \ud638\ud658\uc131\uc744 \uac00\uc838\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uadf8\ub807\ub2e4. T* \ub97c \uc18c\uc720\ud558\ub294 \ubc29\uc2dd\uc744 \uc704\ubc18\ud558\ub294 \uc5b5 \ub2e8\uc704\uc758 \ucf54\ub4dc\uac00 \uc874\uc7ac\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ubb34\uc2dc\ud560 \uc218\ub294 \uc5c6\ub2e4. 20\ub144 \ubb35\uc740 \"\ub808\uac70\uc2dc\" \ucf54\ub4dc\ub97c \ucd5c\uc2e0 C++ \ucf54\ub4dc\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\ub294 \ud234\uc774 \uc788\uc73c\uba74 \uc88b\uc744\uac83\uc774\ub2e4. \uc774\ub7f0 \ud234\uc758 \uac1c\ubc1c\uacfc \ud234\uc758 \uc0ac\uc6a9\uc744 \ub3c5\ub824\ud560\uac83\uc774\uace0 \ub610\ud55c \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ub3c4\uc6c0\uc774 \ub418\uc5c8\uc73c\uba74 \uc88b\uaca0\ub2e4. \uac00\uc2dc\uc801\uc778 \uc131\uacfc\uac00 \ubcf4\uc77c\ub54c\uae4c\uc9c0 \uba87 \ub144\uc740 \ub354 \uac78\ub9b4\uac83\uc774\ub2e4: \ucd5c\uc2e0 \ucf54\ub4dc\ub85c \ubc14\uafc0\uc218 \uc788\uac8c \ub418\uae30\uc804\uc5d0 \"\ub808\uac70\uc2dc \ucf54\ub4dc\"\uac00 \ub354 \ube60\ub974\uac8c \uc0dd\uc131\ub420\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. \uc774 \ubaa8\ub4e0 \ucf54\ub4dc\ub294 \ub2e4\uc2dc \uc791\uc131 \ub420\uc21c \uc5c6\uace0 (\uc88b\uc740 \ucf54\ub4dc \ubcc0\ud658 \uc18c\ud504\ud2b8\uc6e8\uc5b4\uac00 \uc788\ub354\ub77c\ub3c4) \uc801\uc5b4\ub3c4 \ub2f9\uc7a5\uc740 \uc544\ub2d0\uac83\uc774\ub2e4. \uc774 \ubb38\uc81c\ub294 \ubaa8\ub4e0 \ud3ec\uc778\ud130\ub97c unique_ptr \uc640 shared_ptr \ub85c \ub300\uccb4\ud558\ub294 \uac83\uc73c\ub85c\ub294 \ud574\uacb0\ud560 \uc218 \uc5c6\ub2e4. \ubd80\ubd84\uc801\uc73c\ub85c \uc774\ub294 \uae30\ucd08\uc801\uc778 \uc790\uc6d0 \ud578\ub4e4\uc744 \uad6c\ud604\ud560\ub54c, \ub9c8\uce58 \ub0b4\ubd80\uc758 \ub2e8\uc21c\ud55c \ud3ec\uc778\ud130\ub4e4\ucc98\ub7fc \uc18c\uc720\ud558\ub294 \uc6d0\uc2dc \ud3ec\uc778\ud130\ub4e4\uc744 \uc0ac\uc6a9\ud558\uace0 \ub610 \ud544\uc694\ub85c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc77c\ubc18\uc801\uc778 vector \uad6c\ud604\uc740 \ud558\ub098\uc758 \uc18c\uc720\ud558\ub294 \ud3ec\uc778\ud130\uc640 \ub450\uac1c\uc758 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294 \ud3ec\uc778\ud130\ub4e4\uc744 \uac00\uc9c4\ub2e4. \ub9ce\uc740 ABI\ub4e4(\uadf8\ub9ac\uace0 \ud2b9\ud788 C \ucf54\ub4dc\ub85c \uc774\uc5b4\uc9c0\ub294 \ubaa8\ub4e0 \uc778\ud130\ud398\uc774\uc2a4\ub4e4)\uc740 T* \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc5b4\ub5a4 \uacbd\uc6b0\ub294 \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uae30\ub3c4 \ud55c\ub2e4. C\uc640 \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud574\uc57c \ud55c\ub2e4\uba74 \ub2e8\uc21c\ud788 owner \ub97c \uc0ac\uc6a9\ud560(annotate) \uc218 \uc5c6\ub2e4. (\uc774\ub7f0 \uacbd\uc6b0\ub294 owner \uac00 C++\uc5d0\uc11c\ub9cc \uc801\uc6a9\ub418\ub3c4\ub85d \ud558\ub294 \ub9e4\ud06c\ub85c\uac00 \uc88b\uc740 \uc0ac\uc6a9\uc774 \ub420 \uc218\ub3c4 \uc788\ub2e4). Note owner<T*> \uc5d0\ub294 T* \uc774\uc0c1\uc758 \uc758\ubbf8\uac00 \uc5c6\ub2e4. \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\uac70\ub098 ABI\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uc73c\uba74\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc774 \ud0c0\uc785\uc740 \ud504\ub85c\uadf8\ub798\uba38\uc640 \ubd84\uc11d\ub3c4\uad6c\ub4e4\uc744 \uc704\ud55c \uc9c0\ud45c\uc77c \ubfd0\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, owner<T*> \uac00 \uc5b4\ub5a4 \ud074\ub798\uc2a4\uc758 \uba64\ubc84\ub77c\uba74, \uadf8 \ud074\ub798\uc2a4\ub294 \ud574\ub2f9 \uba64\ubc84\ub97c delete \ud558\ub294 \uc18c\uba78\uc790\ub97c \uac00\uc9c0\ub294 \uac83\uc774 \ub098\uc744 \uac83\uc774\ub2e4. Example, bad \uc6d0\uc2dc \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub294\uac83\uc740 \ud638\ucd9c\uc790\uc5d0\uac8c \uc218\uba85 \uad00\ub9ac\uc5d0 \ubd88\ud655\uc2e4\uc131\uc744 \uc2ec\uc5b4\uc900\ub2e4; \ub2e4\uc2dc \ub9d0\ud574, \ub204\uac00 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uac1c\uccb4\ub97c \uc81c\uac70\ud574\uc57c \ud558\ub294\uac00? Gadget * make_gadget ( int n ) { auto p = new Gadget { n }; // ... return p ; } void caller ( int n ) { auto p = make_gadget ( n ); // remember to delete p // ... delete p ; } leak \uc73c\ub85c \uc778\ud55c \uace0\ud1b5\ubfd0\ub9cc \uc544\ub2c8\ub77c \uc774\ub294 \uc4f8\ub370\uc5c6\uc774 \ub9ce\uace0 \ubbf8\uc2ec\uca4d\uc740 \ud560\ub2f9\uacfc \ud574\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d Gadget\uc744 \ud568\uc218 \ubc14\uae65\uc73c\ub85c \uac00\uc838\uc624\ub294 \ube44\uc6a9\uc774 \ud06c\uc9c0 \uc54a\ub2e4\uba74, \ub2e8\uc21c\ud788 \uac12\uc73c\ub85c \ubc18\ud658\ud558\ub294 \uac83\ub3c4 \ud55c \ubc29\ubc95\uc774\ub2e4. ( \"out\" \ubc18\ud658 \ud56d\ubaa9\uc744 \ubcf4\ub77c): Gadget make_gadget ( int n ) { Gadget g { n }; // ... return g ; } Note \uc774 \uaddc\uce59\uc740 \ud329\ud1a0\ub9ac \ud568\uc218\uc5d0 \uc801\uc6a9\ub420 \uc218 \uc788\ub2e4. Note \ub9cc\uc57d \ud3ec\uc778\ud130 \uc758\ubbf8\uad6c\uc870\uac00 \ud544\uc694\ud558\ub2e4\uba74 (\uc0c1\uc704 \ud074\ub798\uc2a4(\uc778\ud130\ud398\uc774\uc2a4)\ub97c \ucc38\uc870\ud55c\ub2e4\uac70\ub098), \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub77c Enforcement (\uc26c\uc6c0) owner<T> \uac00 \uc544\ub2cc \uc6d0\uc2dc \ud3ec\uc778\ud130\ub97c delete \ud558\uba74 \uacbd\uace0\ud558\ub77c. (\uc911\uac04) Warn on failure to either reset or explicitly delete an owner<T> pointer on every code path. (\uc26c\uc6c0) new \uc758 \uacb0\uacfc\uac00 \uc6d0\uc2dc \ud3ec\uc778\ud130\uc5d0 \ub300\uc785\ub41c\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. (\uc26c\uc6c0) \ud568\uc218 \uc548\uc5d0\uc11c \uc774\ub3d9 \uc0dd\uc131\uc774 \uac00\ub2a5\ud55c \uac1c\uccb4\uac00 \ud560\ub2f9\ub418\ub294 \uacbd\uc6b0 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 \uac12\uc73c\ub85c \ubc18\ud658\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c R.4: \ucc38\uc870\ub294( T& ) \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\ub294\ub2e4 Reason C++ \ud45c\uc900\ubfd0\ub9cc \uc544\ub2c8\ub77c \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \ucc38\uc870\ub294 \uc18c\uc720\ub97c \ud558\uc9c0 \uc54a\ub294\ub2e4. \uc2e0\ub8b0\ud560 \uc218 \uc788\uace0 \ud6a8\uacfc\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uac1c\uccb4\ub97c \uc81c\uac70\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uccb4\ub97c \uc18c\uc720\ud558\ub294 \ud3ec\uc778\ud130\uac00 \ud544\uc694\ud558\ub2e4. Example void f () { int & r = * new int { 7 }; // bad: raw owning reference // ... delete & r ; // bad: violated the rule against deleting raw pointers } See Also \uc6d0\uc2dc \ud3ec\uc778\ud130 \uaddc\uce59\ub4e4 Enforcement \uc6d0\uc2dc \ud3ec\uc778\ud130 \uaddc\uce59\ub4e4 \uc744 \ubcf4\ub77c R.5: \uc720\ud6a8 \ubc94\uc704 \uc548\uc758 \uac1c\uccb4\ub97c \uc120\ud638\ud558\ub77c. \ubd88\ud544\uc694\ud55c \ub3d9\uc801\ud560\ub2f9\uc744 \ud558\uc9c0 \ub9c8\ub77c Reason \uc720\ud6a8\ubc94\uc704 \ub0b4 \uac1c\uccb4\ub294 \uc9c0\uc5ed \uac1c\uccb4, \uc804\uc5ed \uac1c\uccb4, \ud639\uc740 \uba64\ubc84\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc774\ub294 \ud574\ub2f9 \uc2dc\uc810\uc758 \ubc94\uc704 \ub0b4\uc5d0\uc11c \ubcc4\ub3c4\uc758 \ud560\ub2f9/\ud574\uc81c \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc720\ud6a8\ubc94\uc704 \ub0b4 \uac1c\uccb4\uc758 \uba64\ubc84\ub4e4\uc740 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0 \uc758\ud574 \uc218\uba85\uc774 \uad00\ub9ac\ub41c\ub2e4. Example \ub2e4\uc74c \uc608\ub294 \ubd88\ud544\uc694\ud55c \ud560\ub2f9\ud654 \ud574\uc81c\ub97c \ud558\uae30 \ub584\ubb38\uc5d0 \ube44\ud6a8\uc728\uc801\uc774\uace0, \uc608\uc678\uc5d0 \ucde8\uc57d\ud558\uba70, ... \ubd80\ubd84\uc5d0\uc11c\ub294 \ub204\uc218\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4: void f ( int n ) { auto p = new Gadget { n }; // ... delete p ; } \ub300\uc2e0, \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c: void f ( int n ) { Gadget g { n }; // ... } Enforcement (\uc911\uac04) \ud568\uc218 \ub0b4\uc758 \ubaa8\ub4e0 \uacbd\ub85c\uc5d0\uc11c \uac1c\uccb4\uac00 \ud560\ub2f9\ub418\uace0 \ud574\uc81c\ub41c\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\ub294 \uc9c0\uc5ed auto \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\ub2e8\uc21c) \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c unique_ptr \ub610\ub294 shared_ptr \uac00 \uc774\ub3d9, \ubcf5\uc0ac, \ub300\uc785\ub418\uac70\ub098 \uc18c\uba78\ud558\uae30 \uc804\uc5d0 reset \ub418\uba74 \uacbd\uace0\ud558\ub77c. R.6: const \uac00 \uc544\ub2cc \uc804\uc5ed \ubcc0\uc218\ub97c \uc9c0\uc591\ud558\ub77c Reason \uc804\uc5ed \ubcc0\uc218\ub294 \ubaa8\ub4e0 \uacf3\uc5d0\uc11c \uc811\uadfc\ub420 \uc218 \uc788\uace0 \uba85\ubc31\ud788 \uad00\ub828 \uc5c6\ub294 \uac1c\uccb4\ub4e4 \uc0ac\uc774\uc5d0 \ub9d0\ub3c4 \uc548\ub418\ub294 \uc758\uc874\uc131\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc624\ub958\uc758 \uc6d0\uc778 \uc911 \uc798 \uc54c\ub824\uc9c4 \uac83\uc774\uae30\ub3c4 \ud558\ub2e4. \uacbd\uace0 : \uc804\uc5ed \uac1c\uccb4\uc758 \ucd08\uae30\ud654 \uc21c\uc11c\ub294 \ubcf4\uc7a5\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc0c1\uc218\ub85c \uc804\uc5ed \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud558\uace0 \uc2f6\ub2e4\uba74, const \uac1c\uccb4\uc5d0 \ub300\ud574\uc11c\ub3c4 \ucd08\uae30\ud654 \uc21c\uc11c\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\uc744 \uc218 \uc788\ub2e4\ub294 \uc810\uc744 \uba85\uc2ec\ud558\ub77c. Exception \uc2f1\uae00\ud1a4 \ud328\ud134 \ubcf4\ub2e4\ub294 \uc804\uc5ed \uac1c\uccb4\uac00 \ub098\uc744 \uc218\ub3c4 \uc788\ub2e4. Exception \ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294( const ) \uc804\uc5ed \uac1c\uccb4\ub294 \uc774\ub7f0 \ubb38\uc81c\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uc9c0 \uc54a\ub294\ub2e4. Enforcement (??? NM: const \uac00 \uc544\ub2cc static \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574\uc11c\ub3c4 \uacbd\uace0\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc740\ub370 ... \uadf8\ub807\uac8c \ud574\uc57c \ud558\ub294\uac00?) R.alloc: \ud560\ub2f9\uacfc \ud574\uc81c R.10: malloc() \uacfc free() \uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c Reason malloc() \uacfc free() \ub294 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. new \uacfc delete \uc640 \uc11e\uc5b4\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. Example class Record { int id ; string name ; // ... }; void use () { // p1 may be nullptr // *p1 is not initialized; in particular, // that string isn't a string, but a string-sized bag of bits Record * p1 = static_cast < Record *> ( malloc ( sizeof ( Record ))); auto p2 = new Record ; // unless an exception is thrown, *p2 is default initialized auto p3 = new ( nothrow ) Record ; // p3 may be nullptr; if not, *p3 is default initialized // ... delete p1 ; // error: cannot delete object allocated by malloc() free ( p2 ); // error: cannot free() object allocated by new } delete \ub098 free() \uac00 \ub3d9\uc791\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc2e4\ud589\uc2dc\uac04 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0ac\uc218\ub3c4 \uc788\ub2e4. Exception \uc608\uc678\uac00 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774\ub098 \ucf54\ub4dc \uad6c\uac04\uc774 \uc788\ub2e4. \uc0dd\uba85\uc774 \ub2ec\ub824\uc788\uc5b4\uc11c \uc8fc\uc5b4\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \ubc18\uc751\ud574\uc57c \ud558\ub294(life-critical hard-real-time) \uacbd\uc6b0\uac00 \uc774\uc5d0 \ud574\ub2f9\ud55c\ub2e4. \ub9ce\uc740 \uc608\uc678\uc5d0 \ub300\ud55c \uae08\uc9c0\uc0ac\ud56d(ban)\ub4e4\uc774 (\ub098\uc05c) \ubbf8\uc2e0 \ud639\uc740 \uccb4\uacc4\uc801\uc73c\ub85c \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\uc9c0 \uc54a\uc740(\ubd88\ud589\ud558\uac8c\ub3c4, \uc885\uc885 \ud544\uc694\ud55c \uacbd\uc6b0\uac00 \uc0dd\uae34\ub2e4) \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0\uc11c \ubd80\ud130 \ub098\uc628 \uac71\uc815\uc5d0\uc11c \ub098\uc654\ub2e4\ub294 \uc810\uc744 \uc778\uc9c0\ud558\ub77c. \uadf8\ub7f0 \uacbd\uc6b0, new \uc5f0\uc0b0\uc790\uc758 nothrow \ubc84\uc804\uc744 \uace0\ub824\ud558\ub77c Enforcement \uba85\uc2dc\uc801\uc778 malloc \uacfc free \uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud558\ub77c R.11: \uba85\uc2dc\uc801\uc778 new \uc640 delete \ud638\ucd9c\uc744 \uc9c0\uc591\ud558\ub77c Reason new \ub85c \ubc18\ud658\ub41c \ud3ec\uc778\ud130\ub294 \ub9ac\uc18c\uc2a4 \ud578\ub4e4( delete \ub97c \ud638\ucd9c\ud560 \uc218 \uc788\ub294)\uc5d0 \uc885\uc18d\ub418\uc5b4\uc57c \ud55c\ub2e4. new \ub85c \ubc18\ud658\ub41c \ud3ec\uc778\ud130\uac00 \uc6d0\uc2dc \ud3ec\uc778\ud130\uc5d0 \ud560\ub2f9\ub418\uba74 \ub204\uc218\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Note \uaddc\ubaa8\uac00 \ud070 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c, \ub178\ucd9c\ub41c delete \ub294 (\uc774\ub294 \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub294 \ucf54\ub4dc\uac00 \uc544\ub2cc \ub2e4\ub978 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\uc5d0 delete \uac00 \uc788\ub294 \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4) \ubc84\uadf8\uc640 \uac19\ub2e4: \ub9cc\uc57d N\ubc88\uc758 delete \ud638\ucd9c\uc774 \uc788\ub2e4\uba74, N+1\ubc88 \ud639\uc740 N-1\ubc88\uc774 \ud544\uc694\ud55c\uc9c0 \uc5b4\ub5bb\uac8c \ud655\uc2e0\ud560 \uc218 \uc788\uaca0\ub294\uac00? \ubc84\uadf8\uac00 \uc228\uc5b4\uc788\uc744 \uc218\ub3c4 \uc788\ub2e4: \uc720\uc9c0\ubcf4\uc218 \uc911\uc5d0 \uc0c8\ub86d\uac8c \ub098\ud0c0\ub0a0\uc218\ub3c4 \uc788\ub2e4. \ub178\ucd9c\ub41c new \uac00 \uc788\ub2e4\uba74, \uc544\ub9c8\ub3c4 \uc5b4\ub514\uc120\uac00 \ub178\ucd9c\ub41c delete \uac00 \ud544\uc694\ud560 \uac83\uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ubc84\uadf8\uac00 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4. Enforcement (\ub2e8\uc21c) new \uc640 delete \uac00 \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 make_unique \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. R.12: \uba85\uc2dc\uc801\uc778 \ud560\ub2f9\uc758 \uacb0\uacfc\ub294 \uc989\uc2dc \uad00\ub9ac \uac1c\uccb4\uc5d0 \uc804\ub2ec\ud558\ub77c Reason \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74, \uc608\uc678\ub098 \ubc18\ud658\uc774 \uc790\uc6d0 \ub204\uc218\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. Example, bad void f ( const string & name ) { FILE * f = fopen ( name , \"r\" ); // open the file vector < char > buf ( 1024 ); auto _ = finally ([ f ] { fclose ( f ); }); // remember to close the file // ... } buf \uc5d0\uc11c\uc758 \ud560\ub2f9\uc740 \uc2e4\ud328\ud560 \uc218 \uc788\uace0 \uadf8 \uacbd\uc6b0 \ud30c\uc77c \ud578\ub4e4\uc758 \ub204\uc218\uac00 \ubc1c\uc0dd\ud55c\ub2e4. Example void f ( const string & name ) { ifstream f { name }; // open the file vector < char > buf ( 1024 ); // ... } \uc774\uc640 \uac19\uc740 ( ifstream \ub0b4\ubd80\uc758) \ud30c\uc77c \ud578\ub4e4 \uc0ac\uc6a9\uc740 \ub2e8\uc21c\ud558\uba70, \ud6a8\uacfc\uc801\uc774\uace0, \uc548\uc804\ud558\ub2e4. Enforcement \ud3ec\uc778\ud130\ub97c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud574 \uba85\uc2dc\uc801\uc778 \ud560\ub2f9\uc744 \ud588\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c (\ubb38\uc81c: \uc9c1\uc811\uc801\uc778 \uc790\uc6d0 \ud560\ub2f9\uc744 \uc5bc\ub9c8\ub098 \ub9ce\uc774 \uc778\uc9c0\ud560 \uc218 \uc788\uc744 \uac83\uc778\uac00?) R.13: \ud558\ub098\uc758 \ud45c\ud604\uc2dd \uad6c\ubb38\uc5d0\uc11c \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc740 \ucd5c\ub300 \ud55c\ubc88\ub9cc \uc218\ud589\ud558\ub77c Reason \ud55c \uad6c\ubb38\uc5d0\uc11c \ub450\ubc88\uc758 \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc744 \uc218\ud589\ud558\uba74, \ud568\uc218 \uc778\uc790\ub97c \ud3ec\ud568\ud574 \ud558\uc704 \ud45c\ud604\uc2dd\uc758 \ubd88\ud2b9\uc815\ud55c \ud3c9\uac00 \uc21c\uc11c\uc5d0 \ub530\ub77c \uc790\uc6d0 \ub204\uc218\uac00 \ubc1c\uc0dd\ud560\uc218\ub3c4 \uc788\ub2e4. Example void fun ( shared_ptr < Widget > sp1 , shared_ptr < Widget > sp2 ); \uc774 fun \ud638\ucd9c\uc740 \uc544\ub798\uc640 \uac19\uc744 \uc218 \uc788\ub2e4: // BAD: potential leak fun ( shared_ptr < Widget > ( new Widget ( a , b )), shared_ptr < Widget > ( new Widget ( c , d ))); \uc774\ub294 \uc608\uc678 \uc548\uc804\ud558\uc9c0 \uc54a\uc740\ub370, \ucef4\ud30c\uc77c\ub7ec\uac00 \ud568\uc218\uc758 \ub450 \uc778\uc790\ub97c \uc0dd\uc131\ud558\uba74\uc11c \uc21c\uc11c\ub97c \ubc14\uafc0 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ud2b9\ud788, \ucef4\ud30c\uc77c\ub7ec\ub294 \ub450 \ud45c\ud604\uc2dd\uc744 \ub4a4\uc11e\uc5b4(interleave) \uc218\ud589\ud560\uc218\ub3c4 \uc788\ub2e4: ( operator new \ub97c \ud638\ucd9c\ud568\uc73c\ub85c\uc368) \ub450 \uac1c\uccb4\uc758 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc774 \uba3c\uc800 \uc218\ud589\ub418\uace0, Widget \uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\ub824\ub294 \uc2dc\ub3c4\uac00 \uc774\uc5b4\uc9c8 \uac83\uc774\ub2e4. \ub9cc\uc57d \ub458 \uc911 \ud558\ub098\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uba74, \ub2e4\ub978 \ud55c \uac1c\uccb4\ub294 \ud574\uc81c\ub418\uc9c0 \uc54a\ub294\ub2e4! \uc774 \ubbf8\ubb18\ud55c \ubb38\uc81c\uc758 \ud574\uacb0\ucc45\uc740 \uac04\ub2e8\ud558\ub2e4: \ud55c \ud45c\ud604\uc2dd \uad6c\ubb38 \ub0b4\uc5d0\uc11c \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc744 \ud55c\ubc88 \uc774\uc0c1 \ud558\uc9c0\ub9c8\ub77c. \uc608\ub97c \ub4e4\uc5b4: shared_ptr < Widget > sp1 ( new Widget ( a , b )); // Better, but messy fun ( sp1 , new Widget ( c , d )); \ucd5c\uc0c1\uc758 \ud574\uacb0\ucc45\uc740 \uc18c\uc720\ud558\ub294 \uac1c\uccb4\ub97c \ubc18\ud658\ud558\ub294 \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \uba85\uc2dc\uc801 \ud560\ub2f9\uc744 \uc644\uc804\ud788 \ud53c\ud558\ub294 \uac83\uc774\ub2e4: fun ( make_shared < Widget > ( a , b ), make_shared < Widget > ( c , d )); // Best \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc9c0 \uc54a\ub2e4\uba74 \uc0c8\ub86d\uac8c \uc791\uc131\ud558\ub77c. Enforcement \ud45c\ud604\uc2dd \ub0b4\uc5d0\uc11c \uc5ec\ub7ec\ubc88\uc758 \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc774 \uc788\ub2e4\uba74 \uacbd\uace0\ud558\ub77c(\ubb38\uc81c: \uc9c1\uc811\uc801\uc778 \uc790\uc6d0 \ud560\ub2f9\uc744 \uc5bc\ub9c8\ub098 \ub9ce\uc774 \uc778\uc9c0\ud560 \uc218 \uc788\uc744 \uac83\uc778\uac00?) R.14: ??? \ubc30\uc5f4 vs. \ud3ec\uc778\ud130 \ub9e4\uac1c\ubcc0\uc218 \uc5ed\uc8fc: * Parameter: \ub9e4\uac1c\ubcc0\uc218 * Argument: \uc804\ub2ec\uc778\uc790 Reason \ubc30\uc5f4\uc740 \ud3ec\uc778\ud130\ub85c \ucd95\uc57d(decay)\ub418\uace0, \uadf8 \uacb0\uacfc \uae38\uc774\ub97c \uc54c \uc218 \uc5c6\uac8c \ub41c\ub2e4. \uc774\ub85c \uc778\ud574 \ubc94\uc704 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Example ??? what do we recommend: f(int*[]) or f(int**) ??? Alternative \uae38\uc774 \uc815\ubcf4\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud574 span \uc744 \uc0ac\uc6a9\ud558\ub77c Enforcement \ub9e4\uac1c\ubcc0\uc218\uc5d0 [] \uac00 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c. R.15: \ud560\ub2f9/\ud574\uc81c\uac00 \uc9dd\uc744 \uc774\ub8e8\ub3c4\ub85d \uc911\ubcf5\uc815\uc758\ud558\ub77c Reason \uc5f0\uc0b0\uc774 \ubd88\uc77c\uce58\ud558\uba74 \ud63c\ub3c8\uc744 \uacaa\uac8c \ub420 \uac83\uc774\ub2e4. Example class X { // ... void * operator new ( size_t s ); void operator delete ( void * ); // ... }; Note \ud560\ub2f9\ud55c \ud6c4 \ud574\uc81c\ub418\uc9c0 \uc54a\ub294 \uba54\ubaa8\ub9ac\ub97c \uc6d0\ud55c\ub2e4\uba74, \ud574\uc81c \uc5f0\uc0b0\uc5d0 =delete \ub97c \uc0ac\uc6a9\ud558\ub77c. \uc120\uc5b8\uc774 \uc5c6\ub294 \ucc44\ub85c \ub0a8\uaca8\ub450\uc9c0 \ub9c8\ub77c. Enforcement \uc5f0\uc0b0\uc774 \uc9dd\uc744 \uc774\ub8e8\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4. R.smart: \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 R.20: \uc18c\uc720\uad8c\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 unique_ptr \ud639\uc740 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc790\uc6d0 \ub204\uc218\ub97c \ub9c9\uc744 \uc218 \uc788\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void f () { X x ; X * p1 { new X }; // see also ??? unique_ptr < T > p2 { new X }; // unique ownership; see also ??? shared_ptr < T > p3 { new X }; // shared ownership; see also ??? auto p4 = make_unique < X > (); // unique_ownership, preferable to the explicit use \"new\" auto p5 = make_shared < X > (); // shared ownership, preferable to the explicit use \"new\" } \uc704 \ucf54\ub4dc\ub294 p1 \ub97c \ucd08\uae30\ud654\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c \uac1c\uccb4\uc5d0(\ub9cc) \ub204\uc218\uac00 \ubc1c\uc0dd\ud55c\ub2e4. Enforcement (\ub2e8\uc21c) new \ud639\uc740 \ud3ec\uc778\ud130 \ud0c0\uc785\uc758 \ubc18\ud658\uac12\uc774 \uc6d0\uc2dc \ud3ec\uc778\ud130\uc5d0 \ub300\uc785\ub418\uba74 \uacbd\uace0\ud55c\ub2e4. R.21: \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4\uba74 shared_ptr \ubcf4\ub2e4\ub294 unique_ptr \ub97c \uc120\ud638\ud558\ub77c Reason unique_ptr \ub294 \uac1c\ub150\uc801\uc73c\ub85c \ub2e8\uc21c\ud558\uace0 \uc608\uce21\uac00\ub2a5\ud558\uba70(\ud30c\uad34\uac00 \uc77c\uc5b4\ub0a0 \ub54c\ub97c \uc54c\uace0) \ube60\ub974\ub2e4 (\uc0ac\uc6a9 \ud69f\uc218\ub97c \uc554\uc2dc\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4). Example, bad \uc774 \ucf54\ub4dc\ub294 \ubd88\ud544\uc694\ud558\uac8c \ucc38\uc870 \ud69f\uc218\ub97c \uc99d\uac00 \ubc0f \uc720\uc9c0\ud558\uace0 \uc788\ub2e4. void f () { shared_ptr < Base > base = make_shared < Derived > (); // use base locally, without copying it -- refcount never exceeds 1 } // destroy base Example \uc774 \ucf54\ub4dc\uac00 \ub354 \ud6a8\uc728\uc801\uc774\ub2e4: void f () { unique_ptr < Base > base = make_unique < Derived > (); // use base locally } // destroy base Enforcement (\uc26c\uc6c0) \ub9cc\uc57d \ud568\uc218 \ub0b4\uc5d0\uc11c \uac1c\uccb4 \ud560\ub2f9\uc5d0 shared_ptr \uc744 \uc0ac\uc6a9\ud558\uc9c0\ub9cc, shared_ptr \uc744 \ub9ac\ud134\ud558\uc9c0 \uc54a\uac70\ub098 shared_ptr& \ub97c \ud544\uc694\ub85c \ud558\ub294 \ud568\uc218\uc5d0 \uc804\ub2ec\ud558\uace0 \uc788\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 unique_ptr \uc0ac\uc6a9\uc744 \uad8c\ud558\ub77c. R.22: shared_ptr \ub97c \ub9cc\ub4e4\ub54c\ub294 make_shared() \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ub9cc\uc57d \uac1c\uccb4\ub97c \ucc98\uc74c \ub9cc\ub4e4\uace0 shared_ptr \uc758 \uc0dd\uc131\uc790\uc5d0 \uc804\ub2ec\ud558\uba74, make_shared() \ub97c \uc0ac\uc6a9\ud560 \ub54c\ubcf4\ub2e4 (\uac70\uc758 \ud655\uc2e4\ud788) \ud560\ub2f9(\uadf8\ub9ac\uace0 \ub098\uc911\uc758 \ud574\uc81c)\uc744 \ud55c\ubc88 \ub354 \ud558\uac8c \ub41c\ub2e4. \uac1c\uccb4\uc640\ub294 \ub3c5\ub9bd\uc801\uc73c\ub85c \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \ud560\ub2f9\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: shared_ptr < X > p1 { new X { 2 } }; // bad auto p = make_shared < X > ( 2 ); // good make_shared() \ubc84\uc804\uc740 X \uac00 \ub2e8 \ud55c \ubc88\ub9cc \uc0ac\uc6a9\ub418\uba70, \uadf8\ub807\uae30\uc5d0 \uba85\uc2dc\uc801\uc73c\ub85c new \ub97c \uc0ac\uc6a9\ud558\ub294 \ubc84\uc804\ubcf4\ub2e4 \ucf54\ub4dc\uac00 \uc9e7\ub2e4(\uac8c\ub2e4\uac00 \ube60\ub974\ub2e4). Enforcement (\uc26c\uc6c0) shared_ptr \uac00 make_shared \uac00 \uc544\ub2c8\ub77c new \uc758 \uacb0\uacfc\uc5d0\uc11c \uc0dd\uc131\ub418\uba74 \uacbd\uace0\ud55c\ub2e4. R.23: unique_ptr \ub97c \ub9cc\ub4e4\ub54c\ub294 make_unique() \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ud3b8\ub9ac\ud558\uba70 shared_ptr \uc640 \uc77c\uad00\uc131\uc744 \uac00\uc9c4\ub2e4. Note make_unique() \ub294 C++14 \uc5d0 \ud574\ub2f9\ud558\uc9c0\ub9cc, \ubcc4 \ubb38\uc81c \uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. (\uc27d\uac8c \uc791\uc131\ud560 \uc218 \uc788\ub2e4) Enforcement (\uc26c\uc6c0) unique_ptr \uac00 make_unique \uac00 \uc544\ub2c8\ub77c new \uc758 \uacb0\uacfc\ub85c\ubd80\ud130 \uc0dd\uc131\ub41c\ub2e4\uba74 \uacbd\uace0\ud558\ub77c R.24: shared_ptr \uc758 \uc21c\ud658\ucc38\uc870\ub97c \ubd80\uc218\uae30 \uc704\ud574 weak_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c Reason shared_ptr \uc740 \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc0ac\uc6a9\ud558\ub294\ub370, \uc21c\ud658 \uad6c\uc870\uc5d0\uc11c \uc774\ub294 \uc808\ub300\ub85c 0\uc774 \ub418\uc9c0 \uc54a\ub294\ub2e4. \ub54c\ubb38\uc5d0 \uc6b0\ub9ac\ub294 \uc21c\ud658 \uad6c\uc870\ub97c \ud30c\uad34\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \ud544\uc694\ud558\ub2e4. Example #include <memory> class bar ; class foo { public : explicit foo ( const std :: shared_ptr < bar >& forward_reference ) : forward_reference_ ( forward_reference ) { } private : std :: shared_ptr < bar > forward_reference_ ; }; class bar { public : explicit bar ( const std :: weak_ptr < foo >& back_reference ) : back_reference_ ( back_reference ) { } void do_something () { if ( auto shared_back_reference = back_reference_ . lock ()) { // Use *shared_back_reference } } private : std :: weak_ptr < foo > back_reference_ ; }; Note ??? (HS: \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc740 \"\uc21c\ud658\uc744 \ub04a\ub294\"\uc774\ub77c\uace0 \ub9d0\ud558\ub294 \ubc18\uba74 \ub098\ub294 \"\uc77c\uc2dc\uc801\uc778 \uc784\uc2dc \uacf5\uc720\"\uac00 \ub354 \uc801\uc808\ud558\ub2e4\uace0 \uc0dd\uac01\ud55c\ub2e4.) ??? (BS: \uc21c\ud658 \ub04a\uae30\ub294 \ubc18\ub4dc\uc2dc \ud574\uc57c\ud560 \uc77c\uc778\ub370, \uc5b4\ub5bb\uac8c \"\uc77c\uc2dc\uc801\uc778 \uc18c\uc720\uad8c \uacf5\uc720\"\ub97c \ud560 \uac83\uc778\uac00. shared_ptr \uc744 \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \"\uc77c\uc2dc\uc801\uc73c\ub85c \uc18c\uc720\uad8c \uacf5\uc720\"\ub97c \ud560 \uc218 \uc788\ub2e4.) Enforcement ??? \uc544\ub9c8\ub3c4 \ubd88\uac00\ub2a5\ud558\ub2e4. \uc815\uc801\uc73c\ub85c \uc21c\ud658 \uad6c\uc870\ub97c \ucc3e\uc544\ub0bc \uc218 \uc788\ub2e4\uba74, weak_ptr \ub97c \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. R.30: \uc218\uba85\uc8fc\uae30 \uc758\ubbf8\uad6c\uc870\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c Reason \uadf8\uc800 widget \uadf8 \uc790\uccb4\ub9cc \ud544\uc694\ud55c \ud568\uc218\uc5d0\uc11c widget \uc5d0 \ub300\ud55c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ubc1b\ub294 \uac83\uc740 \uc798\ubabb\ub41c \uac83\uc774\ub2e4. \uadf8\ub7f0 \ud568\uc218\ub294 \ud2b9\uc815\ud55c \uc885\ub958\uc758 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0 \uc758\ud574\uc11c \uc218\uba85\uc8fc\uae30\uac00 \uad00\ub9ac\ub418\ub294 widget \uc774 \uc544\ub2c8\ub77c \uc5b4\ub5a4 widget \uac1c\uccb4\ub77c\ub3c4 \ubc1b\uc744 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uc218\uba85\uc8fc\uae30\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\ub294 \ud568\uc218\ub294 \uc6d0\uc2dc \ud3ec\uc778\ud130 \ud639\uc740 \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. Example, bad // callee void f ( shared_ptr < widget >& w ) { // ... use ( * w ); // only use of w -- the lifetime is not used at all // ... }; // caller shared_ptr < widget > my_widget = /* ... */ ; f ( my_widget ); widget stack_widget ; f ( stack_widget ); // error Example, good // callee void f ( widget & w ) { // ... use ( w ); // ... }; // caller shared_ptr < widget > my_widget = /* ... */ ; f ( * my_widget ); widget stack_widget ; f ( stack_widget ); // ok -- now this works Enforcement (\uc26c\uc6c0) \ud568\uc218\uac00 \ubcf5\uc0ac \uac00\ub2a5\ud55c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ud0c0\uc785( operator-> \ud639\uc740 operator* \ub97c \uc911\ubcf5\uc815\uc758\ud55c \ud0c0\uc785)\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uace0, \ud568\uc218 \ub0b4\uc5d0\uc11c operator* , operator-> \ud639\uc740 get() \ub9cc \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uacbd\uace0\ud558\ub77c. T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc9c0\uc801\ud558\ub77c. \uc774\ub54c \ud574\ub2f9 \ud0c0\uc785\uc740 \ubcf5\uc0ac/\uc774\ub3d9\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc \ud568\uc218 \ub0b4\uc5d0\uc11c \ubcf5\uc0ac/\uc774\ub3d9\ub418\uc9c0 \uc54a\uace0, \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc73c\uba70, \ub2e4\ub978 \ud568\uc218\ub85c \uc804\ub2ec\ub418\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4. \uc774\ub294 \uc18c\uc720\uad8c \uc758\ubbf8\uad6c\uc870\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. R.31: \ud45c\uc900 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc788\ub2e4\uba74, \ud45c\uc900\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ub2e4\uc74c \uc139\uc158\ub4e4\uc758 \uaddc\uce59\ub4e4 \ub610\ud55c \ub2e4\ub978 \uc885\ub958\uc758 \uc11c\ub4dc\ud30c\ud2f0 \ud639\uc740 \ucee4\uc2a4\ud140 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ub4f1\uc5d0\uc11c\ub3c4 \ub3d9\uc791\ud560 \uac83\uc774\uba70 \uc131\ub2a5\uacfc \uc815\ud655\uc131 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a4\ub294 \ud754\ud55c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \uc5d0\ub7ec\uc5d0 \ub300\ud55c \ubd84\uc11d\uc5d0 \ub9e4\uc6b0 \uc720\uc6a9\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc740 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 \ubaa8\ub4e0 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0 \ub300\ud574\uc11c \uc774 \uaddc\uce59\uc774 \uc791\ub3d9\ud574\uc57c \ud55c\ub2e4. \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub294 \ub2e8\ud56d \uc5f0\uc0b0\uc790 * \uc640 -> \ub97c \uc624\ubc84\ub85c\ub4dc\ud558\ub294 (\uae30\ubcf8 \ub610\ub294 \ud2b9\uc218 \ud15c\ud50c\ub9bf\uc744 \ud3ec\ud568\ud55c) \ud0c0\uc785\uc744 \uc758\ubbf8\ud55c\ub2e4: \ubcf5\uc0ac\ud560 \uc218 \uc788\ub2e4\uba74, \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc720\uc9c0\ud558\ub294 shared_ptr \ucc98\ub7fc \ub3d9\uc791\ud55c\ub2e4 \ubcf5\uc0ac\ud560 \uc218 \uc5c6\ub2e4\uba74, \uace0\uc720\ud55c unique_ptr \ucc98\ub7fc \ub3d9\uc791\ud55c\ub2e4 Example // use Boost's intrusive_ptr #include <boost/intrusive_ptr.hpp> void f ( boost :: intrusive_ptr < widget > p ) // error under rule 'sharedptrparam' { p -> foo (); } // use Microsoft's CComPtr #include <atlbase.h> void f ( CComPtr < widget > p ) // error under rule 'sharedptrparam' { p -> foo (); } \ub450 \uacbd\uc6b0 \ubaa8\ub450 sharedptrparam \uac00\uc774\ub4dc\ub77c\uc778 \uc5d0 \ub9de\uc9c0 \uc54a\ub294\ub2e4: p \ub294 shared_ptr \uc774\uc9c0\ub9cc, \uacf5\uc720\uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uace0 \uc788\uc73c\uba70, \uac12\uc5d0 \uc758\ud55c \uc804\ub2ec\uc740 \ube44\ud6a8\uc728\uc801\uc774\ub2e4; \uc774 \ud568\uc218\ub4e4\uc774 widget\uc758 \uc0dd\uba85\uc8fc\uae30\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4\uba74 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ub118\uaca8\ubc1b\uc544\uc57c\ub9cc \ud55c\ub2e4. widget\uc774 nullptr \uc774 \ub420 \uc218 \uc788\ub2e4\uba74 widget* \ub97c \ub118\uaca8\ubc1b\uc544\uc57c \ud558\uace0, \uadf8\uac8c \uc544\ub2cc \uc774\uc0c1\uc801\uc778 \uc0c1\ud669\uc740 \ud568\uc218\uac00 widget& \ub97c \ub118\uaca8\ubc1b\uc544\uc57c \ud55c\ub2e4. \uc774 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub4e4\uc740 shared_ptr \uac1c\ub150\uc5d0 \ubd80\ud569\ud55c\ub2e4. \ub54c\ubb38\uc5d0 \uc774 \uaddc\uce59\uc740 \uace0\uc815\uad00\ub150\uacfc\ub294 \ub2e4\ub974\uac8c \ud754\ud788 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \ube44\ud6a8\uc728\uc744 \ub178\ucd9c\uc2dc\ud0a8\ub2e4. R.32: \ud568\uc218\uac00 widget \uc758 \uc18c\uc720\uad8c\uc744 \ub9e1\ub294\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 unique_ptr<widget> \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c Reason unique_ptr \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud568\uc218\ub97c \ubb38\uc11c\ud654\ud558\uba74\uc11c \ud638\ucd9c\ud560 \ub54c \uc18c\uc720\uad8c \uc804\ub2ec\uc744 \uac15\uc81c\ud55c\ub2e4. Example void sink ( unique_ptr < widget > ); // takes ownership of the widget void uses ( widget * ); // just uses the widget Example, bad void thinko ( const unique_ptr < widget >& ); // usually not what you want Enforcement (\ub2e8\uc21c) \ud568\uc218\uac00 unique_ptr<T> \ub9e4\uac1c\ubcc0\uc218\ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc544 \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uac70\ub098 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. T* \ud639\uc740 T& \uc758 \uc0ac\uc6a9\uc744 \uc81c\uc548\ud558\ub77c (\ub2e8\uc21c) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 unique_ptr<T> \uc758 const \ucc38\uc870\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. const T* \ud639\uc740 const T& \ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. R.33: \ud568\uc218\uac00 widget \uc744 \uc0c8\ub85c \uc124\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 unique_ptr<widget>& \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc774\ub807\uac8c unique_ptr \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud568\uc218\ub97c \ubb38\uc11c\ud654\ud558\uace0 \ud568\uc218 \ud638\ucd9c\uc758 \uc7ac\uc124\uc815(reseating) \uc758\ubbf8\uad6c\uc870\ub97c \uac15\uc81c\ud55c\ub2e4. Note \uc7ac\uc124\uc815(reseat)\uc740 \"\ud3ec\uc778\ud130 \ud639\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \ub2e4\ub978 \uac1c\uccb4\ub97c \ucc38\uc870\ud558\ub3c4\ub85d \ub9cc\ub4dc\ub294 \uac83\"\uc744 \uc758\ubbf8\ud55c\ub2e4. Example void reseat ( unique_ptr < widget >& ); // \"will\" or \"might\" reseat pointer Example, bad void thinko ( const unique_ptr < widget >& ); // usually not what you want Enforcement (\ub2e8\uc21c) \ud568\uc218\uac00 unique_ptr<T> \ub9e4\uac1c\ubcc0\uc218\ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc544 \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uac70\ub098 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. T* \ud639\uc740 T& \uc758 \uc0ac\uc6a9\uc744 \uc81c\uc548\ud558\ub77c (\ub2e8\uc21c) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 unique_ptr<T> \uc758 const \ucc38\uc870\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. const T* \ud639\uc740 const T& \ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. R.34: \ud568\uc218\uac00 \uc18c\uc720\uc790 \uc911 \ud558\ub098\ub77c\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 shared_ptr<widget> \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c Reason \uc774\ub294 \ud568\uc218\uac00 \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud55c\ub2e4\ub294 \uac83\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \ub9cc\ub4e0\ub2e4. Example, good void share ( shared_ptr < widget > ); // share -- \"will\" retain refcount void may_share ( const shared_ptr < widget >& ); // \"might\" retain refcount void reseat ( shared_ptr < widget >& ); // \"might\" reseat ptr Enforcement (\uc26c\uc6c0) \ud568\uc218\uac00 shared_ptr<T> \ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uc9c0 \uc54a\uace0 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 shared_ptr<T> \ub97c \uac12 \ud639\uc740 const \ucc38\uc870\ub85c \uc804\ub2ec \ubc1b\uc73c\uba74\uc11c \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c \ub2e4\ub978 shared_ptr \uc5d0 \ubcf5\uc0ac\ud558\uac70\ub098 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) shared_ptr<T> \uc744 rvalue \ucc38\uc870\ub85c \uc804\ub2ec\ubc1b\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 \uac12\uc73c\ub85c \uc804\ub2ec\ubc1b\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. R.35: \ud568\uc218\uac00 \uacf5\uc720 \ud3ec\uc778\ud130\ub97c \uc7ac\uc124\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 shared_ptr<widget>& \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c Reason \uc774\ub294 \ud568\uc218\uac00 \uac12\uc744 \ubcc0\uacbd\ud55c\ub2e4\ub294 \uac83\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \ub4dc\ub7ec\ub0b8\ub2e4. Note \uc7ac\uc124\uc815(reseat)\uc740 \"\ud3ec\uc778\ud130 \ud639\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \ub2e4\ub978 \uac1c\uccb4\ub97c \ucc38\uc870\ud558\ub3c4\ub85d \ub9cc\ub4dc\ub294 \uac83\"\uc744 \uc758\ubbf8\ud55c\ub2e4. Example, good void share ( shared_ptr < widget > ); // share -- \"will\" retain refcount void reseat ( shared_ptr < widget >& ); // \"might\" reseat ptr void may_share ( const shared_ptr < widget >& ); // \"might\" retain refcount Enforcement (\uc26c\uc6c0) \ud568\uc218\uac00 shared_ptr<T> \ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uc9c0 \uc54a\uace0 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 shared_ptr<T> \ub97c \uac12 \ud639\uc740 const \ucc38\uc870\ub85c \uc804\ub2ec \ubc1b\uc73c\uba74\uc11c \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c \ub2e4\ub978 shared_ptr \uc5d0 \ubcf5\uc0ac\ud558\uac70\ub098 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) shared_ptr<T> \uc744 rvalue \ucc38\uc870\ub85c \uc804\ub2ec\ubc1b\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 \uac12\uc73c\ub85c \uc804\ub2ec\ubc1b\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. R.36: \ud568\uc218\uac00 \uac1c\uccb4\uc5d0 \ub300\ud55c \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc720\uc9c0\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 const shared_ptr<widget>& \uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c ??? Reason \uc791\uc131\ud55c \ud568\uc218\uc758 ???\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ub9cc\ub4e0\ub2e4. Example, good void share ( shared_ptr < widget > ); // share -- \"will\" retain refcount void reseat ( shared_ptr < widget >& ); // \"might\" reseat ptr void may_share ( const shared_ptr < widget >& ); // \"might\" retain refcount Enforcement (\uc26c\uc6c0) \ud568\uc218\uac00 shared_ptr<T> \ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uc9c0 \uc54a\uace0 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 shared_ptr<T> \ub97c \uac12 \ud639\uc740 const \ucc38\uc870\ub85c \uc804\ub2ec \ubc1b\uc73c\uba74\uc11c \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c \ub2e4\ub978 shared_ptr \uc5d0 \ubcf5\uc0ac\ud558\uac70\ub098 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) shared_ptr<T> \uc744 rvalue \ucc38\uc870\ub85c \uc804\ub2ec\ubc1b\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 \uac12\uc73c\ub85c \uc804\ub2ec\ubc1b\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. R.37: \uc7ac\uba85\uba85(aliased)\ub41c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0\uc11c \ud68d\ub4dd\ud55c \ud3ec\uc778\ud130 \ud639\uc740 \ucc38\uc870\ub97c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c \uc5ed\uc8fc: Pointer Aliasing Reason \uc774 \uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294 \uac83\uc740 \ucc38\uc870 \uc218\ub97c \uc783\uc5b4\ubc84\ub9ac\uace0 \ud5c8\uc0c1 \ud3ec\uc778\ud130\uac00 \ub0a8\ub3c4\ub85d \ub9cc\ub4dc\ub294 \uac00\uc7a5 \uc911\uc694\ud55c \uc6d0\uc778\uc774\ub2e4. \ud568\uc218\ub294 \ud638\ucd9c\uc774 \uae4a\uc5b4\uc9c8 \ub54c \ub418\ub3c4\ub85d \uc6d0\uc2dc \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \uc804\ub2ec\ud574\uc57c \ud55c\ub2e4. \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub85c\ubd80\ud130 \uc6d0\uc2dc \ud3ec\uc778\ud130 \ud639\uc740 \ucc38\uc870\ub97c \ud68d\ub4dd\ud558\ub294 \ud638\ucd9c \ud2b8\ub9ac\uc758 \ucd5c\uc0c1\ub2e8\uc5d0\uc11c\ub294 \uac1c\uccb4\uac00 \uc18c\uba78\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc18c\uc720\uad8c\uc744 \uac00\uc9c4 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \uc6b0\uc5f0\uce58 \uc54a\uac8c \ud638\ucd9c \ud2b8\ub9ac\uc758 \ud558\ub2e8\uc5d0\uc11c \ubc14\ub00c\uc9c0 \uc54a\ub3c4\ub85d \ud574\uc57c\ud55c\ub2e4. Note \uc774\ub97c \uc704\ud574\uc11c, \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc758 \uc9c0\uc5ed \uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uc5b4\uc57c \ud560\uc218\ub3c4 \uc788\ub2e4. \uc774 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub294 \ud568\uc218\uc640 \uadf8 \ud638\ucd9c \ud2b8\ub9ac\uac00 \uc9c0\uc18d\ub418\ub294 \ub3d9\uc548 \uac1c\uccb4\uac00 \uc0b4\uc544\uc788\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. Example \ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: // global (static or heap), or aliased local ... shared_ptr < widget > g_p = ...; void f ( widget & w ) { g (); use ( w ); // A } void g () { g_p = ...; // oops, if this was the last shared_ptr to that widget, destroys the widget } \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\uac00 \ud5c8\uc6a9\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4: void my_code () { // BAD: passing pointer or reference obtained from a nonlocal smart pointer // that could be inadvertently reset somewhere inside f or it callees f ( * g_p ); // BAD: same reason, just passing it as a \"this\" pointer g_p -> func (); } \uc774\ub294 \uc27d\uac8c \uc218\uc815\ud560 \uc218 \uc788\ub2e4 -- \"\ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc720\uc9c0\ud558\ub3c4\ub85d\" \ud574\ub2f9 \ud3ec\uc778\ud130\uc758 \uc0ac\ubcf8\uc744 \uc9c0\uc5ed\uc801\uc73c\ub85c \ub9cc\ub4dc\ub294 \uac83\uc774\ub2e4: void my_code () { // cheap: 1 increment covers this entire function and all the call trees below us auto pin = g_p ; // GOOD: passing pointer or reference obtained from a local unaliased smart pointer f ( * pin ); // GOOD: same reason pin -> func (); } Enforcement (\uc26c\uc6c0) \ube44\uc9c0\uc5ed \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ubcc0\uc218( unique_ptr \ud639\uc740 shared_ptr )\ub85c\ubd80\ud130 \ud3ec\uc778\ud130\uac00 \ucc38\uc870\ub97c \ud68d\ub4dd\ud558\uba74 \uacbd\uace0\ud558\ub77c. \ud639\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \ub2e4\ub978 \uac1c\uccb4\uc5d0 \uc5f0\uacb0(aliased)\ub418\uc5c8\uc744 \uc218 \uc788\uc744\ub54c \ud568\uc218 \ud638\ucd9c\uc5d0 \uc0ac\uc6a9\ub418\uba74 \uacbd\uace0\ud558\ub77c. shared_ptr \ub77c\uba74 \ud574\ub2f9 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \ucc38\uc870\ud558\uac70\ub098 \uadf8 \ud3ec\uc778\ud130\uc758 \uc9c0\uc5ed \uc0ac\ubcf8\uc744 \ub9cc\ub4e4\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Resource"},{"location":"Resource/#r","text":"\uc774 \uc7a5\uc740 \uc790\uc6d0\uacfc \uad00\ub828\ub41c \uaddc\uce59\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub2e4. \uc790\uc6d0\uc774\ub780 \ud68d\ub4dd\ud574\uc57c\ub9cc \ud558\uace0, (\uba85\uc2dc\uc801 \ud639\uc740 \ubb35\uc2dc\uc801\uc73c\ub85c) \ud574\uc81c\ub41c\ub2e4. \uc8fc\ub85c \uba54\ubaa8\ub9ac, \ud30c\uc77c \ud578\ub4e4, \uc18c\ucf13, \uc7a0\uae08(lock) \uac19\uc740 \uac83\ub4e4\uc774\ub2e4. \ubc18\ub4dc\uc2dc \ud574\uccb4\ub418\uc5b4\uc57c \ud558\ub294 \uc774\uc720\ub294 \uc790\uc6d0 \ubd80\uc871\uc778\ub370, \uc9c0\uc5f0\ub41c \ud615\ud0dc\uc758 \ud574\uccb4\uc870\ucc28\ub3c4 \uc774\ub7f0 \ubb38\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. \uae30\ubcf8\uc801\uc778 \ubaa9\ud45c\ub294 \uc5b4\ub5a4 \uc790\uc6d0\ub3c4 \ub204\uc218\uac00 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uace0, \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \uc790\uc6d0\uc744 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4. \uc790\uc6d0\uc744 \ud574\uccb4\ud558\ub294 \ucc45\uc784\uc744 \uac00\uc9c0\ub294 \uc8fc\uccb4\ub97c \uc6b0\ub9ac\ub294 \uc18c\uc720\uc790(owner)\ub77c\uace0 \ud55c\ub2e4. \ub4dc\ubb3c\uac8c \uc790\uc6d0 \ub204\uc218\uac00 \uc6a9\uc778\ub418\uac70\ub098 \ucd5c\uc120\uc778 \uacbd\uc6b0\uac00 \uc788\ub2e4: \uc785\ub825\uc744 \uae30\ubc18\uc73c\ub85c \ub2e8\uc21c\ud788 \ucd9c\ub825\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uad6c\ud604\ud558\uace0 \uc785\ub825\uc5d0 \ube44\ub840\ud558\uc5ec \ud544\uc694\ud55c \uba54\ubaa8\ub9ac \uc591\uc774 \uc99d\uac00\ud55c\ub2e4\uba74, (\uc131\ub2a5\uacfc \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc6a9\uc774\ud558\uac8c \ud558\uae30 \uc704\ud55c) \ucd5c\uc120\uc758 \uc804\ub7b5\uc740 \uc5b4\ub5a4 \uc790\uc6d0\ub3c4 \uc0ad\uc81c\ud558\uc9c0 \uc54a\ub294 \uac83\uc774\ub2e4. \uac00\uc7a5 \ud070 \uc785\ub825\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc11c \ucda9\ubd84\ud55c \uba54\ubaa8\ub9ac\ub97c \uac00\uc84c\ub2e4\uba74 \uc790\uc6d0\uc774 \uc18c\ube44\ub418\ub3c4\ub85d \ub0b4\ubc84\ub824 \ub46c\ub77c. \ub2e4\ub9cc \ubb54\uac00 \uc798\ubabb\uc744 \ud588\ub2e4\uba74 \uc0c1\ud669\uc5d0 \uc54c\ub9de\ub294 \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \uc8fc\ub3c4\ub85d \ud574\ub77c. \uc774\ub7f0 \uacbd\uc6b0\ub294 \ub354 \uc774\uc0c1 \uc5b8\uae09\ud558\uc9c0 \uc54a\uaca0\ub2e4. \uc790\uc6d0 \uad00\ub9ac \uaddc\uce59 \uc694\uc57d: R.1: \uc790\uc6d0 \ud578\ub4e4\uacfc RAII(\uc790\uc6d0 \ud68d\ub4dd\uc2dc \ucd08\uae30\ud654)\ub97c \uc0ac\uc6a9\ud574\uc11c \uc790\ub3d9\uc801\uc73c\ub85c \uad00\ub9ac\ub418\ub3c4\ub85d \ud558\ub77c R.2: \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c\ub294, \ud3ec\uc778\ud130\ub294 \uc11c\ub85c \ub2e4\ub978 \uac1c\uccb4\ub4e4\uc744 \ud45c\uc2dc\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c R.3: \uc6d0\uc2dc \ud3ec\uc778\ud130( T* )\ub294 \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\ub294\ub2e4 R.4: \ucc38\uc870( T& )\ub294 \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\ub294\ub2e4 R.5: \uc720\ud6a8 \ubc94\uc704 \uc548\uc758 \uac1c\uccb4\ub97c \uc120\ud638\ud558\ub77c. \ubd88\ud544\uc694\ud55c \ub3d9\uc801\ud560\ub2f9\uc744 \ud558\uc9c0 \ub9c8\ub77c R.6: const \uac00 \uc544\ub2cc \uc804\uc5ed \ubcc0\uc218\ub97c \uc9c0\uc591\ud558\ub77c \ud560\ub2f9\uacfc \ud574\uc81c \uaddc\uce59 \uc694\uc57d: R.10: malloc() \uacfc free() \uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c R.11: \uba85\uc2dc\uc801\uc778 new \uc640 delete \ud638\ucd9c\uc744 \uc9c0\uc591\ud558\ub77c R.12: \uba85\uc2dc\uc801\uc778 \ud560\ub2f9\uc758 \uacb0\uacfc\ub294 \uc989\uc2dc \uad00\ub9ac \uac1c\uccb4\uc5d0 \uc804\ub2ec\ud558\ub77c R.13: \ud558\ub098\uc758 \ud45c\ud604\uc2dd \uad6c\ubb38\uc5d0\uc11c \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc740 \ucd5c\ub300 \ud55c\ubc88\ub9cc \uc218\ud589\ud558\ub77c R.14: ??? \ubc30\uc5f4 vs. \ud3ec\uc778\ud130 \ub9e4\uac1c\ubcc0\uc218 R.15: \ud560\ub2f9/\ud574\uc81c\uac00 \uc9dd\uc744 \uc774\ub8e8\ub3c4\ub85d \uc911\ubcf5\uc815\uc758\ud558\ub77c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \uaddc\uce59 \uc694\uc57d: R.20: \uc18c\uc720\uad8c\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 unique_ptr \ud639\uc740 shared_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c R.21: \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4\uba74 shared_ptr \ubcf4\ub2e4\ub294 unique_ptr \ub97c \uc120\ud638\ud558\ub77c R.22: shared_ptr \ub97c \ub9cc\ub4e4\ub54c\ub294 make_shared() \ub97c \uc0ac\uc6a9\ud558\ub77c R.23: unique_ptr \ub97c \ub9cc\ub4e4\ub54c\ub294 make_unique() \ub97c \uc0ac\uc6a9\ud558\ub77c R.24: shared_ptr \uc758 \uc21c\ud658\ucc38\uc870\ub97c \ubd80\uc218\uae30 \uc704\ud574 weak_ptr \ub97c \uc0ac\uc6a9\ud558\ub77c R.30: \uc218\uba85\uc8fc\uae30 \uc758\ubbf8\uad6c\uc870\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c R.31: \ud45c\uc900 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc788\ub2e4\uba74, \ud45c\uc900\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\ub77c R.32: \ud568\uc218\uac00 widget \uc758 \uc18c\uc720\uad8c\uc744 \ub9e1\ub294\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 unique_ptr<widget> \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c R.33: \ud568\uc218\uac00 widget \uc744 \uc0c8\ub85c \uc124\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 unique_ptr<widget>& \ub97c \uc0ac\uc6a9\ud558\ub77c R.34: \ud568\uc218\uac00 \uc18c\uc720\uc790 \uc911 \ud558\ub098\ub77c\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 shared_ptr<widget> \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c R.35: \ud568\uc218\uac00 \uacf5\uc720 \ud3ec\uc778\ud130\ub97c \uc7ac\uc124\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 shared_ptr<widget>& \ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c R.36: \ud568\uc218\uac00 \uac1c\uccb4\uc5d0 \ub300\ud55c \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc720\uc9c0\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 const shared_ptr<widget>& \uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c ??? R.37: \uc7ac\uba85\uba85(aliased)\ub41c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0\uc11c \ud68d\ub4dd\ud55c \ud3ec\uc778\ud130 \ud639\uc740 \ucc38\uc870\ub97c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c","title":"R: \uc790\uc6d0 \uad00\ub9ac"},{"location":"Resource/#r1-raii","text":"","title":"R.1: \uc790\uc6d0 \ud578\ub4e4\uacfc RAII(\uc790\uc6d0 \ud68d\ub4dd\uc2dc \ucd08\uae30\ud654)\ub97c \uc0ac\uc6a9\ud574\uc11c \uc790\ub3d9\uc801\uc73c\ub85c \uad00\ub9ac\ub418\ub3c4\ub85d \ud558\ub77c"},{"location":"Resource/#reason","text":"\uc218\ub3d9 \uc790\uc6d0 \uad00\ub9ac\uc758 \ubcf5\uc7a1\uc131\uacfc \ub204\ucd9c\uc744 \ud53c\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc744 \uc54c\uc544\ubcf8\ub2e4. C++ \uc5b8\uc5b4\uc801 \uac15\uc81c\uc778 \uc0dd\uc131\uc790 \uc18c\uba78\uc790 \ub300\uce6d\uc740 fopen / fclose , \uadf8\ub9ac\uace0 lock / unlock , new / delete \uacfc \uac19\uc740 \uc790\uc6d0 \ud68d\ub4dd/\ud574\uccb4 \ud568\uc218\uc758 \uc9dd\uacfc \uac19\uc740 \uad6c\uc870\ub97c \uac00\uc9c4\ub2e4. \uc774 \ud2b9\uc9d5\uc744 \uc0ac\uc6a9\ud574\uc11c \uc790\uc6d0\uc758 \ud68d\ub4dd/\ud574\uccb4\uc2dc \uc9dd \ud568\uc218 \ud638\ucd9c\uc774 \ud544\uc694\ud55c \uc790\uc6d0\uc744 \ub2e4\ub8f0 \ub54c\ub294 \uc0dd\uc131\uc790\uc5d0\uc11c \uc790\uc6d0\uc744 \ud68d\ub4dd\ud558\uace0 \uc18c\uba78\uc790\uc5d0\uc11c \ud574\uccb4\uac00 \uac15\uc81c\ub418\ub3c4\ub85d \uac1c\uccb4\ub85c \ub9ac\uc18c\uc2a4\ub97c \ucea1\uc290\ud654\ud574\ub77c.","title":"Reason"},{"location":"Resource/#example-bad","text":"\ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void send ( X * x , cstring_span destination ) { auto port = open_port ( destination ); my_mutex . lock (); // ... send ( port , x ); // ... my_mutex . unlock (); close_port ( port ); delete x ; } \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 \ubaa8\ub4e0 \uacbd\uc6b0\uc5d0 unlock , close_port , delete \uac00 \uc815\ud655\ud788 \uc21c\uc11c\ub300\ub85c \ud638\ucd9c\ub418\uc5b4\uc57c \ud55c\ub2e4\ub294 \uc810\uc744 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \ub9cc\uc57d ... \ub85c \ud45c\uc2dc\ub41c \ucf54\ub4dc\uc5d0\uc11c \uc608\uc678\uac00 \ub358\uc838\uc9c0\uba74, \uadf8\ub85c\uc778\ud574 x \ub294 \ub204\ucd9c\ub418\uace0 my_mutex \ub294 \uc7a0\uae08\uc744 \ud574\uc81c\ud558\uc9c0 \uc54a\uac8c \ub41c\ub2e4.","title":"Example, bad"},{"location":"Resource/#example","text":"\ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void send ( unique_ptr < X > x , cstring_span destination ) // x owns the X { Port port { destination }; // port owns the PortHandle lock_guard < mutex > guard { my_mutex }; // guard owns the lock // ... send ( port , x ); // ... } // automatically unlocks my_mutex and deletes the pointer in x \ubaa8\ub4e0 \uc790\uc6d0 \uad00\ub9ac\uac00 \uc790\ub3d9\ud654\ub418\uc5c8\uace0 \uc608\uc678\uc640 \uc0c1\uad00\uc5c6\uc774 \ubaa8\ub4e0 \uacbd\ub85c\uc5d0\uc11c \ud55c\ubc88 \uc218\ud589\ub41c\ub2e4. \ucd94\uac00\uc801\uc73c\ub85c \ud568\uc218\uac00 \ud3ec\uc778\ud130 \uc18c\uc720\uad8c\uc744 \uac00\uc838\uac04 \uac83\ub3c4 \ubcf4\uc5ec\uc8fc\uace0 \uc788\ub2e4. Port \ub294 \uc5b4\ub5bb\uac8c \uad6c\ud604\ud560 \uc218 \uc788\uc744\uae4c? \uc790\uc6d0\uc744 \ucea1\uc290\ud654\ud558\ub294 \uac04\ub2e8\ud55c \ub798\ud37c\ub85c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4: class Port { PortHandle port ; public : Port ( cstring_span destination ) : port { open_port ( destination )} { } ~ Port () { close_port ( port ); } operator PortHandle () { return port ; } // port handles can't usually be cloned, so disable copying and assignment if necessary Port ( const Port & ) = delete ; Port & operator = ( const Port & ) = delete ; };","title":"Example"},{"location":"Resource/#note","text":"\uc18c\uba78\uc790\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4\ub85c \ud45c\ud604\ub418\uc9c0 \uc54a\uace0 \ub2e4\ub8e8\uae30 \ud798\ub4e0 \uc790\uc6d0\uc778 \uacbd\uc6b0 \ud074\ub798\uc2a4\ub85c \uac10\uc2f8\uc11c \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\uac70\ub098 finally \ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"Resource/#see-also","text":"RAII","title":"See Also"},{"location":"Resource/#r2","text":"","title":"R.2: \uc778\ud130\ud398\uc774\uc2a4\uc5d0\uc11c\ub294, \ud3ec\uc778\ud130\ub294 \uc11c\ub85c \ub2e4\ub978 \uac1c\uccb4\ub4e4\uc744 \ud45c\uc2dc\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_1","text":"\ubc30\uc5f4\uc740 \ucee8\ud14c\uc774\ub108 \ud0c0\uc785(\uac00\ub839, vector (\uc18c\uc720)\uc774\ub098 span (\ube44 \uc18c\uc720))\uc73c\ub85c \uac00\uc7a5 \uc798 \ud45c\ud604\ub41c\ub2e4. \uc774\ub7f0 \ucee8\ud14c\uc774\ub108\uc640 \ubdf0\ub294 \ubc94\uc704 \uac80\uc0ac\ub97c \uc704\ud55c \ucda9\ubd84\ud55c \uc815\ubcf4\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4.","title":"Reason"},{"location":"Resource/#example-bad_1","text":"void f ( int * p , int n ) // n is the number of elements in p[] { // ... p [ 2 ] = 7 ; // bad: subscript raw pointer // ... } \ucef4\ud30c\uc77c\ub7ec \uc8fc\uc11d\uc744 \uc77d\uc9c0 \uc54a\ub294\ub2e4. \ub610\ud55c \ub2e4\ub978 \ucf54\ub4dc\ub97c \uc77d\uc9c0 \uc54a\uace0\ub294 p \uac00 \uc815\ub9d0\ub85c n \ub9cc\ud07c\uc744 \uac00\ub974\ud0a4\ub294\uc9c0 \uc54c \uc218 \uc5c6\ub2e4. \ub300\uc2e0 span \uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Example, bad"},{"location":"Resource/#example_1","text":"void g ( int * p , int fmt ) // print *p using format #fmt { // ... uses *p and p[0] only ... }","title":"Example"},{"location":"Resource/#exception","text":"C \uc2a4\ud0c0\uc77c \ubb38\uc790\uc5f4\uc740 0\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790 \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\uae30\ub3c4 \ud55c\ub2e4. \uad00\ub840\ub97c \ub530\ub978\ub2e4\ub294 \uac83\uc744 \ubcf4\uc5ec\uc8fc\uae30 \uc704\ud574 char* \ubcf4\ub2e4\ub294 zstring \uc744 \uc0ac\uc6a9\ud558\ub77c","title":"Exception"},{"location":"Resource/#note_1","text":"\ud558\ub098\uc758 \uc6d0\uc18c\ub97c \uc704\ud574\uc11c\ub294 \ucc38\uc870\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. \uadf8\ub7ec\ub098 nullptr \uc774 \uac00\ub2a5\ud55c \uacbd\uc6b0\ub77c\uba74 \ucc38\uc870\uac00 \uc88b\uc740 \ub300\uc548\uc740 \uc544\ub2c8\ub2e4.","title":"Note"},{"location":"Resource/#enforcement","text":"\ucee8\ud14c\uc774\ub108 \ub610\ub294 \ubdf0, \ubc18\ubcf5\uc790(iterator)\uac00 \uc544\ub2cc \ud3ec\uc778\ud130\uc5d0\uc11c \uc8fc\uc18c \uacc4\uc0b0(++ \ud3ec\ud568)\uc744 \uc0bc\uac00\ud558\ub77c. \uc774 \uaddc\uce59\uc774 \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0 \uc801\uc6a9\ub41c\ub2e4\uba74 \uc218\ub9ce\uc740 false positive\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uac04\ub2e8\ud55c \ud3ec\uc778\ud130\ub85c \uc804\ub2ec\ud558\ub294 \ubc30\uc5f4 \uc774\ub984\uc744 \uc9c0\uc801\ud558\ub77c \ucee8\ud14c\uc774\ub108, \ubdf0, \ubc18\ubcf5\uc790\uac00 \uc544\ub2cc \ud3ec\uc778\ud130 \uc5f0\uc0b0\uc744 \uc9c0\uc801\ud558\ub77c. (\uc774\ub294 ++ \ub97c \ud3ec\ud568\ud55c\ub2e4) \ubc30\uc5f4\uc744 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud574 \uc804\ub2ec\ud560 \uacbd\uc6b0 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Resource/#r3-t","text":"raw pointer: \uc6d0\uc2dc \ud3ec\uc778\ud130","title":"R.3: \uc6d0\uc2dc \ud3ec\uc778\ud130\ub294(T*) \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\ub294\ub2e4"},{"location":"Resource/#reason_2","text":"C++ \ud45c\uc900 \ubfd0\ub9cc \uc544\ub2c8\ub77c \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \uc6d0\uc2dc \ud3ec\uc778\ud130\ub294 \uc18c\uc720\ub97c \ud558\uc9c0 \uc54a\ub294\ub2e4. \uc2e0\ub8b0\ud560 \uc218 \uc788\uace0 \ud6a8\uacfc\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uac1c\uccb4\ub97c \uc81c\uac70\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uccb4\ub97c \uc18c\uc720\ud558\ub294 \ud3ec\uc778\ud130\uac00 \ud544\uc694\ud558\ub2e4.","title":"Reason"},{"location":"Resource/#example_2","text":"void f () { int * p1 = new int { 7 }; // bad: raw owning pointer auto p2 = make_unique < int > ( 7 ); // OK: the int is owned by a unique pointer // ... } unique_ptr \ub294 \uac1c\uccb4\uc758 \uc81c\uac70\ub97c \ubcf4\uc7a5\ud558\uae30 \ub54c\ubb38\uc5d0 \uba54\ubaa8\ub9ac \ub204\uc218\ub97c \ucc28\ub2e8\ud574\uc900\ub2e4. (\uc608\uc678 \ubc1c\uc0dd\uc5d0\uc11c\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\ub2e4.) T* \ub294 \uadf8\ub807\uc9c0 \uc54a\ub2e4.","title":"Example"},{"location":"Resource/#example_3","text":"template < typename T > class X { // ... public : T * p ; // bad: it is unclear whether p is owning or not T * q ; // bad: it is unclear whether q is owning or not }; \uba85\uc2dc\uc801\uc778 \uc18c\uc720\uad8c\uc744 \ub9cc\ub4e4\uc5b4 \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud560 \uc218 \uc788\ub2e4: template < typename T > class X2 { // ... public : owner < T *> p ; // OK: p is owning T * q ; // OK: q is not owning };","title":"Example"},{"location":"Resource/#exception_1","text":"\uc8fc\uc694 \uc608\uc678\uc0ac\ud56d\uc740 \ub808\uac70\uc2dc \ucf54\ub4dc\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \ud2b9\ud788 ABI\ub97c \ud1b5\ud574\uc11c C \ud639\uc740 C \uc2a4\ud0c0\uc77c C++ \uc778\ud130\ud398\uc774\uc2a4\uc640 \ud638\ud658\uc131\uc744 \uac00\uc838\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \uadf8\ub807\ub2e4. T* \ub97c \uc18c\uc720\ud558\ub294 \ubc29\uc2dd\uc744 \uc704\ubc18\ud558\ub294 \uc5b5 \ub2e8\uc704\uc758 \ucf54\ub4dc\uac00 \uc874\uc7ac\ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \ubb34\uc2dc\ud560 \uc218\ub294 \uc5c6\ub2e4. 20\ub144 \ubb35\uc740 \"\ub808\uac70\uc2dc\" \ucf54\ub4dc\ub97c \ucd5c\uc2e0 C++ \ucf54\ub4dc\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\ub294 \ud234\uc774 \uc788\uc73c\uba74 \uc88b\uc744\uac83\uc774\ub2e4. \uc774\ub7f0 \ud234\uc758 \uac1c\ubc1c\uacfc \ud234\uc758 \uc0ac\uc6a9\uc744 \ub3c5\ub824\ud560\uac83\uc774\uace0 \ub610\ud55c \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ub3c4\uc6c0\uc774 \ub418\uc5c8\uc73c\uba74 \uc88b\uaca0\ub2e4. \uac00\uc2dc\uc801\uc778 \uc131\uacfc\uac00 \ubcf4\uc77c\ub54c\uae4c\uc9c0 \uba87 \ub144\uc740 \ub354 \uac78\ub9b4\uac83\uc774\ub2e4: \ucd5c\uc2e0 \ucf54\ub4dc\ub85c \ubc14\uafc0\uc218 \uc788\uac8c \ub418\uae30\uc804\uc5d0 \"\ub808\uac70\uc2dc \ucf54\ub4dc\"\uac00 \ub354 \ube60\ub974\uac8c \uc0dd\uc131\ub420\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. \uc774 \ubaa8\ub4e0 \ucf54\ub4dc\ub294 \ub2e4\uc2dc \uc791\uc131 \ub420\uc21c \uc5c6\uace0 (\uc88b\uc740 \ucf54\ub4dc \ubcc0\ud658 \uc18c\ud504\ud2b8\uc6e8\uc5b4\uac00 \uc788\ub354\ub77c\ub3c4) \uc801\uc5b4\ub3c4 \ub2f9\uc7a5\uc740 \uc544\ub2d0\uac83\uc774\ub2e4. \uc774 \ubb38\uc81c\ub294 \ubaa8\ub4e0 \ud3ec\uc778\ud130\ub97c unique_ptr \uc640 shared_ptr \ub85c \ub300\uccb4\ud558\ub294 \uac83\uc73c\ub85c\ub294 \ud574\uacb0\ud560 \uc218 \uc5c6\ub2e4. \ubd80\ubd84\uc801\uc73c\ub85c \uc774\ub294 \uae30\ucd08\uc801\uc778 \uc790\uc6d0 \ud578\ub4e4\uc744 \uad6c\ud604\ud560\ub54c, \ub9c8\uce58 \ub0b4\ubd80\uc758 \ub2e8\uc21c\ud55c \ud3ec\uc778\ud130\ub4e4\ucc98\ub7fc \uc18c\uc720\ud558\ub294 \uc6d0\uc2dc \ud3ec\uc778\ud130\ub4e4\uc744 \uc0ac\uc6a9\ud558\uace0 \ub610 \ud544\uc694\ub85c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc77c\ubc18\uc801\uc778 vector \uad6c\ud604\uc740 \ud558\ub098\uc758 \uc18c\uc720\ud558\ub294 \ud3ec\uc778\ud130\uc640 \ub450\uac1c\uc758 \uc18c\uc720\ud558\uc9c0 \uc54a\ub294 \ud3ec\uc778\ud130\ub4e4\uc744 \uac00\uc9c4\ub2e4. \ub9ce\uc740 ABI\ub4e4(\uadf8\ub9ac\uace0 \ud2b9\ud788 C \ucf54\ub4dc\ub85c \uc774\uc5b4\uc9c0\ub294 \ubaa8\ub4e0 \uc778\ud130\ud398\uc774\uc2a4\ub4e4)\uc740 T* \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uc5b4\ub5a4 \uacbd\uc6b0\ub294 \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uae30\ub3c4 \ud55c\ub2e4. C\uc640 \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud574\uc57c \ud55c\ub2e4\uba74 \ub2e8\uc21c\ud788 owner \ub97c \uc0ac\uc6a9\ud560(annotate) \uc218 \uc5c6\ub2e4. (\uc774\ub7f0 \uacbd\uc6b0\ub294 owner \uac00 C++\uc5d0\uc11c\ub9cc \uc801\uc6a9\ub418\ub3c4\ub85d \ud558\ub294 \ub9e4\ud06c\ub85c\uac00 \uc88b\uc740 \uc0ac\uc6a9\uc774 \ub420 \uc218\ub3c4 \uc788\ub2e4).","title":"Exception"},{"location":"Resource/#note_2","text":"owner<T*> \uc5d0\ub294 T* \uc774\uc0c1\uc758 \uc758\ubbf8\uac00 \uc5c6\ub2e4. \uc774\ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\ub97c \ubcc0\uacbd\ud558\uac70\ub098 ABI\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uc73c\uba74\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc774 \ud0c0\uc785\uc740 \ud504\ub85c\uadf8\ub798\uba38\uc640 \ubd84\uc11d\ub3c4\uad6c\ub4e4\uc744 \uc704\ud55c \uc9c0\ud45c\uc77c \ubfd0\uc774\ub2e4. \uc608\ub97c \ub4e4\uc5b4, owner<T*> \uac00 \uc5b4\ub5a4 \ud074\ub798\uc2a4\uc758 \uba64\ubc84\ub77c\uba74, \uadf8 \ud074\ub798\uc2a4\ub294 \ud574\ub2f9 \uba64\ubc84\ub97c delete \ud558\ub294 \uc18c\uba78\uc790\ub97c \uac00\uc9c0\ub294 \uac83\uc774 \ub098\uc744 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Resource/#example-bad_2","text":"\uc6d0\uc2dc \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub294\uac83\uc740 \ud638\ucd9c\uc790\uc5d0\uac8c \uc218\uba85 \uad00\ub9ac\uc5d0 \ubd88\ud655\uc2e4\uc131\uc744 \uc2ec\uc5b4\uc900\ub2e4; \ub2e4\uc2dc \ub9d0\ud574, \ub204\uac00 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \uac1c\uccb4\ub97c \uc81c\uac70\ud574\uc57c \ud558\ub294\uac00? Gadget * make_gadget ( int n ) { auto p = new Gadget { n }; // ... return p ; } void caller ( int n ) { auto p = make_gadget ( n ); // remember to delete p // ... delete p ; } leak \uc73c\ub85c \uc778\ud55c \uace0\ud1b5\ubfd0\ub9cc \uc544\ub2c8\ub77c \uc774\ub294 \uc4f8\ub370\uc5c6\uc774 \ub9ce\uace0 \ubbf8\uc2ec\uca4d\uc740 \ud560\ub2f9\uacfc \ud574\uc81c\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d Gadget\uc744 \ud568\uc218 \ubc14\uae65\uc73c\ub85c \uac00\uc838\uc624\ub294 \ube44\uc6a9\uc774 \ud06c\uc9c0 \uc54a\ub2e4\uba74, \ub2e8\uc21c\ud788 \uac12\uc73c\ub85c \ubc18\ud658\ud558\ub294 \uac83\ub3c4 \ud55c \ubc29\ubc95\uc774\ub2e4. ( \"out\" \ubc18\ud658 \ud56d\ubaa9\uc744 \ubcf4\ub77c): Gadget make_gadget ( int n ) { Gadget g { n }; // ... return g ; }","title":"Example, bad"},{"location":"Resource/#note_3","text":"\uc774 \uaddc\uce59\uc740 \ud329\ud1a0\ub9ac \ud568\uc218\uc5d0 \uc801\uc6a9\ub420 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Resource/#note_4","text":"\ub9cc\uc57d \ud3ec\uc778\ud130 \uc758\ubbf8\uad6c\uc870\uac00 \ud544\uc694\ud558\ub2e4\uba74 (\uc0c1\uc704 \ud074\ub798\uc2a4(\uc778\ud130\ud398\uc774\uc2a4)\ub97c \ucc38\uc870\ud55c\ub2e4\uac70\ub098), \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ubc18\ud658\ud558\ub77c","title":"Note"},{"location":"Resource/#enforcement_1","text":"(\uc26c\uc6c0) owner<T> \uac00 \uc544\ub2cc \uc6d0\uc2dc \ud3ec\uc778\ud130\ub97c delete \ud558\uba74 \uacbd\uace0\ud558\ub77c. (\uc911\uac04) Warn on failure to either reset or explicitly delete an owner<T> pointer on every code path. (\uc26c\uc6c0) new \uc758 \uacb0\uacfc\uac00 \uc6d0\uc2dc \ud3ec\uc778\ud130\uc5d0 \ub300\uc785\ub41c\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. (\uc26c\uc6c0) \ud568\uc218 \uc548\uc5d0\uc11c \uc774\ub3d9 \uc0dd\uc131\uc774 \uac00\ub2a5\ud55c \uac1c\uccb4\uac00 \ud560\ub2f9\ub418\ub294 \uacbd\uc6b0 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 \uac12\uc73c\ub85c \ubc18\ud658\ud558\ub294 \uac83\uc744 \uace0\ub824\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c","title":"Enforcement"},{"location":"Resource/#r4-t","text":"","title":"R.4: \ucc38\uc870\ub294(T&amp;) \uc18c\uc720\ub97c \uc758\ubbf8\ud558\uc9c0 \uc54a\ub294\ub2e4"},{"location":"Resource/#reason_3","text":"C++ \ud45c\uc900\ubfd0\ub9cc \uc544\ub2c8\ub77c \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 \ucc38\uc870\ub294 \uc18c\uc720\ub97c \ud558\uc9c0 \uc54a\ub294\ub2e4. \uc2e0\ub8b0\ud560 \uc218 \uc788\uace0 \ud6a8\uacfc\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uac1c\uccb4\ub97c \uc81c\uac70\ud558\uae30 \uc704\ud574\uc11c\ub294 \uac1c\uccb4\ub97c \uc18c\uc720\ud558\ub294 \ud3ec\uc778\ud130\uac00 \ud544\uc694\ud558\ub2e4.","title":"Reason"},{"location":"Resource/#example_4","text":"void f () { int & r = * new int { 7 }; // bad: raw owning reference // ... delete & r ; // bad: violated the rule against deleting raw pointers }","title":"Example"},{"location":"Resource/#see-also_1","text":"\uc6d0\uc2dc \ud3ec\uc778\ud130 \uaddc\uce59\ub4e4","title":"See Also"},{"location":"Resource/#enforcement_2","text":"\uc6d0\uc2dc \ud3ec\uc778\ud130 \uaddc\uce59\ub4e4 \uc744 \ubcf4\ub77c","title":"Enforcement"},{"location":"Resource/#r5","text":"","title":"R.5: \uc720\ud6a8 \ubc94\uc704 \uc548\uc758 \uac1c\uccb4\ub97c \uc120\ud638\ud558\ub77c. \ubd88\ud544\uc694\ud55c \ub3d9\uc801\ud560\ub2f9\uc744 \ud558\uc9c0 \ub9c8\ub77c"},{"location":"Resource/#reason_4","text":"\uc720\ud6a8\ubc94\uc704 \ub0b4 \uac1c\uccb4\ub294 \uc9c0\uc5ed \uac1c\uccb4, \uc804\uc5ed \uac1c\uccb4, \ud639\uc740 \uba64\ubc84\ub97c \uc758\ubbf8\ud55c\ub2e4. \uc774\ub294 \ud574\ub2f9 \uc2dc\uc810\uc758 \ubc94\uc704 \ub0b4\uc5d0\uc11c \ubcc4\ub3c4\uc758 \ud560\ub2f9/\ud574\uc81c \ube44\uc6a9\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc720\ud6a8\ubc94\uc704 \ub0b4 \uac1c\uccb4\uc758 \uba64\ubc84\ub4e4\uc740 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\uc5d0 \uc758\ud574 \uc218\uba85\uc774 \uad00\ub9ac\ub41c\ub2e4.","title":"Reason"},{"location":"Resource/#example_5","text":"\ub2e4\uc74c \uc608\ub294 \ubd88\ud544\uc694\ud55c \ud560\ub2f9\ud654 \ud574\uc81c\ub97c \ud558\uae30 \ub584\ubb38\uc5d0 \ube44\ud6a8\uc728\uc801\uc774\uace0, \uc608\uc678\uc5d0 \ucde8\uc57d\ud558\uba70, ... \ubd80\ubd84\uc5d0\uc11c\ub294 \ub204\uc218\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4: void f ( int n ) { auto p = new Gadget { n }; // ... delete p ; } \ub300\uc2e0, \uc9c0\uc5ed \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c: void f ( int n ) { Gadget g { n }; // ... }","title":"Example"},{"location":"Resource/#enforcement_3","text":"(\uc911\uac04) \ud568\uc218 \ub0b4\uc758 \ubaa8\ub4e0 \uacbd\ub85c\uc5d0\uc11c \uac1c\uccb4\uac00 \ud560\ub2f9\ub418\uace0 \ud574\uc81c\ub41c\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\ub294 \uc9c0\uc5ed auto \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\ub2e8\uc21c) \uc9c0\uc5ed\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c unique_ptr \ub610\ub294 shared_ptr \uac00 \uc774\ub3d9, \ubcf5\uc0ac, \ub300\uc785\ub418\uac70\ub098 \uc18c\uba78\ud558\uae30 \uc804\uc5d0 reset \ub418\uba74 \uacbd\uace0\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r6-const","text":"","title":"R.6: const\uac00 \uc544\ub2cc \uc804\uc5ed \ubcc0\uc218\ub97c \uc9c0\uc591\ud558\ub77c"},{"location":"Resource/#reason_5","text":"\uc804\uc5ed \ubcc0\uc218\ub294 \ubaa8\ub4e0 \uacf3\uc5d0\uc11c \uc811\uadfc\ub420 \uc218 \uc788\uace0 \uba85\ubc31\ud788 \uad00\ub828 \uc5c6\ub294 \uac1c\uccb4\ub4e4 \uc0ac\uc774\uc5d0 \ub9d0\ub3c4 \uc548\ub418\ub294 \uc758\uc874\uc131\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc624\ub958\uc758 \uc6d0\uc778 \uc911 \uc798 \uc54c\ub824\uc9c4 \uac83\uc774\uae30\ub3c4 \ud558\ub2e4. \uacbd\uace0 : \uc804\uc5ed \uac1c\uccb4\uc758 \ucd08\uae30\ud654 \uc21c\uc11c\ub294 \ubcf4\uc7a5\ub418\uc9c0 \uc54a\ub294\ub2e4. \uc0c1\uc218\ub85c \uc804\uc5ed \uac1c\uccb4\ub97c \ucd08\uae30\ud654\ud558\uace0 \uc2f6\ub2e4\uba74, const \uac1c\uccb4\uc5d0 \ub300\ud574\uc11c\ub3c4 \ucd08\uae30\ud654 \uc21c\uc11c\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\uc744 \uc218 \uc788\ub2e4\ub294 \uc810\uc744 \uba85\uc2ec\ud558\ub77c.","title":"Reason"},{"location":"Resource/#exception_2","text":"\uc2f1\uae00\ud1a4 \ud328\ud134 \ubcf4\ub2e4\ub294 \uc804\uc5ed \uac1c\uccb4\uac00 \ub098\uc744 \uc218\ub3c4 \uc788\ub2e4.","title":"Exception"},{"location":"Resource/#exception_3","text":"\ubcc0\uacbd\ud560 \uc218 \uc5c6\ub294( const ) \uc804\uc5ed \uac1c\uccb4\ub294 \uc774\ub7f0 \ubb38\uc81c\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uc9c0 \uc54a\ub294\ub2e4.","title":"Exception"},{"location":"Resource/#enforcement_4","text":"(??? NM: const \uac00 \uc544\ub2cc static \ubcc0\uc218\ub4e4\uc5d0 \ub300\ud574\uc11c\ub3c4 \uacbd\uace0\ud560 \uc218 \uc788\uc744 \uac83 \uac19\uc740\ub370 ... \uadf8\ub807\uac8c \ud574\uc57c \ud558\ub294\uac00?)","title":"Enforcement"},{"location":"Resource/#ralloc","text":"","title":"R.alloc: \ud560\ub2f9\uacfc \ud574\uc81c"},{"location":"Resource/#r10-malloc-free","text":"","title":"R.10: malloc()\uacfc free()\uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c"},{"location":"Resource/#reason_6","text":"malloc() \uacfc free() \ub294 \uc0dd\uc131\uc790\uc640 \uc18c\uba78\uc790\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. new \uacfc delete \uc640 \uc11e\uc5b4\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c.","title":"Reason"},{"location":"Resource/#example_6","text":"class Record { int id ; string name ; // ... }; void use () { // p1 may be nullptr // *p1 is not initialized; in particular, // that string isn't a string, but a string-sized bag of bits Record * p1 = static_cast < Record *> ( malloc ( sizeof ( Record ))); auto p2 = new Record ; // unless an exception is thrown, *p2 is default initialized auto p3 = new ( nothrow ) Record ; // p3 may be nullptr; if not, *p3 is default initialized // ... delete p1 ; // error: cannot delete object allocated by malloc() free ( p2 ); // error: cannot free() object allocated by new } delete \ub098 free() \uac00 \ub3d9\uc791\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc2e4\ud589\uc2dc\uac04 \uc624\ub958\ub97c \ubc1c\uc0dd\uc2dc\ud0ac\uc218\ub3c4 \uc788\ub2e4.","title":"Example"},{"location":"Resource/#exception_4","text":"\uc608\uc678\uac00 \ud5c8\uc6a9\ub418\uc9c0 \uc54a\ub294 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc774\ub098 \ucf54\ub4dc \uad6c\uac04\uc774 \uc788\ub2e4. \uc0dd\uba85\uc774 \ub2ec\ub824\uc788\uc5b4\uc11c \uc8fc\uc5b4\uc9c4 \uc2dc\uac04 \uc548\uc5d0 \ubc18\uc751\ud574\uc57c \ud558\ub294(life-critical hard-real-time) \uacbd\uc6b0\uac00 \uc774\uc5d0 \ud574\ub2f9\ud55c\ub2e4. \ub9ce\uc740 \uc608\uc678\uc5d0 \ub300\ud55c \uae08\uc9c0\uc0ac\ud56d(ban)\ub4e4\uc774 (\ub098\uc05c) \ubbf8\uc2e0 \ud639\uc740 \uccb4\uacc4\uc801\uc73c\ub85c \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\uc9c0 \uc54a\uc740(\ubd88\ud589\ud558\uac8c\ub3c4, \uc885\uc885 \ud544\uc694\ud55c \uacbd\uc6b0\uac00 \uc0dd\uae34\ub2e4) \uc624\ub798\ub41c \ucf54\ub4dc\uc5d0\uc11c \ubd80\ud130 \ub098\uc628 \uac71\uc815\uc5d0\uc11c \ub098\uc654\ub2e4\ub294 \uc810\uc744 \uc778\uc9c0\ud558\ub77c. \uadf8\ub7f0 \uacbd\uc6b0, new \uc5f0\uc0b0\uc790\uc758 nothrow \ubc84\uc804\uc744 \uace0\ub824\ud558\ub77c","title":"Exception"},{"location":"Resource/#enforcement_5","text":"\uba85\uc2dc\uc801\uc778 malloc \uacfc free \uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Resource/#r11-new-delete","text":"","title":"R.11: \uba85\uc2dc\uc801\uc778 new\uc640 delete \ud638\ucd9c\uc744 \uc9c0\uc591\ud558\ub77c"},{"location":"Resource/#reason_7","text":"new \ub85c \ubc18\ud658\ub41c \ud3ec\uc778\ud130\ub294 \ub9ac\uc18c\uc2a4 \ud578\ub4e4( delete \ub97c \ud638\ucd9c\ud560 \uc218 \uc788\ub294)\uc5d0 \uc885\uc18d\ub418\uc5b4\uc57c \ud55c\ub2e4. new \ub85c \ubc18\ud658\ub41c \ud3ec\uc778\ud130\uac00 \uc6d0\uc2dc \ud3ec\uc778\ud130\uc5d0 \ud560\ub2f9\ub418\uba74 \ub204\uc218\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Resource/#note_5","text":"\uaddc\ubaa8\uac00 \ud070 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c, \ub178\ucd9c\ub41c delete \ub294 (\uc774\ub294 \uc790\uc6d0\uc744 \uad00\ub9ac\ud558\ub294 \ucf54\ub4dc\uac00 \uc544\ub2cc \ub2e4\ub978 \uc751\uc6a9 \ud504\ub85c\uadf8\ub7a8 \ucf54\ub4dc\uc5d0 delete \uac00 \uc788\ub294 \uacbd\uc6b0\ub97c \uc758\ubbf8\ud55c\ub2e4) \ubc84\uadf8\uc640 \uac19\ub2e4: \ub9cc\uc57d N\ubc88\uc758 delete \ud638\ucd9c\uc774 \uc788\ub2e4\uba74, N+1\ubc88 \ud639\uc740 N-1\ubc88\uc774 \ud544\uc694\ud55c\uc9c0 \uc5b4\ub5bb\uac8c \ud655\uc2e0\ud560 \uc218 \uc788\uaca0\ub294\uac00? \ubc84\uadf8\uac00 \uc228\uc5b4\uc788\uc744 \uc218\ub3c4 \uc788\ub2e4: \uc720\uc9c0\ubcf4\uc218 \uc911\uc5d0 \uc0c8\ub86d\uac8c \ub098\ud0c0\ub0a0\uc218\ub3c4 \uc788\ub2e4. \ub178\ucd9c\ub41c new \uac00 \uc788\ub2e4\uba74, \uc544\ub9c8\ub3c4 \uc5b4\ub514\uc120\uac00 \ub178\ucd9c\ub41c delete \uac00 \ud544\uc694\ud560 \uac83\uc774\ub2e4. \uadf8\ub807\ub2e4\uba74 \ubc84\uadf8\uac00 \uc788\uc744 \uac00\ub2a5\uc131\uc774 \ub192\ub2e4.","title":"Note"},{"location":"Resource/#enforcement_6","text":"(\ub2e8\uc21c) new \uc640 delete \uac00 \uba85\uc2dc\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 make_unique \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r12","text":"","title":"R.12: \uba85\uc2dc\uc801\uc778 \ud560\ub2f9\uc758 \uacb0\uacfc\ub294 \uc989\uc2dc \uad00\ub9ac \uac1c\uccb4\uc5d0 \uc804\ub2ec\ud558\ub77c"},{"location":"Resource/#reason_8","text":"\uadf8\ub807\uc9c0 \uc54a\uc73c\uba74, \uc608\uc678\ub098 \ubc18\ud658\uc774 \uc790\uc6d0 \ub204\uc218\ub97c \uc57c\uae30\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Resource/#example-bad_3","text":"void f ( const string & name ) { FILE * f = fopen ( name , \"r\" ); // open the file vector < char > buf ( 1024 ); auto _ = finally ([ f ] { fclose ( f ); }); // remember to close the file // ... } buf \uc5d0\uc11c\uc758 \ud560\ub2f9\uc740 \uc2e4\ud328\ud560 \uc218 \uc788\uace0 \uadf8 \uacbd\uc6b0 \ud30c\uc77c \ud578\ub4e4\uc758 \ub204\uc218\uac00 \ubc1c\uc0dd\ud55c\ub2e4.","title":"Example, bad"},{"location":"Resource/#example_7","text":"void f ( const string & name ) { ifstream f { name }; // open the file vector < char > buf ( 1024 ); // ... } \uc774\uc640 \uac19\uc740 ( ifstream \ub0b4\ubd80\uc758) \ud30c\uc77c \ud578\ub4e4 \uc0ac\uc6a9\uc740 \ub2e8\uc21c\ud558\uba70, \ud6a8\uacfc\uc801\uc774\uace0, \uc548\uc804\ud558\ub2e4.","title":"Example"},{"location":"Resource/#enforcement_7","text":"\ud3ec\uc778\ud130\ub97c \ucd08\uae30\ud654\ud558\uae30 \uc704\ud574 \uba85\uc2dc\uc801\uc778 \ud560\ub2f9\uc744 \ud588\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c (\ubb38\uc81c: \uc9c1\uc811\uc801\uc778 \uc790\uc6d0 \ud560\ub2f9\uc744 \uc5bc\ub9c8\ub098 \ub9ce\uc774 \uc778\uc9c0\ud560 \uc218 \uc788\uc744 \uac83\uc778\uac00?)","title":"Enforcement"},{"location":"Resource/#r13","text":"","title":"R.13: \ud558\ub098\uc758 \ud45c\ud604\uc2dd \uad6c\ubb38\uc5d0\uc11c \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc740 \ucd5c\ub300 \ud55c\ubc88\ub9cc \uc218\ud589\ud558\ub77c"},{"location":"Resource/#reason_9","text":"\ud55c \uad6c\ubb38\uc5d0\uc11c \ub450\ubc88\uc758 \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc744 \uc218\ud589\ud558\uba74, \ud568\uc218 \uc778\uc790\ub97c \ud3ec\ud568\ud574 \ud558\uc704 \ud45c\ud604\uc2dd\uc758 \ubd88\ud2b9\uc815\ud55c \ud3c9\uac00 \uc21c\uc11c\uc5d0 \ub530\ub77c \uc790\uc6d0 \ub204\uc218\uac00 \ubc1c\uc0dd\ud560\uc218\ub3c4 \uc788\ub2e4.","title":"Reason"},{"location":"Resource/#example_8","text":"void fun ( shared_ptr < Widget > sp1 , shared_ptr < Widget > sp2 ); \uc774 fun \ud638\ucd9c\uc740 \uc544\ub798\uc640 \uac19\uc744 \uc218 \uc788\ub2e4: // BAD: potential leak fun ( shared_ptr < Widget > ( new Widget ( a , b )), shared_ptr < Widget > ( new Widget ( c , d ))); \uc774\ub294 \uc608\uc678 \uc548\uc804\ud558\uc9c0 \uc54a\uc740\ub370, \ucef4\ud30c\uc77c\ub7ec\uac00 \ud568\uc218\uc758 \ub450 \uc778\uc790\ub97c \uc0dd\uc131\ud558\uba74\uc11c \uc21c\uc11c\ub97c \ubc14\uafc0 \uc218\ub3c4 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \ud2b9\ud788, \ucef4\ud30c\uc77c\ub7ec\ub294 \ub450 \ud45c\ud604\uc2dd\uc744 \ub4a4\uc11e\uc5b4(interleave) \uc218\ud589\ud560\uc218\ub3c4 \uc788\ub2e4: ( operator new \ub97c \ud638\ucd9c\ud568\uc73c\ub85c\uc368) \ub450 \uac1c\uccb4\uc758 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc774 \uba3c\uc800 \uc218\ud589\ub418\uace0, Widget \uc758 \uc0dd\uc131\uc790\ub97c \ud638\ucd9c\ud558\ub824\ub294 \uc2dc\ub3c4\uac00 \uc774\uc5b4\uc9c8 \uac83\uc774\ub2e4. \ub9cc\uc57d \ub458 \uc911 \ud558\ub098\uac00 \uc608\uc678\ub97c \ub358\uc9c0\uba74, \ub2e4\ub978 \ud55c \uac1c\uccb4\ub294 \ud574\uc81c\ub418\uc9c0 \uc54a\ub294\ub2e4! \uc774 \ubbf8\ubb18\ud55c \ubb38\uc81c\uc758 \ud574\uacb0\ucc45\uc740 \uac04\ub2e8\ud558\ub2e4: \ud55c \ud45c\ud604\uc2dd \uad6c\ubb38 \ub0b4\uc5d0\uc11c \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc744 \ud55c\ubc88 \uc774\uc0c1 \ud558\uc9c0\ub9c8\ub77c. \uc608\ub97c \ub4e4\uc5b4: shared_ptr < Widget > sp1 ( new Widget ( a , b )); // Better, but messy fun ( sp1 , new Widget ( c , d )); \ucd5c\uc0c1\uc758 \ud574\uacb0\ucc45\uc740 \uc18c\uc720\ud558\ub294 \uac1c\uccb4\ub97c \ubc18\ud658\ud558\ub294 \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \uba85\uc2dc\uc801 \ud560\ub2f9\uc744 \uc644\uc804\ud788 \ud53c\ud558\ub294 \uac83\uc774\ub2e4: fun ( make_shared < Widget > ( a , b ), make_shared < Widget > ( c , d )); // Best \ud329\ud1a0\ub9ac \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc9c0 \uc54a\ub2e4\uba74 \uc0c8\ub86d\uac8c \uc791\uc131\ud558\ub77c.","title":"Example"},{"location":"Resource/#enforcement_8","text":"\ud45c\ud604\uc2dd \ub0b4\uc5d0\uc11c \uc5ec\ub7ec\ubc88\uc758 \uba85\uc2dc\uc801 \uc790\uc6d0 \ud560\ub2f9\uc774 \uc788\ub2e4\uba74 \uacbd\uace0\ud558\ub77c(\ubb38\uc81c: \uc9c1\uc811\uc801\uc778 \uc790\uc6d0 \ud560\ub2f9\uc744 \uc5bc\ub9c8\ub098 \ub9ce\uc774 \uc778\uc9c0\ud560 \uc218 \uc788\uc744 \uac83\uc778\uac00?)","title":"Enforcement"},{"location":"Resource/#r14-vs","text":"\uc5ed\uc8fc: * Parameter: \ub9e4\uac1c\ubcc0\uc218 * Argument: \uc804\ub2ec\uc778\uc790","title":"R.14: ??? \ubc30\uc5f4 vs. \ud3ec\uc778\ud130 \ub9e4\uac1c\ubcc0\uc218"},{"location":"Resource/#reason_10","text":"\ubc30\uc5f4\uc740 \ud3ec\uc778\ud130\ub85c \ucd95\uc57d(decay)\ub418\uace0, \uadf8 \uacb0\uacfc \uae38\uc774\ub97c \uc54c \uc218 \uc5c6\uac8c \ub41c\ub2e4. \uc774\ub85c \uc778\ud574 \ubc94\uc704 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Resource/#example_9","text":"??? what do we recommend: f(int*[]) or f(int**) ???","title":"Example"},{"location":"Resource/#alternative","text":"\uae38\uc774 \uc815\ubcf4\ub97c \uc720\uc9c0\ud558\uae30 \uc704\ud574 span \uc744 \uc0ac\uc6a9\ud558\ub77c","title":"Alternative"},{"location":"Resource/#enforcement_9","text":"\ub9e4\uac1c\ubcc0\uc218\uc5d0 [] \uac00 \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r15","text":"","title":"R.15: \ud560\ub2f9/\ud574\uc81c\uac00 \uc9dd\uc744 \uc774\ub8e8\ub3c4\ub85d \uc911\ubcf5\uc815\uc758\ud558\ub77c"},{"location":"Resource/#reason_11","text":"\uc5f0\uc0b0\uc774 \ubd88\uc77c\uce58\ud558\uba74 \ud63c\ub3c8\uc744 \uacaa\uac8c \ub420 \uac83\uc774\ub2e4.","title":"Reason"},{"location":"Resource/#example_10","text":"class X { // ... void * operator new ( size_t s ); void operator delete ( void * ); // ... };","title":"Example"},{"location":"Resource/#note_6","text":"\ud560\ub2f9\ud55c \ud6c4 \ud574\uc81c\ub418\uc9c0 \uc54a\ub294 \uba54\ubaa8\ub9ac\ub97c \uc6d0\ud55c\ub2e4\uba74, \ud574\uc81c \uc5f0\uc0b0\uc5d0 =delete \ub97c \uc0ac\uc6a9\ud558\ub77c. \uc120\uc5b8\uc774 \uc5c6\ub294 \ucc44\ub85c \ub0a8\uaca8\ub450\uc9c0 \ub9c8\ub77c.","title":"Note"},{"location":"Resource/#enforcement_10","text":"\uc5f0\uc0b0\uc774 \uc9dd\uc744 \uc774\ub8e8\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Resource/#rsmart","text":"","title":"R.smart: \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130"},{"location":"Resource/#r20-unique_ptr-shared_ptr","text":"","title":"R.20: \uc18c\uc720\uad8c\uc744 \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 unique_ptr \ud639\uc740 shared_ptr\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_12","text":"\uc790\uc6d0 \ub204\uc218\ub97c \ub9c9\uc744 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Resource/#example_11","text":"\ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: void f () { X x ; X * p1 { new X }; // see also ??? unique_ptr < T > p2 { new X }; // unique ownership; see also ??? shared_ptr < T > p3 { new X }; // shared ownership; see also ??? auto p4 = make_unique < X > (); // unique_ownership, preferable to the explicit use \"new\" auto p5 = make_shared < X > (); // shared ownership, preferable to the explicit use \"new\" } \uc704 \ucf54\ub4dc\ub294 p1 \ub97c \ucd08\uae30\ud654\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c \uac1c\uccb4\uc5d0(\ub9cc) \ub204\uc218\uac00 \ubc1c\uc0dd\ud55c\ub2e4.","title":"Example"},{"location":"Resource/#enforcement_11","text":"(\ub2e8\uc21c) new \ud639\uc740 \ud3ec\uc778\ud130 \ud0c0\uc785\uc758 \ubc18\ud658\uac12\uc774 \uc6d0\uc2dc \ud3ec\uc778\ud130\uc5d0 \ub300\uc785\ub418\uba74 \uacbd\uace0\ud55c\ub2e4.","title":"Enforcement"},{"location":"Resource/#r21-shared_ptr-unique_ptr","text":"","title":"R.21: \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4\uba74 shared_ptr\ubcf4\ub2e4\ub294 unique_ptr\ub97c \uc120\ud638\ud558\ub77c"},{"location":"Resource/#reason_13","text":"unique_ptr \ub294 \uac1c\ub150\uc801\uc73c\ub85c \ub2e8\uc21c\ud558\uace0 \uc608\uce21\uac00\ub2a5\ud558\uba70(\ud30c\uad34\uac00 \uc77c\uc5b4\ub0a0 \ub54c\ub97c \uc54c\uace0) \ube60\ub974\ub2e4 (\uc0ac\uc6a9 \ud69f\uc218\ub97c \uc554\uc2dc\uc801\uc73c\ub85c \uad00\ub9ac\ud558\uc9c0 \uc54a\ub294\ub2e4).","title":"Reason"},{"location":"Resource/#example-bad_4","text":"\uc774 \ucf54\ub4dc\ub294 \ubd88\ud544\uc694\ud558\uac8c \ucc38\uc870 \ud69f\uc218\ub97c \uc99d\uac00 \ubc0f \uc720\uc9c0\ud558\uace0 \uc788\ub2e4. void f () { shared_ptr < Base > base = make_shared < Derived > (); // use base locally, without copying it -- refcount never exceeds 1 } // destroy base","title":"Example, bad"},{"location":"Resource/#example_12","text":"\uc774 \ucf54\ub4dc\uac00 \ub354 \ud6a8\uc728\uc801\uc774\ub2e4: void f () { unique_ptr < Base > base = make_unique < Derived > (); // use base locally } // destroy base","title":"Example"},{"location":"Resource/#enforcement_12","text":"(\uc26c\uc6c0) \ub9cc\uc57d \ud568\uc218 \ub0b4\uc5d0\uc11c \uac1c\uccb4 \ud560\ub2f9\uc5d0 shared_ptr \uc744 \uc0ac\uc6a9\ud558\uc9c0\ub9cc, shared_ptr \uc744 \ub9ac\ud134\ud558\uc9c0 \uc54a\uac70\ub098 shared_ptr& \ub97c \ud544\uc694\ub85c \ud558\ub294 \ud568\uc218\uc5d0 \uc804\ub2ec\ud558\uace0 \uc788\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 unique_ptr \uc0ac\uc6a9\uc744 \uad8c\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r22-shared_ptr-make_shared","text":"","title":"R.22: shared_ptr\ub97c \ub9cc\ub4e4\ub54c\ub294 make_shared()\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_14","text":"\ub9cc\uc57d \uac1c\uccb4\ub97c \ucc98\uc74c \ub9cc\ub4e4\uace0 shared_ptr \uc758 \uc0dd\uc131\uc790\uc5d0 \uc804\ub2ec\ud558\uba74, make_shared() \ub97c \uc0ac\uc6a9\ud560 \ub54c\ubcf4\ub2e4 (\uac70\uc758 \ud655\uc2e4\ud788) \ud560\ub2f9(\uadf8\ub9ac\uace0 \ub098\uc911\uc758 \ud574\uc81c)\uc744 \ud55c\ubc88 \ub354 \ud558\uac8c \ub41c\ub2e4. \uac1c\uccb4\uc640\ub294 \ub3c5\ub9bd\uc801\uc73c\ub85c \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \ud560\ub2f9\ud574\uc57c \ud558\uae30 \ub54c\ubb38\uc774\ub2e4.","title":"Reason"},{"location":"Resource/#example_13","text":"\ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: shared_ptr < X > p1 { new X { 2 } }; // bad auto p = make_shared < X > ( 2 ); // good make_shared() \ubc84\uc804\uc740 X \uac00 \ub2e8 \ud55c \ubc88\ub9cc \uc0ac\uc6a9\ub418\uba70, \uadf8\ub807\uae30\uc5d0 \uba85\uc2dc\uc801\uc73c\ub85c new \ub97c \uc0ac\uc6a9\ud558\ub294 \ubc84\uc804\ubcf4\ub2e4 \ucf54\ub4dc\uac00 \uc9e7\ub2e4(\uac8c\ub2e4\uac00 \ube60\ub974\ub2e4).","title":"Example"},{"location":"Resource/#enforcement_13","text":"(\uc26c\uc6c0) shared_ptr \uac00 make_shared \uac00 \uc544\ub2c8\ub77c new \uc758 \uacb0\uacfc\uc5d0\uc11c \uc0dd\uc131\ub418\uba74 \uacbd\uace0\ud55c\ub2e4.","title":"Enforcement"},{"location":"Resource/#r23-unique_ptr-make_unique","text":"","title":"R.23: unique_ptr\ub97c \ub9cc\ub4e4\ub54c\ub294 make_unique()\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_15","text":"\ud3b8\ub9ac\ud558\uba70 shared_ptr \uc640 \uc77c\uad00\uc131\uc744 \uac00\uc9c4\ub2e4.","title":"Reason"},{"location":"Resource/#note_7","text":"make_unique() \ub294 C++14 \uc5d0 \ud574\ub2f9\ud558\uc9c0\ub9cc, \ubcc4 \ubb38\uc81c \uc5c6\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. (\uc27d\uac8c \uc791\uc131\ud560 \uc218 \uc788\ub2e4)","title":"Note"},{"location":"Resource/#enforcement_14","text":"(\uc26c\uc6c0) unique_ptr \uac00 make_unique \uac00 \uc544\ub2c8\ub77c new \uc758 \uacb0\uacfc\ub85c\ubd80\ud130 \uc0dd\uc131\ub41c\ub2e4\uba74 \uacbd\uace0\ud558\ub77c","title":"Enforcement"},{"location":"Resource/#r24-shared_ptr-weak_ptr","text":"","title":"R.24: shared_ptr\uc758 \uc21c\ud658\ucc38\uc870\ub97c \ubd80\uc218\uae30 \uc704\ud574 weak_ptr\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_16","text":"shared_ptr \uc740 \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc0ac\uc6a9\ud558\ub294\ub370, \uc21c\ud658 \uad6c\uc870\uc5d0\uc11c \uc774\ub294 \uc808\ub300\ub85c 0\uc774 \ub418\uc9c0 \uc54a\ub294\ub2e4. \ub54c\ubb38\uc5d0 \uc6b0\ub9ac\ub294 \uc21c\ud658 \uad6c\uc870\ub97c \ud30c\uad34\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774 \ud544\uc694\ud558\ub2e4.","title":"Reason"},{"location":"Resource/#example_14","text":"#include <memory> class bar ; class foo { public : explicit foo ( const std :: shared_ptr < bar >& forward_reference ) : forward_reference_ ( forward_reference ) { } private : std :: shared_ptr < bar > forward_reference_ ; }; class bar { public : explicit bar ( const std :: weak_ptr < foo >& back_reference ) : back_reference_ ( back_reference ) { } void do_something () { if ( auto shared_back_reference = back_reference_ . lock ()) { // Use *shared_back_reference } } private : std :: weak_ptr < foo > back_reference_ ; };","title":"Example"},{"location":"Resource/#note_8","text":"??? (HS: \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc740 \"\uc21c\ud658\uc744 \ub04a\ub294\"\uc774\ub77c\uace0 \ub9d0\ud558\ub294 \ubc18\uba74 \ub098\ub294 \"\uc77c\uc2dc\uc801\uc778 \uc784\uc2dc \uacf5\uc720\"\uac00 \ub354 \uc801\uc808\ud558\ub2e4\uace0 \uc0dd\uac01\ud55c\ub2e4.) ??? (BS: \uc21c\ud658 \ub04a\uae30\ub294 \ubc18\ub4dc\uc2dc \ud574\uc57c\ud560 \uc77c\uc778\ub370, \uc5b4\ub5bb\uac8c \"\uc77c\uc2dc\uc801\uc778 \uc18c\uc720\uad8c \uacf5\uc720\"\ub97c \ud560 \uac83\uc778\uac00. shared_ptr \uc744 \uc0ac\uc6a9\ud568\uc73c\ub85c\uc368 \"\uc77c\uc2dc\uc801\uc73c\ub85c \uc18c\uc720\uad8c \uacf5\uc720\"\ub97c \ud560 \uc218 \uc788\ub2e4.)","title":"Note"},{"location":"Resource/#enforcement_15","text":"??? \uc544\ub9c8\ub3c4 \ubd88\uac00\ub2a5\ud558\ub2e4. \uc815\uc801\uc73c\ub85c \uc21c\ud658 \uad6c\uc870\ub97c \ucc3e\uc544\ub0bc \uc218 \uc788\ub2e4\uba74, weak_ptr \ub97c \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.","title":"Enforcement"},{"location":"Resource/#r30","text":"","title":"R.30: \uc218\uba85\uc8fc\uae30 \uc758\ubbf8\uad6c\uc870\ub97c \ud45c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub9cc \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_17","text":"\uadf8\uc800 widget \uadf8 \uc790\uccb4\ub9cc \ud544\uc694\ud55c \ud568\uc218\uc5d0\uc11c widget \uc5d0 \ub300\ud55c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ubc1b\ub294 \uac83\uc740 \uc798\ubabb\ub41c \uac83\uc774\ub2e4. \uadf8\ub7f0 \ud568\uc218\ub294 \ud2b9\uc815\ud55c \uc885\ub958\uc758 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0 \uc758\ud574\uc11c \uc218\uba85\uc8fc\uae30\uac00 \uad00\ub9ac\ub418\ub294 widget \uc774 \uc544\ub2c8\ub77c \uc5b4\ub5a4 widget \uac1c\uccb4\ub77c\ub3c4 \ubc1b\uc744 \uc218 \uc788\uc5b4\uc57c \ud55c\ub2e4. \uc218\uba85\uc8fc\uae30\uc5d0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\ub294 \ud568\uc218\ub294 \uc6d0\uc2dc \ud3ec\uc778\ud130 \ud639\uc740 \ucc38\uc870\ub97c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Resource/#example-bad_5","text":"// callee void f ( shared_ptr < widget >& w ) { // ... use ( * w ); // only use of w -- the lifetime is not used at all // ... }; // caller shared_ptr < widget > my_widget = /* ... */ ; f ( my_widget ); widget stack_widget ; f ( stack_widget ); // error","title":"Example, bad"},{"location":"Resource/#example-good","text":"// callee void f ( widget & w ) { // ... use ( w ); // ... }; // caller shared_ptr < widget > my_widget = /* ... */ ; f ( * my_widget ); widget stack_widget ; f ( stack_widget ); // ok -- now this works","title":"Example, good"},{"location":"Resource/#enforcement_16","text":"(\uc26c\uc6c0) \ud568\uc218\uac00 \ubcf5\uc0ac \uac00\ub2a5\ud55c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ud0c0\uc785( operator-> \ud639\uc740 operator* \ub97c \uc911\ubcf5\uc815\uc758\ud55c \ud0c0\uc785)\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\uace0, \ud568\uc218 \ub0b4\uc5d0\uc11c operator* , operator-> \ud639\uc740 get() \ub9cc \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \uacbd\uace0\ud558\ub77c. T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\ub97c \uc9c0\uc801\ud558\ub77c. \uc774\ub54c \ud574\ub2f9 \ud0c0\uc785\uc740 \ubcf5\uc0ac/\uc774\ub3d9\uc774 \uac00\ub2a5\ud558\uc9c0\ub9cc \ud568\uc218 \ub0b4\uc5d0\uc11c \ubcf5\uc0ac/\uc774\ub3d9\ub418\uc9c0 \uc54a\uace0, \ubcc0\uacbd\ub418\uc9c0 \uc54a\uc73c\uba70, \ub2e4\ub978 \ud568\uc218\ub85c \uc804\ub2ec\ub418\uc9c0 \uc54a\uc544\uc57c \ud55c\ub2e4. \uc774\ub294 \uc18c\uc720\uad8c \uc758\ubbf8\uad6c\uc870\uac00 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r31","text":"","title":"R.31: \ud45c\uc900 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc788\ub2e4\uba74, \ud45c\uc900\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ud328\ud134\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_18","text":"\ub2e4\uc74c \uc139\uc158\ub4e4\uc758 \uaddc\uce59\ub4e4 \ub610\ud55c \ub2e4\ub978 \uc885\ub958\uc758 \uc11c\ub4dc\ud30c\ud2f0 \ud639\uc740 \ucee4\uc2a4\ud140 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ub4f1\uc5d0\uc11c\ub3c4 \ub3d9\uc791\ud560 \uac83\uc774\uba70 \uc131\ub2a5\uacfc \uc815\ud655\uc131 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a4\ub294 \ud754\ud55c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \uc5d0\ub7ec\uc5d0 \ub300\ud55c \ubd84\uc11d\uc5d0 \ub9e4\uc6b0 \uc720\uc6a9\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc740 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 \ubaa8\ub4e0 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0 \ub300\ud574\uc11c \uc774 \uaddc\uce59\uc774 \uc791\ub3d9\ud574\uc57c \ud55c\ub2e4. \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub294 \ub2e8\ud56d \uc5f0\uc0b0\uc790 * \uc640 -> \ub97c \uc624\ubc84\ub85c\ub4dc\ud558\ub294 (\uae30\ubcf8 \ub610\ub294 \ud2b9\uc218 \ud15c\ud50c\ub9bf\uc744 \ud3ec\ud568\ud55c) \ud0c0\uc785\uc744 \uc758\ubbf8\ud55c\ub2e4: \ubcf5\uc0ac\ud560 \uc218 \uc788\ub2e4\uba74, \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc720\uc9c0\ud558\ub294 shared_ptr \ucc98\ub7fc \ub3d9\uc791\ud55c\ub2e4 \ubcf5\uc0ac\ud560 \uc218 \uc5c6\ub2e4\uba74, \uace0\uc720\ud55c unique_ptr \ucc98\ub7fc \ub3d9\uc791\ud55c\ub2e4","title":"Reason"},{"location":"Resource/#example_15","text":"// use Boost's intrusive_ptr #include <boost/intrusive_ptr.hpp> void f ( boost :: intrusive_ptr < widget > p ) // error under rule 'sharedptrparam' { p -> foo (); } // use Microsoft's CComPtr #include <atlbase.h> void f ( CComPtr < widget > p ) // error under rule 'sharedptrparam' { p -> foo (); } \ub450 \uacbd\uc6b0 \ubaa8\ub450 sharedptrparam \uac00\uc774\ub4dc\ub77c\uc778 \uc5d0 \ub9de\uc9c0 \uc54a\ub294\ub2e4: p \ub294 shared_ptr \uc774\uc9c0\ub9cc, \uacf5\uc720\uc5d0 \ub300\ud574\uc11c\ub294 \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\uace0 \uc788\uc73c\uba70, \uac12\uc5d0 \uc758\ud55c \uc804\ub2ec\uc740 \ube44\ud6a8\uc728\uc801\uc774\ub2e4; \uc774 \ud568\uc218\ub4e4\uc774 widget\uc758 \uc0dd\uba85\uc8fc\uae30\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4\uba74 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub97c \ub118\uaca8\ubc1b\uc544\uc57c\ub9cc \ud55c\ub2e4. widget\uc774 nullptr \uc774 \ub420 \uc218 \uc788\ub2e4\uba74 widget* \ub97c \ub118\uaca8\ubc1b\uc544\uc57c \ud558\uace0, \uadf8\uac8c \uc544\ub2cc \uc774\uc0c1\uc801\uc778 \uc0c1\ud669\uc740 \ud568\uc218\uac00 widget& \ub97c \ub118\uaca8\ubc1b\uc544\uc57c \ud55c\ub2e4. \uc774 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub4e4\uc740 shared_ptr \uac1c\ub150\uc5d0 \ubd80\ud569\ud55c\ub2e4. \ub54c\ubb38\uc5d0 \uc774 \uaddc\uce59\uc740 \uace0\uc815\uad00\ub150\uacfc\ub294 \ub2e4\ub974\uac8c \ud754\ud788 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub294 \ube44\ud6a8\uc728\uc744 \ub178\ucd9c\uc2dc\ud0a8\ub2e4.","title":"Example"},{"location":"Resource/#r32-widget-unique_ptrwidget","text":"","title":"R.32: \ud568\uc218\uac00 widget\uc758 \uc18c\uc720\uad8c\uc744 \ub9e1\ub294\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 unique_ptr&lt;widget&gt;\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_19","text":"unique_ptr \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud568\uc218\ub97c \ubb38\uc11c\ud654\ud558\uba74\uc11c \ud638\ucd9c\ud560 \ub54c \uc18c\uc720\uad8c \uc804\ub2ec\uc744 \uac15\uc81c\ud55c\ub2e4.","title":"Reason"},{"location":"Resource/#example_16","text":"void sink ( unique_ptr < widget > ); // takes ownership of the widget void uses ( widget * ); // just uses the widget","title":"Example"},{"location":"Resource/#example-bad_6","text":"void thinko ( const unique_ptr < widget >& ); // usually not what you want","title":"Example, bad"},{"location":"Resource/#enforcement_17","text":"(\ub2e8\uc21c) \ud568\uc218\uac00 unique_ptr<T> \ub9e4\uac1c\ubcc0\uc218\ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc544 \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uac70\ub098 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. T* \ud639\uc740 T& \uc758 \uc0ac\uc6a9\uc744 \uc81c\uc548\ud558\ub77c (\ub2e8\uc21c) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 unique_ptr<T> \uc758 const \ucc38\uc870\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. const T* \ud639\uc740 const T& \ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r33-widget-unique_ptrwidget","text":"","title":"R.33: \ud568\uc218\uac00 widget\uc744 \uc0c8\ub85c \uc124\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 unique_ptr&lt;widget&gt;&amp;\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_20","text":"\uc774\ub807\uac8c unique_ptr \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud568\uc218\ub97c \ubb38\uc11c\ud654\ud558\uace0 \ud568\uc218 \ud638\ucd9c\uc758 \uc7ac\uc124\uc815(reseating) \uc758\ubbf8\uad6c\uc870\ub97c \uac15\uc81c\ud55c\ub2e4.","title":"Reason"},{"location":"Resource/#note_9","text":"\uc7ac\uc124\uc815(reseat)\uc740 \"\ud3ec\uc778\ud130 \ud639\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \ub2e4\ub978 \uac1c\uccb4\ub97c \ucc38\uc870\ud558\ub3c4\ub85d \ub9cc\ub4dc\ub294 \uac83\"\uc744 \uc758\ubbf8\ud55c\ub2e4.","title":"Note"},{"location":"Resource/#example_17","text":"void reseat ( unique_ptr < widget >& ); // \"will\" or \"might\" reseat pointer","title":"Example"},{"location":"Resource/#example-bad_7","text":"void thinko ( const unique_ptr < widget >& ); // usually not what you want","title":"Example, bad"},{"location":"Resource/#enforcement_18","text":"(\ub2e8\uc21c) \ud568\uc218\uac00 unique_ptr<T> \ub9e4\uac1c\ubcc0\uc218\ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc544 \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uac70\ub098 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. T* \ud639\uc740 T& \uc758 \uc0ac\uc6a9\uc744 \uc81c\uc548\ud558\ub77c (\ub2e8\uc21c) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 unique_ptr<T> \uc758 const \ucc38\uc870\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \ubc1b\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. const T* \ud639\uc740 const T& \ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r34-shared_ptrwidget","text":"","title":"R.34: \ud568\uc218\uac00 \uc18c\uc720\uc790 \uc911 \ud558\ub098\ub77c\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 shared_ptr&lt;widget&gt;\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_21","text":"\uc774\ub294 \ud568\uc218\uac00 \uc18c\uc720\uad8c\uc744 \uacf5\uc720\ud55c\ub2e4\ub294 \uac83\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \ub9cc\ub4e0\ub2e4.","title":"Reason"},{"location":"Resource/#example-good_1","text":"void share ( shared_ptr < widget > ); // share -- \"will\" retain refcount void may_share ( const shared_ptr < widget >& ); // \"might\" retain refcount void reseat ( shared_ptr < widget >& ); // \"might\" reseat ptr","title":"Example, good"},{"location":"Resource/#enforcement_19","text":"(\uc26c\uc6c0) \ud568\uc218\uac00 shared_ptr<T> \ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uc9c0 \uc54a\uace0 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 shared_ptr<T> \ub97c \uac12 \ud639\uc740 const \ucc38\uc870\ub85c \uc804\ub2ec \ubc1b\uc73c\uba74\uc11c \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c \ub2e4\ub978 shared_ptr \uc5d0 \ubcf5\uc0ac\ud558\uac70\ub098 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) shared_ptr<T> \uc744 rvalue \ucc38\uc870\ub85c \uc804\ub2ec\ubc1b\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 \uac12\uc73c\ub85c \uc804\ub2ec\ubc1b\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r35-shared_ptrwidget","text":"","title":"R.35: \ud568\uc218\uac00 \uacf5\uc720 \ud3ec\uc778\ud130\ub97c \uc7ac\uc124\uc815\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 shared_ptr&lt;widget&gt;&amp;\ub97c \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Resource/#reason_22","text":"\uc774\ub294 \ud568\uc218\uac00 \uac12\uc744 \ubcc0\uacbd\ud55c\ub2e4\ub294 \uac83\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \ub4dc\ub7ec\ub0b8\ub2e4.","title":"Reason"},{"location":"Resource/#note_10","text":"\uc7ac\uc124\uc815(reseat)\uc740 \"\ud3ec\uc778\ud130 \ud639\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \ub2e4\ub978 \uac1c\uccb4\ub97c \ucc38\uc870\ud558\ub3c4\ub85d \ub9cc\ub4dc\ub294 \uac83\"\uc744 \uc758\ubbf8\ud55c\ub2e4.","title":"Note"},{"location":"Resource/#example-good_2","text":"void share ( shared_ptr < widget > ); // share -- \"will\" retain refcount void reseat ( shared_ptr < widget >& ); // \"might\" reseat ptr void may_share ( const shared_ptr < widget >& ); // \"might\" retain refcount","title":"Example, good"},{"location":"Resource/#enforcement_20","text":"(\uc26c\uc6c0) \ud568\uc218\uac00 shared_ptr<T> \ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uc9c0 \uc54a\uace0 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 shared_ptr<T> \ub97c \uac12 \ud639\uc740 const \ucc38\uc870\ub85c \uc804\ub2ec \ubc1b\uc73c\uba74\uc11c \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c \ub2e4\ub978 shared_ptr \uc5d0 \ubcf5\uc0ac\ud558\uac70\ub098 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) shared_ptr<T> \uc744 rvalue \ucc38\uc870\ub85c \uc804\ub2ec\ubc1b\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 \uac12\uc73c\ub85c \uc804\ub2ec\ubc1b\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r36-const-shared_ptrwidget","text":"","title":"R.36: \ud568\uc218\uac00 \uac1c\uccb4\uc5d0 \ub300\ud55c \ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc720\uc9c0\ud55c\ub2e4\ub294 \uac83\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 const shared_ptr&lt;widget&gt;&amp;\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub77c ???"},{"location":"Resource/#reason_23","text":"\uc791\uc131\ud55c \ud568\uc218\uc758 ???\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \ub9cc\ub4e0\ub2e4.","title":"Reason"},{"location":"Resource/#example-good_3","text":"void share ( shared_ptr < widget > ); // share -- \"will\" retain refcount void reseat ( shared_ptr < widget >& ); // \"might\" reseat ptr void may_share ( const shared_ptr < widget >& ); // \"might\" retain refcount","title":"Example, good"},{"location":"Resource/#enforcement_21","text":"(\uc26c\uc6c0) \ud568\uc218\uac00 shared_ptr<T> \ub97c lvalue \ucc38\uc870\ub85c \ubc1b\uc73c\uba74\uc11c \uc0c8\ub85c\uc6b4 \uac1c\uccb4\ub97c \ub300\uc785\ud558\uc9c0 \uc54a\uace0 \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c reset() \uc744 \ud638\ucd9c\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) \ud568\uc218\uac00 shared_ptr<T> \ub97c \uac12 \ud639\uc740 const \ucc38\uc870\ub85c \uc804\ub2ec \ubc1b\uc73c\uba74\uc11c \ucd5c\uc18c \ud55c \uacbd\ub85c\uc5d0\uc11c \ub2e4\ub978 shared_ptr \uc5d0 \ubcf5\uc0ac\ud558\uac70\ub098 \uc774\ub3d9\ud558\uc9c0 \uc54a\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 T* \ud639\uc740 T& \ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \uc81c\uc548\ud558\ub77c. (\uc26c\uc6c0) ((\uae30\ubcf8\uc0ac\ud56d)) shared_ptr<T> \uc744 rvalue \ucc38\uc870\ub85c \uc804\ub2ec\ubc1b\uc73c\uba74 \uacbd\uace0\ud558\ub77c. \ub300\uc2e0 \uac12\uc73c\ub85c \uc804\ub2ec\ubc1b\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Enforcement"},{"location":"Resource/#r37-aliased","text":"\uc5ed\uc8fc: Pointer Aliasing","title":"R.37: \uc7ac\uba85\uba85(aliased)\ub41c \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc5d0\uc11c \ud68d\ub4dd\ud55c \ud3ec\uc778\ud130 \ud639\uc740 \ucc38\uc870\ub97c \uc804\ub2ec\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Resource/#reason_24","text":"\uc774 \uaddc\uce59\uc744 \uc704\ubc18\ud558\ub294 \uac83\uc740 \ucc38\uc870 \uc218\ub97c \uc783\uc5b4\ubc84\ub9ac\uace0 \ud5c8\uc0c1 \ud3ec\uc778\ud130\uac00 \ub0a8\ub3c4\ub85d \ub9cc\ub4dc\ub294 \uac00\uc7a5 \uc911\uc694\ud55c \uc6d0\uc778\uc774\ub2e4. \ud568\uc218\ub294 \ud638\ucd9c\uc774 \uae4a\uc5b4\uc9c8 \ub54c \ub418\ub3c4\ub85d \uc6d0\uc2dc \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \uc804\ub2ec\ud574\uc57c \ud55c\ub2e4. \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub85c\ubd80\ud130 \uc6d0\uc2dc \ud3ec\uc778\ud130 \ud639\uc740 \ucc38\uc870\ub97c \ud68d\ub4dd\ud558\ub294 \ud638\ucd9c \ud2b8\ub9ac\uc758 \ucd5c\uc0c1\ub2e8\uc5d0\uc11c\ub294 \uac1c\uccb4\uac00 \uc18c\uba78\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud574\uc57c \ud55c\ub2e4. \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc18c\uc720\uad8c\uc744 \uac00\uc9c4 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \uc6b0\uc5f0\uce58 \uc54a\uac8c \ud638\ucd9c \ud2b8\ub9ac\uc758 \ud558\ub2e8\uc5d0\uc11c \ubc14\ub00c\uc9c0 \uc54a\ub3c4\ub85d \ud574\uc57c\ud55c\ub2e4.","title":"Reason"},{"location":"Resource/#note_11","text":"\uc774\ub97c \uc704\ud574\uc11c, \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uc758 \uc9c0\uc5ed \uc0ac\ubcf8\uc744 \ub9cc\ub4e4\uc5b4\uc57c \ud560\uc218\ub3c4 \uc788\ub2e4. \uc774 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\ub294 \ud568\uc218\uc640 \uadf8 \ud638\ucd9c \ud2b8\ub9ac\uac00 \uc9c0\uc18d\ub418\ub294 \ub3d9\uc548 \uac1c\uccb4\uac00 \uc0b4\uc544\uc788\ub3c4\ub85d \ub9cc\ub4e0\ub2e4.","title":"Note"},{"location":"Resource/#example_18","text":"\ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c: // global (static or heap), or aliased local ... shared_ptr < widget > g_p = ...; void f ( widget & w ) { g (); use ( w ); // A } void g () { g_p = ...; // oops, if this was the last shared_ptr to that widget, destroys the widget } \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\uac00 \ud5c8\uc6a9\ub418\uc5b4\uc120 \uc548\ub41c\ub2e4: void my_code () { // BAD: passing pointer or reference obtained from a nonlocal smart pointer // that could be inadvertently reset somewhere inside f or it callees f ( * g_p ); // BAD: same reason, just passing it as a \"this\" pointer g_p -> func (); } \uc774\ub294 \uc27d\uac8c \uc218\uc815\ud560 \uc218 \uc788\ub2e4 -- \"\ucc38\uc870 \uce74\uc6b4\ud2b8\ub97c \uc720\uc9c0\ud558\ub3c4\ub85d\" \ud574\ub2f9 \ud3ec\uc778\ud130\uc758 \uc0ac\ubcf8\uc744 \uc9c0\uc5ed\uc801\uc73c\ub85c \ub9cc\ub4dc\ub294 \uac83\uc774\ub2e4: void my_code () { // cheap: 1 increment covers this entire function and all the call trees below us auto pin = g_p ; // GOOD: passing pointer or reference obtained from a local unaliased smart pointer f ( * pin ); // GOOD: same reason pin -> func (); }","title":"Example"},{"location":"Resource/#enforcement_22","text":"(\uc26c\uc6c0) \ube44\uc9c0\uc5ed \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130 \ubcc0\uc218( unique_ptr \ud639\uc740 shared_ptr )\ub85c\ubd80\ud130 \ud3ec\uc778\ud130\uac00 \ucc38\uc870\ub97c \ud68d\ub4dd\ud558\uba74 \uacbd\uace0\ud558\ub77c. \ud639\uc740 \uc2a4\ub9c8\ud2b8 \ud3ec\uc778\ud130\uac00 \ub2e4\ub978 \uac1c\uccb4\uc5d0 \uc5f0\uacb0(aliased)\ub418\uc5c8\uc744 \uc218 \uc788\uc744\ub54c \ud568\uc218 \ud638\ucd9c\uc5d0 \uc0ac\uc6a9\ub418\uba74 \uacbd\uace0\ud558\ub77c. shared_ptr \ub77c\uba74 \ud574\ub2f9 \ud3ec\uc778\ud130\ub97c \ud1b5\ud574 \ucc38\uc870\ud558\uac70\ub098 \uadf8 \ud3ec\uc778\ud130\uc758 \uc9c0\uc5ed \uc0ac\ubcf8\uc744 \ub9cc\ub4e4\ub3c4\ub85d \uc81c\uc548\ud558\ub77c.","title":"Enforcement"},{"location":"SL/","text":"SL: The Standard Library \uc5b8\uc5b4 \uc790\uccb4\uc758 \uae30\ub2a5\ub9cc\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 (\uc5b4\ub5a4 \uc5b8\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4) \ubaa8\ub4e0 \uc791\uc5c5\uc774 \ubc88\uac70\ub86d\uc9c0\ub9cc \uc801\uc808\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc5b4\ub5a0\ud55c \uc791\uc5c5\uc774\ub4e0 \uc0c1\ub2f9\ud788 \uac04\ub2e8\ud574\uc9c8 \uc218 \uc788\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub9e4\ub144 \uafb8\uc900\ud788 \ud5a5\uc0c1\ub418\uace0 \uc788\uc73c\uba70 \uc774\uc81c\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc124\uba85\uc774 \uc5b8\uc5b4 \uc790\uccb4\uc758 \uc124\uba85\ubcf4\ub2e4 \ub354 \ub9ce\uc544\uc84c\ub2e4. \uadf8\ub798\uc11c \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc139\uc158 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ub2e4\ub978 \ubaa8\ub4e0 \uc139\uc158\uc758 \uc591\uacfc \ube44\uc2b7\ud558\uac70\ub098 \uacb0\uad6d \ub354 \ucee4\uc9c8 \uac83\uc774\ub2e4. << ??? We need another level of rule numbering ??? >> C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uad6c\uc131 \uc694\uc18c \uc694\uc57d: SL.con: Containers SL.str: String SL.io: Iostream SL.regex: Regex SL.chrono: Time SL.C: C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uaddc\uce59 \uc694\uc57d: SL.1: \uac00\ub2a5\ud55c \uacf3 \uc5b4\ub514\uc5d0\uc11c\ub4e0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c SL.2: \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ubcf4\ub2e4\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc6b0\uc120\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub77c SL.3: \ube44\ud45c\uc900 \uac1c\uccb4\ub97c \ub124\uc784\uc2a4\ud398\uc774\uc2a4 std \uc5d0 \ucd94\uac00\ud558\uc9c0 \ub9d0\ub77c SL.4: \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uc9c0\ud0a4\uba74\uc11c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c ??? SL.1: \uac00\ub2a5\ud55c \uacf3 \uc5b4\ub514\uc5d0\uc11c\ub4e0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ucc98\uc74c\ubd80\ud130 \ub2e4\uc2dc \ub9cc\ub4e4\uc9c0 \ub9d0\uace0 \uc2dc\uac04\uc744 \uc808\uc57d\ud558\ub77c. \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc774\ubbf8 \uc644\ub8cc\ud55c \uc77c\uc744 \uc911\ubcf5\ud574\uc11c \ud558\uc9c0 \ub9d0\ub77c. \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc774 \ud5a5\ud6c4 \uac1c\uc120\uc744 \ud558\uac8c \ub418\uba74 \uadf8 \ud61c\ud0dd\uc744 \ub204\ub9b4 \uc218 \uc788\ub2e4. \ub610\ud55c \ub0b4\uac00 \uc9c1\uc811 \uac1c\uc120\ud568\uc73c\ub85c\uc368 \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc744 \ub3c4\uc6b8 \uc218 \uc788\ub2e4. SL.2: \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ubcf4\ub2e4\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc6b0\uc120\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub77c Reason \ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc774 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc54c\uace0 \uc788\uc73c\ubbc0\ub85c \uc2a4\uc2a4\ub85c \uc791\uc131\ud55c \ucf54\ub4dc\ub098 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac \ubcf4\ub2e4 \ub354 \uc548\uc815\uc801\uc774\uace0, \ub354 \uc798 \uad00\ub9ac\ub418\uace0, \ub354 \uad11\ubc94\uc704\ud55c \uacf3\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. SL.3: \ube44\ud45c\uc900 \uac1c\uccb4\ub97c \ub124\uc784\uc2a4\ud398\uc774\uc2a4 std \uc5d0 \ucd94\uac00\ud558\uc9c0 \ub9d0\ub77c Reason std \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ubb34\uc5b8\uac00\ub97c \ucd94\uac00\ud558\ub294 \uc791\uc5c5\uc740 \ub2e4\ub978 \ud45c\uc900\uc744 \ub530\ub974\ub294 \ucf54\ub4dc\uc758 \uc758\ubbf8\ub97c \ubcc0\uacbd\ud560 \uc218\ub3c4 \uc788\uc73c\uba70 std \uc5d0 \ubb34\uc5b8\uac00\ub97c \ucd94\uac00\ud558\uba74 \ud45c\uc900\uc758 \ud5a5\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc758\ub3c4\ud558\uc9c0 \uc54a\uc740 \ucda9\ub3cc\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. Example ??? Enforcement \uac00\ub2a5\ud558\uc9c0\ub9cc std \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc774 \uc9c0\uc800\ubd84\ud574\uc9c8 \uc218\ub3c4 \uc788\uace0 \uc77c\ubd80 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ubb38\uc81c\uc758 \uc6d0\uc778\uc774 \ub420 \uc218\ub3c4 \uc788\ub2e4. SL.4: \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uc9c0\ud0a4\uba74\uc11c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uba85\ubc31\ud558\uac8c\ub3c4 \uc774 \uaddc\uce59\uc744 \uc9c0\ud0a4\uc9c0 \uc54a\uc73c\uba74 \ubbf8\uc815\uc758 \ub3d9\uc791, \uba54\ubaa8\ub9ac \uc624\ub958, \uadf8\ub9ac\uace0 \ub2e4\ub978 \ubaa8\ub4e0 \uc885\ub958\uc758 \ub098\uc05c \uc5d0\ub7ec\ub4e4\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. Note \uc774\uac83\uc740 \uc774\ub97c \uc9c0\uc9c0\ud558\ub294 \uad6c\uccb4\uc801\uc778 \uaddc\uce59\uc5d0 \ub300\ud55c \ub9ce\uc740 \uc9c0\uc6d0\uc774 \ud544\uc694\ud55c \uc5b4\ub290\uc815\ub3c4 \ucca0\ud559\uc801\uc778 \uba54\ud0c0 \uaddc\uce59\uc774\ub2e4. \uc6b0\ub9ac\ub294 \ub354 \uad6c\uccb4\uc801\uc778 \uaddc\uce59\uc5d0 \ub300\ud55c \ubcf4\ud638\uc758 \uc6a9\ub3c4\ub85c \uc774\uac83\uc774 \ud544\uc694\ud558\ub2e4. \ub354 \uad6c\uccb4\uc801\uc778 \uaddc\uce59\uc5d0 \ub300\ud55c \uc694\uc57d: SL.4: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uc9c0\ud0a4\uba70 \uc0ac\uc6a9\ud558\ub77c SL.con: Containers ??? \ucee8\ud14c\uc774\ub108 \uaddc\uce59\uc5d0 \ub300\ud55c \uc694\uc57d: SL.con.1: C \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4 STL\uc758 array \ub098 vector \ub97c \uc0ac\uc6a9\ud558\ub77c SL.con.2: \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud560 \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub2e4\uba74 STL vector \ub97c \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\ub77c SL.con.3: \uacbd\uacc4\uc870\uac74\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc5d0\ub7ec\ub97c \ud53c\ud558\ub77c SL.con.4: trivially-copyable\ud558\uc9c0 \uc54a\uc740 \uac1d\uccb4\ub4e4\uc744 memset \uc774\ub098 memcpy \uc758 \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c SL.con.1: C \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4 STL\uc758 array \ub098 vector \ub97c \uc0ac\uc6a9\ud558\ub77c Reason C \ubc30\uc5f4\uc740 \ub35c \uc548\uc804\ud558\uace0 array \ub098 vector \uc5d0 \ube44\ud574 \uac00\uc9c0\ub294 \uc7a5\uc810\uc774 \uc5c6\ub2e4. \uace0\uc815\ub41c \uae38\uc774\uc758 \ubc30\uc5f4\uc5d0\ub294 std::array \ub97c \uc0ac\uc6a9\ud558\ub77c. \uc774\ub294 \ud568\uc218\uc5d0 \uc804\ub2ec\ub420\ub54c \ud3ec\uc778\ud130 \uc804\ub2ec\uc5d0 \ube44\ud574 \ub098\uc05c\uac83\uc774 \uc5c6\uc73c\uba70 \uc790\uae30 \uc790\uc2e0\uc758 \ud06c\uae30\ub97c \uc54c \uc218\ub3c4 \uc788\ub2e4. \ub610\ud55c, \uc6d0\ub798\uc758 \ubc30\uc5f4\uacfc \uac19\uc774 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\ub294 std::array \ub294 \uc790\uae30 \uc790\uc2e0\uc758 \uc694\uc18c\ub4e4 \ub610\ud55c \uc2a4\ud0dd\uc5d0 \ubcf4\uad00\ud55c\ub2e4. \uac00\ubcc0\uae38\uc774 \ubc30\uc5f4\uc758 \uacbd\uc6b0, std::vector \ub97c \uc0ac\uc6a9\ud558\ub77c. \uc774\ub294 \uc790\uc2e0\uc758 \ud06c\uae30\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\uc73c\uba70 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \uc790\uccb4\uc801\uc73c\ub85c \uad00\ub9ac\ud574\uc900\ub2e4. Example int v [ SIZE ]; // BAD std :: array < int , SIZE > w ; // ok Example int * v = new int [ initial_size ]; // BAD, owning raw pointer delete [] v ; // BAD, manual delete std :: vector < int > w ( initial_size ); // ok Note \ucee8\ud14c\uc774\ub108\uc5d0 \ub300\ud55c \ube44\uc18c\uc720 \ucc38\uc870\uc758 \uacbd\uc6b0 gsl::span \uc744 \uc0ac\uc6a9\ud558\ub77c. Note \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\ub294 \uace0\uc815\ub41c \uae38\uc774\uc758 \ubc30\uc5f4\uacfc \ud799 \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\ub294 vector \uc758 \uc131\ub2a5 \ube44\uad50\ub294 \uc2e0\ub8b0\ud558\uae30\uac00 \uc5b4\ub835\uc9c0\ub9cc \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\ub294 std::array \uc640 \ud3ec\uc778\ud130\ub85c \uc811\uadfc\ud558\ub294 malloc() \ub41c \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \ube44\uad50\ud560 \uc218 \uc788\ub2e4. \ub300\ubd80\ubd84\uc758 \ucf54\ub4dc\ub294 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\uac70\ub098 \ud799 \uacf5\uac04\uc5d0 \uc800\uc7a5\ub418\ub4e0\uc9c0 \uc0c1\uad00 \uc5c6\uace0, \ub2e8\uc9c0 vector \uc758 \ud3b8\uc758\uc131\uacfc \uc548\uc804\uc131\uc5d0 \uad00\uc2ec\uc774 \uc788\ub2e4. \uadf8 \ucc28\uc774\uac00 \uc0c1\uad00\uc788\ub294 \uacbd\uc6b0\uc5d0\ub294 \uc2e4\uc81c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uc0ac\ub78c\uc774 array \ub098 vector \ub97c \uc801\uc808\ud788 \uc120\ud0dd\ud560 \uc218 \uc788\ub2e4. Enforcement (STL\uc774 \uc544\ub2cc \uad6c\ud615\uc758 \ucf54\ub4dc\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uacfc\ub3c4\ud558\uace0 \uc2dc\ub044\ub7ec\uc6b4 \uacbd\uace0\ub97c \ud53c\ud558\uae30 \uc704\ud574) STL \ucee8\ud14c\uc774\ub108\ub97c \uc120\uc5b8\ud558\ub294 \ud568\uc218\ub098 \ud074\ub798\uc2a4 \uc548\uc5d0 C \ubc30\uc5f4\uc5d0 \ub300\ud55c \uc120\uc5b8\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. \uc774\ub97c \uc218\uc815\ud558\uae30 \uc704\ud574\uc11c\ub294 \ucd5c\uc18c\ud55c C \ubc30\uc5f4\uc744 std::array \ub85c \ubc14\uafd4\uc11c \uc0ac\uc6a9\ud558\ub77c. SL.con.2: \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud560 \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub2e4\uba74 STL vector \ub97c \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\ub77c Reason vector \uc640 array \ub294 \ub2e4\uc74c\uc758 \uc138 \uac00\uc9c0 \uc7a5\uc810\uc744 \uc81c\uacf5\ud558\ub294 \uc720\uc77c\ud55c \ud45c\uc900 \ucee8\ud14c\uc774\ub108\ub4e4\uc774\ub2e4. \uac00\uc7a5 \ube60\ub978 \ubc94\uc6a9 \uc811\uadfc(random access, including being vectorization-friendly) \uac00\uc7a5 \ube60\ub978 \uae30\ubcf8\uc801 \uc811\uadfc \ud328\ud134(begin-to-end or end-to-begin is prefetcher-friendly) \uac00\uc7a5 \uc801\uc740 \uacf5\uac04 \ubd80\ub2f4(contiguous layout has zero per-element overhead, which is cache-friendly) \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0 \ucee8\ud14c\uc774\ub108\ub85c\ubd80\ud130 \uc694\uc18c\ub97c \ucd94\uac00\ud558\uace0 \uc81c\uac70\ud560 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0 \uae30\ubcf8\uc801\uc73c\ub85c vector \ub97c \uc0ac\uc6a9\ud558\uace0, \ub9cc\uc57d \ucee8\ud14c\uc774\ub108\uc758 \ud06c\uae30\ub97c \ubcc0\uacbd\ud560 \uc77c\uc774 \uc5c6\ub2e4\uba74 array \ub97c \uc0ac\uc6a9\ud558\ub77c. \ub9cc\uc57d \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\uac00 \ub354 \uc801\uc808\ud574 \ubcf4\uc778\ub2e4\uba74, \uc608\ub97c \ub4e4\uc5b4 O(log N) \uac80\uc0c9 \uc131\ub2a5\uc744 \uc704\ud574 map \uc744 \uc0ac\uc6a9\ud558\uac70\ub098, \uc694\uc18c\ub4e4 \uc911\uac04\uc5d0 \ud6a8\uc728\uc801\uc73c\ub85c \uc0bd\uc785\uc744 \ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0\ub294 list \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uba87 KB \uc758 \ud06c\uae30\uae4c\uc9c0\ub294 \ubcf4\ud1b5\uc758 \uacbd\uc6b0\uc5d0 vector \uac00 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc77c \uc218 \uc788\ub2e4. Note string \uc740 \uac01\uac01\uc758 \uac1c\ubcc4 \ubb38\uc790\ub4e4\uc744 \uc704\ud55c \ucee8\ud14c\uc774\ub108\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\uc57c \ud55c\ub2e4. string \uc740 \ud14d\uc2a4\ud2b8\ub85c \uad6c\uc131\ub41c \ubb38\uc790\uc5f4\uc774\uace0, \ub9cc\uc57d \uac1c\ubcc4 \ubb38\uc790\uc758 \ucee8\ud14c\uc774\ub108\uac00 \ud544\uc694\ud558\uba74 vector</*char_type*/> \ub610\ub294 array</*char_type*/> \ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub77c. Exceptions \ub9cc\uc57d \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud560 \uc88b\uc740 \uc774\uc720\uac00 \uc788\ub2e4\uba74 \uc0ac\uc6a9\ud558\ub77c. \uc608\ub97c \ub4e4\uba74: \ub9cc\uc57d vector \uac00 \ub2f9\uc2e0\uc758 \uc694\uad6c\uc0ac\ud56d\uc5d0 \uc801\ud569\ud558\uace0, \ucee8\ud14c\uc774\ub108\uc758 \ud06c\uae30\uac00 \uac00\ubcc0\uc801\uc774\uc9c0 \uc54a\ub2e4\uba74 \uadf8\ub0e5 array \ub97c \uc0ac\uc6a9\ud558\ub77c. \ub9cc\uc57d O(K) \ub610\ub294 O(log N) \uac80\uc0c9\uc2dc\uac04\uc774 \ubcf4\uc7a5\ub418\uc5b4\uc57c \ud558\uba74\uc11c \ucee8\ud14c\uc774\ub108\uac00 \uba87 KB \ubcf4\ub2e4 \ub354 \ucee4\uc9c8 \uc218 \uc788\uace0, \ube48\ubc88\ud55c \uc0bd\uc785\uc774 \uc77c\uc5b4\ub098 \uc815\ub82c\ub41c vector \ub97c \uc720\uc9c0\ud558\uae30 \uc5b4\ub835\ub2e4\uba74 unordered_map \uc774\ub098 map \uc744 \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub77c. Note vector \ub97c \uc694\uc18c\uc758 \ud06c\uae30\ub9cc\ud07c \ucd08\uae30\ud654\ud558\ub824\uba74, () \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c. vector \ub97c \uc694\uc18c\uc758 \ub9ac\uc2a4\ud2b8 \ub0b4\uc6a9\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub824\uba74, {} \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c. vector < int > v1 ( 20 ); // v1 \uc740 \uac12\uc774 0\uc778 20\uac1c\uc758 \uc694\uc18c\ub4e4\uc744 \uac16\ub294\ub2e4. (vector<int>{}) vector < int > v2 { 20 }; // v2 \ub294 \uac12\uc774 20\uc778 \ud55c\uac1c\uc758 \uc694\uc18c\ub97c \uac16\ub294\ub2e4. {} \ucd08\uae30\ud654 \ubb38\ubc95\uc744 \uc120\ud638\ud558\ub77c. . Enforcement vector \uc0dd\uc131 \uc774\ud6c4\uc5d0 \ud06c\uae30\uac00 \uc804\ud600 \ubcc0\uacbd\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0(\uc608\ub97c \ub4e4\uba74 \ucee8\ud14c\uc774\ub108 \ubcc0\uc218\uac00 const \uc774\uac70\ub098 const \uac00 \uc544\ub2cc \ud568\uc218\uac00 \ud558\ub098\ub3c4 \ud638\ucd9c\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0)\ub97c \uc9c0\uc801\ud560 \uc218 \uc788\ub2e4. \uc774\ub97c \uc218\uc815\ud558\ub824\uba74 array \ub97c \uc0ac\uc6a9\ud558\ub77c. SL.con.3: \uacbd\uacc4\uc870\uac74\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc5d0\ub7ec\ub97c \ud53c\ud558\ub77c Reason \ud560\ub2f9\ub41c \uc694\uc18c\ub4e4\uc758 \ubc94\uc704\ub97c \ub118\uc5b4\uc11c \uc77d\uac70\ub098 \uc4f0\ub294 \uacbd\uc6b0\uc5d0 \ub098\uc05c \uc5d0\ub7ec\ub098 \uc798\ubabb\ub41c \uacb0\uacfc \ubc0f \uc0ac\uace0 \ub610\ub294 \ubcf4\uc548 \uce68\ud574\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4. Note \uc694\uc18c \ubc94\uc704\uc5d0 \ub300\ud55c \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud55c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub4e4\uc740 (\ub300\ubd80\ubd84) \ubaa8\ub450 \uacbd\uacc4\uc870\uac74\uc774 \uc548\uc804\ud55c\uc9c0 \uac80\uc0ac\uc5d0 \ud544\uc694\ud55c \uc5f0\uc0b0\uc744 \ucd94\uac00\ud558\ub294 \ubd80\ub2f4\uc774 \uc788\ub2e4. vector \uc640 \uac19\uc740 \ud45c\uc900 \ud0c0\uc785\ub4e4\uc740 \uacbd\uacc4\uc870\uac74 \uac80\uc0ac\ub97c \uc218\ud589\ud558\ub3c4\ub85d bounds profile \uc5d0 \uae30\ubc18\ud558\uc5ec ( contracts \ub97c \ucd94\uac00\ud558\ub294 \ub4f1\uc758 \ud638\ud658 \uac00\ub2a5\ud55c \ubc29\uc2dd\uc73c\ub85c) \uc218\uc815\ub418\uac70\ub098 at() \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc774\uc0c1\uc801\uc73c\ub85c\ub294 \uba54\ubaa8\ub9ac \uc811\uadfc\uc774 \uacbd\uacc4\uc548\uc5d0 \uc788\uc74c\uc774 \uc815\uc801\uc73c\ub85c \ubcf4\uc7a5\ub418\uc5b4\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74: range- for \ubb38\uc740 \ub300\uc0c1 \ucee8\ud14c\uc774\ub108\uac00 \uc811\uadfc \uac00\ub2a5\ud55c \ubc94\uc704\ub97c \uc808\ub300 \ub118\uc5b4\uc11c \ubc18\ubcf5\ubb38\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. v.begin(),v.end() \ub294 \uacbd\uacc4\uc870\uac74\uc774 \uc548\uc804\ud558\ub2e4\ub294 \uac83\uc744 \uc27d\uac8c \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7ec\ud55c \ubc18\ubcf5\ubb38\ub4e4\uc740 \uacbd\uacc4\uc870\uac74 \uac80\uc0ac\uac00 \uc5c6\uace0, \uc548\uc804\ud558\uc9c0 \uc54a\uc740 \uc694\uc18c \uc811\uadfc\uc5d0 \ud544\uc694\ud55c \uc131\ub2a5\uacfc \ub3d9\uc77c\ud558\ub2e4. \uc885\uc885 \uac04\ub2e8\ud55c \uac80\uc0ac\ub97c \ubbf8\ub9ac \ud568\uc73c\ub85c\uc11c \uc778\ub371\uc2a4\ub97c \uc811\uadfc\ud560 \ub54c\ub9c8\ub2e4 \ub9e4\ubc88 \uac80\uc0ac\ud560 \ud544\uc694\ub97c \uc5c6\uc568 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74 v.begin(),v.begin()+i \ub97c \uc704\ud574\uc11c\ub294 \uac04\ub2e8\ud788 i \uac00 v.size \ub97c \ub118\ub294\uc9c0 \uac80\uc0ac\ud574 \ubcfc \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \ubc18\ubcf5\ubb38\uc740 \ub9e4\ubc88 \uc694\uc18c\uc5d0 \uc811\uadfc\ud560 \ub54c\ub9c8\ub2e4 \uacbd\uacc4 \uc870\uac74 \uac80\uc0ac\ub97c \ud558\ub294 \uac83 \ubcf4\ub2e4 \ud6e8\uc52c \ube60\ub97c \uc218 \uc788\ub2e4. Example, bad void f () { array < int , 10 > a , b ; memset ( a . data (), 0 , 10 ); // BAD, \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \ub118\uc5b4\uc11c\ub294 \uc5d0\ub7ec (length = 10 * sizeof(int)) memcmp ( a . data (), b . data (), 10 ); // BAD, \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \ub118\uc5b4\uc11c\ub294 \uc5d0\ub7ec (length = 10 * sizeof(int)) } \ub610\ud55c, std::array<>::fill() \uc774\ub098 std::fill() \ub610\ub294 \ube44\uc5b4\uc788\ub294 \ucd08\uae30\ud654\ubb38\uc774 memset() \ubcf4\ub2e4\ub294 \ub098\uc740 \ud6c4\ubcf4\uc774\ub2e4. Example, good void f () { array < int , 10 > a , b , c {}; // c is initialized to zero a . fill ( 0 ); fill ( b . begin (), b . end (), 0 ); // std::fill() fill ( b , 0 ); // std::fill() + Ranges TS if ( a == b ) { // ... } } Example \ub9cc\uc57d \uc218\uc815\ub418\uc9c0 \uc54a\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, std::array \uc640 std::vector \ub97c \uacbd\uacc4 \uc870\uac74\uc5d0 \uc548\uc804\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub300\ub7b5\uc758 \ud574\uacb0 \ubc29\ubc95\uc774 \uc788\ub2e4. \ud574\ub2f9 \ucf54\ub4dc\ub294 std::out_of_range \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub294 \uac01 class \uc758 .at() \uba64\ubc84 \ud568\uc218\ub97c \ud638\ucd9c \ud560 \uc218 \uc788\ub2e4. \uc544\ub2c8\uba74 \uacbd\uacc4\uc870\uac74 \uc704\ubc18\uc5d0 \ube60\ub974\uac8c \uc2e4\ud328\ud558\uac70\ub098 \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \ub3d9\uc791\uc744 \ud558\ub294 at() \uc774\uc678\uc758 \ud568\uc218\ub97c \ud638\ucd9c \ud560 \uc218\ub3c4 \uc788\ub2e4. void f ( std :: vector < int >& v , std :: array < int , 12 > a , int i ) { v [ 0 ] = a [ 0 ]; // BAD v . at ( 0 ) = a [ 0 ]; // OK (alternative 1) at ( v , 0 ) = a [ 0 ]; // OK (alternative 2) v . at ( 0 ) = a [ i ]; // BAD v . at ( 0 ) = a . at ( i ); // OK (alternative 1) v . at ( 0 ) = at ( a , i ); // OK (alternative 2) } Enforcement \uacbd\uacc4\uc870\uac74 \uac80\uc0ac\uac00 \uc5c6\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\uc5d0 \ub300\ud55c \ud638\ucd9c\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c. ??? insert link to a list of banned functions \uc774\ub7ec\ud55c \uaddc\uce59\uc740 bounds profile \uc758 \uc77c\ubd80\ubd84\uc774\ub2e4. SL.con.4: trivially-copyable\ud558\uc9c0 \uc54a\uc740 \uac1d\uccb4\ub4e4\uc744 memset \uc774\ub098 memcpy \uc758 \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c. Reason \uadf8\ub807\uac8c \ud558\uba74 \uac00\uc0c1 \ud568\uc218 \ud14c\uc774\ube14\uc744 \uc800\uc7a5\ud558\ub294 vptr \uc815\ubcf4\ub97c \ub36e\uc5b4\uc4f0\uac8c \ub418\uc5b4\uc11c \uac1d\uccb4\uc758 \uc758\ubbf8\ub97c \ub9dd\uce60 \uc218 \uc788\ub2e4. Note (w)memset, (w)memcpy, (w)memmove, (w)memcmp\ub3c4 \uc720\uc0ac\ud55c \ubb38\uc81c\uac00 \uc788\ub2e4. Example struct base { virtual void update () = 0 ; }; struct derived : public base { void update () override {} }; void f ( derived & a , derived & b ) // goodbye v-tables { memset ( & a , 0 , sizeof ( derived )); memcpy ( & a , & b , sizeof ( derived )); memcmp ( & a , & b , sizeof ( derived )); } \ub300\uc2e0 \uc801\uc808\ud55c \ub514\ud3f4\ud2b8 \ucd08\uae30\ud654, \ubcf5\uc0ac, \ube44\uad50 \ud568\uc218\ub97c \uc815\uc758\ud558\ub77c. void g ( derived & a , derived & b ) { a = {}; // default initialize b = a ; // copy if ( a == b ) do_something ( a , b ); } Enforcement trivially copyable\ud558\uc9c0 \uc54a\uc740 \ud0c0\uc785\uc5d0 \uc704\uc5d0\uc11c \uc5b8\uae09\ud588\ub358 \ud568\uc218\ub4e4((w)memset, (w)memcpy, (w)memmove, (w)memcmp)\uc744 \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c. \uc5ed\uc8fc: trivially copyable \uc758 \uc790\uc138\ud55c \uc815\ubcf4\ub294 \ub9c1\ud06c\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc73c\uba70 \ud574\ub2f9 \ud0c0\uc785\uc774 trivially copyable\ud55c \ud0c0\uc785\uc778\uc9c0 \uc5ec\ubd80\ub294 std::is_trivially_copyable \ub85c \uac80\uc0ac\ud560 \uc218 \uc788\ub2e4. SL.str: String \ud14d\uc2a4\ud2b8 \uc870\uc791\uc740 \uac70\ub300\ud55c \uc8fc\uc81c\uc774\uace0, std::string \uc740 \uc774\ub4e4 \uc804\ubd80\ub97c \ub2e4\ub8e8\uc9c0 \ubabb\ud55c\ub2e4. \uc774 \uc139\uc158\uc5d0\uc11c\ub294 \uc8fc\ub85c char* , zstring , string_view , \uadf8\ub9ac\uace0 gsl::string_span \uacfc std::string \uc758 \uad00\uacc4\uc5d0 \ub300\ud574 \uba85\ud655\ud558\uac8c \ud558\uace0\uc790 \ud55c\ub2e4. wchar_t , \uc720\ub2c8\ucf54\ub4dc, \uadf8\ub9ac\uace0 UTF-8 \uc744 \ud3ec\ud568\ud558\ub294 ASCII\uac00 \uc544\ub2cc \ubb38\uc790\uc14b\uacfc \uc778\ucf54\ub529\uacfc \uac19\uc740 \uc911\uc694\ud55c \uc774\uc288\ub294 \ub2e4\ub978\uacf3\uc5d0\uc11c \ub2e4\ub8e8\uace0\uc790 \ud55c\ub2e4. See also : regular expressions String \uc694\uc57d: SL.str.1: \ubb38\uc790\uc5f4\uc744 \uc81c\ub300\ub85c \uc18c\uc720\ud558\uae30 \uc704\ud574\uc11c\ub294 std::string \uc744 \uc0ac\uc6a9\ud558\ub77c SL.str.2: \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 std::string_view \ub098 gsl::string_span \uc744 \uc0ac\uc6a9\ud558\ub77c SL.str.3: 0\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc778 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud558\ub824\uba74 zstring \ub098 czstring \uc744 \uc0ac\uc6a9\ud558\ub77c. SL.str.4: \ud558\ub098\uc758 \ub2e8\uc77c \ubb38\uc790\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \uc758\ub3c4\ud560 \ub54c char* \ub97c \uc0ac\uc6a9\ud558\ub77c SL.str.5: \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud560 \ud544\uc694\uc5c6\uc774 \ubc14\uc774\ud2b8 \uac12\uc744 \ucc38\uc870\ud558\ub824\uba74 std::byte \ub97c \uc0ac\uc6a9\ud558\ub77c SL.str.10: \uc9c0\uc5ed \uc5b8\uc5b4\uc5d0 \ubbfc\uac10\ud55c \ubb38\uc790\uc5f4\uc5d0 \ub300\ud55c \ucc98\ub9ac\uac00 \ud544\uc694\ud560 \ub54c\uc5d0\ub294 std::string \uc744 \uc0ac\uc6a9\ud558\ub77c. SL.str.11: \ubb38\uc790\uc5f4\uc744 \uc218\uc815\ud560 \ud544\uc694\uac00 \uc788\uc744\ub54c\ub294 std::string_view \ubcf4\ub2e4\ub294 gsl::string_span \uc744 \uc0ac\uc6a9\ud558\ub77c SL.str.12: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac std::string \uc744 \uc758\ub3c4\ud560 \ub54c\ub294 s \uc811\ubbf8\uc0ac\ub97c \uc0ac\uc6a9\ud558\ub77c See also : F.24 span F.25 zstring SL.str.1: \ubb38\uc790\uc5f4\uc744 \uc81c\ub300\ub85c \uc18c\uc720\ud558\uae30 \uc704\ud574\uc11c\ub294 std::string \uc744 \uc0ac\uc6a9\ud558\ub77c Reason string \uc740 \uc62c\ubc14\ub978 \ubc29\uc2dd\uc73c\ub85c \uba54\ubaa8\ub9ac \ud560\ub2f9 \ubc0f \uc18c\uc720, \ubcf5\uc0ac, \uc810\uc9c4\uc801\uc778 \ud655\uc7a5\uc744 \uc9c0\uc6d0\ud558\uba70, \uadf8\ub9ac\uace0 \ub2e4\uc591\ud558\uace0 \uc720\uc6a9\ud55c \uae30\ub2a5\ub4e4\uc744 \uc81c\uacf5\ud55c\ub2e4. Example vector < string > read_until ( const string & terminator ) { vector < string > res ; for ( string s ; cin >> s && s != terminator ; ) // \ud55c \ub2e8\uc5b4 \uc77d\uae30 res . push_back ( s ); return res ; } string \uc5d0\uc11c\ub294 (\uc720\uc6a9\ud55c \uae30\ub2a5\ub4e4\uc758 \uc608\ub85c) >> \uc640 != \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc81c\uacf5\ud558\uace0, \uc5ec\uae30\uc5d0\ub294 \uc5b4\ub5a0\ud55c \uba85\uc2dc\uc801\uc778 \uba54\ubaa8\ub9ac \ud560\ub2f9, \ud574\uc81c \ub610\ub294 \uacbd\uacc4\uc870\uac74 \uac80\uc0ac \uc5c6\uc774 string \uc774 \ub0b4\ubd80\uc801\uc73c\ub85c \uc774\ub4e4\uc744 \ud574\uacb0\ud55c\ub2e4. C++17 \uc5d0\uc11c\ub294 \ud568\uc218 \ud638\ucd9c\uc790\uc5d0\uac8c \ub354 \uc720\uc5f0\ud568\uc744 \uc81c\uacf5\ud558\uae30 \uc704\ud574 const string* \ub300\uc2e0\uc5d0 string_view \ub97c \ud568\uc218 \uc778\uc790\ub85c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. vector < string > read_until ( string_view terminator ) // C++17 { vector < string > res ; for ( string s ; cin >> s && s != terminator ; ) // \ud55c \ub2e8\uc5b4 \uc77d\uae30 res . push_back ( s ); return res ; } gsl::string_span \uc740 std::string_view \uc758 \ub300\ubd80\ubd84\uc758 \uc7a5\uc810\uc744 \ub300\uccb4\ud560 \uc218 \uc788\ub294 \ud604\uc7ac \uac00\ub2a5\ud55c \uc635\uc158\uc77c \uc218 \uc788\ub2e4. \uac04\ub2e8\ud55c \uc608\ub97c \ub4e4\uba74: vector < string > read_until ( string_span terminator ) { vector < string > res ; for ( string s ; cin >> s && s != terminator ; ) // \ud55c \ub2e8\uc5b4 \uc77d\uae30 res . push_back ( s ); return res ; } Example, bad trivial \ud558\uc9c0 \uc54a\uc740 \uba54\ubaa8\ub9ac \uad00\ub9ac\uac00 \ud544\uc694\ud55c \ub3d9\uc791\uc5d0 \ub300\ud574\uc11c\ub294 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c. char * cat ( const char * s1 , const char * s2 ) // beware! // return s1 + '.' + s2 { int l1 = strlen ( s1 ); int l2 = strlen ( s2 ); char * p = ( char * ) malloc ( l1 + l2 + 2 ); strcpy ( p , s1 , l1 ); p [ l1 ] = '.' ; strcpy ( p + l1 + 1 , s2 , l2 ); p [ l1 + l2 + 1 ] = 0 ; return p ; } \uc774 \ucf54\ub4dc\uac00 \uc62c\ubc14\ub974\uac8c \ubb38\uc81c\ub97c \ud574\uacb0\ud588\uc744\uae4c? \ud568\uc218 \ud638\ucd9c\uc790\uac00 \ubc18\ud658\ub41c \ud3ec\uc778\ud130\ub97c free() \ud574\uc57c \ud55c\ub2e4\uace0 \uae30\uc5b5\ud574\uc57c \ud560\uae4c? \uc774 \ucf54\ub4dc\uac00 \ubcf4\uc548\uc5d0 \uad00\ud55c \ub9ac\ubdf0\ub97c \ud1b5\uacfc\ud560 \uc218 \uc788\uc744\uae4c? Note \uc9c1\uc811\uc801\uc778 \uc131\ub2a5 \uce21\uc815 \uc5c6\uc774 string \uc774 \uc800\uc218\uc900\uc758 \uae30\ubc95\ubcf4\ub2e4 \ub290\ub9ac\ub2e4\uace0 \ub2e8\uc815\ud558\uc9c0\ub3c4 \ub9d0\uace0, \ubaa8\ub4e0 \ucf54\ub4dc\uac00 \uc131\ub2a5\uc5d0 \ubbfc\uac10\ud558\ub2e4\uace0 \uc0dd\uac01\ud558\uc9c0 \ub9d0\ub77c. \ub108\ubb34 \uc774\ub978 \ucd5c\uc801\ud654\ub97c \ud558\uc9c0 \ub9d0\ub77c Enforcement ??? SL.str.2: \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 std::string_view \ub098 gsl::string_span \uc744 \uc0ac\uc6a9\ud558\ub77c Reason std::string_view \ub098 gsl::string_span \uc740 \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc5d0 \ub300\ud574 \uac04\ub2e8\ud558\uace0 (\uc7a0\uc7ac\uc801\uc73c\ub85c) \uc548\uc804\ud55c \uc811\uadfc\uc744 \uc81c\uacf5\ud558\uba70 \uc774\ub294 \uc774 \ubb38\uc790\ub4e4\uc774 \uc5b4\ub5bb\uac8c \uba54\ubaa8\ub9ac \uacf5\uac04\uc5d0 \ud560\ub2f9\ub418\uace0 \uc800\uc7a5\ub418\uc5c8\ub294\uc9c0\uc640 \ubb34\uad00\ud558\ub2e4. Example vector < string > read_until ( string_span terminator ); void user ( zstring p , const string & s , string_span ss ) { auto v1 = read_until ( p ); auto v2 = read_until ( s ); auto v3 = read_until ( ss ); // ... } Note C++17 \uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 std::string_view \ub294 \uc77d\uae30 \uc804\uc6a9\uc774\ub2e4. Enforcement ??? SL.str.3: 0\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc778 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud558\ub824\uba74 zstring \ub098 czstring \uc744 \uc0ac\uc6a9\ud558\ub77c. Reason \uc774\ub4e4\uc744 \uc0ac\uc6a9\ud558\uba74 \uac00\ub3c5\uc131\uacfc \uc758\ub3c4\uc5d0 \ub300\ud55c \ud45c\ud604\uc744 \uba85\ud655\ud788 \ud560 \uc218 \uc788\ub2e4. \ub2e8\uc21c char* \ub294 \ud558\ub098\uc758 \ubb38\uc790\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc774\uac70\ub098 \ubb38\uc790\ub4e4\uc758 \ubc30\uc5f4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130, null \ub85c \ub05d\ub098\ub294 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4 \ub610\ub294 \uc791\uc740 \uc815\uc218\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub85c \ub2e4\uc591\ud558\uac8c \ud45c\ud604\ub420 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \ub2e4\uc591\ud55c \ubc29\uc2dd\uc758 \ud45c\ud604\ub4e4\uc744 \uc798 \uad6c\ubd84\ud568\uc73c\ub85c\uc11c \ubd88\ud544\uc694\ud55c \uc624\ud574\ub098 \ubc84\uadf8\ub97c \ubc29\uc9c0 \ud560 \uc218 \uc788\ub2e4. Example void f1 ( const char * s ); // s \ub294 \uc544\ub9c8\ub3c4 \ubb38\uc790\uc5f4\uc77c \uac83\uc774\ub2e4. \uc6b0\ub9ac\uac00 \uc54c \uc218 \uc788\ub294 \uac83\uc740 \uc774\uac83\uc774 nullptr \uc774\uac70\ub098 \ucd5c\uc18c\ud55c \ud558\ub098\uc758 \ubb38\uc790\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub77c\ub294 \uac83\uc774\ub2e4. void f1 ( zstring s ); // s \ub294 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc774\uac70\ub098 nullptr \uc774\ub2e4. void f1 ( czstring s ); // s \ub294 C \uc2a4\ud0c0\uc77c\uc758 \uc0c1\uc218 \ubb38\uc790\uc5f4\uc774\uac70\ub098 nullptr \uc774\ub2e4. void f1 ( std :: byte * s ); // s \ub294 \ud558\ub098\uc758 \ubc14\uc774\ud2b8\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc774\ub2e4. (C++17) Note \ud2b9\ubcc4\ud55c \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub2e4\uba74 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 string \uc73c\ub85c \ub2e8\uc21c\ud558\uac8c \ubcc0\ud658\ud558\uc9c0 \ub9d0\ub77c. Note \ub2e4\ub978 \uc77c\ubc18\uc801\uc778 \ud3ec\uc778\ud130\uc640 \uac19\uc774 zstring \uc740 \uc18c\uc720\uad8c\uc744 \ud45c\ud604\ud558\uba74 \uc548\ub41c\ub2e4. Note \uc218\ub9ce\uc740 C++ \ucf54\ub4dc\uac00 \uc774\ubbf8 char* \uc640 const char* \ub97c \uc0ac\uc6a9 \uc758\ub3c4\uc5d0 \ub300\ud55c \uc124\uba85 \uc5c6\uc774 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4. \uadf8\ub4e4\uc740 \uad11\ubc94\uc704\ud558\uace0 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294\ub370 \uc774\ub294 \uc18c\uc720\uad8c\uc5d0 \ub300\ud55c \ud45c\ud604\uacfc void* \ub97c \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0 \uc77c\ubc18\uc801\uc778 \uba54\ubaa8\ub9ac\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub85c \uc0ac\uc6a9\ub41c\ub2e4. \uc774\ub4e4\uc5d0 \ub300\ud55c \uc0ac\uc6a9\ubc95\uc744 \uad6c\ubd84\ud558\ub294 \uac83\uc774 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 \uc774\ub7ec\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub974\ub294 \uac83\uc774 \uc5b4\ub835\ub2e4. \uc774\uac83\uc774 C \uc640 C++ \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uac00\uc7a5 \uc8fc\uc694\ud55c \ubc84\uadf8\uc758 \uc6d0\uc778\uc911\uc5d0 \ud558\ub098\uc774\ubbc0\ub85c \uac00\ub2a5\ud55c\ud55c \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub974\ub294 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4. Enforcement char* \uc5d0 \ub300\ud55c [] \uc0ac\uc6a9\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. char* \uc5d0 \ub300\ud574 delete \ub97c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c. char* \uc5d0 \ub300\ud574 free() \ub97c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c. SL.str.4: \ud558\ub098\uc758 \ub2e8\uc77c \ubb38\uc790\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \uc758\ub3c4\ud560 \ub54c char* \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ud604\uc7ac \ucf54\ub4dc\uc5d0\uc11c \ub2e4\uc591\ud55c \ubc29\ubc95\uc758 char* \uc758 \uc0ac\uc6a9\uc740 \uc8fc\uc694\ud55c \uc5d0\ub7ec\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4. Example, bad char arr [] = { 'a' , 'b' , 'c' }; void print ( const char * p ) { cout << p << '\\n' ; } void use () { print ( arr ); // \ub7f0\ud0c0\uc784 \uc5d0\ub7ec; \uc7a0\uc7ac\uc801\uc73c\ub85c \ub9e4\uc6b0 \uc548\uc88b\uc744 \uc218 \uc788\ub2e4. } arr \ubc30\uc5f4\uc740 0 \uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc73c\ubbc0\ub85c C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc774 \uc544\ub2c8\ub2e4. Alternative zstring , string , string_span \uc744 \ud568\uaed8 \ubcf4\ub77c. Enforcement char* \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c [] \uc758 \uc0ac\uc6a9\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. SL.str.5: \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud560 \ud544\uc694\uc5c6\uc774 \ubc14\uc774\ud2b8 \uac12\uc744 \ucc38\uc870\ud558\ub824\uba74 std::byte \ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ub2e8\uc77c \ubb38\uc790\uc77c \ud544\uc694\uac00 \uc5c6\ub294 \uac83\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub85c char* \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud63c\ub780\uc744 \uc720\ubc1c\ud558\uac70\ub098 \uc77c\ubd80 \ucd5c\uc801\ud654\ub97c \ubd88\uac00\ub2a5\ud558\uac8c \ub9cc\ub4e0\ub2e4. Example ??? Note C++17 Enforcement ??? SL.str.10: \uc9c0\uc5ed \uc5b8\uc5b4\uc5d0 \ubbfc\uac10\ud55c \ubb38\uc790\uc5f4\uc5d0 \ub300\ud55c \ucc98\ub9ac\uac00 \ud544\uc694\ud560 \ub54c\uc5d0\ub294 std::string \uc744 \uc0ac\uc6a9\ud558\ub77c. Reason std::string \uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 locale facilities \uc744 \uc9c0\uc6d0\ud55c\ub2e4. Example ??? Note ??? Enforcement ??? SL.str.11: \ubb38\uc790\uc5f4\uc744 \uc218\uc815\ud560 \ud544\uc694\uac00 \uc788\uc744\ub54c\ub294 std::string_view \ubcf4\ub2e4\ub294 gsl::string_span \uc744 \uc0ac\uc6a9\ud558\ub77c Reason std::string_view \ub294 \uc77d\uae30 \uc804\uc6a9\uc774\ub2e4. Example ??? Note ??? Enforcement \ucef4\ud30c\uc77c\ub7ec\ub294 string_view \uc5d0 \ub300\ud55c \uc4f0\uae30 \uc2dc\ub3c4\uac00 \uc788\uc73c\uba74 \uc54c\ub9b4 \uac83\uc774\ub2e4. SL.str.12: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac std::string \uc744 \uc758\ub3c4\ud560 \ub54c\ub294 s \uc811\ubbf8\uc0ac\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc6d0\ub798 \uc758\ub3c4\uc5d0 \ub300\ud55c \uc9c1\uc811\uc801\uc778 \ud45c\ud604\uc774 \uc2e4\uc218\ub97c \uc904\uc77c \uc218 \uc788\ub2e4. Example auto pp1 = make_pair ( \"Tokyo\" , 9.00 ); // {C-style string,double} intended? pair < string , double > pp2 = { \"Tokyo\" , 9.00 }; // a bit verbose auto pp3 = make_pair ( \"Tokyo\" s , 9.00 ); // {std::string,double} // C++14 pair pp4 = { \"Tokyo\" s , 9.00 }; // {std::string,double} // C++17 Enforcement ??? SL.io: Iostream iostream \uc740 \uc2a4\ud2b8\ub9ac\ubc0d \uc785\ucd9c\ub825\uc744 \uc704\ud55c \ud0c0\uc785\uc5d0 \uc548\uc804\ud558\uace0, \ud655\uc7a5 \uac00\ub2a5\ud558\uba70, \ud3ec\ub9f7\ud654\ub418\uac70\ub098 \ub418\uc9c0 \uc54a\uc740 \uc785\ucd9c\ub825 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. \uc774\uac83\uc740 \ub2e4\uc591\ud55c(\uc0ac\uc6a9\uc790 \ud655\uc7a5 \uac00\ub2a5\ud55c) \ubc84\ud37c\ub9c1 \uc804\ub7b5\uacfc \ub2e4\uc591\ud55c \uc9c0\uc5ed \uc5b8\uc5b4\ub97c \uc9c0\uc6d0\ud55c\ub2e4. \uc774\uac83\uc740 \uc77c\ubc18\uc801\uc778 \uc785\ucd9c\ub825\uc744 \ud560 \uc218 \uc788\uc73c\uba70, (string stream \uacfc \uac19\uc774) \uba54\ubaa8\ub9ac\uc5d0 \uc77d\uae30\uc640 \uc4f0\uae30\ub97c \ud558\uac70\ub098, (\uc544\uc9c1 \ud45c\uc900\uc774 \ub418\uc9c0 \uc54a\uc740 asio\uc640 \uac19\uc774) \ub124\ud2b8\uc6cc\ud06c\ub85c \uc2a4\ud2b8\ub9ac\ubc0d\uc744 \ud558\ub294 \uac83\uacfc \uac19\uc740 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud655\uc7a5 \ubaa8\ub4c8\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Iostream \uaddc\uce59 \uc694\uc57d: SL.io.1: \ub2e8\uc77c \ubb38\uc790 \ub2e8\uc704\uc758 \uc785\ub825\uc740 \uaf2d \ud544\uc694\ud560\ub54c\uc5d0\ub9cc \uc0ac\uc6a9\ud558\ub77c SL.io.2: \ud56d\uc0c1 \uc77d\uc744\ub54c\uc5d0\ub294 \ud615\uc2dd\ud654\ub418\uc9c0 \uc54a\uc740 \uc785\ub825\uc744 \uace0\ub824\ud558\ub77c SL.io.3: \uc785\ucd9c\ub825\uc744 \uc704\ud574\uc11c\ub294 iostream \uc744 \uc120\ud638\ud558\ub77c SL.io.10: printf \uacc4\uc5f4\uc758 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 ios_base::sync_with_stdio(false) \ub97c \ud638\ucd9c\ud558\ub77c SL.io.50: endl \uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c ??? SL.io.1: \ub2e8\uc77c \ubb38\uc790 \ub2e8\uc704\uc758 \uc785\ub825\uc740 \uaf2d \ud544\uc694\ud560\ub54c\uc5d0\ub9cc \uc0ac\uc6a9\ud558\ub77c Reason \uc758\ub3c4\uc801\uc73c\ub85c \uac01\uac01\uc758 \uac1c\ubcc4 \ubb38\uc790\ub97c \ub2e4\ub8e8\ub824\uace0 \ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub77c\uba74 \ub2e8\uc77c \ubb38\uc790 \ub2e8\uc704 \uc785\ub825\uc5d0 \ub300\ud55c \uc0ac\uc6a9\uc740 \uc7a0\uc7ac\uc801\uc73c\ub85c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\uace0, \ubb38\uc790\uc5f4\uc744 \ube44\ud6a8\uc728\uc801\uc778 \ud1a0\ud070\uc758 \uc870\ud569\uc73c\ub85c \ub9cc\ub4e4\ubfd0\uc774\ub2e4. Example char c ; char buf [ 128 ]; int i = 0 ; while ( cin . get ( c ) && ! isspace ( c ) && i < 128 ) buf [ i ++ ] = c ; if ( i == 128 ) { // ... handle too long string .... } \uc704\uc758 \ucf54\ub4dc\ubcf4\ub2e4\ub294 \uc544\ub798\uc758 \ucf54\ub4dc\uac00 \ud6e8\uc52c \uac04\ub2e8\ud558\uace0 \uc544\ub9c8\ub3c4 \ub354 \ube60\ub97c \uac83\uc774\ub2e4. string s ; s . reserve ( 128 ); cin >> s ; \uc5ec\uae30\uc11c reserve(128) \ub294 \uaf2d \ud544\uc694\ud55c \uac83\uc774 \uc544\ub2d0 \uc218\ub3c4 \uc788\ub2e4. Enforcement ??? SL.io.2: \ud56d\uc0c1 \uc77d\uc744\ub54c\uc5d0\ub294 \ud615\uc2dd\ud654\ub418\uc9c0 \uc54a\uc740 \uc785\ub825\uc744 \uace0\ub824\ud558\ub77c Reason \uc77c\ubc18\uc801\uc73c\ub85c \uc5d0\ub7ec\ub294 \uac00\ub2a5\ud55c\ud55c \uc77c\ucc0d \ucc98\ub9ac\ub418\ub294 \uac83\uc774 \ucd5c\uc0c1\uc774\ub2e4. \ub9cc\uc57d \uc785\ub825\uc774 \uc720\ud6a8\ud558\uc9c0 \uc54a\ub2e4\uba74 (\ud604\uc2e4\uc801\uc774\uc9c0 \uc54a\uac8c\ub3c4) \ubaa8\ub4e0 \ud568\uc218\ub294 \uc798\ubabb\ub41c \ub370\uc774\ud130\uc5d0 \ub300\uc751\ud560 \uc218 \uc788\ub3c4\ub85d \uc791\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4. Example ??? Enforcement ??? SL.io.3: \uc785\ucd9c\ub825\uc744 \uc704\ud574\uc11c\ub294 iostream \uc744 \uc120\ud638\ud558\ub77c Reason iostream \uc740 \uc548\uc804\ud558\uace0 \uc720\uc5f0\ud558\uba70 \ud655\uc7a5 \uac00\ub2a5\ud558\ub2e4. Example // write a complex number: complex < double > z { 3 , 4 }; cout << z << '\\n' ; complex \ub294 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc774\uc9c0\ub9cc iostream \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud55c \uc218\uc815 \uc5c6\uc774\ub3c4 \uc774\uc5d0 \ub300\ud55c \uc785\ucd9c\ub825\uc774 \uad6c\ud604\ub41c\ub2e4. Example // read a file of complex numbers: for ( complex < double > z ; cin >> z ; ) v . push_back ( z ); Exception ??? performance ??? iostream \uacfc printf() \uacc4\uc5f4\uc5d0 \ub300\ud55c \ube44\uad50 \ub17c\uc758 \uc77c\ubc18\uc801\uc73c\ub85c (\uadf8\ub9ac\uace0 \uc815\ud655\ud558\uac8c\ub3c4) printf() \uacc4\uc5f4\uc740 iostream \uc5d0 \ube44\ud574 \uc720\uc5f0\ud55c \ud3ec\ub9f7\ud305\uacfc \uc131\ub2a5\uc774\ub77c\ub294 \ub450\uac00\uc9c0 \uc7a5\uc810\uc774 \uc788\ub2e4. \uc774\ub4e4\uc740 iostream \uc758 \ub2e4\uc74c\uc758 \uc7a5\uc810\ub4e4\uacfc \ud568\uaed8 \ube44\uad50\ud574 \ubcf4\uc544\uc57c \ud55c\ub2e4. * \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc5d0 \ub300\ud55c \ud655\uc7a5\uc131 * \ubcf4\uc548 \ubb38\uc81c \ubc1c\uc0dd\uc2dc \ubcf5\uad6c \uac00\ub2a5\ud55c \ud68c\ubcf5\ub825 * \uc554\ubb35\uc801\uc778 \uba54\ubaa8\ub9ac \uad00\ub9ac * locale \uc9c0\uc5ed \uc5b8\uc5b4 \ucc98\ub9ac \ub9cc\uc57d I/O \uc131\ub2a5\uc774 \ud544\uc694\ud558\ub2e4\uba74 \uac70\uc758 \ud56d\uc0c1 printf() \ubcf4\ub2e4\ub294 \ub354 \uc798\ud560\uc218 \uc788\ub2e4. %s \ub97c \uc0ac\uc6a9\ud558\ub294 gets() , scanf() \uc640 %s \ub97c \uc0ac\uc6a9\ud558\ub294 printf() \ub294 (\ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0\ub098 \uc77c\ubc18\uc801\uc778 \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \ucde8\uc57d\ud55c) \ubcf4\uc548 \uc704\ud5d8\uc774\ub2e4. C11 \uc5d0\uc11c\ub294 \ub354 \uc548\uc804\ud55c \ub300\uc548\uc73c\ub85c gets_s() , scanf_s() , \uadf8\ub9ac\uace0 printf_s() \ub85c \uc774\ub4e4\uc744 \ub300\uccb4\ud588\uc9c0\ub9cc \uc544\uc9c1\ub3c4 \ud0c0\uc785\uc5d0 \uc548\uc804\ud558\uc9c0 \ubabb\ud558\ub2e4. Enforcement <cstdio> \uacfc <stdio.h> \uc5d0 \ub300\ud55c \uc0ac\uc6a9\uc744 \uc120\ud0dd\uc801\uc73c\ub85c \uc9c0\uc801\ud558\ub77c. SL.io.10: printf \uacc4\uc5f4\uc758 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 ios_base::sync_with_stdio(false) \ub97c \ud638\ucd9c\ud558\ub77c Reason iostream \uacfc printf \uc2a4\ud0c0\uc77c\uc758 I/O \ub3d9\uae30\ud654\ub294 \ubd80\ub2f4\uc774 \ub9ce\uc774 \ub4e0\ub2e4. cin \uacfc cout \uc740 \uae30\ubcf8\uc801\uc73c\ub85c printf \uc640 \ub3d9\uae30\ud654 \ub41c\ub2e4. Example int main () { ios_base :: sync_with_stdio ( false ); // ... use iostreams ... } Enforcement ??? SL.io.50: endl \uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c Reason endl \uc870\uc815\uc790\ub294 \ub300\uccb4\ub85c '\\n' \uc774\ub098 \"\\n\" \uc640 \ub3d9\uc77c\ud558\ub2e4. \uc774\uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294\ub370 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \uc911\ubcf5\ub418\ub294 flush() \uba85\ub839\uc744 \uc218\ud589\ud558\ub290\ub77c \ucd9c\ub825\uc744 \ub290\ub9ac\uac8c \ub9cc\ub4e0\ub2e4. \uc774\ub7ec\ud55c \uc131\ub2a5 \uc800\ud558\ub294 printf \uc2a4\ud0c0\uc77c\uc758 \ucd9c\ub825 \uc131\ub2a5\uacfc \ub69c\ub837\ud558\uac8c \ube44\uad50\ub41c\ub2e4. Example cout << \"Hello, World!\" << endl ; // \ub450\ubc88\uc758 \ucd9c\ub825 \uba85\ub839\uacfc \ud55c\ubc88\uc758 flush cout << \"Hello, World! \\n \" ; // flush \uc5c6\ub294 \ub2e8 \ud55c\ubc88\uc758 \ucd9c\ub825 \uba85\ub839 Note cin / cout \uc744 \uc0ac\uc6a9\ud55c \uc0c1\ud638 \uc791\uc6a9\uc5d0\ub294 \ubc84\ud37c\ub97c \ube44\uc6b0\ub294 flush \ub97c \ud560 \uc774\uc720\uac00 \uc5c6\uace0, \uc774\ub294 \uc5b4\ucc28\ud53c \uc790\ub3d9\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \ud30c\uc77c\uc5d0 \uc4f0\uae30\ub97c \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 flush \ub97c \ud560 \ud544\uc694\uac00 \uac70\uc758 \uc5c6\ub2e4. Note (\ub54c\ub54c\ub85c \uc911\uc694\ud558\uc9c0\ub9cc) \uc131\ub2a5 \uc774\uc288\ub97c \ub17c\uc678\ub85c \ud558\uba74, '\\n' \ub098 endl \uc5d0 \ub300\ud55c \uc120\ud0dd\uc740 \uac70\uc758 \uc644\uc804\ud558\uac8c \ubbf8\ud559\uc801\uc77c \ubfd0\uc774\ub2e4. SL.regex: Regex <regex> \ub294 \ud45c\uc900 C++ \uc815\uaddc \ud45c\ud604\uc2dd \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. \uc774\uac83\uc740 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc758 \uc815\uaddc \ud45c\ud604\uc2dd \ud328\ud134 \uaddc\uc57d\uc744 \uc9c0\uc6d0\ud55c\ub2e4. SL.chrono: Time ( std::chrono \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub294) <chrono> \ub294 time_point \uc640 duration \uc5d0 \ub300\ud55c \uac1c\ub150\uc744 \uc2dc\uac04\uc5d0 \ub300\ud55c \ub2e4\uc591\ud55c \ub2e8\uc704\uc758 \ucd9c\ub825 \ud568\uc218\uc640 \ud568\uaed8 \uc81c\uacf5\ud55c\ub2e4. \ub610\ud55c, \uc774\uac83\uc740 time_points \ub4f1\ub85d\uc744 \uc704\ud55c \ub2e4\uc591\ud55c clock \ub4e4\ub3c4 \uc81c\uacf5\ud55c\ub2e4. SL.C: C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac ??? C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uaddc\uce59 \uc694\uc57d: S.C.1: setjmp/longjmp\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c ??? ??? SL.C.1: setjmp/longjmp\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c Reason longjmp \ub294 \uc18c\uba78\uc790\ub97c \ubb34\uc2dc\ud558\uac8c \ud558\ub294\ub370 \uc774\ub294 RAII \uc5d0 \uc758\uc874\uc801\uc778 \ubaa8\ub4e0 \uc790\uc6d0 \uad00\ub9ac \uc804\ub7b5\uc744 \ubb34\ud6a8\ud654\uc2dc\ud0a8\ub2e4. Enforcement longjmp \uc640 setjmp \uc774 \uc788\ub2e4\uba74 \uc804\ubd80 \uc9c0\uc801\ud558\ub77c.","title":"Standard Library"},{"location":"SL/#sl-the-standard-library","text":"\uc5b8\uc5b4 \uc790\uccb4\uc758 \uae30\ub2a5\ub9cc\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 (\uc5b4\ub5a4 \uc5b8\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub354\ub77c\ub3c4) \ubaa8\ub4e0 \uc791\uc5c5\uc774 \ubc88\uac70\ub86d\uc9c0\ub9cc \uc801\uc808\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc5b4\ub5a0\ud55c \uc791\uc5c5\uc774\ub4e0 \uc0c1\ub2f9\ud788 \uac04\ub2e8\ud574\uc9c8 \uc218 \uc788\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ub9e4\ub144 \uafb8\uc900\ud788 \ud5a5\uc0c1\ub418\uace0 \uc788\uc73c\uba70 \uc774\uc81c\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uc124\uba85\uc774 \uc5b8\uc5b4 \uc790\uccb4\uc758 \uc124\uba85\ubcf4\ub2e4 \ub354 \ub9ce\uc544\uc84c\ub2e4. \uadf8\ub798\uc11c \uc774 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc139\uc158 \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ub2e4\ub978 \ubaa8\ub4e0 \uc139\uc158\uc758 \uc591\uacfc \ube44\uc2b7\ud558\uac70\ub098 \uacb0\uad6d \ub354 \ucee4\uc9c8 \uac83\uc774\ub2e4. << ??? We need another level of rule numbering ??? >> C++ \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uad6c\uc131 \uc694\uc18c \uc694\uc57d: SL.con: Containers SL.str: String SL.io: Iostream SL.regex: Regex SL.chrono: Time SL.C: C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uaddc\uce59 \uc694\uc57d: SL.1: \uac00\ub2a5\ud55c \uacf3 \uc5b4\ub514\uc5d0\uc11c\ub4e0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c SL.2: \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ubcf4\ub2e4\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc6b0\uc120\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub77c SL.3: \ube44\ud45c\uc900 \uac1c\uccb4\ub97c \ub124\uc784\uc2a4\ud398\uc774\uc2a4 std \uc5d0 \ucd94\uac00\ud558\uc9c0 \ub9d0\ub77c SL.4: \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uc9c0\ud0a4\uba74\uc11c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c ???","title":"SL: The Standard Library"},{"location":"SL/#sl1","text":"","title":"SL.1: \uac00\ub2a5\ud55c \uacf3 \uc5b4\ub514\uc5d0\uc11c\ub4e0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason","text":"\ucc98\uc74c\ubd80\ud130 \ub2e4\uc2dc \ub9cc\ub4e4\uc9c0 \ub9d0\uace0 \uc2dc\uac04\uc744 \uc808\uc57d\ud558\ub77c. \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc774\ubbf8 \uc644\ub8cc\ud55c \uc77c\uc744 \uc911\ubcf5\ud574\uc11c \ud558\uc9c0 \ub9d0\ub77c. \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc774 \ud5a5\ud6c4 \uac1c\uc120\uc744 \ud558\uac8c \ub418\uba74 \uadf8 \ud61c\ud0dd\uc744 \ub204\ub9b4 \uc218 \uc788\ub2e4. \ub610\ud55c \ub0b4\uac00 \uc9c1\uc811 \uac1c\uc120\ud568\uc73c\ub85c\uc368 \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc744 \ub3c4\uc6b8 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#sl2","text":"","title":"SL.2: \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ubcf4\ub2e4\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc6b0\uc120\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_1","text":"\ub9ce\uc740 \uc0ac\ub78c\ub4e4\uc774 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc54c\uace0 \uc788\uc73c\ubbc0\ub85c \uc2a4\uc2a4\ub85c \uc791\uc131\ud55c \ucf54\ub4dc\ub098 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac \ubcf4\ub2e4 \ub354 \uc548\uc815\uc801\uc774\uace0, \ub354 \uc798 \uad00\ub9ac\ub418\uace0, \ub354 \uad11\ubc94\uc704\ud55c \uacf3\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#sl3-std","text":"","title":"SL.3: \ube44\ud45c\uc900 \uac1c\uccb4\ub97c \ub124\uc784\uc2a4\ud398\uc774\uc2a4 std\uc5d0 \ucd94\uac00\ud558\uc9c0 \ub9d0\ub77c"},{"location":"SL/#reason_2","text":"std \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ubb34\uc5b8\uac00\ub97c \ucd94\uac00\ud558\ub294 \uc791\uc5c5\uc740 \ub2e4\ub978 \ud45c\uc900\uc744 \ub530\ub974\ub294 \ucf54\ub4dc\uc758 \uc758\ubbf8\ub97c \ubcc0\uacbd\ud560 \uc218\ub3c4 \uc788\uc73c\uba70 std \uc5d0 \ubb34\uc5b8\uac00\ub97c \ucd94\uac00\ud558\uba74 \ud45c\uc900\uc758 \ud5a5\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc758\ub3c4\ud558\uc9c0 \uc54a\uc740 \ucda9\ub3cc\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#example","text":"???","title":"Example"},{"location":"SL/#enforcement","text":"\uac00\ub2a5\ud558\uc9c0\ub9cc std \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc774 \uc9c0\uc800\ubd84\ud574\uc9c8 \uc218\ub3c4 \uc788\uace0 \uc77c\ubd80 \ud50c\ub7ab\ud3fc\uc5d0\uc11c \ubb38\uc81c\uc758 \uc6d0\uc778\uc774 \ub420 \uc218\ub3c4 \uc788\ub2e4.","title":"Enforcement"},{"location":"SL/#sl4","text":"","title":"SL.4: \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uc9c0\ud0a4\uba74\uc11c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_3","text":"\uba85\ubc31\ud558\uac8c\ub3c4 \uc774 \uaddc\uce59\uc744 \uc9c0\ud0a4\uc9c0 \uc54a\uc73c\uba74 \ubbf8\uc815\uc758 \ub3d9\uc791, \uba54\ubaa8\ub9ac \uc624\ub958, \uadf8\ub9ac\uace0 \ub2e4\ub978 \ubaa8\ub4e0 \uc885\ub958\uc758 \ub098\uc05c \uc5d0\ub7ec\ub4e4\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#note","text":"\uc774\uac83\uc740 \uc774\ub97c \uc9c0\uc9c0\ud558\ub294 \uad6c\uccb4\uc801\uc778 \uaddc\uce59\uc5d0 \ub300\ud55c \ub9ce\uc740 \uc9c0\uc6d0\uc774 \ud544\uc694\ud55c \uc5b4\ub290\uc815\ub3c4 \ucca0\ud559\uc801\uc778 \uba54\ud0c0 \uaddc\uce59\uc774\ub2e4. \uc6b0\ub9ac\ub294 \ub354 \uad6c\uccb4\uc801\uc778 \uaddc\uce59\uc5d0 \ub300\ud55c \ubcf4\ud638\uc758 \uc6a9\ub3c4\ub85c \uc774\uac83\uc774 \ud544\uc694\ud558\ub2e4. \ub354 \uad6c\uccb4\uc801\uc778 \uaddc\uce59\uc5d0 \ub300\ud55c \uc694\uc57d: SL.4: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \ud0c0\uc785 \uc548\uc804\uc131\uc744 \uc9c0\ud0a4\uba70 \uc0ac\uc6a9\ud558\ub77c","title":"Note"},{"location":"SL/#slcon-containers","text":"??? \ucee8\ud14c\uc774\ub108 \uaddc\uce59\uc5d0 \ub300\ud55c \uc694\uc57d: SL.con.1: C \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4 STL\uc758 array \ub098 vector \ub97c \uc0ac\uc6a9\ud558\ub77c SL.con.2: \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud560 \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub2e4\uba74 STL vector \ub97c \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\ub77c SL.con.3: \uacbd\uacc4\uc870\uac74\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc5d0\ub7ec\ub97c \ud53c\ud558\ub77c SL.con.4: trivially-copyable\ud558\uc9c0 \uc54a\uc740 \uac1d\uccb4\ub4e4\uc744 memset \uc774\ub098 memcpy \uc758 \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c","title":"SL.con: Containers"},{"location":"SL/#slcon1-c-stl-array-vector","text":"","title":"SL.con.1: C \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud558\uae30\ubcf4\ub2e4 STL\uc758 array\ub098 vector\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_4","text":"C \ubc30\uc5f4\uc740 \ub35c \uc548\uc804\ud558\uace0 array \ub098 vector \uc5d0 \ube44\ud574 \uac00\uc9c0\ub294 \uc7a5\uc810\uc774 \uc5c6\ub2e4. \uace0\uc815\ub41c \uae38\uc774\uc758 \ubc30\uc5f4\uc5d0\ub294 std::array \ub97c \uc0ac\uc6a9\ud558\ub77c. \uc774\ub294 \ud568\uc218\uc5d0 \uc804\ub2ec\ub420\ub54c \ud3ec\uc778\ud130 \uc804\ub2ec\uc5d0 \ube44\ud574 \ub098\uc05c\uac83\uc774 \uc5c6\uc73c\uba70 \uc790\uae30 \uc790\uc2e0\uc758 \ud06c\uae30\ub97c \uc54c \uc218\ub3c4 \uc788\ub2e4. \ub610\ud55c, \uc6d0\ub798\uc758 \ubc30\uc5f4\uacfc \uac19\uc774 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\ub294 std::array \ub294 \uc790\uae30 \uc790\uc2e0\uc758 \uc694\uc18c\ub4e4 \ub610\ud55c \uc2a4\ud0dd\uc5d0 \ubcf4\uad00\ud55c\ub2e4. \uac00\ubcc0\uae38\uc774 \ubc30\uc5f4\uc758 \uacbd\uc6b0, std::vector \ub97c \uc0ac\uc6a9\ud558\ub77c. \uc774\ub294 \uc790\uc2e0\uc758 \ud06c\uae30\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\uc73c\uba70 \uba54\ubaa8\ub9ac \ud560\ub2f9\uc744 \uc790\uccb4\uc801\uc73c\ub85c \uad00\ub9ac\ud574\uc900\ub2e4.","title":"Reason"},{"location":"SL/#example_1","text":"int v [ SIZE ]; // BAD std :: array < int , SIZE > w ; // ok","title":"Example"},{"location":"SL/#example_2","text":"int * v = new int [ initial_size ]; // BAD, owning raw pointer delete [] v ; // BAD, manual delete std :: vector < int > w ( initial_size ); // ok","title":"Example"},{"location":"SL/#note_1","text":"\ucee8\ud14c\uc774\ub108\uc5d0 \ub300\ud55c \ube44\uc18c\uc720 \ucc38\uc870\uc758 \uacbd\uc6b0 gsl::span \uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"SL/#note_2","text":"\uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\ub294 \uace0\uc815\ub41c \uae38\uc774\uc758 \ubc30\uc5f4\uacfc \ud799 \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\ub294 vector \uc758 \uc131\ub2a5 \ube44\uad50\ub294 \uc2e0\ub8b0\ud558\uae30\uac00 \uc5b4\ub835\uc9c0\ub9cc \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\ub294 std::array \uc640 \ud3ec\uc778\ud130\ub85c \uc811\uadfc\ud558\ub294 malloc() \ub41c \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uacfc \ube44\uad50\ud560 \uc218 \uc788\ub2e4. \ub300\ubd80\ubd84\uc758 \ucf54\ub4dc\ub294 \uc2a4\ud0dd\uc5d0 \ud560\ub2f9\ub418\uac70\ub098 \ud799 \uacf5\uac04\uc5d0 \uc800\uc7a5\ub418\ub4e0\uc9c0 \uc0c1\uad00 \uc5c6\uace0, \ub2e8\uc9c0 vector \uc758 \ud3b8\uc758\uc131\uacfc \uc548\uc804\uc131\uc5d0 \uad00\uc2ec\uc774 \uc788\ub2e4. \uadf8 \ucc28\uc774\uac00 \uc0c1\uad00\uc788\ub294 \uacbd\uc6b0\uc5d0\ub294 \uc2e4\uc81c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uc0ac\ub78c\uc774 array \ub098 vector \ub97c \uc801\uc808\ud788 \uc120\ud0dd\ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"SL/#enforcement_1","text":"(STL\uc774 \uc544\ub2cc \uad6c\ud615\uc758 \ucf54\ub4dc\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uacfc\ub3c4\ud558\uace0 \uc2dc\ub044\ub7ec\uc6b4 \uacbd\uace0\ub97c \ud53c\ud558\uae30 \uc704\ud574) STL \ucee8\ud14c\uc774\ub108\ub97c \uc120\uc5b8\ud558\ub294 \ud568\uc218\ub098 \ud074\ub798\uc2a4 \uc548\uc5d0 C \ubc30\uc5f4\uc5d0 \ub300\ud55c \uc120\uc5b8\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. \uc774\ub97c \uc218\uc815\ud558\uae30 \uc704\ud574\uc11c\ub294 \ucd5c\uc18c\ud55c C \ubc30\uc5f4\uc744 std::array \ub85c \ubc14\uafd4\uc11c \uc0ac\uc6a9\ud558\ub77c.","title":"Enforcement"},{"location":"SL/#slcon2-stl-vector","text":"","title":"SL.con.2: \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud560 \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub2e4\uba74 STL vector\ub97c \uae30\ubcf8\uc73c\ub85c \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_5","text":"vector \uc640 array \ub294 \ub2e4\uc74c\uc758 \uc138 \uac00\uc9c0 \uc7a5\uc810\uc744 \uc81c\uacf5\ud558\ub294 \uc720\uc77c\ud55c \ud45c\uc900 \ucee8\ud14c\uc774\ub108\ub4e4\uc774\ub2e4. \uac00\uc7a5 \ube60\ub978 \ubc94\uc6a9 \uc811\uadfc(random access, including being vectorization-friendly) \uac00\uc7a5 \ube60\ub978 \uae30\ubcf8\uc801 \uc811\uadfc \ud328\ud134(begin-to-end or end-to-begin is prefetcher-friendly) \uac00\uc7a5 \uc801\uc740 \uacf5\uac04 \ubd80\ub2f4(contiguous layout has zero per-element overhead, which is cache-friendly) \uc77c\ubc18\uc801\uc778 \uacbd\uc6b0 \ucee8\ud14c\uc774\ub108\ub85c\ubd80\ud130 \uc694\uc18c\ub97c \ucd94\uac00\ud558\uace0 \uc81c\uac70\ud560 \ud544\uc694\uac00 \uc788\ub294 \uacbd\uc6b0 \uae30\ubcf8\uc801\uc73c\ub85c vector \ub97c \uc0ac\uc6a9\ud558\uace0, \ub9cc\uc57d \ucee8\ud14c\uc774\ub108\uc758 \ud06c\uae30\ub97c \ubcc0\uacbd\ud560 \uc77c\uc774 \uc5c6\ub2e4\uba74 array \ub97c \uc0ac\uc6a9\ud558\ub77c. \ub9cc\uc57d \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\uac00 \ub354 \uc801\uc808\ud574 \ubcf4\uc778\ub2e4\uba74, \uc608\ub97c \ub4e4\uc5b4 O(log N) \uac80\uc0c9 \uc131\ub2a5\uc744 \uc704\ud574 map \uc744 \uc0ac\uc6a9\ud558\uac70\ub098, \uc694\uc18c\ub4e4 \uc911\uac04\uc5d0 \ud6a8\uc728\uc801\uc73c\ub85c \uc0bd\uc785\uc744 \ud558\uace0 \uc2f6\uc740 \uacbd\uc6b0\ub294 list \ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\ub807\uc9c0 \uc54a\ub2e4\uba74 \uba87 KB \uc758 \ud06c\uae30\uae4c\uc9c0\ub294 \ubcf4\ud1b5\uc758 \uacbd\uc6b0\uc5d0 vector \uac00 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc77c \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#note_3","text":"string \uc740 \uac01\uac01\uc758 \uac1c\ubcc4 \ubb38\uc790\ub4e4\uc744 \uc704\ud55c \ucee8\ud14c\uc774\ub108\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\uc57c \ud55c\ub2e4. string \uc740 \ud14d\uc2a4\ud2b8\ub85c \uad6c\uc131\ub41c \ubb38\uc790\uc5f4\uc774\uace0, \ub9cc\uc57d \uac1c\ubcc4 \ubb38\uc790\uc758 \ucee8\ud14c\uc774\ub108\uac00 \ud544\uc694\ud558\uba74 vector</*char_type*/> \ub610\ub294 array</*char_type*/> \ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub77c.","title":"Note"},{"location":"SL/#exceptions","text":"\ub9cc\uc57d \ub2e4\ub978 \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud560 \uc88b\uc740 \uc774\uc720\uac00 \uc788\ub2e4\uba74 \uc0ac\uc6a9\ud558\ub77c. \uc608\ub97c \ub4e4\uba74: \ub9cc\uc57d vector \uac00 \ub2f9\uc2e0\uc758 \uc694\uad6c\uc0ac\ud56d\uc5d0 \uc801\ud569\ud558\uace0, \ucee8\ud14c\uc774\ub108\uc758 \ud06c\uae30\uac00 \uac00\ubcc0\uc801\uc774\uc9c0 \uc54a\ub2e4\uba74 \uadf8\ub0e5 array \ub97c \uc0ac\uc6a9\ud558\ub77c. \ub9cc\uc57d O(K) \ub610\ub294 O(log N) \uac80\uc0c9\uc2dc\uac04\uc774 \ubcf4\uc7a5\ub418\uc5b4\uc57c \ud558\uba74\uc11c \ucee8\ud14c\uc774\ub108\uac00 \uba87 KB \ubcf4\ub2e4 \ub354 \ucee4\uc9c8 \uc218 \uc788\uace0, \ube48\ubc88\ud55c \uc0bd\uc785\uc774 \uc77c\uc5b4\ub098 \uc815\ub82c\ub41c vector \ub97c \uc720\uc9c0\ud558\uae30 \uc5b4\ub835\ub2e4\uba74 unordered_map \uc774\ub098 map \uc744 \ub300\uc2e0 \uc0ac\uc6a9\ud558\ub77c.","title":"Exceptions"},{"location":"SL/#note_4","text":"vector \ub97c \uc694\uc18c\uc758 \ud06c\uae30\ub9cc\ud07c \ucd08\uae30\ud654\ud558\ub824\uba74, () \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c. vector \ub97c \uc694\uc18c\uc758 \ub9ac\uc2a4\ud2b8 \ub0b4\uc6a9\uc73c\ub85c \ucd08\uae30\ud654\ud558\ub824\uba74, {} \ucd08\uae30\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c. vector < int > v1 ( 20 ); // v1 \uc740 \uac12\uc774 0\uc778 20\uac1c\uc758 \uc694\uc18c\ub4e4\uc744 \uac16\ub294\ub2e4. (vector<int>{}) vector < int > v2 { 20 }; // v2 \ub294 \uac12\uc774 20\uc778 \ud55c\uac1c\uc758 \uc694\uc18c\ub97c \uac16\ub294\ub2e4. {} \ucd08\uae30\ud654 \ubb38\ubc95\uc744 \uc120\ud638\ud558\ub77c. .","title":"Note"},{"location":"SL/#enforcement_2","text":"vector \uc0dd\uc131 \uc774\ud6c4\uc5d0 \ud06c\uae30\uac00 \uc804\ud600 \ubcc0\uacbd\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0(\uc608\ub97c \ub4e4\uba74 \ucee8\ud14c\uc774\ub108 \ubcc0\uc218\uac00 const \uc774\uac70\ub098 const \uac00 \uc544\ub2cc \ud568\uc218\uac00 \ud558\ub098\ub3c4 \ud638\ucd9c\ub418\uc9c0 \uc54a\ub294 \uacbd\uc6b0)\ub97c \uc9c0\uc801\ud560 \uc218 \uc788\ub2e4. \uc774\ub97c \uc218\uc815\ud558\ub824\uba74 array \ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Enforcement"},{"location":"SL/#slcon3","text":"","title":"SL.con.3: \uacbd\uacc4\uc870\uac74\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc5d0\ub7ec\ub97c \ud53c\ud558\ub77c"},{"location":"SL/#reason_6","text":"\ud560\ub2f9\ub41c \uc694\uc18c\ub4e4\uc758 \ubc94\uc704\ub97c \ub118\uc5b4\uc11c \uc77d\uac70\ub098 \uc4f0\ub294 \uacbd\uc6b0\uc5d0 \ub098\uc05c \uc5d0\ub7ec\ub098 \uc798\ubabb\ub41c \uacb0\uacfc \ubc0f \uc0ac\uace0 \ub610\ub294 \ubcf4\uc548 \uce68\ud574\ub97c \uc77c\uc73c\ud0ac \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#note_5","text":"\uc694\uc18c \ubc94\uc704\uc5d0 \ub300\ud55c \uc0ac\uc6a9\uc774 \uac00\ub2a5\ud55c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\ub4e4\uc740 (\ub300\ubd80\ubd84) \ubaa8\ub450 \uacbd\uacc4\uc870\uac74\uc774 \uc548\uc804\ud55c\uc9c0 \uac80\uc0ac\uc5d0 \ud544\uc694\ud55c \uc5f0\uc0b0\uc744 \ucd94\uac00\ud558\ub294 \ubd80\ub2f4\uc774 \uc788\ub2e4. vector \uc640 \uac19\uc740 \ud45c\uc900 \ud0c0\uc785\ub4e4\uc740 \uacbd\uacc4\uc870\uac74 \uac80\uc0ac\ub97c \uc218\ud589\ud558\ub3c4\ub85d bounds profile \uc5d0 \uae30\ubc18\ud558\uc5ec ( contracts \ub97c \ucd94\uac00\ud558\ub294 \ub4f1\uc758 \ud638\ud658 \uac00\ub2a5\ud55c \ubc29\uc2dd\uc73c\ub85c) \uc218\uc815\ub418\uac70\ub098 at() \uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uc774\uc0c1\uc801\uc73c\ub85c\ub294 \uba54\ubaa8\ub9ac \uc811\uadfc\uc774 \uacbd\uacc4\uc548\uc5d0 \uc788\uc74c\uc774 \uc815\uc801\uc73c\ub85c \ubcf4\uc7a5\ub418\uc5b4\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uba74: range- for \ubb38\uc740 \ub300\uc0c1 \ucee8\ud14c\uc774\ub108\uac00 \uc811\uadfc \uac00\ub2a5\ud55c \ubc94\uc704\ub97c \uc808\ub300 \ub118\uc5b4\uc11c \ubc18\ubcf5\ubb38\uc744 \uc218\ud589\ud558\uc9c0 \uc54a\ub294\ub2e4. v.begin(),v.end() \ub294 \uacbd\uacc4\uc870\uac74\uc774 \uc548\uc804\ud558\ub2e4\ub294 \uac83\uc744 \uc27d\uac8c \uc54c \uc218 \uc788\ub2e4. \uadf8\ub7ec\ud55c \ubc18\ubcf5\ubb38\ub4e4\uc740 \uacbd\uacc4\uc870\uac74 \uac80\uc0ac\uac00 \uc5c6\uace0, \uc548\uc804\ud558\uc9c0 \uc54a\uc740 \uc694\uc18c \uc811\uadfc\uc5d0 \ud544\uc694\ud55c \uc131\ub2a5\uacfc \ub3d9\uc77c\ud558\ub2e4. \uc885\uc885 \uac04\ub2e8\ud55c \uac80\uc0ac\ub97c \ubbf8\ub9ac \ud568\uc73c\ub85c\uc11c \uc778\ub371\uc2a4\ub97c \uc811\uadfc\ud560 \ub54c\ub9c8\ub2e4 \ub9e4\ubc88 \uac80\uc0ac\ud560 \ud544\uc694\ub97c \uc5c6\uc568 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74 v.begin(),v.begin()+i \ub97c \uc704\ud574\uc11c\ub294 \uac04\ub2e8\ud788 i \uac00 v.size \ub97c \ub118\ub294\uc9c0 \uac80\uc0ac\ud574 \ubcfc \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \ubc18\ubcf5\ubb38\uc740 \ub9e4\ubc88 \uc694\uc18c\uc5d0 \uc811\uadfc\ud560 \ub54c\ub9c8\ub2e4 \uacbd\uacc4 \uc870\uac74 \uac80\uc0ac\ub97c \ud558\ub294 \uac83 \ubcf4\ub2e4 \ud6e8\uc52c \ube60\ub97c \uc218 \uc788\ub2e4.","title":"Note"},{"location":"SL/#example-bad","text":"void f () { array < int , 10 > a , b ; memset ( a . data (), 0 , 10 ); // BAD, \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \ub118\uc5b4\uc11c\ub294 \uc5d0\ub7ec (length = 10 * sizeof(int)) memcmp ( a . data (), b . data (), 10 ); // BAD, \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \ub118\uc5b4\uc11c\ub294 \uc5d0\ub7ec (length = 10 * sizeof(int)) } \ub610\ud55c, std::array<>::fill() \uc774\ub098 std::fill() \ub610\ub294 \ube44\uc5b4\uc788\ub294 \ucd08\uae30\ud654\ubb38\uc774 memset() \ubcf4\ub2e4\ub294 \ub098\uc740 \ud6c4\ubcf4\uc774\ub2e4.","title":"Example, bad"},{"location":"SL/#example-good","text":"void f () { array < int , 10 > a , b , c {}; // c is initialized to zero a . fill ( 0 ); fill ( b . begin (), b . end (), 0 ); // std::fill() fill ( b , 0 ); // std::fill() + Ranges TS if ( a == b ) { // ... } }","title":"Example, good"},{"location":"SL/#example_3","text":"\ub9cc\uc57d \uc218\uc815\ub418\uc9c0 \uc54a\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud55c\ub2e4\uba74, std::array \uc640 std::vector \ub97c \uacbd\uacc4 \uc870\uac74\uc5d0 \uc548\uc804\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub300\ub7b5\uc758 \ud574\uacb0 \ubc29\ubc95\uc774 \uc788\ub2e4. \ud574\ub2f9 \ucf54\ub4dc\ub294 std::out_of_range \uc608\uc678\ub97c \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub294 \uac01 class \uc758 .at() \uba64\ubc84 \ud568\uc218\ub97c \ud638\ucd9c \ud560 \uc218 \uc788\ub2e4. \uc544\ub2c8\uba74 \uacbd\uacc4\uc870\uac74 \uc704\ubc18\uc5d0 \ube60\ub974\uac8c \uc2e4\ud328\ud558\uac70\ub098 \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud55c \ub3d9\uc791\uc744 \ud558\ub294 at() \uc774\uc678\uc758 \ud568\uc218\ub97c \ud638\ucd9c \ud560 \uc218\ub3c4 \uc788\ub2e4. void f ( std :: vector < int >& v , std :: array < int , 12 > a , int i ) { v [ 0 ] = a [ 0 ]; // BAD v . at ( 0 ) = a [ 0 ]; // OK (alternative 1) at ( v , 0 ) = a [ 0 ]; // OK (alternative 2) v . at ( 0 ) = a [ i ]; // BAD v . at ( 0 ) = a . at ( i ); // OK (alternative 1) v . at ( 0 ) = at ( a , i ); // OK (alternative 2) }","title":"Example"},{"location":"SL/#enforcement_3","text":"\uacbd\uacc4\uc870\uac74 \uac80\uc0ac\uac00 \uc5c6\ub294 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud568\uc218\uc5d0 \ub300\ud55c \ud638\ucd9c\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c. ??? insert link to a list of banned functions \uc774\ub7ec\ud55c \uaddc\uce59\uc740 bounds profile \uc758 \uc77c\ubd80\ubd84\uc774\ub2e4.","title":"Enforcement"},{"location":"SL/#slcon4-trivially-copyable-memset-memcpy","text":"","title":"SL.con.4: trivially-copyable\ud558\uc9c0 \uc54a\uc740 \uac1d\uccb4\ub4e4\uc744 memset\uc774\ub098 memcpy\uc758 \uc778\uc790\ub85c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c."},{"location":"SL/#reason_7","text":"\uadf8\ub807\uac8c \ud558\uba74 \uac00\uc0c1 \ud568\uc218 \ud14c\uc774\ube14\uc744 \uc800\uc7a5\ud558\ub294 vptr \uc815\ubcf4\ub97c \ub36e\uc5b4\uc4f0\uac8c \ub418\uc5b4\uc11c \uac1d\uccb4\uc758 \uc758\ubbf8\ub97c \ub9dd\uce60 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#note_6","text":"(w)memset, (w)memcpy, (w)memmove, (w)memcmp\ub3c4 \uc720\uc0ac\ud55c \ubb38\uc81c\uac00 \uc788\ub2e4.","title":"Note"},{"location":"SL/#example_4","text":"struct base { virtual void update () = 0 ; }; struct derived : public base { void update () override {} }; void f ( derived & a , derived & b ) // goodbye v-tables { memset ( & a , 0 , sizeof ( derived )); memcpy ( & a , & b , sizeof ( derived )); memcmp ( & a , & b , sizeof ( derived )); } \ub300\uc2e0 \uc801\uc808\ud55c \ub514\ud3f4\ud2b8 \ucd08\uae30\ud654, \ubcf5\uc0ac, \ube44\uad50 \ud568\uc218\ub97c \uc815\uc758\ud558\ub77c. void g ( derived & a , derived & b ) { a = {}; // default initialize b = a ; // copy if ( a == b ) do_something ( a , b ); }","title":"Example"},{"location":"SL/#enforcement_4","text":"trivially copyable\ud558\uc9c0 \uc54a\uc740 \ud0c0\uc785\uc5d0 \uc704\uc5d0\uc11c \uc5b8\uae09\ud588\ub358 \ud568\uc218\ub4e4((w)memset, (w)memcpy, (w)memmove, (w)memcmp)\uc744 \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c. \uc5ed\uc8fc: trivially copyable \uc758 \uc790\uc138\ud55c \uc815\ubcf4\ub294 \ub9c1\ud06c\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc73c\uba70 \ud574\ub2f9 \ud0c0\uc785\uc774 trivially copyable\ud55c \ud0c0\uc785\uc778\uc9c0 \uc5ec\ubd80\ub294 std::is_trivially_copyable \ub85c \uac80\uc0ac\ud560 \uc218 \uc788\ub2e4.","title":"Enforcement"},{"location":"SL/#slstr-string","text":"\ud14d\uc2a4\ud2b8 \uc870\uc791\uc740 \uac70\ub300\ud55c \uc8fc\uc81c\uc774\uace0, std::string \uc740 \uc774\ub4e4 \uc804\ubd80\ub97c \ub2e4\ub8e8\uc9c0 \ubabb\ud55c\ub2e4. \uc774 \uc139\uc158\uc5d0\uc11c\ub294 \uc8fc\ub85c char* , zstring , string_view , \uadf8\ub9ac\uace0 gsl::string_span \uacfc std::string \uc758 \uad00\uacc4\uc5d0 \ub300\ud574 \uba85\ud655\ud558\uac8c \ud558\uace0\uc790 \ud55c\ub2e4. wchar_t , \uc720\ub2c8\ucf54\ub4dc, \uadf8\ub9ac\uace0 UTF-8 \uc744 \ud3ec\ud568\ud558\ub294 ASCII\uac00 \uc544\ub2cc \ubb38\uc790\uc14b\uacfc \uc778\ucf54\ub529\uacfc \uac19\uc740 \uc911\uc694\ud55c \uc774\uc288\ub294 \ub2e4\ub978\uacf3\uc5d0\uc11c \ub2e4\ub8e8\uace0\uc790 \ud55c\ub2e4. See also : regular expressions String \uc694\uc57d: SL.str.1: \ubb38\uc790\uc5f4\uc744 \uc81c\ub300\ub85c \uc18c\uc720\ud558\uae30 \uc704\ud574\uc11c\ub294 std::string \uc744 \uc0ac\uc6a9\ud558\ub77c SL.str.2: \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 std::string_view \ub098 gsl::string_span \uc744 \uc0ac\uc6a9\ud558\ub77c SL.str.3: 0\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc778 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud558\ub824\uba74 zstring \ub098 czstring \uc744 \uc0ac\uc6a9\ud558\ub77c. SL.str.4: \ud558\ub098\uc758 \ub2e8\uc77c \ubb38\uc790\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \uc758\ub3c4\ud560 \ub54c char* \ub97c \uc0ac\uc6a9\ud558\ub77c SL.str.5: \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud560 \ud544\uc694\uc5c6\uc774 \ubc14\uc774\ud2b8 \uac12\uc744 \ucc38\uc870\ud558\ub824\uba74 std::byte \ub97c \uc0ac\uc6a9\ud558\ub77c SL.str.10: \uc9c0\uc5ed \uc5b8\uc5b4\uc5d0 \ubbfc\uac10\ud55c \ubb38\uc790\uc5f4\uc5d0 \ub300\ud55c \ucc98\ub9ac\uac00 \ud544\uc694\ud560 \ub54c\uc5d0\ub294 std::string \uc744 \uc0ac\uc6a9\ud558\ub77c. SL.str.11: \ubb38\uc790\uc5f4\uc744 \uc218\uc815\ud560 \ud544\uc694\uac00 \uc788\uc744\ub54c\ub294 std::string_view \ubcf4\ub2e4\ub294 gsl::string_span \uc744 \uc0ac\uc6a9\ud558\ub77c SL.str.12: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac std::string \uc744 \uc758\ub3c4\ud560 \ub54c\ub294 s \uc811\ubbf8\uc0ac\ub97c \uc0ac\uc6a9\ud558\ub77c See also : F.24 span F.25 zstring","title":"SL.str: String"},{"location":"SL/#slstr1-stdstring","text":"","title":"SL.str.1: \ubb38\uc790\uc5f4\uc744 \uc81c\ub300\ub85c \uc18c\uc720\ud558\uae30 \uc704\ud574\uc11c\ub294 std::string\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_8","text":"string \uc740 \uc62c\ubc14\ub978 \ubc29\uc2dd\uc73c\ub85c \uba54\ubaa8\ub9ac \ud560\ub2f9 \ubc0f \uc18c\uc720, \ubcf5\uc0ac, \uc810\uc9c4\uc801\uc778 \ud655\uc7a5\uc744 \uc9c0\uc6d0\ud558\uba70, \uadf8\ub9ac\uace0 \ub2e4\uc591\ud558\uace0 \uc720\uc6a9\ud55c \uae30\ub2a5\ub4e4\uc744 \uc81c\uacf5\ud55c\ub2e4.","title":"Reason"},{"location":"SL/#example_5","text":"vector < string > read_until ( const string & terminator ) { vector < string > res ; for ( string s ; cin >> s && s != terminator ; ) // \ud55c \ub2e8\uc5b4 \uc77d\uae30 res . push_back ( s ); return res ; } string \uc5d0\uc11c\ub294 (\uc720\uc6a9\ud55c \uae30\ub2a5\ub4e4\uc758 \uc608\ub85c) >> \uc640 != \uc5f0\uc0b0\uc790\ub4e4\uc744 \uc81c\uacf5\ud558\uace0, \uc5ec\uae30\uc5d0\ub294 \uc5b4\ub5a0\ud55c \uba85\uc2dc\uc801\uc778 \uba54\ubaa8\ub9ac \ud560\ub2f9, \ud574\uc81c \ub610\ub294 \uacbd\uacc4\uc870\uac74 \uac80\uc0ac \uc5c6\uc774 string \uc774 \ub0b4\ubd80\uc801\uc73c\ub85c \uc774\ub4e4\uc744 \ud574\uacb0\ud55c\ub2e4. C++17 \uc5d0\uc11c\ub294 \ud568\uc218 \ud638\ucd9c\uc790\uc5d0\uac8c \ub354 \uc720\uc5f0\ud568\uc744 \uc81c\uacf5\ud558\uae30 \uc704\ud574 const string* \ub300\uc2e0\uc5d0 string_view \ub97c \ud568\uc218 \uc778\uc790\ub85c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. vector < string > read_until ( string_view terminator ) // C++17 { vector < string > res ; for ( string s ; cin >> s && s != terminator ; ) // \ud55c \ub2e8\uc5b4 \uc77d\uae30 res . push_back ( s ); return res ; } gsl::string_span \uc740 std::string_view \uc758 \ub300\ubd80\ubd84\uc758 \uc7a5\uc810\uc744 \ub300\uccb4\ud560 \uc218 \uc788\ub294 \ud604\uc7ac \uac00\ub2a5\ud55c \uc635\uc158\uc77c \uc218 \uc788\ub2e4. \uac04\ub2e8\ud55c \uc608\ub97c \ub4e4\uba74: vector < string > read_until ( string_span terminator ) { vector < string > res ; for ( string s ; cin >> s && s != terminator ; ) // \ud55c \ub2e8\uc5b4 \uc77d\uae30 res . push_back ( s ); return res ; }","title":"Example"},{"location":"SL/#example-bad_1","text":"trivial \ud558\uc9c0 \uc54a\uc740 \uba54\ubaa8\ub9ac \uad00\ub9ac\uac00 \ud544\uc694\ud55c \ub3d9\uc791\uc5d0 \ub300\ud574\uc11c\ub294 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c. char * cat ( const char * s1 , const char * s2 ) // beware! // return s1 + '.' + s2 { int l1 = strlen ( s1 ); int l2 = strlen ( s2 ); char * p = ( char * ) malloc ( l1 + l2 + 2 ); strcpy ( p , s1 , l1 ); p [ l1 ] = '.' ; strcpy ( p + l1 + 1 , s2 , l2 ); p [ l1 + l2 + 1 ] = 0 ; return p ; } \uc774 \ucf54\ub4dc\uac00 \uc62c\ubc14\ub974\uac8c \ubb38\uc81c\ub97c \ud574\uacb0\ud588\uc744\uae4c? \ud568\uc218 \ud638\ucd9c\uc790\uac00 \ubc18\ud658\ub41c \ud3ec\uc778\ud130\ub97c free() \ud574\uc57c \ud55c\ub2e4\uace0 \uae30\uc5b5\ud574\uc57c \ud560\uae4c? \uc774 \ucf54\ub4dc\uac00 \ubcf4\uc548\uc5d0 \uad00\ud55c \ub9ac\ubdf0\ub97c \ud1b5\uacfc\ud560 \uc218 \uc788\uc744\uae4c?","title":"Example, bad"},{"location":"SL/#note_7","text":"\uc9c1\uc811\uc801\uc778 \uc131\ub2a5 \uce21\uc815 \uc5c6\uc774 string \uc774 \uc800\uc218\uc900\uc758 \uae30\ubc95\ubcf4\ub2e4 \ub290\ub9ac\ub2e4\uace0 \ub2e8\uc815\ud558\uc9c0\ub3c4 \ub9d0\uace0, \ubaa8\ub4e0 \ucf54\ub4dc\uac00 \uc131\ub2a5\uc5d0 \ubbfc\uac10\ud558\ub2e4\uace0 \uc0dd\uac01\ud558\uc9c0 \ub9d0\ub77c. \ub108\ubb34 \uc774\ub978 \ucd5c\uc801\ud654\ub97c \ud558\uc9c0 \ub9d0\ub77c","title":"Note"},{"location":"SL/#enforcement_5","text":"???","title":"Enforcement"},{"location":"SL/#slstr2-stdstring_view-gslstring_span","text":"","title":"SL.str.2: \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc744 \ucc38\uc870\ud558\uae30 \uc704\ud574\uc11c\ub294 std::string_view\ub098 gsl::string_span\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_9","text":"std::string_view \ub098 gsl::string_span \uc740 \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc5d0 \ub300\ud574 \uac04\ub2e8\ud558\uace0 (\uc7a0\uc7ac\uc801\uc73c\ub85c) \uc548\uc804\ud55c \uc811\uadfc\uc744 \uc81c\uacf5\ud558\uba70 \uc774\ub294 \uc774 \ubb38\uc790\ub4e4\uc774 \uc5b4\ub5bb\uac8c \uba54\ubaa8\ub9ac \uacf5\uac04\uc5d0 \ud560\ub2f9\ub418\uace0 \uc800\uc7a5\ub418\uc5c8\ub294\uc9c0\uc640 \ubb34\uad00\ud558\ub2e4.","title":"Reason"},{"location":"SL/#example_6","text":"vector < string > read_until ( string_span terminator ); void user ( zstring p , const string & s , string_span ss ) { auto v1 = read_until ( p ); auto v2 = read_until ( s ); auto v3 = read_until ( ss ); // ... }","title":"Example"},{"location":"SL/#note_8","text":"C++17 \uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 std::string_view \ub294 \uc77d\uae30 \uc804\uc6a9\uc774\ub2e4.","title":"Note"},{"location":"SL/#enforcement_6","text":"???","title":"Enforcement"},{"location":"SL/#slstr3-0-c-zstring-czstring","text":"","title":"SL.str.3: 0\uc73c\ub85c \ub05d\ub098\ub294 \ubb38\uc790\ub4e4\uc758 \ub098\uc5f4\uc778 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud558\ub824\uba74 zstring\ub098 czstring\uc744 \uc0ac\uc6a9\ud558\ub77c."},{"location":"SL/#reason_10","text":"\uc774\ub4e4\uc744 \uc0ac\uc6a9\ud558\uba74 \uac00\ub3c5\uc131\uacfc \uc758\ub3c4\uc5d0 \ub300\ud55c \ud45c\ud604\uc744 \uba85\ud655\ud788 \ud560 \uc218 \uc788\ub2e4. \ub2e8\uc21c char* \ub294 \ud558\ub098\uc758 \ubb38\uc790\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc774\uac70\ub098 \ubb38\uc790\ub4e4\uc758 \ubc30\uc5f4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130, null \ub85c \ub05d\ub098\ub294 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4 \ub610\ub294 \uc791\uc740 \uc815\uc218\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub85c \ub2e4\uc591\ud558\uac8c \ud45c\ud604\ub420 \uc218 \uc788\ub2e4. \uc774\ub7ec\ud55c \ub2e4\uc591\ud55c \ubc29\uc2dd\uc758 \ud45c\ud604\ub4e4\uc744 \uc798 \uad6c\ubd84\ud568\uc73c\ub85c\uc11c \ubd88\ud544\uc694\ud55c \uc624\ud574\ub098 \ubc84\uadf8\ub97c \ubc29\uc9c0 \ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#example_7","text":"void f1 ( const char * s ); // s \ub294 \uc544\ub9c8\ub3c4 \ubb38\uc790\uc5f4\uc77c \uac83\uc774\ub2e4. \uc6b0\ub9ac\uac00 \uc54c \uc218 \uc788\ub294 \uac83\uc740 \uc774\uac83\uc774 nullptr \uc774\uac70\ub098 \ucd5c\uc18c\ud55c \ud558\ub098\uc758 \ubb38\uc790\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub77c\ub294 \uac83\uc774\ub2e4. void f1 ( zstring s ); // s \ub294 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc774\uac70\ub098 nullptr \uc774\ub2e4. void f1 ( czstring s ); // s \ub294 C \uc2a4\ud0c0\uc77c\uc758 \uc0c1\uc218 \ubb38\uc790\uc5f4\uc774\uac70\ub098 nullptr \uc774\ub2e4. void f1 ( std :: byte * s ); // s \ub294 \ud558\ub098\uc758 \ubc14\uc774\ud2b8\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\uc774\ub2e4. (C++17)","title":"Example"},{"location":"SL/#note_9","text":"\ud2b9\ubcc4\ud55c \uc774\uc720\uac00 \uc788\uc9c0 \uc54a\ub2e4\uba74 C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc744 string \uc73c\ub85c \ub2e8\uc21c\ud558\uac8c \ubcc0\ud658\ud558\uc9c0 \ub9d0\ub77c.","title":"Note"},{"location":"SL/#note_10","text":"\ub2e4\ub978 \uc77c\ubc18\uc801\uc778 \ud3ec\uc778\ud130\uc640 \uac19\uc774 zstring \uc740 \uc18c\uc720\uad8c\uc744 \ud45c\ud604\ud558\uba74 \uc548\ub41c\ub2e4.","title":"Note"},{"location":"SL/#note_11","text":"\uc218\ub9ce\uc740 C++ \ucf54\ub4dc\uac00 \uc774\ubbf8 char* \uc640 const char* \ub97c \uc0ac\uc6a9 \uc758\ub3c4\uc5d0 \ub300\ud55c \uc124\uba85 \uc5c6\uc774 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4. \uadf8\ub4e4\uc740 \uad11\ubc94\uc704\ud558\uace0 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294\ub370 \uc774\ub294 \uc18c\uc720\uad8c\uc5d0 \ub300\ud55c \ud45c\ud604\uacfc void* \ub97c \uc0ac\uc6a9\ud558\ub294 \ub300\uc2e0 \uc77c\ubc18\uc801\uc778 \uba54\ubaa8\ub9ac\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub85c \uc0ac\uc6a9\ub41c\ub2e4. \uc774\ub4e4\uc5d0 \ub300\ud55c \uc0ac\uc6a9\ubc95\uc744 \uad6c\ubd84\ud558\ub294 \uac83\uc774 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 \uc774\ub7ec\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub974\ub294 \uac83\uc774 \uc5b4\ub835\ub2e4. \uc774\uac83\uc774 C \uc640 C++ \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uac00\uc7a5 \uc8fc\uc694\ud55c \ubc84\uadf8\uc758 \uc6d0\uc778\uc911\uc5d0 \ud558\ub098\uc774\ubbc0\ub85c \uac00\ub2a5\ud55c\ud55c \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub974\ub294 \uac83\uc744 \uad8c\uc7a5\ud55c\ub2e4.","title":"Note"},{"location":"SL/#enforcement_7","text":"char* \uc5d0 \ub300\ud55c [] \uc0ac\uc6a9\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c. char* \uc5d0 \ub300\ud574 delete \ub97c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c. char* \uc5d0 \ub300\ud574 free() \ub97c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"SL/#slstr4-char","text":"","title":"SL.str.4: \ud558\ub098\uc758 \ub2e8\uc77c \ubb38\uc790\uc5d0 \ub300\ud55c \ucc38\uc870\ub97c \uc758\ub3c4\ud560 \ub54c char*\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_11","text":"\ud604\uc7ac \ucf54\ub4dc\uc5d0\uc11c \ub2e4\uc591\ud55c \ubc29\ubc95\uc758 char* \uc758 \uc0ac\uc6a9\uc740 \uc8fc\uc694\ud55c \uc5d0\ub7ec\uc758 \uc6d0\uc778\uc774 \ub41c\ub2e4.","title":"Reason"},{"location":"SL/#example-bad_2","text":"char arr [] = { 'a' , 'b' , 'c' }; void print ( const char * p ) { cout << p << '\\n' ; } void use () { print ( arr ); // \ub7f0\ud0c0\uc784 \uc5d0\ub7ec; \uc7a0\uc7ac\uc801\uc73c\ub85c \ub9e4\uc6b0 \uc548\uc88b\uc744 \uc218 \uc788\ub2e4. } arr \ubc30\uc5f4\uc740 0 \uc73c\ub85c \ub05d\ub098\uc9c0 \uc54a\uc73c\ubbc0\ub85c C \uc2a4\ud0c0\uc77c\uc758 \ubb38\uc790\uc5f4\uc774 \uc544\ub2c8\ub2e4.","title":"Example, bad"},{"location":"SL/#alternative","text":"zstring , string , string_span \uc744 \ud568\uaed8 \ubcf4\ub77c.","title":"Alternative"},{"location":"SL/#enforcement_8","text":"char* \ud0c0\uc785\uc5d0 \ub300\ud574\uc11c [] \uc758 \uc0ac\uc6a9\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"SL/#slstr5-stdbyte","text":"","title":"SL.str.5: \ubb38\uc790\uc5f4\uc744 \ud45c\ud604\ud560 \ud544\uc694\uc5c6\uc774 \ubc14\uc774\ud2b8 \uac12\uc744 \ucc38\uc870\ud558\ub824\uba74 std::byte\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_12","text":"\ub2e8\uc77c \ubb38\uc790\uc77c \ud544\uc694\uac00 \uc5c6\ub294 \uac83\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub85c char* \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud63c\ub780\uc744 \uc720\ubc1c\ud558\uac70\ub098 \uc77c\ubd80 \ucd5c\uc801\ud654\ub97c \ubd88\uac00\ub2a5\ud558\uac8c \ub9cc\ub4e0\ub2e4.","title":"Reason"},{"location":"SL/#example_8","text":"???","title":"Example"},{"location":"SL/#note_12","text":"C++17","title":"Note"},{"location":"SL/#enforcement_9","text":"???","title":"Enforcement"},{"location":"SL/#slstr10-stdstring","text":"","title":"SL.str.10: \uc9c0\uc5ed \uc5b8\uc5b4\uc5d0 \ubbfc\uac10\ud55c \ubb38\uc790\uc5f4\uc5d0 \ub300\ud55c \ucc98\ub9ac\uac00 \ud544\uc694\ud560 \ub54c\uc5d0\ub294 std::string\uc744 \uc0ac\uc6a9\ud558\ub77c."},{"location":"SL/#reason_13","text":"std::string \uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 locale facilities \uc744 \uc9c0\uc6d0\ud55c\ub2e4.","title":"Reason"},{"location":"SL/#example_9","text":"???","title":"Example"},{"location":"SL/#note_13","text":"???","title":"Note"},{"location":"SL/#enforcement_10","text":"???","title":"Enforcement"},{"location":"SL/#slstr11-stdstring_view-gslstring_span","text":"","title":"SL.str.11: \ubb38\uc790\uc5f4\uc744 \uc218\uc815\ud560 \ud544\uc694\uac00 \uc788\uc744\ub54c\ub294 std::string_view\ubcf4\ub2e4\ub294 gsl::string_span\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_14","text":"std::string_view \ub294 \uc77d\uae30 \uc804\uc6a9\uc774\ub2e4.","title":"Reason"},{"location":"SL/#example_10","text":"???","title":"Example"},{"location":"SL/#note_14","text":"???","title":"Note"},{"location":"SL/#enforcement_11","text":"\ucef4\ud30c\uc77c\ub7ec\ub294 string_view \uc5d0 \ub300\ud55c \uc4f0\uae30 \uc2dc\ub3c4\uac00 \uc788\uc73c\uba74 \uc54c\ub9b4 \uac83\uc774\ub2e4.","title":"Enforcement"},{"location":"SL/#slstr12-stdstring-s","text":"","title":"SL.str.12: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac std::string\uc744 \uc758\ub3c4\ud560 \ub54c\ub294 s \uc811\ubbf8\uc0ac\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_15","text":"\uc6d0\ub798 \uc758\ub3c4\uc5d0 \ub300\ud55c \uc9c1\uc811\uc801\uc778 \ud45c\ud604\uc774 \uc2e4\uc218\ub97c \uc904\uc77c \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"SL/#example_11","text":"auto pp1 = make_pair ( \"Tokyo\" , 9.00 ); // {C-style string,double} intended? pair < string , double > pp2 = { \"Tokyo\" , 9.00 }; // a bit verbose auto pp3 = make_pair ( \"Tokyo\" s , 9.00 ); // {std::string,double} // C++14 pair pp4 = { \"Tokyo\" s , 9.00 }; // {std::string,double} // C++17","title":"Example"},{"location":"SL/#enforcement_12","text":"???","title":"Enforcement"},{"location":"SL/#slio-iostream","text":"iostream \uc740 \uc2a4\ud2b8\ub9ac\ubc0d \uc785\ucd9c\ub825\uc744 \uc704\ud55c \ud0c0\uc785\uc5d0 \uc548\uc804\ud558\uace0, \ud655\uc7a5 \uac00\ub2a5\ud558\uba70, \ud3ec\ub9f7\ud654\ub418\uac70\ub098 \ub418\uc9c0 \uc54a\uc740 \uc785\ucd9c\ub825 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. \uc774\uac83\uc740 \ub2e4\uc591\ud55c(\uc0ac\uc6a9\uc790 \ud655\uc7a5 \uac00\ub2a5\ud55c) \ubc84\ud37c\ub9c1 \uc804\ub7b5\uacfc \ub2e4\uc591\ud55c \uc9c0\uc5ed \uc5b8\uc5b4\ub97c \uc9c0\uc6d0\ud55c\ub2e4. \uc774\uac83\uc740 \uc77c\ubc18\uc801\uc778 \uc785\ucd9c\ub825\uc744 \ud560 \uc218 \uc788\uc73c\uba70, (string stream \uacfc \uac19\uc774) \uba54\ubaa8\ub9ac\uc5d0 \uc77d\uae30\uc640 \uc4f0\uae30\ub97c \ud558\uac70\ub098, (\uc544\uc9c1 \ud45c\uc900\uc774 \ub418\uc9c0 \uc54a\uc740 asio\uc640 \uac19\uc774) \ub124\ud2b8\uc6cc\ud06c\ub85c \uc2a4\ud2b8\ub9ac\ubc0d\uc744 \ud558\ub294 \uac83\uacfc \uac19\uc740 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud655\uc7a5 \ubaa8\ub4c8\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Iostream \uaddc\uce59 \uc694\uc57d: SL.io.1: \ub2e8\uc77c \ubb38\uc790 \ub2e8\uc704\uc758 \uc785\ub825\uc740 \uaf2d \ud544\uc694\ud560\ub54c\uc5d0\ub9cc \uc0ac\uc6a9\ud558\ub77c SL.io.2: \ud56d\uc0c1 \uc77d\uc744\ub54c\uc5d0\ub294 \ud615\uc2dd\ud654\ub418\uc9c0 \uc54a\uc740 \uc785\ub825\uc744 \uace0\ub824\ud558\ub77c SL.io.3: \uc785\ucd9c\ub825\uc744 \uc704\ud574\uc11c\ub294 iostream \uc744 \uc120\ud638\ud558\ub77c SL.io.10: printf \uacc4\uc5f4\uc758 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 ios_base::sync_with_stdio(false) \ub97c \ud638\ucd9c\ud558\ub77c SL.io.50: endl \uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c ???","title":"SL.io: Iostream"},{"location":"SL/#slio1","text":"","title":"SL.io.1: \ub2e8\uc77c \ubb38\uc790 \ub2e8\uc704\uc758 \uc785\ub825\uc740 \uaf2d \ud544\uc694\ud560\ub54c\uc5d0\ub9cc \uc0ac\uc6a9\ud558\ub77c"},{"location":"SL/#reason_16","text":"\uc758\ub3c4\uc801\uc73c\ub85c \uac01\uac01\uc758 \uac1c\ubcc4 \ubb38\uc790\ub97c \ub2e4\ub8e8\ub824\uace0 \ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\ub77c\uba74 \ub2e8\uc77c \ubb38\uc790 \ub2e8\uc704 \uc785\ub825\uc5d0 \ub300\ud55c \uc0ac\uc6a9\uc740 \uc7a0\uc7ac\uc801\uc73c\ub85c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\uae30 \uc27d\uace0, \ubb38\uc790\uc5f4\uc744 \ube44\ud6a8\uc728\uc801\uc778 \ud1a0\ud070\uc758 \uc870\ud569\uc73c\ub85c \ub9cc\ub4e4\ubfd0\uc774\ub2e4.","title":"Reason"},{"location":"SL/#example_12","text":"char c ; char buf [ 128 ]; int i = 0 ; while ( cin . get ( c ) && ! isspace ( c ) && i < 128 ) buf [ i ++ ] = c ; if ( i == 128 ) { // ... handle too long string .... } \uc704\uc758 \ucf54\ub4dc\ubcf4\ub2e4\ub294 \uc544\ub798\uc758 \ucf54\ub4dc\uac00 \ud6e8\uc52c \uac04\ub2e8\ud558\uace0 \uc544\ub9c8\ub3c4 \ub354 \ube60\ub97c \uac83\uc774\ub2e4. string s ; s . reserve ( 128 ); cin >> s ; \uc5ec\uae30\uc11c reserve(128) \ub294 \uaf2d \ud544\uc694\ud55c \uac83\uc774 \uc544\ub2d0 \uc218\ub3c4 \uc788\ub2e4.","title":"Example"},{"location":"SL/#enforcement_13","text":"???","title":"Enforcement"},{"location":"SL/#slio2","text":"","title":"SL.io.2: \ud56d\uc0c1 \uc77d\uc744\ub54c\uc5d0\ub294 \ud615\uc2dd\ud654\ub418\uc9c0 \uc54a\uc740 \uc785\ub825\uc744 \uace0\ub824\ud558\ub77c"},{"location":"SL/#reason_17","text":"\uc77c\ubc18\uc801\uc73c\ub85c \uc5d0\ub7ec\ub294 \uac00\ub2a5\ud55c\ud55c \uc77c\ucc0d \ucc98\ub9ac\ub418\ub294 \uac83\uc774 \ucd5c\uc0c1\uc774\ub2e4. \ub9cc\uc57d \uc785\ub825\uc774 \uc720\ud6a8\ud558\uc9c0 \uc54a\ub2e4\uba74 (\ud604\uc2e4\uc801\uc774\uc9c0 \uc54a\uac8c\ub3c4) \ubaa8\ub4e0 \ud568\uc218\ub294 \uc798\ubabb\ub41c \ub370\uc774\ud130\uc5d0 \ub300\uc751\ud560 \uc218 \uc788\ub3c4\ub85d \uc791\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"SL/#example_13","text":"???","title":"Example"},{"location":"SL/#enforcement_14","text":"???","title":"Enforcement"},{"location":"SL/#slio3-iostream","text":"","title":"SL.io.3: \uc785\ucd9c\ub825\uc744 \uc704\ud574\uc11c\ub294 iostream\uc744 \uc120\ud638\ud558\ub77c"},{"location":"SL/#reason_18","text":"iostream \uc740 \uc548\uc804\ud558\uace0 \uc720\uc5f0\ud558\uba70 \ud655\uc7a5 \uac00\ub2a5\ud558\ub2e4.","title":"Reason"},{"location":"SL/#example_14","text":"// write a complex number: complex < double > z { 3 , 4 }; cout << z << '\\n' ; complex \ub294 \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc774\uc9c0\ub9cc iostream \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \ub300\ud55c \uc218\uc815 \uc5c6\uc774\ub3c4 \uc774\uc5d0 \ub300\ud55c \uc785\ucd9c\ub825\uc774 \uad6c\ud604\ub41c\ub2e4.","title":"Example"},{"location":"SL/#example_15","text":"// read a file of complex numbers: for ( complex < double > z ; cin >> z ; ) v . push_back ( z );","title":"Example"},{"location":"SL/#exception","text":"??? performance ???","title":"Exception"},{"location":"SL/#iostream-printf","text":"\uc77c\ubc18\uc801\uc73c\ub85c (\uadf8\ub9ac\uace0 \uc815\ud655\ud558\uac8c\ub3c4) printf() \uacc4\uc5f4\uc740 iostream \uc5d0 \ube44\ud574 \uc720\uc5f0\ud55c \ud3ec\ub9f7\ud305\uacfc \uc131\ub2a5\uc774\ub77c\ub294 \ub450\uac00\uc9c0 \uc7a5\uc810\uc774 \uc788\ub2e4. \uc774\ub4e4\uc740 iostream \uc758 \ub2e4\uc74c\uc758 \uc7a5\uc810\ub4e4\uacfc \ud568\uaed8 \ube44\uad50\ud574 \ubcf4\uc544\uc57c \ud55c\ub2e4. * \uc0ac\uc6a9\uc790 \uc815\uc758 \ud0c0\uc785\uc5d0 \ub300\ud55c \ud655\uc7a5\uc131 * \ubcf4\uc548 \ubb38\uc81c \ubc1c\uc0dd\uc2dc \ubcf5\uad6c \uac00\ub2a5\ud55c \ud68c\ubcf5\ub825 * \uc554\ubb35\uc801\uc778 \uba54\ubaa8\ub9ac \uad00\ub9ac * locale \uc9c0\uc5ed \uc5b8\uc5b4 \ucc98\ub9ac \ub9cc\uc57d I/O \uc131\ub2a5\uc774 \ud544\uc694\ud558\ub2e4\uba74 \uac70\uc758 \ud56d\uc0c1 printf() \ubcf4\ub2e4\ub294 \ub354 \uc798\ud560\uc218 \uc788\ub2e4. %s \ub97c \uc0ac\uc6a9\ud558\ub294 gets() , scanf() \uc640 %s \ub97c \uc0ac\uc6a9\ud558\ub294 printf() \ub294 (\ubc84\ud37c \uc624\ubc84\ud50c\ub85c\uc6b0\ub098 \uc77c\ubc18\uc801\uc778 \uc5d0\ub7ec\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\uae30 \ucde8\uc57d\ud55c) \ubcf4\uc548 \uc704\ud5d8\uc774\ub2e4. C11 \uc5d0\uc11c\ub294 \ub354 \uc548\uc804\ud55c \ub300\uc548\uc73c\ub85c gets_s() , scanf_s() , \uadf8\ub9ac\uace0 printf_s() \ub85c \uc774\ub4e4\uc744 \ub300\uccb4\ud588\uc9c0\ub9cc \uc544\uc9c1\ub3c4 \ud0c0\uc785\uc5d0 \uc548\uc804\ud558\uc9c0 \ubabb\ud558\ub2e4.","title":"iostream\uacfc printf() \uacc4\uc5f4\uc5d0 \ub300\ud55c \ube44\uad50 \ub17c\uc758"},{"location":"SL/#enforcement_15","text":"<cstdio> \uacfc <stdio.h> \uc5d0 \ub300\ud55c \uc0ac\uc6a9\uc744 \uc120\ud0dd\uc801\uc73c\ub85c \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"SL/#slio10-printf-ios_basesync_with_stdiofalse","text":"","title":"SL.io.10: printf\uacc4\uc5f4\uc758 \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 ios_base::sync_with_stdio(false)\ub97c \ud638\ucd9c\ud558\ub77c"},{"location":"SL/#reason_19","text":"iostream \uacfc printf \uc2a4\ud0c0\uc77c\uc758 I/O \ub3d9\uae30\ud654\ub294 \ubd80\ub2f4\uc774 \ub9ce\uc774 \ub4e0\ub2e4. cin \uacfc cout \uc740 \uae30\ubcf8\uc801\uc73c\ub85c printf \uc640 \ub3d9\uae30\ud654 \ub41c\ub2e4.","title":"Reason"},{"location":"SL/#example_16","text":"int main () { ios_base :: sync_with_stdio ( false ); // ... use iostreams ... }","title":"Example"},{"location":"SL/#enforcement_16","text":"???","title":"Enforcement"},{"location":"SL/#slio50-endl","text":"","title":"SL.io.50: endl\uc758 \uc0ac\uc6a9\uc744 \ud53c\ud558\ub77c"},{"location":"SL/#reason_20","text":"endl \uc870\uc815\uc790\ub294 \ub300\uccb4\ub85c '\\n' \uc774\ub098 \"\\n\" \uc640 \ub3d9\uc77c\ud558\ub2e4. \uc774\uac83\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294\ub370 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 \uc911\ubcf5\ub418\ub294 flush() \uba85\ub839\uc744 \uc218\ud589\ud558\ub290\ub77c \ucd9c\ub825\uc744 \ub290\ub9ac\uac8c \ub9cc\ub4e0\ub2e4. \uc774\ub7ec\ud55c \uc131\ub2a5 \uc800\ud558\ub294 printf \uc2a4\ud0c0\uc77c\uc758 \ucd9c\ub825 \uc131\ub2a5\uacfc \ub69c\ub837\ud558\uac8c \ube44\uad50\ub41c\ub2e4.","title":"Reason"},{"location":"SL/#example_17","text":"cout << \"Hello, World!\" << endl ; // \ub450\ubc88\uc758 \ucd9c\ub825 \uba85\ub839\uacfc \ud55c\ubc88\uc758 flush cout << \"Hello, World! \\n \" ; // flush \uc5c6\ub294 \ub2e8 \ud55c\ubc88\uc758 \ucd9c\ub825 \uba85\ub839","title":"Example"},{"location":"SL/#note_15","text":"cin / cout \uc744 \uc0ac\uc6a9\ud55c \uc0c1\ud638 \uc791\uc6a9\uc5d0\ub294 \ubc84\ud37c\ub97c \ube44\uc6b0\ub294 flush \ub97c \ud560 \uc774\uc720\uac00 \uc5c6\uace0, \uc774\ub294 \uc5b4\ucc28\ud53c \uc790\ub3d9\uc73c\ub85c \uc774\ub8e8\uc5b4\uc9c4\ub2e4. \ud30c\uc77c\uc5d0 \uc4f0\uae30\ub97c \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 flush \ub97c \ud560 \ud544\uc694\uac00 \uac70\uc758 \uc5c6\ub2e4.","title":"Note"},{"location":"SL/#note_16","text":"(\ub54c\ub54c\ub85c \uc911\uc694\ud558\uc9c0\ub9cc) \uc131\ub2a5 \uc774\uc288\ub97c \ub17c\uc678\ub85c \ud558\uba74, '\\n' \ub098 endl \uc5d0 \ub300\ud55c \uc120\ud0dd\uc740 \uac70\uc758 \uc644\uc804\ud558\uac8c \ubbf8\ud559\uc801\uc77c \ubfd0\uc774\ub2e4.","title":"Note"},{"location":"SL/#slregex-regex","text":"<regex> \ub294 \ud45c\uc900 C++ \uc815\uaddc \ud45c\ud604\uc2dd \ub77c\uc774\ube0c\ub7ec\ub9ac\uc774\ub2e4. \uc774\uac83\uc740 \ub2e4\uc591\ud55c \ubc29\uc2dd\uc758 \uc815\uaddc \ud45c\ud604\uc2dd \ud328\ud134 \uaddc\uc57d\uc744 \uc9c0\uc6d0\ud55c\ub2e4.","title":"SL.regex: Regex"},{"location":"SL/#slchrono-time","text":"( std::chrono \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub294) <chrono> \ub294 time_point \uc640 duration \uc5d0 \ub300\ud55c \uac1c\ub150\uc744 \uc2dc\uac04\uc5d0 \ub300\ud55c \ub2e4\uc591\ud55c \ub2e8\uc704\uc758 \ucd9c\ub825 \ud568\uc218\uc640 \ud568\uaed8 \uc81c\uacf5\ud55c\ub2e4. \ub610\ud55c, \uc774\uac83\uc740 time_points \ub4f1\ub85d\uc744 \uc704\ud55c \ub2e4\uc591\ud55c clock \ub4e4\ub3c4 \uc81c\uacf5\ud55c\ub2e4.","title":"SL.chrono: Time"},{"location":"SL/#slc-c","text":"??? C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uaddc\uce59 \uc694\uc57d: S.C.1: setjmp/longjmp\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c ??? ???","title":"SL.C: C \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac"},{"location":"SL/#slc1-setjmplongjmp","text":"","title":"SL.C.1: setjmp/longjmp\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c"},{"location":"SL/#reason_21","text":"longjmp \ub294 \uc18c\uba78\uc790\ub97c \ubb34\uc2dc\ud558\uac8c \ud558\ub294\ub370 \uc774\ub294 RAII \uc5d0 \uc758\uc874\uc801\uc778 \ubaa8\ub4e0 \uc790\uc6d0 \uad00\ub9ac \uc804\ub7b5\uc744 \ubb34\ud6a8\ud654\uc2dc\ud0a8\ub2e4.","title":"Reason"},{"location":"SL/#enforcement_17","text":"longjmp \uc640 setjmp \uc774 \uc788\ub2e4\uba74 \uc804\ubd80 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Source/","text":"SF: \uc18c\uc2a4 \ud30c\uc77c \uc120\uc5b8(\uc778\ud130\ud398\uc774\uc2a4)\uacfc \uc815\uc758(\uad6c\ud604)\ub97c \uad6c\ubd84\ud558\ub77c. \ud5e4\ub354 \ud30c\uc77c\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud45c\ud604\ud558\uace0 \ub17c\ub9ac\uc801 \uad6c\uc870\ub97c \uac15\uc870\ud558\uae30 \uc704\ud574\uc11c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc18c\uc2a4 \ud30c\uc77c \uaddc\uce59 \uc694\uc57d: SF.1: \ub2e4\ub978 \uad00\ub840\ub97c \ub530\ub974\ub294 \uc911\uc774 \uc544\ub2c8\ub77c\uba74 .cpp \ub294 \ucf54\ub4dc \ud30c\uc77c\uc5d0, .h \ub294 \uc778\ud130\ud398\uc774\uc2a4 \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\ud558\ub77c SF.2: .h \ud30c\uc77c\uc5d0\ub294 \uac1c\uccb4 \ubcc0\uc218(object definition) \ud639\uc740 inline\uc774 \uc544\ub2cc \ud568\uc218\uc758 \uc815\uc758\uac00 \uc788\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4 SF.3: .h \ud30c\uc77c\uc740 \uc5ec\ub7ec \uc18c\uc2a4 \ud30c\uc77c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc120\uc5b8\uc744 \ub2f4\uc544\ub77c SF.4: \ud30c\uc77c\uc5d0\uc11c \ubb34\uc5b8\uac00 \uc120\uc5b8\ud558\uae30 \uc804\uc5d0 .h \ub97c include\ud558\ub77c SF.5: .cpp \ud30c\uc77c\uc740 \ubc18\ub4dc\uc2dc \ud574\ub2f9 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud558\ub294 .h \ub97c include\ud574\uc57c \ud55c\ub2e4 SF.6: using namespace \ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc758 \uc774\ub984 \ubc14\uafb8\uae30, std \ucc98\ub7fc \uae30\ubcf8\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac, \ud639\uc740 \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0\uc11c(\ub9cc) \uc0ac\uc6a9\ud558\ub77c SF.7: \ud5e4\ub354\ud30c\uc77c\uc5d0\uc11c\ub294 \uc804\uccb4 \uc720\ud6a8\ubc94\uc704(global scope)\uc5d0 \uc8fc\ub294 using namespace \ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c SF.8: \ubaa8\ub4e0 .h \ud30c\uc77c\uc5d0\uc11c #include \uac00\ub4dc(guard)\ub97c \uc0ac\uc6a9\ud558\ub77c SF.9: \uc18c\uc2a4 \ud30c\uc77c\ub4e4\uc774 \uc21c\ud658 \uc758\uc874(cyclic dependencies)\ud558\uac8c \ud558\uc9c0\ub9c8\ub77c SF.10: \ubb35\uc2dc\uc801\uc73c\ub85c #include \ub41c \uc774\ub984\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c SF.11: \ud5e4\ub354 \ud30c\uc77c\uc740 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c(self-contained) \ub9cc\ub4e4\uc5b4\ub77c SF.20: namespace \ub294 \ub17c\ub9ac\uc801 \uad6c\uc870\ub97c \ud45c\ud604\ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c SF.21: \ud5e4\ub354\uc5d0\uc11c \uc774\ub984\uc5c6\ub294(anonymous) \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c SF.22: \uc774\ub984\uc5c6\ub294(anonymous) \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub294 \ub0b4\ubd80(internal)/\ub178\ucd9c\uc2dc\ud0a4\uc9c0 \uc54a\ub294(non-exported) \uac1c\uccb4\uc5d0 \uc0ac\uc6a9\ud558\ub77c SF.1: \ub2e4\ub978 \uad00\ub840\ub97c \ub530\ub974\ub294 \uc911\uc774 \uc544\ub2c8\ub77c\uba74 .cpp \ub294 \ucf54\ub4dc \ud30c\uc77c\uc5d0, .h \ub294 \uc778\ud130\ud398\uc774\uc2a4 \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\ud558\ub77c Reason \uc624\ub798\ub41c \uad00\ub840\ub2e4. \ub2e4\ub9cc \uc77c\uad00\uc131\uc774 \ub354 \uc911\uc694\ud558\ub2e4. \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc774\ubbf8 \uc5b4\ub5a4 \ud30c\uc77c \ud655\uc7a5\uc790 \uaddc\uce59\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, \uadf8\ub300\ub85c \ub530\ub77c\uac00\ub77c Note \uc774 \uad00\ub840\ub294 \ucf54\ub4dc \uc0ac\uc6a9\ud328\ud134\uc5d0 \uc601\ud5a5\uc744 \uc900\ub2e4: \ud5e4\ub354\ub294 C \uc5b8\uc5b4\uc640 \ud568\uaed8 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0\uac00 \uc790\uc8fc \uc788\uae30 \ub54c\ubb38\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c .h \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub807\uac8c \uc0ac\uc6a9\ub418\ub294\uac83\uc744 \uc758\ub3c4\ud588\ub2e4\uba74 \ub2e4\ub978 \ud30c\uc77c \ud655\uc7a5\uc790\ub97c \uc4f0\ub294\uac83\ubcf4\ub2e4 \ubaa8\ub450\uac00 .h \ub97c \uc0ac\uc6a9\ud558\ub294\uac83\uc774 \uc27d\ub2e4. \ubc18\uba74\uc5d0, \uad6c\ud604 \ud30c\uc77c\uc774 C \uc5b8\uc5b4\uc640 \ud568\uaed8 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\uae30 \ub54c\ubb38\uc5d0 .c \ud30c\uc77c\ub4e4\uacfc\ub294 \uad6c\ubd84\ub420 \ud544\uc694\uac00 \uc788\ub2e4. \ubaa8\ub4e0 C++ \ud30c\uc77c\ub4e4\uc774 .cpp \ucc98\ub7fc \ub2e4\ub978 \ud655\uc7a5\uc790\ub97c \uc0ac\uc6a9\ud558\ub294\uac8c \ucd5c\uc120\uc758 \ubc29\ubc95\uc774\ub2e4. .h \uc640 .cpp \uac00 \uae30\ubcf8\uc801\uc73c\ub85c \uad8c\uc7a5\ub418\uae30\ub294 \ud558\uc9c0\ub9cc \ud544\uc218\ub294 \uc544\ub2c8\ub2e4. \ub2e4\ub978 \uc774\ub984\ub4e4\ub3c4 \uad11\ubc94\uc704\ud558\uac8c \uc0ac\uc6a9\ub41c\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74 .hh , .C , .cxx \uac19\uc740 \uac83\uc774 \uc788\ub2e4. \uc774\ub7f0 \uc774\ub984\uc744 \uac19\uc774 \uc368\ub3c4 \uc88b\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294, \uc2e4\uc81c\ub85c\ub294 \ub2e4\ub978 \ud655\uc7a5\uc790\ub97c \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, .h \ub97c \ud5e4\ub354\ud30c\uc77c\uc5d0 \ub300\ud55c \uc57d\uce6d(shorthand)\uc73c\ub85c, .cpp \ub97c \uad6c\ud604\ud30c\uc77c\uc5d0 \ub300\ud55c \uc57d\uce6d\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. \ub2f9\uc2e0\uc774 \uc0ac\uc6a9\ud558\uace0\uc788\ub294 IDE\uc5d0\uc11c\ub294 \ud2b9\uc815\ud55c \ud655\uc7a5\uc790\ub9cc \uc9c0\uc6d0\ud560\uc218\ub3c4 \uc788\ub2e4. Example // foo.h: extern int a ; // \uc120\uc5b8 extern void foo (); // foo.cpp: int a ; // \uc815\uc758 void foo () { ++ a ; } foo.h \ub294 foo.cpp \uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc804\uc5ed \ubcc0\uc218\ub294 \ud53c\ud574\uc57c \ud55c\ub2e4. Example, bad // foo.h: int a ; // \ud5e4\ub354 \ud30c\uc77c\uc5d0 \uc815\uc758\uac00 \uc788\ub2e4 void foo () { ++ a ; } #include <foo.h> \ubb38\uad6c\uac00 \ud55c \ud504\ub85c\uadf8\ub7a8 \ub0b4\uc5d0 2\ud68c \uc774\uc0c1 \ud3ec\ud568\ub41c\ub2e4\uba74 \ub2e8\uc77c \uc815\uc758 \uaddc\uce59(one-definition-rule)\uc5d0 \uc704\ubc30\ub41c\ub2e4\uace0 \ub9c1\ucee4\uac00 \uc624\ub958\ub97c \ub0bc \uac83\uc774\ub2e4. Enforcement \uad00\ub840\uc5d0 \ub9de\uc9c0 \uc54a\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4 .h \uc640 .cpp \uac00 (\uadf8\ub9ac\uace0 \ube44\uc2b7\ud55c \ud30c\uc77c\ub4e4\uc774) \uc544\ub798 \uaddc\uce59\uc744 \ub530\ub974\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4 SF.2: .h \ud30c\uc77c\uc5d0\ub294 \uac1c\uccb4 \ubcc0\uc218(object definition) \ud639\uc740 inline\uc774 \uc544\ub2cc \ud568\uc218\uc758 \uc815\uc758\uac00 \uc788\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4 Reason \ud558\ub098\uc758 \uc815\uc758\ub9cc \uac00\uc838\uc57c\ud558\ub294 \ub300\uc0c1\uc744 \ud3ec\ud568 \ud558\uac8c \ub418\uba74 \ub9c1\ud0b9 \uc5d0\ub7ec\ub85c \uc774\uc5b4\uc9c4\ub2e4. Example // file.h: namespace Foo { int x = 7 ; int xx () { return x + x ; } } // file1.cpp: #include <file.h> // ... more ... // file2.cpp: #include <file.h> // ... more ... file1.cpp \uc640 file2.cpp \uac00 \ub9c1\ud0b9\ub420 \ub54c \ub9c1\ucee4 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uac83\uc774\ub2e4. Alternative Formulation : .h \ud30c\uc77c\uc740 \ub2e4\uc74c\uc758 \ud56d\ubaa9\ub9cc\uc744 \uac00\uc9c4\ub2e4 (include guard\uc640 \ud568\uaed8) \ub2e4\ub978 .h \uc758 #include \ud15c\ud50c\ub9bf \ud074\ub798\uc2a4 \uc815\uc758(definition) \ud568\uc218 \uc120\uc5b8(declaration) extern \uc120\uc5b8 inline \ud568\uc218 \uc815\uc758 constexpr \uc815\uc758 const \uc815\uc758 using \ubcc4\uce6d ??? Enforcement \uc704\uc758 \ubaa9\ub85d\uc5d0\uc11c \ud5c8\uc6a9\ub418\ub294 \uac83\ub4e4\uc744 \uac80\ud1a0\ud55c\ub2e4 SF.3: .h \ud30c\uc77c\uc740 \uc5ec\ub7ec \uc18c\uc2a4 \ud30c\uc77c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc120\uc5b8\uc744 \ub2f4\uc544\ub77c Reason \uad00\ub9ac\uac00 \ud3b8\ud574\uc9c0\uace0 \uac00\ub3c5\uc131\uc774 \ud5a5\uc0c1\ub41c\ub2e4. Example, bad // bar.cpp: void bar () { cout << \"bar \\n \" ; } // foo.cpp: extern void bar (); void foo () { bar (); } bar \ub97c \uad00\ub9ac\ud558\ub294 \uc0ac\ub78c\uc774 \uadf8 \ud0c0\uc785\uc744 \ubc14\uafb8\uace0\uc790 \ud558\ub354\ub77c\ub3c4 bar \uc758 \ubaa8\ub4e0 \uc120\uc5b8\uc744 \ucc3e\uc744 \uc218\uac00 \uc5c6\ub2e4. bar \ub97c \uc0ac\uc6a9\ud558\ub294 \uc785\uc7a5\uc5d0\uc11c\ub294 \uc774 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc644\ubcbd\ud55c\uc9c0 \uc54c \uc218\uac00 \uc5c6\ub2e4. \uae30\uaecf\ud574\uc57c (\ub098\uc911\uc5d0) \ub9c1\ucee4\ub85c\ubd80\ud130 \uc624\ub958\uba54\uc2dc\uc9c0\ub97c \ubc1b\ub294 \uac83\uc774 \uace0\uc791\uc774\ub2e4. Enforcement \uac1c\uccb4\uc758 \uc120\uc5b8\uc774 .h \uac00 \uc544\ub2c8\ub77c \ub2e4\ub978 \uc18c\uc2a4\ud30c\uc77c\uc5d0 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c SF.4: \ud30c\uc77c\uc5d0\uc11c \ubb34\uc5b8\uac00 \uc120\uc5b8\ud558\uae30 \uc804\uc5d0 .h \ub97c include\ud558\ub77c Reason \ubb38\ub9e5\uc5d0 \ub300\ud55c \uc885\uc18d\uc131\uc744 \ucd5c\uc18c\ud654\ud558\uace0 \uac00\ub3c5\uc131\uc744 \ub192\uc778\ub2e4. Example #include <vector> #include <algorithm> #include <string> // ... my code here ... Example, bad #include <vector> // ... my code here ... #include <algorithm> #include <string> Note \uc774 \ub0b4\uc6a9\uc740 .h \uc640 .cpp \ud30c\uc77c \ubaa8\ub450\uc5d0 \ud574\ub2f9\ud55c\ub2e4. Note \ud5e4\ub354\ud30c\uc77c\uc5d0\uc11c \ubcf4\ud638\ud558\uace0 \uc2f6\uc740 \ucf54\ub4dc \ub2e4\uc74c\uc5d0 #include \ubaa9\ub85d\uc774 \uc624\ub3c4\ub85d \ud574\uc11c \uc120\uc5b8\uacfc \ub9e4\ud06c\ub85c\ub85c\ubd80\ud130 \ucf54\ub4dc\ub97c \ubd84\ub9ac\ud55c\ub2e4\ub294 \uc0dd\uac01\uc5d0\ub294 \ub17c\uc7c1\uc774 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ubc29\ubc95\uc740 \ud558\ub098\uc758 \ud30c\uc77c\uc5d0(\ud55c \ub2e8\uacc4)\ub9cc \ud1b5\ud55c\ub2e4: Use that technique in a header included with other headers and the vulnerability reappears. a namespace (an \"implementation namespace\") can protect against many context dependencies. \uc644\uc804\ud788 \ubcf4\ud638\ud558\uba74\uc11c \uc720\uc5f0\uc131\uc744 \uac00\uc9c0\ub824\uba74 \uc5b8\uc5b4\uc5d0\uc11c \ubaa8\ub4c8\uc744 \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4 See also Working Draft, Extensions to C++ for Modules Modules, Componentization, and Transition Enforcement \uc27d\ub2e4 SF.5: .cpp \ud30c\uc77c\uc740 \ubc18\ub4dc\uc2dc \ud574\ub2f9 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud558\ub294 .h \ub97c include\ud574\uc57c \ud55c\ub2e4 Reason \ucef4\ud30c\uc77c\ub7ec\uac00 \uc880\ub354 \uc77c\ucc0d \uc77c\uad00\uc131\uc744 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. Example, bad // foo.h: void foo ( int ); int bar ( long ); int foobar ( int ); // foo.cpp: void foo ( int ) { /* ... */ } int bar ( double ) { /* ... */ } double foobar ( int ); bar \ub098 foobar \ub97c \ud638\ucd9c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \ub9c1\ud06c\ud558\ub294 \uc2dc\uc810\uc5d0\uc11c\uc57c \uc624\ub958\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. Example // foo.h: void foo ( int ); int bar ( long ); int foobar ( int ); // foo.cpp: #include <foo.h> void foo ( int ) { /* ... */ } int bar ( double ) { /* ... */ } double foobar ( int ); // error: \ubc18\ud658 \ud0c0\uc785\uc774 \ub2e4\ub974\ub2e4 \uc774\uc81c foobar \uc758 \ubc18\ud658 \ud0c0\uc785 \uc624\ub958\ub294 foo.cpp \ub97c \ucef4\ud30c\uc77c \ud560\ub54c \uc54c \uc218 \uc788\ub2e4. bar \uc758 \uc778\uc790\ud0c0\uc785\uc774 \ub2e4\ub978 \uac83\uc740 \uc911\ubcf5\uc815\uc758\uc77c \uc218 \uc788\uc73c\ubbc0\ub85c \uc624\ub958\ub294 \ub9c1\ud06c \uc2dc\uac04\uc5d0 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc .h \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \ud504\ub85c\uadf8\ub798\uba38\uac00 \ub354 \uc77c\ucc0d \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\uac8c \ud55c\ub2e4. Enforcement ??? SF.6: using namespace \ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc758 \uc774\ub984 \ubc14\uafb8\uae30, std \ucc98\ub7fc \uae30\ubcf8\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac, \ud639\uc740 \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0\uc11c(\ub9cc) \uc0ac\uc6a9\ud558\ub77c Reason using namespace \ub97c \uc4f0\uba74 \uc774\ub984 \ucda9\ub3cc\uc774 \uc77c\uc5b4\ub0a0 \uc218 \uc788\ub2e4. \uac00\ub2a5\ud55c \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc(sparingly) \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc, \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uc5d0\uc11c \ud56d\uc0c1 \ubaa8\ub4e0 \uc774\ub984\uc744 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uae4c\uc9c0 \ubd84\uba85\ud788 \ud558\ub294 \uac83(to qualify every name)\uc774 \uac00\ub2a5\ud55c \uac83\uc740 \uc544\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub54c\ub85c\ub294 \uc5b4\ub290 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uac00 \ub108\ubb34 \uae30\ubcf8\uc801\uc774\uace0 \ub9ce\uc740 \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub418\uae30\ub3c4 \ud55c\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0 \ub9e4\ubc88 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub97c \uba85\uc2dc(qualification)\ud558\ub294 \uac83\uc740 \ucf54\ub4dc\ub97c \uc7a5\ud669\ud558\uac8c \ub9cc\ub4e4\uace0 \uc9d1\uc911\ud558\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4e0\ub2e4. Example #include <string> #include <vector> #include <iostream> #include <memory> #include <algorithm> using namespace std ; // ... \uc774 \ucf54\ub4dc\ub294 (\uba85\ubc31\ud558\uac8c) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc5ec\ub7ff \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\uba70 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774 \ub4dc\ub7ec\ub09c\ub2e4. \ub530\ub77c\uc11c \ubaa8\ub4e0 \uacf3\uc5d0\uc11c std:: \ub97c \uc791\uc131\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc740 \ucf54\ub4dc\uc5d0 \uc9d1\uc911\ud560 \uc218 \uc5c6\uac8c \ub9cc\ub4e4 \uac83\uc774\ub2e4. Example using namespace std; \ub97c \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc0ac\uc6a9\uc911\uc778 \uc774\ub984\uacfc \ucda9\ub3cc\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub3c4\ub85d \ud5c8\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. #include <cmath> using namespace std ; int g ( int x ) { int sqrt = 7 ; // ... return sqrt ( x ); // error } \ub2e4\ub9cc \uc774 \uc608\uc2dc\ub294 \uc624\ub958\uac00 \uc544\ub2c8\ub3c4\ub85d \ucc98\ub9ac\ub420 \uac00\ub2a5\uc131\uc774 \ud2b9\ud788 \ub0ae\uc740 \uacbd\uc6b0\ub2e4. \uadf8\ub9ac\uace0 using namespace std \ub97c \uc0ac\uc6a9\ud558\ub294 \uc0ac\ub78c\uc740 std \uc5d0 \ubb34\uc5c7\uc774 \uc788\uace0 \uc5b4\ub5a4 \uc704\ud5d8\uc774 \uc788\ub294\uc9c0 \uc774\ud574\ud558\uace0 \uc788\uc744 \uac83\uc774\ub2e4. Note \ud558\ub098\uc758 .cpp \ud30c\uc77c\uc740 \uc9c0\uc5ed \ubc94\uc704\ub85c \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. N-\uc904\uc9dc\ub9ac .cpp \uac00 using namespace X \ub97c \uc0ac\uc6a9\ud588\uc744 \ub54c \ucda9\ub3cc \uac00\ub2a5\uc131\uacfc N-\uc904\uc9dc\ub9ac \ud568\uc218\uac00 using namespace X \ub97c \uc0ac\uc6a9\ud588\uc744 \ub54c, N-\uc904\uc9dc\ub9ac \ud568\uc218 M\uac1c\uac00 \uac01\uac01 using namespace X \ub97c \uc0ac\uc6a9\ud588\uc744 \ub54c\ub294 \ucc28\uc774\uac00 \uc788\ub2e4. Note using namespace \ub294 \ud5e4\ub354\ud30c\uc77c\uc5d0 \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c . Enforcement \uc18c\uc2a4 \ud30c\uc77c\uc5d0\uc11c \ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ub300\ud574 using namespace \uac00 \uc5ec\ub7ec\ucc28\ub840 \ub098\ud0c0\ub098\uba74 \uc9c0\uc801\ud558\ub77c SF.7: \ud5e4\ub354\ud30c\uc77c\uc5d0\uc11c\ub294 \uc804\uccb4 \uc720\ud6a8\ubc94\uc704(global scope)\uc5d0 \uc8fc\ub294 using namespace \ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c Reason \ud5e4\ub354 \ud30c\uc77c\uc5d0 using \uc9c0\uc2dc\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 #include \ub97c \uc0ac\uc6a9\ud558\ub294 \ucabd\uc5d0\uc11c \ub2e4\ub978 \uad6c\ud604\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uad6c\ubd84\ud560 \uc218 \uc788\ub294 \ubc29\uc548\uc744 \uc5c6\uc560\ubc84\ub9b0\ub2e4. \ub3d9\uc2dc\uc5d0 \uadf8 \ud5e4\ub354\uac00 #include \ub418\ub294 \uc21c\uc11c\ub97c \uc2e0\uacbd\uc4f0\ub3c4\ub85d \ub9cc\ub4e0\ub2e4(order-dependent). \uc774\ub294 \ud5e4\ub354\uc758 \uc21c\uc11c\uac00 \ubc14\ub00c\uba74 \uc758\ubbf8\uac00 \ub2ec\ub77c\uc9c0\ub294\uac83\uacfc \uac19\ub2e4. Example // bad.h #include <iostream> using namespace std ; // bad // user.cpp #include \"bad.h\" bool copy ( /*... some parameters ...*/ ); // some function that happens to be named copy int main () { copy ( /*...*/ ); // now overloads local // ::copy and std::copy, // could be ambiguous } Enforcement Flag using namespace at global scope in a header file. SF.8: \ubaa8\ub4e0 .h \ud30c\uc77c\uc5d0\uc11c #include \uac00\ub4dc(guard)\ub97c \uc0ac\uc6a9\ud558\ub77c \uc5ed\uc8fc: #include guard(\ubcf4\ud638 \ubb38\uad6c)\ub294 \uc5b4\ub5a4 \ud5e4\ub354 \ud30c\uc77c\uc774 \uc5ec\ub7ec\ucc28\ub840 include \ub418\uc5c8\uc744 \ub54c redefinition\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d Macro\ub97c \uc0ac\uc6a9\ud574 \uc624\uc9c1 \ucc98\uc74c include\ud560\ub54c\ub9cc \uadf8 \ub0b4\uc6a9\uc774 \ud65c\uc131\ud654 \ub418\ub3c4\ub85d\ud558\ub294 \ud2b8\ub9ad(Trick)\uc744 \ub9d0\ud569\ub2c8\ub2e4 Reason \ud30c\uc77c\uc774 \uc5ec\ub7ec \ubc88 #include \ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud55c\ub2e4. \uac00\ub4dc\uc758 \uc774\ub984\uc774 \ucda9\ub3cc\ud558\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud574, \ub2e8\uc21c\ud788 \ud30c\uc77c\uc758 \uc774\ub984\uc744 \ub530\ub77c\uc11c \uac00\ub4dc\ub4e4\uc758 \uc774\ub984\uc744 \uc9c0\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4. \uac00\ub4dc\uc758 \uc774\ub984\uc5d0 \ud5e4\ub354\ud30c\uc77c\uc774 \ub2f4\ub2f9\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud639\uc740 \ucef4\ud3ec\ub10c\ud2b8\uc758 \uc774\ub984\uacfc \uac19\uc740 \ud575\uc2ec\uacfc \ucc28\ubcc4\uc131(a key and good differentiator)\uc774 \ub2f4\uae30\uac8c \ud558\ub77c. Example // file foobar.h: #ifndef LIBRARY_FOOBAR_H #define LIBRARY_FOOBAR_H // ... declarations ... #endif // LIBRARY_FOOBAR_H Enforcement #include \uac00\ub4dc\uac00 \uc5c6\ub294 .h \ud30c\uc77c\uc774 \uc788\ub2e4\uba74 \ud45c\uc2dc\ud55c\ub2e4 Note \uc5b4\ub5a4 \uacbd\uc6b0\ub294 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ud655\uc7a5(vendor extnsion)\uc778 #pragma once \ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc774\ub294 \ud45c\uc900\uc774 \uc544\ub2c8\uba70 \ubaa8\ub4e0 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc81c\uacf5\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4(not portable). \uc774 \ubc29\ubc95\uc740 \ub2f9\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc744 \uc0dd\uc131\ud560 \ub54c \ube4c\ub4dc\ub97c \uc218\ud589\ud558\ub294 \uae30\uacc4\uc758 \ud30c\uc77c\uc2dc\uc2a4\ud15c \ubb38\ub9e5\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uadf8 \uacb0\uacfc \ud574\ub2f9 \ucef4\ud30c\uc77c\ub7ec/\uae30\uacc4\uc758 \uc81c\uacf5\uc790(vendor)\uc5d0 \uc758\uc874\ud558\uac8c \ub41c\ub2e4. ISO C++ \ub97c \ub530\ub77c\uc11c \uc791\uc131\ud560 \uac83\uc744 \uad8c\ud55c\ub2e4: P.2 \ub97c \uc77d\uc5b4\ubcf4\ub77c SF.9: \uc18c\uc2a4 \ud30c\uc77c\ub4e4\uc774 \uc21c\ud658 \uc758\uc874(cyclic dependencies)\ud558\uac8c \ud558\uc9c0\ub9c8\ub77c Reason \uc21c\ud658\uc740 \uc774\ud574\ud558\uae30 \uc5b4\ub835\uace0, \ucef4\ud30c\uc77c \uc18d\ub3c4\ub3c4 \ub290\ub824\uc9c0\uac8c \ud55c\ub2e4. \ud5a5\ud6c4 \uc5b8\uc5b4\uc5d0\uc11c \ubaa8\ub4c8 \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud560 \ub54c \uc774 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ubcc0\uacbd\ud558\uae30 \uc5b4\ub835\uac8c \ub41c\ub2e4. Note \ub2e8\uc21c\ud788 #include \ubcf4\ud638 \uc7a5\uce58\ub85c \ucc98\ub9ac\ud558\uc9c0 \ub9d0\uace0 \uc2e4\uc81c \uc21c\ud658 \uad6c\uc870\ub97c \uc5c6\uc560\uc57c \ud55c\ub2e4. Example, bad // file1.h: #include \"file2.h\" // file2.h: #include \"file3.h\" // file3.h: #include \"file1.h\" Enforcement \uc21c\ud658\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4. SF.10: \ubb35\uc2dc\uc801\uc73c\ub85c #include \ub41c \uc774\ub984\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c Reason \uc774\uc0c1 \ud589\ub3d9(surprise)\uc744 \ub9c9\ub294\ub2e4. #include \ub418\ub294 \ud30c\uc77c\uc774 \ubc14\ub00c\uc5c8\uc744 \ub54c #include \ud558\ub294 \ucf54\ub4dc\uac00 \ubc14\ub014 \ud544\uc694\uac00 \uc5c6\uc5b4\uc57c \ud55c\ub2e4. \uad6c\ud604 \uc138\ubd80\uc0ac\ud56d\uc774\ub098 \ud574\ub354\ud30c\uc77c\uc5d0 \uc788\ub294 \ub17c\ub9ac\uc801\uc73c\ub85c \ubd84\ub9ac\ub41c \uac1c\uccb4\uc5d0 \uc758\uc874\ud558\uac8c \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4. Example #include <iostream> using namespace std ; void use () // bad { string s ; cin >> s ; // fine getline ( cin , s ); // error: getline()\uc774 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\ub2e4 if ( s == \"surprise\" ) { // \ucef4\ud30c\uc77c \uc624\ub958. == \uc5f0\uc0b0\uc790\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\ub2e4 // ... } } <iostream> \uc740 std::string \uc758 \uc815\uc758\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub178\ucd9c\uc2dc\ud0a8\ub2e4 (\"\uc5b4\uc9f8\uc11c?\"\ub294 \uaf64 \uc7ac\ubbf8\uc788\ub294 \uc9c8\ubb38\uc774 \ub420 \uac83\uc774\ub2e4). \ud558\uc9c0\ub9cc <string> \ud5e4\ub354\ub97c \uc0ac\uc6a9\ud574\uc11c \uadf8 \ub0b4\uc6a9\uc744 \uc804\ud30c\uc2dc\ud0a4\ub294(by transitively) \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uace0 \uc5b4\ub5a4 \uc694\uad6c\uc0ac\ud56d\uc774 \uc874\uc7ac\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \uadf8 \uacb0\uacfc \ub9ce\uc740 \ucd08\uc2ec\uc790\ub4e4\uc774 \"\uc65c getline(cin,s); \uac00 \ub3d9\uc791\ud558\uc9c0 \uc54a\ub294\uac70\uc8e0?\"\ub77c\uac70\ub098, \ub54c\ub85c\ub294 \"\ubb38\uc790\uc5f4\uc744 == \uc5f0\uc0b0\uc790\ub85c \ube44\uad50\ud560\uc218 \uc5c6\uc5b4\uc694\"\ub77c\uace0 \uc9c8\ubb38\ud55c\ub2e4. \ud574\uacb0\ubc29\ubc95\uc740 \uba85\uc2dc\uc801\uc73c\ub85c #include <string> \ub97c \ucd94\uac00\ud558\ub294 \uac83\uc774\ub2e4: #include <iostream> #include <string> using namespace std ; void use () { string s ; cin >> s ; // fine getline ( cin , s ); // fine if ( s == \"surprise\" ) { // fine // ... } } Note \uc5b4\ub5a4 \ud5e4\ub354\ud30c\uc77c\ub4e4\uc740 \uadf8\uc800 \uc5ec\ub7ec \ud5e4\ub354\ub4e4\uc744 \ub611\uac19\uc740 \ud615\ud0dc\ub85c(\uc77c\uad00\uc801\uc73c\ub85c) \uac00\uc838\uc624\uae30 \uc704\ud574\uc11c\ub9cc \uc874\uc7ac\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4: // basic_std_lib.h: #include <vector> #include <string> #include <map> #include <iostream> #include <random> #include <vector> \uc774\ub807\uac8c \ud558\uba74 \uc0ac\uc6a9\uc790\ub294 \ud55c\ubc88\uc758 #include \ub85c \uc77c\ub828\uc758 \uc120\uc5b8\ub4e4\uc744 \uac00\uc838\uc62c \uc218 \uc788\ub2e4. #include \"basic_std_lib.h\" \uc774 \uaddc\uce59\uc740 \"\ubb35\uc2dc\uc801 include\uac00 \ud3b8\uc758\ub97c \uc704\ud574 \uc0ac\uc6a9\ub418\uae30 \uc704\ud55c \uae30\ub2a5\uc774 \uc544\ub2c8\ub2e4\"\ub77c\ub294 \uaddc\uce59\uc5d0 \ubc18\ub300\ub41c\ub2e4. implicit inclusion is not meant to prevent such deliberate aggregation Enforcement \uc774 \uaddc\uce59\uc744 \uc801\uc6a9\ud558\ub824\uba74 \uc5b4\ub5a4 \ud5e4\ub354\ud30c\uc77c\uc774 \uc0ac\uc6a9\uc790\uc5d0\uac8c \"\ub178\ucd9c\"\ub418\ub294\uc9c0 \uc54c\uc544\uc57c \ud558\uace0 \uc5b4\ub5a4 \ud30c\uc77c\uc774 \uad6c\ud604\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ub418\ub294\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4. Module \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744\ub54c \uae4c\uc9c0\ub294 \uc88b\uc740 \ud574\uacb0\ubc29\ubc95\uc774 \ub9c8\ub545\ud788 \uc5c6\ub2e4. SF.11: \ud5e4\ub354 \ud30c\uc77c\uc740 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c(self-contained) \ub9cc\ub4e4\uc5b4\ub77c Reason \uc0ac\uc6a9\uc131, \ud5e4\ub354\ub294 \ub2e8\uc21c\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5b4\uc57c \ud558\uba70 \uadf8 \uc790\uc2e0\ub9cc \uc788\uc5b4\ub3c4 \ub3d9\uc791\ud574\uc57c \ud55c\ub2e4. \ud5e4\ub354\ub294 \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\uc744 \ucea1\uc290\ud654\ud574\uc57c \ud55c\ub2e4. \ud5e4\ub354\ub97c \uc0ac\uc6a9\ud558\ub294 \ucabd\uc5d0\uc11c \ud5e4\ub354\uc758 \uc758\uc874\uc131\uc744 \uad00\ub9ac\ud558\uac8c \ud558\uc9c0\ub9c8\ub77c. Example #include \"helpers.h\" // helpers.h depends on std::string and includes <string> Note Failing to follow this results in difficult to diagnose errors for clients of a header. Enforcement A test should verify that the header file itself compiles or that a cpp file which only includes the header file compiles. SF.20: namespace \ub294 \ub17c\ub9ac\uc801 \uad6c\uc870\ub97c \ud45c\ud604\ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c Reason ??? Example ??? Enforcement ??? SF.21: \ud5e4\ub354\uc5d0\uc11c \uc774\ub984\uc5c6\ub294(anonymous) \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \ud5e4\ub354 \ud30c\uc77c\uc5d0 \uc788\ub294 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uac70\uc758 \ub300\ubd80\ubd84\uc774 \ubc84\uadf8\uc774\ub2e4. Example ??? Enforcement \ud5e4\ub354 \ud30c\uc77c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc744 \ucc3e\uc544\ub0b4 \ud45c\uc2dc\ud55c\ub2e4 SF.22: \uc774\ub984\uc5c6\ub294(anonymous) \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub294 \ub0b4\ubd80(internal)/\ub178\ucd9c\uc2dc\ud0a4\uc9c0 \uc54a\ub294(non-exported) \uac1c\uccb4\uc5d0 \uc0ac\uc6a9\ud558\ub77c Reason \uc5b4\ub5a4 \uc678\ubd80\uc5d0\uc11c\ub3c4 \ub0b4\ubd80\uc758 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc788\ub294 \ud56d\ubaa9\ub4e4\uc5d0 \ucc38\uc870\ud560 \uc218 \uc5c6\ub2e4. \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub294 \ubaa8\ub4e0 \uad6c\ud604\ub4e4 \uc911 \"\uc678\ubd80\uc5d0 \ub178\ucd9c\ub418\ub294\" \ud56d\ubaa9\uc758 \uc815\uc758\ub97c \ube80 \ub098\uba38\uc9c0 \ubaa8\ub450\ub294 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ub123\ub294\ub2e4 \uc0dd\uac01\ud558\ub77c. Example API \ud074\ub798\uc2a4\uc640 \uadf8 \uba64\ubc84\ub4e4\uc740 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc788\uc744 \uc218 \uc5c6\uc9c0\ub9cc, \uad6c\ud604 \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \uc815\uc758\ub41c \"\ub3c4\uc6b0\ubbf8\" \ud074\ub798\uc2a4\ub098 \ud568\uc218\ub4e4\uc758 \uacbd\uc6b0 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc601\uc5ed\uc5d0 \uc815\uc758\ub418\uc5b4\uc57c \ud55c\ub2e4. ??? Enforcement ???","title":"Source"},{"location":"Source/#sf","text":"\uc120\uc5b8(\uc778\ud130\ud398\uc774\uc2a4)\uacfc \uc815\uc758(\uad6c\ud604)\ub97c \uad6c\ubd84\ud558\ub77c. \ud5e4\ub354 \ud30c\uc77c\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud45c\ud604\ud558\uace0 \ub17c\ub9ac\uc801 \uad6c\uc870\ub97c \uac15\uc870\ud558\uae30 \uc704\ud574\uc11c \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4. \uc18c\uc2a4 \ud30c\uc77c \uaddc\uce59 \uc694\uc57d: SF.1: \ub2e4\ub978 \uad00\ub840\ub97c \ub530\ub974\ub294 \uc911\uc774 \uc544\ub2c8\ub77c\uba74 .cpp \ub294 \ucf54\ub4dc \ud30c\uc77c\uc5d0, .h \ub294 \uc778\ud130\ud398\uc774\uc2a4 \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\ud558\ub77c SF.2: .h \ud30c\uc77c\uc5d0\ub294 \uac1c\uccb4 \ubcc0\uc218(object definition) \ud639\uc740 inline\uc774 \uc544\ub2cc \ud568\uc218\uc758 \uc815\uc758\uac00 \uc788\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4 SF.3: .h \ud30c\uc77c\uc740 \uc5ec\ub7ec \uc18c\uc2a4 \ud30c\uc77c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc120\uc5b8\uc744 \ub2f4\uc544\ub77c SF.4: \ud30c\uc77c\uc5d0\uc11c \ubb34\uc5b8\uac00 \uc120\uc5b8\ud558\uae30 \uc804\uc5d0 .h \ub97c include\ud558\ub77c SF.5: .cpp \ud30c\uc77c\uc740 \ubc18\ub4dc\uc2dc \ud574\ub2f9 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud558\ub294 .h \ub97c include\ud574\uc57c \ud55c\ub2e4 SF.6: using namespace \ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc758 \uc774\ub984 \ubc14\uafb8\uae30, std \ucc98\ub7fc \uae30\ubcf8\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac, \ud639\uc740 \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0\uc11c(\ub9cc) \uc0ac\uc6a9\ud558\ub77c SF.7: \ud5e4\ub354\ud30c\uc77c\uc5d0\uc11c\ub294 \uc804\uccb4 \uc720\ud6a8\ubc94\uc704(global scope)\uc5d0 \uc8fc\ub294 using namespace \ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c SF.8: \ubaa8\ub4e0 .h \ud30c\uc77c\uc5d0\uc11c #include \uac00\ub4dc(guard)\ub97c \uc0ac\uc6a9\ud558\ub77c SF.9: \uc18c\uc2a4 \ud30c\uc77c\ub4e4\uc774 \uc21c\ud658 \uc758\uc874(cyclic dependencies)\ud558\uac8c \ud558\uc9c0\ub9c8\ub77c SF.10: \ubb35\uc2dc\uc801\uc73c\ub85c #include \ub41c \uc774\ub984\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c SF.11: \ud5e4\ub354 \ud30c\uc77c\uc740 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c(self-contained) \ub9cc\ub4e4\uc5b4\ub77c SF.20: namespace \ub294 \ub17c\ub9ac\uc801 \uad6c\uc870\ub97c \ud45c\ud604\ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c SF.21: \ud5e4\ub354\uc5d0\uc11c \uc774\ub984\uc5c6\ub294(anonymous) \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c SF.22: \uc774\ub984\uc5c6\ub294(anonymous) \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub294 \ub0b4\ubd80(internal)/\ub178\ucd9c\uc2dc\ud0a4\uc9c0 \uc54a\ub294(non-exported) \uac1c\uccb4\uc5d0 \uc0ac\uc6a9\ud558\ub77c","title":"SF: \uc18c\uc2a4 \ud30c\uc77c"},{"location":"Source/#sf1-cpp-h","text":"","title":"SF.1: \ub2e4\ub978 \uad00\ub840\ub97c \ub530\ub974\ub294 \uc911\uc774 \uc544\ub2c8\ub77c\uba74 .cpp\ub294 \ucf54\ub4dc \ud30c\uc77c\uc5d0, .h\ub294 \uc778\ud130\ud398\uc774\uc2a4 \ud30c\uc77c\uc5d0 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Source/#reason","text":"\uc624\ub798\ub41c \uad00\ub840\ub2e4. \ub2e4\ub9cc \uc77c\uad00\uc131\uc774 \ub354 \uc911\uc694\ud558\ub2e4. \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uc774\ubbf8 \uc5b4\ub5a4 \ud30c\uc77c \ud655\uc7a5\uc790 \uaddc\uce59\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74, \uadf8\ub300\ub85c \ub530\ub77c\uac00\ub77c","title":"Reason"},{"location":"Source/#note","text":"\uc774 \uad00\ub840\ub294 \ucf54\ub4dc \uc0ac\uc6a9\ud328\ud134\uc5d0 \uc601\ud5a5\uc744 \uc900\ub2e4: \ud5e4\ub354\ub294 C \uc5b8\uc5b4\uc640 \ud568\uaed8 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0\uac00 \uc790\uc8fc \uc788\uae30 \ub54c\ubb38\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c .h \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub807\uac8c \uc0ac\uc6a9\ub418\ub294\uac83\uc744 \uc758\ub3c4\ud588\ub2e4\uba74 \ub2e4\ub978 \ud30c\uc77c \ud655\uc7a5\uc790\ub97c \uc4f0\ub294\uac83\ubcf4\ub2e4 \ubaa8\ub450\uac00 .h \ub97c \uc0ac\uc6a9\ud558\ub294\uac83\uc774 \uc27d\ub2e4. \ubc18\uba74\uc5d0, \uad6c\ud604 \ud30c\uc77c\uc774 C \uc5b8\uc5b4\uc640 \ud568\uaed8 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0\ub294 \ub4dc\ubb3c\uae30 \ub54c\ubb38\uc5d0 .c \ud30c\uc77c\ub4e4\uacfc\ub294 \uad6c\ubd84\ub420 \ud544\uc694\uac00 \uc788\ub2e4. \ubaa8\ub4e0 C++ \ud30c\uc77c\ub4e4\uc774 .cpp \ucc98\ub7fc \ub2e4\ub978 \ud655\uc7a5\uc790\ub97c \uc0ac\uc6a9\ud558\ub294\uac8c \ucd5c\uc120\uc758 \ubc29\ubc95\uc774\ub2e4. .h \uc640 .cpp \uac00 \uae30\ubcf8\uc801\uc73c\ub85c \uad8c\uc7a5\ub418\uae30\ub294 \ud558\uc9c0\ub9cc \ud544\uc218\ub294 \uc544\ub2c8\ub2e4. \ub2e4\ub978 \uc774\ub984\ub4e4\ub3c4 \uad11\ubc94\uc704\ud558\uac8c \uc0ac\uc6a9\ub41c\ub2e4. \uc608\ub97c \ub4e4\uc790\uba74 .hh , .C , .cxx \uac19\uc740 \uac83\uc774 \uc788\ub2e4. \uc774\ub7f0 \uc774\ub984\uc744 \uac19\uc774 \uc368\ub3c4 \uc88b\ub2e4. \uc774 \ubb38\uc11c\uc5d0\uc11c\ub294, \uc2e4\uc81c\ub85c\ub294 \ub2e4\ub978 \ud655\uc7a5\uc790\ub97c \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, .h \ub97c \ud5e4\ub354\ud30c\uc77c\uc5d0 \ub300\ud55c \uc57d\uce6d(shorthand)\uc73c\ub85c, .cpp \ub97c \uad6c\ud604\ud30c\uc77c\uc5d0 \ub300\ud55c \uc57d\uce6d\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4. \ub2f9\uc2e0\uc774 \uc0ac\uc6a9\ud558\uace0\uc788\ub294 IDE\uc5d0\uc11c\ub294 \ud2b9\uc815\ud55c \ud655\uc7a5\uc790\ub9cc \uc9c0\uc6d0\ud560\uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Source/#example","text":"// foo.h: extern int a ; // \uc120\uc5b8 extern void foo (); // foo.cpp: int a ; // \uc815\uc758 void foo () { ++ a ; } foo.h \ub294 foo.cpp \uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud55c\ub2e4. \uc804\uc5ed \ubcc0\uc218\ub294 \ud53c\ud574\uc57c \ud55c\ub2e4.","title":"Example"},{"location":"Source/#example-bad","text":"// foo.h: int a ; // \ud5e4\ub354 \ud30c\uc77c\uc5d0 \uc815\uc758\uac00 \uc788\ub2e4 void foo () { ++ a ; } #include <foo.h> \ubb38\uad6c\uac00 \ud55c \ud504\ub85c\uadf8\ub7a8 \ub0b4\uc5d0 2\ud68c \uc774\uc0c1 \ud3ec\ud568\ub41c\ub2e4\uba74 \ub2e8\uc77c \uc815\uc758 \uaddc\uce59(one-definition-rule)\uc5d0 \uc704\ubc30\ub41c\ub2e4\uace0 \ub9c1\ucee4\uac00 \uc624\ub958\ub97c \ub0bc \uac83\uc774\ub2e4.","title":"Example, bad"},{"location":"Source/#enforcement","text":"\uad00\ub840\uc5d0 \ub9de\uc9c0 \uc54a\ub294 \ud30c\uc77c \uc774\ub984\ub4e4\uc744 \uc9c0\uc801\ud55c\ub2e4 .h \uc640 .cpp \uac00 (\uadf8\ub9ac\uace0 \ube44\uc2b7\ud55c \ud30c\uc77c\ub4e4\uc774) \uc544\ub798 \uaddc\uce59\uc744 \ub530\ub974\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4","title":"Enforcement"},{"location":"Source/#sf2-h-object-definition-inline","text":"","title":"SF.2: .h \ud30c\uc77c\uc5d0\ub294 \uac1c\uccb4 \ubcc0\uc218(object definition) \ud639\uc740 inline\uc774 \uc544\ub2cc \ud568\uc218\uc758 \uc815\uc758\uac00 \uc788\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4"},{"location":"Source/#reason_1","text":"\ud558\ub098\uc758 \uc815\uc758\ub9cc \uac00\uc838\uc57c\ud558\ub294 \ub300\uc0c1\uc744 \ud3ec\ud568 \ud558\uac8c \ub418\uba74 \ub9c1\ud0b9 \uc5d0\ub7ec\ub85c \uc774\uc5b4\uc9c4\ub2e4.","title":"Reason"},{"location":"Source/#example_1","text":"// file.h: namespace Foo { int x = 7 ; int xx () { return x + x ; } } // file1.cpp: #include <file.h> // ... more ... // file2.cpp: #include <file.h> // ... more ... file1.cpp \uc640 file2.cpp \uac00 \ub9c1\ud0b9\ub420 \ub54c \ub9c1\ucee4 \uc624\ub958\uac00 \ubc1c\uc0dd\ud560 \uac83\uc774\ub2e4. Alternative Formulation : .h \ud30c\uc77c\uc740 \ub2e4\uc74c\uc758 \ud56d\ubaa9\ub9cc\uc744 \uac00\uc9c4\ub2e4 (include guard\uc640 \ud568\uaed8) \ub2e4\ub978 .h \uc758 #include \ud15c\ud50c\ub9bf \ud074\ub798\uc2a4 \uc815\uc758(definition) \ud568\uc218 \uc120\uc5b8(declaration) extern \uc120\uc5b8 inline \ud568\uc218 \uc815\uc758 constexpr \uc815\uc758 const \uc815\uc758 using \ubcc4\uce6d ???","title":"Example"},{"location":"Source/#enforcement_1","text":"\uc704\uc758 \ubaa9\ub85d\uc5d0\uc11c \ud5c8\uc6a9\ub418\ub294 \uac83\ub4e4\uc744 \uac80\ud1a0\ud55c\ub2e4","title":"Enforcement"},{"location":"Source/#sf3-h","text":"","title":"SF.3: .h \ud30c\uc77c\uc740 \uc5ec\ub7ec \uc18c\uc2a4 \ud30c\uc77c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc120\uc5b8\uc744 \ub2f4\uc544\ub77c"},{"location":"Source/#reason_2","text":"\uad00\ub9ac\uac00 \ud3b8\ud574\uc9c0\uace0 \uac00\ub3c5\uc131\uc774 \ud5a5\uc0c1\ub41c\ub2e4.","title":"Reason"},{"location":"Source/#example-bad_1","text":"// bar.cpp: void bar () { cout << \"bar \\n \" ; } // foo.cpp: extern void bar (); void foo () { bar (); } bar \ub97c \uad00\ub9ac\ud558\ub294 \uc0ac\ub78c\uc774 \uadf8 \ud0c0\uc785\uc744 \ubc14\uafb8\uace0\uc790 \ud558\ub354\ub77c\ub3c4 bar \uc758 \ubaa8\ub4e0 \uc120\uc5b8\uc744 \ucc3e\uc744 \uc218\uac00 \uc5c6\ub2e4. bar \ub97c \uc0ac\uc6a9\ud558\ub294 \uc785\uc7a5\uc5d0\uc11c\ub294 \uc774 \uc778\ud130\ud398\uc774\uc2a4\uac00 \uc644\ubcbd\ud55c\uc9c0 \uc54c \uc218\uac00 \uc5c6\ub2e4. \uae30\uaecf\ud574\uc57c (\ub098\uc911\uc5d0) \ub9c1\ucee4\ub85c\ubd80\ud130 \uc624\ub958\uba54\uc2dc\uc9c0\ub97c \ubc1b\ub294 \uac83\uc774 \uace0\uc791\uc774\ub2e4.","title":"Example, bad"},{"location":"Source/#enforcement_2","text":"\uac1c\uccb4\uc758 \uc120\uc5b8\uc774 .h \uac00 \uc544\ub2c8\ub77c \ub2e4\ub978 \uc18c\uc2a4\ud30c\uc77c\uc5d0 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Source/#sf4-h-include","text":"","title":"SF.4: \ud30c\uc77c\uc5d0\uc11c \ubb34\uc5b8\uac00 \uc120\uc5b8\ud558\uae30 \uc804\uc5d0 .h\ub97c include\ud558\ub77c"},{"location":"Source/#reason_3","text":"\ubb38\ub9e5\uc5d0 \ub300\ud55c \uc885\uc18d\uc131\uc744 \ucd5c\uc18c\ud654\ud558\uace0 \uac00\ub3c5\uc131\uc744 \ub192\uc778\ub2e4.","title":"Reason"},{"location":"Source/#example_2","text":"#include <vector> #include <algorithm> #include <string> // ... my code here ...","title":"Example"},{"location":"Source/#example-bad_2","text":"#include <vector> // ... my code here ... #include <algorithm> #include <string>","title":"Example, bad"},{"location":"Source/#note_1","text":"\uc774 \ub0b4\uc6a9\uc740 .h \uc640 .cpp \ud30c\uc77c \ubaa8\ub450\uc5d0 \ud574\ub2f9\ud55c\ub2e4.","title":"Note"},{"location":"Source/#note_2","text":"\ud5e4\ub354\ud30c\uc77c\uc5d0\uc11c \ubcf4\ud638\ud558\uace0 \uc2f6\uc740 \ucf54\ub4dc \ub2e4\uc74c\uc5d0 #include \ubaa9\ub85d\uc774 \uc624\ub3c4\ub85d \ud574\uc11c \uc120\uc5b8\uacfc \ub9e4\ud06c\ub85c\ub85c\ubd80\ud130 \ucf54\ub4dc\ub97c \ubd84\ub9ac\ud55c\ub2e4\ub294 \uc0dd\uac01\uc5d0\ub294 \ub17c\uc7c1\uc774 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ubc29\ubc95\uc740 \ud558\ub098\uc758 \ud30c\uc77c\uc5d0(\ud55c \ub2e8\uacc4)\ub9cc \ud1b5\ud55c\ub2e4: Use that technique in a header included with other headers and the vulnerability reappears. a namespace (an \"implementation namespace\") can protect against many context dependencies. \uc644\uc804\ud788 \ubcf4\ud638\ud558\uba74\uc11c \uc720\uc5f0\uc131\uc744 \uac00\uc9c0\ub824\uba74 \uc5b8\uc5b4\uc5d0\uc11c \ubaa8\ub4c8\uc744 \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4","title":"Note"},{"location":"Source/#see-also","text":"Working Draft, Extensions to C++ for Modules Modules, Componentization, and Transition","title":"See also"},{"location":"Source/#enforcement_3","text":"\uc27d\ub2e4","title":"Enforcement"},{"location":"Source/#sf5-cpp-h-include","text":"","title":"SF.5: .cpp\ud30c\uc77c\uc740 \ubc18\ub4dc\uc2dc \ud574\ub2f9 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud558\ub294 .h\ub97c include\ud574\uc57c \ud55c\ub2e4"},{"location":"Source/#reason_4","text":"\ucef4\ud30c\uc77c\ub7ec\uac00 \uc880\ub354 \uc77c\ucc0d \uc77c\uad00\uc131\uc744 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4.","title":"Reason"},{"location":"Source/#example-bad_3","text":"// foo.h: void foo ( int ); int bar ( long ); int foobar ( int ); // foo.cpp: void foo ( int ) { /* ... */ } int bar ( double ) { /* ... */ } double foobar ( int ); bar \ub098 foobar \ub97c \ud638\ucd9c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \ub9c1\ud06c\ud558\ub294 \uc2dc\uc810\uc5d0\uc11c\uc57c \uc624\ub958\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4.","title":"Example, bad"},{"location":"Source/#example_3","text":"// foo.h: void foo ( int ); int bar ( long ); int foobar ( int ); // foo.cpp: #include <foo.h> void foo ( int ) { /* ... */ } int bar ( double ) { /* ... */ } double foobar ( int ); // error: \ubc18\ud658 \ud0c0\uc785\uc774 \ub2e4\ub974\ub2e4 \uc774\uc81c foobar \uc758 \ubc18\ud658 \ud0c0\uc785 \uc624\ub958\ub294 foo.cpp \ub97c \ucef4\ud30c\uc77c \ud560\ub54c \uc54c \uc218 \uc788\ub2e4. bar \uc758 \uc778\uc790\ud0c0\uc785\uc774 \ub2e4\ub978 \uac83\uc740 \uc911\ubcf5\uc815\uc758\uc77c \uc218 \uc788\uc73c\ubbc0\ub85c \uc624\ub958\ub294 \ub9c1\ud06c \uc2dc\uac04\uc5d0 \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \ud558\uc9c0\ub9cc .h \ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \ud504\ub85c\uadf8\ub798\uba38\uac00 \ub354 \uc77c\ucc0d \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\uac8c \ud55c\ub2e4.","title":"Example"},{"location":"Source/#enforcement_4","text":"???","title":"Enforcement"},{"location":"Source/#sf6-using-namespace-std","text":"","title":"SF.6: using namespace\ub294 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc758 \uc774\ub984 \ubc14\uafb8\uae30, std\ucc98\ub7fc \uae30\ubcf8\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac, \ud639\uc740 \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704 \uc548\uc5d0\uc11c(\ub9cc) \uc0ac\uc6a9\ud558\ub77c"},{"location":"Source/#reason_5","text":"using namespace \ub97c \uc4f0\uba74 \uc774\ub984 \ucda9\ub3cc\uc774 \uc77c\uc5b4\ub0a0 \uc218 \uc788\ub2e4. \uac00\ub2a5\ud55c \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc(sparingly) \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc, \uc0ac\uc6a9\uc790 \ucf54\ub4dc\uc5d0\uc11c \ud56d\uc0c1 \ubaa8\ub4e0 \uc774\ub984\uc744 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uae4c\uc9c0 \ubd84\uba85\ud788 \ud558\ub294 \uac83(to qualify every name)\uc774 \uac00\ub2a5\ud55c \uac83\uc740 \uc544\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub54c\ub85c\ub294 \uc5b4\ub290 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uac00 \ub108\ubb34 \uae30\ubcf8\uc801\uc774\uace0 \ub9ce\uc740 \uacf3\uc5d0\uc11c \uc0ac\uc6a9\ub418\uae30\ub3c4 \ud55c\ub2e4. \uadf8\ub7f0 \uacbd\uc6b0 \ub9e4\ubc88 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub97c \uba85\uc2dc(qualification)\ud558\ub294 \uac83\uc740 \ucf54\ub4dc\ub97c \uc7a5\ud669\ud558\uac8c \ub9cc\ub4e4\uace0 \uc9d1\uc911\ud558\uae30 \uc5b4\ub835\uac8c \ub9cc\ub4e0\ub2e4.","title":"Reason"},{"location":"Source/#example_4","text":"#include <string> #include <vector> #include <iostream> #include <memory> #include <algorithm> using namespace std ; // ... \uc774 \ucf54\ub4dc\ub294 (\uba85\ubc31\ud558\uac8c) \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc5ec\ub7ff \uc0ac\uc6a9\ud558\uace0 \uc788\uc73c\uba70 \ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774 \ub4dc\ub7ec\ub09c\ub2e4. \ub530\ub77c\uc11c \ubaa8\ub4e0 \uacf3\uc5d0\uc11c std:: \ub97c \uc791\uc131\ud558\ub3c4\ub85d \ud558\ub294 \uac83\uc740 \ucf54\ub4dc\uc5d0 \uc9d1\uc911\ud560 \uc218 \uc5c6\uac8c \ub9cc\ub4e4 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Source/#example_5","text":"using namespace std; \ub97c \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc0ac\uc6a9\uc911\uc778 \uc774\ub984\uacfc \ucda9\ub3cc\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub3c4\ub85d \ud5c8\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. #include <cmath> using namespace std ; int g ( int x ) { int sqrt = 7 ; // ... return sqrt ( x ); // error } \ub2e4\ub9cc \uc774 \uc608\uc2dc\ub294 \uc624\ub958\uac00 \uc544\ub2c8\ub3c4\ub85d \ucc98\ub9ac\ub420 \uac00\ub2a5\uc131\uc774 \ud2b9\ud788 \ub0ae\uc740 \uacbd\uc6b0\ub2e4. \uadf8\ub9ac\uace0 using namespace std \ub97c \uc0ac\uc6a9\ud558\ub294 \uc0ac\ub78c\uc740 std \uc5d0 \ubb34\uc5c7\uc774 \uc788\uace0 \uc5b4\ub5a4 \uc704\ud5d8\uc774 \uc788\ub294\uc9c0 \uc774\ud574\ud558\uace0 \uc788\uc744 \uac83\uc774\ub2e4.","title":"Example"},{"location":"Source/#note_3","text":"\ud558\ub098\uc758 .cpp \ud30c\uc77c\uc740 \uc9c0\uc5ed \ubc94\uc704\ub85c \uc0dd\uac01\ud560 \uc218 \uc788\ub2e4. N-\uc904\uc9dc\ub9ac .cpp \uac00 using namespace X \ub97c \uc0ac\uc6a9\ud588\uc744 \ub54c \ucda9\ub3cc \uac00\ub2a5\uc131\uacfc N-\uc904\uc9dc\ub9ac \ud568\uc218\uac00 using namespace X \ub97c \uc0ac\uc6a9\ud588\uc744 \ub54c, N-\uc904\uc9dc\ub9ac \ud568\uc218 M\uac1c\uac00 \uac01\uac01 using namespace X \ub97c \uc0ac\uc6a9\ud588\uc744 \ub54c\ub294 \ucc28\uc774\uac00 \uc788\ub2e4.","title":"Note"},{"location":"Source/#note_4","text":"using namespace \ub294 \ud5e4\ub354\ud30c\uc77c\uc5d0 \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c .","title":"Note"},{"location":"Source/#enforcement_5","text":"\uc18c\uc2a4 \ud30c\uc77c\uc5d0\uc11c \ub2e4\ub978 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ub300\ud574 using namespace \uac00 \uc5ec\ub7ec\ucc28\ub840 \ub098\ud0c0\ub098\uba74 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Source/#sf7-global-scope-using-namespace","text":"","title":"SF.7: \ud5e4\ub354\ud30c\uc77c\uc5d0\uc11c\ub294 \uc804\uccb4 \uc720\ud6a8\ubc94\uc704(global scope)\uc5d0 \uc8fc\ub294 using namespace\ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Source/#reason_6","text":"\ud5e4\ub354 \ud30c\uc77c\uc5d0 using \uc9c0\uc2dc\uc790\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 #include \ub97c \uc0ac\uc6a9\ud558\ub294 \ucabd\uc5d0\uc11c \ub2e4\ub978 \uad6c\ud604\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uad6c\ubd84\ud560 \uc218 \uc788\ub294 \ubc29\uc548\uc744 \uc5c6\uc560\ubc84\ub9b0\ub2e4. \ub3d9\uc2dc\uc5d0 \uadf8 \ud5e4\ub354\uac00 #include \ub418\ub294 \uc21c\uc11c\ub97c \uc2e0\uacbd\uc4f0\ub3c4\ub85d \ub9cc\ub4e0\ub2e4(order-dependent). \uc774\ub294 \ud5e4\ub354\uc758 \uc21c\uc11c\uac00 \ubc14\ub00c\uba74 \uc758\ubbf8\uac00 \ub2ec\ub77c\uc9c0\ub294\uac83\uacfc \uac19\ub2e4.","title":"Reason"},{"location":"Source/#example_6","text":"// bad.h #include <iostream> using namespace std ; // bad // user.cpp #include \"bad.h\" bool copy ( /*... some parameters ...*/ ); // some function that happens to be named copy int main () { copy ( /*...*/ ); // now overloads local // ::copy and std::copy, // could be ambiguous }","title":"Example"},{"location":"Source/#enforcement_6","text":"Flag using namespace at global scope in a header file.","title":"Enforcement"},{"location":"Source/#sf8-h-include-guard","text":"\uc5ed\uc8fc: #include guard(\ubcf4\ud638 \ubb38\uad6c)\ub294 \uc5b4\ub5a4 \ud5e4\ub354 \ud30c\uc77c\uc774 \uc5ec\ub7ec\ucc28\ub840 include \ub418\uc5c8\uc744 \ub54c redefinition\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d Macro\ub97c \uc0ac\uc6a9\ud574 \uc624\uc9c1 \ucc98\uc74c include\ud560\ub54c\ub9cc \uadf8 \ub0b4\uc6a9\uc774 \ud65c\uc131\ud654 \ub418\ub3c4\ub85d\ud558\ub294 \ud2b8\ub9ad(Trick)\uc744 \ub9d0\ud569\ub2c8\ub2e4","title":"SF.8: \ubaa8\ub4e0 .h\ud30c\uc77c\uc5d0\uc11c #include \uac00\ub4dc(guard)\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Source/#reason_7","text":"\ud30c\uc77c\uc774 \uc5ec\ub7ec \ubc88 #include \ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud55c\ub2e4. \uac00\ub4dc\uc758 \uc774\ub984\uc774 \ucda9\ub3cc\ud558\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud574, \ub2e8\uc21c\ud788 \ud30c\uc77c\uc758 \uc774\ub984\uc744 \ub530\ub77c\uc11c \uac00\ub4dc\ub4e4\uc758 \uc774\ub984\uc744 \uc9c0\uc5b4\uc11c\ub294 \uc548\ub41c\ub2e4. \uac00\ub4dc\uc758 \uc774\ub984\uc5d0 \ud5e4\ub354\ud30c\uc77c\uc774 \ub2f4\ub2f9\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud639\uc740 \ucef4\ud3ec\ub10c\ud2b8\uc758 \uc774\ub984\uacfc \uac19\uc740 \ud575\uc2ec\uacfc \ucc28\ubcc4\uc131(a key and good differentiator)\uc774 \ub2f4\uae30\uac8c \ud558\ub77c.","title":"Reason"},{"location":"Source/#example_7","text":"// file foobar.h: #ifndef LIBRARY_FOOBAR_H #define LIBRARY_FOOBAR_H // ... declarations ... #endif // LIBRARY_FOOBAR_H","title":"Example"},{"location":"Source/#enforcement_7","text":"#include \uac00\ub4dc\uac00 \uc5c6\ub294 .h \ud30c\uc77c\uc774 \uc788\ub2e4\uba74 \ud45c\uc2dc\ud55c\ub2e4","title":"Enforcement"},{"location":"Source/#note_5","text":"\uc5b4\ub5a4 \uacbd\uc6b0\ub294 \ucef4\ud30c\uc77c\ub7ec\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ud655\uc7a5(vendor extnsion)\uc778 #pragma once \ub97c \ub300\uc2e0 \uc0ac\uc6a9\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc774\ub294 \ud45c\uc900\uc774 \uc544\ub2c8\uba70 \ubaa8\ub4e0 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc81c\uacf5\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4(not portable). \uc774 \ubc29\ubc95\uc740 \ub2f9\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc744 \uc0dd\uc131\ud560 \ub54c \ube4c\ub4dc\ub97c \uc218\ud589\ud558\ub294 \uae30\uacc4\uc758 \ud30c\uc77c\uc2dc\uc2a4\ud15c \ubb38\ub9e5\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ub9cc\ub4e0\ub2e4. \uadf8 \uacb0\uacfc \ud574\ub2f9 \ucef4\ud30c\uc77c\ub7ec/\uae30\uacc4\uc758 \uc81c\uacf5\uc790(vendor)\uc5d0 \uc758\uc874\ud558\uac8c \ub41c\ub2e4. ISO C++ \ub97c \ub530\ub77c\uc11c \uc791\uc131\ud560 \uac83\uc744 \uad8c\ud55c\ub2e4: P.2 \ub97c \uc77d\uc5b4\ubcf4\ub77c","title":"Note"},{"location":"Source/#sf9-cyclic-dependencies","text":"","title":"SF.9: \uc18c\uc2a4 \ud30c\uc77c\ub4e4\uc774 \uc21c\ud658 \uc758\uc874(cyclic dependencies)\ud558\uac8c \ud558\uc9c0\ub9c8\ub77c"},{"location":"Source/#reason_8","text":"\uc21c\ud658\uc740 \uc774\ud574\ud558\uae30 \uc5b4\ub835\uace0, \ucef4\ud30c\uc77c \uc18d\ub3c4\ub3c4 \ub290\ub824\uc9c0\uac8c \ud55c\ub2e4. \ud5a5\ud6c4 \uc5b8\uc5b4\uc5d0\uc11c \ubaa8\ub4c8 \uae30\ub2a5\uc744 \uc9c0\uc6d0\ud560 \ub54c \uc774 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ubcc0\uacbd\ud558\uae30 \uc5b4\ub835\uac8c \ub41c\ub2e4.","title":"Reason"},{"location":"Source/#note_6","text":"\ub2e8\uc21c\ud788 #include \ubcf4\ud638 \uc7a5\uce58\ub85c \ucc98\ub9ac\ud558\uc9c0 \ub9d0\uace0 \uc2e4\uc81c \uc21c\ud658 \uad6c\uc870\ub97c \uc5c6\uc560\uc57c \ud55c\ub2e4.","title":"Note"},{"location":"Source/#example-bad_4","text":"// file1.h: #include \"file2.h\" // file2.h: #include \"file3.h\" // file3.h: #include \"file1.h\"","title":"Example, bad"},{"location":"Source/#enforcement_8","text":"\uc21c\ud658\uc774 \uc788\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Source/#sf10-include","text":"","title":"SF.10: \ubb35\uc2dc\uc801\uc73c\ub85c #include\ub41c \uc774\ub984\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud558\ub77c"},{"location":"Source/#reason_9","text":"\uc774\uc0c1 \ud589\ub3d9(surprise)\uc744 \ub9c9\ub294\ub2e4. #include \ub418\ub294 \ud30c\uc77c\uc774 \ubc14\ub00c\uc5c8\uc744 \ub54c #include \ud558\ub294 \ucf54\ub4dc\uac00 \ubc14\ub014 \ud544\uc694\uac00 \uc5c6\uc5b4\uc57c \ud55c\ub2e4. \uad6c\ud604 \uc138\ubd80\uc0ac\ud56d\uc774\ub098 \ud574\ub354\ud30c\uc77c\uc5d0 \uc788\ub294 \ub17c\ub9ac\uc801\uc73c\ub85c \ubd84\ub9ac\ub41c \uac1c\uccb4\uc5d0 \uc758\uc874\ud558\uac8c \ub418\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4.","title":"Reason"},{"location":"Source/#example_8","text":"#include <iostream> using namespace std ; void use () // bad { string s ; cin >> s ; // fine getline ( cin , s ); // error: getline()\uc774 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\ub2e4 if ( s == \"surprise\" ) { // \ucef4\ud30c\uc77c \uc624\ub958. == \uc5f0\uc0b0\uc790\uac00 \uc815\uc758\ub418\uc9c0 \uc54a\uc558\ub2e4 // ... } } <iostream> \uc740 std::string \uc758 \uc815\uc758\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub178\ucd9c\uc2dc\ud0a8\ub2e4 (\"\uc5b4\uc9f8\uc11c?\"\ub294 \uaf64 \uc7ac\ubbf8\uc788\ub294 \uc9c8\ubb38\uc774 \ub420 \uac83\uc774\ub2e4). \ud558\uc9c0\ub9cc <string> \ud5e4\ub354\ub97c \uc0ac\uc6a9\ud574\uc11c \uadf8 \ub0b4\uc6a9\uc744 \uc804\ud30c\uc2dc\ud0a4\ub294(by transitively) \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uace0 \uc5b4\ub5a4 \uc694\uad6c\uc0ac\ud56d\uc774 \uc874\uc7ac\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \uadf8 \uacb0\uacfc \ub9ce\uc740 \ucd08\uc2ec\uc790\ub4e4\uc774 \"\uc65c getline(cin,s); \uac00 \ub3d9\uc791\ud558\uc9c0 \uc54a\ub294\uac70\uc8e0?\"\ub77c\uac70\ub098, \ub54c\ub85c\ub294 \"\ubb38\uc790\uc5f4\uc744 == \uc5f0\uc0b0\uc790\ub85c \ube44\uad50\ud560\uc218 \uc5c6\uc5b4\uc694\"\ub77c\uace0 \uc9c8\ubb38\ud55c\ub2e4. \ud574\uacb0\ubc29\ubc95\uc740 \uba85\uc2dc\uc801\uc73c\ub85c #include <string> \ub97c \ucd94\uac00\ud558\ub294 \uac83\uc774\ub2e4: #include <iostream> #include <string> using namespace std ; void use () { string s ; cin >> s ; // fine getline ( cin , s ); // fine if ( s == \"surprise\" ) { // fine // ... } }","title":"Example"},{"location":"Source/#note_7","text":"\uc5b4\ub5a4 \ud5e4\ub354\ud30c\uc77c\ub4e4\uc740 \uadf8\uc800 \uc5ec\ub7ec \ud5e4\ub354\ub4e4\uc744 \ub611\uac19\uc740 \ud615\ud0dc\ub85c(\uc77c\uad00\uc801\uc73c\ub85c) \uac00\uc838\uc624\uae30 \uc704\ud574\uc11c\ub9cc \uc874\uc7ac\ud558\uae30\ub3c4 \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4: // basic_std_lib.h: #include <vector> #include <string> #include <map> #include <iostream> #include <random> #include <vector> \uc774\ub807\uac8c \ud558\uba74 \uc0ac\uc6a9\uc790\ub294 \ud55c\ubc88\uc758 #include \ub85c \uc77c\ub828\uc758 \uc120\uc5b8\ub4e4\uc744 \uac00\uc838\uc62c \uc218 \uc788\ub2e4. #include \"basic_std_lib.h\" \uc774 \uaddc\uce59\uc740 \"\ubb35\uc2dc\uc801 include\uac00 \ud3b8\uc758\ub97c \uc704\ud574 \uc0ac\uc6a9\ub418\uae30 \uc704\ud55c \uae30\ub2a5\uc774 \uc544\ub2c8\ub2e4\"\ub77c\ub294 \uaddc\uce59\uc5d0 \ubc18\ub300\ub41c\ub2e4. implicit inclusion is not meant to prevent such deliberate aggregation","title":"Note"},{"location":"Source/#enforcement_9","text":"\uc774 \uaddc\uce59\uc744 \uc801\uc6a9\ud558\ub824\uba74 \uc5b4\ub5a4 \ud5e4\ub354\ud30c\uc77c\uc774 \uc0ac\uc6a9\uc790\uc5d0\uac8c \"\ub178\ucd9c\"\ub418\ub294\uc9c0 \uc54c\uc544\uc57c \ud558\uace0 \uc5b4\ub5a4 \ud30c\uc77c\uc774 \uad6c\ud604\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ub418\ub294\uc9c0 \uc54c\uc544\uc57c \ud55c\ub2e4. Module \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc744\ub54c \uae4c\uc9c0\ub294 \uc88b\uc740 \ud574\uacb0\ubc29\ubc95\uc774 \ub9c8\ub545\ud788 \uc5c6\ub2e4.","title":"Enforcement"},{"location":"Source/#sf11-self-contained","text":"","title":"SF.11: \ud5e4\ub354 \ud30c\uc77c\uc740 \ub3c5\ub9bd\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c(self-contained) \ub9cc\ub4e4\uc5b4\ub77c"},{"location":"Source/#reason_10","text":"\uc0ac\uc6a9\uc131, \ud5e4\ub354\ub294 \ub2e8\uc21c\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc5b4\uc57c \ud558\uba70 \uadf8 \uc790\uc2e0\ub9cc \uc788\uc5b4\ub3c4 \ub3d9\uc791\ud574\uc57c \ud55c\ub2e4. \ud5e4\ub354\ub294 \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\uc744 \ucea1\uc290\ud654\ud574\uc57c \ud55c\ub2e4. \ud5e4\ub354\ub97c \uc0ac\uc6a9\ud558\ub294 \ucabd\uc5d0\uc11c \ud5e4\ub354\uc758 \uc758\uc874\uc131\uc744 \uad00\ub9ac\ud558\uac8c \ud558\uc9c0\ub9c8\ub77c.","title":"Reason"},{"location":"Source/#example_9","text":"#include \"helpers.h\" // helpers.h depends on std::string and includes <string>","title":"Example"},{"location":"Source/#note_8","text":"Failing to follow this results in difficult to diagnose errors for clients of a header.","title":"Note"},{"location":"Source/#enforcement_10","text":"A test should verify that the header file itself compiles or that a cpp file which only includes the header file compiles.","title":"Enforcement"},{"location":"Source/#sf20-namespace","text":"","title":"SF.20: namespace\ub294 \ub17c\ub9ac\uc801 \uad6c\uc870\ub97c \ud45c\ud604\ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Source/#reason_11","text":"???","title":"Reason"},{"location":"Source/#example_10","text":"???","title":"Example"},{"location":"Source/#enforcement_11","text":"???","title":"Enforcement"},{"location":"Source/#sf21-anonymous","text":"","title":"SF.21: \ud5e4\ub354\uc5d0\uc11c \uc774\ub984\uc5c6\ub294(anonymous) \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Source/#reason_12","text":"\ud5e4\ub354 \ud30c\uc77c\uc5d0 \uc788\ub294 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uac70\uc758 \ub300\ubd80\ubd84\uc774 \ubc84\uadf8\uc774\ub2e4.","title":"Reason"},{"location":"Source/#example_11","text":"???","title":"Example"},{"location":"Source/#enforcement_12","text":"\ud5e4\ub354 \ud30c\uc77c\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc744 \ucc3e\uc544\ub0b4 \ud45c\uc2dc\ud55c\ub2e4","title":"Enforcement"},{"location":"Source/#sf22-anonymous-internal-non-exported","text":"","title":"SF.22: \uc774\ub984\uc5c6\ub294(anonymous) \ub124\uc784\uc2a4\ud398\uc774\uc2a4\ub294 \ub0b4\ubd80(internal)/\ub178\ucd9c\uc2dc\ud0a4\uc9c0 \uc54a\ub294(non-exported) \uac1c\uccb4\uc5d0 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Source/#reason_13","text":"\uc5b4\ub5a4 \uc678\ubd80\uc5d0\uc11c\ub3c4 \ub0b4\ubd80\uc758 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc788\ub294 \ud56d\ubaa9\ub4e4\uc5d0 \ucc38\uc870\ud560 \uc218 \uc5c6\ub2e4. \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub294 \ubaa8\ub4e0 \uad6c\ud604\ub4e4 \uc911 \"\uc678\ubd80\uc5d0 \ub178\ucd9c\ub418\ub294\" \ud56d\ubaa9\uc758 \uc815\uc758\ub97c \ube80 \ub098\uba38\uc9c0 \ubaa8\ub450\ub294 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ub123\ub294\ub2e4 \uc0dd\uac01\ud558\ub77c.","title":"Reason"},{"location":"Source/#example_12","text":"API \ud074\ub798\uc2a4\uc640 \uadf8 \uba64\ubc84\ub4e4\uc740 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \uc788\uc744 \uc218 \uc5c6\uc9c0\ub9cc, \uad6c\ud604 \uc18c\uc2a4 \ud30c\uc77c\uc5d0 \uc815\uc758\ub41c \"\ub3c4\uc6b0\ubbf8\" \ud074\ub798\uc2a4\ub098 \ud568\uc218\ub4e4\uc758 \uacbd\uc6b0 \uc775\uba85 \ub124\uc784\uc2a4\ud398\uc774\uc2a4 \uc601\uc5ed\uc5d0 \uc815\uc758\ub418\uc5b4\uc57c \ud55c\ub2e4. ???","title":"Example"},{"location":"Source/#enforcement_13","text":"???","title":"Enforcement"},{"location":"Templates/","text":"T: \ud15c\ud50c\ub9bf\uacfc \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d(generic programming)\uc740 \ud0c0\uc785, \uac12, \uc54c\uace0\ub9ac\uc998\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub294 \ud0c0\uc785\uacfc \uc54c\uace0\ub9ac\uc998 \uc744 \uc0ac\uc6a9\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ub9d0\ud55c\ub2e4. C++\uc5d0\uc11c\ub294 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \uc5b8\uc5b4\uc801 \uc7a5\uce58\ub85c template \uc744 \uc9c0\uc6d0\ud558\uace0 \uc788\ub2e4. \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ud568\uc218\ub4e4\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc778\uc790\ub4e4\uc740 (\uc77c\ub828\uc758 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub530\ub77c\uc11c) \uac01\uac01\uc758 \ud0c0\uc785\uacfc \uac12\uc774 \uaddc\uc815\ub41c\ub2e4. C++\uc5d0\uc11c\ub294 \uc774\ub7f0 \uc694\uad6c\uc0ac\ud56d\uc744 \ucee8\uc149(concepts)\uc774\ub77c\ub294 \ucef4\ud30c\uc77c \uc2dc\uac04 \uac80\uc0ac\ub97c \uc0ac\uc6a9\ud574 \ucf54\ub4dc\uc5d0 \ub098\ud0c0\ub098\ub3c4\ub85d \ud55c\ub2e4. \ud15c\ud50c\ub9bf\uc740 \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d(meta-programming)\uc5d0\ub3c4 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4; \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc774\ub780, \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\ub294(compose) \ud504\ub85c\uadf8\ub7a8\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c \uc911\uc2ec\uc774 \ub418\ub294 \uc0dd\uac01\uc740 \"\ucee8\uc149\"\uc774\ub2e4; \uc774\ub294 \ud15c\ud50c\ub9bf \uc2e4\ud589\uc778\uc790\uc5d0 \ub300\ud55c \uc694\uad6c\uc0ac\ud56d\ub4e4\uc744 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \uae30\uc220\ud558\ub294 \uac83\uc774\ub2e4. \"\ucee8\uc149(Concepts)\"\uc740 ISO TS\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4: concepts . \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\uc149\ub4e4\uc758 \ucd08\uc548\uc740 \ub2e4\ub978 ISO TS\uc5d0 \uc788\ub2e4: ranges \ucee8\uc149\uc740 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\uc5d0 \ub530\ub77c, \uc608\uc2dc\ub4e4\uc5d0\uc11c \ucee8\uc149 \ubd80\ubd84\uc740 \uc815\ud615\ud654\ub41c \uc8fc\uc11d\uc73c\ub85c\ub9cc \ud45c\uae30\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc8fc\uc11d\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub2e4: \ud15c\ud50c\ub9bf \uc0ac\uc6a9 \uaddc\uce59 \uc694\uc57d: T.1: \ucf54\ub4dc\uc758 \ucd94\uc0c1\ud654 \uc218\uc900\uc744 \ub192\uc774\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.2: \uc5ec\ub7ec\uac00\uc9c0 \uc2e4\ud589\uc778\uc790 \ud0c0\uc785\ub4e4\uc5d0 \uc801\uc6a9\ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ud45c\ud604\ud560 \ub54c \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.3: \ucee8\ud14c\uc774\ub108\uc640 \uad6c\uac04(range)\uc744 \ud45c\ud604\ud560\ub54c \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.4: \ubb38\ubc95 \ud2b8\ub9ac \uc870\uc791\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.5: \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uac1c\uccb4\uc9c0\ud5a5 \uae30\uc220\uc744 \uacb0\ud569\ud574 \ube44\uc6a9\uc774 \uc544\ub2cc \uac15\uc810\uc744 \uc99d\ud3ed\uc2dc\ucf1c\ub77c \ucee8\uc149 \uc0ac\uc6a9 \uaddc\uce59 \uc694\uc57d: T.10: \ubaa8\ub4e0 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ucee8\uc149\uc744 \uba85\uc2dc\ud558\ub77c T.11: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0 \ud45c\uc900 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub77c T.12: \uc9c0\uc5ed \ubcc0\uc218\uc5d0 auto \ubcf4\ub2e4\ub294 \ucee8\uc149\uc758 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c T.13: \ub2e8\uc21c\ud558\uac70\ub098 \ub2e8\uc77c \ud0c0\uc785\uc744 \uc778\uc790\ub85c \ubc1b\ub294 \ucee8\uc149\uc5d0\ub294 \uc57d\uc2dd \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c ??? \ucee8\uc149 \uc815\uc758 \uaddc\uce59 \uc694\uc57d: T.20: \uc720\uc758\ubbf8\ud55c \uc758\ubbf8\uad6c\uc870\uac00 \uc5c6\ub294 \"\ucee8\uc149\"\uc744 \ud53c\ud558\ub77c T.21: \ucee8\uc149\uc5d0\uc11c\ub294 \uc5f0\uc0b0\ub4e4\uc758 \uc644\uc804\ud55c \uc9d1\ud569(complete set)\uc744 \uc694\uad6c\ud558\ub77c T.22: \ucee8\uc149\uc5d0\uc11c \uc4f8 \uc218 \uc788\ub3c4\ub85d \uacf5\ub9ac\ub97c \uba85\uc2dc\ud558\ub77c T.23: \uc815\uc81c\ub41c \ucee8\uc149(refined concept)\uc740 \ub354 \ubc94\uc6a9\uc801\uc778 \uacbd\uc6b0\uc5d0 \uc0c8\ub85c\uc6b4 \ud328\ud134\uc744 \ub354\ud574\uc11c \ucc28\ubcc4\ud654\ud558\ub77c T.24: \uc758\ubbf8\uad6c\uc870\ub9cc \ub2e4\ub978 \ucee8\uc149\uc740 Tag \ud074\ub798\uc2a4 \ud639\uc740 Traits\ub97c \uc0ac\uc6a9\ud574 \ucc28\ubcc4\ud654\ud558\ub77c T.25: \uc81c\uc57d\uc774 \uc11c\ub85c \ub300\ube44\ub418\uc9c0 \uc54a\uac8c \ud558\ub77c T.26: \ub2e8\uc21c\ud55c \ubb38\ubc95\ubcf4\ub2e4\ub294 \uc0ac\uc6a9 \ud328\ud134\uc744 \uace0\ub824\ud574\uc11c \ucee8\uc149\uc744 \uc815\uc758\ud558\ub77c ??? \ud15c\ud50c\ub9bf \uc778\ud130\ud398\uc774\uc2a4 \uaddc\uce59 \uc694\uc57d: T.40: \uc54c\uace0\ub9ac\uc998\uc5d0 \uc5f0\uc0b0(operation)\uc744 \uc804\ub2ec\ud560\ub54c\ub294 \ud568\uc218 \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub77c T.41: \ud15c\ud50c\ub9bf\uc758 \ucee8\uc149\uc5d0\uc11c\ub294 \uc624\uc9c1 \ud544\uc694\ud55c \ud2b9\uc131(property)\ub9cc \uc694\uad6c\ud558\ub77c T.42: \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc744 \uad6c\ud604\uc0ac\ud56d\uc744 \uc228\uae30\uac70\ub098 \ud45c\uae30\ub97c \uac04\ub2e8\ud788 \ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c T.43: \ud0c0\uc785\uc5d0 \ubcc4\uba85\uc744 \ubd99\uc77c\ub54c typedef \ubcf4\ub2e4\ub294 using \uc744 \uc0ac\uc6a9\ud558\ub77c T.44: (\ud560 \uc218 \uc788\ub2e4\uba74) \ud568\uc218 \ud15c\ud50c\ub9bf\uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc758 \uc778\uc790 \ud0c0\uc785\uc744 \uc720\ub3c4(deduce)\ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c T.46: \ud15c\ud50c\ub9bf \uc778\uc790\ub4e4\uc740 \ucd5c\uc18c\ud55c Regular \ud639\uc740 SemiRegular \ud558\ub3c4\ub85d \ud558\ub77c T.47: \uc77c\ubc18\uc801\uc778 \uc774\ub984\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74\uc11c \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\uace0 \uc81c\uc57d\uc774 \uac70\uc758 \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc740 \uc9c0\uc591\ud558\ub77c T.48: \ucef4\ud30c\uc77c\ub7ec\uac00 \ucee8\uc149\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 enable_if \ub85c \uc720\uc0ac\ud558\uac8c \uc791\uc131\ud558\ub77c T.49: \uac00\ub2a5\ud558\ub2e4\uba74 \ud0c0\uc785 \uc81c\uac70\ub294 \ud53c\ud558\ub77c \ud15c\ud50c\ub9bf \uc815\uc758 \uaddc\uce59 \uc694\uc57d: T.60: \ubb38\ub9e5\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c8 \uc218 \uc788\ub294 \ud15c\ud50c\ub9bf\uc740 \ucd5c\uc18c\ud654 \ud558\ub77c T.61: \ub108\ubb34 \ub9ce\uc740 \uba64\ubc84\ub97c \ub9e4\uac1c\ubcc0\uc218\ud654 \ud558\uc9c0 \ub9d0\ub77c (SCARY) T.62: \uc885\uc18d\uc801\uc774\uc9c0 \uc54a\uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf \uba64\ubc84\ub4e4\uc740 \ud15c\ud50c\ub9bf\uc774 \uc544\ub2cc \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ubc30\uce58\ud558\ub77c T.64: \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc758 \ub300\uc548\uc801(alternative) \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 \ud2b9\uc218\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c T.65: \ud568\uc218\uc758 \ub300\uc548\uc801(alternative) \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 Tag dispatch\ub97c \uc0ac\uc6a9\ud558\ub77c T.67: \uc815\uaddc\uc801\uc774\uc9c0 \uc54a\uc740 \ud0c0\uc785(irregular types)\ub4e4\uc758 \ub300\uc548\uc801 \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 \ud2b9\uc218\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c T.68: \ubaa8\ud638\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud15c\ud50c\ub9bf\uc5d0\uc11c\ub294 () \ubcf4\ub2e4\ub294 {} \ub97c \uc0ac\uc6a9\ud558\ub77c T.69: \uc81c\uc57d\uc5c6\ub294(unqualified) \ube44-\uba64\ubc84 \ud568\uc218 \ud638\ucd9c\uc740 \ud574\ub2f9 \ubd80\ubd84\uc774 \ubcc0\uacbd\ub420 \uc218 \uc788\ub3c4\ub85d \ud558\ub824\ub294\uac8c \uc544\ub2c8\ub77c\uba74 \ud15c\ud50c\ub9bf \ub0b4\uc5d0\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c \ud15c\ud50c\ub9bf\uacfc \uc0c1\uc18d\uad6c\uc870 \uaddc\uce59 \uc694\uc57d: T.80: \ucda9\ubd84\ud55c \uace0\ub824 \uc5c6\uc774 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \ud15c\ud50c\ub9bf\uc73c\ub85c \ubc14\uafb8\uc9c0 \ub9d0\uc544\ub77c T.81: \uacc4\uce35\uad6c\uc870\uc640 \ubc30\uc5f4\uc744 \uc11e\uc5b4\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c T.82: \uac00\uc0c1 \ud568\uc218\ub97c \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacc4\uce35 \uad6c\uc870\ub97c \uc81c\uac70\ud558\ub77c(linearize) T.83: \uba64\ubc84 \ud568\uc218\ub294 \ud15c\ud50c\ub9bf\uc774\uba74\uc11c virtual\ud55c \ud568\uc218\ub85c \uc120\uc5b8\ud574\uc120 \uc548\ub41c\ub2e4 T.84: \uc548\uc815\ub41c ABI\ub97c \uc9c0\uc6d0\ud558\uace0\uc790 \ud560\ub54c\ub294 \ud575\uc2ec \uad6c\ud604\uc5d0 \ud15c\ud50c\ub9bf\uc744 \uc4f0\uc9c0 \ub9c8\ub77c ??? \uac00\ubcc0\uc778\uc790 \ud15c\ud50c\ub9bf\uaddc\uce59 \uc694\uc57d: T.100: \ub2e4\uc591\ud55c \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uac00\ubcc0\uc801\uc778 \uc218\uc758 \uc2e4\ud589\uc778\uc790\ub4e4\uc744 \ucc98\ub9ac\ud558\ub294 \ud568\uc218\uac00 \ud544\uc694\ud560 \ub54c\ub294 \uac00\ubcc0 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.101: ??? How to pass arguments to a variadic template ??? T.102: ??? How to process arguments to a variadic template ??? T.103: \ub3d9\uc77c \ud0c0\uc785\uc758 \uc2e4\ud589\uc778\uc790\ub4e4\uc744 \uc704\ud574\uc11c \uac00\ubcc0\ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ??? \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d \uaddc\uce59 \uc694\uc57d: T.120: \uc815\ub9d0 \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c T.121: \ucee8\uc149\uc744 \ubaa8\ubc29(emulate)\ud558\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c T.122: \ud15c\ud50c\ub9bf(\ub300\ubd80\ubd84 \ud15c\ud50c\ub9bf \ubcc4\uce6d)\uc740 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud0c0\uc785\uc744 \uacc4\uc0b0\ud560\ub54c \uc0ac\uc6a9\ud558\ub77c T.123: \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uac12\uc744 \uacc4\uc0b0\ud55c\ub2e4\uba74 constexpr \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c T.124: \uac00\ub2a5\ud55c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 TMP \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c T.125: \ub9cc\uc57d \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 TMP \uae30\ub2a5\uc73c\ub85c \ucda9\ubd84\ud558\uc9c0 \uc54a\ub2e4\uba74, \uac00\ub2a5\ud55c \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c ??? \ub2e4\ub978 \ud15c\ud50c\ub9bf \uaddc\uce59 \uc694\uc57d: T.140: \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\uc131\uc774 \uc788\ub294 \ubaa8\ub4e0 \uc5f0\uc0b0\uc740 \uc774\ub984\uc744 \ubd99\uc5ec\ub77c T.141: \ub2e8\uc21c\ud55c \ud568\uc218 \uac1c\uccb4\uac00 \ud55c\uacf3\uc5d0\uc11c\ub9cc \ud544\uc694\ud558\ub2e4\uba74 \uc774\ub984\uc5c6\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c T.142: \ud15c\ud50c\ub9bf \ubcc0\uc218\ub85c \ud45c\uae30\ub97c \uac04\ub2e8\ud788 \ud558\ub77c T.143: \ubc94\uc6a9\uc801\uc774\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub294 \uacc4\ud68d\uc5c6\uc774 \uc791\uc131\ud558\uc9c0 \ub9d0\uc544\ub77c T.144: \ud568\uc218 \ud15c\ud50c\ub9bf\uc740 \ud2b9\uc218\ud654\ud558\uc9c0 \ub9d0\ub77c T.150: \ud574\ub2f9 \ud074\ub798\uc2a4\uac00 \uac1c\ub150\uc5d0 \ubd80\ud569\ud558\ub294\uc9c0\ub97c static_assert \ub97c \uc0ac\uc6a9\ud574 \ud655\uc778\ud558\ub77c ??? T.gp: \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d(generic programming) \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ud0c0\uc785, \uac12, \uc54c\uace0\ub9ac\uc998\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub294 \ud0c0\uc785\uacfc \uc54c\uace0\ub9ac\uc998 \uc744 \uc0ac\uc6a9\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ub9d0\ud55c\ub2e4. T.1: \ucf54\ub4dc\uc758 \ucd94\uc0c1\ud654 \uc218\uc900\uc744 \ub192\uc774\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uc77c\ubc18\ud654. \uc7ac\uc0ac\uc6a9\uc131. \ud6a8\uc728\uc131. \uc0ac\uc6a9\uc790 \ud0c0\uc785\uc758 \uc77c\uad00\ub41c \uc815\uc758\ub97c \uc7a5\ub824\ud55c\ub2e4. Example, bad \uac1c\ub150\uc801\uc73c\ub85c, \uc544\ub798 \uc694\uad6c\uc0ac\ud56d\uc740 \uc798\ubabb\ub410\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 T \ub294 \"\uc99d\uac00\ub420 \uc218 \uc788\ub2e4\"\uac70\ub098 \"\ucd94\uac00\ub420 \uc218 \uc788\ub2e4\"\ub294 \ud558\uc704\ub808\ubca8 \ucee8\uc149 \uadf8 \uc774\uc0c1\uc774\ub2e4: template < typename T > // requires Incrementable<T> T sum1 ( vector < T >& v , T s ) { for ( auto x : v ) s += x ; return s ; } template < typename T > // requires Simple_number<T> T sum2 ( vector < T >& v , T s ) { for ( auto x : v ) s = s + x ; return s ; } Incrementable \uc774 + \ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uace0, Simple_number \uc774 += \ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \uac00\uc815\ud558\uba74 sum1 \uacfc sum2 \uc758 \uad6c\ud604\uc744 \uacfc\ub3c4\ud558\uac8c \uc81c\uc57d\ud574\uc654\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 \uc77c\ubc18\ud654\ub97c \uc704\ud574 \uae30\ud68c\ub97c \ub193\uce5c \uac83\uc774\ub2e4. Example template < typename T > // requires Arithmetic<T> T sum ( vector < T >& v , T s ) { for ( auto x : v ) s += x ; return s ; } Arithmetic \ucee8\uc149\uc774 + \uc640 += \ub97c \ubaa8\ub450 \uc694\uad6c\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uba74, \uc6b0\ub9ac\ub294 sum \uc758 \uc0ac\uc6a9\uc790\uac00 \ub450 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud558\ub294 \uc0b0\uc220 \ud0c0\uc785\uc744 \uc81c\uacf5\ud558\ub3c4\ub85d \uc81c\uc57d\ud55c \uac83\uc774\ub2e4. \uc774\ub294 \uc5f0\uc0b0\uc744 \uad6c\ud604\uc5d0 \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc694\uad6c\ud55c \uac83\uc740 \uc544\ub2c8\ub2e4, \ud558\uc9c0\ub9cc \uc774\ub294 \uc54c\uace0\ub9ac\uc998\uc758 \uad6c\ud604\uc790\uc5d0\uac8c \ud544\uc694\ud55c \ub9cc\ud07c\uc758 \uc790\uc720\ub97c \ubd80\uc5ec\ud558\uba70 Arithmetic \ud0c0\uc785\uc774 \uc54c\uace0\ub9ac\uc998 \uc804\ubc18\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc99d\ud55c\ub2e4. \ub354 \uc77c\ubc18\uc801\uc778, \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub97c \uc704\ud574\uc11c, vector \uc640 \uac19\uc740 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108\ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc544\ub2cc Container \ub610\ub294 Range \uc640 \uac19\uc740 \ub354 \uc77c\ubc18\uc801\uc778 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\ub2e4. Note \ub9cc\uc57d \ud15c\ud50c\ub9bf\uc774 \ud558\ub098\uc758 \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c \uc815\ud655\ud788 \ud558\ub098\uc758 \uc5f0\uc0b0\ub9cc\uc744 \uc694\uad6c\ud55c\ub2e4\uba74 (\uc608\ucee8\ub300 = \uc640 + \ub97c \uc694\uad6c\ud558\uc9c0 \uc54a\uace0 += \ub9cc \uc694\uad6c\ud558\ub294 \uac83), \uc720\uc9c0\ubcf4\uc218\ub97c \uc9c0\ub098\uce58\uac8c \uc81c\uc57d\ud55c \uac83\uc774\ub2e4. \uc6b0\ub9ac\uc758 \uc758\ub3c4\ub294 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ub300\ud55c \uc694\uad6c\uc0ac\ud56d\uc744 \ucd5c\uc18c\ud654\ud558\ub294 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uad6c\ud604\uc5d0\uc11c \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc694\uad6c\ud558\ub294 \uac83\uc740 \uc720\uc758\ubbf8\ud55c \ucee8\uc149\uc77c \uac00\ub2a5\uc131\uc774 \ub0ae\ub2e4. We aim to minimize requirements on template arguments, but the absolutely minimal requirements of an implementation is rarely a meaningful concept. Note \ud15c\ud50c\ub9bf\uc740 \ubaa8\ub4e0 \uac83\uc744 \ud45c\ud604\ud560 \uc218 \uc788\ub2e4 ( \ud29c\ub9c1 \uc644\uc804\uc131 \uc744 \uc9c0\ub2cc\ub2e4). \uadf8\ub7ec\ub098 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ubaa9\ud45c\ub294 \ube44\uc2b7\ud55c \ud2b9\uc131(property)\uc744 \uac00\uc9c4 \ud0c0\uc785\uc9d1\ud569\uc5d0 \ub300\ud55c \uc5f0\uc0b0/\uc54c\uace0\ub9ac\uc998\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uc77c\ubc18\ud654\ud558\ub294 \uac83\uc774\ub2e4. Note \uc8fc\uc11d\ucc98\ub9ac\ub41c requires \ub294 concepts \ub97c \uc0ac\uc6a9\ud558\ub294 \ubd80\ubd84\uc774\ub2e4. \"\ucee8\uc149(Concepts)\"\uc740 ISO TS\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4: concepts . \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\uc149\ub4e4\uc758 \ucd08\uc548\uc740 \ub2e4\ub978 ISO TS\uc5d0 \uc788\ub2e4: ranges \ucee8\uc149\uc740 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\uc5d0 \ub530\ub77c, \uc608\uc2dc\ub4e4\uc5d0\uc11c \ucee8\uc149 \ubd80\ubd84\uc740 \uc815\ud615\ud654\ub41c \uc8fc\uc11d\uc73c\ub85c\ub9cc \ud45c\uae30\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc8fc\uc11d\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub2e4: Enforcement \ucee8\uc149\uc5c6\uc774 \ud2b9\uc815 \uc5f0\uc0b0\uc790\ub97c \ubc14\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uac19\uc740, \uacfc\ub3c4\ud558\uac8c \ub2e8\uc21c\ud55c \uc694\uad6c\uc0ac\ud56d\uc744 \uac00\uc9c4 \uc54c\uace0\ub9ac\uc998\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \"\uacfc\ub3c4\ud558\uac8c \ub2e8\uc21c\ud55c\" \ucee8\uc149 \uc815\uc758\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\uc9c0 \uc54a\ub294\ub2e4; \ub354 \uc4f8\ub9cc\ud55c \ucee8\uc149\uc744 \uc704\ud574 \ub9cc\ub4e4\uc5c8\uc744\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. T.2: \uc5ec\ub7ec\uac00\uc9c0 \uc2e4\ud589\uc778\uc790 \ud0c0\uc785\ub4e4\uc5d0 \uc801\uc6a9\ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ud45c\ud604\ud560 \ub54c \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uc77c\ubc18\ud654. \uc18c\uc2a4 \ucf54\ub4dc\uc758 \ud06c\uae30\ub97c \ucd5c\uc18c\ud654\ud55c\ub2e4. \uc0c1\ud638\uc6b4\uc6a9\uc131. \uc7ac\uc0ac\uc6a9. Example STL\uc758 \uae30\ubcf8\uc0ac\ud56d\uc774\ub2e4. find \uc54c\uace0\ub9ac\uc998\uc740 \ubaa8\ub4e0 \uc885\ub958\uc758 \uc785\ub825 \ubc94\uc704\uc5d0\uc11c \ubb38\uc81c\uc5c6\uc774 \uc791\ub3d9\ud55c\ub2e4: template < typename Iter , typename Val > // requires Input_iterator<Iter> // && Equality_comparable<Value_type<Iter>, Val> Iter find ( Iter b , Iter e , Val v ) { // ... } Note \ud55c\uac1c \uc774\uc0c1\uc758 \ud15c\ud50c\ub9bf \uc778\uc790\ud0c0\uc785\uc5d0 \ub300\ud55c \ud604\uc2e4\uc801\uc778 \ud544\uc694\uac00 \uc5c6\ub2e4\uba74 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uacfc\ub3c4\ud558\uac8c \ucd94\uc0c1\ud654\ud558\uc9c0 \ub9c8\ub77c. Enforcement ??? \uc5b4\ub835\ub2e4, \uc0ac\ub78c\uc774 \ud574\uc57c\ud560\uc218\ub3c4 \uc788\ub2e4 T.3: \ucee8\ud14c\uc774\ub108\uc640 \uad6c\uac04(range)\uc744 \ud45c\ud604\ud560\ub54c \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ucee8\ud14c\uc774\ub108\ub294 \uc6d0\uc18c\ub4e4\uc758 \ud0c0\uc785\uc744 \ud544\uc694\ub85c \ud558\uace0, \uc774\ub294 \ud15c\ud50c\ub9bf \uc778\uc790\ub85c \ud45c\ud604\ud558\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc774\ub2e4. \uc7ac\uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\uace0, \ud0c0\uc785 \uc548\uc804(Type Safe)\ud558\ub2e4. \uc774\ub294 \ubd88\uc548\uc815\ud558\uace0 \ube44\ud6a8\uc728\uc801\uc778 \ud574\uacb0\ubc29\ubc95\uc744 \ud53c\ud55c\ub2e4. STL\uc740 \uc774 \uc811\uadfc\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4. Example template < typename T > // requires Regular<T> class Vector { // ... T * elem ; // points to sz Ts int sz ; }; Vector < double > v ( 10 ); v [ 7 ] = 9.9 ; Example, bad class Container { // ... void * elem ; // points to size elements of some type int sz ; }; Container c ( 10 , sizeof ( double )); (( double * ) c . elem )[ 7 ] = 9.9 ; \uc774 \ucf54\ub4dc\ub294 \ud504\ub85c\uadf8\ub798\uba38\uc758 \uc758\ub3c4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ud45c\ud604\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub610\ud55c \ud0c0\uc785\uc2dc\uc2a4\ud15c\uacfc \ucd5c\uc801\ud654\uae30(optimizer)\uac00 \ud504\ub85c\uadf8\ub7a8\uc758 \uad6c\uc870\ub97c \uc54c \uc218 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \uba54\ud06c\ub85c \ub4a4\uc5d0\uc11c void* \ub97c \uc228\uae30\ub294 \uac83\uc740 \uadf8\uc800 \ubb38\uc81c\ub97c \uc5b4\ub835\uac8c \ud560 \ubfd0\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ud63c\ub780\uc744 \uc57c\uae30\ud55c\ub2e4. Exceptions \uace0\uc815\ub41c ABI \uc9c0\uc6d0 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud544\uc694\ud558\ub2e4\uba74 \uae30\ubcf8 \uad6c\ud604\uc744 \uc81c\uacf5\ud558\uace0, \uadf8 \ud615\ud0dc\uc5d0 \ub530\ub77c \ud0c0\uc785\uc5d0 \uc548\uc804\ud55c \ud15c\ud50c\ub9bf\uc744 \ud45c\ud604\ud574\uc57c \ud55c\ub2e4. \uc548\uc815\ub41c \uae30\ubcf8 \ud074\ub798\uc2a4 \uaddc\uce59 \uc744 \ucc38\uc870\ud558\ub77c. Enforcement void* \uacfc \ud558\uc704\ub808\ubca8 \uad6c\ud604\ucf54\ub4dc \uc678\uc5d0 \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. T.4: \ubb38\ubc95 \ud2b8\ub9ac \uc870\uc791\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c Reason ??? Example ??? Exceptions ??? T.5: \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uac1c\uccb4\uc9c0\ud5a5 \uae30\uc220\uc744 \uacb0\ud569\ud574 \ube44\uc6a9\uc774 \uc544\ub2cc \uac15\uc810\uc744 \uc99d\ud3ed\uc2dc\ucf1c\ub77c Reason \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uac1c\uccb4\uc9c0\ud5a5 \uae30\uc220\uc740 \uc0c1\ud638\ubcf4\uc644\uc801(complementary)\uc774\ub2e4. Example \uc815\uc801\uc778 \uac83\uc740 \ub3d9\uc801\uc778 \uac83\uc744 \ub3d5\ub294\ub2e4: \ub3d9\uc801\uc73c\ub85c \ub2e4\ud615\uc801\uc778 \ud0c0\uc785 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574 \uc815\uc801 \ub2e4\ud615\uc131\uc744 \uc0ac\uc6a9\ud558\ub77c. class Command { // pure virtual functions }; // implementations template < /*...*/ > class ConcreteCommand : public Command { // implement virtuals }; Example \ub3d9\uc801\uc778 \uac83\uc740 \uc815\uc801\uc778 \uac83\uc744 \ub3d5\ub294\ub2e4: \uc77c\ubc18\uc801\uc774\uace0, \ud3b8\ub9ac\ud558\uba70, \uc815\uc801\uc73c\ub85c \uacb0\ud569\ub41c(bound) \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud558\ub77c. \ub0b4\ubd80\uc801\uc73c\ub85c\ub294 \ub3d9\uc801\uc73c\ub85c \uad6c\ud604\ud558\ub77c. \uadf8\ub807\uac8c \ud568\uc73c\ub85c\uc368 \uc77c\uad00\uc801\uc778 \uac1c\uccb4\ub97c \ub9cc\ub4e4\uc5b4\ub77c(offer a uniform object layout). \uc608\uc2dc\ub85c\ub294 std::shared_ptr \uc758 \uc81c\uac70 \ud568\uc218(deleter) \ud0c0\uc785 \uc81c\uac70\ub97c \ub4e4 \uc218 \uc788\ub2e4. (\ud558\uc9c0\ub9cc \ud0c0\uc785 \uc81c\uac70\ub97c \ub0a8\uc6a9\ud558\uc9c0 \ub9c8\ub77c ) Note \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc5d0 \uc788\ub294 \ube44\uc0c1\uc18d\ud568\uc218(nonvirtual function)\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba74 \uc0dd\uc131\ub418\uc9c0(instantiated) \uc54a\ub294\ub2e4. -- \uac00\uc0c1\ud568\uc218\ub294 \uc5b8\uc81c\ub098 \uc2e4\uccb4\ud654(instantiate)\ub41c\ub2e4. \uc774\ub294 \ucf54\ub4dc\ud06c\uae30\ub97c \ub298\ub9ac\uace0 \ud544\uc694\uce58\ub3c4 \uc54a\ub294 \ud568\uc218\ub97c \uc2e4\uccb4\ud654\ud568\uc73c\ub85c\uc368 \uc77c\ubc18\ud654 \ud0c0\uc785\uc5d0 \ub300\ud55c \uc81c\uc57d\uc744 \uc2ec\ud654\uc2dc\ud0ac\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. See also ref ??? ref ??? ref ??? Enforcement \ubcf4\ub2e4 \uad6c\uccb4\uc801\uc778 \uaddc\uce59\ub4e4\uc740 \uc704\uc758 \ucc38\uc870\ub9c1\ud06c\ub85c \ud655\uc778\ud558\ub77c. T.concepts: \ucee8\uc149 \uaddc\uce59\ub4e4 \ucee8\uc149(Concept)\uc740 \ud15c\ud50c\ub9bf \uc778\uc790\ub4e4\uc5d0 \ub300\ud55c \uc694\uad6c\uc0ac\ud56d\uc744 \uc9c0\uc815\ud558\uae30 \uc704\ud55c \uae30\ub2a5\uc774\ub2e4. \ucee8\uc149\uc740 ISO technical specification \uc774\uc9c0\ub9cc, \ud604\uc7ac\ub294 GCC\ub9cc \uc774\ub97c \uc9c0\uc6d0\ud558\uace0 \uc788\ub2e4. \ucee8\uc149\uc740 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c\uc758 \uc0ac\uace0\uc5d0 \uc911\uc694\ud55c \uc5ed\ud560\uc744 \ud558\uba70, \ubbf8\ub798\uc758 (\ud45c\uc900\uc744 \ube44\ub86f\ud55c) C++ \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \ub9ce\uc740 \uc791\uc5c5\uc758 \uae30\ucd08\uac00 \ub420 \uac83\uc774\ub2e4. \uc774 \ud56d\ubaa9\uc758 \uaddc\uce59\ub4e4\uc740 \ucee8\uc149\uc774 \uc9c0\uc6d0\ub41c\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4 \ucee8\uc149 \uc0ac\uc6a9 \uaddc\uce59 \uc694\uc57d: T.10: \ubaa8\ub4e0 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ucee8\uc149\uc744 \uba85\uc2dc\ud558\ub77c T.11: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0 \ud45c\uc900 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub77c T.12: \uc9c0\uc5ed \ubcc0\uc218\uc5d0 auto \ubcf4\ub2e4\ub294 \ucee8\uc149\uc758 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c T.13: \ub2e8\uc21c\ud558\uac70\ub098 \ub2e8\uc77c \ud0c0\uc785\uc744 \uc778\uc790\ub85c \ubc1b\ub294 \ucee8\uc149\uc5d0\ub294 \uc57d\uc2dd \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c ??? \ucee8\uc149 \uc815\uc758 \uaddc\uce59 \uc694\uc57d: T.20: \uc720\uc758\ubbf8\ud55c \uc758\ubbf8\uad6c\uc870\uac00 \uc5c6\ub294 \"\ucee8\uc149\"\uc744 \ud53c\ud558\ub77c T.21: \ucee8\uc149\uc5d0\uc11c\ub294 \uc5f0\uc0b0\ub4e4\uc758 \uc644\uc804\ud55c \uc9d1\ud569(complete set)\uc744 \uc694\uad6c\ud558\ub77c T.22: \ucee8\uc149\uc5d0\uc11c \uc4f8 \uc218 \uc788\ub3c4\ub85d \uacf5\ub9ac\ub97c \uba85\uc2dc\ud558\ub77c T.23: \uc815\uc81c\ub41c \ucee8\uc149(refined concept)\uc740 \ub354 \ubc94\uc6a9\uc801\uc778 \uacbd\uc6b0\uc5d0 \uc0c8\ub85c\uc6b4 \ud328\ud134\uc744 \ub354\ud574\uc11c \ucc28\ubcc4\ud654\ud558\ub77c T.24: \uc758\ubbf8\uad6c\uc870\ub9cc \ub2e4\ub978 \ucee8\uc149\uc740 Tag \ud074\ub798\uc2a4 \ud639\uc740 Traits\ub97c \uc0ac\uc6a9\ud574 \ucc28\ubcc4\ud654\ud558\ub77c T.25: \uc81c\uc57d\uc774 \uc11c\ub85c \ub300\ube44\ub418\uc9c0 \uc54a\uac8c \ud558\ub77c T.26: \ub2e8\uc21c\ud55c \ubb38\ubc95\ubcf4\ub2e4\ub294 \uc0ac\uc6a9 \ud328\ud134\uc744 \uace0\ub824\ud574\uc11c \ucee8\uc149\uc744 \uc815\uc758\ud558\ub77c ??? T.con-use: \ucee8\uc149 \uc0ac\uc6a9(Concept use) T.10: \ubaa8\ub4e0 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ucee8\uc149\uc744 \uba85\uc2dc\ud558\ub77c Reason \uc815\ud655\ud568\uacfc \uac00\ub3c5\uc131. \ud15c\ud50c\ub9bf \uc778\uc790\uc758 \uac00\uc815\ub41c \uc758\ubbf8(\ubb38\ubc95\uacfc \uc758\ubbf8\uad6c\uc870)\ub294 \ud15c\ud50c\ub9bf \uc778\ud130\ud398\uc774\uc2a4\uc758 \uae30\ubcf8\uc774\ub2e4. \ucee8\uc149\uc740 \ubb38\uc11c\ud654\uc640 \ud15c\ud50c\ub9bf\uc6a9 \uc624\ub958 \ucc98\ub9ac\ub97c \uacbd\uc774\uc801\uc73c\ub85c \uac1c\uc120\uc2dc\ud0a8\ub2e4. \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \uc801\uc6a9\ub418\ub294 \uac1c\ub150\uc744 \uae30\uc220\ud558\ub294 \uac83\uc740 \uac15\ub825\ud55c \ub514\uc790\uc778 \ub3c4\uad6c\uac00 \ub41c\ub2e4. Example template < typename Iter , typename Val > // requires Input_iterator<Iter> // && Equality_comparable<Value_type<Iter>, Val> Iter find ( Iter b , Iter e , Val v ) { // ... } \uc704\uc640 \uac19\uc740 \uc758\ubbf8\ub97c \uac00\uc9c0\uc9c0\ub9cc, \uc880 \ub354 \uac04\uacb0\ud558\uac8c \ud558\uc790\uba74: template < Input_iterator Iter , typename Val > // requires Equality_comparable<Value_type<Iter>, Val> Iter find ( Iter b , Iter e , Val v ) { // ... } Note \"\ucee8\uc149(Concepts)\"\uc740 ISO TS\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4: concepts . \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\uc149\ub4e4\uc758 \ucd08\uc548\uc740 \ub2e4\ub978 ISO TS\uc5d0 \uc788\ub2e4: ranges \ucee8\uc149\uc740 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\uc5d0 \ub530\ub77c, \uc608\uc2dc\ub4e4\uc5d0\uc11c \ucee8\uc149 \ubd80\ubd84\uc740 \uc815\ud615\ud654\ub41c \uc8fc\uc11d\uc73c\ub85c\ub9cc \ud45c\uae30\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc8fc\uc11d\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub2e4: template < typename Iter , typename Val > requires Input_iterator < Iter > && Equality_comparable < Value_type < Iter > , Val > Iter find ( Iter b , Iter e , Val v ) { // ... } Note typename (\ub610\ub294 auto )\ub294 \uac00\uc7a5 \uc81c\uc57d\uc774 \uc791\uc740 \ucee8\uc149\uc774\ub2e4. \"\uc774 \uc778\uc790\ub294 \uc784\uc758\uc758 \ud0c0\uc785\uc774\ub2e4\"\uc778 \uacbd\uc6b0\ub97c \uc81c\uc678\ud558\uace4 \uac00\ub2a5\ud55c \uc801\uac8c \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d \ucf54\ub4dc\uc758 \ud55c \ubd80\ubd84\uc73c\ub85c\uc368 \uc6b0\ub9ac\uac00 \ud45c\ud604\uc2dd \ud2b8\ub9ac\ub97c \uc870\uc791\ud558\uace0, \ud0c0\uc785 \uac80\uc0ac\ub97c \uc5f0\uae30\ud560\ub54c\ub9cc \ud544\uc694\ud558\ub2e4. References TC++PL 4, Palo Alto TR, Sutton Enforcement \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 \ud15c\ud50c\ub9bf \ud0c0\uc785 \uc778\uc790\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 T.11: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0 \ud45c\uc900 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \"\ud45c\uc900\" \ucee8\uc149(GSL\uacfc Ranges TS \uc5d0\uc11c \uc81c\uacf5\ud558\ub294)\uc740 \uc6b0\ub9ac \uc790\uc2e0\ub9cc\uc758 \ucee8\uc149\uc744 \uc0dd\uac01\ud560 \ud544\uc694\uac00 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \ub3d9\uc2dc\uc5d0 \uc6b0\ub9ac\uac00 \uc870\uae09\ud558\uac8c \uad00\ub9ac\ud558\ub294 \uac83\ubcf4\ub2e4 \ub354 \uae4a\uc774 \uc0dd\uac01\ud55c \uacb0\uacfc\ubb3c\uc774\uba70, \uc0c1\ud638 \ub3d9\uc791\uc131\uc744 \uac1c\uc120\ud55c\ub2e4. Note \uc0c8\ub85c\uc6b4 \uc77c\ubc18\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\ub294 \ud55c \ud544\uc694\ud55c \ub9ce\uc740 \ucee8\uc149\uc774 \uc774\ubbf8 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc548\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4. Example (using TS concepts) template < typename T > // \uc774\ub7f0 \ucee8\uc149\uc744 \uc815\uc758\ud560 \ud544\uc694 \uc5c6\ub2e4: GSL\uc5d0 Sortable\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4 concept Ordered_container = Sequence < T > && Random_access < Iterator < T >> && Ordered < Value_type < T >> ; void sort ( Ordered_container & s ); \uc774 Ordered_container \ub294 \uc544\uc8fc \ud0c0\ub2f9\ud574 \ubcf4\uc778\ub2e4. \uadf8\ub7ec\ub098 GSL(\uadf8\ub9ac\uace0 Range TS)\uc548\uc5d0 \uc788\ub294 Sortable \ucee8\uc149\uacfc \uc544\uc8fc \ube44\uc2b7\ud558\ub2e4. \ub354 \uc88b\uc740\uac00? \ub354 \uc62c\ubc14\ub978\uac00? sort \uc5d0 \ub300\ud55c \ud45c\uc900 \uc694\uad6c\uc0ac\ud56d\uc744 \uc815\ud655\ud558\uac8c \ubc18\uc601\ud558\uace0 \uc788\ub294\uac00? Sortable \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \uc88b\uace0 \ub2e8\uc21c\ud558\ub2e4: void sort ( Sortable & s ); // \ub354 \ub098\uc740 \ubc29\ubc95 Note \"\ud45c\uc900\" \ucee8\uc149\ub4e4\uc740 ISO \ud45c\uc900\ud654 \uacfc\uc815\uc5d0\uc11c \ubc1c\uc804\ud558\uace0 \uc788\ub2e4. Note \uc4f8\ub9cc\ud55c \ucee8\uc149\uc744 \ub514\uc790\uc778\ud558\ub294 \uac83\uc740 \uad49\uc7a5\ud788 \uc5b4\ub824\uc6b4(challenging) \uc77c\uc774\ub2e4. Enforcement \uc5b4\ub835\ub2e4. \uc81c\uc57d\uc870\uac74\uc774 \uc5c6\ub294 \uc778\uc790, \ube44\ud45c\uc900 \ucee8\uc149\uc744 \uc4f0\ub294 \ud15c\ud50c\ub9bf, \uacf5\ub9ac(axiom)\uc5c6\uc774 'homebrew' \ucee8\uc149\uc744 \uc4f0\ub294 \ud15c\ud50c\ub9bf\uc744 \ucc3e\ub294\ub2e4 \ucee8\uc149 \ubc1c\uacac \ud234\uc744 \uac1c\ubc1c\ud558\ub77c. \ucd08\uae30 \uc2e4\ud5d8 \ucc38\uc870 T.12: \uc9c0\uc5ed \ubcc0\uc218\uc5d0 auto \ubcf4\ub2e4\ub294 \ucee8\uc149\uc758 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c Reason auto \ub294 \uac00\uc7a5 \uc57d\ud55c \ucee8\uc149\uc774\ub2e4. \ucee8\uc149 \uc774\ub984\uc740 \ub2e8\uc21c\ud788 auto \ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83 \ubcf4\ub2e4 \ub354 \ub9ce\uc740 \uc758\ubbf8\uc744 \uc804\ub2ec\ud55c\ub2e4. Example (using TS concepts) vector < string > v { \"abc\" , \"xyz\" }; auto & x = v . front (); // bad String & s = v . front (); // good (String is a GSL concept) Enforcement ??? T.13: \ub2e8\uc21c\ud558\uac70\ub098 \ub2e8\uc77c \ud0c0\uc785\uc744 \uc778\uc790\ub85c \ubc1b\ub294 \ucee8\uc149\uc5d0\ub294 \uc57d\uc2dd \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c \uc5ed\uc8fc: \uc57d\uc2dd \ud45c\uae30(shorthand notation) Reason \uac00\ub3c5\uc131. \uc9c1\uc811\uc801\uc778 \uc544\uc774\ub514\uc5b4\uc758 \ud45c\ud604. Example (using TS concepts) T \ub294 Sortable \ucee8\uc149\uc744 \ub9cc\uc871\ud558\uae30 \uc704\ud574\uc11c\ub294: template < typename T > // Correct but verbose: \"The parameter is // requires Sortable<T> // of type T which is the name of a type void sort ( T & ); // that is Sortable\" template < Sortable T > // Better (assuming support for concepts): \"The parameter is of type T void sort ( T & ); // which is Sortable\" void sort ( Sortable & ); // Best (assuming support for concepts): \"The parameter is Sortable\" \uc9e7\uc740 \ubc84\uc804\uc774 \uc6b0\ub9ac\uac00 \ub9d0\ud558\ub294 \ubc29\ubc95\uacfc \ub354 \uc798 \uc77c\uce58\ud55c\ub2e4. \ub9ce\uc740 \ud15c\ud50c\ub9bf\uc740 template \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\ub77c. Note \"\ucee8\uc149(Concepts)\"\uc740 ISO TS\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4: concepts . \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\uc149\ub4e4\uc758 \ucd08\uc548\uc740 \ub2e4\ub978 ISO TS\uc5d0 \uc788\ub2e4: ranges \ucee8\uc149\uc740 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\uc5d0 \ub530\ub77c, \uc608\uc2dc\ub4e4\uc5d0\uc11c \ucee8\uc149 \ubd80\ubd84\uc740 \uc815\ud615\ud654\ub41c \uc8fc\uc11d\uc73c\ub85c\ub9cc \ud45c\uae30\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc8fc\uc11d\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub2e4. Enforcement <typename T> \uacfc <class T> \ud45c\uae30\ubc95\uc744 \ubcc0\uacbd\ud560 \ub54c \uc9e7\uc740 \ub2e8\uc5b4\ub85c\ub294 \uc4f0\uae30\uac00 \ubd88\uac00\ub2a5\ud558\ub2e4 \ucc98\uc74c\uc5d0\ub294 typename \uc744 \uc0ac\uc6a9\ud558\uace0, \uadf8 \ud6c4\uc5d0 \ud55c \uc885\ub958 \uc778\uc790 \ucee8\uc149\uc73c\ub85c \uc81c\ud55c\ub418\ub294 \uc120\uc5b8\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 T.concepts.def: \ucee8\uc149 \uc815\uc758(Concept definition rules) \uaddc\uce59 \uc88b\uc740 \ucee8\uc149\uc744 \uc815\uc758\ud558\ub294 \uac83\uc740 \uc0ac\uc18c\ud55c \uc77c\uc774 \uc544\ub2c8\ub2e4. \ucee8\uc149\uc740 Application \ubc94\uc704\uc5d0\uc11c \uae30\ucd08\uc801\uc778 \uac1c\ub150\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4 (\uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \"concepts\"\ub77c\uace0 \uc774\ub984\uc9c0\uc5b4\uc84c\ub2e4). \ud558\ub098\uc758 \ud074\ub798\uc2a4\ub098 \uc54c\uace0\ub9ac\uc998\uc744 \ubb38\ubc95\uc801\uc73c\ub85c \uc81c\uc57d\ud558\ub294 \uac83\uc740 \ucee8\uc149\uc774 \uc758\ub3c4\ud558\ub294 \ubc14\uac00 \uc544\ub2c8\uba70, \ucee8\uc149\uc758 \uba54\ucee4\ub2c8\uc998\uc744 \uc801\uc6a9\ud588\uc744 \ub54c\uc758 \ud6a8\uc728\uc744 \uc644\uc804\ud788 \ub04c\uc5b4\ub0bc \uc218 \uc5c6\ub2e4. \ubd84\uba85, \ucee8\uc149\uc744 \uc815\uc758\ud558\ub294 \uac83\uc740 \ucee8\uc149 \uad6c\ud604\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 (\uc608\ucee8\ub300 GCC 6.1 \uc774\ud6c4\uc758 \ubc84\uc804\uc73c\ub85c \ucef4\ud30c\uc77c \ub418\ub294) \ucf54\ub4dc\uc5d0 \uc720\uc6a9\ud560 \uac83\uc774\ub2e4. \uadf8 \uc774\uc678\uc5d0\ub3c4 \ucee8\uc149\uc744 \uc815\uc758\ud558\ub294\uac83 \uc790\uccb4\uac00 \uc720\uc6a9\ud55c \uc124\uacc4 \uae30\uc220\uc774 \ub420 \uac83\uc774\uba70 \uac1c\ub150 \ucc28\uc6d0\uc758 \uc624\ub958\ub97c \uc7a1\uc544\ub0b4\uac70\ub098 \uad6c\ud604 \ucf54\ub4dc\uc758 \uac1c\ub150\uc744 \uc815\ub9ac\ud558\ub3c4\ub85d \ub3c4\uc6b8 \uac83\uc774\ub2e4. T.20: \uc720\uc758\ubbf8\ud55c \uc758\ubbf8\uad6c\uc870\uac00 \uc5c6\ub294 \"\ucee8\uc149\"\uc744 \ud53c\ud558\ub77c Reason \ucee8\uc149\uc740 \uc758\ubbf8\uc801\uc778 \uac1c\ub150, \uc608\ub97c \ub4e4\uba74, \"\uc22b\uc790\", \uc694\uc18c\ub4e4\uc758 \"\ubc94\uc704\", \uadf8\ub9ac\uace0 \"\uc644\uc804\ud788 \uc815\ub82c\ub41c\" \uac19\uc740 \uac1c\ub150\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. \ub2e8\uc21c\ud55c \uc81c\uc57d\uc870\uac74, + \uc5f0\uc0b0\uc790\ub97c \uac00\uc9c4\ub2e4\uac70\ub098, > \uc5f0\uc0b0\uc790\ub97c \uac00\uc9c0\ub294 \uac83, \ucc98\ub7fc \ub3c5\uc790\uc801\uc73c\ub85c \uae30\uc220\ub418\uc5b4\uc120 \uc758\ubbf8\uac00 \uc5c6\ub2e4. \uc720\uc800 \ucf54\ub4dc\ubcf4\ub2e4\ub294 \uc758\ubbf8\uc788\ub294 \uac1c\ub150\uc744 \uc704\ud55c \ube14\ub85d\uc744 \uad6c\uc131\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. Example, bad (using TS concepts) template < typename T > concept Addable = has_plus < T > ; // bad; \ubd88\ucda9\ubd84\ud558\ub2e4 template < Addable N > auto algo ( const N & a , const N & b ) // use two numbers { // ... return a + b ; } int x = 7 ; int y = 9 ; auto z = algo ( x , y ); // z = 16 string xx = \"7\" ; string yy = \"9\" ; auto zz = algo ( xx , yy ); // zz = \"79\" \uc544\ub9c8\ub3c4 \ubb38\uc790\uc5f4 \uc811\ud569\uc77c \uc218\ub3c4 \uc788\uace0, \uc2e4\uc218\uc600\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc5ec\uae30\uc11c \ube84\uc0d8 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud558\ub3c4\ub85d \ud55c\ub2e4\uba74 \uc644\uc804\ud788 \ub2e4\ub978 \ud0c0\uc785\ub4e4\ub85c\ub9cc \uc0ac\uc6a9\uac00\ub2a5\ud560 \uac83\uc774\ub2e4. \uc608\uc2dc\uc758 Addable \uc740 \uad50\ud658\ubc95\uce59\uc774 \uc131\ub9bd\ud574\uc57c \ud55c\ub2e4\ub294 \uc218\ud559\uc801\uc778 \uaddc\uce59\uc5d0 \uc704\ubc30\ub41c\ub2e4: a+b == b+a Note \ucee8\uc149\uc758 \uc9c4\uc815\ud55c \ud2b9\uc9d5\uc740 \ubb38\ubc95 \uc81c\uc57d\uacfc \ub2ec\ub9ac \uc758\ubbf8\uad6c\uc870\ub97c \uae30\uc220\ud558\ub294 \ub2a5\ub825\uc774 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4. Example (using TS concepts) template < typename T > // The operators +, -, *, and / for a number are assumed to // follow the usual mathematical rules concept Number = has_plus < T > && has_minus < T > && has_multiply < T > && has_divide < T > ; template < Number N > auto algo ( const N & a , const N & b ) { // ... return a + b ; } int x = 7 ; int y = 9 ; auto z = algo ( x , y ); // z = 16 string xx = \"7\" ; string yy = \"9\" ; auto zz = algo ( xx , yy ); // error: string is not a Number Note \ub2e4\uc218\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc815\uc758\ud55c \ucee8\uc149\uc740 \ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc815\uc758\ud55c \ucee8\uc149\ubcf4\ub2e4 \uc758\ub3c4\uce58 \uc54a\uc740 \ud0c0\uc785\uc744 \ud5c8\uc6a9\ud560 \uac00\ub2a5\uc131\uc774 \ub0ae\ub2e4. Enforcement \ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc815\uc758\ud55c concepts \uc774 \ub2e4\ub978 concepts \ub4e4\uc744 \uc815\uc758\ud558\ub294 \ucf54\ub4dc \uc774\uc678\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c enable_if \uac00 \ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc815\uc758\ud55c concepts \ucc98\ub7fc \uc0ac\uc6a9\ub418\uace0 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c T.21: \ucee8\uc149\uc5d0\uc11c\ub294 \uc5f0\uc0b0\ub4e4\uc758 \uc644\uc804\ud55c \uc9d1\ud569\uc744 \uc694\uad6c\ud558\ub77c Require a complete set of operations for a concept Reason \uc774\ud574\ud558\uae30 \uc27d\ub2e4. \uc0c1\ud638\uc6b4\uc6a9\uc131 \uac1c\uc120. \uad6c\ud604\uc774\ub098 \uc720\uc9c0\ubcf4\uc218 \uc778\ub825\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub41c\ub2e4. Note \uc774 \uaddc\uce59\uc740 \ubcf4\ub2e4 \uc77c\ubc18\uc801\uc778 \uaddc\uce59\uc778 \ucee8\uc149\uc740 \uc758\ubbf8\uad6c\uc870\uc801\uc73c\ub85c \uc801\uc808\ud574\uc57c \ud55c\ub2e4 \uc5d0\uc11c \ud30c\uc0dd\ub41c \uac83\uc774\ub2e4. Example, bad (using TS concepts) template < typename T > concept Subtractable = requires ( T a , T , b ) { a - b ; }; \ubb38\ub9e5\uc801\uc73c\ub85c \ubb34\uc758\ubbf8 \ud558\ub2e4. \ucd5c\uc18c\ud55c + , - \uc815\ub3c4\ub294 \uc788\uc5b4\uc57c \uc4f8\ub9cc\ud558\ub2e4. \uc5f0\uc0b0\ub4e4\uc758 \uc644\uc804\ud55c \uc9d1\ud569(complete set)\uc744 \uc608\uc2dc\ud558\uc790\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4 \uc0b0\uc220(Arithmetic)\uc5f0\uc0b0\uc758 \uc9d1\ud569: + , - , * , / , += , -= , *= , /= \ube44\uad50(Comparable)\uc5f0\uc0b0\uc758 \uc9d1\ud569: < , > , <= , >= , == , != Note \uc774 \uaddc\uce59\uc740 \ucee8\uc149\uc758 \uc9c0\uc6d0\uc5ec\ubd80\uc640 \ubb34\uad00\ud558\uac8c \uc801\uc6a9\ub420 \uc218 \uc788\ub2e4. \uc774\ub294 \ube44-\ud15c\ud50c\ub9bf \ucf54\ub4dc\uc5d0 \uc801\uc6a9\ub418\ub294 \uc77c\ubc18\uc801\uc778 \uc124\uacc4 \uaddc\uce59\uc774\ub2e4: class Minimal { // ... }; bool operator == ( const Minimal & , const Minimal & ); bool operator < ( const Minimal & , const Minimal & ); Minimal operator + ( const Minimal & , const Minimal & ); // \ub2e4\ub978 \uc5f0\uc0b0\uc790\ub294 \uc5c6\ub2e4 void f ( const Minimal & x , const Minimal & y ) { if ( ! ( x == y )) { /* ... */ } // OK if ( x != y ) { /* ... */ } // \uc774\ub7f0! \ucef4\ud30c\uc77c \uc624\ub958\ub2e4 while ( ! ( x < y )) { /* ... */ } // OK while ( x >= y ) { /* ... */ } // \uc774\ub7f0! \ucef4\ud30c\uc77c \uc624\ub958\ub2e4 x = x + y ; // OK x += y ; // \uc774\ub7f0! \ucef4\ud30c\uc77c \uc624\ub958\ub2e4 } \uc774\ub294 \uc544\uc8fc \uc791\uc740 \uc608\uc2dc\uc9c0\ub9cc, \uc0ac\uc6a9\uc790\ub4e4\uc758 \uae30\ub300\uc5d0 \uc5b4\uae0b\ub098\uace0 \ucf54\ub4dc\ub97c \uc81c\uc57d\ud55c\ub2e4(surprising and constraining). \ub2a5\ub960\uc744 \ub5a8\uc5b4\ub728\ub9b4 \uc218\ub3c4 \uc788\ub2e4. \uc774 \uaddc\uce59\uc740 \uc5f0\uc0b0\ub4e4\uc774 \uc218\ud559\uc801\uc73c\ub85c \uc77c\uad00\uc131 \uc788\ub294 \uc9d1\ud569(coherent set of operations)\uc744 \ubc18\uc601\ud574\uc57c \ud55c\ub2e4\ub294 \uad00\uc810\uc744 \ub4b7\ubc1b\uce68\ud55c\ub2e4. Example class Convenient { // ... }; bool operator == ( const Convenient & , const Convenient & ); bool operator < ( const Convenient & , const Convenient & ); // ... and the other comparison operators ... Minimal operator + ( const Convenient & , const Convenient & ); // .. and the other arithmetic operators ... void f ( const Convenient & x , const Convenient & y ) { if ( ! ( x == y )) { /* ... */ } // OK if ( x != y ) { /* ... */ } // OK while ( ! ( x < y )) { /* ... */ } // OK while ( x >= y ) { /* ... */ } // OK x = x + y ; // OK x += y ; // OK } \ubaa8\ub4e0 \uc5f0\uc0b0\uc790\ub97c \uc815\uc758\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc774 \ubc88\uac70\ub85c\uc6b8 \uc218\ub294 \uc788\uc9c0\ub9cc, \uc5b4\ub824\uc6b4 \uac83\uc740 \uc544\ub2c8\ub2e4. \uc774\uc0c1\uc801\uc73c\ub85c\ub294, \uc5b8\uc5b4\uac00 \ube44\uad50 \uc5f0\uc0b0\ub4e4\uc744 \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ud568\uc73c\ub85c\uc368 \uc774 \uaddc\uce59\uc744 \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4. Enforcement \ud074\ub798\uc2a4\uac00 \uc5f0\uc0b0\ub4e4\uc758 \"\uc644\uc804\ud558\uc9c0 \uc54a\uc740(odd)\" \ubd80\ubd84\uc9d1\ud569\uc744 \uac00\uc9c0\uba74 \uc9c0\uc801\ud55c\ub2e4. \uac00\ub839, == \ub97c \uc815\uc758\ud558\uc9c0\ub9cc != \ub97c \uc815\uc758\ud558\uc9c0 \uc54a\uac70\ub098, + \ub294 \uc815\uc758\ud558\uc9c0\ub9cc - \ub97c \uc815\uc758\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc774\ub2e4. std::string \uc758 \uc5f0\uc0b0 \uc9d1\ud569\uc740 \"\uc644\uc804\ud558\uc9c0 \uc54a\uc9c0\ub9cc\", \uc218\uc815\ud558\uae30\uc5d4 \ub108\ubb34 \ub2a6\uc5c8\ub2e4. T.22: \ucee8\uc149\uc5d0\uc11c \uc4f8 \uc218 \uc788\ub3c4\ub85d \uacf5\ub9ac\ub97c \uba85\uc2dc\ud558\ub77c \uc5ed\uc8fc: \uacf5\ub9ac(axiom: \uc99d\uba85\uc774 \uc5c6\uc774\ub3c4 \uc790\uba85\ud55c \uac83) Reason \uc758\ubbf8\uc788\uace0 \uc720\uc6a9\ud55c \ucee8\uc149\uc740 \uc758\ubbf8\uad6c\uc870\uc5d0 \uc601\ud5a5\uc744 \uc900\ub2e4. \ube44\ud615\uc2dd\uc801\uc73c\ub85c\ub4e0 \ud615\uc2dd\uc801\uc73c\ub85c\ub4e0 \uc758\ubbf8\uad6c\uc870\ub97c \ud45c\ud604\ud558\ub294 \uac83\uc740 \ucee8\uc149\uc744 \uc774\ud574\ud560 \uc218 \uc788\uac8c \ub9cc\ub4e0\ub2e4. \ub3d9\uc2dc\uc5d0 \uac1c\ub150\uc801\uc778 \uc624\ub958\ub97c \uc7a1\uc544\ub0b4\ub3c4\ub85d \ud55c\ub2e4. \uc758\ubbf8\uad6c\uc870\ub97c \uae30\uc220\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc740 \uac15\ub825\ud55c \ub514\uc790\uc778 \ub3c4\uad6c\uc774\ub2e4. Example (using TS concepts) template < typename T > // \uc0ac\uce59\uc5f0\uc0b0\uc740 \uae30\ubcf8\uc801\uc778 \uc218\ud559 \uaddc\uce59\ub4e4\uc744 \ub530\ub978\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4 // axiom(T a, T b) { // a + b == b + a; // a - a == 0; // a * (b + c) == a * b + a * c; // /*...*/ // } concept Number = requires ( T a , T b ) { { a + b } -> T ; // the result of a + b is convertible to T { a - b } -> T ; { a * b } -> T ; { a / b } -> T ; } Note \uc774\uac83\uc740 \uc218\ud559\uc801 \uacf5\ub9ac\ub97c \ud45c\ud604\ud55c \uac83\uc774\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uacf5\ub9ac\ub294 \uc99d\uba85\ud558\uc9c0 \uc54a\ub294\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c \uadf8 \uc99d\uba85\uc740 \ucef4\ud30c\uc77c\ub7ec\uc758 \ub2a5\ub825\uc744 \ub118\uc5b4\uc11c\ub294 \uac83\uc774\ub2e4. \uacf5\ub9ac\uac00 \uc77c\ubc18\uc801\uc774\uc9c0 \uc54a\uc744\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. \uadf8\ub7ec\ub098 \ud15c\ud50c\ub9bf \uc791\uc131\uc790\ub294 \uc2e4\uc81c\ub85c \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub4e0 \uc785\ub825\uc5d0 \ub300\ud574\uc11c \uacf5\ub9ac\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uace0 \uac00\uc815\ud558\ub294\uac8c \uc88b\ub2e4 (\uc120\ud589\uc870\uac74\uacfc \ube44\uc2b7\ud558\ub2e4). Note \uc774 \ubb38\ub9e5\uc5d0\uc11c \uacf5\ub9ac\ub294 \ubd88\ub9ac\uc5b8 \uc5f0\uc0b0\uc2dd\uc774\ub2e4. \uadf8 \uc608\ub85c Palo Alto TR \ub97c \ucc38\uc870\ud558\ub77c. \ud604\uc7ac C++\uc740 \uacf5\ub9ac\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. (ISO \ucee8\uc149 TS\uc5d0\uc11c\ub3c4) \uadf8\ub798\uc11c \uaf64 \uc624\ub798\ub3d9\uc548 \uc8fc\uc11d\uc73c\ub85c \ub300\uc2e0\ud574\uc57c\ub9cc \ud55c\ub2e4. \ub098\uc911\uc5d0 \uc5b8\uc5b4\uac00 \uc9c0\uc6d0\ud55c\ub2e4\uba74 '//'\ub97c \uc5c6\uc560\uba74 \ub41c\ub2e4. Note GSL \ucee8\uc149\uc740 \uc798 \uc815\uc758\ub41c \uc758\ubbf8\uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4; Palo Alto TR\uacfc Ranges TS\ub97c \ucc38\uc870\ud558\ub77c. Exception (using TS concepts) \ud604\uc7ac \uac1c\ubc1c\uc911\uc778 \uc0c8 \"\ucee8\uc149\" \ucd08\uae30\ubc84\uc804\uc740 \uc758\ubbf8\uad6c\uc870\ub97c \uae30\uc220\ud558\uc9c0 \uc54a\uace0 \uc81c\uc57d\uc870\uac74\ub4e4\uc744 \uc815\uc758\ud558\ub824\uace0 \ud55c\ub2e4. \uc88b\uc740 \uc758\ubbf8\uad6c\uc870\ub294 \ub178\ub825\uacfc \uc2dc\uac04\uc774 \ud544\uc694\ud558\ub2e4. \ubd88\uc644\uc804\ud55c \uc81c\uc57d\uc870\uac74\uc774\ub77c\ub3c4 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4: // balancer for a generic binary tree template < typename Node > concept bool Balancer = requires ( Node * p ) { add_fixup ( p ); touch ( p ); detach ( p ); } \uc704\uc5d0 \ub530\ub974\uba74 Balancer \ub294 \ucd5c\uc18c\ud55c \ud2b8\ub9ac\uc758 Node \uc5d0 \ub300\ud55c 3\uac1c \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc6b0\ub9ac\ub294 \ub354 \uc790\uc138\ud55c \uc758\ubbf8\uad6c\uc870\ub97c \uba85\uc2dc\ud560 \uc900\ube44\uac00 \ub418\uc9c0 \uc54a\uc558\ub294\ub370, \uc0c8\ub85c\uc6b4 \ud615\ud0dc\uc758 \uade0\ud615 \ud2b8\ub9ac(balanced tree)\uac00 \ub354 \ub9ce\uc740 \uc5f0\uc0b0\uc744 \ud544\uc694\ub85c \ud558\uac70\ub098 \ucd08\uae30 \ub514\uc790\uc778\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\uc5d0 \uc801\uc6a9\ud560 \uc815\ud655\ud55c \uc758\ubbf8\uad6c\uc870\ub97c \ud655\uc815\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc758\ubbf8\uad6c\uc870\uac00 \uc798 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \"\uac1c\ub150\"\uc774\ub77c\ub3c4 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4. \uac00\ub839, \uac1c\ub150\uc744 \uc815\uc758\ud558\ub294 \uac83\uc740 \ucd08\uae30 \uc2e4\ud5d8\ub2e8\uacc4\uc5d0\uc11c \uba87\uba87 \uc0ac\ud56d\uc744 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. \ub2e4\ub9cc \uc548\uc815\ud654\ub410\ub2e4\uace0 \uc0dd\uac01\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \uc6a9\ub840\uac00 \ubc1c\uacac\ub418\uba74 \ubd88\uc644\uc804\ud55c \ucee8\uc149\uc740 \uac1c\uc120\ub420 \uac83\uc774\ub2e4. Enforcement \ucee8\uc149 \uc815\uc758 \uc8fc\uc11d \ub0b4\uc5d0 \"axiom\" \ub2e8\uc5b4\ub97c \ucc3e\ub294\ub2e4 T.23: \uc815\uc81c\ub41c \ucee8\uc149(refined concept)\uc740 \ub354 \ubc94\uc6a9\uc801\uc778 \uacbd\uc6b0\uc5d0 \uc0c8\ub85c\uc6b4 \ud328\ud134\uc744 \ub354\ud574\uc11c \ucc28\ubcc4\ud654\ud558\ub77c Reason \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc790\ub3d9\uc73c\ub85c \uad6c\ubd84\ud560 \uc218 \uc5c6\ub2e4. Example (using TS concepts) template < typename I > concept bool Input_iter = requires ( I iter ) { ++ iter ; }; template < typename I > concept bool Fwd_iter = Input_iter < I > && requires ( I iter ) { iter ++ ; } \ucef4\ud30c\uc77c\ub7ec\ub294 \uc694\uad6c\ub41c \uc5f0\uc0b0\ub4e4\uc5d0 \uae30\ubc18\ud574\uc11c \uc5b4\ub5a4\uac83\uc774 \ud544\uc694\ud55c \uc5f0\uc0b0\uc778\uc9c0 \uacb0\uc815(determine refinement)\ud560 \uc218 \uc788\ub2e4. (\uc608\uc81c\uc5d0\uc11c\ub294 ++ \uc5d0 \ud574\ub2f9\ud55c\ub2e4) \uc774\ub294 \ud0c0\uc785\uc744 \uad6c\ud604\ud558\ub294 \uce21\uc758 \ubd80\ub2f4\uc744 \uc904\uc5ec\uc8fc\ub294\ub370, \"\ucee8\uc149\uc744 \ub9cc\uc871\ud558\ub3c4\ub85d\" \ud2b9\ubcc4\ud55c \uc120\uc5b8\uc744 \uc791\uc131\ud560 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. 2\uac1c\uc758 \ucee8\uc149\uc774 \uc694\uad6c\uc0ac\ud56d\uc774 \uc815\ud655\ud558\uac8c \ub3d9\uc77c\ud558\ub2e4\uba74 \uadf8\ub4e4\uc740 \ub17c\ub9ac\uc801 \ub3d9\uce58\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4 (\uac1c\uc120\ub41c \uc810\uc774 \uc5c6\ub2e4). Enforcement \ub2e4\ub978 \ucee8\uc149\uacfc \uc694\uad6c\uc0ac\ud56d\uc774 \uc815\ud655\ud558\uac8c \uc77c\uce58\ud558\ub294 \ucee8\uc149\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. \ucc28\uc774\ub97c \ubd84\uba85\ud558\uac8c \ud558\uace0 \uc2f6\ub2e4\uba74 T.24 \ub97c \ucc38\uc870\ud558\ub77c. T.24: \uc758\ubbf8\uad6c\uc870\ub9cc \ub2e4\ub978 \ucee8\uc149\uc740 Tag \ud074\ub798\uc2a4 \ud639\uc740 Traits\ub97c \uc0ac\uc6a9\ud574 \ucc28\ubcc4\ud654\ud558\ub77c Reason \ud504\ub85c\uadf8\ub798\uba38\uac00 \ucc28\ubcc4\ud654\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub3d9\uc77c\ud55c \ubb38\ubc95\uc744 \uc694\uad6c\ud558\uc9c0\ub9cc \uc758\ubbf8\uad6c\uc870\uac00 \ub2e4\ub978 \ub450 \ucee8\uc149\uc740 \ubaa8\ud638\ud568\uc744 \ub0b3\ub294\ub2e4. Example (using TS concepts) template < typename I > // iterator providing random access concept bool RA_iter = ...; template < typename I > // iterator providing random access to contiguous data concept bool Contiguous_iter = RA_iter < I > && is_contiguous < I >:: value ; // using is_contiguous trait \ub77c\uc774\ube0c\ub7ec\ub9ac \ud504\ub85c\uadf8\ub798\uba38\uac00 is_contiguous \ub97c \uc801\uc808\ud558\uac8c \uc815\uc758\ud574\uc57c \ud55c\ub2e4. \ucee8\uc149\uc73c\ub85c Tag \ud074\ub798\uc2a4\ub97c \uac10\uc2f8\uba74 \ube44\uc2b7\ud55c \ud45c\ud604\uc774 \ub41c\ub2e4: template < typename I > concept Contiguous = is_contiguous < I >:: value ; template < typename I > concept bool Contiguous_iter = RA_iter < I > && Contiguous < I > ; \uc774\ub807\uac8c \ud558\uba74 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud504\ub85c\uadf8\ub798\uba38\uac00 is_contiguous \ud2b9\uc131(trait)\uc744 \uc801\uc808\ud788 \uc815\uc758\ud574\uc57c\ub9cc \ud55c\ub2e4. Note \ud2b9\uc131(trait)\uc740 \ud2b9\uc131 \ud074\ub798\uc2a4(trait class)\ub098 \ud0c0\uc785 \ud2b9\uc131(type trait)\uc744 \ub9d0\ud55c\ub2e4. \uc0ac\uc6a9\uc790 \ud639\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc815\uc758\ud588\uc744 \uc218 \uc788\ub2e4.. \uac00\ub2a5\ud558\ub2e4\uba74 \ud45c\uc900\uc5d0\uc11c \uc815\uc758\ud55c \ud2b9\uc131\uc744 \uc120\ud638\ud558\ub77c. Enforcement \ucef4\ud30c\uc77c\ub7ec\ub294 \ub3d9\uc77c\ud55c \ucee8\uc149\uc744 \uc560\ub9e4\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uc9c0\uc801\ud55c\ub2e4 \ub3d9\uc77c\ud55c \ucee8\uc149\uc744 \uc815\uc758\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 T.25: \uc81c\uc57d\uc774 \uc11c\ub85c \ub300\ube44\ub418\uc9c0 \uc54a\uac8c \ud558\ub77c Avoid complementary constraints Reason \ub2e8\uc21c\uba85\ub8cc\ud558\ub2e4. \uc720\uc9c0\ubcf4\uc218\ud558\uae30 \uc88b\ub2e4. \ubd80\uc815(negation)\uc744 \uc0ac\uc6a9\ud574 \uc11c\ub85c \ub300\ube44\ub418\ub294 \uc694\uad6c\uc0ac\ud56d\uc744 \uac00\uc9c0\ub294 \ud568\uc218\ub4e4\uc740 \ubbff\uace0 \uc4f0\uae30 \uc5b4\ub835\ub2e4(brittle). Example (using TS concepts) \ucc98\uc74c\uc5d0\ub294, \uc0ac\ub78c\ub4e4\uc774 \ubcf4\uc644\uc801\uc778 \uc694\uad6c\uc0ac\ud56d\uc744 \uac00\uc9c4 \ud568\uc218\ub97c \uc815\uc758\ud558\ub824\uace0 \ud560 \uac83\uc774\ub2e4: template < typename T > requires ! C < T > // bad void f (); template < typename T > requires C < T > void f (); \uc544\ub798 \ucf54\ub4dc\uac00 \ub354 \ub0ab\ub2e4: template < typename T > // general template void f (); template < typename T > // specialization by concept requires C < T > void f (); C<T> \uac00 \ub9cc\uc871\ub418\uc9c0 \uc54a\uc744 \ub54c\ub9cc \ucef4\ud30c\uc77c\ub7ec\ub294 \uc81c\ud55c\uc870\uac74\uc774 \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc744 \uc120\ud0dd\ud560 \uac83\uc774\ub2e4. \uc81c\uc57d\uc870\uac74\uc774 \uc5c6\ub294 f() \ub97c \uc815\uc758\ud558\uace0 \uc2f6\uc9c0 \uc54a\ub2e4\uba74 \uadf8\ub0e5 \uc5c6\uc560\ub77c. template < typename T > void f () = delete ; \ucef4\ud30c\uc77c\ub7ec\ub294 \uc624\ubc84\ub85c\ub4dc\ub41c \ud568\uc218\ub97c \uc120\ud0dd\ud560 \uac83\uc774\uace0 \uc801\ub2f9\ud55c \uc5d0\ub7ec\ub97c \ub0bc \uac83\uc774\ub2e4. Note \ubd88\ud589\ud558\uac8c\ub3c4 enable_if \ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uc5d0\uc11c \uc11c\ub85c \ub300\ube44\ub418\ub294 \uc81c\uc57d\uc744 \uc790\uc8fc \ud655\uc778\ud560 \uc218 \uc788\ub2e4: template < typename T > enable_if <! C < T > , void > // bad f (); template < typename T > enable_if < C < T > , void > f (); Note Complementary requirements on one requirements is sometimes (wrongly) considered manageable. However, for two or more requirements the number of definitions needs can go up exponentially (2,4,9,16,...): C1<T> && C2<T> !C1<T> && C2<T> C1<T> && !C2<T> !C1<T> && !C2<T> Now the opportunities for errors multiply. Enforcement C<T> , !C<T> \ub97c \uac19\uc774 \uac00\uc9c4 \ud568\uc218\ub4e4\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \uc815\ubc18\ub300 \uc81c\uc57d\uc870\uac74\uc774 \uc788\ub2e4\uba74 \ubaa8\ub450 \uc9c0\uc801\ud55c\ub2e4 T.26: \ub2e8\uc21c\ud55c \ubb38\ubc95\ubcf4\ub2e4\ub294 \uc0ac\uc6a9 \ud328\ud134\uc744 \uace0\ub824\ud574\uc11c \ucee8\uc149\uc744 \uc815\uc758\ud558\ub77c Reason \uc815\uc758\uac00 \ub354 \uc77d\uae30 \uc27d\uace0 \uc0ac\uc6a9\uc790\uac00 \uc791\uc131\ud558\uace0 \uc2f6\uc740 \uac83\uacfc \uc9c1\uc811\uc801\uc73c\ub85c \uc77c\uce58\ud55c\ub2e4. \ud615\ubcc0\ud658\ub3c4 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \ubaa8\ub4e0 \ud0c0\uc785\ud2b9\uc131\uc758 \uc774\ub984\uc744 \uae30\uc5b5\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4. Example (using TS concepts) Equality \ub97c \uc544\ub798\ucc98\ub7fc \uc815\uc758\ud558\uace0 \uc2f6\uc744 \uac83\uc774\ub2e4: template < typename T > concept Equality = has_equal < T > && has_not_equal < T > ; \ud45c\uc900\uc5d0\uc11c EqualityComparable \uc744 \uc9c0\uc6d0\ud558\ub294\uac8c \ub354 \ub0ab\uace0 \uc26c\uc6b8 \uac83\uc774\ub77c\ub294 \uc810\uc740 \uba85\ubc31\ud558\ub2e4. \ud558\uc9c0\ub9cc - \uc608\ub97c \ub4e4\uc5b4 - \uadf8\ub7f0 \ucee8\uc149\uc744 \uc815\uc758\ud574\uc57c \ud55c\ub2e4\uba74: template < typename T > concept Equality = requires ( T a , T b ) { bool == { a == b } bool == { a != b } // axiom { !(a == b) == (a != b) } // axiom { a = b; => a == b } // => means \"implies\" } Equality \uc758 \uc815\uc758 \uc548\uc5d0 \ubb34\uc758\ubbf8\ud55c \ucee8\uc149\uc778 has_equal \uc640 has_not_equal 2\uac1c\ub97c \uc815\uc758\ud558\ub294 \uac83 \ub300\uc2e0\uc5d0, \uc704\uc640 \uac19\uc740 \ud615\ud0dc\ub97c \uc9c0\ud5a5\ud558\ub77c. \uc5ec\uae30\uc11c \"\ubb34\uc758\ubbf8\ud55c\"\uc774\ub780 has_equal \uc758 \uc758\ubbf8\uad6c\uc870\ub97c \ub3c5\ub7fd\uc801\uc73c\ub85c(in isolation) \uc815\uc758\ud560 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4. Enforcement ??? \ud15c\ud50c\ub9bf \uc778\ud130\ud398\uc774\uc2a4(Template Interfaces) \uc9c0\ub09c \uc218\ub144\ub3d9\uc548, \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ud15c\ud50c\ub9bf\uc758 \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc744 \ubd84\uba85\ud788 \uad6c\ubd84\ud558\uc9c0 \uc54a\uc544 \uace0\ud1b5\ubc1b\uc558\ub2e4. \ucee8\uc149 \uc774\uc804\uc5d0\ub294, \uc774 \uad6c\ubd84\uc744 \uc704\ud55c \uc5b8\uc5b4\ucc28\uc6d0\uc758 \uc9c0\uc6d0\uc774 \uc5c6\uc5c8\ub2e4. \uadf8\ub7ec\ub098 \ud15c\ud50c\ub9bf\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub294 \ub9e4\uc6b0 \uc911\uc694\ud55c \uac1c\ub150- \uc0ac\uc6a9\uc790\uc640 \uad6c\ud604\uc790\uac04\uc758 \uacc4\uc57d -\uc774\uace0, \ub9c8\ub545\ud788 \uc2e0\uc911\ud558\uac8c \uc124\uacc4\ub418\uc5b4\uc57c \ud55c\ub2e4. T.40: \uc54c\uace0\ub9ac\uc998\uc5d0 \uc5f0\uc0b0(operation)\uc744 \uc804\ub2ec\ud560\ub54c\ub294 \ud568\uc218 \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ud568\uc218 \uac1c\ucc44(function object)\ub294 \ud568\uc218\uc5d0 \ub300\ud55c \"\ub2e8\uc21c\" \ud3ec\uc778\ud130\uc5d0 \ube44\ud574 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4. \ubcf4\ud1b5\uc740 \ud568\uc218 \uac1c\uccb4\ub97c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \ud568\uc218 \ud3ec\uc778\ud130\uc5d0 \ube44\ud574 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc778\ub2e4. Example (using TS concepts) bool greater ( double x , double y ) { return x > y ; } sort ( v , greater ); // pointer to function: potentially slow sort ( v , []( double x , double y ) { return x > y ; }); // function object sort ( v , std :: greater <> ); // function object bool greater_than_7 ( double x ) { return x > 7 ; } auto x = find_if ( v , greater_than_7 ); // pointer to function: inflexible auto y = find_if ( v , []( double x ) { return x > 7 ; }); // function object: carries the needed data auto z = find_if ( v , Greater_than < double > ( 7 )); // function object: carries the needed data \ubb3c\ub860 \uc800\ub7f0 \ud568\uc218\ub4e4\uc744 auto \ub610\ub294 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud574\uc11c \uc77c\ubc18\ud654 \ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4: auto y1 = find_if ( v , []( Ordered x ) { return x > 7 ; }); // Ordered \ucee8\uc149\uc744 \ub9cc\uc871\ud558\ub294 \ud0c0\uc785 auto z1 = find_if ( v , []( auto x ) { return x > 7 ; }); // \ud574\ub2f9 \ud0c0\uc785\uc774 > \uc5f0\uc0b0\uc790\ub97c \uc9c0\uc6d0\ud558\uae30\ub97c \uae30\ub300\ud55c\ub2e4 Note \ub78c\ub2e4 \ud45c\ud604\uc2dd\uc740 \ud568\uc218\uac1c\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4. Note \uc131\ub2a5\ubb38\uc81c\ub294 \ucef4\ud30c\uc77c\ub7ec, \ucd5c\uc801\ud654 \uae30\uc220\uc5d0 \ub2ec\ub824\uc788\ub2e4. Enforcement \ud568\uc218 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ud3ec\uc778\ud130\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \ud15c\ud50c\ub9bf\uc5d0 \ud568\uc218 \ud3ec\uc778\ud130\uac00 \uc778\uc790\ub85c \uc804\ub2ec\ub41c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 (false positive\uc758 \uc704\ud5d8\uc774 \uc788\ub2e4) T.41: \ud15c\ud50c\ub9bf\uc758 \ucee8\uc149\uc5d0\uc11c\ub294 \uc624\uc9c1 \ud544\uc694\ud55c \ud2b9\uc131(property)\ub9cc \uc694\uad6c\ud558\ub77c Reason \ud15c\ud50c\ub9bf\uc774 \uc27d\uace0 \uc548\uc815\uc801\uc778 \uc0c1\ud0dc\ub85c \uc720\uc9c0\ub41c\ub2e4. Example (using TS concepts) \uc774\ub7f0 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c, sort \ub294 (\uc880 \uc2ec\ud558\uac8c \ub2e8\uc21c\ud558\uc9c0\ub9cc) \ub514\ubc84\uae45 \uc9c0\uc6d0\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub2e4: void sort ( Sortable & s ) // sort sequence s { if ( debug ) cerr << \"enter sort( \" << s << \") \\n \" ; // ... if ( debug ) cerr << \"exit sort( \" << s << \") \\n \" ; } \uc544\ub798\ucc98\ub7fc \ub2e4\uc2dc \uc791\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4: template < Sortable S > requires Streamable < S > void sort ( S & s ) // sort sequence s { if ( debug ) cerr << \"enter sort( \" << s << \") \\n \" ; // ... if ( debug ) cerr << \"exit sort( \" << s << \") \\n \" ; } \uacb0\ub860\uc801\uc73c\ub85c Sortable \uc5d0\ub294 iostream \uc744 \uc9c0\uc6d0\ud55c\ub2e4\ub294 \uc694\uad6c\uc0ac\ud56d\uc774 \uc804\ud600 \uc5c6\ub2e4\ub294 \uac83\uc774\ub2e4. \ubc18\ub300\ub85c \ub9d0\ud574, \uc815\ub82c\uc774\ub77c\ub294 \uac1c\ub150\uc740 \ub514\ubc84\uae45\uacfc\ub294 \uc644\uc804\ud788 \ubb34\uad00\ud558\ub2e4. Note \uc218\ud589\ud558\ub294 \ubaa8\ub4e0 \ucc98\ub9ac(operation)\ub97c \uc694\uad6c\uc0ac\ud56d\uc73c\ub85c \ub098\uc5f4\ud558\uba74, \uadf8 \uc778\ud130\ud398\uc774\uc2a4\ub294 \ubd88\uc548\uc815\ud558\uac8c \ub41c\ub2e4: \ub514\ubc84\uae45 \uad00\ub828 \uae30\ub2a5\uc744 \ubcc0\uacbd\ud558\uac70\ub098, \uc0ac\uc6a9 \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uac70\ub098, \ud14c\uc2a4\ud2b8\ub97c \uc9c0\uc6d0\ud558\uac70\ub098, \uc624\ub958\ub97c \ubcf4\uace0\ud558\uac70\ub098 \ub4f1\ub4f1 \ud15c\ud50c\ub9bf\uc758 \uc815\uc758\uac00 \ubc14\ub00c\uace0 \ud574\ub2f9 \ud15c\ud50c\ub9bf\uc758 \ubaa8\ub4e0 \uc0ac\uc6a9\ucf54\ub4dc\uac00 \ub2e4\uc2dc \ucef4\ud30c\uc77c\ub418\uc5b4\uc57c \ud560 \uac83\uc774\ub2e4. \uc774\ub294 \ub2e4\ub8e8\uae30 \ud798\ub4e0 \ubb38\uc81c\uace0, \uc5b4\ub5a4 \ud658\uacbd\uc5d0\uc11c\ub294 \ud604\uc2e4\uc801\uc774\uc9c0 \uc54a\ub2e4. \ubc18\ub300\ub85c, \ucee8\uc149\uc744 \uc0ac\uc6a9\ud55c \uac80\uc0ac\ub97c \ubcf4\uc7a5\ud558\uc9c0 \uc54a\ub294 \uad6c\ud604\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ucef4\ud30c\uc77c \uc2dc\uac04 \uc624\ub958\ub97c \ub4a4\ub2a6\uac8c \ud655\uc778\ud558\uac8c \ub420 \uac83\uc774\ub2e4. \ud544\uc218\uc801\uc774\uc9c0 \uc54a\uc740 \ud15c\ud50c\ub9bf \uc2e4\ud589\uc778\uc790\ub4e4\uc758 \uc18d\uc131\uc744 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud574 \uac80\uc0ac\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0, \uc774\ub294 \uc2e4\uccb4\ud654 \uc2dc\uac04\uae4c\uc9c0 \uac80\uc0ac\ub97c \ubbf8\ub8e8\uac8c \ub41c\ub2e4. \uc6b0\ub9ac\ub294 \uc774 \ubc29\uc2dd\uc774 \uadf8\ub7f4\ub9cc\ud55c \uac00\uce58\uac00 \uc788\ub294 \ud0c0\ud611(worthwhile tradeoff)\uc774\ub77c\uace0 \uc0dd\uac01\ud55c\ub2e4. \uc9c0\uc5ed\uc801\uc774\uc9c0 \uc54a\uace0, \uc758\uc874\uc801\uc774\uc9c0 \uc54a\uc740 \uc774\ub984\ub4e4\uc744( debug \ub098 cerr \uac19\uc740) \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubb38\ub9e5 \uc758\uc874\uc801\uc778 \ucf54\ub4dc\ub97c \ub0b3\uace0, \uc774\ub294 \"\uc6d0\uc778\uc774 \ubd84\uba85\ud558\uc9c0 \uc54a\uc740(mysterious)\" \uc624\ub958\ub4e4\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c. Note \ud0c0\uc785\uc758 \uc5b4\ub5a4 \uc18d\uc131\uc774 \ud544\uc218\uc801\uc778\uc9c0 \uacb0\uc815\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4. Enforcement ??? T.42: \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc744 \uad6c\ud604\uc0ac\ud56d\uc744 \uc228\uae30\uac70\ub098 \ud45c\uae30\ub97c \uac04\ub2e8\ud788 \ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131\uc744 \uc88b\uac8c \ud558\uba70, \uad6c\ud604 \ub0b4\uc6a9(implementation detail)\uc744 \uc228\uae34\ub2e4. \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc740 \ud0c0\uc785\uc744 \uacc4\uc0b0\ud558\uae30 \uc704\ud55c \ub9ce\uc740 \ud2b9\uc131(traits)\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ub300\uccb4\ud574\uc900\ub2e4. \ud0c0\uc785 \ud2b9\uc131\uc744 \uc228\uae30\uae30 \uc704\ud574 \uc4f0\uc77c \uc218\ub3c4 \uc788\ub2e4. Example template < typename T , size_t N > class Matrix { // ... using Iterator = typename std :: vector < T >:: iterator ; // ... }; Matrix \uc0ac\uc6a9\uc790\ub4e4\uc774 \uadf8 \uc694\uc18c\uac00 vector \uc5d0 \uc800\uc7a5\ub418\ub294 \uc810\uc744 \uc54c \ud544\uc694\uac00 \uc5c6\uac8c \ud55c\ub2e4. \ubc18\ubcf5\uc801\uc73c\ub85c typename std::vector<T>:: \ub97c \ud0c0\uc774\ud551\ud558\ub294 \uac83\uc744 \uc904\uc5ec\uc900\ub2e4. Example template < typename T > void user ( T & c ) { // ... typename container_traits < T >:: value_type x ; // bad, verbose // ... } template < typename T > using value_type = typename container_traits < T >:: value_type ; \uc774\uac83\uc740 value_type \uc744 \uc4f0\ub294 \uc0ac\uc6a9\uc790\uac00 value_type \uc758 \uad6c\ud604\uc744 \uc54c \ud544\uc694\uac00 \uc5c6\uac8c \ud55c\ub2e4. template < typename T > void user2 ( T & c ) { // ... value_type < T > x ; // ... } Note \uac04\ub2e8\ud558\uace0 \uc77c\ubc18\uc801\uc778 \uc0ac\uc6a9\uc740 \"\ud2b9\uc131(traits)\uc73c\ub85c \uac10\uc2f8\ub77c!\"\ub77c\uace0 \ud560 \uc218 \uc788\uaca0\ub2e4 Enforcement using \uc73c\ub85c \uc120\uc5b8 \uc774\uc678\uc5d0 \uc911\uc758\uc131 \uc81c\uac70\uc6a9\uc73c\ub85c typename \uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 ??? T.43: \ud0c0\uc785\uc5d0 \ubcc4\uba85\uc744 \ubd99\uc77c\ub54c typedef \ubcf4\ub2e4\ub294 using \uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ub3c5\uc131: using \uc744 \uc0ac\uc6a9\ud558\uba74 \uc0c8 \uba85\uce6d\uc740 \uc120\uc5b8 \uc2dc\uc5d0 \ub4a4\ucabd \uc5b4\ub518\uac00\uc5d0 \uc228\uc5b4 \uc788\uae30\ubcf4\ub2e4\ub294 \uc81c\uc77c \uc55e\uc5d0 \ub098\ud0c0\ub09c\ub2e4. \uc77c\ubc18\uc131(Generality): using \uc740 \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ubc18\uba74 typedef \ub294 \ud15c\ud50c\ub9bf\uc5d0\ub294 \uc4f0\uae30 \uc5b4\ub835\ub2e4. \uc77c\ub960\uc131(Uniformity): using \uc740 \uad6c\ubb38\uc0c1 auto \uc640 \ube44\uc2b7\ud558\ub2e4. Example typedef int ( * PFI )( int ); // OK, but convoluted using PFI2 = int ( * )( int ); // OK, preferred template < typename T > typedef int ( * PFT )( T ); // error template < typename T > using PFT2 = int ( * )( T ); // OK Enforcement typedef \ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c. \"\uc544\uc8fc \ub9ce\uc774\" \ub098\uc62c \uac83\uc774\ub2e4. :-( T.44: (\ud560 \uc218 \uc788\ub2e4\uba74) \ud568\uc218 \ud15c\ud50c\ub9bf\uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc758 \uc778\uc790 \ud0c0\uc785\uc744 \uc720\ub3c4(deduce)\ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c Reason \ud15c\ud50c\ub9bf \uc778\uc790 \ud0c0\uc785\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc4f4\ub2e4\uba74 \ubd88\ud544\uc694\ud558\uac8c \uae38\uc5b4\uc9c8 \uc218 \uc788\ub2e4. Example tuple < int , string , double > t1 = { 1 , \"Hamlet\" , 3.14 }; // explicit type auto t2 = make_tuple ( 1 , \"Ophelia\" s , 3.14 ); // better; deduced type \ubb38\uc790\uc5f4\uc774 C \uc2a4\ud0c0\uc77c\uc774 \uc544\ub2c8\ub77c std::string \uc774\ub77c\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud574 s \ub97c \ub4a4\ucabd\uc5d0 \ubd99\uc778 \uac83\uc5d0 \uc8fc\ubaa9\ud558\ub77c. Note \ub2f9\uc2e0\uc774 \uac04\ub2e8\ud55c make_T \ud568\uc218\ub97c \uc791\uc131\ud558\ub4ef\uc774 \ucef4\ud30c\uc77c\ub7ec\ub3c4 \uadf8\ub807\uac8c \ud560 \uc218 \uc788\ub2e4. \uc544\ub9c8 \ubbf8\ub798\uc5d0\ub294 make_T \ud568\uc218\uac00 \ubd88\ud544\uc694\ud574\uc9c8 \uac83\uc774\ub2e4. Exception \ud15c\ud50c\ub9bf \uc778\uc790\ub97c \ucd94\uc815\ud560 \uc88b\uc740 \ubc29\ubc95\uc774 \uc5c6\uc5b4\uc11c \uc778\uc790\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uae30\uc220\ud560 \uc218\ub3c4 \uc788\ub2e4: vector < double > v = { 1 , 2 , 3 , 7.9 , 15.99 }; list < Record *> lst ; Note C++ 17 \uc5d0\uc11c\ub294 \uc774 \uaddc\uce59\ucc98\ub7fc \ud15c\ud50c\ub9bf \uc778\uc790\ub4e4\uc744 \uc0dd\uc131\uc790\uc758 \uc2e4\ud589 \uc778\uc790\ub4e4\ub85c\ubd80\ud130 \ubc14\ub85c \uc720\ub3c4\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\uace0 \uc788\ub2e4. Template parameter deduction for constructors (Rev. 3) . \uc608\ub97c \ub4e4\uc5b4: tuple t1 = { 1 , \"Hamlet\" s , 3.14 }; // deduced: tuple<int, string, double> Enforcement \uba85\uc2dc\uc801\uc73c\ub85c \ud2b9\uc218\ud654\ub41c \ud0c0\uc785\uc774 \uc0ac\uc6a9\ub41c \uc778\uc790\ub4e4\uc758 \ud0c0\uc785\uacfc \uc815\ud655\ud788 \uc77c\uce58\ud558\ub294 \ubd80\ubd84\uc744 \uc9c0\uc801\ud558\ub77c. T.46: \ud15c\ud50c\ub9bf \uc778\uc790\ub4e4\uc740 \ucd5c\uc18c\ud55c Regular \ud639\uc740 SemiRegular \ud558\ub3c4\ub85d \ud558\ub77c Reason \uac00\ub3c5\uc131. \ub73b\ud558\uc9c0 \uc54a\uc740 \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. \ub300\ubd80\ubd84\uc758 \ud0c0\uc785\ub4e4\uc774 \uc774\ub97c \uc9c0\uc6d0\ud55c\ub2e4. Example class X { // ... public : explicit X ( int ); X ( const X & ); // copy X operator = ( const X & ); X ( X && ) noexcept ; // move X & operator = ( X && ) noexcept ; ~ X (); // ... no more constructors ... }; X x { 1 }; // fine X y = x ; // fine std :: vector < X > v ( 10 ); // error: no default constructor Note SemiRegular \ud0c0\uc785\uc740 \uae30\ubcf8\uc0dd\uc131\uc774 \uac00\ub2a5\ud558\ub2e4. Enforcement \ud15c\ud50c\ub9bf\uc758 \uc778\uc790\uac00 SemiRegular \ud558\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4 T.47: \uc77c\ubc18\uc801\uc778 \uc774\ub984\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74\uc11c \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\uace0 \uc81c\uc57d\uc774 \uac70\uc758 \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc740 \uc9c0\uc591\ud558\ub77c Reason \uc81c\uc57d\ud558\uc9c0 \uc54a\uc740 \ud15c\ud50c\ub9bf \uc778\uc790\ub294 \uc5b4\ub5a4 \ud0c0\uc785\ub3c4 \ub4e4\uc5b4\ub9de\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c \uadf8\ub7f0 \ud15c\ud50c\ub9bf\ub4e4\uc774 \uc57d\uac04\uc758 \ubcc0\ud658\uc774 \ud544\uc694\ud55c \ud0c0\uc785\ub4e4\uc5d0 \uc801\uc6a9\ub418\uc5b4\ubc84\ub9b4 \uc218 \uc788\ub2e4. \uc774\ub294 ADL(Argument Dependent Lookup)\uc774 \uc0ac\uc6a9\ub418\uc5c8\uc744\ub54c \ud2b9\ud788 \uc9dc\uc99d\ub098\uace0 \uc704\ud5d8\ud55c \ucf54\ub4dc\uac00 \ub41c\ub2e4. \uc77c\ubc18\uc801\uc778 \uc774\ub984(common name)\uc774 \uc0ac\uc6a9\ub418\uba74 \uc774 \ubb38\uc81c\uac00 \ub354 \uc790\uc8fc \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4. Example namespace Bad { struct S { int m ; }; template < typename T1 , typename T2 > bool operator == ( T1 , T2 ) { cout << \"Bad \\n \" ; return true ; } } namespace T0 { bool operator == ( int , Bad :: S ) { // compare to int cout << \"T0 \\n \" ; return true ; } void test () { Bad :: S bad { 1 }; vector < int > v ( 10 ); bool b = 1 == bad ; bool b2 = v . size () == bad ; } } \uc774 \ucf54\ub4dc\ub294 T0 \uc640 Bad \ub97c \ucd9c\ub825\ud55c\ub2e4. \uc5ec\uae30\uc11c Bad \uc5d0 \uc788\ub294 == \uc911\ubcf5\uc815\uc758\uac00 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a4\uace0 \uc788\ub2e4, \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c \ubb38\uc81c\ub97c \ub208\uce58\ucc4c \uc218 \uc788\uc5c8\ub294\uac00? \ubb38\uc81c\ub294 v.size() \uac00 unsigned \uc815\uc218\ub97c \ubc18\ud658\ud558\uace0, \uc774\uac83\uc774 \ud0c0\uc785 \ubcc0\ud658\uc744 \ud544\uc694\ub85c\ud558\ub294 \uc9c0\uc5ed == \ub300\uc2e0 \ud0c0\uc785\ubcc0\ud658\uc774 \ud544\uc694 \uc5c6\ub294 Bad \uc758 == \ub97c \uc120\ud0dd\ud558\ub3c4\ub85d \ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubc18\ubcf5\uc790\uac19\uc740 \ud604\uc2e4\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ud0c0\uc785(realistic type)\ub4e4\uc740 \uc774\ub7f0 \ubc18-\uc0ac\ud68c\uc801\uc778 \uae30\uc220\ub4e4\uc744 \uae08\ud558\ub3c4\ub85d \ub9cc\ub4e4 \uc218 \uc788\ub2e4. Note \uac19\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \uc81c\uc57d\uc5c6\ub294 \ud15c\ud50c\ub9bf\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4\uba74, \uadf8 \ud15c\ud50c\ub9bf\uc740 ADL\uc5d0 \uc758\ud574\uc11c (\uc608\uc81c\uc5d0\uc11c \ubc1c\uc0dd\ud55c \uac83\ucc98\ub7fc) \ubc1c\uacac\ub420 \uac83\uc774\ub2e4. \uc774 \ub9d0\uc778 \uc989, \uadf8 \ud15c\ud50c\ub9bf\uc774 \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\ub2e4(highly visible)\ub294 \uac83\uc774\ub2e4. Note \uc774 \uaddc\uce59\uc740 \ud544\uc218\uac00 \ub418\uc5b4\uc120 \uc548\ub41c\ub2e4. \ud558\uc9c0\ub9cc \ud45c\uc900 \uc704\uc6d0\ud68c\uc5d0\uc11c\ub294 ADL\uc5d0\uc11c \uc81c\uc57d \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc744 \uc81c\uc678\ud558\ub294\uac83\uc5d0 \ub3d9\uc758\ud558\uc9c0 \uc54a\ub294\ub2e4. \ubd88\ud589\ud558\uac8c\ub3c4 \uc774 \uaddc\uce59\uc774 \ub9ce\uc740 false positives\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4; \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc218\ub9ce\uc740 \uc81c\uc57d \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc740 \ud558\ub098\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4( std )\uc5d0 \ubc30\uce58\ud568\uc73c\ub85c\uc368 \uc774 \uaddc\uce59\uc744 \uad11\ubc94\uc704\ud558\uac8c \uc704\ubc18\ud55c\ub2e4. Enforcement \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \uad6c\uccb4\uc801\uc778 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \ud15c\ud50c\ub9bf\uc774 \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. (\ucee8\uc149\uc774 \uac00\ub2a5\ud574\uc9c0\uae30 \uc804\uae4c\uc9c0\ub294 \ud604\uc2e4\uc801\uc73c\ub85c \uc2e4\ud589\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4) T.48: \ucef4\ud30c\uc77c\ub7ec\uac00 \ucee8\uc149\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 enable_if \ub85c \uc720\uc0ac\ud558\uac8c \uc791\uc131\ud558\ub77c Reason \ucee8\uc149 \uc9c0\uc6d0\uc774 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c \ucd5c\uc120\uc774\ub2e4. enable_if \ub294 \uc870\uac74\uc5d0 \ub530\ub77c \ud568\uc218\ub97c \uc815\uc758\ud558\uac70\ub098 \uc5ec\ub7ec \ud568\uc218 \uc911 \ud558\ub098\ub97c \uc120\ud0dd\ud560\ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. Example enable_if<???> Note complementary constraints \uc5d0 \uc720\uc758\ud558\ub77c. \ucee8\uc149 \uc624\ubc84\ub85c\ub529\uc744 enable_if \ub85c \uafb8\ubbf8\ub294(fake) \uac83\uc740 \uc624\ub958\uc5d0 \ucde8\uc57d\ud55c \uc124\uacc4 \uae30\ubc95\uc744 \uc4f0\ub3c4\ub85d \ud560 \uc218\ub3c4 \uc788\ub2e4. Enforcement ??? T.49: \uac00\ub2a5\ud558\ub2e4\uba74 \ud0c0\uc785 \uc81c\uac70\ub294 \ud53c\ud558\ub77c \uc5ed\uc8fc : \ud0c0\uc785 \uc81c\uac70(type-erasure) Reason \ud0c0\uc785 \uc81c\uac70\ub294 \uc11c\ub85c \ub2e4\ub978 \ucef4\ud30c\uc77c \ubc94\uc704\ub85c \uc804\ub2ec\ub418\ub294 \ud0c0\uc785 \uc815\ubcf4\uac00 \uc5c6\uc5b4\uc9c0\ubbc0\ub85c \ud2b9\ubcc4\ud55c \uac04\uc811\ud6a8\uacfc\uac00 \ubc1c\uc0dd\ud55c\ub2e4. Example ??? Exception std::function \uc640 \uac19\uc740 \uacbd\uc6b0\ucc98\ub7fc \ub54c\ub85c\ub294 \ud0c0\uc785\uc81c\uac70\uac00 \uc801\uc808\ud560 \uc218 \uc788\ub2e4. Enforcement ??? Note ??? T.def: \ud15c\ud50c\ub9bf \uc815\uc758(Template definitions) \ud15c\ud50c\ub9bf \uc815\uc758 (\ud074\ub798\uc2a4 \ud639\uc740 \ud568\uc218)\ub294 \uc784\uc758\uc758 \ucf54\ub4dc\ub97c \ud3ec\ud568\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, C++ \ud504\ub85c\uadf8\ub798\ubc0d \uae30\uc220\uc5d0 \ub300\ud55c \uc885\ud569\uc801\uc778 \uc124\uba85\ub9cc\uc774 \uc774 \ub0b4\uc6a9\uc744 \ub2e4\ub8ec\ub2e4. \uc774 \ubd80\ubd84\uc5d0\uc11c\ub294 \ud2b9\ubcc4\ud55c \ud15c\ud50c\ub9bf \uad6c\ud604, \ud2b9\ud788, \uadf8 \ucf54\ub4dc\uc758 \ubb38\ub9e5\uc5d0 \uc758\uc874\ud558\ub294 \ud15c\ud50c\ub9bf \uc815\uc758\uc5d0 \ub300\ud574 \uc911\uc810\uc801\uc73c\ub85c \ub2e4\ub8f0 \uac83\uc774\ub2e4. T.60: \ubb38\ub9e5\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c8 \uc218 \uc788\ub294 \ud15c\ud50c\ub9bf\uc740 \ucd5c\uc18c\ud654 \ud558\ub77c Reason \uc774\ud574\uac00 \uc27d\ub2e4. \uc608\uc0c1\uce58 \ubabb\ud55c \uc758\uc874\uc131 \uc624\ub958 \ubc1c\uc0dd\uc744 \ucd5c\uc18c\ud654. \ud234 \uc791\uc131\uc744 \uc27d\uac8c \ud55c\ub2e4. Example template < typename C > void sort ( C & c ) { std :: sort ( begin ( c ), end ( c )); // \ud544\uc694\ud558\uace0 \uc2e4\uc6a9\uc801\uc778 \uc758\uc874\uc131 } template < typename Iter > Iter algo ( Iter first , Iter last ) { for (; first != last ; ++ first ) { auto x = sqrt ( * first ); // \uc7a0\uc7ac\uc801 \uc758\uc874\uc131: \uc5b4\ub5a4 sqrt\ub97c \uc758\ubbf8\ud558\ub294 \uac83\uc778\uac00? helper ( first , x ); // \uc7a0\uc7ac\uc801 \uc758\uc874\uc131: // helper\ub294 first\uc640 x\uc5d0 \uc758\ud574\uc11c \uacb0\uc815\ub41c\ub2e4 TT var = 7 ; // \uc7a0\uc7ac\uc801 \uc758\uc874\uc131: TT \ub294 \uc5b4\ub5a4 \ud0c0\uc785 \uc758\ubbf8\ud558\ub294\uac00? } } Note \ud15c\ud50c\ub9bf\ub4e4\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ud5e4\ub354 \ud30c\uc77c\ub4e4\uc5d0 \uc815\uc758\ub418\uae30 \ub54c\ubb38\uc5d0 .cpp \ud30c\uc77c\uc5d0\uc11c #include \uc21c\uc11c\uc758 \uc601\ud5a5\uc744 \ubc1b\uc744 \uc18c\uc9c0\uac00 \ub354 \ud06c\ub2e4(more vulnerable). Note \uc778\uc790\ub9cc\uc744 \uc0ac\uc6a9\ud574\uc11c \ud15c\ud50c\ub9bf\uc744 \ub3d9\uc791\ud558\uac8c \ud558\ub294 \uac83\uc774 \uc758\uc874\ub3c4\ub97c \ucd5c\uc18c\ud55c\uc73c\ub85c \uc904\uc77c \uc218 \uc788\ub294 \ud55c\uac00\uc9c0 \ubc29\ubc95\uc778\ub370 \uc77c\ubc18\uc801\uc73c\ub85c\ub294 \ud798\ub4e4\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub2e4\ub978 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\ub294 \ud55c \uc54c\uace0\ub9ac\uc998\uc740 \uc2e4\ud589 \uc778\uc790\ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uac8c \ud558\uc9c0 \ub9d0\ub77c! See also T.69 Enforcement ??? \uae4c\ub2e4\ub86d\ub2e4(Tricky) T.61: \ub108\ubb34 \ub9ce\uc740 \uba64\ubc84\ub97c \ub9e4\uac1c\ubcc0\uc218\ud654 \ud558\uc9c0 \ub9d0\ub77c (SCARY) Reason \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\ub85c \uc4f0\uc774\uc9c0 \uc54a\ub294 \uba64\ubc84\ub294 \uad6c\uccb4\uc801\uc778 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\ub97c \uc81c\uc678\ud558\uace0 \uc0ac\uc6a9\ub420 \uc218 \uc5c6\ub2e4. \uc774\ub294 \ubcf4\ud1b5 \ud15c\ud50c\ub9bf \uc0ac\uc6a9\uc744 \uc81c\ud55c\ud558\uace0 \ucf54\ub4dc \uc0ac\uc774\uc988\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4. Example, bad template < typename T , typename A = std :: allocator {} > // requires Regular<T> && Allocator<A> class List { public : struct Link { // does not depend on A T elem ; T * pre ; T * suc ; }; using iterator = Link * ; iterator first () const { return head ; } // ... private : Link * head ; }; List < int > lst1 ; List < int , My_allocator > lst2 ; \uc544\ubb34 \ubb38\uc81c \uc5c6\uc5b4 \ubcf4\uc778\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ucf54\ub4dc\uc5d0\uc11c Link \ub294 allocator\uc5d0 \uc885\uc18d\uc801\uc774\ub2e4(\ube44\ub85d allocator\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4). \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc911\ubcf5\uc801\uc778 \uc2e4\uccb4\ud654(instantiation)\uac00 \ubc1c\uc0dd\ud558\ub3c4\ub85d \uac15\uc81c\ud558\uace0, \uc2e4\uc81c \uc0ac\ub840\uc5d0\uc11c\ub294 \uc0dd\uac01 \uc774\uc0c1\uc758 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c, \uc774\uc5d0 \ub300\ud55c \ud574\uacb0\ucc45\uc740 \ucd5c\uc18c\ud55c\uc758 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\ub85c \ub0b4\ud3ec\ub41c \ud074\ub798\uc2a4(nested class)\ub97c \ubd84\ub9ac\ud558\ub294 \uac83\uc774\ub2e4. template < typename T > struct Link { T elem ; T * pre ; T * suc ; }; template < typename T , typename A = std :: allocator {} > // requires Regular<T> && Allocator<A> class List2 { public : using iterator = Link < T >* ; iterator first () const { return head ; } // ... private : Link * head ; }; List < int > lst1 ; List < int , My_allocator > lst2 ; \uc5b4\ub5a4 \uc774\ub4e4\uc740 Link \ud0c0\uc785\uc774 List \uc548\uc5d0 \uc228\uaca8\uc9c0\uc9c0 \uc54a\uc74c\uc73c\ub85c\uc368 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218 \ucda9\ub3cc\ub85c \uc778\ud55c \uc624\ub958\uac00 \uc0dd\uae38 \uac83 \uac19\uc9c0\ub9cc \uc2e4\uc81c\ub85c\ub294 \uc81c\ub300\ub85c \uad6c\ud604\ub41c\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c \ub418\uc5c8\ub2e4. \uc774\ub7f0 \uae30\uad50(technique)\ub97c SCARY \ub77c \ud55c\ub2e4. \ud574\ub2f9 \ubb38\uc11c\uc5d0 \ub530\ub974\uba74: \"The acronym SCARY describes assignments and initializations that are Seemingly erroneous (appearing Constrained by conflicting generic parameters), but Actually work with the Right implementation (unconstrained bY the conflict due to minimized dependencies.\" Enforcement \uba64\ubc84 \ud0c0\uc785\uc774 \uc758\uc874\ud558\uc9c0 \uc54a\ub294 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \uba64\ubc84 \ud568\uc218\uac00 \uc758\uc874\ud558\uc9c0 \uc54a\ub294 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 T.62: \uc885\uc18d\uc801\uc774\uc9c0 \uc54a\uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf \uba64\ubc84\ub4e4\uc740 \ud15c\ud50c\ub9bf\uc774 \uc544\ub2cc \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ubc30\uce58\ud558\ub77c Reason \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\ub97c \uba85\uc2dc\ud558\uac70\ub098 \ud15c\ud50c\ub9bf\uc744 \uc2e4\uccb4\ud654\uc2dc\ud0a4\uc9c0 \uc54a\uace0\ub3c4 \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uba64\ubc84\ub97c \uc0ac\uc6a9\ud558\uac8c \ud55c\ub2e4. Example template < typename T > class Foo { public : enum { v1 , v2 }; // ... }; ??? struct Foo_base { enum { v1 , v2 }; // ... }; template < typename T > class Foo : public Foo_base { public : // ... }; Note \uc774 \uaddc\uce59\uc744 \uc880 \ub354 \uc77c\ubc18\ud654 \ud558\uc790\uba74 \"\ud15c\ud50c\ub9bf \ud074\ub798\uc2a4\uc758 \uba64\ubc84\uac00 M\uac1c\uc758 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218 \uc911 N\uac1c\uc5d0 \uc758\uc874\uc801\uc774\ub77c\uba74, \uc774\ub4e4\uc740 N\uac1c\uc758 \ub9e4\uac1c\ubcc0\uc218\ub9cc\uc744 \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ud074\ub798\uc2a4\uc5d0 \ubc30\uce58\ud558\ub77c\" N\uc774 1\uc77c\ub54c\ub294 T.61 \uaddc\uce59\uc744 \ucda9\uc871\ud558\ub294 \ud074\ub798\uc2a4 \uc911\uc5d0\uc11c \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \uc120\ud0dd\ud560 \uc218 \uc788\ub2e4. ??? \uc0c1\uc218\ub098 static \uba64\ubc84\ub294 \uc5b4\ub5a0\ud55c\uac00? Enforcement ???\ub97c \uc9c0\uc801\ud558\ub77c T.64: \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc758 \ub300\uc548\uc801(alternative) \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 \ud2b9\uc218\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ud15c\ud50c\ub9bf\uc740 \uc77c\ubc18\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud55c \uac83\uc774\ub2e4. \ud2b9\uc218\ud654(specialization)\ub294 \uadf8 \uc778\ud130\ud398\uc774\uc2a4\uc758 \ub300\uc548\uc801 \uad6c\ud604(alternative implementation)\uc744 \uc704\ud55c \uac15\ub825\ud55c \uba54\ucee4\ub2c8\uc998\uc744 \uc81c\uacf5\ud55c\ub2e4. Example ??? string specialization (==) ??? representation specialization ? Note ??? Enforcement ??? T.65: \ud568\uc218\uc758 \ub300\uc548\uc801(alternative) \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 Tag dispatch\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ud15c\ud50c\ub9bf\uc740 \uc77c\ubc18\ud654\ub41c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud55c\ub2e4 Tag dispatch\ub294 \uc2e4\ud589 \uc778\uc790\uc758 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\uc11c \ud2b9\uc815\ud55c \uc18d\uc131\uc5d0 \ub530\ub978 \uad6c\ud604\uc744 \uc120\ud0dd\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4 \uc131\ub2a5 Example std::copy \ub97c \ub2e8\uc21c\ud654 \ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4 (\uba54\ubaa8\ub9ac \uc0c1\uc5d0\uc11c \uc778\uc811\ud558\uc9c0 \uc54a\uc744 \uac00\ub2a5\uc131\uc744 \ubc30\uc81c\ud558\uc600\ub2e4). struct pod_tag {}; struct non_pod_tag {}; template < class T > struct copy_trait { using tag = non_pod_tag ; }; // T is not \"plain old data\" template <> struct copy_trait < int > { using tag = pod_tag ; }; // int is \"plain old data\" template < class Iter > Out copy_helper ( Iter first , Iter last , Iter out , pod_tag ) { // use memmove } template < class Iter > Out copy_helper ( Iter first , Iter last , Iter out , non_pod_tag ) { // use loop calling copy constructors } template < class Itert > Out copy ( Iter first , Iter last , Iter out ) { return copy_helper ( first , last , out , typename copy_trait < Iter >:: tag {}) } void use ( vector < int >& vi , vector < int >& vi2 , vector < string >& vs , vector < string >& vs2 ) { copy ( vi . begin (), vi . end (), vi2 . begin ()); // uses memmove copy ( vs . begin (), vs . end (), vs2 . begin ()); // uses a loop calling copy constructors } \uc704 \ucf54\ub4dc\ub294 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uc54c\uace0\ub9ac\uc998\uc744 \uc120\ud0dd\ud558\ub294 \uc77c\ubc18\uc801\uc774\uace0 \uac15\ub825\ud55c \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc900\ub2e4. Note Concept\uac00 \uc801\uc6a9 \uac00\ub2a5\ud574\uc9c0\uba74 \uc774\ub7f0 \ub300\uc548\uc740 \ubc14\ub85c \uad6c\ubcc4\ub420 \uc218 \uc788\uc744 \uac83\uc774\ub2e4: template < class Iter > requires Pod < Value_type < iter >> Out copy_helper ( In , first , In last , Out out ) { // use memmove } template < class Iter > Out copy_helper ( In , first , In last , Out out ) { // use loop calling copy constructors } Enforcement ??? T.67: \uc815\uaddc\uc801\uc774\uc9c0 \uc54a\uc740 \ud0c0\uc785(irregular types)\ub4e4\uc758 \ub300\uc548\uc801 \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 \ud2b9\uc218\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c Reason ??? Example ??? Enforcement ??? T.68: \ubaa8\ud638\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud15c\ud50c\ub9bf\uc5d0\uc11c\ub294 () \ubcf4\ub2e4\ub294 {} \ub97c \uc0ac\uc6a9\ud558\ub77c Reason () \ub294 \ubb38\ubc95\uc801\uc73c\ub85c \ubaa8\ud638\ud55c \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud55c\ub2e4(vulnerable to grammar ambiguities). Example template < typename T , typename U > void f ( T t , U u ) { T v1 ( x ); // v1\uc740 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uc778\uac00? T v2 { x }; // v2\uac00 \ubcc0\uc218\ub77c\ub294 \uac83\uc744 \ubc14\ub85c \uc54c \uc218 \uc788\ub2e4 auto x = T ( u ); // \uac1c\uccb4 \uc0dd\uc131\uc778\uac00? \ud0c0\uc785 \ubcc0\ud658\uc778\uac00? } f ( 1 , \"asdf\" ); // bad: cast from const char* to int \ucc38\uace0: Why C++ Sails When the Vasa Sank Enforcement \ucd08\uae30\ud654\uc5d0 () \ub97c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c \ud568\uc218\ucc98\ub7fc \ubcf4\uc774\ub294 \ud0c0\uc785 \ubcc0\ud658(cast)\uc744 \uc9c0\uc801\ud558\ub77c T.69: \uc81c\uc57d\uc5c6\ub294(unqualified) \ube44-\uba64\ubc84 \ud568\uc218 \ud638\ucd9c\uc740 \ud574\ub2f9 \ubd80\ubd84\uc774 \ubcc0\uacbd\ub420 \uc218 \uc788\ub3c4\ub85d \ud558\ub824\ub294\uac8c \uc544\ub2c8\ub77c\uba74 \ud15c\ud50c\ub9bf \ub0b4\uc5d0\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Inside a template, don't make an unqualified nonmember function call unless you intend it to be a customization point Reason \uc758\ub3c4\ud55c\ub9cc\ud07c\ub9cc \uc720\uc5f0\uc131\uc744 \uc81c\uacf5\ud558\ub77c. \uc758\ub3c4\uce58 \uc54a\uc740 \ud658\uacbd\uc801 \ubcc0\ud654\uc5d0 \ub300\ud55c \ucde8\uc57d\ud568\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4. Example \ud638\ucd9c\ud558\ub294 \ucf54\ub4dc\uc5d0\uc11c \ud15c\ud50c\ub9bf\uc744 \uc758\ub3c4\uc801\uc73c\ub85c \uc870\uc815\ud558\ub3c4\ub85d \ud5c8\uc6a9\ud558\ub294\ub370\ub294 \uc8fc\ub85c 3\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\ub2e4. template < class T > // 1. \uba64\ubc84 \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4 void test1 ( T t ) { t . f (); // f() \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \ud0c0\uc785 T\ub97c \uc694\uad6c\ud55c\ub2e4 } template < class T > void test2 ( T t ) // 2. \uc81c\ud55c\ud558\uc9c0 \uc54a\uc740(without qualification) \ube44-\uba64\ubc84\ud568\uc218 { f ( t ); // \ud638\ucd9c\uc790\uc758 \ubc94\uc704(scope) \ud639\uc740 T\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 f(/*T*/)\ub97c \uc694\uad6c\ud55c\ub2e4 } template < class T > void test3 ( T t ) // 3. \"trait\" \uc744 \ud1b5\ud574\uc11c \ud638\ucd9c\ud55c\ub2e4 { test_traits < T >:: f ( t ); // \uae30\ubcf8 \ud568\uc218/\ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744\ub54c\ub294 // test_traits<> \ub97c \uc870\uc791(customize)\ud558\ub3c4\ub85d \ud55c\ub2e4. } trait\uc740 \ubcf4\ud1b5 \ud0c0\uc785\uc744 \uacc4\uc0b0\ud558\uae30 \uc704\ud55c \ud0c0\uc785\uc774\uac70\ub098, \uac12\uc744 \uacc4\uc0b0\ud558\ub294 constexpr \ud568\uc218\uc774\uac70\ub098, \uc0ac\uc6a9\uc790\uc758 \ud0c0\uc785\uc73c\ub85c \ud2b9\uc218\ud654\ub418\ub294 \uc804\ud1b5\uc801\uc778 traits \ud15c\ud50c\ub9bf\uc744 \uc758\ubbf8\ud55c\ub2e4. Note t \uac12\uc73c\ub85c \ud15c\ud50c\ub9bf \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\ub85c \ub41c helper(t) \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub824\uace0 \ud55c\ub2e4\uba74, ::detail \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ud568\uc218\ub97c \ub450\uace0 detail::helper(t); \ub85c \ud638\ucd9c\ud558\ub77c. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 t \ud0c0\uc785\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\ub294 \ub2e4\ub978 helper \ud568\uc218\uac00 \ud638\ucd9c\ub420 \uc218\ub3c4 \uc788\ub2e4. \ud568\uc218\uc5d0 \uc81c\uc57d\uc774 \uc5c6\ub294 \uacbd\uc6b0 ADL \uc744 \ucc38\uace0\ud558\ub77c Enforcement In a template, flag an unqualified call to a nonmember function that passes a variable of dependent type when there is a nonmember function of the same name in the template's namespace. T.temp-hier: \ud15c\ud50c\ub9bf\uacfc \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870 C++\uc5d0\uc11c \ud15c\ud50c\ub9bf\uc740 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc9c0\uc6d0\ud558\uae30 \uc704\ud55c \ud575\uc2ec\uae30\ub2a5\uc774\ub2e4. \ub3d9\uc2dc\uc5d0 \ud074\ub798\uc2a4 \uacc4\uce35\uc740 \uac1c\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uadfc\uac04\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \uc774 \ub450\uac1c \uc5b8\uc5b4 \uae30\ub2a5\uc740 \ud569\ud574\uc11c \ud6a8\uacfc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub2e4\ub9cc \uba87\uac00\uc9c0 \ub514\uc790\uc778 \ud568\uc815\uc740 \ud53c\ud574\uc57c \ud55c\ub2e4. T.80: \ucda9\ubd84\ud55c \uace0\ub824 \uc5c6\uc774 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \ud15c\ud50c\ub9bf\uc73c\ub85c \ubc14\uafb8\uc9c0 \ub9d0\uc544\ub77c Reason \ud568\uc218\ub3c4 \ub9ce\uace0 \uac00\uc0c1\ud568\uc218\ub3c4 \ub9ce\uc740 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \ud15c\ud50c\ub9bf\ud654\ud558\uba74 \ucf54\ub4dc\uac00 \ud3ed\ubc1c\uc801\uc73c\ub85c \uc99d\uac00\ud560 \uc218 \uc788\ub2e4. Example, bad template < typename T > struct Container { // an interface virtual T * get ( int i ); virtual T * first (); virtual T * next (); virtual void sort (); }; template < typename T > class Vector : public Container < T > { public : // ... }; Vector < int > vi ; Vector < string > vs ; \ucee8\ud14c\uc774\ub108\uc758 \uba64\ubc84\ud568\uc218\ub85c sort \ub97c \uc815\uc758\ud558\ub294 \uac74 \ubcc4\ub85c \uc88b\uc740 \uc0dd\uac01\uc774 \uc544\ub2c8\ub2e4. \ub4e4\uc5b4 \ubcf8 \uc801\uc774 \uc5c6\ub294\uac74 \uc544\ub2c8\uc9c0\ub9cc \ud558\uc9c0 \ub9d0\uc544\uc57c \ud560 \uc88b\uc740 \ubcf8\ubcf4\uae30\uac00 \ub420 \uac83\uc774\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uac00 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud574\uc57c \ud558\ub294\ub370 vector<int>::sort() \uac00 \ud638\ucd9c\ub418\ub294\uc9c0 \uc54c \uc218\uac00 \uc5c6\ub2e4. vector<string>::sort() \uc5d0 \ub300\ud574\uc11c\ub3c4 \ube44\uc2b7\ud558\ub2e4. \ub450 \ud568\uc218\uac00 \ud638\ucd9c\ud558\uc9c0 \uc54a\uc73c\uba74 \ucf54\ub4dc\ub9cc \ucee4\uc9c4 \uaf34\uc774\ub2e4. \uc2ed\uc5ec\uac1c\uc758 \uba64\ubc84 \ud568\uc218\uc640 \uc2ed\uc5ec\uac1c\uc758 \ud30c\uc0dd\ud074\ub798\uc2a4\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uac00 \ub2e4\uc591\ud558\uac8c \uc778\uc2a4\ud134\uc2a4\ud654\ub418\uba74 \ubb34\uc5c7\uc744 \ud560\uc9c0 \uc0c1\uc0c1\ud574\ubcf4\ub77c. Note \ub9ce\uc740 \uacbd\uc6b0 \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c\uc368 \uc548\uc815\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\ub2e4; \"stable base\" \uc640 OO and GP \ub97c \ud568\uaed8\ubcf4\ub77c. Enforcement \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \uc758\uc874\ud558\ub294 \uac00\uc0c1\ud568\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c T.81: \uacc4\uce35\uad6c\uc870\uc640 \ubc30\uc5f4\uc744 \uc11e\uc5b4\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c Reason \ud30c\uc0dd \ud074\ub798\uc2a4 \ubc30\uc5f4\uc740 \uae30\ubcf8\ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub85c \"decay\"\ub420 \uc218 \uc788\ub294\ub370 \ucc98\ucc38\ud55c(disastrous) \uacb0\uacfc\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4. Example Apple , Pear \uac00 Fruit \uc758 \uc885\ub958\ub77c\uace0 \uac00\uc815\ud558\uc790. void maul ( Fruit * p ) { * p = Pear {}; // put a Pear into *p p [ 1 ] = Pear {}; // put a Pear into p[1] } Apple aa [] = { an_apple , another_apple }; // aa contains Apples (obviously!) maul ( aa ); Apple & a0 = & aa [ 0 ]; // a Pear? Apple & a1 = & aa [ 1 ]; // a Pear? \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud558\uc9c4 \uc54a\uc558\uc9c0\ub9cc, aa[0] \ub294 Pear \uc77c \uac83\uc774\ub2e4. sizeof(Apple) != sizeof(Pear) \uc774\ubbc0\ub85c aa[1] \uc5d0 \uc811\uadfc\ud558\uba74 \ubc30\uc5f4\uc5d0\uc11c \uc624\ube0c\uc81d\ud2b8\uc758 \uc62c\ubc14\ub978 \uc2dc\uc791\uc704\uce58\ub85c \uc815\ub82c\ub420 \uc218 \uc5c6\uc744 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \ud0c0\uc785 \uc704\ubc18\uc774 \ub418\uace0, \uba54\ubaa8\ub9ac\uac12\uc774 \ub9dd\uac00\uc9c0\uac8c \ub41c\ub2e4. \uc808\ub300\ub85c \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c. maul() \uc774 T* \ub294 \uac1c\ubcc4\uc801\uc778(individual) \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a8\ub2e4\ub294 \uaddc\uce59 \uc744 \uc704\ubc18\ud55c\ub2e4\ub294 \uc810\uc744 \ub208\uc5ec\uaca8 \ubcf4\ub77c. Alternative \uc801\ub2f9\ud55c (\ud15c\ud50c\ub9bf) \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud558\ub77c. void maul2 ( Fruit * p ) { * p = Pear {}; // put a Pear into *p } vector < Apple > va = { an_apple , another_apple }; // va contains Apples (obviously!) maul2 ( va ); // error: cannot convert a vector<Apple> to a Fruit* maul2 ( & va [ 0 ]); // you asked for it Apple & a0 = & va [ 0 ]; // a Pear? maul2() \uc5d0\uc11c\uc758 \ub300\uc785\uc740 \ubcf5\uc0ac \uc190\uc2e4\uc774 \uc5c6\ub3c4\ub85d \ud558\ub77c\ub294 \uaddc\uce59 \uc744 \uc704\ubc18\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c. Enforcement \uc774 \uacf5\ud3ec\uc2a4\ub7ec\uc6b4 \ubb38\uc81c\ub97c \ucc3e\uc544\ub0b4\uc57c \ud55c\ub2e4! T.82: \uac00\uc0c1 \ud568\uc218\ub97c \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacc4\uce35 \uad6c\uc870\ub97c \uc81c\uac70\ud558\ub77c(linearize) Reason ??? Example ??? Enforcement ??? T.83: \uba64\ubc84 \ud568\uc218\ub294 \ud15c\ud50c\ub9bf\uc774\uba74\uc11c virtual\ud55c \ud568\uc218\ub85c \uc120\uc5b8\ud574\uc120 \uc548\ub41c\ub2e4 Reason C++\uc774 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. \uac00\uc0c1\ud568\uc218 \ud14c\uc774\ube14(vtbl)\uc740 \ub9c1\ud06c \uc2dc\uac04\uae4c\uc9c0\ub294 \uc0dd\uc131\ud560 \uc218 \uc5c6\ub2e4. \ub54c\ubb38\uc5d0 \ubcf4\ud1b5\uc740 \ub3d9\uc801\ub9c1\ud0b9\uc73c\ub85c \uad6c\ud604\ud574\uc57c \ud55c\ub2e4. Example, don't class Shape { // ... template < class T > virtual bool intersect ( T * p ); // error: template cannot be virtual }; Note \uc0ac\ub78c\ub4e4\uc774 \uc774\uc640 \uad00\ub828\ud574 \uacc4\uc18d \ubb3c\uc5b4\ubcf4\uace0 \uc788\ub2e4. \uaddc\uce59\uc774 \ud544\uc694\ud558\ub2e4. Alternative Double dispatch, Visitor \ud328\ud134, \uc5b4\ub5a4 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294\uc9c0 \ubd84\uc11d\ud55c\ub2e4. Enforcement \ucef4\ud30c\uc77c\ub7ec\uac00 \ucc98\ub9ac\ud55c\ub2e4. T.84: \uc548\uc815\ub41c ABI\ub97c \uc9c0\uc6d0\ud558\uace0\uc790 \ud560\ub54c\ub294 \ud575\uc2ec \uad6c\ud604\uc5d0 \ud15c\ud50c\ub9bf\uc744 \uc4f0\uc9c0 \ub9c8\ub77c Reason \ucf54\ub4dc \uc548\uc815\uc131\uc744 \uac1c\uc120\ud55c\ub2e4. \ucf54\ub4dc\uac00 \uae09\uc99d\ud558\ub294 \uac83\uc744 \ub9c9\uc544\uc900\ub2e4. Example \uae30\ubcf8 \ud074\ub798\uc2a4\ub85c \ub9cc\ub4e4\uc218\ub3c4 \uc788\ub2e4: struct Link_base { // stable Link_base * suc ; Link_base * pre ; }; template < typename T > // templated wrapper to add type safety struct Link : Link_base { T val ; }; struct List_base { Link_base * first ; // first element (if any) int sz ; // number of elements void add_front ( Link_base * p ); // ... }; template < typename T > class List : List_base { public : void put_front ( const T & e ) { add_front ( new Link < T > { e }); } // implicit cast to Link_base T & front () { static_cast < Link < T >*> ( first ). val ; } // explicit cast back to Link<T> // ... }; List < int > li ; List < string > ls ; \uc5ec\uae30\ub294 List \uc758 \uc694\uc18c\ub97c \uc5f0\uacb0\ud558\uace0 \ud574\uc81c\ud558\ub294 \ud568\uc218\uac00 \ud55c\ubc8c(one copy)\ub9cc \uc788\ub2e4. Link , List \ud074\ub798\uc2a4\ub294 \ud0c0\uc785 \uc870\uc791\ub9cc \ud55c\ub2e4. \uae30\ubcf8 \ud0c0\uc785\uc744 \ubd84\ub9ac\ud558\ub294 \ub300\uc2e0\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c\ub294 void , void* \uc5d0 \ub300\ud574\uc11c \ud2b9\uc218\ud654\ud558\uace0 \ud575\uc2ec void \uad6c\ud604\uc5d0\uc11c \uc548\uc804\ud558\uac8c T \ub85c \ud615\ubcc0\ud658\ud558\ub3c4\ub85d \ud15c\ud50c\ub9bf\uc744 \uac00\uc9c0\ub3c4\ub85d \ud55c\ub2e4. Alternative Pimpl \uc744 \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4 Enforcement ??? T.var: \uac00\ubcc0 \ud15c\ud50c\ub9bf \uaddc\uce59\ub4e4 ??? T.100: \ub2e4\uc591\ud55c \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uac00\ubcc0\uc801\uc778 \uc218\uc758 \uc2e4\ud589\uc778\uc790\ub4e4\uc744 \ucc98\ub9ac\ud558\ub294 \ud568\uc218\uac00 \ud544\uc694\ud560 \ub54c\ub294 \uac00\ubcc0 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \uac00\ubcc0\uc778\uc790 \ud15c\ud50c\ub9bf\uc740 \uac00\uc7a5 \uc77c\ubc18\ud654\ub41c \uba54\ucee4\ub2c8\uc998\uc774\uba74\uc11c \ub3d9\uc2dc\uc5d0 \ud6a8\uc728\uc801\uc774\uace0, \ud0c0\uc785\uc548\uc815\uc131\uc744 \uc9c0\ub2cc\ub2e4. C \ud615\uc2dd\uc758 \uac00\ubcc0\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c. Example ??? printf Enforcement \ucf54\ub4dc\uc5d0 va_arg \uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 T.101: ??? How to pass arguments to a variadic template ??? Reason ??? Example ??? \uc774\ub3d9\ub9cc \uac00\ub2a5\ud558\uac70\ub098 \uc778\uc790 \ucc38\uc870\uc5d0 \uc8fc\uc758\ud558\ub77c Enforcement ??? T.102: ??? How to process arguments to a variadic template ??? Reason ??? Example ??? forwarding, type checking, references Enforcement ??? T.103: \ub3d9\uc77c \ud0c0\uc785\uc758 \uc2e4\ud589\uc778\uc790\ub4e4\uc744 \uc704\ud574\uc11c \uac00\ubcc0\ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c Reason \uac19\uc740 \ud0c0\uc785\uc758 \uc778\uc790\ub4e4\uc740 initializer_list \ud615\ud0dc\ub85c \ub354 \uc815\ud655\ud788 \uba85\uc2dc\ud560 \uc218 \uc788\ub2e4. Example ??? Enforcement ??? T.meta: \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d (TMP) \ud15c\ud50c\ub9bf\uc740 \ucef4\ud30c\uc77c-\ud0c0\uc784 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \uc77c\ubc18\uc801\uc778 \ub9e4\ucee4\ub2c8\uc998\uc744 \uc81c\uacf5\ud55c\ub2e4. \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ud558\ub098 \uc774\uc0c1\uc758 \uc785\ub825\uc774\ub098 \uacb0\uacfc \uc790\uccb4\uac00 \ud0c0\uc785\uc778 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ub9d0\ud55c\ub2e4. \ud15c\ud50c\ub9bf\uc740 \ud29c\ub9c1 \uc644\uc804\uc131\uc744 \uac00\uc9c4 (modulo memory capacity) \ub355\ud0c0\uc774\ud551\uc744 \uc81c\uacf5\ud55c\ub2e4.\uc774\ub97c \uc704\ud574 \ud544\uc694\ud55c \ubb38\ubc95\uacfc \uae30\uc220\uc740 \uc544\uc8fc \ub054\ucc0d\ud558\ub2e4(horrendous). T.120: \uc815\ub9d0 \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c Reason \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc62c\ubc14\ub974\uac8c \uc4f0\uae30\uac00 \uc5b4\ub835\uace0, \ucef4\ud30c\uc77c \uc18d\ub3c4\ub97c \ub290\ub9ac\uac8c \ud558\uace0, \uc720\uc9c0\ubcf4\uc218\ub97c \uc5b4\ub835\uac8c \ud55c\ub2e4. \uadf8\ub7ec\ub098 \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc774 \uc804\ubb38\uac00 \uc218\uc900\uc758 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ubcf4\ub2e4 \uc131\ub2a5\uc774 \ub354 \uc88b\uc740 \uc608\ub4e4\uc774 \uc788\ub2e4. \uac8c\ub2e4\uac00 \ub7f0\ud0c0\uc784 \ucf54\ub4dc\ubcf4\ub2e4 \ud575\uc2ec\uc0ac\uc0c1\uc744 \ub354 \uc798 \ud45c\ud604\ud558\ub294 \uc2e4\uc81c \uc608\ub4e4\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 AST(Abstract Syntax Tree)\ub97c \uc870\uc791\ud574\uc57c \ud55c\ub2e4\uba74 (\uc608\ucee8\ub300 \uc120\ud0dd\uc801\uc73c\ub85c \ud589\ub82c \uc5f0\uc0b0\uc744 \uc804\ud30c(folding)\ud55c\ub2e4\ub358\uc9c0) C++\uc5d0\uc11c\ub294 \ub2e4\ub978 \ubc29\ubc95\uc774 \uc5c6\ub2e4. Example, bad ??? Example, bad enable_if \ub300\uc548\uc73c\ub85c, \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc5b8\uc5b4\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95 \uc744 \ucc38\uace0\ud558\ub77c. Example ??? \uc88b\uc740 \uc608\uc81c\uac00 \ud544\uc694\ud558\ub2e4 Alternative \ub9cc\uc57d \uacb0\uacfc\uac00 \ud0c0\uc785\uc774 \uc544\ub2c8\ub77c \uac12\uc774\ub77c\uba74 constexpr \ud568\uc218 \ub97c \uc0ac\uc6a9\ud558\ub77c. Note \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc804\ucc98\ub9ac \ub9e4\ud06c\ub85c\ub85c \ub300\uc2e0\ud558\uace0 \uc2f6\ub2e4\uace0 \ub290\ub080\ub2e4\uba74 \ub108\ubb34 \ub098\uac04\uac83\uc774\ub2e4. T.121: \ucee8\uc149\uc744 \ubaa8\ubc29(emulate)\ud558\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c Use template metaprogramming primarily to emulate concepts Reason \ucee8\uc149 \uac1c\ub150\uc774 \ub110\ub9ac \uc0ac\uc6a9\ub420\ub54c\uae4c\uc9c0 TMP\ub97c \uc0ac\uc6a9\ud574\uc11c \uc5d0\ubbac\ub808\uc774\ud2b8\ud574\uc57c \ud560 \uac83\uc774\ub2e4. (\ucee8\uc149\uc5d0 \uae30\ubc18\ud55c \uc911\ubcf5\uc815\uc758\uc640 \uac19\uc774) \ucee8\uc149\uc774 \ud544\uc694\ud55c \uacbd\uc6b0(usecase)\ub4e4\uc740 \ubcf4\ud1b5 TMP\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4. Example template < typename Iter > /*requires*/ enable_if < random_access_iterator < Iter > , void > advance ( Iter p , int n ) { p += n ; } template < typename Iter > /*requires*/ enable_if < forward_iterator < Iter > , void > advance ( Iter p , int n ) { assert ( n >= 0 ); while ( n -- ) ++ p ;} Note \uc544\ub798 \ucf54\ub4dc\ub294 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\uba74 \uc5c4\uccad \uc26c\uc6cc\uc9c4\ub2e4: void advance ( RandomAccessIterator p , int n ) { p += n ; } void advance ( ForwardIterator p , int n ) { assert ( n >= 0 ); while ( n -- ) ++ p ;} Enforcement ??? T.122: \ud15c\ud50c\ub9bf(\ub300\ubd80\ubd84 \ud15c\ud50c\ub9bf \ubcc4\uce6d)\uc740 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud0c0\uc785\uc744 \uacc4\uc0b0\ud560\ub54c \uc0ac\uc6a9\ud558\ub77c Reason \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ud0c0\uc785\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uc720\uc77c\ud558\uace0 \uc9c1\uc811\uc801\uc778 \ubc29\ubc95\uc774\ub2e4. Note \"\ud2b9\uc131(Traits)\" \uc0ac\uc6a9\ubc29\ubc95\uc740 \ub300\ubd80\ubd84 \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc774\ub098 constexpr \ud568\uc218\ub85c \ub300\uccb4\ub418\uc5c8\ub2e4. Example ??? big object / small object optimization Enforcement ??? T.123: \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uac12\uc744 \uacc4\uc0b0\ud55c\ub2e4\uba74 constexpr \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ud568\uc218\ub294 \uac12 \uacc4\uc0b0\uc744 \ud45c\ud604\ud558\ub294\ub370 \uac00\uc7a5 \ubd84\uba85\ud558\uace0 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc774\ub2e4. \ub54c\ub54c\ub85c constexpr \ud568\uc218\ub294 \uc77c\ubc18 \ud568\uc218\ubcf4\ub2e4 \ucef4\ud30c\uc77c \ube44\uc6a9\uc774 \uc801\ub2e4. Note \"\ud2b9\uc131(Traits)\" \uc0ac\uc6a9\ubc29\ubc95\uc740 \ub300\ubd80\ubd84 \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc774\ub098 constexpr \ud568\uc218\ub85c \ub300\uccb4\ub418\uc5c8\ub2e4. Example template < typename T > // requires Number<T> constexpr T pow ( T v , int n ) // power/exponential { T res = 1 ; while ( n -- ) res *= v ; return res ; } constexpr auto f7 = pow ( pi , 7 ); Enforcement \uac12\uc744 \uacc4\uc0b0\ud574\ub0b4\ub294 \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub7a8\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c. \uc774\ub4e4\uc740 constexpr \ud568\uc218\ub85c \ub300\uccb4\ub418\uc5b4\uc57c \ud55c\ub2e4. T.124: \uac00\ub2a5\ud55c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 TMP \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c Reason conditional , enable_if , tuple \uac19\uc740 \ud45c\uc900\uc5d0\uc11c \uc815\uc758\ud55c \uae30\ub2a5\uc774 \ud638\ud658\uc774 \uc88b\uace0, \uc798 \uc54c\ub824\uc838 \uc788\ub2e4. Example ??? Enforcement ??? T.125: \ub9cc\uc57d \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 TMP \uae30\ub2a5\uc73c\ub85c \ucda9\ubd84\ud558\uc9c0 \uc54a\ub2e4\uba74, \uac00\ub2a5\ud55c \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \uc880\ub354 \uace0\uae09\ud55c(advanced) TMP \uae30\ub2a5\ub4e4\uc740 \uc791\uc131\ud558\ub294 \uac83\uc740 \uc27d\uc9c0 \uc54a\uc740 \uc77c\uc774\uace0, \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ucee4\ubba4\ub2c8\ud2f0\uc5d0 \ub3c4\uc6c0\uc774 \ub41c\ub2e4(hopefully supportive). \uc815\ub9d0 \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc \uc790\uc2e0\ub9cc\uc758 \"\uace0\uae09 TMP \uc9c0\uc6d0\"\uc744 \uc791\uc131\ud558\ub77c. Example ??? Enforcement ??? \uae30\ud0c0 \ud15c\ud50c\ub9bf \uaddc\uce59 T.140: \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\uc131\uc774 \uc788\ub294 \ubaa8\ub4e0 \uc5f0\uc0b0\uc740 \uc774\ub984\uc744 \ubd99\uc5ec\ub77c Reason \ubb38\uc11c\ud654, \uac00\ub3c5\uc131, \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\uc131. Example struct Rec { string name ; string addr ; int id ; // unique identifier }; bool same ( const Rec & a , const Rec & b ) { return a . id == b . id ; } vector < Rec *> find_id ( const string & name ); // find all records for \"name\" auto x = find_if ( vr . begin (), vr . end (), [ & ]( Rec & r ) { if ( r . name . size () != n . size ()) // name to compare to is in n return false ; for ( int i = 0 ; i < r . name . size (); ++ i ) if ( tolower ( r . name [ i ]) != tolower ( n [ i ])) return false ; return true ; } ); \uc774 \ucf54\ub4dc\uc5d0\ub294 \uc720\uc6a9\ud55c \ud568\uc218(\ub300\uc18c\ubb38\uc790 \uad6c\ubd84\uc774 \uc5c6\ub294 \ubb38\uc790\uc5f4 \ube44\uad50)\uac00 \uc228\uc5b4\uc788\ub2e4. \ub78c\ub2e4\uc758 \uc2e4\ud589\uc778\uc790(argument)\ub4e4\uc774 \ub9ce\uc544\uc9c0\uba74 \uc774\ub7f0\uc77c\uc774 \uc0dd\uae34\ub2e4. bool compare_insensitive ( const string & a , const string & b ) { if ( a . size () != b . size ()) return false ; for ( int i = 0 ; i < a . size (); ++ i ) if ( tolower ( a [ i ]) != tolower ( b [ i ])) return false ; return true ; } auto x = find_if ( vr . begin (), vr . end (), [ & ]( Rec & r ) { compare_insensitive ( r . name , n ); } ); \ud639\uc740, ( n \uc5d0 \ubb35\uc2dc\uc801\uc73c\ub85c \uc774\ub984\uc774 \ubb36\uc774\ub294(binding) \uac83\uc744 \ud53c\ud558\uace0 \uc2f6\ub2e4\uba74) \uc544\ub798\ucc98\ub7fc \uc791\uc131\ud560\uc218\ub3c4 \uc788\ub2e4: auto cmp_to_n = [ & n ]( const string & a ) { return compare_insensitive ( a , n ); }; auto x = find_if ( vr . begin (), vr . end (), []( const Rec & r ) { return cmp_to_n ( r . name ); } ); Note \ud568\uc218, \ub78c\ub2e4, \uc5f0\uc0b0\uc790. \ubaa8\ub4e0 \uac83\uc5d0 \uc801\uc6a9\ub41c\ub2e4. Exception \uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub294 \ub78c\ub2e4, for_each \ubb38 \uc778\uc790, \uc720\uc0ac\ud55c \uc81c\uc5b4\ud750\ub984 \uc54c\uace0\ub9ac\uc998 \ubcc0\uc218 \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub78c\ub2e4 Enforcement (\uc5b4\ub824\uc6c0) \uc720\uc0ac\ud55c \ub78c\ub2e4\ub97c \uc9c0\uc801\ud558\ub77c ??? T.141: \ub2e8\uc21c\ud55c \ud568\uc218 \uac1c\uccb4\uac00 \ud55c\uacf3\uc5d0\uc11c\ub9cc \ud544\uc694\ud558\ub2e4\uba74 \uc774\ub984\uc5c6\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c Reason \ucf54\ub4dc\ub97c \uac04\uacb0\ud558\uac8c \ub9cc\ub4e4\uace0 \ub2e4\ub978 \ubc29\ubc95\uc5d0 \ube44\ud574 \uc778\uc811\uc131(locality)\ub3c4 \uc88b\ub2e4. Example auto earlyUsersEnd = std :: remove_if ( users . begin (), users . end (), []( const User & a ) { return a . id > 100 ; }); Exception \ud55c\ubc88\ub9cc \uc0ac\uc6a9\ud55c\ub2e4\uace0 \ud574\ub3c4 \ub78c\ub2e4\uc5d0 \uc774\ub984\uc744 \ubd99\uc774\uba74 \ubd84\uba85\ud574 \ubcf4\uc778\ub2e4. Enforcement \ub3d9\uc77c\ud55c, \uac70\uc758 \ub3d9\uc77c\ud55c \ub78c\ub2e4\ub97c \ucc3e\ub294\ub2e4 (\uc774\ub984\uc788\ub294 \ud568\uc218 \ud639\uc740 \uc774\ub984\uc788\ub294 \ub78c\ub2e4\ub85c \ubc14\uafb8\ub3c4\ub85d \ud55c\ub2e4). T.142?: \ud15c\ud50c\ub9bf \ubcc0\uc218\ub85c \ud45c\uae30\ub97c \uac04\ub2e8\ud788 \ud558\ub77c Reason \ub354 \uc77d\uae30 \uc88b\ub2e4 Example ??? Enforcement ??? T.143: \ubc94\uc6a9\uc801\uc774\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub294 \uacc4\ud68d\uc5c6\uc774 \uc791\uc131\ud558\uc9c0 \ub9d0\uc544\ub77c Don't write unintentionally nongeneric code Reason \uc77c\ubc18\ud654, \uc7ac\uc0ac\uc6a9\uc131, \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \uc790\uc138\ud558\uac8c \ud558\uc9c0 \ub9c8\ub77c; \uac00\ub2a5\ud55c \uc77c\ubc18\uc801\uc778 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub77c. Example \ubc18\ubcf5\uc790(iterator) \ube44\uad50\uc5d0\ub294 < \ub300\uc2e0 != \ub97c \uc0ac\uc6a9\ud558\ub77c; != \ub294 \uc21c\uc11c\uc758 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ub354 \ub9ce\uc740 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. for ( auto i = first ; i < last ; ++ i ) { // \ube44\uad50\uac00 \uac00\ub2a5\ud574\uc57c\ub9cc \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 // ... } for ( auto i = first ; i != last ; ++ i ) { // good; \uc880 \ub354 \ubc94\uc6a9\uc801(generic)\uc774\ub2e4 // ... } \ubb3c\ub860, \ubc94\uc704\uae30\ubc18- for \ubb38\uc774 \uc4f0\uae30\uac00 \ub354 \uc88b\ub2e4. Example \ud544\uc694\ud55c \uae30\ub2a5\uc744 \uac00\uc9c4 \uae30\ubcf8\ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub77c. class Base { public : Bar f (); Bar g (); }; class Derived1 : public Base { public : Bar h (); }; class Derived2 : public Base { public : Bar j (); }; // bad, unless there is a specific reason for limiting to Derived1 objects only void my_func ( Derived1 & param ) { use ( param . f ()); use ( param . g ()); } // good, uses only Base interface so only commit to that void my_func ( Base & param ) { use ( param . f ()); use ( param . g ()); } Enforcement \ubc18\ubcf5\uc790 \ube44\uad50\uc5d0 != \ub300\uc2e0\uc5d0 < \ub97c \uc4f4\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c x.empty() \ud639\uc740 x.is_empty() \ud45c\ud604\uc774 \uac00\ub2a5\ud558\ub2e4\uba74 x.size() == 0 \uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud55c\ub2e4. \ubcf4\ub2e4 \ub9ce\uc740 \ucee8\ud14c\uc774\ub108 \ud0c0\uc785\ub4e4\uc774 size() \ubcf4\ub2e4\ub294 \ube44\uc5b4\uc788\ub294\uc9c0\ub97c \uac80\uc0ac\ud558\ub294 \uac83\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 \ud06c\uae30\ub97c \uc54c \uc218 \uc5c6\uac70\ub098, \uac1c\ub150\uc801\uc73c\ub85c \ud06c\uae30 \uc81c\ud55c\uc774 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. \uc0c1\uc18d\ub41c \ud0c0\uc785\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0\ub9cc \uae30\ubcf8 \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ub41c \ud568\uc218\ub9cc \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 T.144: \ud568\uc218 \ud15c\ud50c\ub9bf\uc740 \ud2b9\uc218\ud654\ud558\uc9c0 \ub9d0\ub77c Reason \uc5b8\uc5b4\uaddc\uce59\uc5d0 \ub530\ub77c \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \ubd80\ubd84\uc801\uc73c\ub85c \ud2b9\uc218\ud654\ud560 \uc218 \uc5c6\ub2e4. \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \uc804\ubd80 \ud2b9\uc218\ud654\ud560 \uc218 \uc788\uc9c0\ub9cc \uadf8 \ub300\uc2e0\uc73c\ub85c \uc624\ubc84\ub85c\ub529\ud558\uace0 \uc2f6\uc744 \uac83\uc774\ub2e4. \ud568\uc218 \ud15c\ud50c\ub9bf \ud2b9\uc218\ud654\ub294 \uc624\ubc84\ub85c\ub529\uc73c\ub85c \ud574\uc11d\ub418\uae30 \ub54c\ubb38\uc5d0 \uc6d0\ud558\ub294\ub300\ub85c \ub3d9\uc791\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub4dc\ubb3c\uc9c0\ub9cc \uc801\uc808\ud788 \ud2b9\uc218\ud654\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uacfc \uc5f0\uacc4\ud568\uc73c\ub85c\uc368 \uc2e4\uc81c\ub85c \ud2b9\uc218\ud654\ub97c \ud560 \uc218 \uc788\ub2e4. Example ??? Exceptions \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \ud2b9\uc218\ud654\ud560 \ud0c0\ub2f9\ud55c \uc774\uc720\uac00 \uc788\ub2e4\uba74 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub294 \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \ud558\ub098\ub9cc \uc791\uc131\ud558\ub77c. \uadf8\ub9ac\uace0 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc744 \ud2b9\uc218\ud654\ud558\ub77c. (\ubd80\ubd84 \ud2b9\uc218\ud654\ub97c \uc791\uc131\ud558\ub294 \uac83\uae4c\uc9c0 \ud3ec\ud568\ud558\ub77c) Enforcement \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \ud2b9\uc218\ud654\ud558\uace0 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c. \uac00\ub2a5\ud558\ub2e4\uba74 \uc624\ubc84\ub85c\ub529\uc73c\ub85c \ub300\uc2e0\ud558\ub77c T.150: \ud574\ub2f9 \ud074\ub798\uc2a4\uac00 \uac1c\ub150\uc5d0 \ubd80\ud569\ud558\ub294\uc9c0\ub97c static_assert \ub97c \uc0ac\uc6a9\ud574 \ud655\uc778\ud558\ub77c Reason \ud074\ub798\uc2a4\uac00 \ucee8\uc149\uc744 \ub9cc\uc871\uc2dc\ud0a4\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud55c\ub2e4\uba74, \uc77c\ucc0d \uac80\uc0ac\ud558\ub294 \uac83\uc774 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uace0\ud1b5\uc744 \uc904\uc5ec\uc900\ub2e4. Example class X { public : X () = delete ; X ( const X & ) = default ; X ( X && ) = default ; X & operator = ( const X & ) = default ; // ... }; \uad6c\ud604\ud30c\uc77c \uc548\uc758 \uc5b4\ub514\uc120\uac00 \ucef4\ud30c\uc77c\ub7ec\uac00 X \uac00 \uc758\ub3c4\ud55c \uc18d\uc131(desired properties)\uc744 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub77c: static_assert ( default_constructible < X > ); // error: X \ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \uc5c6\ub2e4. static_assert ( copyable < X > ); // error: X\uc758 \uc774\ub3d9 \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud558\uc9c0 \uc54a\uc558\ub2e4. Enforcement \ub9c8\ub545\ud788 \uac80\uc0ac\ud560 \ubc29\ubc95\uc774 \uc5c6\ub2e4(Not feasible).","title":"Templates"},{"location":"Templates/#t","text":"\uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d(generic programming)\uc740 \ud0c0\uc785, \uac12, \uc54c\uace0\ub9ac\uc998\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub294 \ud0c0\uc785\uacfc \uc54c\uace0\ub9ac\uc998 \uc744 \uc0ac\uc6a9\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ub9d0\ud55c\ub2e4. C++\uc5d0\uc11c\ub294 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \uc5b8\uc5b4\uc801 \uc7a5\uce58\ub85c template \uc744 \uc9c0\uc6d0\ud558\uace0 \uc788\ub2e4. \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ud568\uc218\ub4e4\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uc778\uc790\ub4e4\uc740 (\uc77c\ub828\uc758 \uc694\uad6c\uc0ac\ud56d\uc5d0 \ub530\ub77c\uc11c) \uac01\uac01\uc758 \ud0c0\uc785\uacfc \uac12\uc774 \uaddc\uc815\ub41c\ub2e4. C++\uc5d0\uc11c\ub294 \uc774\ub7f0 \uc694\uad6c\uc0ac\ud56d\uc744 \ucee8\uc149(concepts)\uc774\ub77c\ub294 \ucef4\ud30c\uc77c \uc2dc\uac04 \uac80\uc0ac\ub97c \uc0ac\uc6a9\ud574 \ucf54\ub4dc\uc5d0 \ub098\ud0c0\ub098\ub3c4\ub85d \ud55c\ub2e4. \ud15c\ud50c\ub9bf\uc740 \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d(meta-programming)\uc5d0\ub3c4 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4; \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc774\ub780, \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ucf54\ub4dc\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\ub294(compose) \ud504\ub85c\uadf8\ub7a8\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c \uc911\uc2ec\uc774 \ub418\ub294 \uc0dd\uac01\uc740 \"\ucee8\uc149\"\uc774\ub2e4; \uc774\ub294 \ud15c\ud50c\ub9bf \uc2e4\ud589\uc778\uc790\uc5d0 \ub300\ud55c \uc694\uad6c\uc0ac\ud56d\ub4e4\uc744 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \uae30\uc220\ud558\ub294 \uac83\uc774\ub2e4. \"\ucee8\uc149(Concepts)\"\uc740 ISO TS\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4: concepts . \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\uc149\ub4e4\uc758 \ucd08\uc548\uc740 \ub2e4\ub978 ISO TS\uc5d0 \uc788\ub2e4: ranges \ucee8\uc149\uc740 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\uc5d0 \ub530\ub77c, \uc608\uc2dc\ub4e4\uc5d0\uc11c \ucee8\uc149 \ubd80\ubd84\uc740 \uc815\ud615\ud654\ub41c \uc8fc\uc11d\uc73c\ub85c\ub9cc \ud45c\uae30\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc8fc\uc11d\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub2e4: \ud15c\ud50c\ub9bf \uc0ac\uc6a9 \uaddc\uce59 \uc694\uc57d: T.1: \ucf54\ub4dc\uc758 \ucd94\uc0c1\ud654 \uc218\uc900\uc744 \ub192\uc774\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.2: \uc5ec\ub7ec\uac00\uc9c0 \uc2e4\ud589\uc778\uc790 \ud0c0\uc785\ub4e4\uc5d0 \uc801\uc6a9\ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ud45c\ud604\ud560 \ub54c \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.3: \ucee8\ud14c\uc774\ub108\uc640 \uad6c\uac04(range)\uc744 \ud45c\ud604\ud560\ub54c \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.4: \ubb38\ubc95 \ud2b8\ub9ac \uc870\uc791\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.5: \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uac1c\uccb4\uc9c0\ud5a5 \uae30\uc220\uc744 \uacb0\ud569\ud574 \ube44\uc6a9\uc774 \uc544\ub2cc \uac15\uc810\uc744 \uc99d\ud3ed\uc2dc\ucf1c\ub77c \ucee8\uc149 \uc0ac\uc6a9 \uaddc\uce59 \uc694\uc57d: T.10: \ubaa8\ub4e0 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ucee8\uc149\uc744 \uba85\uc2dc\ud558\ub77c T.11: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0 \ud45c\uc900 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub77c T.12: \uc9c0\uc5ed \ubcc0\uc218\uc5d0 auto \ubcf4\ub2e4\ub294 \ucee8\uc149\uc758 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c T.13: \ub2e8\uc21c\ud558\uac70\ub098 \ub2e8\uc77c \ud0c0\uc785\uc744 \uc778\uc790\ub85c \ubc1b\ub294 \ucee8\uc149\uc5d0\ub294 \uc57d\uc2dd \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c ??? \ucee8\uc149 \uc815\uc758 \uaddc\uce59 \uc694\uc57d: T.20: \uc720\uc758\ubbf8\ud55c \uc758\ubbf8\uad6c\uc870\uac00 \uc5c6\ub294 \"\ucee8\uc149\"\uc744 \ud53c\ud558\ub77c T.21: \ucee8\uc149\uc5d0\uc11c\ub294 \uc5f0\uc0b0\ub4e4\uc758 \uc644\uc804\ud55c \uc9d1\ud569(complete set)\uc744 \uc694\uad6c\ud558\ub77c T.22: \ucee8\uc149\uc5d0\uc11c \uc4f8 \uc218 \uc788\ub3c4\ub85d \uacf5\ub9ac\ub97c \uba85\uc2dc\ud558\ub77c T.23: \uc815\uc81c\ub41c \ucee8\uc149(refined concept)\uc740 \ub354 \ubc94\uc6a9\uc801\uc778 \uacbd\uc6b0\uc5d0 \uc0c8\ub85c\uc6b4 \ud328\ud134\uc744 \ub354\ud574\uc11c \ucc28\ubcc4\ud654\ud558\ub77c T.24: \uc758\ubbf8\uad6c\uc870\ub9cc \ub2e4\ub978 \ucee8\uc149\uc740 Tag \ud074\ub798\uc2a4 \ud639\uc740 Traits\ub97c \uc0ac\uc6a9\ud574 \ucc28\ubcc4\ud654\ud558\ub77c T.25: \uc81c\uc57d\uc774 \uc11c\ub85c \ub300\ube44\ub418\uc9c0 \uc54a\uac8c \ud558\ub77c T.26: \ub2e8\uc21c\ud55c \ubb38\ubc95\ubcf4\ub2e4\ub294 \uc0ac\uc6a9 \ud328\ud134\uc744 \uace0\ub824\ud574\uc11c \ucee8\uc149\uc744 \uc815\uc758\ud558\ub77c ??? \ud15c\ud50c\ub9bf \uc778\ud130\ud398\uc774\uc2a4 \uaddc\uce59 \uc694\uc57d: T.40: \uc54c\uace0\ub9ac\uc998\uc5d0 \uc5f0\uc0b0(operation)\uc744 \uc804\ub2ec\ud560\ub54c\ub294 \ud568\uc218 \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub77c T.41: \ud15c\ud50c\ub9bf\uc758 \ucee8\uc149\uc5d0\uc11c\ub294 \uc624\uc9c1 \ud544\uc694\ud55c \ud2b9\uc131(property)\ub9cc \uc694\uad6c\ud558\ub77c T.42: \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc744 \uad6c\ud604\uc0ac\ud56d\uc744 \uc228\uae30\uac70\ub098 \ud45c\uae30\ub97c \uac04\ub2e8\ud788 \ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c T.43: \ud0c0\uc785\uc5d0 \ubcc4\uba85\uc744 \ubd99\uc77c\ub54c typedef \ubcf4\ub2e4\ub294 using \uc744 \uc0ac\uc6a9\ud558\ub77c T.44: (\ud560 \uc218 \uc788\ub2e4\uba74) \ud568\uc218 \ud15c\ud50c\ub9bf\uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc758 \uc778\uc790 \ud0c0\uc785\uc744 \uc720\ub3c4(deduce)\ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c T.46: \ud15c\ud50c\ub9bf \uc778\uc790\ub4e4\uc740 \ucd5c\uc18c\ud55c Regular \ud639\uc740 SemiRegular \ud558\ub3c4\ub85d \ud558\ub77c T.47: \uc77c\ubc18\uc801\uc778 \uc774\ub984\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74\uc11c \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\uace0 \uc81c\uc57d\uc774 \uac70\uc758 \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc740 \uc9c0\uc591\ud558\ub77c T.48: \ucef4\ud30c\uc77c\ub7ec\uac00 \ucee8\uc149\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 enable_if \ub85c \uc720\uc0ac\ud558\uac8c \uc791\uc131\ud558\ub77c T.49: \uac00\ub2a5\ud558\ub2e4\uba74 \ud0c0\uc785 \uc81c\uac70\ub294 \ud53c\ud558\ub77c \ud15c\ud50c\ub9bf \uc815\uc758 \uaddc\uce59 \uc694\uc57d: T.60: \ubb38\ub9e5\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c8 \uc218 \uc788\ub294 \ud15c\ud50c\ub9bf\uc740 \ucd5c\uc18c\ud654 \ud558\ub77c T.61: \ub108\ubb34 \ub9ce\uc740 \uba64\ubc84\ub97c \ub9e4\uac1c\ubcc0\uc218\ud654 \ud558\uc9c0 \ub9d0\ub77c (SCARY) T.62: \uc885\uc18d\uc801\uc774\uc9c0 \uc54a\uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf \uba64\ubc84\ub4e4\uc740 \ud15c\ud50c\ub9bf\uc774 \uc544\ub2cc \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ubc30\uce58\ud558\ub77c T.64: \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc758 \ub300\uc548\uc801(alternative) \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 \ud2b9\uc218\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c T.65: \ud568\uc218\uc758 \ub300\uc548\uc801(alternative) \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 Tag dispatch\ub97c \uc0ac\uc6a9\ud558\ub77c T.67: \uc815\uaddc\uc801\uc774\uc9c0 \uc54a\uc740 \ud0c0\uc785(irregular types)\ub4e4\uc758 \ub300\uc548\uc801 \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 \ud2b9\uc218\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c T.68: \ubaa8\ud638\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud15c\ud50c\ub9bf\uc5d0\uc11c\ub294 () \ubcf4\ub2e4\ub294 {} \ub97c \uc0ac\uc6a9\ud558\ub77c T.69: \uc81c\uc57d\uc5c6\ub294(unqualified) \ube44-\uba64\ubc84 \ud568\uc218 \ud638\ucd9c\uc740 \ud574\ub2f9 \ubd80\ubd84\uc774 \ubcc0\uacbd\ub420 \uc218 \uc788\ub3c4\ub85d \ud558\ub824\ub294\uac8c \uc544\ub2c8\ub77c\uba74 \ud15c\ud50c\ub9bf \ub0b4\uc5d0\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c \ud15c\ud50c\ub9bf\uacfc \uc0c1\uc18d\uad6c\uc870 \uaddc\uce59 \uc694\uc57d: T.80: \ucda9\ubd84\ud55c \uace0\ub824 \uc5c6\uc774 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \ud15c\ud50c\ub9bf\uc73c\ub85c \ubc14\uafb8\uc9c0 \ub9d0\uc544\ub77c T.81: \uacc4\uce35\uad6c\uc870\uc640 \ubc30\uc5f4\uc744 \uc11e\uc5b4\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c T.82: \uac00\uc0c1 \ud568\uc218\ub97c \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacc4\uce35 \uad6c\uc870\ub97c \uc81c\uac70\ud558\ub77c(linearize) T.83: \uba64\ubc84 \ud568\uc218\ub294 \ud15c\ud50c\ub9bf\uc774\uba74\uc11c virtual\ud55c \ud568\uc218\ub85c \uc120\uc5b8\ud574\uc120 \uc548\ub41c\ub2e4 T.84: \uc548\uc815\ub41c ABI\ub97c \uc9c0\uc6d0\ud558\uace0\uc790 \ud560\ub54c\ub294 \ud575\uc2ec \uad6c\ud604\uc5d0 \ud15c\ud50c\ub9bf\uc744 \uc4f0\uc9c0 \ub9c8\ub77c ??? \uac00\ubcc0\uc778\uc790 \ud15c\ud50c\ub9bf\uaddc\uce59 \uc694\uc57d: T.100: \ub2e4\uc591\ud55c \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uac00\ubcc0\uc801\uc778 \uc218\uc758 \uc2e4\ud589\uc778\uc790\ub4e4\uc744 \ucc98\ub9ac\ud558\ub294 \ud568\uc218\uac00 \ud544\uc694\ud560 \ub54c\ub294 \uac00\ubcc0 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c T.101: ??? How to pass arguments to a variadic template ??? T.102: ??? How to process arguments to a variadic template ??? T.103: \ub3d9\uc77c \ud0c0\uc785\uc758 \uc2e4\ud589\uc778\uc790\ub4e4\uc744 \uc704\ud574\uc11c \uac00\ubcc0\ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c ??? \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d \uaddc\uce59 \uc694\uc57d: T.120: \uc815\ub9d0 \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c T.121: \ucee8\uc149\uc744 \ubaa8\ubc29(emulate)\ud558\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c T.122: \ud15c\ud50c\ub9bf(\ub300\ubd80\ubd84 \ud15c\ud50c\ub9bf \ubcc4\uce6d)\uc740 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud0c0\uc785\uc744 \uacc4\uc0b0\ud560\ub54c \uc0ac\uc6a9\ud558\ub77c T.123: \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uac12\uc744 \uacc4\uc0b0\ud55c\ub2e4\uba74 constexpr \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c T.124: \uac00\ub2a5\ud55c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 TMP \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c T.125: \ub9cc\uc57d \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 TMP \uae30\ub2a5\uc73c\ub85c \ucda9\ubd84\ud558\uc9c0 \uc54a\ub2e4\uba74, \uac00\ub2a5\ud55c \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c ??? \ub2e4\ub978 \ud15c\ud50c\ub9bf \uaddc\uce59 \uc694\uc57d: T.140: \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\uc131\uc774 \uc788\ub294 \ubaa8\ub4e0 \uc5f0\uc0b0\uc740 \uc774\ub984\uc744 \ubd99\uc5ec\ub77c T.141: \ub2e8\uc21c\ud55c \ud568\uc218 \uac1c\uccb4\uac00 \ud55c\uacf3\uc5d0\uc11c\ub9cc \ud544\uc694\ud558\ub2e4\uba74 \uc774\ub984\uc5c6\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c T.142: \ud15c\ud50c\ub9bf \ubcc0\uc218\ub85c \ud45c\uae30\ub97c \uac04\ub2e8\ud788 \ud558\ub77c T.143: \ubc94\uc6a9\uc801\uc774\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub294 \uacc4\ud68d\uc5c6\uc774 \uc791\uc131\ud558\uc9c0 \ub9d0\uc544\ub77c T.144: \ud568\uc218 \ud15c\ud50c\ub9bf\uc740 \ud2b9\uc218\ud654\ud558\uc9c0 \ub9d0\ub77c T.150: \ud574\ub2f9 \ud074\ub798\uc2a4\uac00 \uac1c\ub150\uc5d0 \ubd80\ud569\ud558\ub294\uc9c0\ub97c static_assert \ub97c \uc0ac\uc6a9\ud574 \ud655\uc778\ud558\ub77c ???","title":"T: \ud15c\ud50c\ub9bf\uacfc \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d"},{"location":"Templates/#tgp-generic-programming","text":"\uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ud0c0\uc785, \uac12, \uc54c\uace0\ub9ac\uc998\uc744 \ub9e4\uac1c\ubcc0\uc218\ub85c \uc0ac\uc6a9\ud558\ub294 \ud0c0\uc785\uacfc \uc54c\uace0\ub9ac\uc998 \uc744 \uc0ac\uc6a9\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ub9d0\ud55c\ub2e4.","title":"T.gp: \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d(generic programming)"},{"location":"Templates/#t1","text":"","title":"T.1: \ucf54\ub4dc\uc758 \ucd94\uc0c1\ud654 \uc218\uc900\uc744 \ub192\uc774\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason","text":"\uc77c\ubc18\ud654. \uc7ac\uc0ac\uc6a9\uc131. \ud6a8\uc728\uc131. \uc0ac\uc6a9\uc790 \ud0c0\uc785\uc758 \uc77c\uad00\ub41c \uc815\uc758\ub97c \uc7a5\ub824\ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example-bad","text":"\uac1c\ub150\uc801\uc73c\ub85c, \uc544\ub798 \uc694\uad6c\uc0ac\ud56d\uc740 \uc798\ubabb\ub410\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc6b0\ub9ac\uac00 \uc6d0\ud558\ub294 T \ub294 \"\uc99d\uac00\ub420 \uc218 \uc788\ub2e4\"\uac70\ub098 \"\ucd94\uac00\ub420 \uc218 \uc788\ub2e4\"\ub294 \ud558\uc704\ub808\ubca8 \ucee8\uc149 \uadf8 \uc774\uc0c1\uc774\ub2e4: template < typename T > // requires Incrementable<T> T sum1 ( vector < T >& v , T s ) { for ( auto x : v ) s += x ; return s ; } template < typename T > // requires Simple_number<T> T sum2 ( vector < T >& v , T s ) { for ( auto x : v ) s = s + x ; return s ; } Incrementable \uc774 + \ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uace0, Simple_number \uc774 += \ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uace0 \uac00\uc815\ud558\uba74 sum1 \uacfc sum2 \uc758 \uad6c\ud604\uc744 \uacfc\ub3c4\ud558\uac8c \uc81c\uc57d\ud574\uc654\ub2e4. \uadf8\ub9ac\uace0 \uc774\ub7f0 \uacbd\uc6b0\uc5d0\ub294 \uc77c\ubc18\ud654\ub97c \uc704\ud574 \uae30\ud68c\ub97c \ub193\uce5c \uac83\uc774\ub2e4.","title":"Example, bad"},{"location":"Templates/#example","text":"template < typename T > // requires Arithmetic<T> T sum ( vector < T >& v , T s ) { for ( auto x : v ) s += x ; return s ; } Arithmetic \ucee8\uc149\uc774 + \uc640 += \ub97c \ubaa8\ub450 \uc694\uad6c\ud55c\ub2e4\uace0 \uac00\uc815\ud558\uba74, \uc6b0\ub9ac\ub294 sum \uc758 \uc0ac\uc6a9\uc790\uac00 \ub450 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud558\ub294 \uc0b0\uc220 \ud0c0\uc785\uc744 \uc81c\uacf5\ud558\ub3c4\ub85d \uc81c\uc57d\ud55c \uac83\uc774\ub2e4. \uc774\ub294 \uc5f0\uc0b0\uc744 \uad6c\ud604\uc5d0 \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc694\uad6c\ud55c \uac83\uc740 \uc544\ub2c8\ub2e4, \ud558\uc9c0\ub9cc \uc774\ub294 \uc54c\uace0\ub9ac\uc998\uc758 \uad6c\ud604\uc790\uc5d0\uac8c \ud544\uc694\ud55c \ub9cc\ud07c\uc758 \uc790\uc720\ub97c \ubd80\uc5ec\ud558\uba70 Arithmetic \ud0c0\uc785\uc774 \uc54c\uace0\ub9ac\uc998 \uc804\ubc18\uc5d0 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc99d\ud55c\ub2e4. \ub354 \uc77c\ubc18\uc801\uc778, \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\ud55c \ucf54\ub4dc\ub97c \uc704\ud574\uc11c, vector \uc640 \uac19\uc740 \ud558\ub098\uc758 \ucee8\ud14c\uc774\ub108\ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc544\ub2cc Container \ub610\ub294 Range \uc640 \uac19\uc740 \ub354 \uc77c\ubc18\uc801\uc778 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\ub2e4.","title":"Example"},{"location":"Templates/#note","text":"\ub9cc\uc57d \ud15c\ud50c\ub9bf\uc774 \ud558\ub098\uc758 \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud55c \uc815\ud655\ud788 \ud558\ub098\uc758 \uc5f0\uc0b0\ub9cc\uc744 \uc694\uad6c\ud55c\ub2e4\uba74 (\uc608\ucee8\ub300 = \uc640 + \ub97c \uc694\uad6c\ud558\uc9c0 \uc54a\uace0 += \ub9cc \uc694\uad6c\ud558\ub294 \uac83), \uc720\uc9c0\ubcf4\uc218\ub97c \uc9c0\ub098\uce58\uac8c \uc81c\uc57d\ud55c \uac83\uc774\ub2e4. \uc6b0\ub9ac\uc758 \uc758\ub3c4\ub294 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ub300\ud55c \uc694\uad6c\uc0ac\ud56d\uc744 \ucd5c\uc18c\ud654\ud558\ub294 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uad6c\ud604\uc5d0\uc11c \ud544\uc694\ud55c \ub9cc\ud07c\ub9cc \uc694\uad6c\ud558\ub294 \uac83\uc740 \uc720\uc758\ubbf8\ud55c \ucee8\uc149\uc77c \uac00\ub2a5\uc131\uc774 \ub0ae\ub2e4. We aim to minimize requirements on template arguments, but the absolutely minimal requirements of an implementation is rarely a meaningful concept.","title":"Note"},{"location":"Templates/#note_1","text":"\ud15c\ud50c\ub9bf\uc740 \ubaa8\ub4e0 \uac83\uc744 \ud45c\ud604\ud560 \uc218 \uc788\ub2e4 ( \ud29c\ub9c1 \uc644\uc804\uc131 \uc744 \uc9c0\ub2cc\ub2e4). \uadf8\ub7ec\ub098 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \ubaa9\ud45c\ub294 \ube44\uc2b7\ud55c \ud2b9\uc131(property)\uc744 \uac00\uc9c4 \ud0c0\uc785\uc9d1\ud569\uc5d0 \ub300\ud55c \uc5f0\uc0b0/\uc54c\uace0\ub9ac\uc998\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \uc77c\ubc18\ud654\ud558\ub294 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Templates/#note_2","text":"\uc8fc\uc11d\ucc98\ub9ac\ub41c requires \ub294 concepts \ub97c \uc0ac\uc6a9\ud558\ub294 \ubd80\ubd84\uc774\ub2e4. \"\ucee8\uc149(Concepts)\"\uc740 ISO TS\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4: concepts . \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\uc149\ub4e4\uc758 \ucd08\uc548\uc740 \ub2e4\ub978 ISO TS\uc5d0 \uc788\ub2e4: ranges \ucee8\uc149\uc740 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\uc5d0 \ub530\ub77c, \uc608\uc2dc\ub4e4\uc5d0\uc11c \ucee8\uc149 \ubd80\ubd84\uc740 \uc815\ud615\ud654\ub41c \uc8fc\uc11d\uc73c\ub85c\ub9cc \ud45c\uae30\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc8fc\uc11d\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub2e4:","title":"Note"},{"location":"Templates/#enforcement","text":"\ucee8\uc149\uc5c6\uc774 \ud2b9\uc815 \uc5f0\uc0b0\uc790\ub97c \ubc14\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uac19\uc740, \uacfc\ub3c4\ud558\uac8c \ub2e8\uc21c\ud55c \uc694\uad6c\uc0ac\ud56d\uc744 \uac00\uc9c4 \uc54c\uace0\ub9ac\uc998\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \"\uacfc\ub3c4\ud558\uac8c \ub2e8\uc21c\ud55c\" \ucee8\uc149 \uc815\uc758\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\uc9c0 \uc54a\ub294\ub2e4; \ub354 \uc4f8\ub9cc\ud55c \ucee8\uc149\uc744 \uc704\ud574 \ub9cc\ub4e4\uc5c8\uc744\uc9c0\ub3c4 \ubaa8\ub978\ub2e4.","title":"Enforcement"},{"location":"Templates/#t2","text":"","title":"T.2: \uc5ec\ub7ec\uac00\uc9c0 \uc2e4\ud589\uc778\uc790 \ud0c0\uc785\ub4e4\uc5d0 \uc801\uc6a9\ub418\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ud45c\ud604\ud560 \ub54c \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_1","text":"\uc77c\ubc18\ud654. \uc18c\uc2a4 \ucf54\ub4dc\uc758 \ud06c\uae30\ub97c \ucd5c\uc18c\ud654\ud55c\ub2e4. \uc0c1\ud638\uc6b4\uc6a9\uc131. \uc7ac\uc0ac\uc6a9.","title":"Reason"},{"location":"Templates/#example_1","text":"STL\uc758 \uae30\ubcf8\uc0ac\ud56d\uc774\ub2e4. find \uc54c\uace0\ub9ac\uc998\uc740 \ubaa8\ub4e0 \uc885\ub958\uc758 \uc785\ub825 \ubc94\uc704\uc5d0\uc11c \ubb38\uc81c\uc5c6\uc774 \uc791\ub3d9\ud55c\ub2e4: template < typename Iter , typename Val > // requires Input_iterator<Iter> // && Equality_comparable<Value_type<Iter>, Val> Iter find ( Iter b , Iter e , Val v ) { // ... }","title":"Example"},{"location":"Templates/#note_3","text":"\ud55c\uac1c \uc774\uc0c1\uc758 \ud15c\ud50c\ub9bf \uc778\uc790\ud0c0\uc785\uc5d0 \ub300\ud55c \ud604\uc2e4\uc801\uc778 \ud544\uc694\uac00 \uc5c6\ub2e4\uba74 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c. \uacfc\ub3c4\ud558\uac8c \ucd94\uc0c1\ud654\ud558\uc9c0 \ub9c8\ub77c.","title":"Note"},{"location":"Templates/#enforcement_1","text":"??? \uc5b4\ub835\ub2e4, \uc0ac\ub78c\uc774 \ud574\uc57c\ud560\uc218\ub3c4 \uc788\ub2e4","title":"Enforcement"},{"location":"Templates/#t3-range","text":"","title":"T.3: \ucee8\ud14c\uc774\ub108\uc640 \uad6c\uac04(range)\uc744 \ud45c\ud604\ud560\ub54c \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_2","text":"\ucee8\ud14c\uc774\ub108\ub294 \uc6d0\uc18c\ub4e4\uc758 \ud0c0\uc785\uc744 \ud544\uc694\ub85c \ud558\uace0, \uc774\ub294 \ud15c\ud50c\ub9bf \uc778\uc790\ub85c \ud45c\ud604\ud558\ub294 \uac83\uc774 \uc77c\ubc18\uc801\uc774\ub2e4. \uc7ac\uc0ac\uc6a9\uc774 \uac00\ub2a5\ud558\uace0, \ud0c0\uc785 \uc548\uc804(Type Safe)\ud558\ub2e4. \uc774\ub294 \ubd88\uc548\uc815\ud558\uace0 \ube44\ud6a8\uc728\uc801\uc778 \ud574\uacb0\ubc29\ubc95\uc744 \ud53c\ud55c\ub2e4. STL\uc740 \uc774 \uc811\uadfc\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example_2","text":"template < typename T > // requires Regular<T> class Vector { // ... T * elem ; // points to sz Ts int sz ; }; Vector < double > v ( 10 ); v [ 7 ] = 9.9 ;","title":"Example"},{"location":"Templates/#example-bad_1","text":"class Container { // ... void * elem ; // points to size elements of some type int sz ; }; Container c ( 10 , sizeof ( double )); (( double * ) c . elem )[ 7 ] = 9.9 ; \uc774 \ucf54\ub4dc\ub294 \ud504\ub85c\uadf8\ub798\uba38\uc758 \uc758\ub3c4\ub97c \uc9c1\uc811\uc801\uc73c\ub85c \ud45c\ud604\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub610\ud55c \ud0c0\uc785\uc2dc\uc2a4\ud15c\uacfc \ucd5c\uc801\ud654\uae30(optimizer)\uac00 \ud504\ub85c\uadf8\ub7a8\uc758 \uad6c\uc870\ub97c \uc54c \uc218 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \uba54\ud06c\ub85c \ub4a4\uc5d0\uc11c void* \ub97c \uc228\uae30\ub294 \uac83\uc740 \uadf8\uc800 \ubb38\uc81c\ub97c \uc5b4\ub835\uac8c \ud560 \ubfd0\uc774\ub2e4. \uc0c8\ub85c\uc6b4 \ud63c\ub780\uc744 \uc57c\uae30\ud55c\ub2e4.","title":"Example, bad"},{"location":"Templates/#exceptions","text":"\uace0\uc815\ub41c ABI \uc9c0\uc6d0 \uc778\ud130\ud398\uc774\uc2a4\uac00 \ud544\uc694\ud558\ub2e4\uba74 \uae30\ubcf8 \uad6c\ud604\uc744 \uc81c\uacf5\ud558\uace0, \uadf8 \ud615\ud0dc\uc5d0 \ub530\ub77c \ud0c0\uc785\uc5d0 \uc548\uc804\ud55c \ud15c\ud50c\ub9bf\uc744 \ud45c\ud604\ud574\uc57c \ud55c\ub2e4. \uc548\uc815\ub41c \uae30\ubcf8 \ud074\ub798\uc2a4 \uaddc\uce59 \uc744 \ucc38\uc870\ud558\ub77c.","title":"Exceptions"},{"location":"Templates/#enforcement_2","text":"void* \uacfc \ud558\uc704\ub808\ubca8 \uad6c\ud604\ucf54\ub4dc \uc678\uc5d0 \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4.","title":"Enforcement"},{"location":"Templates/#t4","text":"","title":"T.4: \ubb38\ubc95 \ud2b8\ub9ac \uc870\uc791\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_3","text":"???","title":"Reason"},{"location":"Templates/#example_3","text":"???","title":"Example"},{"location":"Templates/#exceptions_1","text":"???","title":"Exceptions"},{"location":"Templates/#t5","text":"","title":"T.5: \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uac1c\uccb4\uc9c0\ud5a5 \uae30\uc220\uc744 \uacb0\ud569\ud574 \ube44\uc6a9\uc774 \uc544\ub2cc \uac15\uc810\uc744 \uc99d\ud3ed\uc2dc\ucf1c\ub77c"},{"location":"Templates/#reason_4","text":"\uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uacfc \uac1c\uccb4\uc9c0\ud5a5 \uae30\uc220\uc740 \uc0c1\ud638\ubcf4\uc644\uc801(complementary)\uc774\ub2e4.","title":"Reason"},{"location":"Templates/#example_4","text":"\uc815\uc801\uc778 \uac83\uc740 \ub3d9\uc801\uc778 \uac83\uc744 \ub3d5\ub294\ub2e4: \ub3d9\uc801\uc73c\ub85c \ub2e4\ud615\uc801\uc778 \ud0c0\uc785 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574 \uc815\uc801 \ub2e4\ud615\uc131\uc744 \uc0ac\uc6a9\ud558\ub77c. class Command { // pure virtual functions }; // implementations template < /*...*/ > class ConcreteCommand : public Command { // implement virtuals };","title":"Example"},{"location":"Templates/#example_5","text":"\ub3d9\uc801\uc778 \uac83\uc740 \uc815\uc801\uc778 \uac83\uc744 \ub3d5\ub294\ub2e4: \uc77c\ubc18\uc801\uc774\uace0, \ud3b8\ub9ac\ud558\uba70, \uc815\uc801\uc73c\ub85c \uacb0\ud569\ub41c(bound) \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud558\ub77c. \ub0b4\ubd80\uc801\uc73c\ub85c\ub294 \ub3d9\uc801\uc73c\ub85c \uad6c\ud604\ud558\ub77c. \uadf8\ub807\uac8c \ud568\uc73c\ub85c\uc368 \uc77c\uad00\uc801\uc778 \uac1c\uccb4\ub97c \ub9cc\ub4e4\uc5b4\ub77c(offer a uniform object layout). \uc608\uc2dc\ub85c\ub294 std::shared_ptr \uc758 \uc81c\uac70 \ud568\uc218(deleter) \ud0c0\uc785 \uc81c\uac70\ub97c \ub4e4 \uc218 \uc788\ub2e4. (\ud558\uc9c0\ub9cc \ud0c0\uc785 \uc81c\uac70\ub97c \ub0a8\uc6a9\ud558\uc9c0 \ub9c8\ub77c )","title":"Example"},{"location":"Templates/#note_4","text":"\ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc5d0 \uc788\ub294 \ube44\uc0c1\uc18d\ud568\uc218(nonvirtual function)\ub294 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\uc73c\uba74 \uc0dd\uc131\ub418\uc9c0(instantiated) \uc54a\ub294\ub2e4. -- \uac00\uc0c1\ud568\uc218\ub294 \uc5b8\uc81c\ub098 \uc2e4\uccb4\ud654(instantiate)\ub41c\ub2e4. \uc774\ub294 \ucf54\ub4dc\ud06c\uae30\ub97c \ub298\ub9ac\uace0 \ud544\uc694\uce58\ub3c4 \uc54a\ub294 \ud568\uc218\ub97c \uc2e4\uccb4\ud654\ud568\uc73c\ub85c\uc368 \uc77c\ubc18\ud654 \ud0c0\uc785\uc5d0 \ub300\ud55c \uc81c\uc57d\uc744 \uc2ec\ud654\uc2dc\ud0ac\uc9c0\ub3c4 \ubaa8\ub978\ub2e4.","title":"Note"},{"location":"Templates/#see-also","text":"ref ??? ref ??? ref ???","title":"See also"},{"location":"Templates/#enforcement_3","text":"\ubcf4\ub2e4 \uad6c\uccb4\uc801\uc778 \uaddc\uce59\ub4e4\uc740 \uc704\uc758 \ucc38\uc870\ub9c1\ud06c\ub85c \ud655\uc778\ud558\ub77c.","title":"Enforcement"},{"location":"Templates/#tconcepts","text":"\ucee8\uc149(Concept)\uc740 \ud15c\ud50c\ub9bf \uc778\uc790\ub4e4\uc5d0 \ub300\ud55c \uc694\uad6c\uc0ac\ud56d\uc744 \uc9c0\uc815\ud558\uae30 \uc704\ud55c \uae30\ub2a5\uc774\ub2e4. \ucee8\uc149\uc740 ISO technical specification \uc774\uc9c0\ub9cc, \ud604\uc7ac\ub294 GCC\ub9cc \uc774\ub97c \uc9c0\uc6d0\ud558\uace0 \uc788\ub2e4. \ucee8\uc149\uc740 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0\uc11c\uc758 \uc0ac\uace0\uc5d0 \uc911\uc694\ud55c \uc5ed\ud560\uc744 \ud558\uba70, \ubbf8\ub798\uc758 (\ud45c\uc900\uc744 \ube44\ub86f\ud55c) C++ \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \ub9ce\uc740 \uc791\uc5c5\uc758 \uae30\ucd08\uac00 \ub420 \uac83\uc774\ub2e4. \uc774 \ud56d\ubaa9\uc758 \uaddc\uce59\ub4e4\uc740 \ucee8\uc149\uc774 \uc9c0\uc6d0\ub41c\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4 \ucee8\uc149 \uc0ac\uc6a9 \uaddc\uce59 \uc694\uc57d: T.10: \ubaa8\ub4e0 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ucee8\uc149\uc744 \uba85\uc2dc\ud558\ub77c T.11: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0 \ud45c\uc900 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub77c T.12: \uc9c0\uc5ed \ubcc0\uc218\uc5d0 auto \ubcf4\ub2e4\ub294 \ucee8\uc149\uc758 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c T.13: \ub2e8\uc21c\ud558\uac70\ub098 \ub2e8\uc77c \ud0c0\uc785\uc744 \uc778\uc790\ub85c \ubc1b\ub294 \ucee8\uc149\uc5d0\ub294 \uc57d\uc2dd \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c ??? \ucee8\uc149 \uc815\uc758 \uaddc\uce59 \uc694\uc57d: T.20: \uc720\uc758\ubbf8\ud55c \uc758\ubbf8\uad6c\uc870\uac00 \uc5c6\ub294 \"\ucee8\uc149\"\uc744 \ud53c\ud558\ub77c T.21: \ucee8\uc149\uc5d0\uc11c\ub294 \uc5f0\uc0b0\ub4e4\uc758 \uc644\uc804\ud55c \uc9d1\ud569(complete set)\uc744 \uc694\uad6c\ud558\ub77c T.22: \ucee8\uc149\uc5d0\uc11c \uc4f8 \uc218 \uc788\ub3c4\ub85d \uacf5\ub9ac\ub97c \uba85\uc2dc\ud558\ub77c T.23: \uc815\uc81c\ub41c \ucee8\uc149(refined concept)\uc740 \ub354 \ubc94\uc6a9\uc801\uc778 \uacbd\uc6b0\uc5d0 \uc0c8\ub85c\uc6b4 \ud328\ud134\uc744 \ub354\ud574\uc11c \ucc28\ubcc4\ud654\ud558\ub77c T.24: \uc758\ubbf8\uad6c\uc870\ub9cc \ub2e4\ub978 \ucee8\uc149\uc740 Tag \ud074\ub798\uc2a4 \ud639\uc740 Traits\ub97c \uc0ac\uc6a9\ud574 \ucc28\ubcc4\ud654\ud558\ub77c T.25: \uc81c\uc57d\uc774 \uc11c\ub85c \ub300\ube44\ub418\uc9c0 \uc54a\uac8c \ud558\ub77c T.26: \ub2e8\uc21c\ud55c \ubb38\ubc95\ubcf4\ub2e4\ub294 \uc0ac\uc6a9 \ud328\ud134\uc744 \uace0\ub824\ud574\uc11c \ucee8\uc149\uc744 \uc815\uc758\ud558\ub77c ???","title":"T.concepts: \ucee8\uc149 \uaddc\uce59\ub4e4"},{"location":"Templates/#tcon-use-concept-use","text":"","title":"T.con-use: \ucee8\uc149 \uc0ac\uc6a9(Concept use)"},{"location":"Templates/#t10","text":"","title":"T.10: \ubaa8\ub4e0 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ucee8\uc149\uc744 \uba85\uc2dc\ud558\ub77c"},{"location":"Templates/#reason_5","text":"\uc815\ud655\ud568\uacfc \uac00\ub3c5\uc131. \ud15c\ud50c\ub9bf \uc778\uc790\uc758 \uac00\uc815\ub41c \uc758\ubbf8(\ubb38\ubc95\uacfc \uc758\ubbf8\uad6c\uc870)\ub294 \ud15c\ud50c\ub9bf \uc778\ud130\ud398\uc774\uc2a4\uc758 \uae30\ubcf8\uc774\ub2e4. \ucee8\uc149\uc740 \ubb38\uc11c\ud654\uc640 \ud15c\ud50c\ub9bf\uc6a9 \uc624\ub958 \ucc98\ub9ac\ub97c \uacbd\uc774\uc801\uc73c\ub85c \uac1c\uc120\uc2dc\ud0a8\ub2e4. \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \uc801\uc6a9\ub418\ub294 \uac1c\ub150\uc744 \uae30\uc220\ud558\ub294 \uac83\uc740 \uac15\ub825\ud55c \ub514\uc790\uc778 \ub3c4\uad6c\uac00 \ub41c\ub2e4.","title":"Reason"},{"location":"Templates/#example_6","text":"template < typename Iter , typename Val > // requires Input_iterator<Iter> // && Equality_comparable<Value_type<Iter>, Val> Iter find ( Iter b , Iter e , Val v ) { // ... } \uc704\uc640 \uac19\uc740 \uc758\ubbf8\ub97c \uac00\uc9c0\uc9c0\ub9cc, \uc880 \ub354 \uac04\uacb0\ud558\uac8c \ud558\uc790\uba74: template < Input_iterator Iter , typename Val > // requires Equality_comparable<Value_type<Iter>, Val> Iter find ( Iter b , Iter e , Val v ) { // ... }","title":"Example"},{"location":"Templates/#note_5","text":"\"\ucee8\uc149(Concepts)\"\uc740 ISO TS\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4: concepts . \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\uc149\ub4e4\uc758 \ucd08\uc548\uc740 \ub2e4\ub978 ISO TS\uc5d0 \uc788\ub2e4: ranges \ucee8\uc149\uc740 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\uc5d0 \ub530\ub77c, \uc608\uc2dc\ub4e4\uc5d0\uc11c \ucee8\uc149 \ubd80\ubd84\uc740 \uc815\ud615\ud654\ub41c \uc8fc\uc11d\uc73c\ub85c\ub9cc \ud45c\uae30\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc8fc\uc11d\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub2e4: template < typename Iter , typename Val > requires Input_iterator < Iter > && Equality_comparable < Value_type < Iter > , Val > Iter find ( Iter b , Iter e , Val v ) { // ... }","title":"Note"},{"location":"Templates/#note_6","text":"typename (\ub610\ub294 auto )\ub294 \uac00\uc7a5 \uc81c\uc57d\uc774 \uc791\uc740 \ucee8\uc149\uc774\ub2e4. \"\uc774 \uc778\uc790\ub294 \uc784\uc758\uc758 \ud0c0\uc785\uc774\ub2e4\"\uc778 \uacbd\uc6b0\ub97c \uc81c\uc678\ud558\uace4 \uac00\ub2a5\ud55c \uc801\uac8c \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4. \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d \ucf54\ub4dc\uc758 \ud55c \ubd80\ubd84\uc73c\ub85c\uc368 \uc6b0\ub9ac\uac00 \ud45c\ud604\uc2dd \ud2b8\ub9ac\ub97c \uc870\uc791\ud558\uace0, \ud0c0\uc785 \uac80\uc0ac\ub97c \uc5f0\uae30\ud560\ub54c\ub9cc \ud544\uc694\ud558\ub2e4.","title":"Note"},{"location":"Templates/#references","text":"TC++PL 4, Palo Alto TR, Sutton","title":"References"},{"location":"Templates/#enforcement_4","text":"\ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc740 \ud15c\ud50c\ub9bf \ud0c0\uc785 \uc778\uc790\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Templates/#t11","text":"","title":"T.11: \uac00\ub2a5\ud55c \ubaa8\ub4e0 \uacbd\uc6b0 \ud45c\uc900 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_6","text":"\"\ud45c\uc900\" \ucee8\uc149(GSL\uacfc Ranges TS \uc5d0\uc11c \uc81c\uacf5\ud558\ub294)\uc740 \uc6b0\ub9ac \uc790\uc2e0\ub9cc\uc758 \ucee8\uc149\uc744 \uc0dd\uac01\ud560 \ud544\uc694\uac00 \uc5c6\ub3c4\ub85d \ud55c\ub2e4. \ub3d9\uc2dc\uc5d0 \uc6b0\ub9ac\uac00 \uc870\uae09\ud558\uac8c \uad00\ub9ac\ud558\ub294 \uac83\ubcf4\ub2e4 \ub354 \uae4a\uc774 \uc0dd\uac01\ud55c \uacb0\uacfc\ubb3c\uc774\uba70, \uc0c1\ud638 \ub3d9\uc791\uc131\uc744 \uac1c\uc120\ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#note_7","text":"\uc0c8\ub85c\uc6b4 \uc77c\ubc18\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\ub294 \ud55c \ud544\uc694\ud55c \ub9ce\uc740 \ucee8\uc149\uc774 \uc774\ubbf8 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc548\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4.","title":"Note"},{"location":"Templates/#example-using-ts-concepts","text":"template < typename T > // \uc774\ub7f0 \ucee8\uc149\uc744 \uc815\uc758\ud560 \ud544\uc694 \uc5c6\ub2e4: GSL\uc5d0 Sortable\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4 concept Ordered_container = Sequence < T > && Random_access < Iterator < T >> && Ordered < Value_type < T >> ; void sort ( Ordered_container & s ); \uc774 Ordered_container \ub294 \uc544\uc8fc \ud0c0\ub2f9\ud574 \ubcf4\uc778\ub2e4. \uadf8\ub7ec\ub098 GSL(\uadf8\ub9ac\uace0 Range TS)\uc548\uc5d0 \uc788\ub294 Sortable \ucee8\uc149\uacfc \uc544\uc8fc \ube44\uc2b7\ud558\ub2e4. \ub354 \uc88b\uc740\uac00? \ub354 \uc62c\ubc14\ub978\uac00? sort \uc5d0 \ub300\ud55c \ud45c\uc900 \uc694\uad6c\uc0ac\ud56d\uc744 \uc815\ud655\ud558\uac8c \ubc18\uc601\ud558\uace0 \uc788\ub294\uac00? Sortable \uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ub354 \uc88b\uace0 \ub2e8\uc21c\ud558\ub2e4: void sort ( Sortable & s ); // \ub354 \ub098\uc740 \ubc29\ubc95","title":"Example (using TS concepts)"},{"location":"Templates/#note_8","text":"\"\ud45c\uc900\" \ucee8\uc149\ub4e4\uc740 ISO \ud45c\uc900\ud654 \uacfc\uc815\uc5d0\uc11c \ubc1c\uc804\ud558\uace0 \uc788\ub2e4.","title":"Note"},{"location":"Templates/#note_9","text":"\uc4f8\ub9cc\ud55c \ucee8\uc149\uc744 \ub514\uc790\uc778\ud558\ub294 \uac83\uc740 \uad49\uc7a5\ud788 \uc5b4\ub824\uc6b4(challenging) \uc77c\uc774\ub2e4.","title":"Note"},{"location":"Templates/#enforcement_5","text":"\uc5b4\ub835\ub2e4. \uc81c\uc57d\uc870\uac74\uc774 \uc5c6\ub294 \uc778\uc790, \ube44\ud45c\uc900 \ucee8\uc149\uc744 \uc4f0\ub294 \ud15c\ud50c\ub9bf, \uacf5\ub9ac(axiom)\uc5c6\uc774 'homebrew' \ucee8\uc149\uc744 \uc4f0\ub294 \ud15c\ud50c\ub9bf\uc744 \ucc3e\ub294\ub2e4 \ucee8\uc149 \ubc1c\uacac \ud234\uc744 \uac1c\ubc1c\ud558\ub77c. \ucd08\uae30 \uc2e4\ud5d8 \ucc38\uc870","title":"Enforcement"},{"location":"Templates/#t12-auto","text":"","title":"T.12: \uc9c0\uc5ed \ubcc0\uc218\uc5d0 auto \ubcf4\ub2e4\ub294 \ucee8\uc149\uc758 \uc774\ub984\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_7","text":"auto \ub294 \uac00\uc7a5 \uc57d\ud55c \ucee8\uc149\uc774\ub2e4. \ucee8\uc149 \uc774\ub984\uc740 \ub2e8\uc21c\ud788 auto \ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83 \ubcf4\ub2e4 \ub354 \ub9ce\uc740 \uc758\ubbf8\uc744 \uc804\ub2ec\ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_1","text":"vector < string > v { \"abc\" , \"xyz\" }; auto & x = v . front (); // bad String & s = v . front (); // good (String is a GSL concept)","title":"Example (using TS concepts)"},{"location":"Templates/#enforcement_6","text":"???","title":"Enforcement"},{"location":"Templates/#t13","text":"\uc5ed\uc8fc: \uc57d\uc2dd \ud45c\uae30(shorthand notation)","title":"T.13: \ub2e8\uc21c\ud558\uac70\ub098 \ub2e8\uc77c \ud0c0\uc785\uc744 \uc778\uc790\ub85c \ubc1b\ub294 \ucee8\uc149\uc5d0\ub294 \uc57d\uc2dd \ud45c\uae30\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_8","text":"\uac00\ub3c5\uc131. \uc9c1\uc811\uc801\uc778 \uc544\uc774\ub514\uc5b4\uc758 \ud45c\ud604.","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_2","text":"T \ub294 Sortable \ucee8\uc149\uc744 \ub9cc\uc871\ud558\uae30 \uc704\ud574\uc11c\ub294: template < typename T > // Correct but verbose: \"The parameter is // requires Sortable<T> // of type T which is the name of a type void sort ( T & ); // that is Sortable\" template < Sortable T > // Better (assuming support for concepts): \"The parameter is of type T void sort ( T & ); // which is Sortable\" void sort ( Sortable & ); // Best (assuming support for concepts): \"The parameter is Sortable\" \uc9e7\uc740 \ubc84\uc804\uc774 \uc6b0\ub9ac\uac00 \ub9d0\ud558\ub294 \ubc29\ubc95\uacfc \ub354 \uc798 \uc77c\uce58\ud55c\ub2e4. \ub9ce\uc740 \ud15c\ud50c\ub9bf\uc740 template \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4\ub294 \uc810\uc5d0 \uc8fc\ubaa9\ud558\ub77c.","title":"Example (using TS concepts)"},{"location":"Templates/#note_10","text":"\"\ucee8\uc149(Concepts)\"\uc740 ISO TS\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4: concepts . \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucee8\uc149\ub4e4\uc758 \ucd08\uc548\uc740 \ub2e4\ub978 ISO TS\uc5d0 \uc788\ub2e4: ranges \ucee8\uc149\uc740 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \uadf8\uc5d0 \ub530\ub77c, \uc608\uc2dc\ub4e4\uc5d0\uc11c \ucee8\uc149 \ubd80\ubd84\uc740 \uc815\ud615\ud654\ub41c \uc8fc\uc11d\uc73c\ub85c\ub9cc \ud45c\uae30\ud560 \uac83\uc774\ub2e4. \ub2f9\uc2e0\uc774 GCC 6.1\uc774\ud6c4 \ubc84\uc804\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \uc8fc\uc11d\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Templates/#enforcement_7","text":"<typename T> \uacfc <class T> \ud45c\uae30\ubc95\uc744 \ubcc0\uacbd\ud560 \ub54c \uc9e7\uc740 \ub2e8\uc5b4\ub85c\ub294 \uc4f0\uae30\uac00 \ubd88\uac00\ub2a5\ud558\ub2e4 \ucc98\uc74c\uc5d0\ub294 typename \uc744 \uc0ac\uc6a9\ud558\uace0, \uadf8 \ud6c4\uc5d0 \ud55c \uc885\ub958 \uc778\uc790 \ucee8\uc149\uc73c\ub85c \uc81c\ud55c\ub418\ub294 \uc120\uc5b8\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Templates/#tconceptsdef-concept-definition-rules","text":"\uc88b\uc740 \ucee8\uc149\uc744 \uc815\uc758\ud558\ub294 \uac83\uc740 \uc0ac\uc18c\ud55c \uc77c\uc774 \uc544\ub2c8\ub2e4. \ucee8\uc149\uc740 Application \ubc94\uc704\uc5d0\uc11c \uae30\ucd08\uc801\uc778 \uac1c\ub150\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4 (\uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \"concepts\"\ub77c\uace0 \uc774\ub984\uc9c0\uc5b4\uc84c\ub2e4). \ud558\ub098\uc758 \ud074\ub798\uc2a4\ub098 \uc54c\uace0\ub9ac\uc998\uc744 \ubb38\ubc95\uc801\uc73c\ub85c \uc81c\uc57d\ud558\ub294 \uac83\uc740 \ucee8\uc149\uc774 \uc758\ub3c4\ud558\ub294 \ubc14\uac00 \uc544\ub2c8\uba70, \ucee8\uc149\uc758 \uba54\ucee4\ub2c8\uc998\uc744 \uc801\uc6a9\ud588\uc744 \ub54c\uc758 \ud6a8\uc728\uc744 \uc644\uc804\ud788 \ub04c\uc5b4\ub0bc \uc218 \uc5c6\ub2e4. \ubd84\uba85, \ucee8\uc149\uc744 \uc815\uc758\ud558\ub294 \uac83\uc740 \ucee8\uc149 \uad6c\ud604\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 (\uc608\ucee8\ub300 GCC 6.1 \uc774\ud6c4\uc758 \ubc84\uc804\uc73c\ub85c \ucef4\ud30c\uc77c \ub418\ub294) \ucf54\ub4dc\uc5d0 \uc720\uc6a9\ud560 \uac83\uc774\ub2e4. \uadf8 \uc774\uc678\uc5d0\ub3c4 \ucee8\uc149\uc744 \uc815\uc758\ud558\ub294\uac83 \uc790\uccb4\uac00 \uc720\uc6a9\ud55c \uc124\uacc4 \uae30\uc220\uc774 \ub420 \uac83\uc774\uba70 \uac1c\ub150 \ucc28\uc6d0\uc758 \uc624\ub958\ub97c \uc7a1\uc544\ub0b4\uac70\ub098 \uad6c\ud604 \ucf54\ub4dc\uc758 \uac1c\ub150\uc744 \uc815\ub9ac\ud558\ub3c4\ub85d \ub3c4\uc6b8 \uac83\uc774\ub2e4.","title":"T.concepts.def: \ucee8\uc149 \uc815\uc758(Concept definition rules) \uaddc\uce59"},{"location":"Templates/#t20","text":"","title":"T.20: \uc720\uc758\ubbf8\ud55c \uc758\ubbf8\uad6c\uc870\uac00 \uc5c6\ub294 \"\ucee8\uc149\"\uc744 \ud53c\ud558\ub77c"},{"location":"Templates/#reason_9","text":"\ucee8\uc149\uc740 \uc758\ubbf8\uc801\uc778 \uac1c\ub150, \uc608\ub97c \ub4e4\uba74, \"\uc22b\uc790\", \uc694\uc18c\ub4e4\uc758 \"\ubc94\uc704\", \uadf8\ub9ac\uace0 \"\uc644\uc804\ud788 \uc815\ub82c\ub41c\" \uac19\uc740 \uac1c\ub150\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. \ub2e8\uc21c\ud55c \uc81c\uc57d\uc870\uac74, + \uc5f0\uc0b0\uc790\ub97c \uac00\uc9c4\ub2e4\uac70\ub098, > \uc5f0\uc0b0\uc790\ub97c \uac00\uc9c0\ub294 \uac83, \ucc98\ub7fc \ub3c5\uc790\uc801\uc73c\ub85c \uae30\uc220\ub418\uc5b4\uc120 \uc758\ubbf8\uac00 \uc5c6\ub2e4. \uc720\uc800 \ucf54\ub4dc\ubcf4\ub2e4\ub294 \uc758\ubbf8\uc788\ub294 \uac1c\ub150\uc744 \uc704\ud55c \ube14\ub85d\uc744 \uad6c\uc131\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example-bad-using-ts-concepts","text":"template < typename T > concept Addable = has_plus < T > ; // bad; \ubd88\ucda9\ubd84\ud558\ub2e4 template < Addable N > auto algo ( const N & a , const N & b ) // use two numbers { // ... return a + b ; } int x = 7 ; int y = 9 ; auto z = algo ( x , y ); // z = 16 string xx = \"7\" ; string yy = \"9\" ; auto zz = algo ( xx , yy ); // zz = \"79\" \uc544\ub9c8\ub3c4 \ubb38\uc790\uc5f4 \uc811\ud569\uc77c \uc218\ub3c4 \uc788\uace0, \uc2e4\uc218\uc600\uc744 \uc218\ub3c4 \uc788\ub2e4. \uc5ec\uae30\uc11c \ube84\uc0d8 \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud558\ub3c4\ub85d \ud55c\ub2e4\uba74 \uc644\uc804\ud788 \ub2e4\ub978 \ud0c0\uc785\ub4e4\ub85c\ub9cc \uc0ac\uc6a9\uac00\ub2a5\ud560 \uac83\uc774\ub2e4. \uc608\uc2dc\uc758 Addable \uc740 \uad50\ud658\ubc95\uce59\uc774 \uc131\ub9bd\ud574\uc57c \ud55c\ub2e4\ub294 \uc218\ud559\uc801\uc778 \uaddc\uce59\uc5d0 \uc704\ubc30\ub41c\ub2e4: a+b == b+a","title":"Example, bad (using TS concepts)"},{"location":"Templates/#note_11","text":"\ucee8\uc149\uc758 \uc9c4\uc815\ud55c \ud2b9\uc9d5\uc740 \ubb38\ubc95 \uc81c\uc57d\uacfc \ub2ec\ub9ac \uc758\ubbf8\uad6c\uc870\ub97c \uae30\uc220\ud558\ub294 \ub2a5\ub825\uc774 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Templates/#example-using-ts-concepts_3","text":"template < typename T > // The operators +, -, *, and / for a number are assumed to // follow the usual mathematical rules concept Number = has_plus < T > && has_minus < T > && has_multiply < T > && has_divide < T > ; template < Number N > auto algo ( const N & a , const N & b ) { // ... return a + b ; } int x = 7 ; int y = 9 ; auto z = algo ( x , y ); // z = 16 string xx = \"7\" ; string yy = \"9\" ; auto zz = algo ( xx , yy ); // error: string is not a Number","title":"Example (using TS concepts)"},{"location":"Templates/#note_12","text":"\ub2e4\uc218\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc815\uc758\ud55c \ucee8\uc149\uc740 \ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc815\uc758\ud55c \ucee8\uc149\ubcf4\ub2e4 \uc758\ub3c4\uce58 \uc54a\uc740 \ud0c0\uc785\uc744 \ud5c8\uc6a9\ud560 \uac00\ub2a5\uc131\uc774 \ub0ae\ub2e4.","title":"Note"},{"location":"Templates/#enforcement_8","text":"\ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc815\uc758\ud55c concepts \uc774 \ub2e4\ub978 concepts \ub4e4\uc744 \uc815\uc758\ud558\ub294 \ucf54\ub4dc \uc774\uc678\uc758 \ucf54\ub4dc\uc5d0\uc11c \uc0ac\uc6a9\ub418\uba74 \uc9c0\uc801\ud558\ub77c enable_if \uac00 \ud558\ub098\uc758 \uc5f0\uc0b0\uc73c\ub85c \uc815\uc758\ud55c concepts \ucc98\ub7fc \uc0ac\uc6a9\ub418\uace0 \uc788\uc73c\uba74 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Templates/#t21","text":"Require a complete set of operations for a concept","title":"T.21: \ucee8\uc149\uc5d0\uc11c\ub294 \uc5f0\uc0b0\ub4e4\uc758 \uc644\uc804\ud55c \uc9d1\ud569\uc744 \uc694\uad6c\ud558\ub77c"},{"location":"Templates/#reason_10","text":"\uc774\ud574\ud558\uae30 \uc27d\ub2e4. \uc0c1\ud638\uc6b4\uc6a9\uc131 \uac1c\uc120. \uad6c\ud604\uc774\ub098 \uc720\uc9c0\ubcf4\uc218 \uc778\ub825\uc5d0\uac8c \ub3c4\uc6c0\uc774 \ub41c\ub2e4.","title":"Reason"},{"location":"Templates/#note_13","text":"\uc774 \uaddc\uce59\uc740 \ubcf4\ub2e4 \uc77c\ubc18\uc801\uc778 \uaddc\uce59\uc778 \ucee8\uc149\uc740 \uc758\ubbf8\uad6c\uc870\uc801\uc73c\ub85c \uc801\uc808\ud574\uc57c \ud55c\ub2e4 \uc5d0\uc11c \ud30c\uc0dd\ub41c \uac83\uc774\ub2e4.","title":"Note"},{"location":"Templates/#example-bad-using-ts-concepts_1","text":"template < typename T > concept Subtractable = requires ( T a , T , b ) { a - b ; }; \ubb38\ub9e5\uc801\uc73c\ub85c \ubb34\uc758\ubbf8 \ud558\ub2e4. \ucd5c\uc18c\ud55c + , - \uc815\ub3c4\ub294 \uc788\uc5b4\uc57c \uc4f8\ub9cc\ud558\ub2e4. \uc5f0\uc0b0\ub4e4\uc758 \uc644\uc804\ud55c \uc9d1\ud569(complete set)\uc744 \uc608\uc2dc\ud558\uc790\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4 \uc0b0\uc220(Arithmetic)\uc5f0\uc0b0\uc758 \uc9d1\ud569: + , - , * , / , += , -= , *= , /= \ube44\uad50(Comparable)\uc5f0\uc0b0\uc758 \uc9d1\ud569: < , > , <= , >= , == , !=","title":"Example, bad (using TS concepts)"},{"location":"Templates/#note_14","text":"\uc774 \uaddc\uce59\uc740 \ucee8\uc149\uc758 \uc9c0\uc6d0\uc5ec\ubd80\uc640 \ubb34\uad00\ud558\uac8c \uc801\uc6a9\ub420 \uc218 \uc788\ub2e4. \uc774\ub294 \ube44-\ud15c\ud50c\ub9bf \ucf54\ub4dc\uc5d0 \uc801\uc6a9\ub418\ub294 \uc77c\ubc18\uc801\uc778 \uc124\uacc4 \uaddc\uce59\uc774\ub2e4: class Minimal { // ... }; bool operator == ( const Minimal & , const Minimal & ); bool operator < ( const Minimal & , const Minimal & ); Minimal operator + ( const Minimal & , const Minimal & ); // \ub2e4\ub978 \uc5f0\uc0b0\uc790\ub294 \uc5c6\ub2e4 void f ( const Minimal & x , const Minimal & y ) { if ( ! ( x == y )) { /* ... */ } // OK if ( x != y ) { /* ... */ } // \uc774\ub7f0! \ucef4\ud30c\uc77c \uc624\ub958\ub2e4 while ( ! ( x < y )) { /* ... */ } // OK while ( x >= y ) { /* ... */ } // \uc774\ub7f0! \ucef4\ud30c\uc77c \uc624\ub958\ub2e4 x = x + y ; // OK x += y ; // \uc774\ub7f0! \ucef4\ud30c\uc77c \uc624\ub958\ub2e4 } \uc774\ub294 \uc544\uc8fc \uc791\uc740 \uc608\uc2dc\uc9c0\ub9cc, \uc0ac\uc6a9\uc790\ub4e4\uc758 \uae30\ub300\uc5d0 \uc5b4\uae0b\ub098\uace0 \ucf54\ub4dc\ub97c \uc81c\uc57d\ud55c\ub2e4(surprising and constraining). \ub2a5\ub960\uc744 \ub5a8\uc5b4\ub728\ub9b4 \uc218\ub3c4 \uc788\ub2e4. \uc774 \uaddc\uce59\uc740 \uc5f0\uc0b0\ub4e4\uc774 \uc218\ud559\uc801\uc73c\ub85c \uc77c\uad00\uc131 \uc788\ub294 \uc9d1\ud569(coherent set of operations)\uc744 \ubc18\uc601\ud574\uc57c \ud55c\ub2e4\ub294 \uad00\uc810\uc744 \ub4b7\ubc1b\uce68\ud55c\ub2e4.","title":"Note"},{"location":"Templates/#example_7","text":"class Convenient { // ... }; bool operator == ( const Convenient & , const Convenient & ); bool operator < ( const Convenient & , const Convenient & ); // ... and the other comparison operators ... Minimal operator + ( const Convenient & , const Convenient & ); // .. and the other arithmetic operators ... void f ( const Convenient & x , const Convenient & y ) { if ( ! ( x == y )) { /* ... */ } // OK if ( x != y ) { /* ... */ } // OK while ( ! ( x < y )) { /* ... */ } // OK while ( x >= y ) { /* ... */ } // OK x = x + y ; // OK x += y ; // OK } \ubaa8\ub4e0 \uc5f0\uc0b0\uc790\ub97c \uc815\uc758\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc774 \ubc88\uac70\ub85c\uc6b8 \uc218\ub294 \uc788\uc9c0\ub9cc, \uc5b4\ub824\uc6b4 \uac83\uc740 \uc544\ub2c8\ub2e4. \uc774\uc0c1\uc801\uc73c\ub85c\ub294, \uc5b8\uc5b4\uac00 \ube44\uad50 \uc5f0\uc0b0\ub4e4\uc744 \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ud568\uc73c\ub85c\uc368 \uc774 \uaddc\uce59\uc744 \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4.","title":"Example"},{"location":"Templates/#enforcement_9","text":"\ud074\ub798\uc2a4\uac00 \uc5f0\uc0b0\ub4e4\uc758 \"\uc644\uc804\ud558\uc9c0 \uc54a\uc740(odd)\" \ubd80\ubd84\uc9d1\ud569\uc744 \uac00\uc9c0\uba74 \uc9c0\uc801\ud55c\ub2e4. \uac00\ub839, == \ub97c \uc815\uc758\ud558\uc9c0\ub9cc != \ub97c \uc815\uc758\ud558\uc9c0 \uc54a\uac70\ub098, + \ub294 \uc815\uc758\ud558\uc9c0\ub9cc - \ub97c \uc815\uc758\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc774\ub2e4. std::string \uc758 \uc5f0\uc0b0 \uc9d1\ud569\uc740 \"\uc644\uc804\ud558\uc9c0 \uc54a\uc9c0\ub9cc\", \uc218\uc815\ud558\uae30\uc5d4 \ub108\ubb34 \ub2a6\uc5c8\ub2e4.","title":"Enforcement"},{"location":"Templates/#t22","text":"\uc5ed\uc8fc: \uacf5\ub9ac(axiom: \uc99d\uba85\uc774 \uc5c6\uc774\ub3c4 \uc790\uba85\ud55c \uac83)","title":"T.22: \ucee8\uc149\uc5d0\uc11c \uc4f8 \uc218 \uc788\ub3c4\ub85d \uacf5\ub9ac\ub97c \uba85\uc2dc\ud558\ub77c"},{"location":"Templates/#reason_11","text":"\uc758\ubbf8\uc788\uace0 \uc720\uc6a9\ud55c \ucee8\uc149\uc740 \uc758\ubbf8\uad6c\uc870\uc5d0 \uc601\ud5a5\uc744 \uc900\ub2e4. \ube44\ud615\uc2dd\uc801\uc73c\ub85c\ub4e0 \ud615\uc2dd\uc801\uc73c\ub85c\ub4e0 \uc758\ubbf8\uad6c\uc870\ub97c \ud45c\ud604\ud558\ub294 \uac83\uc740 \ucee8\uc149\uc744 \uc774\ud574\ud560 \uc218 \uc788\uac8c \ub9cc\ub4e0\ub2e4. \ub3d9\uc2dc\uc5d0 \uac1c\ub150\uc801\uc778 \uc624\ub958\ub97c \uc7a1\uc544\ub0b4\ub3c4\ub85d \ud55c\ub2e4. \uc758\ubbf8\uad6c\uc870\ub97c \uae30\uc220\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc740 \uac15\ub825\ud55c \ub514\uc790\uc778 \ub3c4\uad6c\uc774\ub2e4.","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_4","text":"template < typename T > // \uc0ac\uce59\uc5f0\uc0b0\uc740 \uae30\ubcf8\uc801\uc778 \uc218\ud559 \uaddc\uce59\ub4e4\uc744 \ub530\ub978\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4 // axiom(T a, T b) { // a + b == b + a; // a - a == 0; // a * (b + c) == a * b + a * c; // /*...*/ // } concept Number = requires ( T a , T b ) { { a + b } -> T ; // the result of a + b is convertible to T { a - b } -> T ; { a * b } -> T ; { a / b } -> T ; }","title":"Example (using TS concepts)"},{"location":"Templates/#note_15","text":"\uc774\uac83\uc740 \uc218\ud559\uc801 \uacf5\ub9ac\ub97c \ud45c\ud604\ud55c \uac83\uc774\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uacf5\ub9ac\ub294 \uc99d\uba85\ud558\uc9c0 \uc54a\ub294\ub2e4. \uacbd\uc6b0\uc5d0 \ub530\ub77c \uadf8 \uc99d\uba85\uc740 \ucef4\ud30c\uc77c\ub7ec\uc758 \ub2a5\ub825\uc744 \ub118\uc5b4\uc11c\ub294 \uac83\uc774\ub2e4. \uacf5\ub9ac\uac00 \uc77c\ubc18\uc801\uc774\uc9c0 \uc54a\uc744\uc9c0\ub3c4 \ubaa8\ub978\ub2e4. \uadf8\ub7ec\ub098 \ud15c\ud50c\ub9bf \uc791\uc131\uc790\ub294 \uc2e4\uc81c\ub85c \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub4e0 \uc785\ub825\uc5d0 \ub300\ud574\uc11c \uacf5\ub9ac\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\uace0 \uac00\uc815\ud558\ub294\uac8c \uc88b\ub2e4 (\uc120\ud589\uc870\uac74\uacfc \ube44\uc2b7\ud558\ub2e4).","title":"Note"},{"location":"Templates/#note_16","text":"\uc774 \ubb38\ub9e5\uc5d0\uc11c \uacf5\ub9ac\ub294 \ubd88\ub9ac\uc5b8 \uc5f0\uc0b0\uc2dd\uc774\ub2e4. \uadf8 \uc608\ub85c Palo Alto TR \ub97c \ucc38\uc870\ud558\ub77c. \ud604\uc7ac C++\uc740 \uacf5\ub9ac\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. (ISO \ucee8\uc149 TS\uc5d0\uc11c\ub3c4) \uadf8\ub798\uc11c \uaf64 \uc624\ub798\ub3d9\uc548 \uc8fc\uc11d\uc73c\ub85c \ub300\uc2e0\ud574\uc57c\ub9cc \ud55c\ub2e4. \ub098\uc911\uc5d0 \uc5b8\uc5b4\uac00 \uc9c0\uc6d0\ud55c\ub2e4\uba74 '//'\ub97c \uc5c6\uc560\uba74 \ub41c\ub2e4.","title":"Note"},{"location":"Templates/#note_17","text":"GSL \ucee8\uc149\uc740 \uc798 \uc815\uc758\ub41c \uc758\ubbf8\uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4; Palo Alto TR\uacfc Ranges TS\ub97c \ucc38\uc870\ud558\ub77c.","title":"Note"},{"location":"Templates/#exception-using-ts-concepts","text":"\ud604\uc7ac \uac1c\ubc1c\uc911\uc778 \uc0c8 \"\ucee8\uc149\" \ucd08\uae30\ubc84\uc804\uc740 \uc758\ubbf8\uad6c\uc870\ub97c \uae30\uc220\ud558\uc9c0 \uc54a\uace0 \uc81c\uc57d\uc870\uac74\ub4e4\uc744 \uc815\uc758\ud558\ub824\uace0 \ud55c\ub2e4. \uc88b\uc740 \uc758\ubbf8\uad6c\uc870\ub294 \ub178\ub825\uacfc \uc2dc\uac04\uc774 \ud544\uc694\ud558\ub2e4. \ubd88\uc644\uc804\ud55c \uc81c\uc57d\uc870\uac74\uc774\ub77c\ub3c4 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4: // balancer for a generic binary tree template < typename Node > concept bool Balancer = requires ( Node * p ) { add_fixup ( p ); touch ( p ); detach ( p ); } \uc704\uc5d0 \ub530\ub974\uba74 Balancer \ub294 \ucd5c\uc18c\ud55c \ud2b8\ub9ac\uc758 Node \uc5d0 \ub300\ud55c 3\uac1c \uc5f0\uc0b0\uc744 \uc9c0\uc6d0\ud574\uc57c \ud55c\ub2e4. \ud558\uc9c0\ub9cc \uc6b0\ub9ac\ub294 \ub354 \uc790\uc138\ud55c \uc758\ubbf8\uad6c\uc870\ub97c \uba85\uc2dc\ud560 \uc900\ube44\uac00 \ub418\uc9c0 \uc54a\uc558\ub294\ub370, \uc0c8\ub85c\uc6b4 \ud615\ud0dc\uc758 \uade0\ud615 \ud2b8\ub9ac(balanced tree)\uac00 \ub354 \ub9ce\uc740 \uc5f0\uc0b0\uc744 \ud544\uc694\ub85c \ud558\uac70\ub098 \ucd08\uae30 \ub514\uc790\uc778\uc5d0\uc11c \ubaa8\ub4e0 \ub178\ub4dc\uc5d0 \uc801\uc6a9\ud560 \uc815\ud655\ud55c \uc758\ubbf8\uad6c\uc870\ub97c \ud655\uc815\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\uae30 \ub54c\ubb38\uc774\ub2e4. \uc758\ubbf8\uad6c\uc870\uac00 \uc798 \uc815\uc758\ub418\uc9c0 \uc54a\uc740 \"\uac1c\ub150\"\uc774\ub77c\ub3c4 \uc720\uc6a9\ud560 \uc218 \uc788\ub2e4. \uac00\ub839, \uac1c\ub150\uc744 \uc815\uc758\ud558\ub294 \uac83\uc740 \ucd08\uae30 \uc2e4\ud5d8\ub2e8\uacc4\uc5d0\uc11c \uba87\uba87 \uc0ac\ud56d\uc744 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4. \ub2e4\ub9cc \uc548\uc815\ud654\ub410\ub2e4\uace0 \uc0dd\uac01\ud574\uc11c\ub294 \uc548\ub41c\ub2e4. \uc0c8\ub85c\uc6b4 \uc6a9\ub840\uac00 \ubc1c\uacac\ub418\uba74 \ubd88\uc644\uc804\ud55c \ucee8\uc149\uc740 \uac1c\uc120\ub420 \uac83\uc774\ub2e4.","title":"Exception (using TS concepts)"},{"location":"Templates/#enforcement_10","text":"\ucee8\uc149 \uc815\uc758 \uc8fc\uc11d \ub0b4\uc5d0 \"axiom\" \ub2e8\uc5b4\ub97c \ucc3e\ub294\ub2e4","title":"Enforcement"},{"location":"Templates/#t23-refined-concept","text":"","title":"T.23: \uc815\uc81c\ub41c \ucee8\uc149(refined concept)\uc740 \ub354 \ubc94\uc6a9\uc801\uc778 \uacbd\uc6b0\uc5d0 \uc0c8\ub85c\uc6b4 \ud328\ud134\uc744 \ub354\ud574\uc11c \ucc28\ubcc4\ud654\ud558\ub77c"},{"location":"Templates/#reason_12","text":"\uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ucef4\ud30c\uc77c\ub7ec\uac00 \uc790\ub3d9\uc73c\ub85c \uad6c\ubd84\ud560 \uc218 \uc5c6\ub2e4.","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_5","text":"template < typename I > concept bool Input_iter = requires ( I iter ) { ++ iter ; }; template < typename I > concept bool Fwd_iter = Input_iter < I > && requires ( I iter ) { iter ++ ; } \ucef4\ud30c\uc77c\ub7ec\ub294 \uc694\uad6c\ub41c \uc5f0\uc0b0\ub4e4\uc5d0 \uae30\ubc18\ud574\uc11c \uc5b4\ub5a4\uac83\uc774 \ud544\uc694\ud55c \uc5f0\uc0b0\uc778\uc9c0 \uacb0\uc815(determine refinement)\ud560 \uc218 \uc788\ub2e4. (\uc608\uc81c\uc5d0\uc11c\ub294 ++ \uc5d0 \ud574\ub2f9\ud55c\ub2e4) \uc774\ub294 \ud0c0\uc785\uc744 \uad6c\ud604\ud558\ub294 \uce21\uc758 \ubd80\ub2f4\uc744 \uc904\uc5ec\uc8fc\ub294\ub370, \"\ucee8\uc149\uc744 \ub9cc\uc871\ud558\ub3c4\ub85d\" \ud2b9\ubcc4\ud55c \uc120\uc5b8\uc744 \uc791\uc131\ud560 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. 2\uac1c\uc758 \ucee8\uc149\uc774 \uc694\uad6c\uc0ac\ud56d\uc774 \uc815\ud655\ud558\uac8c \ub3d9\uc77c\ud558\ub2e4\uba74 \uadf8\ub4e4\uc740 \ub17c\ub9ac\uc801 \ub3d9\uce58\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4 (\uac1c\uc120\ub41c \uc810\uc774 \uc5c6\ub2e4).","title":"Example (using TS concepts)"},{"location":"Templates/#enforcement_11","text":"\ub2e4\ub978 \ucee8\uc149\uacfc \uc694\uad6c\uc0ac\ud56d\uc774 \uc815\ud655\ud558\uac8c \uc77c\uce58\ud558\ub294 \ucee8\uc149\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. \ucc28\uc774\ub97c \ubd84\uba85\ud558\uac8c \ud558\uace0 \uc2f6\ub2e4\uba74 T.24 \ub97c \ucc38\uc870\ud558\ub77c.","title":"Enforcement"},{"location":"Templates/#t24-tag-traits","text":"","title":"T.24: \uc758\ubbf8\uad6c\uc870\ub9cc \ub2e4\ub978 \ucee8\uc149\uc740 Tag \ud074\ub798\uc2a4 \ud639\uc740 Traits\ub97c \uc0ac\uc6a9\ud574 \ucc28\ubcc4\ud654\ud558\ub77c"},{"location":"Templates/#reason_13","text":"\ud504\ub85c\uadf8\ub798\uba38\uac00 \ucc28\ubcc4\ud654\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ub3d9\uc77c\ud55c \ubb38\ubc95\uc744 \uc694\uad6c\ud558\uc9c0\ub9cc \uc758\ubbf8\uad6c\uc870\uac00 \ub2e4\ub978 \ub450 \ucee8\uc149\uc740 \ubaa8\ud638\ud568\uc744 \ub0b3\ub294\ub2e4.","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_6","text":"template < typename I > // iterator providing random access concept bool RA_iter = ...; template < typename I > // iterator providing random access to contiguous data concept bool Contiguous_iter = RA_iter < I > && is_contiguous < I >:: value ; // using is_contiguous trait \ub77c\uc774\ube0c\ub7ec\ub9ac \ud504\ub85c\uadf8\ub798\uba38\uac00 is_contiguous \ub97c \uc801\uc808\ud558\uac8c \uc815\uc758\ud574\uc57c \ud55c\ub2e4. \ucee8\uc149\uc73c\ub85c Tag \ud074\ub798\uc2a4\ub97c \uac10\uc2f8\uba74 \ube44\uc2b7\ud55c \ud45c\ud604\uc774 \ub41c\ub2e4: template < typename I > concept Contiguous = is_contiguous < I >:: value ; template < typename I > concept bool Contiguous_iter = RA_iter < I > && Contiguous < I > ; \uc774\ub807\uac8c \ud558\uba74 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud504\ub85c\uadf8\ub798\uba38\uac00 is_contiguous \ud2b9\uc131(trait)\uc744 \uc801\uc808\ud788 \uc815\uc758\ud574\uc57c\ub9cc \ud55c\ub2e4.","title":"Example (using TS concepts)"},{"location":"Templates/#note_18","text":"\ud2b9\uc131(trait)\uc740 \ud2b9\uc131 \ud074\ub798\uc2a4(trait class)\ub098 \ud0c0\uc785 \ud2b9\uc131(type trait)\uc744 \ub9d0\ud55c\ub2e4. \uc0ac\uc6a9\uc790 \ud639\uc740 \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc815\uc758\ud588\uc744 \uc218 \uc788\ub2e4.. \uac00\ub2a5\ud558\ub2e4\uba74 \ud45c\uc900\uc5d0\uc11c \uc815\uc758\ud55c \ud2b9\uc131\uc744 \uc120\ud638\ud558\ub77c.","title":"Note"},{"location":"Templates/#enforcement_12","text":"\ucef4\ud30c\uc77c\ub7ec\ub294 \ub3d9\uc77c\ud55c \ucee8\uc149\uc744 \uc560\ub9e4\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \uc9c0\uc801\ud55c\ub2e4 \ub3d9\uc77c\ud55c \ucee8\uc149\uc744 \uc815\uc758\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Templates/#t25","text":"Avoid complementary constraints","title":"T.25: \uc81c\uc57d\uc774 \uc11c\ub85c \ub300\ube44\ub418\uc9c0 \uc54a\uac8c \ud558\ub77c"},{"location":"Templates/#reason_14","text":"\ub2e8\uc21c\uba85\ub8cc\ud558\ub2e4. \uc720\uc9c0\ubcf4\uc218\ud558\uae30 \uc88b\ub2e4. \ubd80\uc815(negation)\uc744 \uc0ac\uc6a9\ud574 \uc11c\ub85c \ub300\ube44\ub418\ub294 \uc694\uad6c\uc0ac\ud56d\uc744 \uac00\uc9c0\ub294 \ud568\uc218\ub4e4\uc740 \ubbff\uace0 \uc4f0\uae30 \uc5b4\ub835\ub2e4(brittle).","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_7","text":"\ucc98\uc74c\uc5d0\ub294, \uc0ac\ub78c\ub4e4\uc774 \ubcf4\uc644\uc801\uc778 \uc694\uad6c\uc0ac\ud56d\uc744 \uac00\uc9c4 \ud568\uc218\ub97c \uc815\uc758\ud558\ub824\uace0 \ud560 \uac83\uc774\ub2e4: template < typename T > requires ! C < T > // bad void f (); template < typename T > requires C < T > void f (); \uc544\ub798 \ucf54\ub4dc\uac00 \ub354 \ub0ab\ub2e4: template < typename T > // general template void f (); template < typename T > // specialization by concept requires C < T > void f (); C<T> \uac00 \ub9cc\uc871\ub418\uc9c0 \uc54a\uc744 \ub54c\ub9cc \ucef4\ud30c\uc77c\ub7ec\ub294 \uc81c\ud55c\uc870\uac74\uc774 \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc744 \uc120\ud0dd\ud560 \uac83\uc774\ub2e4. \uc81c\uc57d\uc870\uac74\uc774 \uc5c6\ub294 f() \ub97c \uc815\uc758\ud558\uace0 \uc2f6\uc9c0 \uc54a\ub2e4\uba74 \uadf8\ub0e5 \uc5c6\uc560\ub77c. template < typename T > void f () = delete ; \ucef4\ud30c\uc77c\ub7ec\ub294 \uc624\ubc84\ub85c\ub4dc\ub41c \ud568\uc218\ub97c \uc120\ud0dd\ud560 \uac83\uc774\uace0 \uc801\ub2f9\ud55c \uc5d0\ub7ec\ub97c \ub0bc \uac83\uc774\ub2e4.","title":"Example (using TS concepts)"},{"location":"Templates/#note_19","text":"\ubd88\ud589\ud558\uac8c\ub3c4 enable_if \ub97c \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc\uc5d0\uc11c \uc11c\ub85c \ub300\ube44\ub418\ub294 \uc81c\uc57d\uc744 \uc790\uc8fc \ud655\uc778\ud560 \uc218 \uc788\ub2e4: template < typename T > enable_if <! C < T > , void > // bad f (); template < typename T > enable_if < C < T > , void > f ();","title":"Note"},{"location":"Templates/#note_20","text":"Complementary requirements on one requirements is sometimes (wrongly) considered manageable. However, for two or more requirements the number of definitions needs can go up exponentially (2,4,9,16,...): C1<T> && C2<T> !C1<T> && C2<T> C1<T> && !C2<T> !C1<T> && !C2<T> Now the opportunities for errors multiply.","title":"Note"},{"location":"Templates/#enforcement_13","text":"C<T> , !C<T> \ub97c \uac19\uc774 \uac00\uc9c4 \ud568\uc218\ub4e4\uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \uc815\ubc18\ub300 \uc81c\uc57d\uc870\uac74\uc774 \uc788\ub2e4\uba74 \ubaa8\ub450 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Templates/#t26","text":"","title":"T.26: \ub2e8\uc21c\ud55c \ubb38\ubc95\ubcf4\ub2e4\ub294 \uc0ac\uc6a9 \ud328\ud134\uc744 \uace0\ub824\ud574\uc11c \ucee8\uc149\uc744 \uc815\uc758\ud558\ub77c"},{"location":"Templates/#reason_15","text":"\uc815\uc758\uac00 \ub354 \uc77d\uae30 \uc27d\uace0 \uc0ac\uc6a9\uc790\uac00 \uc791\uc131\ud558\uace0 \uc2f6\uc740 \uac83\uacfc \uc9c1\uc811\uc801\uc73c\ub85c \uc77c\uce58\ud55c\ub2e4. \ud615\ubcc0\ud658\ub3c4 \uace0\ub824\ud574\uc57c \ud55c\ub2e4. \ubaa8\ub4e0 \ud0c0\uc785\ud2b9\uc131\uc758 \uc774\ub984\uc744 \uae30\uc5b5\ud560 \ud544\uc694\uac00 \uc5c6\ub2e4.","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_8","text":"Equality \ub97c \uc544\ub798\ucc98\ub7fc \uc815\uc758\ud558\uace0 \uc2f6\uc744 \uac83\uc774\ub2e4: template < typename T > concept Equality = has_equal < T > && has_not_equal < T > ; \ud45c\uc900\uc5d0\uc11c EqualityComparable \uc744 \uc9c0\uc6d0\ud558\ub294\uac8c \ub354 \ub0ab\uace0 \uc26c\uc6b8 \uac83\uc774\ub77c\ub294 \uc810\uc740 \uba85\ubc31\ud558\ub2e4. \ud558\uc9c0\ub9cc - \uc608\ub97c \ub4e4\uc5b4 - \uadf8\ub7f0 \ucee8\uc149\uc744 \uc815\uc758\ud574\uc57c \ud55c\ub2e4\uba74: template < typename T > concept Equality = requires ( T a , T b ) { bool == { a == b } bool == { a != b } // axiom { !(a == b) == (a != b) } // axiom { a = b; => a == b } // => means \"implies\" } Equality \uc758 \uc815\uc758 \uc548\uc5d0 \ubb34\uc758\ubbf8\ud55c \ucee8\uc149\uc778 has_equal \uc640 has_not_equal 2\uac1c\ub97c \uc815\uc758\ud558\ub294 \uac83 \ub300\uc2e0\uc5d0, \uc704\uc640 \uac19\uc740 \ud615\ud0dc\ub97c \uc9c0\ud5a5\ud558\ub77c. \uc5ec\uae30\uc11c \"\ubb34\uc758\ubbf8\ud55c\"\uc774\ub780 has_equal \uc758 \uc758\ubbf8\uad6c\uc870\ub97c \ub3c5\ub7fd\uc801\uc73c\ub85c(in isolation) \uc815\uc758\ud560 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.","title":"Example (using TS concepts)"},{"location":"Templates/#enforcement_14","text":"???","title":"Enforcement"},{"location":"Templates/#template-interfaces","text":"\uc9c0\ub09c \uc218\ub144\ub3d9\uc548, \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud55c \ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ud15c\ud50c\ub9bf\uc758 \uc778\ud130\ud398\uc774\uc2a4\uc640 \uad6c\ud604\uc744 \ubd84\uba85\ud788 \uad6c\ubd84\ud558\uc9c0 \uc54a\uc544 \uace0\ud1b5\ubc1b\uc558\ub2e4. \ucee8\uc149 \uc774\uc804\uc5d0\ub294, \uc774 \uad6c\ubd84\uc744 \uc704\ud55c \uc5b8\uc5b4\ucc28\uc6d0\uc758 \uc9c0\uc6d0\uc774 \uc5c6\uc5c8\ub2e4. \uadf8\ub7ec\ub098 \ud15c\ud50c\ub9bf\uc5d0 \ub300\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub294 \ub9e4\uc6b0 \uc911\uc694\ud55c \uac1c\ub150- \uc0ac\uc6a9\uc790\uc640 \uad6c\ud604\uc790\uac04\uc758 \uacc4\uc57d -\uc774\uace0, \ub9c8\ub545\ud788 \uc2e0\uc911\ud558\uac8c \uc124\uacc4\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":" \ud15c\ud50c\ub9bf \uc778\ud130\ud398\uc774\uc2a4(Template Interfaces)"},{"location":"Templates/#t40-operation","text":"","title":"T.40: \uc54c\uace0\ub9ac\uc998\uc5d0 \uc5f0\uc0b0(operation)\uc744 \uc804\ub2ec\ud560\ub54c\ub294 \ud568\uc218 \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_16","text":"\ud568\uc218 \uac1c\ucc44(function object)\ub294 \ud568\uc218\uc5d0 \ub300\ud55c \"\ub2e8\uc21c\" \ud3ec\uc778\ud130\uc5d0 \ube44\ud574 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ud1b5\ud574 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc804\ub2ec\ud560 \uc218 \uc788\ub2e4. \ubcf4\ud1b5\uc740 \ud568\uc218 \uac1c\uccb4\ub97c \uc804\ub2ec\ud558\ub294 \uac83\uc774 \ud568\uc218 \ud3ec\uc778\ud130\uc5d0 \ube44\ud574 \ub354 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc778\ub2e4.","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_9","text":"bool greater ( double x , double y ) { return x > y ; } sort ( v , greater ); // pointer to function: potentially slow sort ( v , []( double x , double y ) { return x > y ; }); // function object sort ( v , std :: greater <> ); // function object bool greater_than_7 ( double x ) { return x > 7 ; } auto x = find_if ( v , greater_than_7 ); // pointer to function: inflexible auto y = find_if ( v , []( double x ) { return x > 7 ; }); // function object: carries the needed data auto z = find_if ( v , Greater_than < double > ( 7 )); // function object: carries the needed data \ubb3c\ub860 \uc800\ub7f0 \ud568\uc218\ub4e4\uc744 auto \ub610\ub294 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud574\uc11c \uc77c\ubc18\ud654 \ud560 \uc218 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4: auto y1 = find_if ( v , []( Ordered x ) { return x > 7 ; }); // Ordered \ucee8\uc149\uc744 \ub9cc\uc871\ud558\ub294 \ud0c0\uc785 auto z1 = find_if ( v , []( auto x ) { return x > 7 ; }); // \ud574\ub2f9 \ud0c0\uc785\uc774 > \uc5f0\uc0b0\uc790\ub97c \uc9c0\uc6d0\ud558\uae30\ub97c \uae30\ub300\ud55c\ub2e4","title":"Example (using TS concepts)"},{"location":"Templates/#note_21","text":"\ub78c\ub2e4 \ud45c\ud604\uc2dd\uc740 \ud568\uc218\uac1c\uccb4\ub97c \uc0dd\uc131\ud55c\ub2e4.","title":"Note"},{"location":"Templates/#note_22","text":"\uc131\ub2a5\ubb38\uc81c\ub294 \ucef4\ud30c\uc77c\ub7ec, \ucd5c\uc801\ud654 \uae30\uc220\uc5d0 \ub2ec\ub824\uc788\ub2e4.","title":"Note"},{"location":"Templates/#enforcement_15","text":"\ud568\uc218 \ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \ud3ec\uc778\ud130\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \ud15c\ud50c\ub9bf\uc5d0 \ud568\uc218 \ud3ec\uc778\ud130\uac00 \uc778\uc790\ub85c \uc804\ub2ec\ub41c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 (false positive\uc758 \uc704\ud5d8\uc774 \uc788\ub2e4)","title":"Enforcement"},{"location":"Templates/#t41-property","text":"","title":"T.41: \ud15c\ud50c\ub9bf\uc758 \ucee8\uc149\uc5d0\uc11c\ub294 \uc624\uc9c1 \ud544\uc694\ud55c \ud2b9\uc131(property)\ub9cc \uc694\uad6c\ud558\ub77c"},{"location":"Templates/#reason_17","text":"\ud15c\ud50c\ub9bf\uc774 \uc27d\uace0 \uc548\uc815\uc801\uc778 \uc0c1\ud0dc\ub85c \uc720\uc9c0\ub41c\ub2e4.","title":"Reason"},{"location":"Templates/#example-using-ts-concepts_10","text":"\uc774\ub7f0 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574\ubcf4\ub77c, sort \ub294 (\uc880 \uc2ec\ud558\uac8c \ub2e8\uc21c\ud558\uc9c0\ub9cc) \ub514\ubc84\uae45 \uc9c0\uc6d0\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub2e4: void sort ( Sortable & s ) // sort sequence s { if ( debug ) cerr << \"enter sort( \" << s << \") \\n \" ; // ... if ( debug ) cerr << \"exit sort( \" << s << \") \\n \" ; } \uc544\ub798\ucc98\ub7fc \ub2e4\uc2dc \uc791\uc131\ub418\uc5b4\uc57c \ud55c\ub2e4: template < Sortable S > requires Streamable < S > void sort ( S & s ) // sort sequence s { if ( debug ) cerr << \"enter sort( \" << s << \") \\n \" ; // ... if ( debug ) cerr << \"exit sort( \" << s << \") \\n \" ; } \uacb0\ub860\uc801\uc73c\ub85c Sortable \uc5d0\ub294 iostream \uc744 \uc9c0\uc6d0\ud55c\ub2e4\ub294 \uc694\uad6c\uc0ac\ud56d\uc774 \uc804\ud600 \uc5c6\ub2e4\ub294 \uac83\uc774\ub2e4. \ubc18\ub300\ub85c \ub9d0\ud574, \uc815\ub82c\uc774\ub77c\ub294 \uac1c\ub150\uc740 \ub514\ubc84\uae45\uacfc\ub294 \uc644\uc804\ud788 \ubb34\uad00\ud558\ub2e4.","title":"Example (using TS concepts)"},{"location":"Templates/#note_23","text":"\uc218\ud589\ud558\ub294 \ubaa8\ub4e0 \ucc98\ub9ac(operation)\ub97c \uc694\uad6c\uc0ac\ud56d\uc73c\ub85c \ub098\uc5f4\ud558\uba74, \uadf8 \uc778\ud130\ud398\uc774\uc2a4\ub294 \ubd88\uc548\uc815\ud558\uac8c \ub41c\ub2e4: \ub514\ubc84\uae45 \uad00\ub828 \uae30\ub2a5\uc744 \ubcc0\uacbd\ud558\uac70\ub098, \uc0ac\uc6a9 \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uac70\ub098, \ud14c\uc2a4\ud2b8\ub97c \uc9c0\uc6d0\ud558\uac70\ub098, \uc624\ub958\ub97c \ubcf4\uace0\ud558\uac70\ub098 \ub4f1\ub4f1 \ud15c\ud50c\ub9bf\uc758 \uc815\uc758\uac00 \ubc14\ub00c\uace0 \ud574\ub2f9 \ud15c\ud50c\ub9bf\uc758 \ubaa8\ub4e0 \uc0ac\uc6a9\ucf54\ub4dc\uac00 \ub2e4\uc2dc \ucef4\ud30c\uc77c\ub418\uc5b4\uc57c \ud560 \uac83\uc774\ub2e4. \uc774\ub294 \ub2e4\ub8e8\uae30 \ud798\ub4e0 \ubb38\uc81c\uace0, \uc5b4\ub5a4 \ud658\uacbd\uc5d0\uc11c\ub294 \ud604\uc2e4\uc801\uc774\uc9c0 \uc54a\ub2e4. \ubc18\ub300\ub85c, \ucee8\uc149\uc744 \uc0ac\uc6a9\ud55c \uac80\uc0ac\ub97c \ubcf4\uc7a5\ud558\uc9c0 \uc54a\ub294 \uad6c\ud604\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74, \ucef4\ud30c\uc77c \uc2dc\uac04 \uc624\ub958\ub97c \ub4a4\ub2a6\uac8c \ud655\uc778\ud558\uac8c \ub420 \uac83\uc774\ub2e4. \ud544\uc218\uc801\uc774\uc9c0 \uc54a\uc740 \ud15c\ud50c\ub9bf \uc2e4\ud589\uc778\uc790\ub4e4\uc758 \uc18d\uc131\uc744 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud574 \uac80\uc0ac\ud558\uc9c0 \uc54a\ub294 \uacbd\uc6b0, \uc774\ub294 \uc2e4\uccb4\ud654 \uc2dc\uac04\uae4c\uc9c0 \uac80\uc0ac\ub97c \ubbf8\ub8e8\uac8c \ub41c\ub2e4. \uc6b0\ub9ac\ub294 \uc774 \ubc29\uc2dd\uc774 \uadf8\ub7f4\ub9cc\ud55c \uac00\uce58\uac00 \uc788\ub294 \ud0c0\ud611(worthwhile tradeoff)\uc774\ub77c\uace0 \uc0dd\uac01\ud55c\ub2e4. \uc9c0\uc5ed\uc801\uc774\uc9c0 \uc54a\uace0, \uc758\uc874\uc801\uc774\uc9c0 \uc54a\uc740 \uc774\ub984\ub4e4\uc744( debug \ub098 cerr \uac19\uc740) \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ubb38\ub9e5 \uc758\uc874\uc801\uc778 \ucf54\ub4dc\ub97c \ub0b3\uace0, \uc774\ub294 \"\uc6d0\uc778\uc774 \ubd84\uba85\ud558\uc9c0 \uc54a\uc740(mysterious)\" \uc624\ub958\ub4e4\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\ub77c.","title":"Note"},{"location":"Templates/#note_24","text":"\ud0c0\uc785\uc758 \uc5b4\ub5a4 \uc18d\uc131\uc774 \ud544\uc218\uc801\uc778\uc9c0 \uacb0\uc815\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4.","title":"Note"},{"location":"Templates/#enforcement_16","text":"???","title":"Enforcement"},{"location":"Templates/#t42","text":"","title":"T.42: \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc744 \uad6c\ud604\uc0ac\ud56d\uc744 \uc228\uae30\uac70\ub098 \ud45c\uae30\ub97c \uac04\ub2e8\ud788 \ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_18","text":"\uac00\ub3c5\uc131\uc744 \uc88b\uac8c \ud558\uba70, \uad6c\ud604 \ub0b4\uc6a9(implementation detail)\uc744 \uc228\uae34\ub2e4. \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc740 \ud0c0\uc785\uc744 \uacc4\uc0b0\ud558\uae30 \uc704\ud55c \ub9ce\uc740 \ud2b9\uc131(traits)\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc744 \ub300\uccb4\ud574\uc900\ub2e4. \ud0c0\uc785 \ud2b9\uc131\uc744 \uc228\uae30\uae30 \uc704\ud574 \uc4f0\uc77c \uc218\ub3c4 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_8","text":"template < typename T , size_t N > class Matrix { // ... using Iterator = typename std :: vector < T >:: iterator ; // ... }; Matrix \uc0ac\uc6a9\uc790\ub4e4\uc774 \uadf8 \uc694\uc18c\uac00 vector \uc5d0 \uc800\uc7a5\ub418\ub294 \uc810\uc744 \uc54c \ud544\uc694\uac00 \uc5c6\uac8c \ud55c\ub2e4. \ubc18\ubcf5\uc801\uc73c\ub85c typename std::vector<T>:: \ub97c \ud0c0\uc774\ud551\ud558\ub294 \uac83\uc744 \uc904\uc5ec\uc900\ub2e4.","title":"Example"},{"location":"Templates/#example_9","text":"template < typename T > void user ( T & c ) { // ... typename container_traits < T >:: value_type x ; // bad, verbose // ... } template < typename T > using value_type = typename container_traits < T >:: value_type ; \uc774\uac83\uc740 value_type \uc744 \uc4f0\ub294 \uc0ac\uc6a9\uc790\uac00 value_type \uc758 \uad6c\ud604\uc744 \uc54c \ud544\uc694\uac00 \uc5c6\uac8c \ud55c\ub2e4. template < typename T > void user2 ( T & c ) { // ... value_type < T > x ; // ... }","title":"Example"},{"location":"Templates/#note_25","text":"\uac04\ub2e8\ud558\uace0 \uc77c\ubc18\uc801\uc778 \uc0ac\uc6a9\uc740 \"\ud2b9\uc131(traits)\uc73c\ub85c \uac10\uc2f8\ub77c!\"\ub77c\uace0 \ud560 \uc218 \uc788\uaca0\ub2e4","title":"Note"},{"location":"Templates/#enforcement_17","text":"using \uc73c\ub85c \uc120\uc5b8 \uc774\uc678\uc5d0 \uc911\uc758\uc131 \uc81c\uac70\uc6a9\uc73c\ub85c typename \uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 ???","title":"Enforcement"},{"location":"Templates/#t43-typedef-using","text":"","title":"T.43: \ud0c0\uc785\uc5d0 \ubcc4\uba85\uc744 \ubd99\uc77c\ub54c typedef \ubcf4\ub2e4\ub294 using\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_19","text":"\uac00\ub3c5\uc131: using \uc744 \uc0ac\uc6a9\ud558\uba74 \uc0c8 \uba85\uce6d\uc740 \uc120\uc5b8 \uc2dc\uc5d0 \ub4a4\ucabd \uc5b4\ub518\uac00\uc5d0 \uc228\uc5b4 \uc788\uae30\ubcf4\ub2e4\ub294 \uc81c\uc77c \uc55e\uc5d0 \ub098\ud0c0\ub09c\ub2e4. \uc77c\ubc18\uc131(Generality): using \uc740 \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ubc18\uba74 typedef \ub294 \ud15c\ud50c\ub9bf\uc5d0\ub294 \uc4f0\uae30 \uc5b4\ub835\ub2e4. \uc77c\ub960\uc131(Uniformity): using \uc740 \uad6c\ubb38\uc0c1 auto \uc640 \ube44\uc2b7\ud558\ub2e4.","title":"Reason"},{"location":"Templates/#example_10","text":"typedef int ( * PFI )( int ); // OK, but convoluted using PFI2 = int ( * )( int ); // OK, preferred template < typename T > typedef int ( * PFT )( T ); // error template < typename T > using PFT2 = int ( * )( T ); // OK","title":"Example"},{"location":"Templates/#enforcement_18","text":"typedef \ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c. \"\uc544\uc8fc \ub9ce\uc774\" \ub098\uc62c \uac83\uc774\ub2e4. :-(","title":"Enforcement"},{"location":"Templates/#t44-deduce","text":"","title":"T.44: (\ud560 \uc218 \uc788\ub2e4\uba74) \ud568\uc218 \ud15c\ud50c\ub9bf\uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc758 \uc778\uc790 \ud0c0\uc785\uc744 \uc720\ub3c4(deduce)\ud560 \ub54c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_20","text":"\ud15c\ud50c\ub9bf \uc778\uc790 \ud0c0\uc785\uc744 \uba85\uc2dc\uc801\uc73c\ub85c \uc4f4\ub2e4\uba74 \ubd88\ud544\uc694\ud558\uac8c \uae38\uc5b4\uc9c8 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_11","text":"tuple < int , string , double > t1 = { 1 , \"Hamlet\" , 3.14 }; // explicit type auto t2 = make_tuple ( 1 , \"Ophelia\" s , 3.14 ); // better; deduced type \ubb38\uc790\uc5f4\uc774 C \uc2a4\ud0c0\uc77c\uc774 \uc544\ub2c8\ub77c std::string \uc774\ub77c\ub294 \uac83\uc744 \ubcf4\uc7a5\ud558\uae30 \uc704\ud574 s \ub97c \ub4a4\ucabd\uc5d0 \ubd99\uc778 \uac83\uc5d0 \uc8fc\ubaa9\ud558\ub77c.","title":"Example"},{"location":"Templates/#note_26","text":"\ub2f9\uc2e0\uc774 \uac04\ub2e8\ud55c make_T \ud568\uc218\ub97c \uc791\uc131\ud558\ub4ef\uc774 \ucef4\ud30c\uc77c\ub7ec\ub3c4 \uadf8\ub807\uac8c \ud560 \uc218 \uc788\ub2e4. \uc544\ub9c8 \ubbf8\ub798\uc5d0\ub294 make_T \ud568\uc218\uac00 \ubd88\ud544\uc694\ud574\uc9c8 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Templates/#exception","text":"\ud15c\ud50c\ub9bf \uc778\uc790\ub97c \ucd94\uc815\ud560 \uc88b\uc740 \ubc29\ubc95\uc774 \uc5c6\uc5b4\uc11c \uc778\uc790\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uae30\uc220\ud560 \uc218\ub3c4 \uc788\ub2e4: vector < double > v = { 1 , 2 , 3 , 7.9 , 15.99 }; list < Record *> lst ;","title":"Exception"},{"location":"Templates/#note_27","text":"C++ 17 \uc5d0\uc11c\ub294 \uc774 \uaddc\uce59\ucc98\ub7fc \ud15c\ud50c\ub9bf \uc778\uc790\ub4e4\uc744 \uc0dd\uc131\uc790\uc758 \uc2e4\ud589 \uc778\uc790\ub4e4\ub85c\ubd80\ud130 \ubc14\ub85c \uc720\ub3c4\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\uace0 \uc788\ub2e4. Template parameter deduction for constructors (Rev. 3) . \uc608\ub97c \ub4e4\uc5b4: tuple t1 = { 1 , \"Hamlet\" s , 3.14 }; // deduced: tuple<int, string, double>","title":"Note"},{"location":"Templates/#enforcement_19","text":"\uba85\uc2dc\uc801\uc73c\ub85c \ud2b9\uc218\ud654\ub41c \ud0c0\uc785\uc774 \uc0ac\uc6a9\ub41c \uc778\uc790\ub4e4\uc758 \ud0c0\uc785\uacfc \uc815\ud655\ud788 \uc77c\uce58\ud558\ub294 \ubd80\ubd84\uc744 \uc9c0\uc801\ud558\ub77c.","title":"Enforcement"},{"location":"Templates/#t46-regular-semiregular","text":"","title":"T.46: \ud15c\ud50c\ub9bf \uc778\uc790\ub4e4\uc740 \ucd5c\uc18c\ud55c Regular\ud639\uc740 SemiRegular\ud558\ub3c4\ub85d \ud558\ub77c"},{"location":"Templates/#reason_21","text":"\uac00\ub3c5\uc131. \ub73b\ud558\uc9c0 \uc54a\uc740 \uc624\ub958\ub97c \uc608\ubc29\ud55c\ub2e4. \ub300\ubd80\ubd84\uc758 \ud0c0\uc785\ub4e4\uc774 \uc774\ub97c \uc9c0\uc6d0\ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example_12","text":"class X { // ... public : explicit X ( int ); X ( const X & ); // copy X operator = ( const X & ); X ( X && ) noexcept ; // move X & operator = ( X && ) noexcept ; ~ X (); // ... no more constructors ... }; X x { 1 }; // fine X y = x ; // fine std :: vector < X > v ( 10 ); // error: no default constructor","title":"Example"},{"location":"Templates/#note_28","text":"SemiRegular \ud0c0\uc785\uc740 \uae30\ubcf8\uc0dd\uc131\uc774 \uac00\ub2a5\ud558\ub2e4.","title":"Note"},{"location":"Templates/#enforcement_20","text":"\ud15c\ud50c\ub9bf\uc758 \uc778\uc790\uac00 SemiRegular \ud558\uc9c0 \uc54a\uc73c\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Templates/#t47","text":"","title":"T.47: \uc77c\ubc18\uc801\uc778 \uc774\ub984\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74\uc11c \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\uace0 \uc81c\uc57d\uc774 \uac70\uc758 \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc740 \uc9c0\uc591\ud558\ub77c"},{"location":"Templates/#reason_22","text":"\uc81c\uc57d\ud558\uc9c0 \uc54a\uc740 \ud15c\ud50c\ub9bf \uc778\uc790\ub294 \uc5b4\ub5a4 \ud0c0\uc785\ub3c4 \ub4e4\uc5b4\ub9de\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c \uadf8\ub7f0 \ud15c\ud50c\ub9bf\ub4e4\uc774 \uc57d\uac04\uc758 \ubcc0\ud658\uc774 \ud544\uc694\ud55c \ud0c0\uc785\ub4e4\uc5d0 \uc801\uc6a9\ub418\uc5b4\ubc84\ub9b4 \uc218 \uc788\ub2e4. \uc774\ub294 ADL(Argument Dependent Lookup)\uc774 \uc0ac\uc6a9\ub418\uc5c8\uc744\ub54c \ud2b9\ud788 \uc9dc\uc99d\ub098\uace0 \uc704\ud5d8\ud55c \ucf54\ub4dc\uac00 \ub41c\ub2e4. \uc77c\ubc18\uc801\uc778 \uc774\ub984(common name)\uc774 \uc0ac\uc6a9\ub418\uba74 \uc774 \ubb38\uc81c\uac00 \ub354 \uc790\uc8fc \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_13","text":"namespace Bad { struct S { int m ; }; template < typename T1 , typename T2 > bool operator == ( T1 , T2 ) { cout << \"Bad \\n \" ; return true ; } } namespace T0 { bool operator == ( int , Bad :: S ) { // compare to int cout << \"T0 \\n \" ; return true ; } void test () { Bad :: S bad { 1 }; vector < int > v ( 10 ); bool b = 1 == bad ; bool b2 = v . size () == bad ; } } \uc774 \ucf54\ub4dc\ub294 T0 \uc640 Bad \ub97c \ucd9c\ub825\ud55c\ub2e4. \uc5ec\uae30\uc11c Bad \uc5d0 \uc788\ub294 == \uc911\ubcf5\uc815\uc758\uac00 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0a4\uace0 \uc788\ub2e4, \uc2e4\uc81c \ucf54\ub4dc\uc5d0\uc11c \ubb38\uc81c\ub97c \ub208\uce58\ucc4c \uc218 \uc788\uc5c8\ub294\uac00? \ubb38\uc81c\ub294 v.size() \uac00 unsigned \uc815\uc218\ub97c \ubc18\ud658\ud558\uace0, \uc774\uac83\uc774 \ud0c0\uc785 \ubcc0\ud658\uc744 \ud544\uc694\ub85c\ud558\ub294 \uc9c0\uc5ed == \ub300\uc2e0 \ud0c0\uc785\ubcc0\ud658\uc774 \ud544\uc694 \uc5c6\ub294 Bad \uc758 == \ub97c \uc120\ud0dd\ud558\ub3c4\ub85d \ud55c\ub2e4\ub294 \uac83\uc774\ub2e4. \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubc18\ubcf5\uc790\uac19\uc740 \ud604\uc2e4\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ud0c0\uc785(realistic type)\ub4e4\uc740 \uc774\ub7f0 \ubc18-\uc0ac\ud68c\uc801\uc778 \uae30\uc220\ub4e4\uc744 \uae08\ud558\ub3c4\ub85d \ub9cc\ub4e4 \uc218 \uc788\ub2e4.","title":"Example"},{"location":"Templates/#note_29","text":"\uac19\uc740 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \uc81c\uc57d\uc5c6\ub294 \ud15c\ud50c\ub9bf\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4\uba74, \uadf8 \ud15c\ud50c\ub9bf\uc740 ADL\uc5d0 \uc758\ud574\uc11c (\uc608\uc81c\uc5d0\uc11c \ubc1c\uc0dd\ud55c \uac83\ucc98\ub7fc) \ubc1c\uacac\ub420 \uac83\uc774\ub2e4. \uc774 \ub9d0\uc778 \uc989, \uadf8 \ud15c\ud50c\ub9bf\uc774 \uc27d\uac8c \ucc3e\uc744 \uc218 \uc788\ub2e4(highly visible)\ub294 \uac83\uc774\ub2e4.","title":"Note"},{"location":"Templates/#note_30","text":"\uc774 \uaddc\uce59\uc740 \ud544\uc218\uac00 \ub418\uc5b4\uc120 \uc548\ub41c\ub2e4. \ud558\uc9c0\ub9cc \ud45c\uc900 \uc704\uc6d0\ud68c\uc5d0\uc11c\ub294 ADL\uc5d0\uc11c \uc81c\uc57d \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc744 \uc81c\uc678\ud558\ub294\uac83\uc5d0 \ub3d9\uc758\ud558\uc9c0 \uc54a\ub294\ub2e4. \ubd88\ud589\ud558\uac8c\ub3c4 \uc774 \uaddc\uce59\uc774 \ub9ce\uc740 false positives\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4; \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc218\ub9ce\uc740 \uc81c\uc57d \uc5c6\ub294 \ud15c\ud50c\ub9bf\uc740 \ud558\ub098\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4( std )\uc5d0 \ubc30\uce58\ud568\uc73c\ub85c\uc368 \uc774 \uaddc\uce59\uc744 \uad11\ubc94\uc704\ud558\uac8c \uc704\ubc18\ud55c\ub2e4.","title":"Note"},{"location":"Templates/#enforcement_21","text":"\ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \uad6c\uccb4\uc801\uc778 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\ub294 \ud15c\ud50c\ub9bf\uc774 \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4. (\ucee8\uc149\uc774 \uac00\ub2a5\ud574\uc9c0\uae30 \uc804\uae4c\uc9c0\ub294 \ud604\uc2e4\uc801\uc73c\ub85c \uc2e4\ud589\ud558\uae30 \uc5b4\ub824\uc6b8 \uc218 \uc788\ub2e4)","title":"Enforcement"},{"location":"Templates/#t48-enable_if","text":"","title":"T.48: \ucef4\ud30c\uc77c\ub7ec\uac00 \ucee8\uc149\uc744 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 enable_if\ub85c \uc720\uc0ac\ud558\uac8c \uc791\uc131\ud558\ub77c"},{"location":"Templates/#reason_23","text":"\ucee8\uc149 \uc9c0\uc6d0\uc774 \uc5c6\ub294 \uc0c1\ud669\uc5d0\uc11c \ucd5c\uc120\uc774\ub2e4. enable_if \ub294 \uc870\uac74\uc5d0 \ub530\ub77c \ud568\uc218\ub97c \uc815\uc758\ud558\uac70\ub098 \uc5ec\ub7ec \ud568\uc218 \uc911 \ud558\ub098\ub97c \uc120\ud0dd\ud560\ub54c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_14","text":"enable_if<???>","title":"Example"},{"location":"Templates/#note_31","text":"complementary constraints \uc5d0 \uc720\uc758\ud558\ub77c. \ucee8\uc149 \uc624\ubc84\ub85c\ub529\uc744 enable_if \ub85c \uafb8\ubbf8\ub294(fake) \uac83\uc740 \uc624\ub958\uc5d0 \ucde8\uc57d\ud55c \uc124\uacc4 \uae30\ubc95\uc744 \uc4f0\ub3c4\ub85d \ud560 \uc218\ub3c4 \uc788\ub2e4.","title":"Note"},{"location":"Templates/#enforcement_22","text":"???","title":"Enforcement"},{"location":"Templates/#t49","text":"\uc5ed\uc8fc : \ud0c0\uc785 \uc81c\uac70(type-erasure)","title":"T.49: \uac00\ub2a5\ud558\ub2e4\uba74 \ud0c0\uc785 \uc81c\uac70\ub294 \ud53c\ud558\ub77c"},{"location":"Templates/#reason_24","text":"\ud0c0\uc785 \uc81c\uac70\ub294 \uc11c\ub85c \ub2e4\ub978 \ucef4\ud30c\uc77c \ubc94\uc704\ub85c \uc804\ub2ec\ub418\ub294 \ud0c0\uc785 \uc815\ubcf4\uac00 \uc5c6\uc5b4\uc9c0\ubbc0\ub85c \ud2b9\ubcc4\ud55c \uac04\uc811\ud6a8\uacfc\uac00 \ubc1c\uc0dd\ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example_15","text":"???","title":"Example"},{"location":"Templates/#exception_1","text":"std::function \uc640 \uac19\uc740 \uacbd\uc6b0\ucc98\ub7fc \ub54c\ub85c\ub294 \ud0c0\uc785\uc81c\uac70\uac00 \uc801\uc808\ud560 \uc218 \uc788\ub2e4.","title":"Exception"},{"location":"Templates/#enforcement_23","text":"???","title":"Enforcement"},{"location":"Templates/#note_32","text":"???","title":"Note"},{"location":"Templates/#tdef-template-definitions","text":"\ud15c\ud50c\ub9bf \uc815\uc758 (\ud074\ub798\uc2a4 \ud639\uc740 \ud568\uc218)\ub294 \uc784\uc758\uc758 \ucf54\ub4dc\ub97c \ud3ec\ud568\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, C++ \ud504\ub85c\uadf8\ub798\ubc0d \uae30\uc220\uc5d0 \ub300\ud55c \uc885\ud569\uc801\uc778 \uc124\uba85\ub9cc\uc774 \uc774 \ub0b4\uc6a9\uc744 \ub2e4\ub8ec\ub2e4. \uc774 \ubd80\ubd84\uc5d0\uc11c\ub294 \ud2b9\ubcc4\ud55c \ud15c\ud50c\ub9bf \uad6c\ud604, \ud2b9\ud788, \uadf8 \ucf54\ub4dc\uc758 \ubb38\ub9e5\uc5d0 \uc758\uc874\ud558\ub294 \ud15c\ud50c\ub9bf \uc815\uc758\uc5d0 \ub300\ud574 \uc911\uc810\uc801\uc73c\ub85c \ub2e4\ub8f0 \uac83\uc774\ub2e4.","title":"T.def: \ud15c\ud50c\ub9bf \uc815\uc758(Template definitions)"},{"location":"Templates/#t60","text":"","title":"T.60: \ubb38\ub9e5\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c8 \uc218 \uc788\ub294 \ud15c\ud50c\ub9bf\uc740 \ucd5c\uc18c\ud654 \ud558\ub77c"},{"location":"Templates/#reason_25","text":"\uc774\ud574\uac00 \uc27d\ub2e4. \uc608\uc0c1\uce58 \ubabb\ud55c \uc758\uc874\uc131 \uc624\ub958 \ubc1c\uc0dd\uc744 \ucd5c\uc18c\ud654. \ud234 \uc791\uc131\uc744 \uc27d\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example_16","text":"template < typename C > void sort ( C & c ) { std :: sort ( begin ( c ), end ( c )); // \ud544\uc694\ud558\uace0 \uc2e4\uc6a9\uc801\uc778 \uc758\uc874\uc131 } template < typename Iter > Iter algo ( Iter first , Iter last ) { for (; first != last ; ++ first ) { auto x = sqrt ( * first ); // \uc7a0\uc7ac\uc801 \uc758\uc874\uc131: \uc5b4\ub5a4 sqrt\ub97c \uc758\ubbf8\ud558\ub294 \uac83\uc778\uac00? helper ( first , x ); // \uc7a0\uc7ac\uc801 \uc758\uc874\uc131: // helper\ub294 first\uc640 x\uc5d0 \uc758\ud574\uc11c \uacb0\uc815\ub41c\ub2e4 TT var = 7 ; // \uc7a0\uc7ac\uc801 \uc758\uc874\uc131: TT \ub294 \uc5b4\ub5a4 \ud0c0\uc785 \uc758\ubbf8\ud558\ub294\uac00? } }","title":"Example"},{"location":"Templates/#note_33","text":"\ud15c\ud50c\ub9bf\ub4e4\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ud5e4\ub354 \ud30c\uc77c\ub4e4\uc5d0 \uc815\uc758\ub418\uae30 \ub54c\ubb38\uc5d0 .cpp \ud30c\uc77c\uc5d0\uc11c #include \uc21c\uc11c\uc758 \uc601\ud5a5\uc744 \ubc1b\uc744 \uc18c\uc9c0\uac00 \ub354 \ud06c\ub2e4(more vulnerable).","title":"Note"},{"location":"Templates/#note_34","text":"\uc778\uc790\ub9cc\uc744 \uc0ac\uc6a9\ud574\uc11c \ud15c\ud50c\ub9bf\uc744 \ub3d9\uc791\ud558\uac8c \ud558\ub294 \uac83\uc774 \uc758\uc874\ub3c4\ub97c \ucd5c\uc18c\ud55c\uc73c\ub85c \uc904\uc77c \uc218 \uc788\ub294 \ud55c\uac00\uc9c0 \ubc29\ubc95\uc778\ub370 \uc77c\ubc18\uc801\uc73c\ub85c\ub294 \ud798\ub4e4\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub2e4\ub978 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\ub294 \ud55c \uc54c\uace0\ub9ac\uc998\uc740 \uc2e4\ud589 \uc778\uc790\ub9cc \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \ub9e4\ud06c\ub85c\ub97c \uc0ac\uc6a9\ud558\uac8c \ud558\uc9c0 \ub9d0\ub77c!","title":"Note"},{"location":"Templates/#see-also_1","text":"T.69","title":"See also"},{"location":"Templates/#enforcement_24","text":"??? \uae4c\ub2e4\ub86d\ub2e4(Tricky)","title":"Enforcement"},{"location":"Templates/#t61-scary","text":"","title":"T.61: \ub108\ubb34 \ub9ce\uc740 \uba64\ubc84\ub97c \ub9e4\uac1c\ubcc0\uc218\ud654 \ud558\uc9c0 \ub9d0\ub77c (SCARY)"},{"location":"Templates/#reason_26","text":"\ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\ub85c \uc4f0\uc774\uc9c0 \uc54a\ub294 \uba64\ubc84\ub294 \uad6c\uccb4\uc801\uc778 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\ub97c \uc81c\uc678\ud558\uace0 \uc0ac\uc6a9\ub420 \uc218 \uc5c6\ub2e4. \uc774\ub294 \ubcf4\ud1b5 \ud15c\ud50c\ub9bf \uc0ac\uc6a9\uc744 \uc81c\ud55c\ud558\uace0 \ucf54\ub4dc \uc0ac\uc774\uc988\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.","title":"Reason"},{"location":"Templates/#example-bad_2","text":"template < typename T , typename A = std :: allocator {} > // requires Regular<T> && Allocator<A> class List { public : struct Link { // does not depend on A T elem ; T * pre ; T * suc ; }; using iterator = Link * ; iterator first () const { return head ; } // ... private : Link * head ; }; List < int > lst1 ; List < int , My_allocator > lst2 ; \uc544\ubb34 \ubb38\uc81c \uc5c6\uc5b4 \ubcf4\uc778\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ucf54\ub4dc\uc5d0\uc11c Link \ub294 allocator\uc5d0 \uc885\uc18d\uc801\uc774\ub2e4(\ube44\ub85d allocator\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub354\ub77c\ub3c4). \uc774\ub7f0 \ucf54\ub4dc\ub294 \uc911\ubcf5\uc801\uc778 \uc2e4\uccb4\ud654(instantiation)\uac00 \ubc1c\uc0dd\ud558\ub3c4\ub85d \uac15\uc81c\ud558\uace0, \uc2e4\uc81c \uc0ac\ub840\uc5d0\uc11c\ub294 \uc0dd\uac01 \uc774\uc0c1\uc758 \ube44\uc6a9\uc744 \ubc1c\uc0dd\uc2dc\ud0ac \uc218 \uc788\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c, \uc774\uc5d0 \ub300\ud55c \ud574\uacb0\ucc45\uc740 \ucd5c\uc18c\ud55c\uc758 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\ub85c \ub0b4\ud3ec\ub41c \ud074\ub798\uc2a4(nested class)\ub97c \ubd84\ub9ac\ud558\ub294 \uac83\uc774\ub2e4. template < typename T > struct Link { T elem ; T * pre ; T * suc ; }; template < typename T , typename A = std :: allocator {} > // requires Regular<T> && Allocator<A> class List2 { public : using iterator = Link < T >* ; iterator first () const { return head ; } // ... private : Link * head ; }; List < int > lst1 ; List < int , My_allocator > lst2 ; \uc5b4\ub5a4 \uc774\ub4e4\uc740 Link \ud0c0\uc785\uc774 List \uc548\uc5d0 \uc228\uaca8\uc9c0\uc9c0 \uc54a\uc74c\uc73c\ub85c\uc368 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218 \ucda9\ub3cc\ub85c \uc778\ud55c \uc624\ub958\uac00 \uc0dd\uae38 \uac83 \uac19\uc9c0\ub9cc \uc2e4\uc81c\ub85c\ub294 \uc81c\ub300\ub85c \uad6c\ud604\ub41c\ub2e4\ub294 \uac83\uc744 \uc54c\uac8c \ub418\uc5c8\ub2e4. \uc774\ub7f0 \uae30\uad50(technique)\ub97c SCARY \ub77c \ud55c\ub2e4. \ud574\ub2f9 \ubb38\uc11c\uc5d0 \ub530\ub974\uba74: \"The acronym SCARY describes assignments and initializations that are Seemingly erroneous (appearing Constrained by conflicting generic parameters), but Actually work with the Right implementation (unconstrained bY the conflict due to minimized dependencies.\"","title":"Example, bad"},{"location":"Templates/#enforcement_25","text":"\uba64\ubc84 \ud0c0\uc785\uc774 \uc758\uc874\ud558\uc9c0 \uc54a\ub294 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4 \uba64\ubc84 \ud568\uc218\uac00 \uc758\uc874\ud558\uc9c0 \uc54a\ub294 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Templates/#t62","text":"","title":"T.62: \uc885\uc18d\uc801\uc774\uc9c0 \uc54a\uc740 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf \uba64\ubc84\ub4e4\uc740 \ud15c\ud50c\ub9bf\uc774 \uc544\ub2cc \uc0c1\uc704 \ud074\ub798\uc2a4\uc5d0 \ubc30\uce58\ud558\ub77c"},{"location":"Templates/#reason_27","text":"\ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218\ub97c \uba85\uc2dc\ud558\uac70\ub098 \ud15c\ud50c\ub9bf\uc744 \uc2e4\uccb4\ud654\uc2dc\ud0a4\uc9c0 \uc54a\uace0\ub3c4 \uc0c1\uc704 \ud074\ub798\uc2a4\uc758 \uba64\ubc84\ub97c \uc0ac\uc6a9\ud558\uac8c \ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example_17","text":"template < typename T > class Foo { public : enum { v1 , v2 }; // ... }; ??? struct Foo_base { enum { v1 , v2 }; // ... }; template < typename T > class Foo : public Foo_base { public : // ... };","title":"Example"},{"location":"Templates/#note_35","text":"\uc774 \uaddc\uce59\uc744 \uc880 \ub354 \uc77c\ubc18\ud654 \ud558\uc790\uba74 \"\ud15c\ud50c\ub9bf \ud074\ub798\uc2a4\uc758 \uba64\ubc84\uac00 M\uac1c\uc758 \ud15c\ud50c\ub9bf \ub9e4\uac1c\ubcc0\uc218 \uc911 N\uac1c\uc5d0 \uc758\uc874\uc801\uc774\ub77c\uba74, \uc774\ub4e4\uc740 N\uac1c\uc758 \ub9e4\uac1c\ubcc0\uc218\ub9cc\uc744 \uc0ac\uc6a9\ud558\ub294 \uae30\ubcf8 \ud074\ub798\uc2a4\uc5d0 \ubc30\uce58\ud558\ub77c\" N\uc774 1\uc77c\ub54c\ub294 T.61 \uaddc\uce59\uc744 \ucda9\uc871\ud558\ub294 \ud074\ub798\uc2a4 \uc911\uc5d0\uc11c \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \uc120\ud0dd\ud560 \uc218 \uc788\ub2e4. ??? \uc0c1\uc218\ub098 static \uba64\ubc84\ub294 \uc5b4\ub5a0\ud55c\uac00?","title":"Note"},{"location":"Templates/#enforcement_26","text":"???\ub97c \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Templates/#t64-alternative","text":"","title":"T.64: \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc758 \ub300\uc548\uc801(alternative) \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 \ud2b9\uc218\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_28","text":"\ud15c\ud50c\ub9bf\uc740 \uc77c\ubc18\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud55c \uac83\uc774\ub2e4. \ud2b9\uc218\ud654(specialization)\ub294 \uadf8 \uc778\ud130\ud398\uc774\uc2a4\uc758 \ub300\uc548\uc801 \uad6c\ud604(alternative implementation)\uc744 \uc704\ud55c \uac15\ub825\ud55c \uba54\ucee4\ub2c8\uc998\uc744 \uc81c\uacf5\ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example_18","text":"??? string specialization (==) ??? representation specialization ?","title":"Example"},{"location":"Templates/#note_36","text":"???","title":"Note"},{"location":"Templates/#enforcement_27","text":"???","title":"Enforcement"},{"location":"Templates/#t65-alternative-tag-dispatch","text":"","title":"T.65: \ud568\uc218\uc758 \ub300\uc548\uc801(alternative) \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 Tag dispatch\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_29","text":"\ud15c\ud50c\ub9bf\uc740 \uc77c\ubc18\ud654\ub41c \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc815\uc758\ud55c\ub2e4 Tag dispatch\ub294 \uc2e4\ud589 \uc778\uc790\uc758 \ud0c0\uc785\uc744 \uc0ac\uc6a9\ud574\uc11c \ud2b9\uc815\ud55c \uc18d\uc131\uc5d0 \ub530\ub978 \uad6c\ud604\uc744 \uc120\ud0dd\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4 \uc131\ub2a5","title":"Reason"},{"location":"Templates/#example_19","text":"std::copy \ub97c \ub2e8\uc21c\ud654 \ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4 (\uba54\ubaa8\ub9ac \uc0c1\uc5d0\uc11c \uc778\uc811\ud558\uc9c0 \uc54a\uc744 \uac00\ub2a5\uc131\uc744 \ubc30\uc81c\ud558\uc600\ub2e4). struct pod_tag {}; struct non_pod_tag {}; template < class T > struct copy_trait { using tag = non_pod_tag ; }; // T is not \"plain old data\" template <> struct copy_trait < int > { using tag = pod_tag ; }; // int is \"plain old data\" template < class Iter > Out copy_helper ( Iter first , Iter last , Iter out , pod_tag ) { // use memmove } template < class Iter > Out copy_helper ( Iter first , Iter last , Iter out , non_pod_tag ) { // use loop calling copy constructors } template < class Itert > Out copy ( Iter first , Iter last , Iter out ) { return copy_helper ( first , last , out , typename copy_trait < Iter >:: tag {}) } void use ( vector < int >& vi , vector < int >& vi2 , vector < string >& vs , vector < string >& vs2 ) { copy ( vi . begin (), vi . end (), vi2 . begin ()); // uses memmove copy ( vs . begin (), vs . end (), vs2 . begin ()); // uses a loop calling copy constructors } \uc704 \ucf54\ub4dc\ub294 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uc54c\uace0\ub9ac\uc998\uc744 \uc120\ud0dd\ud558\ub294 \uc77c\ubc18\uc801\uc774\uace0 \uac15\ub825\ud55c \ubc29\ubc95\uc744 \ubcf4\uc5ec\uc900\ub2e4.","title":"Example"},{"location":"Templates/#note_37","text":"Concept\uac00 \uc801\uc6a9 \uac00\ub2a5\ud574\uc9c0\uba74 \uc774\ub7f0 \ub300\uc548\uc740 \ubc14\ub85c \uad6c\ubcc4\ub420 \uc218 \uc788\uc744 \uac83\uc774\ub2e4: template < class Iter > requires Pod < Value_type < iter >> Out copy_helper ( In , first , In last , Out out ) { // use memmove } template < class Iter > Out copy_helper ( In , first , In last , Out out ) { // use loop calling copy constructors }","title":"Note"},{"location":"Templates/#enforcement_28","text":"???","title":"Enforcement"},{"location":"Templates/#t67-irregular-types","text":"","title":"T.67: \uc815\uaddc\uc801\uc774\uc9c0 \uc54a\uc740 \ud0c0\uc785(irregular types)\ub4e4\uc758 \ub300\uc548\uc801 \uad6c\ud604\uc744 \uc81c\uacf5\ud560 \ub54c\ub294 \ud2b9\uc218\ud654\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_30","text":"???","title":"Reason"},{"location":"Templates/#example_20","text":"???","title":"Example"},{"location":"Templates/#enforcement_29","text":"???","title":"Enforcement"},{"location":"Templates/#t68","text":"","title":"T.68: \ubaa8\ud638\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud15c\ud50c\ub9bf\uc5d0\uc11c\ub294 () \ubcf4\ub2e4\ub294 {}\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_31","text":"() \ub294 \ubb38\ubc95\uc801\uc73c\ub85c \ubaa8\ud638\ud55c \uacbd\uc6b0\uac00 \ubc1c\uc0dd\ud55c\ub2e4(vulnerable to grammar ambiguities).","title":"Reason"},{"location":"Templates/#example_21","text":"template < typename T , typename U > void f ( T t , U u ) { T v1 ( x ); // v1\uc740 \ubcc0\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uc778\uac00? T v2 { x }; // v2\uac00 \ubcc0\uc218\ub77c\ub294 \uac83\uc744 \ubc14\ub85c \uc54c \uc218 \uc788\ub2e4 auto x = T ( u ); // \uac1c\uccb4 \uc0dd\uc131\uc778\uac00? \ud0c0\uc785 \ubcc0\ud658\uc778\uac00? } f ( 1 , \"asdf\" ); // bad: cast from const char* to int \ucc38\uace0: Why C++ Sails When the Vasa Sank","title":"Example"},{"location":"Templates/#enforcement_30","text":"\ucd08\uae30\ud654\uc5d0 () \ub97c \uc0ac\uc6a9\ud558\uba74 \uc9c0\uc801\ud558\ub77c \ud568\uc218\ucc98\ub7fc \ubcf4\uc774\ub294 \ud0c0\uc785 \ubcc0\ud658(cast)\uc744 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Templates/#t69-unqualified-","text":"Inside a template, don't make an unqualified nonmember function call unless you intend it to be a customization point","title":"T.69: \uc81c\uc57d\uc5c6\ub294(unqualified) \ube44-\uba64\ubc84 \ud568\uc218 \ud638\ucd9c\uc740 \ud574\ub2f9 \ubd80\ubd84\uc774 \ubcc0\uacbd\ub420 \uc218 \uc788\ub3c4\ub85d \ud558\ub824\ub294\uac8c \uc544\ub2c8\ub77c\uba74 \ud15c\ud50c\ub9bf \ub0b4\uc5d0\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Templates/#reason_32","text":"\uc758\ub3c4\ud55c\ub9cc\ud07c\ub9cc \uc720\uc5f0\uc131\uc744 \uc81c\uacf5\ud558\ub77c. \uc758\ub3c4\uce58 \uc54a\uc740 \ud658\uacbd\uc801 \ubcc0\ud654\uc5d0 \ub300\ud55c \ucde8\uc57d\ud568\uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example_22","text":"\ud638\ucd9c\ud558\ub294 \ucf54\ub4dc\uc5d0\uc11c \ud15c\ud50c\ub9bf\uc744 \uc758\ub3c4\uc801\uc73c\ub85c \uc870\uc815\ud558\ub3c4\ub85d \ud5c8\uc6a9\ud558\ub294\ub370\ub294 \uc8fc\ub85c 3\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\ub2e4. template < class T > // 1. \uba64\ubc84 \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4 void test1 ( T t ) { t . f (); // f() \ud568\uc218\ub97c \uc81c\uacf5\ud558\ub294 \ud0c0\uc785 T\ub97c \uc694\uad6c\ud55c\ub2e4 } template < class T > void test2 ( T t ) // 2. \uc81c\ud55c\ud558\uc9c0 \uc54a\uc740(without qualification) \ube44-\uba64\ubc84\ud568\uc218 { f ( t ); // \ud638\ucd9c\uc790\uc758 \ubc94\uc704(scope) \ud639\uc740 T\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 f(/*T*/)\ub97c \uc694\uad6c\ud55c\ub2e4 } template < class T > void test3 ( T t ) // 3. \"trait\" \uc744 \ud1b5\ud574\uc11c \ud638\ucd9c\ud55c\ub2e4 { test_traits < T >:: f ( t ); // \uae30\ubcf8 \ud568\uc218/\ud0c0\uc785\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744\ub54c\ub294 // test_traits<> \ub97c \uc870\uc791(customize)\ud558\ub3c4\ub85d \ud55c\ub2e4. } trait\uc740 \ubcf4\ud1b5 \ud0c0\uc785\uc744 \uacc4\uc0b0\ud558\uae30 \uc704\ud55c \ud0c0\uc785\uc774\uac70\ub098, \uac12\uc744 \uacc4\uc0b0\ud558\ub294 constexpr \ud568\uc218\uc774\uac70\ub098, \uc0ac\uc6a9\uc790\uc758 \ud0c0\uc785\uc73c\ub85c \ud2b9\uc218\ud654\ub418\ub294 \uc804\ud1b5\uc801\uc778 traits \ud15c\ud50c\ub9bf\uc744 \uc758\ubbf8\ud55c\ub2e4.","title":"Example"},{"location":"Templates/#note_38","text":"t \uac12\uc73c\ub85c \ud15c\ud50c\ub9bf \ud0c0\uc785 \ub9e4\uac1c\ubcc0\uc218\ub85c \ub41c helper(t) \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub824\uace0 \ud55c\ub2e4\uba74, ::detail \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0 \ud568\uc218\ub97c \ub450\uace0 detail::helper(t); \ub85c \ud638\ucd9c\ud558\ub77c. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 t \ud0c0\uc785\uc758 \ub124\uc784\uc2a4\ud398\uc774\uc2a4\uc5d0\uc11c \ucc3e\uc744 \uc218 \uc788\ub294 \ub2e4\ub978 helper \ud568\uc218\uac00 \ud638\ucd9c\ub420 \uc218\ub3c4 \uc788\ub2e4. \ud568\uc218\uc5d0 \uc81c\uc57d\uc774 \uc5c6\ub294 \uacbd\uc6b0 ADL \uc744 \ucc38\uace0\ud558\ub77c","title":"Note"},{"location":"Templates/#enforcement_31","text":"In a template, flag an unqualified call to a nonmember function that passes a variable of dependent type when there is a nonmember function of the same name in the template's namespace.","title":"Enforcement"},{"location":"Templates/#ttemp-hier","text":"C++\uc5d0\uc11c \ud15c\ud50c\ub9bf\uc740 \uc81c\ub124\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc9c0\uc6d0\ud558\uae30 \uc704\ud55c \ud575\uc2ec\uae30\ub2a5\uc774\ub2e4. \ub3d9\uc2dc\uc5d0 \ud074\ub798\uc2a4 \uacc4\uce35\uc740 \uac1c\uccb4\uc9c0\ud5a5 \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uadfc\uac04\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4. \uc774 \ub450\uac1c \uc5b8\uc5b4 \uae30\ub2a5\uc740 \ud569\ud574\uc11c \ud6a8\uacfc\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. \ub2e4\ub9cc \uba87\uac00\uc9c0 \ub514\uc790\uc778 \ud568\uc815\uc740 \ud53c\ud574\uc57c \ud55c\ub2e4.","title":"T.temp-hier: \ud15c\ud50c\ub9bf\uacfc \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870"},{"location":"Templates/#t80","text":"","title":"T.80: \ucda9\ubd84\ud55c \uace0\ub824 \uc5c6\uc774 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \ud15c\ud50c\ub9bf\uc73c\ub85c \ubc14\uafb8\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Templates/#reason_33","text":"\ud568\uc218\ub3c4 \ub9ce\uace0 \uac00\uc0c1\ud568\uc218\ub3c4 \ub9ce\uc740 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\ub97c \ud15c\ud50c\ub9bf\ud654\ud558\uba74 \ucf54\ub4dc\uac00 \ud3ed\ubc1c\uc801\uc73c\ub85c \uc99d\uac00\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example-bad_3","text":"template < typename T > struct Container { // an interface virtual T * get ( int i ); virtual T * first (); virtual T * next (); virtual void sort (); }; template < typename T > class Vector : public Container < T > { public : // ... }; Vector < int > vi ; Vector < string > vs ; \ucee8\ud14c\uc774\ub108\uc758 \uba64\ubc84\ud568\uc218\ub85c sort \ub97c \uc815\uc758\ud558\ub294 \uac74 \ubcc4\ub85c \uc88b\uc740 \uc0dd\uac01\uc774 \uc544\ub2c8\ub2e4. \ub4e4\uc5b4 \ubcf8 \uc801\uc774 \uc5c6\ub294\uac74 \uc544\ub2c8\uc9c0\ub9cc \ud558\uc9c0 \ub9d0\uc544\uc57c \ud560 \uc88b\uc740 \ubcf8\ubcf4\uae30\uac00 \ub420 \uac83\uc774\ub2e4. \ucef4\ud30c\uc77c\ub7ec\uac00 \ucf54\ub4dc\ub97c \uc0dd\uc131\ud574\uc57c \ud558\ub294\ub370 vector<int>::sort() \uac00 \ud638\ucd9c\ub418\ub294\uc9c0 \uc54c \uc218\uac00 \uc5c6\ub2e4. vector<string>::sort() \uc5d0 \ub300\ud574\uc11c\ub3c4 \ube44\uc2b7\ud558\ub2e4. \ub450 \ud568\uc218\uac00 \ud638\ucd9c\ud558\uc9c0 \uc54a\uc73c\uba74 \ucf54\ub4dc\ub9cc \ucee4\uc9c4 \uaf34\uc774\ub2e4. \uc2ed\uc5ec\uac1c\uc758 \uba64\ubc84 \ud568\uc218\uc640 \uc2ed\uc5ec\uac1c\uc758 \ud30c\uc0dd\ud074\ub798\uc2a4\ub97c \uac00\uc9c4 \ud074\ub798\uc2a4 \uacc4\uce35\uad6c\uc870\uac00 \ub2e4\uc591\ud558\uac8c \uc778\uc2a4\ud134\uc2a4\ud654\ub418\uba74 \ubb34\uc5c7\uc744 \ud560\uc9c0 \uc0c1\uc0c1\ud574\ubcf4\ub77c.","title":"Example, bad"},{"location":"Templates/#note_39","text":"\ub9ce\uc740 \uacbd\uc6b0 \uae30\ubcf8 \ud074\ub798\uc2a4\ub97c \ud30c\ub77c\ubbf8\ud130\ub85c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c\uc368 \uc548\uc815\uc801\uc778 \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc9c0\uc6d0\ud560 \uc218 \uc788\ub2e4; \"stable base\" \uc640 OO and GP \ub97c \ud568\uaed8\ubcf4\ub77c.","title":"Note"},{"location":"Templates/#enforcement_32","text":"\ud15c\ud50c\ub9bf \uc778\uc790\uc5d0 \uc758\uc874\ud558\ub294 \uac00\uc0c1\ud568\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c","title":"Enforcement"},{"location":"Templates/#t81","text":"","title":"T.81: \uacc4\uce35\uad6c\uc870\uc640 \ubc30\uc5f4\uc744 \uc11e\uc5b4\uc11c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Templates/#reason_34","text":"\ud30c\uc0dd \ud074\ub798\uc2a4 \ubc30\uc5f4\uc740 \uae30\ubcf8\ud074\ub798\uc2a4\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub85c \"decay\"\ub420 \uc218 \uc788\ub294\ub370 \ucc98\ucc38\ud55c(disastrous) \uacb0\uacfc\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_23","text":"Apple , Pear \uac00 Fruit \uc758 \uc885\ub958\ub77c\uace0 \uac00\uc815\ud558\uc790. void maul ( Fruit * p ) { * p = Pear {}; // put a Pear into *p p [ 1 ] = Pear {}; // put a Pear into p[1] } Apple aa [] = { an_apple , another_apple }; // aa contains Apples (obviously!) maul ( aa ); Apple & a0 = & aa [ 0 ]; // a Pear? Apple & a1 = & aa [ 1 ]; // a Pear? \ud615\ubcc0\ud658\uc744 \uc0ac\uc6a9\ud558\uc9c4 \uc54a\uc558\uc9c0\ub9cc, aa[0] \ub294 Pear \uc77c \uac83\uc774\ub2e4. sizeof(Apple) != sizeof(Pear) \uc774\ubbc0\ub85c aa[1] \uc5d0 \uc811\uadfc\ud558\uba74 \ubc30\uc5f4\uc5d0\uc11c \uc624\ube0c\uc81d\ud2b8\uc758 \uc62c\ubc14\ub978 \uc2dc\uc791\uc704\uce58\ub85c \uc815\ub82c\ub420 \uc218 \uc5c6\uc744 \uac83\uc774\ub2e4. \ub530\ub77c\uc11c \ud0c0\uc785 \uc704\ubc18\uc774 \ub418\uace0, \uba54\ubaa8\ub9ac\uac12\uc774 \ub9dd\uac00\uc9c0\uac8c \ub41c\ub2e4. \uc808\ub300\ub85c \uc774\ub7f0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc9c0 \ub9c8\ub77c. maul() \uc774 T* \ub294 \uac1c\ubcc4\uc801\uc778(individual) \uac1c\uccb4\ub97c \uac00\ub9ac\ud0a8\ub2e4\ub294 \uaddc\uce59 \uc744 \uc704\ubc18\ud55c\ub2e4\ub294 \uc810\uc744 \ub208\uc5ec\uaca8 \ubcf4\ub77c.","title":"Example"},{"location":"Templates/#alternative","text":"\uc801\ub2f9\ud55c (\ud15c\ud50c\ub9bf) \ucee8\ud14c\uc774\ub108\ub97c \uc0ac\uc6a9\ud558\ub77c. void maul2 ( Fruit * p ) { * p = Pear {}; // put a Pear into *p } vector < Apple > va = { an_apple , another_apple }; // va contains Apples (obviously!) maul2 ( va ); // error: cannot convert a vector<Apple> to a Fruit* maul2 ( & va [ 0 ]); // you asked for it Apple & a0 = & va [ 0 ]; // a Pear? maul2() \uc5d0\uc11c\uc758 \ub300\uc785\uc740 \ubcf5\uc0ac \uc190\uc2e4\uc774 \uc5c6\ub3c4\ub85d \ud558\ub77c\ub294 \uaddc\uce59 \uc744 \uc704\ubc18\ud55c\ub2e4\ub294 \uc810\uc5d0 \uc720\uc758\ud558\ub77c.","title":"Alternative"},{"location":"Templates/#enforcement_33","text":"\uc774 \uacf5\ud3ec\uc2a4\ub7ec\uc6b4 \ubb38\uc81c\ub97c \ucc3e\uc544\ub0b4\uc57c \ud55c\ub2e4!","title":"Enforcement"},{"location":"Templates/#t82-linearize","text":"","title":"T.82: \uac00\uc0c1 \ud568\uc218\ub97c \uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uacc4\uce35 \uad6c\uc870\ub97c \uc81c\uac70\ud558\ub77c(linearize)"},{"location":"Templates/#reason_35","text":"???","title":"Reason"},{"location":"Templates/#example_24","text":"???","title":"Example"},{"location":"Templates/#enforcement_34","text":"???","title":"Enforcement"},{"location":"Templates/#t83-virtual","text":"","title":"T.83: \uba64\ubc84 \ud568\uc218\ub294 \ud15c\ud50c\ub9bf\uc774\uba74\uc11c virtual\ud55c \ud568\uc218\ub85c \uc120\uc5b8\ud574\uc120 \uc548\ub41c\ub2e4"},{"location":"Templates/#reason_36","text":"C++\uc774 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294\ub2e4. \uac00\uc0c1\ud568\uc218 \ud14c\uc774\ube14(vtbl)\uc740 \ub9c1\ud06c \uc2dc\uac04\uae4c\uc9c0\ub294 \uc0dd\uc131\ud560 \uc218 \uc5c6\ub2e4. \ub54c\ubb38\uc5d0 \ubcf4\ud1b5\uc740 \ub3d9\uc801\ub9c1\ud0b9\uc73c\ub85c \uad6c\ud604\ud574\uc57c \ud55c\ub2e4.","title":"Reason"},{"location":"Templates/#example-dont","text":"class Shape { // ... template < class T > virtual bool intersect ( T * p ); // error: template cannot be virtual };","title":"Example, don't"},{"location":"Templates/#note_40","text":"\uc0ac\ub78c\ub4e4\uc774 \uc774\uc640 \uad00\ub828\ud574 \uacc4\uc18d \ubb3c\uc5b4\ubcf4\uace0 \uc788\ub2e4. \uaddc\uce59\uc774 \ud544\uc694\ud558\ub2e4.","title":"Note"},{"location":"Templates/#alternative_1","text":"Double dispatch, Visitor \ud328\ud134, \uc5b4\ub5a4 \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294\uc9c0 \ubd84\uc11d\ud55c\ub2e4.","title":"Alternative"},{"location":"Templates/#enforcement_35","text":"\ucef4\ud30c\uc77c\ub7ec\uac00 \ucc98\ub9ac\ud55c\ub2e4.","title":"Enforcement"},{"location":"Templates/#t84-abi","text":"","title":"T.84: \uc548\uc815\ub41c ABI\ub97c \uc9c0\uc6d0\ud558\uace0\uc790 \ud560\ub54c\ub294 \ud575\uc2ec \uad6c\ud604\uc5d0 \ud15c\ud50c\ub9bf\uc744 \uc4f0\uc9c0 \ub9c8\ub77c"},{"location":"Templates/#reason_37","text":"\ucf54\ub4dc \uc548\uc815\uc131\uc744 \uac1c\uc120\ud55c\ub2e4. \ucf54\ub4dc\uac00 \uae09\uc99d\ud558\ub294 \uac83\uc744 \ub9c9\uc544\uc900\ub2e4.","title":"Reason"},{"location":"Templates/#example_25","text":"\uae30\ubcf8 \ud074\ub798\uc2a4\ub85c \ub9cc\ub4e4\uc218\ub3c4 \uc788\ub2e4: struct Link_base { // stable Link_base * suc ; Link_base * pre ; }; template < typename T > // templated wrapper to add type safety struct Link : Link_base { T val ; }; struct List_base { Link_base * first ; // first element (if any) int sz ; // number of elements void add_front ( Link_base * p ); // ... }; template < typename T > class List : List_base { public : void put_front ( const T & e ) { add_front ( new Link < T > { e }); } // implicit cast to Link_base T & front () { static_cast < Link < T >*> ( first ). val ; } // explicit cast back to Link<T> // ... }; List < int > li ; List < string > ls ; \uc5ec\uae30\ub294 List \uc758 \uc694\uc18c\ub97c \uc5f0\uacb0\ud558\uace0 \ud574\uc81c\ud558\ub294 \ud568\uc218\uac00 \ud55c\ubc8c(one copy)\ub9cc \uc788\ub2e4. Link , List \ud074\ub798\uc2a4\ub294 \ud0c0\uc785 \uc870\uc791\ub9cc \ud55c\ub2e4. \uae30\ubcf8 \ud0c0\uc785\uc744 \ubd84\ub9ac\ud558\ub294 \ub300\uc2e0\uc5d0 \uc77c\ubc18\uc801\uc73c\ub85c\ub294 void , void* \uc5d0 \ub300\ud574\uc11c \ud2b9\uc218\ud654\ud558\uace0 \ud575\uc2ec void \uad6c\ud604\uc5d0\uc11c \uc548\uc804\ud558\uac8c T \ub85c \ud615\ubcc0\ud658\ud558\ub3c4\ub85d \ud15c\ud50c\ub9bf\uc744 \uac00\uc9c0\ub3c4\ub85d \ud55c\ub2e4.","title":"Example"},{"location":"Templates/#alternative_2","text":"Pimpl \uc744 \uc0ac\uc6a9\ud560\uc218\ub3c4 \uc788\ub2e4","title":"Alternative"},{"location":"Templates/#enforcement_36","text":"???","title":"Enforcement"},{"location":"Templates/#tvar","text":"???","title":"T.var: \uac00\ubcc0 \ud15c\ud50c\ub9bf \uaddc\uce59\ub4e4"},{"location":"Templates/#t100","text":"","title":"T.100: \ub2e4\uc591\ud55c \ud0c0\uc785\uc744 \uac00\uc9c0\uace0 \uac00\ubcc0\uc801\uc778 \uc218\uc758 \uc2e4\ud589\uc778\uc790\ub4e4\uc744 \ucc98\ub9ac\ud558\ub294 \ud568\uc218\uac00 \ud544\uc694\ud560 \ub54c\ub294 \uac00\ubcc0 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_38","text":"\uac00\ubcc0\uc778\uc790 \ud15c\ud50c\ub9bf\uc740 \uac00\uc7a5 \uc77c\ubc18\ud654\ub41c \uba54\ucee4\ub2c8\uc998\uc774\uba74\uc11c \ub3d9\uc2dc\uc5d0 \ud6a8\uc728\uc801\uc774\uace0, \ud0c0\uc785\uc548\uc815\uc131\uc744 \uc9c0\ub2cc\ub2e4. C \ud615\uc2dd\uc758 \uac00\ubcc0\uc778\uc790\ub97c \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uc544\ub77c.","title":"Reason"},{"location":"Templates/#example_26","text":"??? printf","title":"Example"},{"location":"Templates/#enforcement_37","text":"\ucf54\ub4dc\uc5d0 va_arg \uc774 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Templates/#t101-how-to-pass-arguments-to-a-variadic-template","text":"","title":"T.101: ??? How to pass arguments to a variadic template ???"},{"location":"Templates/#reason_39","text":"???","title":"Reason"},{"location":"Templates/#example_27","text":"??? \uc774\ub3d9\ub9cc \uac00\ub2a5\ud558\uac70\ub098 \uc778\uc790 \ucc38\uc870\uc5d0 \uc8fc\uc758\ud558\ub77c","title":"Example"},{"location":"Templates/#enforcement_38","text":"???","title":"Enforcement"},{"location":"Templates/#t102-how-to-process-arguments-to-a-variadic-template","text":"","title":"T.102: ??? How to process arguments to a variadic template ???"},{"location":"Templates/#reason_40","text":"???","title":"Reason"},{"location":"Templates/#example_28","text":"??? forwarding, type checking, references","title":"Example"},{"location":"Templates/#enforcement_39","text":"???","title":"Enforcement"},{"location":"Templates/#t103","text":"","title":"T.103: \ub3d9\uc77c \ud0c0\uc785\uc758 \uc2e4\ud589\uc778\uc790\ub4e4\uc744 \uc704\ud574\uc11c \uac00\ubcc0\ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9c8\ub77c"},{"location":"Templates/#reason_41","text":"\uac19\uc740 \ud0c0\uc785\uc758 \uc778\uc790\ub4e4\uc740 initializer_list \ud615\ud0dc\ub85c \ub354 \uc815\ud655\ud788 \uba85\uc2dc\ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_29","text":"???","title":"Example"},{"location":"Templates/#enforcement_40","text":"???","title":"Enforcement"},{"location":"Templates/#tmeta-tmp","text":"\ud15c\ud50c\ub9bf\uc740 \ucef4\ud30c\uc77c-\ud0c0\uc784 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc704\ud55c \uc77c\ubc18\uc801\uc778 \ub9e4\ucee4\ub2c8\uc998\uc744 \uc81c\uacf5\ud55c\ub2e4. \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ud558\ub098 \uc774\uc0c1\uc758 \uc785\ub825\uc774\ub098 \uacb0\uacfc \uc790\uccb4\uac00 \ud0c0\uc785\uc778 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ub9d0\ud55c\ub2e4. \ud15c\ud50c\ub9bf\uc740 \ud29c\ub9c1 \uc644\uc804\uc131\uc744 \uac00\uc9c4 (modulo memory capacity) \ub355\ud0c0\uc774\ud551\uc744 \uc81c\uacf5\ud55c\ub2e4.\uc774\ub97c \uc704\ud574 \ud544\uc694\ud55c \ubb38\ubc95\uacfc \uae30\uc220\uc740 \uc544\uc8fc \ub054\ucc0d\ud558\ub2e4(horrendous).","title":"T.meta: \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d (TMP)"},{"location":"Templates/#t120","text":"","title":"T.120: \uc815\ub9d0 \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_42","text":"\ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc740 \uc62c\ubc14\ub974\uac8c \uc4f0\uae30\uac00 \uc5b4\ub835\uace0, \ucef4\ud30c\uc77c \uc18d\ub3c4\ub97c \ub290\ub9ac\uac8c \ud558\uace0, \uc720\uc9c0\ubcf4\uc218\ub97c \uc5b4\ub835\uac8c \ud55c\ub2e4. \uadf8\ub7ec\ub098 \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc774 \uc804\ubb38\uac00 \uc218\uc900\uc758 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ubcf4\ub2e4 \uc131\ub2a5\uc774 \ub354 \uc88b\uc740 \uc608\ub4e4\uc774 \uc788\ub2e4. \uac8c\ub2e4\uac00 \ub7f0\ud0c0\uc784 \ucf54\ub4dc\ubcf4\ub2e4 \ud575\uc2ec\uc0ac\uc0c1\uc744 \ub354 \uc798 \ud45c\ud604\ud558\ub294 \uc2e4\uc81c \uc608\ub4e4\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 AST(Abstract Syntax Tree)\ub97c \uc870\uc791\ud574\uc57c \ud55c\ub2e4\uba74 (\uc608\ucee8\ub300 \uc120\ud0dd\uc801\uc73c\ub85c \ud589\ub82c \uc5f0\uc0b0\uc744 \uc804\ud30c(folding)\ud55c\ub2e4\ub358\uc9c0) C++\uc5d0\uc11c\ub294 \ub2e4\ub978 \ubc29\ubc95\uc774 \uc5c6\ub2e4.","title":"Reason"},{"location":"Templates/#example-bad_4","text":"???","title":"Example, bad"},{"location":"Templates/#example-bad_5","text":"enable_if \ub300\uc548\uc73c\ub85c, \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub77c. \uc5b8\uc5b4\uac00 \uc9c0\uc6d0\ud558\uc9c0 \uc54a\ub294 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95 \uc744 \ucc38\uace0\ud558\ub77c.","title":"Example, bad"},{"location":"Templates/#example_30","text":"??? \uc88b\uc740 \uc608\uc81c\uac00 \ud544\uc694\ud558\ub2e4","title":"Example"},{"location":"Templates/#alternative_3","text":"\ub9cc\uc57d \uacb0\uacfc\uac00 \ud0c0\uc785\uc774 \uc544\ub2c8\ub77c \uac12\uc774\ub77c\uba74 constexpr \ud568\uc218 \ub97c \uc0ac\uc6a9\ud558\ub77c.","title":"Alternative"},{"location":"Templates/#note_41","text":"\ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc804\ucc98\ub9ac \ub9e4\ud06c\ub85c\ub85c \ub300\uc2e0\ud558\uace0 \uc2f6\ub2e4\uace0 \ub290\ub080\ub2e4\uba74 \ub108\ubb34 \ub098\uac04\uac83\uc774\ub2e4.","title":"Note"},{"location":"Templates/#t121-emulate","text":"Use template metaprogramming primarily to emulate concepts","title":"T.121: \ucee8\uc149\uc744 \ubaa8\ubc29(emulate)\ud558\uae30 \uc704\ud574 \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_43","text":"\ucee8\uc149 \uac1c\ub150\uc774 \ub110\ub9ac \uc0ac\uc6a9\ub420\ub54c\uae4c\uc9c0 TMP\ub97c \uc0ac\uc6a9\ud574\uc11c \uc5d0\ubbac\ub808\uc774\ud2b8\ud574\uc57c \ud560 \uac83\uc774\ub2e4. (\ucee8\uc149\uc5d0 \uae30\ubc18\ud55c \uc911\ubcf5\uc815\uc758\uc640 \uac19\uc774) \ucee8\uc149\uc774 \ud544\uc694\ud55c \uacbd\uc6b0(usecase)\ub4e4\uc740 \ubcf4\ud1b5 TMP\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_31","text":"template < typename Iter > /*requires*/ enable_if < random_access_iterator < Iter > , void > advance ( Iter p , int n ) { p += n ; } template < typename Iter > /*requires*/ enable_if < forward_iterator < Iter > , void > advance ( Iter p , int n ) { assert ( n >= 0 ); while ( n -- ) ++ p ;}","title":"Example"},{"location":"Templates/#note_42","text":"\uc544\ub798 \ucf54\ub4dc\ub294 \ucee8\uc149\uc744 \uc0ac\uc6a9\ud558\uba74 \uc5c4\uccad \uc26c\uc6cc\uc9c4\ub2e4: void advance ( RandomAccessIterator p , int n ) { p += n ; } void advance ( ForwardIterator p , int n ) { assert ( n >= 0 ); while ( n -- ) ++ p ;}","title":"Note"},{"location":"Templates/#enforcement_41","text":"???","title":"Enforcement"},{"location":"Templates/#t122","text":"","title":"T.122: \ud15c\ud50c\ub9bf(\ub300\ubd80\ubd84 \ud15c\ud50c\ub9bf \ubcc4\uce6d)\uc740 \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud0c0\uc785\uc744 \uacc4\uc0b0\ud560\ub54c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_44","text":"\ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub798\ubc0d\uc740 \ucef4\ud30c\uc77c \ud0c0\uc784\uc5d0 \ud0c0\uc785\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uc720\uc77c\ud558\uace0 \uc9c1\uc811\uc801\uc778 \ubc29\ubc95\uc774\ub2e4.","title":"Reason"},{"location":"Templates/#note_43","text":"\"\ud2b9\uc131(Traits)\" \uc0ac\uc6a9\ubc29\ubc95\uc740 \ub300\ubd80\ubd84 \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc774\ub098 constexpr \ud568\uc218\ub85c \ub300\uccb4\ub418\uc5c8\ub2e4.","title":"Note"},{"location":"Templates/#example_32","text":"??? big object / small object optimization","title":"Example"},{"location":"Templates/#enforcement_42","text":"???","title":"Enforcement"},{"location":"Templates/#t123-constexpr","text":"","title":"T.123: \ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \uac12\uc744 \uacc4\uc0b0\ud55c\ub2e4\uba74 constexpr \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_45","text":"\ud568\uc218\ub294 \uac12 \uacc4\uc0b0\uc744 \ud45c\ud604\ud558\ub294\ub370 \uac00\uc7a5 \ubd84\uba85\ud558\uace0 \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc774\ub2e4. \ub54c\ub54c\ub85c constexpr \ud568\uc218\ub294 \uc77c\ubc18 \ud568\uc218\ubcf4\ub2e4 \ucef4\ud30c\uc77c \ube44\uc6a9\uc774 \uc801\ub2e4.","title":"Reason"},{"location":"Templates/#note_44","text":"\"\ud2b9\uc131(Traits)\" \uc0ac\uc6a9\ubc29\ubc95\uc740 \ub300\ubd80\ubd84 \ud15c\ud50c\ub9bf \ubcc4\uce6d\uc774\ub098 constexpr \ud568\uc218\ub85c \ub300\uccb4\ub418\uc5c8\ub2e4.","title":"Note"},{"location":"Templates/#example_33","text":"template < typename T > // requires Number<T> constexpr T pow ( T v , int n ) // power/exponential { T res = 1 ; while ( n -- ) res *= v ; return res ; } constexpr auto f7 = pow ( pi , 7 );","title":"Example"},{"location":"Templates/#enforcement_43","text":"\uac12\uc744 \uacc4\uc0b0\ud574\ub0b4\ub294 \ud15c\ud50c\ub9bf \uba54\ud0c0\ud504\ub85c\uadf8\ub7a8\ub4e4\uc744 \uc9c0\uc801\ud558\ub77c. \uc774\ub4e4\uc740 constexpr \ud568\uc218\ub85c \ub300\uccb4\ub418\uc5b4\uc57c \ud55c\ub2e4.","title":"Enforcement"},{"location":"Templates/#t124-tmp","text":"","title":"T.124: \uac00\ub2a5\ud55c \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 TMP \uae30\ub2a5\ub4e4\uc744 \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_46","text":"conditional , enable_if , tuple \uac19\uc740 \ud45c\uc900\uc5d0\uc11c \uc815\uc758\ud55c \uae30\ub2a5\uc774 \ud638\ud658\uc774 \uc88b\uace0, \uc798 \uc54c\ub824\uc838 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_34","text":"???","title":"Example"},{"location":"Templates/#enforcement_44","text":"???","title":"Enforcement"},{"location":"Templates/#t125-tmp","text":"","title":"T.125: \ub9cc\uc57d \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 TMP \uae30\ub2a5\uc73c\ub85c \ucda9\ubd84\ud558\uc9c0 \uc54a\ub2e4\uba74, \uac00\ub2a5\ud55c \uc774\ubbf8 \uc874\uc7ac\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_47","text":"\uc880\ub354 \uace0\uae09\ud55c(advanced) TMP \uae30\ub2a5\ub4e4\uc740 \uc791\uc131\ud558\ub294 \uac83\uc740 \uc27d\uc9c0 \uc54a\uc740 \uc77c\uc774\uace0, \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ucee4\ubba4\ub2c8\ud2f0\uc5d0 \ub3c4\uc6c0\uc774 \ub41c\ub2e4(hopefully supportive). \uc815\ub9d0 \ud544\uc694\ud55c \uacbd\uc6b0\uc5d0\ub9cc \uc790\uc2e0\ub9cc\uc758 \"\uace0\uae09 TMP \uc9c0\uc6d0\"\uc744 \uc791\uc131\ud558\ub77c.","title":"Reason"},{"location":"Templates/#example_35","text":"???","title":"Example"},{"location":"Templates/#enforcement_45","text":"???","title":"Enforcement"},{"location":"Templates/#_1","text":"","title":" \uae30\ud0c0 \ud15c\ud50c\ub9bf \uaddc\uce59"},{"location":"Templates/#t140","text":"","title":"T.140: \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\uc131\uc774 \uc788\ub294 \ubaa8\ub4e0 \uc5f0\uc0b0\uc740 \uc774\ub984\uc744 \ubd99\uc5ec\ub77c"},{"location":"Templates/#reason_48","text":"\ubb38\uc11c\ud654, \uac00\ub3c5\uc131, \uc7ac\uc0ac\uc6a9 \uac00\ub2a5\uc131.","title":"Reason"},{"location":"Templates/#example_36","text":"struct Rec { string name ; string addr ; int id ; // unique identifier }; bool same ( const Rec & a , const Rec & b ) { return a . id == b . id ; } vector < Rec *> find_id ( const string & name ); // find all records for \"name\" auto x = find_if ( vr . begin (), vr . end (), [ & ]( Rec & r ) { if ( r . name . size () != n . size ()) // name to compare to is in n return false ; for ( int i = 0 ; i < r . name . size (); ++ i ) if ( tolower ( r . name [ i ]) != tolower ( n [ i ])) return false ; return true ; } ); \uc774 \ucf54\ub4dc\uc5d0\ub294 \uc720\uc6a9\ud55c \ud568\uc218(\ub300\uc18c\ubb38\uc790 \uad6c\ubd84\uc774 \uc5c6\ub294 \ubb38\uc790\uc5f4 \ube44\uad50)\uac00 \uc228\uc5b4\uc788\ub2e4. \ub78c\ub2e4\uc758 \uc2e4\ud589\uc778\uc790(argument)\ub4e4\uc774 \ub9ce\uc544\uc9c0\uba74 \uc774\ub7f0\uc77c\uc774 \uc0dd\uae34\ub2e4. bool compare_insensitive ( const string & a , const string & b ) { if ( a . size () != b . size ()) return false ; for ( int i = 0 ; i < a . size (); ++ i ) if ( tolower ( a [ i ]) != tolower ( b [ i ])) return false ; return true ; } auto x = find_if ( vr . begin (), vr . end (), [ & ]( Rec & r ) { compare_insensitive ( r . name , n ); } ); \ud639\uc740, ( n \uc5d0 \ubb35\uc2dc\uc801\uc73c\ub85c \uc774\ub984\uc774 \ubb36\uc774\ub294(binding) \uac83\uc744 \ud53c\ud558\uace0 \uc2f6\ub2e4\uba74) \uc544\ub798\ucc98\ub7fc \uc791\uc131\ud560\uc218\ub3c4 \uc788\ub2e4: auto cmp_to_n = [ & n ]( const string & a ) { return compare_insensitive ( a , n ); }; auto x = find_if ( vr . begin (), vr . end (), []( const Rec & r ) { return cmp_to_n ( r . name ); } );","title":"Example"},{"location":"Templates/#note_45","text":"\ud568\uc218, \ub78c\ub2e4, \uc5f0\uc0b0\uc790. \ubaa8\ub4e0 \uac83\uc5d0 \uc801\uc6a9\ub41c\ub2e4.","title":"Note"},{"location":"Templates/#exception_2","text":"\uc9c0\uc5ed \uc720\ud6a8\ubc94\uc704\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\ud558\ub294 \ub78c\ub2e4, for_each \ubb38 \uc778\uc790, \uc720\uc0ac\ud55c \uc81c\uc5b4\ud750\ub984 \uc54c\uace0\ub9ac\uc998 \ubcc0\uc218 \ucd08\uae30\ud654\ub97c \uc704\ud55c \ub78c\ub2e4","title":"Exception"},{"location":"Templates/#enforcement_46","text":"(\uc5b4\ub824\uc6c0) \uc720\uc0ac\ud55c \ub78c\ub2e4\ub97c \uc9c0\uc801\ud558\ub77c ???","title":"Enforcement"},{"location":"Templates/#t141","text":"","title":"T.141: \ub2e8\uc21c\ud55c \ud568\uc218 \uac1c\uccb4\uac00 \ud55c\uacf3\uc5d0\uc11c\ub9cc \ud544\uc694\ud558\ub2e4\uba74 \uc774\ub984\uc5c6\ub294 \ub78c\ub2e4\ub97c \uc0ac\uc6a9\ud558\ub77c"},{"location":"Templates/#reason_49","text":"\ucf54\ub4dc\ub97c \uac04\uacb0\ud558\uac8c \ub9cc\ub4e4\uace0 \ub2e4\ub978 \ubc29\ubc95\uc5d0 \ube44\ud574 \uc778\uc811\uc131(locality)\ub3c4 \uc88b\ub2e4.","title":"Reason"},{"location":"Templates/#example_37","text":"auto earlyUsersEnd = std :: remove_if ( users . begin (), users . end (), []( const User & a ) { return a . id > 100 ; });","title":"Example"},{"location":"Templates/#exception_3","text":"\ud55c\ubc88\ub9cc \uc0ac\uc6a9\ud55c\ub2e4\uace0 \ud574\ub3c4 \ub78c\ub2e4\uc5d0 \uc774\ub984\uc744 \ubd99\uc774\uba74 \ubd84\uba85\ud574 \ubcf4\uc778\ub2e4.","title":"Exception"},{"location":"Templates/#enforcement_47","text":"\ub3d9\uc77c\ud55c, \uac70\uc758 \ub3d9\uc77c\ud55c \ub78c\ub2e4\ub97c \ucc3e\ub294\ub2e4 (\uc774\ub984\uc788\ub294 \ud568\uc218 \ud639\uc740 \uc774\ub984\uc788\ub294 \ub78c\ub2e4\ub85c \ubc14\uafb8\ub3c4\ub85d \ud55c\ub2e4).","title":"Enforcement"},{"location":"Templates/#t142","text":"","title":"T.142?: \ud15c\ud50c\ub9bf \ubcc0\uc218\ub85c \ud45c\uae30\ub97c \uac04\ub2e8\ud788 \ud558\ub77c"},{"location":"Templates/#reason_50","text":"\ub354 \uc77d\uae30 \uc88b\ub2e4","title":"Reason"},{"location":"Templates/#example_38","text":"???","title":"Example"},{"location":"Templates/#enforcement_48","text":"???","title":"Enforcement"},{"location":"Templates/#t143","text":"Don't write unintentionally nongeneric code","title":"T.143: \ubc94\uc6a9\uc801\uc774\uc9c0 \uc54a\uc740 \ucf54\ub4dc\ub294 \uacc4\ud68d\uc5c6\uc774 \uc791\uc131\ud558\uc9c0 \ub9d0\uc544\ub77c"},{"location":"Templates/#reason_51","text":"\uc77c\ubc18\ud654, \uc7ac\uc0ac\uc6a9\uc131, \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \uc790\uc138\ud558\uac8c \ud558\uc9c0 \ub9c8\ub77c; \uac00\ub2a5\ud55c \uc77c\ubc18\uc801\uc778 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub77c.","title":"Reason"},{"location":"Templates/#example_39","text":"\ubc18\ubcf5\uc790(iterator) \ube44\uad50\uc5d0\ub294 < \ub300\uc2e0 != \ub97c \uc0ac\uc6a9\ud558\ub77c; != \ub294 \uc21c\uc11c\uc758 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ub354 \ub9ce\uc740 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. for ( auto i = first ; i < last ; ++ i ) { // \ube44\uad50\uac00 \uac00\ub2a5\ud574\uc57c\ub9cc \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4 // ... } for ( auto i = first ; i != last ; ++ i ) { // good; \uc880 \ub354 \ubc94\uc6a9\uc801(generic)\uc774\ub2e4 // ... } \ubb3c\ub860, \ubc94\uc704\uae30\ubc18- for \ubb38\uc774 \uc4f0\uae30\uac00 \ub354 \uc88b\ub2e4.","title":"Example"},{"location":"Templates/#example_40","text":"\ud544\uc694\ud55c \uae30\ub2a5\uc744 \uac00\uc9c4 \uae30\ubcf8\ud074\ub798\uc2a4\ub97c \uc0ac\uc6a9\ud558\ub77c. class Base { public : Bar f (); Bar g (); }; class Derived1 : public Base { public : Bar h (); }; class Derived2 : public Base { public : Bar j (); }; // bad, unless there is a specific reason for limiting to Derived1 objects only void my_func ( Derived1 & param ) { use ( param . f ()); use ( param . g ()); } // good, uses only Base interface so only commit to that void my_func ( Base & param ) { use ( param . f ()); use ( param . g ()); }","title":"Example"},{"location":"Templates/#enforcement_49","text":"\ubc18\ubcf5\uc790 \ube44\uad50\uc5d0 != \ub300\uc2e0\uc5d0 < \ub97c \uc4f4\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c x.empty() \ud639\uc740 x.is_empty() \ud45c\ud604\uc774 \uac00\ub2a5\ud558\ub2e4\uba74 x.size() == 0 \uc758 \uc0ac\uc6a9\uc744 \uc9c0\uc801\ud55c\ub2e4. \ubcf4\ub2e4 \ub9ce\uc740 \ucee8\ud14c\uc774\ub108 \ud0c0\uc785\ub4e4\uc774 size() \ubcf4\ub2e4\ub294 \ube44\uc5b4\uc788\ub294\uc9c0\ub97c \uac80\uc0ac\ud558\ub294 \uac83\uc744 \uc9c0\uc6d0\ud55c\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub294 \ud06c\uae30\ub97c \uc54c \uc218 \uc5c6\uac70\ub098, \uac1c\ub150\uc801\uc73c\ub85c \ud06c\uae30 \uc81c\ud55c\uc774 \uc5c6\uae30 \ub54c\ubb38\uc774\ub2e4. \uc0c1\uc18d\ub41c \ud0c0\uc785\uc5d0 \ub300\ud55c \ud3ec\uc778\ud130\ub098 \ucc38\uc870\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0\ub9cc \uae30\ubcf8 \ud0c0\uc785\uc73c\ub85c \uc120\uc5b8\ub41c \ud568\uc218\ub9cc \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\uac00 \uc788\ub2e4\uba74 \uc9c0\uc801\ud55c\ub2e4","title":"Enforcement"},{"location":"Templates/#t144","text":"","title":"T.144: \ud568\uc218 \ud15c\ud50c\ub9bf\uc740 \ud2b9\uc218\ud654\ud558\uc9c0 \ub9d0\ub77c"},{"location":"Templates/#reason_52","text":"\uc5b8\uc5b4\uaddc\uce59\uc5d0 \ub530\ub77c \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \ubd80\ubd84\uc801\uc73c\ub85c \ud2b9\uc218\ud654\ud560 \uc218 \uc5c6\ub2e4. \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \uc804\ubd80 \ud2b9\uc218\ud654\ud560 \uc218 \uc788\uc9c0\ub9cc \uadf8 \ub300\uc2e0\uc73c\ub85c \uc624\ubc84\ub85c\ub529\ud558\uace0 \uc2f6\uc744 \uac83\uc774\ub2e4. \ud568\uc218 \ud15c\ud50c\ub9bf \ud2b9\uc218\ud654\ub294 \uc624\ubc84\ub85c\ub529\uc73c\ub85c \ud574\uc11d\ub418\uae30 \ub54c\ubb38\uc5d0 \uc6d0\ud558\ub294\ub300\ub85c \ub3d9\uc791\ud558\uc9c0 \uc54a\ub294\ub2e4. \ub4dc\ubb3c\uc9c0\ub9cc \uc801\uc808\ud788 \ud2b9\uc218\ud654\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uacfc \uc5f0\uacc4\ud568\uc73c\ub85c\uc368 \uc2e4\uc81c\ub85c \ud2b9\uc218\ud654\ub97c \ud560 \uc218 \uc788\ub2e4.","title":"Reason"},{"location":"Templates/#example_41","text":"???","title":"Example"},{"location":"Templates/#exceptions_2","text":"\ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \ud2b9\uc218\ud654\ud560 \ud0c0\ub2f9\ud55c \uc774\uc720\uac00 \uc788\ub2e4\uba74 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud558\ub294 \ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \ud558\ub098\ub9cc \uc791\uc131\ud558\ub77c. \uadf8\ub9ac\uace0 \ud074\ub798\uc2a4 \ud15c\ud50c\ub9bf\uc744 \ud2b9\uc218\ud654\ud558\ub77c. (\ubd80\ubd84 \ud2b9\uc218\ud654\ub97c \uc791\uc131\ud558\ub294 \uac83\uae4c\uc9c0 \ud3ec\ud568\ud558\ub77c)","title":"Exceptions"},{"location":"Templates/#enforcement_50","text":"\ud568\uc218 \ud15c\ud50c\ub9bf\uc744 \ud2b9\uc218\ud654\ud558\uace0 \uc788\ub2e4\uba74 \uc9c0\uc801\ud558\ub77c. \uac00\ub2a5\ud558\ub2e4\uba74 \uc624\ubc84\ub85c\ub529\uc73c\ub85c \ub300\uc2e0\ud558\ub77c","title":"Enforcement"},{"location":"Templates/#t150-static_assert","text":"","title":"T.150: \ud574\ub2f9 \ud074\ub798\uc2a4\uac00 \uac1c\ub150\uc5d0 \ubd80\ud569\ud558\ub294\uc9c0\ub97c static_assert\ub97c \uc0ac\uc6a9\ud574 \ud655\uc778\ud558\ub77c"},{"location":"Templates/#reason_53","text":"\ud074\ub798\uc2a4\uac00 \ucee8\uc149\uc744 \ub9cc\uc871\uc2dc\ud0a4\ub294\uc9c0 \ud655\uc778\ud574\uc57c \ud55c\ub2e4\uba74, \uc77c\ucc0d \uac80\uc0ac\ud558\ub294 \uac83\uc774 \uc0ac\uc6a9\uc790\ub4e4\uc758 \uace0\ud1b5\uc744 \uc904\uc5ec\uc900\ub2e4.","title":"Reason"},{"location":"Templates/#example_42","text":"class X { public : X () = delete ; X ( const X & ) = default ; X ( X && ) = default ; X & operator = ( const X & ) = default ; // ... }; \uad6c\ud604\ud30c\uc77c \uc548\uc758 \uc5b4\ub514\uc120\uac00 \ucef4\ud30c\uc77c\ub7ec\uac00 X \uac00 \uc758\ub3c4\ud55c \uc18d\uc131(desired properties)\uc744 \uac80\uc0ac\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub77c: static_assert ( default_constructible < X > ); // error: X \ub294 \uae30\ubcf8 \uc0dd\uc131\uc790\uac00 \uc5c6\ub2e4. static_assert ( copyable < X > ); // error: X\uc758 \uc774\ub3d9 \uc0dd\uc131\uc790\ub97c \uc815\uc758\ud558\uc9c0 \uc54a\uc558\ub2e4.","title":"Example"},{"location":"Templates/#enforcement_51","text":"\ub9c8\ub545\ud788 \uac80\uc0ac\ud560 \ubc29\ubc95\uc774 \uc5c6\ub2e4(Not feasible).","title":"Enforcement"},{"location":"Unclassified/","text":"To-do: Unclassified proto-rules This is our to-do list. Eventually, the entries will become rules or parts of rules. Alternatively, we will decide that no change is needed and delete the entry. No long-distance friendship Should physical design (what's in a file) and large-scale design (libraries, groups of libraries) be addressed? Namespaces Avoid using directives in the global scope (except for std, and other \"fundamental\" namespaces (e.g. experimental)) How granular should namespaces be? All classes/functions designed to work together and released together (as defined in Sutter/Alexandrescu) or something narrower or wider? Should there be inline namespaces (\u00e0 la std::literals::*_literals )? Avoid implicit conversions Const member functions should be thread safe ... aka, but I don't really change the variable, just assign it a value the first time it's called ... argh Always initialize variables, use initialization lists for member variables. Anyone writing a public interface which takes or returns void* should have their toes set on fire. That one has been a personal favorite of mine for a number of years. :) Use const -ness wherever possible: member functions, variables and (yippee) const_iterators Use auto (size) vs. {initializers} vs. {Extent{size}} Don't overabstract Never pass a pointer down the call stack falling through a function bottom Should there be guidelines to choose between polymorphisms? YES. classic (virtual functions, reference semantics) vs. Sean Parent style (value semantics, type-erased, kind of like std::function ) vs. CRTP/static? YES Perhaps even vs. tag dispatch? should virtual calls be banned from ctors/dtors in your guidelines? YES. A lot of people ban them, even though I think it's a big strength of C++ that they are ??? -preserving (D disappointed me so much when it went the Java way). WHAT WOULD BE A GOOD EXAMPLE? Speaking of lambdas, what would weigh in on the decision between lambdas and (local?) classes in algorithm calls and other callback scenarios? And speaking of std::bind , Stephen T. Lavavej criticizes it so much I'm starting to wonder if it is indeed going to fade away in future. Should lambdas be recommended instead? What to do with leaks out of temporaries? : p = (s1 + s2).c_str(); pointer/iterator invalidation leading to dangling pointers: void bad () { int * p = new int [ 700 ]; int * q = & p [ 7 ]; delete p ; vector < int > v ( 700 ); int * q2 = & v [ 7 ]; v . resize ( 900 ); // ... use q and q2 ... } LSP private inheritance vs/and membership avoid static class members variables (race conditions, almost-global variables) Use RAII lock guards ( lock_guard , unique_lock , shared_lock ), never call mutex.lock and mutex.unlock directly (RAII) Prefer non-recursive locks (often used to work around bad reasoning, overhead) Join your threads! (because of std::terminate in destructor if not joined or detached ... is there a good reason to detach threads?) -- ??? could support library provide a RAII wrapper for std::thread ? If two or more mutexes must be acquired at the same time, use std::lock (or another deadlock avoidance algorithm?) When using a condition_variable , always protect the condition by a mutex (atomic bool whose value is set outside of the mutex is wrong!), and use the same mutex for the condition variable itself. Never use atomic_compare_exchange_strong with std::atomic<user-defined-struct> (differences in padding matter, while compare_exchange_weak in a loop converges to stable padding) individual shared_future objects are not thread-safe: two threads cannot wait on the same shared_future object (they can wait on copies of a shared_future that refer to the same shared state) individual shared_ptr objects are not thread-safe: different threads can call non- const member functions on different shared_ptr s that refer to the same shared object, but one thread cannot call a non- const member function of a shared_ptr object while another thread accesses that same shared_ptr object (if you need that, consider atomic_shared_ptr instead) rules for arithmetic","title":"Unclassified"},{"location":"Unclassified/#to-do-unclassified-proto-rules","text":"This is our to-do list. Eventually, the entries will become rules or parts of rules. Alternatively, we will decide that no change is needed and delete the entry. No long-distance friendship Should physical design (what's in a file) and large-scale design (libraries, groups of libraries) be addressed? Namespaces Avoid using directives in the global scope (except for std, and other \"fundamental\" namespaces (e.g. experimental)) How granular should namespaces be? All classes/functions designed to work together and released together (as defined in Sutter/Alexandrescu) or something narrower or wider? Should there be inline namespaces (\u00e0 la std::literals::*_literals )? Avoid implicit conversions Const member functions should be thread safe ... aka, but I don't really change the variable, just assign it a value the first time it's called ... argh Always initialize variables, use initialization lists for member variables. Anyone writing a public interface which takes or returns void* should have their toes set on fire. That one has been a personal favorite of mine for a number of years. :) Use const -ness wherever possible: member functions, variables and (yippee) const_iterators Use auto (size) vs. {initializers} vs. {Extent{size}} Don't overabstract Never pass a pointer down the call stack falling through a function bottom Should there be guidelines to choose between polymorphisms? YES. classic (virtual functions, reference semantics) vs. Sean Parent style (value semantics, type-erased, kind of like std::function ) vs. CRTP/static? YES Perhaps even vs. tag dispatch? should virtual calls be banned from ctors/dtors in your guidelines? YES. A lot of people ban them, even though I think it's a big strength of C++ that they are ??? -preserving (D disappointed me so much when it went the Java way). WHAT WOULD BE A GOOD EXAMPLE? Speaking of lambdas, what would weigh in on the decision between lambdas and (local?) classes in algorithm calls and other callback scenarios? And speaking of std::bind , Stephen T. Lavavej criticizes it so much I'm starting to wonder if it is indeed going to fade away in future. Should lambdas be recommended instead? What to do with leaks out of temporaries? : p = (s1 + s2).c_str(); pointer/iterator invalidation leading to dangling pointers: void bad () { int * p = new int [ 700 ]; int * q = & p [ 7 ]; delete p ; vector < int > v ( 700 ); int * q2 = & v [ 7 ]; v . resize ( 900 ); // ... use q and q2 ... } LSP private inheritance vs/and membership avoid static class members variables (race conditions, almost-global variables) Use RAII lock guards ( lock_guard , unique_lock , shared_lock ), never call mutex.lock and mutex.unlock directly (RAII) Prefer non-recursive locks (often used to work around bad reasoning, overhead) Join your threads! (because of std::terminate in destructor if not joined or detached ... is there a good reason to detach threads?) -- ??? could support library provide a RAII wrapper for std::thread ? If two or more mutexes must be acquired at the same time, use std::lock (or another deadlock avoidance algorithm?) When using a condition_variable , always protect the condition by a mutex (atomic bool whose value is set outside of the mutex is wrong!), and use the same mutex for the condition variable itself. Never use atomic_compare_exchange_strong with std::atomic<user-defined-struct> (differences in padding matter, while compare_exchange_weak in a loop converges to stable padding) individual shared_future objects are not thread-safe: two threads cannot wait on the same shared_future object (they can wait on copies of a shared_future that refer to the same shared state) individual shared_ptr objects are not thread-safe: different threads can call non- const member functions on different shared_ptr s that refer to the same shared object, but one thread cannot call a non- const member function of a shared_ptr object while another thread accesses that same shared_ptr object (if you need that, consider atomic_shared_ptr instead) rules for arithmetic","title":"To-do: Unclassified proto-rules"},{"location":"home/","text":"C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778 2018\ub144 9\uc6d4 2\uc77c \ud3b8\uc9d1\uc790: Bjarne Stroustrup Herb Sutter \uc774 \ubb38\uc11c\ub294 \uc624\ud508 \uc18c\uc2a4 (\ucf54\ub4dc) \ud504\ub85c\uc81d\ud2b8\ub85c, \uc9c0\uc18d\uc801\uc73c\ub85c \uac1c\uc120\ub418\uace0 \uc788\uc73c\uba70 0.8 \ubc84\uc804\uae4c\uc9c0 \ubc30\ud3ec\ub418\uc5c8\ub2e4. \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \ubcf5\uc0ac, \uc0ac\uc6a9, \uc218\uc815, \ud30c\uc0dd \uc131\uacfc\ubb3c\uacfc \uad00\ub828\ub41c \uc800\uc791\uad8c\uc740 MIT\uc640 \uc720\uc0ac\ud55c \ub77c\uc774\uc120\uc2a4\ub97c \ub530\ub978\ub2e4. \ud504\ub85c\uc81d\ud2b8\uc5d0 \uae30\uc5ec\ud558\uae30 \uc704\ud574\uc11c\ub294 \uae30\uc5ec\uc790 \ub77c\uc774\uc120\uc2a4(Contributor License)\uc5d0 \ub3d9\uc758\ud574\uc57c \ud55c\ub2e4. \ubcf4\ub2e4 \uc790\uc138\ud55c \uc0ac\ud56d\uc740 LICENSE \uc744 \ud655\uc778\ud558\ub77c. \uc624\ud508 \uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc775\uc219\ud55c \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc0ac\uc6a9, \ubcf5\uc0ac, \uc218\uc815, \ud30c\uc0dd \uc131\uacfc\ubb3c\ub4e4\uc744 \ud1b5\ud574 \uac74\uc124\uc801\uc778 \uc815\ubcf4\ub97c \uc81c\uacf5\ud574\uc8fc\uae30 \ubc14\ub780\ub2e4. \uac1c\uc120 \uc0ac\ud56d\uc5d0 \ub300\ud55c \uc758\uacac\uacfc \uc81c\uc548\uc740 \ub300\ubd80\ubd84 \ud658\uc601\ud55c\ub2e4. C++ \uc5b8\uc5b4\uc640 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \ubc1c\uc804\ud558\uace0, \uc774\uc5d0 \ub300\ud55c \uc774\ud574\uac00 \uae4a\uc5b4\uc9c8\uc218\ub85d \uc774 \ubb38\uc11c\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc218\uc815\ud558\uace0 \ud655\uc7a5\ud560 \uac83\uc774\ub2e4. \uc758\uacac\uc744 \ubcf4\ub0b4\uace0 \uc2f6\ub2e4\uba74, \uc18c\uac1c \uc5d0 \uc788\ub294 \ubaa9\uc801\uacfc \ubc29\ubc95\uc744 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. \uae30\uc5ec\uc790 \ubaa9\ub85d\uc740 \uc5ec\uae30 \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. \ucc38\uace0 \uc0ac\ud56d: \uc774\ud558\uc758 \uaddc\uce59\ub4e4\uc740 \uc644\uc131\ub3c4, \uc77c\uad00\uc131, \uc2dc\ud589 \uac00\ub2a5\uc131 \ub4f1\uc5d0 \ub300\ud574\uc11c \uc544\uc9c1 \ucca0\uc800\ud558\uac8c \uac80\uc99d\ub418\uc9c0 \uc54a\uc558\ub2e4 (???)\ub85c \ud45c\uc2dc\ub418\uc5b4 \uc788\ub294 \ubd80\ubd84\uc740 \uc544\uc9c1 \uad00\ub828 \uc815\ubcf4\ub97c \uae30\uc785\ud558\uc9c0 \uc54a\uc558\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4 \ucc38\uc870(Reference) \ubd80\ubd84\uc740 \uac31\uc2e0\uc774 \ud544\uc694\ud558\ub2e4; C++11 \uc774\uc804\uc758 \uc624\ub798\ub41c \uc18c\uc2a4 \ucf54\ub4dc\ub4e4\uc774 \uc544\uc9c1 \ub9ce\uc774 \uc788\ub2e4. \uc55e\uc73c\ub85c \ud574\uc57c \ud560 \uc77c\uc5d0 \ub300\ud55c \ucd5c\uc2e0 \ubaa9\ub85d\uc740 To-do: \ubbf8\ubd84\ub958 \uaddc\uce59 \ucd08\uc548 \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 \uc774 \uac00\uc774\ub4dc\uc758 \ubc94\uc704\uc640 \uad6c\uc870 \ub97c \ud655\uc778\ud558\uac70\ub098, \uc77d\uace0 \uc2f6\uc740 \ubd80\ubd84\uc744 \ud074\ub9ad\ud574 \ud574\ub2f9 \ub0b4\uc6a9\uc73c\ub85c \ubc14\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub2e4. In: \uc18c\uac1c P: \ucca0\ud559 I: \uc778\ud130\ud398\uc774\uc2a4 F: \ud568\uc218 C: \ud074\ub798\uc2a4\uc640 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 Enum: \uc5f4\uac70\ud615 R: \ub9ac\uc18c\uc2a4 \uad00\ub9ac ES: \ud45c\ud604\uc2dd\uacfc \ubb38\uc7a5 Per: \uc131\ub2a5 CP: \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\ucc98\ub9ac E: \uc624\ub958 \ucc98\ub9ac Con: \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 T: \ud15c\ud50c\ub9bf\uacfc \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d CPL: C \uc2a4\ud0c0\uc77c \ud504\ub85c\uadf8\ub798\ubc0d SF: \uc18c\uc2a4 \ud30c\uc77c SL: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9: A: \uc124\uacc4 \uc544\uc774\ub514\uc5b4 NR: \uaddc\uce59\uc774 \uc544\ub2cc \uac83\ub4e4\uacfc \uadfc\uac70\uc5c6\ub294 \uc774\uc57c\uae30\ub4e4 RF: \ucc38\uace0 \uc790\ub8cc\ub4e4 Pro: \ud504\ub85c\ud30c\uc77c GSL: \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac NL: \uc774\ub984\uacfc \ub9cc\ub4e6\uc0c8 \uaddc\uce59\ub4e4 FAQ: \uc790\uc8fc \ubb3b\ub294 \uc9c8\ubb38\uc5d0 \ub300\ud55c \ub300\ub2f5 Appendix A: \ub77c\uc774\ube0c\ub7ec\ub9ac Appendix B: \ubaa8\ub358 C++ \ucf54\ub4dc Appendix C: \ud1a0\ub860 Appendix D: \uc720\uc6a9\ud55c \ub3c4\uad6c\ub4e4 \uc6a9\uc5b4 \ud574\uc124 To-do: \ubbf8\ubd84\ub958 \uaddc\uce59 \uad6c\uccb4\uc801\uc778 \uc5b8\uc5b4 \uae30\ub2a5\uacfc \uad00\ub828\ub41c \uaddc\uce59\ub4e4: assignment regular types prefer initialization copy move other operations default class data invariant members helpers concrete types ctors, =, and dtors hierarchy operators concept : rules in generic programming template arguments semantics constructor: invariant establish invariant throw default not needed explicit delegating virtual derived class : when to use as interface destructors copy getters and setters multiple inheritance overloading slicing dynamic_cast destructor: and constructors when needed? may not fail exception: errors throw for errors only noexcept minimize try what if no exceptions? for : range-for and for for and while for-initializer empty body loop variable loop variable type ??? function: naming single operation no throw arguments argument passing multiple return values pointers lambdas inline : small functions in headers initialization: always prefer {} lambdas in-class initializers class members factory functions lambda expression: when to use operator: conventional avoid conversion operators lambdas public , private , and protected : information hiding consistency protected static_assert : compile-time checking concepts struct : for organizing data use if no invariant no private members template : abstraction containers concepts unsigned : signed bit manipulation virtual : interfaces not virtual destructor never fail \uaddc\uce59\ub4e4\uc744 \uc124\uba85\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c \uc124\uacc4 \uac1c\ub150\ub4e4: Assertion: ??? \uc624\ub958(Error): ??? \uc608\uc678(Exception): \uc608\uc678 \ubcf4\uc99d(Exception Guarantee) (???) \uc2e4\ud328(Failure): ??? \ubd88\ubcc0 \uc870\uac74(invariant): ??? \ub204\uc218(Leak): ??? \ub77c\uc774\ube0c\ub7ec\ub9ac(Library): ??? \uc0ac\uc804 \uc870\uac74(Precondition): ??? \uc0ac\ud6c4 \uc870\uac74(Postcondition): ??? \ub9ac\uc18c\uc2a4(Resource): ??? \uc694\uc57d \uc774 \ubb38\uc11c\ub294 C++\ub97c \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubaa8\uc74c\uc774\uba70, \uac1c\ubc1c\uc790\ub4e4\uc774 \ubaa8\ub358 C++\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\uae30 \uc704\ud574 \uc791\uc131\ub418\uc5c8\ub2e4. \uc5ec\uae30\uc11c \"\ubaa8\ub358 C++\"\ub294 \uc2e4\uc81c\ub85c \uc0ac\uc6a9\ub418\uace0 \uc788\ub294 ISO C++ \ud45c\uc900\uc744 \uc758\ubbf8\ud55c\ub2e4 (\ud604\uc7ac\ub294 C++17\uc744 \uc758\ubbf8\ud558\uc9c0\ub9cc, \uac70\uc758 \ubaa8\ub4e0 \uad8c\uc7a5\uc0ac\ud56d\ub4e4\uc740 C++14\uc640 C++11\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4). \uc9c0\uae08 \uac1c\ubc1c\uc911\uc778 \ucf54\ub4dc\uac00 5\ub144, \ub610\ub294 10\ub144 \ud6c4\uc5d0 \uc5b4\ub5a4 \ubaa8\uc2b5\uc774\uc5c8\uc73c\uba74 \uc88b\uaca0\ub294\uac00? C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc740 \uc778\ud130\ud398\uc774\uc2a4, \ub9ac\uc18c\uc2a4 \uad00\ub9ac, \uba54\ubaa8\ub9ac \uad00\ub9ac, \ub3d9\uc2dc\uc131\uc640 \uac19\uc774 \uc0c1\ub300\uc801\uc73c\ub85c \uace0\uc218\uc900\uc758 \ub0b4\uc6a9\uc5d0 \ub300\ud55c \uac83\uc774\uba70, \ub300\uccb4\ub85c \uc774\ub7f0 \uaddc\uce59\ub4e4\uc740 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uad6c\uc870\ub098 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uacc4\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \ub098\uc624\ub294 \uaddc\uce59\ub4e4\uc744 \uc900\uc218\ud558\uba74 \ucf54\ub4dc\uac00 \uc815\uc801 \ud0c0\uc785 \uc548\uc815\uc131\uc744 \uac00\uc9c0\ub3c4\ub85d \ud560 \uc218 \uc788\uc73c\uba70, \ub9ac\uc18c\uc2a4\uc758 \ub204\uc218\uac00 \uc5c6\uace0, \ud754\ud788 \uc800\uc9c0\ub974\ub294 \uc218\ub9ce\uc740 \ud504\ub85c\uadf8\ub798\ubc0d \ub85c\uc9c1 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\uc73c\uba70, \ub354\uc6b1 \ube60\ub974\uac8c \uc218\ud589\ub418\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \uc989, \uc62c\ubc14\ub978 \ucf54\ub4dc\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc774\ub984 \uc9c0\uc815 \uaddc\uce59\uc774\ub098 \ub4e4\uc5ec\uc4f0\uae30 \uc2a4\ud0c0\uc77c\uacfc \uac19\uc774 \uc138\ubd80\uc801\uc778 \ub0b4\uc6a9\uc5d0 \ub300\ud574\uc11c\ub294 \ud06c\uac8c \uc5b8\uae09\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc, \ud504\ub85c\uadf8\ub798\uba38\uc5d0\uac8c \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\ub294 \uc8fc\uc81c\uac00 \uc788\ub2e4\uba74 \ub2e4\ub8e8\ub3c4\ub85d \ud558\uaca0\ub2e4. \ucd08\uae30\uc758 \uaddc\uce59\ub4e4\uc740 (\ub2e4\uc591\ud55c \ud615\ud0dc\uc758) \uc548\uc815\uc131\uacfc \uac04\uacb0\ud568\uc744 \uacfc\ub3c4\ud558\uac8c \uac15\uc870\ud55c \uce21\uba74\uc774 \uc788\ub2e4. \uc2e4\uc6a9\uc131\uc744 \uc704\ud574 \uc5ec\ub7ec \uc608\uc678 \uc0ac\ud56d\ub4e4\uc774 \ub3c4\uc785\ub418\uae30\ub97c \ubc14\ub780\ub2e4. \ub610\ud55c \ub354 \ub9ce\uc740 \uaddc\uce59\ub4e4\uc774 \ud544\uc694\ud558\ub2e4. \uaddc\uce59\ub4e4 \uc911\uc5d0\ub294 \ub3c5\uc790\uc758 \uae30\ub300\uc640 \ub2e4\ub974\uac70\ub098, \uacbd\ud5d8\uacfc\ub294 \uc815\ubc18\ub300\ub418\ub294 \uac83\ub4e4\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. \uc5b4\ub5a4 \ud615\ud0dc\ub85c\ub4e0 \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub529 \uc2a4\ud0c0\uc77c\uc5d0 \ubcc0\ud654\ub97c \uc8fc\uc9c0 \ubabb\ud55c\ub2e4\uba74, \uc6b0\ub9ac\ub294 \uc2e4\ud328\ud55c \uac83\uc774\ub2e4! \uc62c\ubc14\ub978 \uaddc\uce59\uc778\uc9c0 \ud655\uc778\ud574 \ubcf4\uace0, \ubb38\uc81c\uac00 \uc788\ub2e4\uba74 \ubc18\ubc15\ud574\uc8fc\uae38 \ubc14\ub780\ub2e4! \ud2b9\ud788, \uce21\uc815 \uacb0\uacfc\ub098 \ub354 \ub098\uc740 \uc608\uc81c\ub4e4\ub85c \uaddc\uce59\ub4e4\uc744 \ub4b7\ubc1b\uce68\ud574\uc8fc\uae38 \ubc14\ub780\ub2e4. \uba85\ubc31\ud558\uac70\ub098 \ub2f9\uc5f0\ud574 \ubcf4\uc774\ub294 \uaddc\uce59\ub3c4 \uc77c\ubd80 \uc788\uc744 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc740 \uc219\ub828\ub418\uc9c0 \uc54a\uc740 \uac1c\ubc1c\uc790\ub4e4 \ub610\ub294 \ub2e4\ub978 \ubc30\uacbd \uc9c0\uc2dd\uc744 \uac16\uac70\ub098 \ub2e4\ub978 \uc5b8\uc5b4\ub97c \uc54c\uace0 \uc788\ub294 \uac1c\ubc1c\uc790\ub4e4\uc774 C++ \uc5b8\uc5b4\ub97c \ube68\ub9ac \uc775\ud790 \uc218 \uc788\ub3c4\ub85d \ub3d5\uae30 \uc704\ud55c \ubb38\uc11c\uc784\uc744 \uae30\uc5b5\ud574 \uc8fc\uc5c8\uc73c\uba74 \ud55c\ub2e4. \ub300\ubd80\ubd84\uc758 \uaddc\uce59\ub4e4\uc744 \ubd84\uc11d \ub3c4\uad6c\ub4e4\uc744 \ud1b5\ud574 \uc9c0\uc6d0\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\ub2e4. \ucc38\uc870(\ub610\ub294 \ub9c1\ud06c)\ub97c \ud1b5\ud574 \uc5b4\ub5a4 \uaddc\uce59\uc744 \uc704\ubc18\ud588\ub294\uc9c0 \ud30c\uc545\ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 \uaddc\uce59\uc744 \uc54c\uace0 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218\ub294 \uc5c6\ub294 \ub178\ub987\uc774\ub2e4. \uc774\ub7ec\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc740 \ubb34\uc2a8 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud588\ub294\uc9c0 \ud30c\uc545\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ud234\uc5d0 \ub300\ud55c \uba85\uc138\ub77c\uace0 \ubcfc \uc218 \uc788\ub2e4. \uaddc\uce59\ub4e4\uc774 \ucf54\ub4dc\uc5d0 \uc810\uc9c4\uc801\uc73c\ub85c \ub3c4\uc785\ub418\uae38 \ubc14\ub77c\uba70, \uc774\ub97c \uc704\ud55c \ud234\uc744 \ub9cc\ub4e4 \uacc4\ud68d\uc744 \uac16\uace0 \uc788\ub2e4. C++ \uc5b8\uc5b4\uc5d0 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\ub4e4\uc774 \ucd94\uac00\ub418\uace0 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \ub9ce\uc544\uc9c0\ubbc0\ub85c \uc774 \ubb38\uc11c\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc218\uc815\ud558\uace0 \ud655\uc7a5\ud574 \uaddc\uce59\ub4e4\uc5d0 \ub300\ud55c \uc774\ud574\ub97c \ub3d5\uace0\uc790 \ud55c\ub2e4. \uaddc\uce59\uc5d0 \ub300\ud55c \uc758\uacac\uacfc \uc81c\uc548\uc740 \uc5b8\uc81c\ub4e0 \ud658\uc601\ud55c\ub2e4. C++ \uc5b8\uc5b4\uc640 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \ubc1c\uc804\ud558\uace0, \uc774\uc5d0 \ub300\ud55c \uc774\ud574\uac00 \uae4a\uc5b4\uc9c8\uc218\ub85d \uc774 \ubb38\uc11c\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc218\uc815\ud558\uace0 \ud655\uc7a5\ud560 \uac83\uc774\ub2e4.","title":"Overview"},{"location":"home/#c","text":"2018\ub144 9\uc6d4 2\uc77c \ud3b8\uc9d1\uc790: Bjarne Stroustrup Herb Sutter \uc774 \ubb38\uc11c\ub294 \uc624\ud508 \uc18c\uc2a4 (\ucf54\ub4dc) \ud504\ub85c\uc81d\ud2b8\ub85c, \uc9c0\uc18d\uc801\uc73c\ub85c \uac1c\uc120\ub418\uace0 \uc788\uc73c\uba70 0.8 \ubc84\uc804\uae4c\uc9c0 \ubc30\ud3ec\ub418\uc5c8\ub2e4. \uc774 \ud504\ub85c\uc81d\ud2b8\uc758 \ubcf5\uc0ac, \uc0ac\uc6a9, \uc218\uc815, \ud30c\uc0dd \uc131\uacfc\ubb3c\uacfc \uad00\ub828\ub41c \uc800\uc791\uad8c\uc740 MIT\uc640 \uc720\uc0ac\ud55c \ub77c\uc774\uc120\uc2a4\ub97c \ub530\ub978\ub2e4. \ud504\ub85c\uc81d\ud2b8\uc5d0 \uae30\uc5ec\ud558\uae30 \uc704\ud574\uc11c\ub294 \uae30\uc5ec\uc790 \ub77c\uc774\uc120\uc2a4(Contributor License)\uc5d0 \ub3d9\uc758\ud574\uc57c \ud55c\ub2e4. \ubcf4\ub2e4 \uc790\uc138\ud55c \uc0ac\ud56d\uc740 LICENSE \uc744 \ud655\uc778\ud558\ub77c. \uc624\ud508 \uc18c\uc2a4 \ud504\ub85c\uc81d\ud2b8\uc5d0 \uc775\uc219\ud55c \uc0ac\uc6a9\uc790\ub4e4\uc774 \uc0ac\uc6a9, \ubcf5\uc0ac, \uc218\uc815, \ud30c\uc0dd \uc131\uacfc\ubb3c\ub4e4\uc744 \ud1b5\ud574 \uac74\uc124\uc801\uc778 \uc815\ubcf4\ub97c \uc81c\uacf5\ud574\uc8fc\uae30 \ubc14\ub780\ub2e4. \uac1c\uc120 \uc0ac\ud56d\uc5d0 \ub300\ud55c \uc758\uacac\uacfc \uc81c\uc548\uc740 \ub300\ubd80\ubd84 \ud658\uc601\ud55c\ub2e4. C++ \uc5b8\uc5b4\uc640 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \ubc1c\uc804\ud558\uace0, \uc774\uc5d0 \ub300\ud55c \uc774\ud574\uac00 \uae4a\uc5b4\uc9c8\uc218\ub85d \uc774 \ubb38\uc11c\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc218\uc815\ud558\uace0 \ud655\uc7a5\ud560 \uac83\uc774\ub2e4. \uc758\uacac\uc744 \ubcf4\ub0b4\uace0 \uc2f6\ub2e4\uba74, \uc18c\uac1c \uc5d0 \uc788\ub294 \ubaa9\uc801\uacfc \ubc29\ubc95\uc744 \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. \uae30\uc5ec\uc790 \ubaa9\ub85d\uc740 \uc5ec\uae30 \ub97c \ucc38\uace0\ud558\uae30 \ubc14\ub780\ub2e4. \ucc38\uace0 \uc0ac\ud56d: \uc774\ud558\uc758 \uaddc\uce59\ub4e4\uc740 \uc644\uc131\ub3c4, \uc77c\uad00\uc131, \uc2dc\ud589 \uac00\ub2a5\uc131 \ub4f1\uc5d0 \ub300\ud574\uc11c \uc544\uc9c1 \ucca0\uc800\ud558\uac8c \uac80\uc99d\ub418\uc9c0 \uc54a\uc558\ub2e4 (???)\ub85c \ud45c\uc2dc\ub418\uc5b4 \uc788\ub294 \ubd80\ubd84\uc740 \uc544\uc9c1 \uad00\ub828 \uc815\ubcf4\ub97c \uae30\uc785\ud558\uc9c0 \uc54a\uc558\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4 \ucc38\uc870(Reference) \ubd80\ubd84\uc740 \uac31\uc2e0\uc774 \ud544\uc694\ud558\ub2e4; C++11 \uc774\uc804\uc758 \uc624\ub798\ub41c \uc18c\uc2a4 \ucf54\ub4dc\ub4e4\uc774 \uc544\uc9c1 \ub9ce\uc774 \uc788\ub2e4. \uc55e\uc73c\ub85c \ud574\uc57c \ud560 \uc77c\uc5d0 \ub300\ud55c \ucd5c\uc2e0 \ubaa9\ub85d\uc740 To-do: \ubbf8\ubd84\ub958 \uaddc\uce59 \ucd08\uc548 \uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\ub2e4 \uc774 \uac00\uc774\ub4dc\uc758 \ubc94\uc704\uc640 \uad6c\uc870 \ub97c \ud655\uc778\ud558\uac70\ub098, \uc77d\uace0 \uc2f6\uc740 \ubd80\ubd84\uc744 \ud074\ub9ad\ud574 \ud574\ub2f9 \ub0b4\uc6a9\uc73c\ub85c \ubc14\ub85c \uc774\ub3d9\ud560 \uc218 \uc788\ub2e4. In: \uc18c\uac1c P: \ucca0\ud559 I: \uc778\ud130\ud398\uc774\uc2a4 F: \ud568\uc218 C: \ud074\ub798\uc2a4\uc640 \ud074\ub798\uc2a4 \uacc4\uce35 \uad6c\uc870 Enum: \uc5f4\uac70\ud615 R: \ub9ac\uc18c\uc2a4 \uad00\ub9ac ES: \ud45c\ud604\uc2dd\uacfc \ubb38\uc7a5 Per: \uc131\ub2a5 CP: \ub3d9\uc2dc\uc131\uacfc \ubcd1\ub82c\ucc98\ub9ac E: \uc624\ub958 \ucc98\ub9ac Con: \uc0c1\uc218\uc640 \ubd88\ubcc0\uc131 T: \ud15c\ud50c\ub9bf\uacfc \uc81c\ub108\ub9ad \ud504\ub85c\uadf8\ub798\ubc0d CPL: C \uc2a4\ud0c0\uc77c \ud504\ub85c\uadf8\ub798\ubc0d SF: \uc18c\uc2a4 \ud30c\uc77c SL: \ud45c\uc900 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucc38\uace0\ud560 \ub9cc\ud55c \ub0b4\uc6a9: A: \uc124\uacc4 \uc544\uc774\ub514\uc5b4 NR: \uaddc\uce59\uc774 \uc544\ub2cc \uac83\ub4e4\uacfc \uadfc\uac70\uc5c6\ub294 \uc774\uc57c\uae30\ub4e4 RF: \ucc38\uace0 \uc790\ub8cc\ub4e4 Pro: \ud504\ub85c\ud30c\uc77c GSL: \uac00\uc774\ub4dc\ub77c\uc778 \uc9c0\uc6d0 \ub77c\uc774\ube0c\ub7ec\ub9ac NL: \uc774\ub984\uacfc \ub9cc\ub4e6\uc0c8 \uaddc\uce59\ub4e4 FAQ: \uc790\uc8fc \ubb3b\ub294 \uc9c8\ubb38\uc5d0 \ub300\ud55c \ub300\ub2f5 Appendix A: \ub77c\uc774\ube0c\ub7ec\ub9ac Appendix B: \ubaa8\ub358 C++ \ucf54\ub4dc Appendix C: \ud1a0\ub860 Appendix D: \uc720\uc6a9\ud55c \ub3c4\uad6c\ub4e4 \uc6a9\uc5b4 \ud574\uc124 To-do: \ubbf8\ubd84\ub958 \uaddc\uce59 \uad6c\uccb4\uc801\uc778 \uc5b8\uc5b4 \uae30\ub2a5\uacfc \uad00\ub828\ub41c \uaddc\uce59\ub4e4: assignment regular types prefer initialization copy move other operations default class data invariant members helpers concrete types ctors, =, and dtors hierarchy operators concept : rules in generic programming template arguments semantics constructor: invariant establish invariant throw default not needed explicit delegating virtual derived class : when to use as interface destructors copy getters and setters multiple inheritance overloading slicing dynamic_cast destructor: and constructors when needed? may not fail exception: errors throw for errors only noexcept minimize try what if no exceptions? for : range-for and for for and while for-initializer empty body loop variable loop variable type ??? function: naming single operation no throw arguments argument passing multiple return values pointers lambdas inline : small functions in headers initialization: always prefer {} lambdas in-class initializers class members factory functions lambda expression: when to use operator: conventional avoid conversion operators lambdas public , private , and protected : information hiding consistency protected static_assert : compile-time checking concepts struct : for organizing data use if no invariant no private members template : abstraction containers concepts unsigned : signed bit manipulation virtual : interfaces not virtual destructor never fail \uaddc\uce59\ub4e4\uc744 \uc124\uba85\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c \uc124\uacc4 \uac1c\ub150\ub4e4: Assertion: ??? \uc624\ub958(Error): ??? \uc608\uc678(Exception): \uc608\uc678 \ubcf4\uc99d(Exception Guarantee) (???) \uc2e4\ud328(Failure): ??? \ubd88\ubcc0 \uc870\uac74(invariant): ??? \ub204\uc218(Leak): ??? \ub77c\uc774\ube0c\ub7ec\ub9ac(Library): ??? \uc0ac\uc804 \uc870\uac74(Precondition): ??? \uc0ac\ud6c4 \uc870\uac74(Postcondition): ??? \ub9ac\uc18c\uc2a4(Resource): ???","title":"C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778"},{"location":"home/#_1","text":"\uc774 \ubb38\uc11c\ub294 C++\ub97c \uc62c\ubc14\ub974\uac8c \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc758 \ubaa8\uc74c\uc774\uba70, \uac1c\ubc1c\uc790\ub4e4\uc774 \ubaa8\ub358 C++\ub97c \ud6a8\uc728\uc801\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\uae30 \uc704\ud574 \uc791\uc131\ub418\uc5c8\ub2e4. \uc5ec\uae30\uc11c \"\ubaa8\ub358 C++\"\ub294 \uc2e4\uc81c\ub85c \uc0ac\uc6a9\ub418\uace0 \uc788\ub294 ISO C++ \ud45c\uc900\uc744 \uc758\ubbf8\ud55c\ub2e4 (\ud604\uc7ac\ub294 C++17\uc744 \uc758\ubbf8\ud558\uc9c0\ub9cc, \uac70\uc758 \ubaa8\ub4e0 \uad8c\uc7a5\uc0ac\ud56d\ub4e4\uc740 C++14\uc640 C++11\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4). \uc9c0\uae08 \uac1c\ubc1c\uc911\uc778 \ucf54\ub4dc\uac00 5\ub144, \ub610\ub294 10\ub144 \ud6c4\uc5d0 \uc5b4\ub5a4 \ubaa8\uc2b5\uc774\uc5c8\uc73c\uba74 \uc88b\uaca0\ub294\uac00? C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc740 \uc778\ud130\ud398\uc774\uc2a4, \ub9ac\uc18c\uc2a4 \uad00\ub9ac, \uba54\ubaa8\ub9ac \uad00\ub9ac, \ub3d9\uc2dc\uc131\uc640 \uac19\uc774 \uc0c1\ub300\uc801\uc73c\ub85c \uace0\uc218\uc900\uc758 \ub0b4\uc6a9\uc5d0 \ub300\ud55c \uac83\uc774\uba70, \ub300\uccb4\ub85c \uc774\ub7f0 \uaddc\uce59\ub4e4\uc740 \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158\uc758 \uad6c\uc870\ub098 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uacc4\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc5d0 \ub098\uc624\ub294 \uaddc\uce59\ub4e4\uc744 \uc900\uc218\ud558\uba74 \ucf54\ub4dc\uac00 \uc815\uc801 \ud0c0\uc785 \uc548\uc815\uc131\uc744 \uac00\uc9c0\ub3c4\ub85d \ud560 \uc218 \uc788\uc73c\uba70, \ub9ac\uc18c\uc2a4\uc758 \ub204\uc218\uac00 \uc5c6\uace0, \ud754\ud788 \uc800\uc9c0\ub974\ub294 \uc218\ub9ce\uc740 \ud504\ub85c\uadf8\ub798\ubc0d \ub85c\uc9c1 \uc624\ub958\ub97c \uc7a1\uc544\ub0bc \uc218 \uc788\uc73c\uba70, \ub354\uc6b1 \ube60\ub974\uac8c \uc218\ud589\ub418\ub294 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \uc989, \uc62c\ubc14\ub978 \ucf54\ub4dc\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. \uc774\ub984 \uc9c0\uc815 \uaddc\uce59\uc774\ub098 \ub4e4\uc5ec\uc4f0\uae30 \uc2a4\ud0c0\uc77c\uacfc \uac19\uc774 \uc138\ubd80\uc801\uc778 \ub0b4\uc6a9\uc5d0 \ub300\ud574\uc11c\ub294 \ud06c\uac8c \uc5b8\uae09\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc, \ud504\ub85c\uadf8\ub798\uba38\uc5d0\uac8c \ub3c4\uc6c0\uc744 \uc904 \uc218 \uc788\ub294 \uc8fc\uc81c\uac00 \uc788\ub2e4\uba74 \ub2e4\ub8e8\ub3c4\ub85d \ud558\uaca0\ub2e4. \ucd08\uae30\uc758 \uaddc\uce59\ub4e4\uc740 (\ub2e4\uc591\ud55c \ud615\ud0dc\uc758) \uc548\uc815\uc131\uacfc \uac04\uacb0\ud568\uc744 \uacfc\ub3c4\ud558\uac8c \uac15\uc870\ud55c \uce21\uba74\uc774 \uc788\ub2e4. \uc2e4\uc6a9\uc131\uc744 \uc704\ud574 \uc5ec\ub7ec \uc608\uc678 \uc0ac\ud56d\ub4e4\uc774 \ub3c4\uc785\ub418\uae30\ub97c \ubc14\ub780\ub2e4. \ub610\ud55c \ub354 \ub9ce\uc740 \uaddc\uce59\ub4e4\uc774 \ud544\uc694\ud558\ub2e4. \uaddc\uce59\ub4e4 \uc911\uc5d0\ub294 \ub3c5\uc790\uc758 \uae30\ub300\uc640 \ub2e4\ub974\uac70\ub098, \uacbd\ud5d8\uacfc\ub294 \uc815\ubc18\ub300\ub418\ub294 \uac83\ub4e4\ub3c4 \uc788\uc744 \uac83\uc774\ub2e4. \uc5b4\ub5a4 \ud615\ud0dc\ub85c\ub4e0 \uc5ec\ub7ec\ubd84\uc758 \ucf54\ub529 \uc2a4\ud0c0\uc77c\uc5d0 \ubcc0\ud654\ub97c \uc8fc\uc9c0 \ubabb\ud55c\ub2e4\uba74, \uc6b0\ub9ac\ub294 \uc2e4\ud328\ud55c \uac83\uc774\ub2e4! \uc62c\ubc14\ub978 \uaddc\uce59\uc778\uc9c0 \ud655\uc778\ud574 \ubcf4\uace0, \ubb38\uc81c\uac00 \uc788\ub2e4\uba74 \ubc18\ubc15\ud574\uc8fc\uae38 \ubc14\ub780\ub2e4! \ud2b9\ud788, \uce21\uc815 \uacb0\uacfc\ub098 \ub354 \ub098\uc740 \uc608\uc81c\ub4e4\ub85c \uaddc\uce59\ub4e4\uc744 \ub4b7\ubc1b\uce68\ud574\uc8fc\uae38 \ubc14\ub780\ub2e4. \uba85\ubc31\ud558\uac70\ub098 \ub2f9\uc5f0\ud574 \ubcf4\uc774\ub294 \uaddc\uce59\ub3c4 \uc77c\ubd80 \uc788\uc744 \uac83\uc774\ub2e4. \ud558\uc9c0\ub9cc \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc740 \uc219\ub828\ub418\uc9c0 \uc54a\uc740 \uac1c\ubc1c\uc790\ub4e4 \ub610\ub294 \ub2e4\ub978 \ubc30\uacbd \uc9c0\uc2dd\uc744 \uac16\uac70\ub098 \ub2e4\ub978 \uc5b8\uc5b4\ub97c \uc54c\uace0 \uc788\ub294 \uac1c\ubc1c\uc790\ub4e4\uc774 C++ \uc5b8\uc5b4\ub97c \ube68\ub9ac \uc775\ud790 \uc218 \uc788\ub3c4\ub85d \ub3d5\uae30 \uc704\ud55c \ubb38\uc11c\uc784\uc744 \uae30\uc5b5\ud574 \uc8fc\uc5c8\uc73c\uba74 \ud55c\ub2e4. \ub300\ubd80\ubd84\uc758 \uaddc\uce59\ub4e4\uc744 \ubd84\uc11d \ub3c4\uad6c\ub4e4\uc744 \ud1b5\ud574 \uc9c0\uc6d0\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uacc4\ub418\uc5c8\ub2e4. \ucc38\uc870(\ub610\ub294 \ub9c1\ud06c)\ub97c \ud1b5\ud574 \uc5b4\ub5a4 \uaddc\uce59\uc744 \uc704\ubc18\ud588\ub294\uc9c0 \ud30c\uc545\ud560 \uc218 \uc788\ub2e4. \ubaa8\ub4e0 \uaddc\uce59\uc744 \uc54c\uace0 \ucf54\ub4dc\ub97c \uc791\uc131\ud560 \uc218\ub294 \uc5c6\ub294 \ub178\ub987\uc774\ub2e4. \uc774\ub7ec\ud55c \uac00\uc774\ub4dc\ub77c\uc778\uc740 \ubb34\uc2a8 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud588\ub294\uc9c0 \ud30c\uc545\ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ud234\uc5d0 \ub300\ud55c \uba85\uc138\ub77c\uace0 \ubcfc \uc218 \uc788\ub2e4. \uaddc\uce59\ub4e4\uc774 \ucf54\ub4dc\uc5d0 \uc810\uc9c4\uc801\uc73c\ub85c \ub3c4\uc785\ub418\uae38 \ubc14\ub77c\uba70, \uc774\ub97c \uc704\ud55c \ud234\uc744 \ub9cc\ub4e4 \uacc4\ud68d\uc744 \uac16\uace0 \uc788\ub2e4. C++ \uc5b8\uc5b4\uc5d0 \uc0c8\ub85c\uc6b4 \uae30\ub2a5\ub4e4\uc774 \ucd94\uac00\ub418\uace0 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \ub9ce\uc544\uc9c0\ubbc0\ub85c \uc774 \ubb38\uc11c\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc218\uc815\ud558\uace0 \ud655\uc7a5\ud574 \uaddc\uce59\ub4e4\uc5d0 \ub300\ud55c \uc774\ud574\ub97c \ub3d5\uace0\uc790 \ud55c\ub2e4. \uaddc\uce59\uc5d0 \ub300\ud55c \uc758\uacac\uacfc \uc81c\uc548\uc740 \uc5b8\uc81c\ub4e0 \ud658\uc601\ud55c\ub2e4. C++ \uc5b8\uc5b4\uc640 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc774 \ubc1c\uc804\ud558\uace0, \uc774\uc5d0 \ub300\ud55c \uc774\ud574\uac00 \uae4a\uc5b4\uc9c8\uc218\ub85d \uc774 \ubb38\uc11c\ub97c \uc9c0\uc18d\uc801\uc73c\ub85c \uc218\uc815\ud558\uace0 \ud655\uc7a5\ud560 \uac83\uc774\ub2e4.","title":"\uc694\uc57d"},{"location":"appendix/DIscussion/","text":"Appendix C: Discussion This section contains follow-up material on rules and sets of rules. In particular, here we present further rationale, longer examples, and discussions of alternatives. Discussion: Define and initialize member variables in the order of member declaration Member variables are always initialized in the order they are declared in the class definition, so write them in that order in the constructor initialization list. Writing them in a different order just makes the code confusing because it won't run in the order you see, and that can make it hard to see order-dependent bugs. class Employee { string email , first , last ; public : Employee ( const char * firstName , const char * lastName ); // ... }; Employee :: Employee ( const char * firstName , const char * lastName ) : first ( firstName ), last ( lastName ), // BAD: first and last not yet constructed email ( first + \".\" + last + \"@acme.com\" ) {} In this example, email will be constructed before first and last because it is declared first. That means its constructor will attempt to use first and last too soon -- not just before they are set to the desired values, but before they are constructed at all. If the class definition and the constructor body are in separate files, the long-distance influence that the order of member variable declarations has over the constructor's correctness will be even harder to spot. References : [Cline99] \u00a722.03-11 [Dewhurst03] \u00a752-53 [Koenig97] \u00a74 [Lakos96] \u00a710.3.5 [Meyers97] \u00a713 [Murray93] \u00a72.1.3 [Sutter00] \u00a747 Discussion: Use of = , {} , and () as initializers ??? Discussion: Use a factory function if you need \"virtual behavior\" during initialization If your design wants virtual dispatch into a derived class from a base class constructor or destructor for functions like f and g , you need other techniques, such as a post-constructor -- a separate member function the caller must invoke to complete initialization, which can safely call f and g because in member functions virtual calls behave normally. Some techniques for this are shown in the References. Here's a non-exhaustive list of options: Pass the buck: Just document that user code must call the post-initialization function right after constructing an object. Post-initialize lazily: Do it during the first call of a member function. A Boolean flag in the base class tells whether or not post-construction has taken place yet. Use virtual base class semantics: Language rules dictate that the constructor most-derived class decides which base constructor will be invoked; you can use that to your advantage. (See [Taligent94] .) Use a factory function: This way, you can easily force a mandatory invocation of a post-constructor function. Here is an example of the last option: class B { public : B () { /* ... */ f (); /* ... */ } // BAD: see Item 49.1 virtual void f () = 0 ; // ... }; class B { protected : B () { /* ... */ } virtual void post_initialize () // called right after construction { /* ... */ f (); /* ... */ } // GOOD: virtual dispatch is safe public : virtual void f () = 0 ; template < class T > static shared_ptr < T > create () // interface for creating objects { auto p = make_shared < T > (); p -> post_initialize (); return p ; } }; class D : public B { // some derived class public : void f () override { /* ... */ }; protected : D () {} template < class T > friend shared_ptr < T > B :: Create (); }; shared_ptr < D > p = D :: Create < D > (); // creating a D object This design requires the following discipline: Derived classes such as D must not expose a public constructor. Otherwise, D 's users could create D objects that don't invoke PostInitialize . Allocation is limited to operator new . B can, however, override new (see Items 45 and 46). D must define a constructor with the same parameters that B selected. Defining several overloads of Create can assuage this problem, however; and the overloads can even be templated on the argument types. If the requirements above are met, the design guarantees that PostInitialize has been called for any fully constructed B -derived object. PostInitialize doesn't need to be virtual; it can, however, invoke virtual functions freely. In summary, no post-construction technique is perfect. The worst techniques dodge the whole issue by simply asking the caller to invoke the post-constructor manually. Even the best require a different syntax for constructing objects (easy to check at compile time) and/or cooperation from derived class authors (impossible to check at compile time). References : [Alexandrescu01] \u00a73 [Boost] [Dewhurst03] \u00a775 [Meyers97] \u00a746 [Stroustrup00] \u00a715.4.3 [Taligent94] Discussion: Make base class destructors public and virtual, or protected and nonvirtual Should destruction behave virtually? That is, should destruction through a pointer to a base class be allowed? If yes, then base 's destructor must be public in order to be callable, and virtual otherwise calling it results in undefined behavior. Otherwise, it should be protected so that only derived classes can invoke it in their own destructors, and nonvirtual since it doesn't need to behave virtually virtual. Example The common case for a base class is that it's intended to have publicly derived classes, and so calling code is just about sure to use something like a shared_ptr<base> : class Base { public : ~ Base (); // BAD, not virtual virtual ~ Base (); // GOOD // ... }; class Derived : public Base { /* ... */ }; { unique_ptr < Base > pb = make_unique < Derived > (); // ... } // ~pb invokes correct destructor only when ~Base is virtual In rarer cases, such as policy classes, the class is used as a base class for convenience, not for polymorphic behavior. It is recommended to make those destructors protected and nonvirtual: class My_policy { public : virtual ~ My_policy (); // BAD, public and virtual protected : ~ My_policy (); // GOOD // ... }; template < class Policy > class customizable : Policy { /* ... */ }; // note: private inheritance Note This simple guideline illustrates a subtle issue and reflects modern uses of inheritance and object-oriented design principles. For a base class Base , calling code might try to destroy derived objects through pointers to Base , such as when using a unique_ptr<Base> . If Base 's destructor is public and nonvirtual (the default), it can be accidentally called on a pointer that actually points to a derived object, in which case the behavior of the attempted deletion is undefined. This state of affairs has led older coding standards to impose a blanket requirement that all base class destructors must be virtual. This is overkill (even if it is the common case); instead, the rule should be to make base class destructors virtual if and only if they are public. To write a base class is to define an abstraction (see Items 35 through 37). Recall that for each member function participating in that abstraction, you need to decide: Whether it should behave virtually or not. Whether it should be publicly available to all callers using a pointer to Base or else be a hidden internal implementation detail. As described in Item 39, for a normal member function, the choice is between allowing it to be called via a pointer to Base nonvirtually (but possibly with virtual behavior if it invokes virtual functions, such as in the NVI or Template Method patterns), virtually, or not at all. The NVI pattern is a technique to avoid public virtual functions. Destruction can be viewed as just another operation, albeit with special semantics that make nonvirtual calls dangerous or wrong. For a base class destructor, therefore, the choice is between allowing it to be called via a pointer to Base virtually or not at all; \"nonvirtually\" is not an option. Hence, a base class destructor is virtual if it can be called (i.e., is public), and nonvirtual otherwise. Note that the NVI pattern cannot be applied to the destructor because constructors and destructors cannot make deep virtual calls. (See Items 39 and 55.) Corollary: When writing a base class, always write a destructor explicitly, because the implicitly generated one is public and nonvirtual. You can always =default the implementation if the default body is fine and you're just writing the function to give it the proper visibility and virtuality. Exception Some component architectures (e.g., COM and CORBA) don't use a standard deletion mechanism, and foster different protocols for object disposal. Follow the local patterns and idioms, and adapt this guideline as appropriate. Consider also this rare case: B is both a base class and a concrete class that can be instantiated by itself, and so the destructor must be public for B objects to be created and destroyed. Yet B also has no virtual functions and is not meant to be used polymorphically, and so although the destructor is public it does not need to be virtual. Then, even though the destructor has to be public, there can be great pressure to not make it virtual because as the first virtual function it would incur all the run-time type overhead when the added functionality should never be needed. In this rare case, you could make the destructor public and nonvirtual but clearly document that further-derived objects must not be used polymorphically as B 's. This is what was done with std::unary_function . In general, however, avoid concrete base classes (see Item 35). For example, unary_function is a bundle-of-typedefs that was never intended to be instantiated standalone. It really makes no sense to give it a public destructor; a better design would be to follow this Item's advice and give it a protected nonvirtual destructor. References : [C++CS] Item 50 [Cargill92] pp. 77-79, 207 [Cline99] \u00a721.06, 21.12-13 [Henricson97] pp. 110-114 [Koenig97] Chapters 4, 11 [Meyers97] \u00a714 [Stroustrup00] \u00a712.4.2 [Sutter02] \u00a727 [Sutter04] \u00a718 Discussion: Usage of noexcept ??? Discussion: Destructors, deallocation, and swap must never fail Never allow an error to be reported from a destructor, a resource deallocation function (e.g., operator delete ), or a swap function using throw . It is nearly impossible to write useful code if these operations can fail, and even if something does go wrong it nearly never makes any sense to retry. Specifically, types whose destructors may throw an exception are flatly forbidden from use with the C++ Standard Library. Most destructors are now implicitly noexcept by default. Example class Nefarious { public : Nefarious () { /* code that could throw */ } // ok ~ Nefarious () { /* code that could throw */ } // BAD, should not throw // ... }; Nefarious objects are hard to use safely even as local variables: void test ( string & s ) { Nefarious n ; // trouble brewing string copy = s ; // copy the string } // destroy copy and then n Here, copying s could throw, and if that throws and if n 's destructor then also throws, the program will exit via std::terminate because two exceptions can't be propagated simultaneously. Classes with Nefarious members or bases are also hard to use safely, because their destructors must invoke Nefarious ' destructor, and are similarly poisoned by its poor behavior: class Innocent_bystander { Nefarious member ; // oops, poisons the enclosing class's destructor // ... }; void test ( string & s ) { Innocent_bystander i ; // more trouble brewing string copy2 = s ; // copy the string } // destroy copy and then i Here, if constructing copy2 throws, we have the same problem because i 's destructor now also can throw, and if so we'll invoke std::terminate . You can't reliably create global or static Nefarious objects either: static Nefarious n ; // oops, any destructor exception can't be caught You can't reliably create arrays of Nefarious : void test () { std :: array < Nefarious , 10 > arr ; // this line can std::terminate(!) } The behavior of arrays is undefined in the presence of destructors that throw because there is no reasonable rollback behavior that could ever be devised. Just think: What code can the compiler generate for constructing an arr where, if the fourth object's constructor throws, the code has to give up and in its cleanup mode tries to call the destructors of the already-constructed objects ... and one or more of those destructors throws? There is no satisfactory answer. You can't use Nefarious objects in standard containers: std :: vector < Nefarious > vec ( 10 ); // this line can std::terminate() The standard library forbids all destructors used with it from throwing. You can't store Nefarious objects in standard containers or use them with any other part of the standard library. Note These are key functions that must not fail because they are necessary for the two key operations in transactional programming: to back out work if problems are encountered during processing, and to commit work if no problems occur. If there's no way to safely back out using no-fail operations, then no-fail rollback is impossible to implement. If there's no way to safely commit state changes using a no-fail operation (notably, but not limited to, swap ), then no-fail commit is impossible to implement. Consider the following advice and requirements found in the C++ Standard: If a destructor called during stack unwinding exits with an exception, terminate is called (15.5.1). So destructors should generally catch exceptions and not let them propagate out of the destructor. -- [C++03] \u00a715.2(3) No destructor operation defined in the C++ Standard Library (including the destructor of any type that is used to instantiate a standard-library template) will throw an exception. -- [C++03] \u00a717.4.4.8(3) Deallocation functions, including specifically overloaded operator delete and operator delete[] , fall into the same category, because they too are used during cleanup in general, and during exception handling in particular, to back out of partial work that needs to be undone. Besides destructors and deallocation functions, common error-safety techniques rely also on swap operations never failing -- in this case, not because they are used to implement a guaranteed rollback, but because they are used to implement a guaranteed commit. For example, here is an idiomatic implementation of operator= for a type T that performs copy construction followed by a call to a no-fail swap : T & T :: operator = ( const T & other ) { auto temp = other ; swap ( temp ); return * this ; } (See also Item 56. ???) Fortunately, when releasing a resource, the scope for failure is definitely smaller. If using exceptions as the error reporting mechanism, make sure such functions handle all exceptions and other errors that their internal processing might generate. (For exceptions, simply wrap everything sensitive that your destructor does in a try/catch(...) block.) This is particularly important because a destructor might be called in a crisis situation, such as failure to allocate a system resource (e.g., memory, files, locks, ports, windows, or other system objects). When using exceptions as your error handling mechanism, always document this behavior by declaring these functions noexcept . (See Item 75.) References : [C++CS] Item 51; [C++03] \u00a715.2(3), \u00a717.4.4.8(3), [Meyers96] \u00a711, [Stroustrup00] \u00a714.4.7, \u00a7E.2-4, [Sutter00] \u00a78, \u00a716, [Sutter02] \u00a718-19 Define Copy, move, and destroy consistently Reason ??? Note If you define a copy constructor, you must also define a copy assignment operator. Note If you define a move constructor, you must also define a move assignment operator. Example class X { // ... public : X ( const X & ) { /* stuff */ } // BAD: failed to also define a copy assignment operator X ( x && ) noexcept { /* stuff */ } // BAD: failed to also define a move assignment operator }; X x1 ; X x2 = x1 ; // ok x2 = x1 ; // pitfall: either fails to compile, or does something suspicious If you define a destructor, you should not use the compiler-generated copy or move operation; you probably need to define or suppress copy and/or move. class X { HANDLE hnd ; // ... public : ~ X () { /* custom stuff, such as closing hnd */ } // suspicious: no mention of copying or moving -- what happens to hnd? }; X x1 ; X x2 = x1 ; // pitfall: either fails to compile, or does something suspicious x2 = x1 ; // pitfall: either fails to compile, or does something suspicious If you define copying, and any base or member has a type that defines a move operation, you should also define a move operation. class X { string s ; // defines more efficient move operations // ... other data members ... public : X ( const X & ) { /* stuff */ } X & operator = ( const X & ) { /* stuff */ } // BAD: failed to also define a move construction and move assignment // (why wasn't the custom \"stuff\" repeated here?) }; X test () { X local ; // ... return local ; // pitfall: will be inefficient and/or do the wrong thing } If you define any of the copy constructor, copy assignment operator, or destructor, you probably should define the others. Note If you need to define any of these five functions, it means you need it to do more than its default behavior -- and the five are asymmetrically interrelated. Here's how: If you write/disable either of the copy constructor or the copy assignment operator, you probably need to do the same for the other: If one does \"special\" work, probably so should the other because the two functions should have similar effects. (See Item 53, which expands on this point in isolation.) If you explicitly write the copying functions, you probably need to write the destructor: If the \"special\" work in the copy constructor is to allocate or duplicate some resource (e.g., memory, file, socket), you need to deallocate it in the destructor. If you explicitly write the destructor, you probably need to explicitly write or disable copying: If you have to write a non-trivial destructor, it's often because you need to manually release a resource that the object held. If so, it is likely that those resources require careful duplication, and then you need to pay attention to the way objects are copied and assigned, or disable copying completely. In many cases, holding properly encapsulated resources using RAII \"owning\" objects can eliminate the need to write these operations yourself. (See Item 13.) Prefer compiler-generated (including =default ) special members; only these can be classified as \"trivial\", and at least one major standard library vendor heavily optimizes for classes having trivial special members. This is likely to become common practice. Exceptions : When any of the special functions are declared only to make them nonpublic or virtual, but without special semantics, it doesn't imply that the others are needed. In rare cases, classes that have members of strange types (such as reference members) are an exception because they have peculiar copy semantics. In a class holding a reference, you likely need to write the copy constructor and the assignment operator, but the default destructor already does the right thing. (Note that using a reference member is almost always wrong.) References : [C++CS] Item 52; [Cline99] \u00a730.01-14, [Koenig97] \u00a74, [Stroustrup00] \u00a75.5, \u00a710.4, [SuttHysl04b] Resource management rule summary: Provide strong resource safety; that is, never leak anything that you think of as a resource Never throw while holding a resource not owned by a handle A \"raw\" pointer or reference is never a resource handle Never let a pointer outlive the object it points to Use templates to express containers (and other resource handles) Return containers by value (relying on move or copy elision for efficiency) If a class is a resource handle, it needs a constructor, a destructor, and copy and/or move operations If a class is a container, give it an initializer-list constructor Discussion: Provide strong resource safety; that is, never leak anything that you think of as a resource Reason Prevent leaks. Leaks can lead to performance degradation, mysterious error, system crashes, and security violations. Alternative Formulation : Have every resource represented as an object of some class managing its lifetime. Example template < class T > class Vector { // ... private : T * elem ; // sz elements on the free store, owned by the class object int sz ; }; This class is a resource handle. It manages the lifetime of the T s. To do so, Vector must define or delete the set of special operations (constructors, a destructor, etc.). Example ??? \"odd\" non-memory resource ??? Enforcement The basic technique for preventing leaks is to have every resource owned by a resource handle with a suitable destructor. A checker can find \"naked new s\". Given a list of C-style allocation functions (e.g., fopen() ), a checker can also find uses that are not managed by a resource handle. In general, \"naked pointers\" can be viewed with suspicion, flagged, and/or analyzed. A complete list of resources cannot be generated without human input (the definition of \"a resource\" is necessarily too general), but a tool can be \"parameterized\" with a resource list. Discussion: Never throw while holding a resource not owned by a handle Reason That would be a leak. Example void f ( int i ) { FILE * f = fopen ( \"a file\" , \"r\" ); ifstream is { \"another file\" }; // ... if ( i == 0 ) return ; // ... fclose ( f ); } If i == 0 the file handle for a file is leaked. On the other hand, the ifstream for another file will correctly close its file (upon destruction). If you must use an explicit pointer, rather than a resource handle with specific semantics, use a unique_ptr or a shared_ptr with a custom deleter: void f ( int i ) { unique_ptr < FILE , int ( * )( FILE * ) > f ( fopen ( \"a file\" , \"r\" ), fclose ); // ... if ( i == 0 ) return ; // ... } Better: void f ( int i ) { ifstream input { \"a file\" }; // ... if ( i == 0 ) return ; // ... } Enforcement A checker must consider all \"naked pointers\" suspicious. A checker probably must rely on a human-provided list of resources. For starters, we know about the standard-library containers, string , and smart pointers. The use of span and string_span should help a lot (they are not resource handles). Discussion: A \"raw\" pointer or reference is never a resource handle Reason To be able to distinguish owners from views. Note This is independent of how you \"spell\" pointer: T* , T& , Ptr<T> and Range<T> are not owners. Discussion: Never let a pointer outlive the object it points to Reason To avoid extremely hard-to-find errors. Dereferencing such a pointer is undefined behavior and could lead to violations of the type system. Example string * bad () // really bad { vector < string > v = { \"This\" , \"will\" , \"cause\" , \"trouble\" , \"!\" }; // leaking a pointer into a destroyed member of a destroyed object (v) return & v [ 0 ]; } void use () { string * p = bad (); vector < int > xx = { 7 , 8 , 9 }; // undefined behavior: x may not be the string \"This\" string x = * p ; // undefined behavior: we don't know what (if anything) is allocated a location p * p = \"Evil!\" ; } The string s of v are destroyed upon exit from bad() and so is v itself. The returned pointer points to unallocated memory on the free store. This memory (pointed into by p ) may have been reallocated by the time *p is executed. There may be no string to read and a write through p could easily corrupt objects of unrelated types. Enforcement Most compilers already warn about simple cases and has the information to do more. Consider any pointer returned from a function suspect. Use containers, resource handles, and views (e.g., span known not to be resource handles) to lower the number of cases to be examined. For starters, consider every class with a destructor as resource handle. Discussion: Use templates to express containers (and other resource handles) Reason To provide statically type-safe manipulation of elements. Example template < typename T > class Vector { // ... T * elem ; // point to sz elements of type T int sz ; }; Discussion: Return containers by value (relying on move or copy elision for efficiency) Reason To simplify code and eliminate a need for explicit memory management. To bring an object into a surrounding scope, thereby extending its lifetime. See also : F.20, the general item about \"out\" output values Example vector < int > get_large_vector () { return ...; } auto v = get_large_vector (); // return by value is ok, most modern compilers will do copy elision Exception See the Exceptions in F.20 . Enforcement Check for pointers and references returned from functions and see if they are assigned to resource handles (e.g., to a unique_ptr ). Discussion: If a class is a resource handle, it needs a constructor, a destructor, and copy and/or move operations Reason To provide complete control of the lifetime of the resource. To provide a coherent set of operations on the resource. Example ??? Messing with pointers Note If all members are resource handles, rely on the default special operations where possible. template < typename T > struct Named { string name ; T value ; }; Now Named has a default constructor, a destructor, and efficient copy and move operations, provided T has. Enforcement In general, a tool cannot know if a class is a resource handle. However, if a class has some of the default operations , it should have all, and if a class has a member that is a resource handle, it should be considered as resource handle. Discussion: If a class is a container, give it an initializer-list constructor Reason It is common to need an initial set of elements. Example template < typename T > class Vector { public : Vector ( std :: initializer_list < T > ); // ... }; Vector < string > vs { \"Nygaard\" , \"Ritchie\" }; Enforcement When is a class a container? ???","title":"<a name=\"S-discussion\"></a>Appendix C: Discussion"},{"location":"appendix/DIscussion/#appendix-c-discussion","text":"This section contains follow-up material on rules and sets of rules. In particular, here we present further rationale, longer examples, and discussions of alternatives.","title":"Appendix C: Discussion"},{"location":"appendix/DIscussion/#discussion-define-and-initialize-member-variables-in-the-order-of-member-declaration","text":"Member variables are always initialized in the order they are declared in the class definition, so write them in that order in the constructor initialization list. Writing them in a different order just makes the code confusing because it won't run in the order you see, and that can make it hard to see order-dependent bugs. class Employee { string email , first , last ; public : Employee ( const char * firstName , const char * lastName ); // ... }; Employee :: Employee ( const char * firstName , const char * lastName ) : first ( firstName ), last ( lastName ), // BAD: first and last not yet constructed email ( first + \".\" + last + \"@acme.com\" ) {} In this example, email will be constructed before first and last because it is declared first. That means its constructor will attempt to use first and last too soon -- not just before they are set to the desired values, but before they are constructed at all. If the class definition and the constructor body are in separate files, the long-distance influence that the order of member variable declarations has over the constructor's correctness will be even harder to spot. References : [Cline99] \u00a722.03-11 [Dewhurst03] \u00a752-53 [Koenig97] \u00a74 [Lakos96] \u00a710.3.5 [Meyers97] \u00a713 [Murray93] \u00a72.1.3 [Sutter00] \u00a747","title":"Discussion: Define and initialize member variables in the order of member declaration"},{"location":"appendix/DIscussion/#discussion-use-of-and-as-initializers","text":"???","title":"Discussion: Use of =, {}, and () as initializers"},{"location":"appendix/DIscussion/#discussion-use-a-factory-function-if-you-need-virtual-behavior-during-initialization","text":"If your design wants virtual dispatch into a derived class from a base class constructor or destructor for functions like f and g , you need other techniques, such as a post-constructor -- a separate member function the caller must invoke to complete initialization, which can safely call f and g because in member functions virtual calls behave normally. Some techniques for this are shown in the References. Here's a non-exhaustive list of options: Pass the buck: Just document that user code must call the post-initialization function right after constructing an object. Post-initialize lazily: Do it during the first call of a member function. A Boolean flag in the base class tells whether or not post-construction has taken place yet. Use virtual base class semantics: Language rules dictate that the constructor most-derived class decides which base constructor will be invoked; you can use that to your advantage. (See [Taligent94] .) Use a factory function: This way, you can easily force a mandatory invocation of a post-constructor function. Here is an example of the last option: class B { public : B () { /* ... */ f (); /* ... */ } // BAD: see Item 49.1 virtual void f () = 0 ; // ... }; class B { protected : B () { /* ... */ } virtual void post_initialize () // called right after construction { /* ... */ f (); /* ... */ } // GOOD: virtual dispatch is safe public : virtual void f () = 0 ; template < class T > static shared_ptr < T > create () // interface for creating objects { auto p = make_shared < T > (); p -> post_initialize (); return p ; } }; class D : public B { // some derived class public : void f () override { /* ... */ }; protected : D () {} template < class T > friend shared_ptr < T > B :: Create (); }; shared_ptr < D > p = D :: Create < D > (); // creating a D object This design requires the following discipline: Derived classes such as D must not expose a public constructor. Otherwise, D 's users could create D objects that don't invoke PostInitialize . Allocation is limited to operator new . B can, however, override new (see Items 45 and 46). D must define a constructor with the same parameters that B selected. Defining several overloads of Create can assuage this problem, however; and the overloads can even be templated on the argument types. If the requirements above are met, the design guarantees that PostInitialize has been called for any fully constructed B -derived object. PostInitialize doesn't need to be virtual; it can, however, invoke virtual functions freely. In summary, no post-construction technique is perfect. The worst techniques dodge the whole issue by simply asking the caller to invoke the post-constructor manually. Even the best require a different syntax for constructing objects (easy to check at compile time) and/or cooperation from derived class authors (impossible to check at compile time). References : [Alexandrescu01] \u00a73 [Boost] [Dewhurst03] \u00a775 [Meyers97] \u00a746 [Stroustrup00] \u00a715.4.3 [Taligent94]","title":"Discussion: Use a factory function if you need \"virtual behavior\" during initialization"},{"location":"appendix/DIscussion/#discussion-make-base-class-destructors-public-and-virtual-or-protected-and-nonvirtual","text":"Should destruction behave virtually? That is, should destruction through a pointer to a base class be allowed? If yes, then base 's destructor must be public in order to be callable, and virtual otherwise calling it results in undefined behavior. Otherwise, it should be protected so that only derived classes can invoke it in their own destructors, and nonvirtual since it doesn't need to behave virtually virtual.","title":"Discussion: Make base class destructors public and virtual, or protected and nonvirtual"},{"location":"appendix/DIscussion/#example","text":"The common case for a base class is that it's intended to have publicly derived classes, and so calling code is just about sure to use something like a shared_ptr<base> : class Base { public : ~ Base (); // BAD, not virtual virtual ~ Base (); // GOOD // ... }; class Derived : public Base { /* ... */ }; { unique_ptr < Base > pb = make_unique < Derived > (); // ... } // ~pb invokes correct destructor only when ~Base is virtual In rarer cases, such as policy classes, the class is used as a base class for convenience, not for polymorphic behavior. It is recommended to make those destructors protected and nonvirtual: class My_policy { public : virtual ~ My_policy (); // BAD, public and virtual protected : ~ My_policy (); // GOOD // ... }; template < class Policy > class customizable : Policy { /* ... */ }; // note: private inheritance","title":"Example"},{"location":"appendix/DIscussion/#note","text":"This simple guideline illustrates a subtle issue and reflects modern uses of inheritance and object-oriented design principles. For a base class Base , calling code might try to destroy derived objects through pointers to Base , such as when using a unique_ptr<Base> . If Base 's destructor is public and nonvirtual (the default), it can be accidentally called on a pointer that actually points to a derived object, in which case the behavior of the attempted deletion is undefined. This state of affairs has led older coding standards to impose a blanket requirement that all base class destructors must be virtual. This is overkill (even if it is the common case); instead, the rule should be to make base class destructors virtual if and only if they are public. To write a base class is to define an abstraction (see Items 35 through 37). Recall that for each member function participating in that abstraction, you need to decide: Whether it should behave virtually or not. Whether it should be publicly available to all callers using a pointer to Base or else be a hidden internal implementation detail. As described in Item 39, for a normal member function, the choice is between allowing it to be called via a pointer to Base nonvirtually (but possibly with virtual behavior if it invokes virtual functions, such as in the NVI or Template Method patterns), virtually, or not at all. The NVI pattern is a technique to avoid public virtual functions. Destruction can be viewed as just another operation, albeit with special semantics that make nonvirtual calls dangerous or wrong. For a base class destructor, therefore, the choice is between allowing it to be called via a pointer to Base virtually or not at all; \"nonvirtually\" is not an option. Hence, a base class destructor is virtual if it can be called (i.e., is public), and nonvirtual otherwise. Note that the NVI pattern cannot be applied to the destructor because constructors and destructors cannot make deep virtual calls. (See Items 39 and 55.) Corollary: When writing a base class, always write a destructor explicitly, because the implicitly generated one is public and nonvirtual. You can always =default the implementation if the default body is fine and you're just writing the function to give it the proper visibility and virtuality.","title":"Note"},{"location":"appendix/DIscussion/#exception","text":"Some component architectures (e.g., COM and CORBA) don't use a standard deletion mechanism, and foster different protocols for object disposal. Follow the local patterns and idioms, and adapt this guideline as appropriate. Consider also this rare case: B is both a base class and a concrete class that can be instantiated by itself, and so the destructor must be public for B objects to be created and destroyed. Yet B also has no virtual functions and is not meant to be used polymorphically, and so although the destructor is public it does not need to be virtual. Then, even though the destructor has to be public, there can be great pressure to not make it virtual because as the first virtual function it would incur all the run-time type overhead when the added functionality should never be needed. In this rare case, you could make the destructor public and nonvirtual but clearly document that further-derived objects must not be used polymorphically as B 's. This is what was done with std::unary_function . In general, however, avoid concrete base classes (see Item 35). For example, unary_function is a bundle-of-typedefs that was never intended to be instantiated standalone. It really makes no sense to give it a public destructor; a better design would be to follow this Item's advice and give it a protected nonvirtual destructor. References : [C++CS] Item 50 [Cargill92] pp. 77-79, 207 [Cline99] \u00a721.06, 21.12-13 [Henricson97] pp. 110-114 [Koenig97] Chapters 4, 11 [Meyers97] \u00a714 [Stroustrup00] \u00a712.4.2 [Sutter02] \u00a727 [Sutter04] \u00a718","title":"Exception"},{"location":"appendix/DIscussion/#discussion-usage-of-noexcept","text":"???","title":"Discussion: Usage of noexcept"},{"location":"appendix/DIscussion/#discussion-destructors-deallocation-and-swap-must-never-fail","text":"Never allow an error to be reported from a destructor, a resource deallocation function (e.g., operator delete ), or a swap function using throw . It is nearly impossible to write useful code if these operations can fail, and even if something does go wrong it nearly never makes any sense to retry. Specifically, types whose destructors may throw an exception are flatly forbidden from use with the C++ Standard Library. Most destructors are now implicitly noexcept by default.","title":"Discussion: Destructors, deallocation, and swap must never fail"},{"location":"appendix/DIscussion/#example_1","text":"class Nefarious { public : Nefarious () { /* code that could throw */ } // ok ~ Nefarious () { /* code that could throw */ } // BAD, should not throw // ... }; Nefarious objects are hard to use safely even as local variables: void test ( string & s ) { Nefarious n ; // trouble brewing string copy = s ; // copy the string } // destroy copy and then n Here, copying s could throw, and if that throws and if n 's destructor then also throws, the program will exit via std::terminate because two exceptions can't be propagated simultaneously. Classes with Nefarious members or bases are also hard to use safely, because their destructors must invoke Nefarious ' destructor, and are similarly poisoned by its poor behavior: class Innocent_bystander { Nefarious member ; // oops, poisons the enclosing class's destructor // ... }; void test ( string & s ) { Innocent_bystander i ; // more trouble brewing string copy2 = s ; // copy the string } // destroy copy and then i Here, if constructing copy2 throws, we have the same problem because i 's destructor now also can throw, and if so we'll invoke std::terminate . You can't reliably create global or static Nefarious objects either: static Nefarious n ; // oops, any destructor exception can't be caught You can't reliably create arrays of Nefarious : void test () { std :: array < Nefarious , 10 > arr ; // this line can std::terminate(!) } The behavior of arrays is undefined in the presence of destructors that throw because there is no reasonable rollback behavior that could ever be devised. Just think: What code can the compiler generate for constructing an arr where, if the fourth object's constructor throws, the code has to give up and in its cleanup mode tries to call the destructors of the already-constructed objects ... and one or more of those destructors throws? There is no satisfactory answer. You can't use Nefarious objects in standard containers: std :: vector < Nefarious > vec ( 10 ); // this line can std::terminate() The standard library forbids all destructors used with it from throwing. You can't store Nefarious objects in standard containers or use them with any other part of the standard library.","title":"Example"},{"location":"appendix/DIscussion/#note_1","text":"These are key functions that must not fail because they are necessary for the two key operations in transactional programming: to back out work if problems are encountered during processing, and to commit work if no problems occur. If there's no way to safely back out using no-fail operations, then no-fail rollback is impossible to implement. If there's no way to safely commit state changes using a no-fail operation (notably, but not limited to, swap ), then no-fail commit is impossible to implement. Consider the following advice and requirements found in the C++ Standard: If a destructor called during stack unwinding exits with an exception, terminate is called (15.5.1). So destructors should generally catch exceptions and not let them propagate out of the destructor. -- [C++03] \u00a715.2(3) No destructor operation defined in the C++ Standard Library (including the destructor of any type that is used to instantiate a standard-library template) will throw an exception. -- [C++03] \u00a717.4.4.8(3) Deallocation functions, including specifically overloaded operator delete and operator delete[] , fall into the same category, because they too are used during cleanup in general, and during exception handling in particular, to back out of partial work that needs to be undone. Besides destructors and deallocation functions, common error-safety techniques rely also on swap operations never failing -- in this case, not because they are used to implement a guaranteed rollback, but because they are used to implement a guaranteed commit. For example, here is an idiomatic implementation of operator= for a type T that performs copy construction followed by a call to a no-fail swap : T & T :: operator = ( const T & other ) { auto temp = other ; swap ( temp ); return * this ; } (See also Item 56. ???) Fortunately, when releasing a resource, the scope for failure is definitely smaller. If using exceptions as the error reporting mechanism, make sure such functions handle all exceptions and other errors that their internal processing might generate. (For exceptions, simply wrap everything sensitive that your destructor does in a try/catch(...) block.) This is particularly important because a destructor might be called in a crisis situation, such as failure to allocate a system resource (e.g., memory, files, locks, ports, windows, or other system objects). When using exceptions as your error handling mechanism, always document this behavior by declaring these functions noexcept . (See Item 75.) References : [C++CS] Item 51; [C++03] \u00a715.2(3), \u00a717.4.4.8(3), [Meyers96] \u00a711, [Stroustrup00] \u00a714.4.7, \u00a7E.2-4, [Sutter00] \u00a78, \u00a716, [Sutter02] \u00a718-19","title":"Note"},{"location":"appendix/DIscussion/#define-copy-move-and-destroy-consistently","text":"","title":"Define Copy, move, and destroy consistently"},{"location":"appendix/DIscussion/#reason","text":"???","title":"Reason"},{"location":"appendix/DIscussion/#note_2","text":"If you define a copy constructor, you must also define a copy assignment operator.","title":"Note"},{"location":"appendix/DIscussion/#note_3","text":"If you define a move constructor, you must also define a move assignment operator.","title":"Note"},{"location":"appendix/DIscussion/#example_2","text":"class X { // ... public : X ( const X & ) { /* stuff */ } // BAD: failed to also define a copy assignment operator X ( x && ) noexcept { /* stuff */ } // BAD: failed to also define a move assignment operator }; X x1 ; X x2 = x1 ; // ok x2 = x1 ; // pitfall: either fails to compile, or does something suspicious If you define a destructor, you should not use the compiler-generated copy or move operation; you probably need to define or suppress copy and/or move. class X { HANDLE hnd ; // ... public : ~ X () { /* custom stuff, such as closing hnd */ } // suspicious: no mention of copying or moving -- what happens to hnd? }; X x1 ; X x2 = x1 ; // pitfall: either fails to compile, or does something suspicious x2 = x1 ; // pitfall: either fails to compile, or does something suspicious If you define copying, and any base or member has a type that defines a move operation, you should also define a move operation. class X { string s ; // defines more efficient move operations // ... other data members ... public : X ( const X & ) { /* stuff */ } X & operator = ( const X & ) { /* stuff */ } // BAD: failed to also define a move construction and move assignment // (why wasn't the custom \"stuff\" repeated here?) }; X test () { X local ; // ... return local ; // pitfall: will be inefficient and/or do the wrong thing } If you define any of the copy constructor, copy assignment operator, or destructor, you probably should define the others.","title":"Example"},{"location":"appendix/DIscussion/#note_4","text":"If you need to define any of these five functions, it means you need it to do more than its default behavior -- and the five are asymmetrically interrelated. Here's how: If you write/disable either of the copy constructor or the copy assignment operator, you probably need to do the same for the other: If one does \"special\" work, probably so should the other because the two functions should have similar effects. (See Item 53, which expands on this point in isolation.) If you explicitly write the copying functions, you probably need to write the destructor: If the \"special\" work in the copy constructor is to allocate or duplicate some resource (e.g., memory, file, socket), you need to deallocate it in the destructor. If you explicitly write the destructor, you probably need to explicitly write or disable copying: If you have to write a non-trivial destructor, it's often because you need to manually release a resource that the object held. If so, it is likely that those resources require careful duplication, and then you need to pay attention to the way objects are copied and assigned, or disable copying completely. In many cases, holding properly encapsulated resources using RAII \"owning\" objects can eliminate the need to write these operations yourself. (See Item 13.) Prefer compiler-generated (including =default ) special members; only these can be classified as \"trivial\", and at least one major standard library vendor heavily optimizes for classes having trivial special members. This is likely to become common practice. Exceptions : When any of the special functions are declared only to make them nonpublic or virtual, but without special semantics, it doesn't imply that the others are needed. In rare cases, classes that have members of strange types (such as reference members) are an exception because they have peculiar copy semantics. In a class holding a reference, you likely need to write the copy constructor and the assignment operator, but the default destructor already does the right thing. (Note that using a reference member is almost always wrong.) References : [C++CS] Item 52; [Cline99] \u00a730.01-14, [Koenig97] \u00a74, [Stroustrup00] \u00a75.5, \u00a710.4, [SuttHysl04b] Resource management rule summary: Provide strong resource safety; that is, never leak anything that you think of as a resource Never throw while holding a resource not owned by a handle A \"raw\" pointer or reference is never a resource handle Never let a pointer outlive the object it points to Use templates to express containers (and other resource handles) Return containers by value (relying on move or copy elision for efficiency) If a class is a resource handle, it needs a constructor, a destructor, and copy and/or move operations If a class is a container, give it an initializer-list constructor","title":"Note"},{"location":"appendix/DIscussion/#discussion-provide-strong-resource-safety-that-is-never-leak-anything-that-you-think-of-as-a-resource","text":"","title":"Discussion: Provide strong resource safety; that is, never leak anything that you think of as a resource"},{"location":"appendix/DIscussion/#reason_1","text":"Prevent leaks. Leaks can lead to performance degradation, mysterious error, system crashes, and security violations. Alternative Formulation : Have every resource represented as an object of some class managing its lifetime.","title":"Reason"},{"location":"appendix/DIscussion/#example_3","text":"template < class T > class Vector { // ... private : T * elem ; // sz elements on the free store, owned by the class object int sz ; }; This class is a resource handle. It manages the lifetime of the T s. To do so, Vector must define or delete the set of special operations (constructors, a destructor, etc.).","title":"Example"},{"location":"appendix/DIscussion/#example_4","text":"??? \"odd\" non-memory resource ???","title":"Example"},{"location":"appendix/DIscussion/#enforcement","text":"The basic technique for preventing leaks is to have every resource owned by a resource handle with a suitable destructor. A checker can find \"naked new s\". Given a list of C-style allocation functions (e.g., fopen() ), a checker can also find uses that are not managed by a resource handle. In general, \"naked pointers\" can be viewed with suspicion, flagged, and/or analyzed. A complete list of resources cannot be generated without human input (the definition of \"a resource\" is necessarily too general), but a tool can be \"parameterized\" with a resource list.","title":"Enforcement"},{"location":"appendix/DIscussion/#discussion-never-throw-while-holding-a-resource-not-owned-by-a-handle","text":"","title":"Discussion: Never throw while holding a resource not owned by a handle"},{"location":"appendix/DIscussion/#reason_2","text":"That would be a leak.","title":"Reason"},{"location":"appendix/DIscussion/#example_5","text":"void f ( int i ) { FILE * f = fopen ( \"a file\" , \"r\" ); ifstream is { \"another file\" }; // ... if ( i == 0 ) return ; // ... fclose ( f ); } If i == 0 the file handle for a file is leaked. On the other hand, the ifstream for another file will correctly close its file (upon destruction). If you must use an explicit pointer, rather than a resource handle with specific semantics, use a unique_ptr or a shared_ptr with a custom deleter: void f ( int i ) { unique_ptr < FILE , int ( * )( FILE * ) > f ( fopen ( \"a file\" , \"r\" ), fclose ); // ... if ( i == 0 ) return ; // ... } Better: void f ( int i ) { ifstream input { \"a file\" }; // ... if ( i == 0 ) return ; // ... }","title":"Example"},{"location":"appendix/DIscussion/#enforcement_1","text":"A checker must consider all \"naked pointers\" suspicious. A checker probably must rely on a human-provided list of resources. For starters, we know about the standard-library containers, string , and smart pointers. The use of span and string_span should help a lot (they are not resource handles).","title":"Enforcement"},{"location":"appendix/DIscussion/#discussion-a-raw-pointer-or-reference-is-never-a-resource-handle","text":"","title":"Discussion: A \"raw\" pointer or reference is never a resource handle"},{"location":"appendix/DIscussion/#reason_3","text":"To be able to distinguish owners from views.","title":"Reason"},{"location":"appendix/DIscussion/#note_5","text":"This is independent of how you \"spell\" pointer: T* , T& , Ptr<T> and Range<T> are not owners.","title":"Note"},{"location":"appendix/DIscussion/#discussion-never-let-a-pointer-outlive-the-object-it-points-to","text":"","title":"Discussion: Never let a pointer outlive the object it points to"},{"location":"appendix/DIscussion/#reason_4","text":"To avoid extremely hard-to-find errors. Dereferencing such a pointer is undefined behavior and could lead to violations of the type system.","title":"Reason"},{"location":"appendix/DIscussion/#example_6","text":"string * bad () // really bad { vector < string > v = { \"This\" , \"will\" , \"cause\" , \"trouble\" , \"!\" }; // leaking a pointer into a destroyed member of a destroyed object (v) return & v [ 0 ]; } void use () { string * p = bad (); vector < int > xx = { 7 , 8 , 9 }; // undefined behavior: x may not be the string \"This\" string x = * p ; // undefined behavior: we don't know what (if anything) is allocated a location p * p = \"Evil!\" ; } The string s of v are destroyed upon exit from bad() and so is v itself. The returned pointer points to unallocated memory on the free store. This memory (pointed into by p ) may have been reallocated by the time *p is executed. There may be no string to read and a write through p could easily corrupt objects of unrelated types.","title":"Example"},{"location":"appendix/DIscussion/#enforcement_2","text":"Most compilers already warn about simple cases and has the information to do more. Consider any pointer returned from a function suspect. Use containers, resource handles, and views (e.g., span known not to be resource handles) to lower the number of cases to be examined. For starters, consider every class with a destructor as resource handle.","title":"Enforcement"},{"location":"appendix/DIscussion/#discussion-use-templates-to-express-containers-and-other-resource-handles","text":"","title":"Discussion: Use templates to express containers (and other resource handles)"},{"location":"appendix/DIscussion/#reason_5","text":"To provide statically type-safe manipulation of elements.","title":"Reason"},{"location":"appendix/DIscussion/#example_7","text":"template < typename T > class Vector { // ... T * elem ; // point to sz elements of type T int sz ; };","title":"Example"},{"location":"appendix/DIscussion/#discussion-return-containers-by-value-relying-on-move-or-copy-elision-for-efficiency","text":"","title":"Discussion: Return containers by value (relying on move or copy elision for efficiency)"},{"location":"appendix/DIscussion/#reason_6","text":"To simplify code and eliminate a need for explicit memory management. To bring an object into a surrounding scope, thereby extending its lifetime. See also : F.20, the general item about \"out\" output values","title":"Reason"},{"location":"appendix/DIscussion/#example_8","text":"vector < int > get_large_vector () { return ...; } auto v = get_large_vector (); // return by value is ok, most modern compilers will do copy elision","title":"Example"},{"location":"appendix/DIscussion/#exception_1","text":"See the Exceptions in F.20 .","title":"Exception"},{"location":"appendix/DIscussion/#enforcement_3","text":"Check for pointers and references returned from functions and see if they are assigned to resource handles (e.g., to a unique_ptr ).","title":"Enforcement"},{"location":"appendix/DIscussion/#discussion-if-a-class-is-a-resource-handle-it-needs-a-constructor-a-destructor-and-copy-andor-move-operations","text":"","title":"Discussion: If a class is a resource handle, it needs a constructor, a destructor, and copy and/or move operations"},{"location":"appendix/DIscussion/#reason_7","text":"To provide complete control of the lifetime of the resource. To provide a coherent set of operations on the resource.","title":"Reason"},{"location":"appendix/DIscussion/#example_9","text":"??? Messing with pointers","title":"Example"},{"location":"appendix/DIscussion/#note_6","text":"If all members are resource handles, rely on the default special operations where possible. template < typename T > struct Named { string name ; T value ; }; Now Named has a default constructor, a destructor, and efficient copy and move operations, provided T has.","title":"Note"},{"location":"appendix/DIscussion/#enforcement_4","text":"In general, a tool cannot know if a class is a resource handle. However, if a class has some of the default operations , it should have all, and if a class has a member that is a resource handle, it should be considered as resource handle.","title":"Enforcement"},{"location":"appendix/DIscussion/#discussion-if-a-class-is-a-container-give-it-an-initializer-list-constructor","text":"","title":"Discussion: If a class is a container, give it an initializer-list constructor"},{"location":"appendix/DIscussion/#reason_8","text":"It is common to need an initial set of elements.","title":"Reason"},{"location":"appendix/DIscussion/#example_10","text":"template < typename T > class Vector { public : Vector ( std :: initializer_list < T > ); // ... }; Vector < string > vs { \"Nygaard\" , \"Ritchie\" };","title":"Example"},{"location":"appendix/DIscussion/#enforcement_5","text":"When is a class a container? ???","title":"Enforcement"},{"location":"appendix/Libraries/","text":"Appendix A: Libraries This section lists recommended libraries, and explicitly recommends a few. ??? Suitable for the general guide? I think not ???","title":"<a name=\"S-libraries\"></a>Appendix A: Libraries"},{"location":"appendix/Libraries/#appendix-a-libraries","text":"This section lists recommended libraries, and explicitly recommends a few. ??? Suitable for the general guide? I think not ???","title":"Appendix A: Libraries"},{"location":"appendix/Modernizing/","text":"Appendix B: \ubaa8\ub358 C++ \ucf54\ub4dc \uc774\uc0c1\uc801\uc73c\ub85c\ub294, \ubaa8\ub4e0 \ucf54\ub4dc\ub294 \uac00\uc774\ub4dc\ub77c\uc778\uc758 \uaddc\uce59\uc744 \ub530\ub978\ub2e4. \ud558\uc9c0\ub9cc \ud604\uc2e4\uc801\uc73c\ub85c, \uc6b0\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc218\ub9ce\uc740 \uc61b\ub0a0 \ucf54\ub4dc\ub97c \ub2e4\ub8e8\uc5b4\uc57c \ud55c\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ud615\uc131\ub418\uae30 \uc804\uc774\ub098, \uc54c\ub824\uc9c0\uae30 \uc804\uc5d0 \uc791\uc131\ub41c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \ucf54\ub4dc \uc624\ub798\ub42c\uac70\ub098 \uc0c1\uc774\ud55c \ud45c\uc900\uc5d0 \ub9de\ucdb0\uc11c \uc791\uc131\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac \"\ud2b9\ubcc4\ud55c\" \uc870\uac74 \ud558\uc5d0\uc11c \uc791\uc131\ub41c \ucf54\ub4dc\ub4e4 \ubbf8\ucc98 \ud604\ub300\ud654\ud560 \uc0dd\uac01\uc744 \ubabb\ud588\ub358 \ucf54\ub4dc\ub4e4 \uc218\ubc31\ub9cc\uc904\uc5d0 \ub2ec\ud558\ub294 \ucf54\ub4dc\uac00 \uc788\ub294\ub370, \uc774\uac78 \ub2e8 \ud55c \ubc88\uc5d0 \ubaa8\ub450 \ubc14\uafd4\ubc84\ub9b0\ub2e4\ub294 \uc0dd\uac01\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ube44\ud604\uc2e4\uc801\uc774\ub2e4. \ub2e8\uacc4\uc801\uc73c\ub85c \ucf54\ub4dc \ubca0\uc774\uc2a4\ub97c \ud604\ub300\ud654\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \uc61b\ub0a0 \ucf54\ub4dc\ub97c \ubaa8\ub358 \uc2a4\ud0c0\uc77c\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\ub294 \uc77c\uc740 \uc880 \ubc85\ucc2c \uc77c\uc774\ub2e4. \ubcf4\ud1b5 \uc61b\ub0a0 \ucf54\ub4dc\ub4e4\uc740 \uc774\ud574\ud558\uae30 \uc544\uc8fc \uc5b4\ub835\ub3c4\ub85d \uc9c0\uc800\ubd84\ud55c\ub370, (\uc801\uc5b4\ub3c4 \ud604\uc7ac\uc758 \uc0ac\uc6a9\ubc94\uc704 \uc548\uc5d0\uc11c\ub9cc\ud07c\uc740) \uc791\ub3d9\uc774 \uc815\ud655\ud788 \ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uadf8 \ud504\ub85c\uadf8\ub7a8\uc744 \ucc98\uc74c \uc9e0 \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc8fc\ubcc0\uc5d0 \uc5c6\uace0, \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \uc644\uc804\uce58 \uc54a\ub2e4. \ucf54\ub4dc\uac00 \uc9c0\uc800\ubd84\ud558\uba74, \uc870\uadf8\ub9cc \ubcc0\ud654\ub9cc \uc8fc\ub824\uace0 \ud574\ub3c4 \uc5c4\uccad\ub09c \ub178\ub825\uc774 \ud544\uc694\ud558\uace0, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\ub294 \ud655\ub960\ub3c4 \uae09\uaca9\ud788 \uc99d\uac00\ud55c\ub2e4. \ub300\uccb4\ub85c \uc9c0\uc800\ubd84\ud558\uace0 \uc624\ub798\ub41c \ucf54\ub4dc\ub4e4\uc740 \uc4f8\ub370\uc5c6\uc774 \ub290\ub9ac\uac8c \ub3c4\ub294\ub370, \uad6c\uc2dd \ucef4\ud30c\uc77c\ub7ec\ub97c \ud1b5\ud574\uc11c\ub9cc \ucef4\ud30c\uc77c\ub418\uace0 \uc694\uc998 \ud558\ub4dc\uc6e8\uc5b4\uc758 \ud61c\ud0dd\uc744 \uc804\ud600 \ubc1b\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9ce\uc740 \uacbd\uc6b0, \uba54\uc774\uc800 \uc5c5\uadf8\ub808\uc774\ub4dc\ub97c \ud558\uae30 \uc704\ud574\uc11c\ub294 \uc790\ub3d9\ud654\ub41c \"\ud604\ub300\ud654\" \ub3c4\uad6c\ub4e4\uc758 \ub3c4\uc6c0\uc774 \ud544\uc694\ud560 \uac83\uc774\ub2e4. \ucf54\ub4dc\ub97c \ud604\ub300\ud654\ud558\ub294 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc0c8 \uae30\ub2a5\uc744 \ucd94\uac00\ud558\ub294 \uac83\uc744 \uc27d\uac8c \ud558\uae30 \uc704\ud574\uc11c, \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c, \uc131\ub2a5(\ucc98\ub9ac\ub7c9\uacfc \uc751\ub2f5\uc131)\uc744 \ud5a5\uc0c1\uc2dc\ud0a4 \uc704\ud574\uc11c, \ud639\uc740 \uc694\uc998\uc758 \ud558\ub4dc\uc6e8\uc5b4\ub97c \ucda9\ubd84\ud788 \ud65c\uc6a9\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. \ucf54\ub4dc\ub97c \"\ubcf4\uae30 \uc608\uc058\uac8c \ub9cc\ub4e4\uae30\"\ub77c\ub4e0\uac00 \"\ubaa8\ub358 \uc2a4\ud0c0\uc77c\uc744 \ub530\ub974\uae30\"\ub294 \uadf8 \uc790\uccb4\ub85c \ucf54\ub4dc \uac1c\uc120\uc758 \uc774\uc720\uac00 \ub420 \uc218\ub294 \uc5c6\ub2e4. \uad6c\uc2dd \ucf54\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\ub294 \uac83\uc740 (\uae30\ud68c \ube44\uc6a9\uc744 \ud3ec\ud568\ud55c) \ube44\uc6a9\uc774 \ub4dc\ub294 \uc77c\uc774\uc9c0\ub9cc, \ucf54\ub4dc\uc5d0 \ubcc0\ud654\ub97c \uc8fc\ub294 \uac83\uc740 \ub610 \uadf8\ub9cc\ud07c\uc758 \ub9ac\uc2a4\ud06c\uac00 \uc788\ub294 \uc77c\uc774\ub2e4. \uadf8\ub798\uc11c, \ucf54\ub4dc \ud604\ub300\ud654\ub97c \ud1b5\ud574 \uc808\uac10\ub418\ub294 \ube44\uc6a9\uc740, \uadf8\uc5d0 \ub530\ub974\ub294 \ub9ac\uc2a4\ud06c\ubcf4\ub2e4 \ucee4\uc57c\ub9cc \ud55c\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud560\uae4c? \ucf54\ub4dc \ud604\ub300\ud654\uc5d0 \ub2e8 \ud558\ub098\uc758 \uc815\ub2f5\uc774 \uc788\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \ucf54\ub4dc\uc5d0 \ub530\ub77c, \uc5c5\ub370\uc774\ud2b8\uc5d0 \ub300\ud55c \uc555\ubc15\uc5d0 \ub530\ub77c, \uac1c\ubc1c\uc790\uc758 \ubc30\uacbd\uc5d0 \ub530\ub77c, \uc0ac\uc6a9\uac00\ub2a5\ud55c \ud234\uc5d0 \ub530\ub77c \uc5b4\ub5a4 \ubc29\ubc95\uc774 \uc88b\uc744\uc9c0\uac00 \ub2ec\ub77c\uc9c4\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 \uba87 \uac00\uc9c0 (\uc544\uc8fc \uc77c\ubc18\uc801\uc778) \ubc29\ubc95\uc744 \uc18c\uac1c\ud558\uace0\uc790 \ud55c\ub2e4: \uac00\uc7a5 \uc88b\uc740 \ubc29\ubc95\uc740 \"\ubaa8\ub4e0 \ucf54\ub4dc\ub97c \uc5c5\uadf8\ub808\uc774\ub4dc \ud558\uae30\"\ub2e4. \ucd1d \ud22c\uc785\uc2dc\uac04 \ub300\ube44 \uc774\ub4dd\uc774 \uac00\uc7a5 \ud06c\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uc0c1\ud669\uc5d0\uc11c\ub294 \ubd88\uac00\ub2a5 \ud560 \uac83\uc774\ub2e4. \ubaa8\ub4c8 \ud558\ub098\uc529 \ubc14\uafd4\uac00\ub294 \uc2dd\uc73c\ub85c \ucf54\ub4dc\ub97c \ubc14\uafd4\ub098\uac08 \uc218\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc778\ud130\ud398\uc774\uc2a4(\ud2b9\ud788 ABI)\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294 \ub8f0\ub4e4\uc740 \ubaa8\ub4c8 \ud558\ub098\uc529 \ubc14\uafd4\uac00\ub294 \uc2dd\uc73c\ub85c \uc801\uc6a9\ud560 \uc218\uac00 \uc5c6\ub2e4. use span \uac19\uc740 \uaddc\uce59\uc774 \uadf8\ub807\ub2e4. \"\uc0c1\ud5a5\uc2dd \uc811\uadfc\ubc95\"\ub3c4 \uc788\ub2e4. \uc801\uc6a9\ud588\uc744 \ub54c \uac00\uc7a5 \ud070 \uc774\ub4dd\uc744 \uc5bb\uc744 \uc218 \uc788\uac70\ub098, \uac00\uc7a5 \uc801\uc740 \uc624\ub958\ub97c \uc77c\uc73c\ud0ac \uac83\uac19\uc740 \ub8f0\ubd80\ud130 \uc801\uc6a9\ud558\uc5ec \ucf54\ub4dc\ub97c \ubc14\uafb8\ub294 \uac83\uc774\ub2e4. \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \ucd08\uc810\uc744 \ub9de\ucd94\uc5b4 \uc2dc\uc791\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5b4\ub5a4 \uc2dc\uc2a4\ud15c \uc790\uc6d0\ub3c4 \ub204\uc218\ub418\uc9c0 \uc54a\uace0 \uc5b4\ub5a4 \ud3ec\uc778\ud130\ub3c4 \uc624\uc6a9\ub418\uc9c0 \uc54a\ub294 \uac83\uc744 \ud655\uc2e4\ud558\uac8c \ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ubc29\ubc95\uc744 \uc801\uc6a9\ud558\uba74 \uc804\uccb4 \ucf54\ub4dc \ubca0\uc774\uc2a4\ub97c \uad00\ud1b5\ud558\uc5ec \uc774\uacf3 \uc800\uacf3\uc5d0 \ubcc0\ud654\ub97c \uc8fc\uc5b4\uc57c\uaca0\uc9c0\ub9cc, \ub9e4\uc6b0 \ud070 \ud6a8\uc6a9\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. \uc5b4\ub5a4 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\ub4e0, \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucda9\uc2e4\ud788 \ub530\ub97c \ub54c \uac00\uc7a5 \ud070 \uc774\ub4dd\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc720\ub150\ud558\uae30 \ubc14\ub780\ub2e4. \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc740 \uc798\ub3cc\uc544\uac00\uae30\ub97c \uae30\ub300\ud558\ub294 \ub9c8\uc74c\uc73c\ub85c \uc544\ubb34\uac70\ub098 \ud558\ub098 \uace8\ub77c\uc11c \uc801\uc6a9\ud574\ubcf4\ub294, \uad00\uacc4\uc5c6\ub294 \uaddc\uce59\ub4e4\uc758 \ub9c8\uad6c\uc7a1\uc774\uc2dd \ubaa8\uc74c\uc9d1\uc774 \uc544\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\ub4e4\uc758 \uacbd\ud5d8\uacfc \ucf54\ub4dc \ud604\ub300\ud654\ub97c \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \ud234\ub4e4\uc744 \ub300\ud55c \uc774\uc57c\uae30\ub97c \uc9c4\uc2ec\uc73c\ub85c \ub4e3\uace0 \uc2f6\ub2e4. \ucf54\ub4dc \ud604\ub300\ud654\ub294 \ubd84\uc11d \ud234, \ucf54\ub4dc \ubcc0\ud658 \ub3c4\uad6c\uc758 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \ub54c \ub354 \uc2e0\uc18d\ud558\uace0, \ub2e8\uc21c\ud558\uace0, \uc548\uc804\ud558\uac8c \uc774\ub8e8\uc5b4\uc9c8 \uc218 \uc788\ub2e4.","title":"Modernizing"},{"location":"appendix/Modernizing/#appendix-b-c","text":"\uc774\uc0c1\uc801\uc73c\ub85c\ub294, \ubaa8\ub4e0 \ucf54\ub4dc\ub294 \uac00\uc774\ub4dc\ub77c\uc778\uc758 \uaddc\uce59\uc744 \ub530\ub978\ub2e4. \ud558\uc9c0\ub9cc \ud604\uc2e4\uc801\uc73c\ub85c, \uc6b0\ub9ac\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc218\ub9ce\uc740 \uc61b\ub0a0 \ucf54\ub4dc\ub97c \ub2e4\ub8e8\uc5b4\uc57c \ud55c\ub2e4. \uac00\uc774\ub4dc\ub77c\uc778\uc774 \ud615\uc131\ub418\uae30 \uc804\uc774\ub098, \uc54c\ub824\uc9c0\uae30 \uc804\uc5d0 \uc791\uc131\ub41c \uc5b4\ud50c\ub9ac\ucf00\uc774\uc158 \ucf54\ub4dc \uc624\ub798\ub42c\uac70\ub098 \uc0c1\uc774\ud55c \ud45c\uc900\uc5d0 \ub9de\ucdb0\uc11c \uc791\uc131\ub41c \ub77c\uc774\ube0c\ub7ec\ub9ac \"\ud2b9\ubcc4\ud55c\" \uc870\uac74 \ud558\uc5d0\uc11c \uc791\uc131\ub41c \ucf54\ub4dc\ub4e4 \ubbf8\ucc98 \ud604\ub300\ud654\ud560 \uc0dd\uac01\uc744 \ubabb\ud588\ub358 \ucf54\ub4dc\ub4e4 \uc218\ubc31\ub9cc\uc904\uc5d0 \ub2ec\ud558\ub294 \ucf54\ub4dc\uac00 \uc788\ub294\ub370, \uc774\uac78 \ub2e8 \ud55c \ubc88\uc5d0 \ubaa8\ub450 \ubc14\uafd4\ubc84\ub9b0\ub2e4\ub294 \uc0dd\uac01\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ube44\ud604\uc2e4\uc801\uc774\ub2e4. \ub2e8\uacc4\uc801\uc73c\ub85c \ucf54\ub4dc \ubca0\uc774\uc2a4\ub97c \ud604\ub300\ud654\ud560 \ud544\uc694\uac00 \uc788\ub2e4. \uc61b\ub0a0 \ucf54\ub4dc\ub97c \ubaa8\ub358 \uc2a4\ud0c0\uc77c\ub85c \uc5c5\uadf8\ub808\uc774\ub4dc\ud558\ub294 \uc77c\uc740 \uc880 \ubc85\ucc2c \uc77c\uc774\ub2e4. \ubcf4\ud1b5 \uc61b\ub0a0 \ucf54\ub4dc\ub4e4\uc740 \uc774\ud574\ud558\uae30 \uc544\uc8fc \uc5b4\ub835\ub3c4\ub85d \uc9c0\uc800\ubd84\ud55c\ub370, (\uc801\uc5b4\ub3c4 \ud604\uc7ac\uc758 \uc0ac\uc6a9\ubc94\uc704 \uc548\uc5d0\uc11c\ub9cc\ud07c\uc740) \uc791\ub3d9\uc774 \uc815\ud655\ud788 \ub41c\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uadf8 \ud504\ub85c\uadf8\ub7a8\uc744 \ucc98\uc74c \uc9e0 \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc8fc\ubcc0\uc5d0 \uc5c6\uace0, \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \uc644\uc804\uce58 \uc54a\ub2e4. \ucf54\ub4dc\uac00 \uc9c0\uc800\ubd84\ud558\uba74, \uc870\uadf8\ub9cc \ubcc0\ud654\ub9cc \uc8fc\ub824\uace0 \ud574\ub3c4 \uc5c4\uccad\ub09c \ub178\ub825\uc774 \ud544\uc694\ud558\uace0, \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud558\ub294 \ud655\ub960\ub3c4 \uae09\uaca9\ud788 \uc99d\uac00\ud55c\ub2e4. \ub300\uccb4\ub85c \uc9c0\uc800\ubd84\ud558\uace0 \uc624\ub798\ub41c \ucf54\ub4dc\ub4e4\uc740 \uc4f8\ub370\uc5c6\uc774 \ub290\ub9ac\uac8c \ub3c4\ub294\ub370, \uad6c\uc2dd \ucef4\ud30c\uc77c\ub7ec\ub97c \ud1b5\ud574\uc11c\ub9cc \ucef4\ud30c\uc77c\ub418\uace0 \uc694\uc998 \ud558\ub4dc\uc6e8\uc5b4\uc758 \ud61c\ud0dd\uc744 \uc804\ud600 \ubc1b\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \ub9ce\uc740 \uacbd\uc6b0, \uba54\uc774\uc800 \uc5c5\uadf8\ub808\uc774\ub4dc\ub97c \ud558\uae30 \uc704\ud574\uc11c\ub294 \uc790\ub3d9\ud654\ub41c \"\ud604\ub300\ud654\" \ub3c4\uad6c\ub4e4\uc758 \ub3c4\uc6c0\uc774 \ud544\uc694\ud560 \uac83\uc774\ub2e4. \ucf54\ub4dc\ub97c \ud604\ub300\ud654\ud558\ub294 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4. \uc0c8 \uae30\ub2a5\uc744 \ucd94\uac00\ud558\ub294 \uac83\uc744 \uc27d\uac8c \ud558\uae30 \uc704\ud574\uc11c, \uc720\uc9c0\ubcf4\uc218\uc131\uc744 \ud5a5\uc0c1\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c, \uc131\ub2a5(\ucc98\ub9ac\ub7c9\uacfc \uc751\ub2f5\uc131)\uc744 \ud5a5\uc0c1\uc2dc\ud0a4 \uc704\ud574\uc11c, \ud639\uc740 \uc694\uc998\uc758 \ud558\ub4dc\uc6e8\uc5b4\ub97c \ucda9\ubd84\ud788 \ud65c\uc6a9\ud558\uae30 \uc704\ud55c \uac83\uc774\ub2e4. \ucf54\ub4dc\ub97c \"\ubcf4\uae30 \uc608\uc058\uac8c \ub9cc\ub4e4\uae30\"\ub77c\ub4e0\uac00 \"\ubaa8\ub358 \uc2a4\ud0c0\uc77c\uc744 \ub530\ub974\uae30\"\ub294 \uadf8 \uc790\uccb4\ub85c \ucf54\ub4dc \uac1c\uc120\uc758 \uc774\uc720\uac00 \ub420 \uc218\ub294 \uc5c6\ub2e4. \uad6c\uc2dd \ucf54\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\ub2e4\ub294 \uac83\uc740 (\uae30\ud68c \ube44\uc6a9\uc744 \ud3ec\ud568\ud55c) \ube44\uc6a9\uc774 \ub4dc\ub294 \uc77c\uc774\uc9c0\ub9cc, \ucf54\ub4dc\uc5d0 \ubcc0\ud654\ub97c \uc8fc\ub294 \uac83\uc740 \ub610 \uadf8\ub9cc\ud07c\uc758 \ub9ac\uc2a4\ud06c\uac00 \uc788\ub294 \uc77c\uc774\ub2e4. \uadf8\ub798\uc11c, \ucf54\ub4dc \ud604\ub300\ud654\ub97c \ud1b5\ud574 \uc808\uac10\ub418\ub294 \ube44\uc6a9\uc740, \uadf8\uc5d0 \ub530\ub974\ub294 \ub9ac\uc2a4\ud06c\ubcf4\ub2e4 \ucee4\uc57c\ub9cc \ud55c\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c\ud560\uae4c? \ucf54\ub4dc \ud604\ub300\ud654\uc5d0 \ub2e8 \ud558\ub098\uc758 \uc815\ub2f5\uc774 \uc788\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \ucf54\ub4dc\uc5d0 \ub530\ub77c, \uc5c5\ub370\uc774\ud2b8\uc5d0 \ub300\ud55c \uc555\ubc15\uc5d0 \ub530\ub77c, \uac1c\ubc1c\uc790\uc758 \ubc30\uacbd\uc5d0 \ub530\ub77c, \uc0ac\uc6a9\uac00\ub2a5\ud55c \ud234\uc5d0 \ub530\ub77c \uc5b4\ub5a4 \ubc29\ubc95\uc774 \uc88b\uc744\uc9c0\uac00 \ub2ec\ub77c\uc9c4\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 \uba87 \uac00\uc9c0 (\uc544\uc8fc \uc77c\ubc18\uc801\uc778) \ubc29\ubc95\uc744 \uc18c\uac1c\ud558\uace0\uc790 \ud55c\ub2e4: \uac00\uc7a5 \uc88b\uc740 \ubc29\ubc95\uc740 \"\ubaa8\ub4e0 \ucf54\ub4dc\ub97c \uc5c5\uadf8\ub808\uc774\ub4dc \ud558\uae30\"\ub2e4. \ucd1d \ud22c\uc785\uc2dc\uac04 \ub300\ube44 \uc774\ub4dd\uc774 \uac00\uc7a5 \ud06c\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uc0c1\ud669\uc5d0\uc11c\ub294 \ubd88\uac00\ub2a5 \ud560 \uac83\uc774\ub2e4. \ubaa8\ub4c8 \ud558\ub098\uc529 \ubc14\uafd4\uac00\ub294 \uc2dd\uc73c\ub85c \ucf54\ub4dc\ub97c \ubc14\uafd4\ub098\uac08 \uc218\ub3c4 \uc788\ub2e4. \ud558\uc9c0\ub9cc \uc778\ud130\ud398\uc774\uc2a4(\ud2b9\ud788 ABI)\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294 \ub8f0\ub4e4\uc740 \ubaa8\ub4c8 \ud558\ub098\uc529 \ubc14\uafd4\uac00\ub294 \uc2dd\uc73c\ub85c \uc801\uc6a9\ud560 \uc218\uac00 \uc5c6\ub2e4. use span \uac19\uc740 \uaddc\uce59\uc774 \uadf8\ub807\ub2e4. \"\uc0c1\ud5a5\uc2dd \uc811\uadfc\ubc95\"\ub3c4 \uc788\ub2e4. \uc801\uc6a9\ud588\uc744 \ub54c \uac00\uc7a5 \ud070 \uc774\ub4dd\uc744 \uc5bb\uc744 \uc218 \uc788\uac70\ub098, \uac00\uc7a5 \uc801\uc740 \uc624\ub958\ub97c \uc77c\uc73c\ud0ac \uac83\uac19\uc740 \ub8f0\ubd80\ud130 \uc801\uc6a9\ud558\uc5ec \ucf54\ub4dc\ub97c \ubc14\uafb8\ub294 \uac83\uc774\ub2e4. \uc778\ud130\ud398\uc774\uc2a4\uc5d0 \ucd08\uc810\uc744 \ub9de\ucd94\uc5b4 \uc2dc\uc791\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc5b4\ub5a4 \uc2dc\uc2a4\ud15c \uc790\uc6d0\ub3c4 \ub204\uc218\ub418\uc9c0 \uc54a\uace0 \uc5b4\ub5a4 \ud3ec\uc778\ud130\ub3c4 \uc624\uc6a9\ub418\uc9c0 \uc54a\ub294 \uac83\uc744 \ud655\uc2e4\ud558\uac8c \ud558\ub294 \uac83\uc774\ub2e4. \uc774 \ubc29\ubc95\uc744 \uc801\uc6a9\ud558\uba74 \uc804\uccb4 \ucf54\ub4dc \ubca0\uc774\uc2a4\ub97c \uad00\ud1b5\ud558\uc5ec \uc774\uacf3 \uc800\uacf3\uc5d0 \ubcc0\ud654\ub97c \uc8fc\uc5b4\uc57c\uaca0\uc9c0\ub9cc, \ub9e4\uc6b0 \ud070 \ud6a8\uc6a9\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4. \uc5b4\ub5a4 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\ub4e0, \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ucda9\uc2e4\ud788 \ub530\ub97c \ub54c \uac00\uc7a5 \ud070 \uc774\ub4dd\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc720\ub150\ud558\uae30 \ubc14\ub780\ub2e4. \uc774 \uac00\uc774\ub4dc\ub77c\uc778\uc740 \uc798\ub3cc\uc544\uac00\uae30\ub97c \uae30\ub300\ud558\ub294 \ub9c8\uc74c\uc73c\ub85c \uc544\ubb34\uac70\ub098 \ud558\ub098 \uace8\ub77c\uc11c \uc801\uc6a9\ud574\ubcf4\ub294, \uad00\uacc4\uc5c6\ub294 \uaddc\uce59\ub4e4\uc758 \ub9c8\uad6c\uc7a1\uc774\uc2dd \ubaa8\uc74c\uc9d1\uc774 \uc544\ub2c8\ub2e4. \uc5ec\ub7ec\ubd84\ub4e4\uc758 \uacbd\ud5d8\uacfc \ucf54\ub4dc \ud604\ub300\ud654\ub97c \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \ud234\ub4e4\uc744 \ub300\ud55c \uc774\uc57c\uae30\ub97c \uc9c4\uc2ec\uc73c\ub85c \ub4e3\uace0 \uc2f6\ub2e4. \ucf54\ub4dc \ud604\ub300\ud654\ub294 \ubd84\uc11d \ud234, \ucf54\ub4dc \ubcc0\ud658 \ub3c4\uad6c\uc758 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \ub54c \ub354 \uc2e0\uc18d\ud558\uace0, \ub2e8\uc21c\ud558\uace0, \uc548\uc804\ud558\uac8c \uc774\ub8e8\uc5b4\uc9c8 \uc218 \uc788\ub2e4.","title":"Appendix B: \ubaa8\ub358 C++ \ucf54\ub4dc"},{"location":"appendix/Tools/","text":"Appendix D: Supporting tools \uc5ec\uae30\uc11c\ub294 C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc801\uc6a9\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \uc8fc\ub294 \ub3c4\uad6c\ub4e4\uc744 \uc18c\uac1c\ud55c\ub2e4. \uc774 \ubaa9\ub85d\uc740 \uc88b\uc740 C++ \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uae30 \uc704\ud55c \ubaa8\ub4e0 \ub3c4\uad6c\ub97c \ub098\uc5f4\ud55c \uac83\uc774 \uc544\ub2c8\ub2e4. \ud234\uc774 \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc9c0\uc6d0\ud558\uace0 \ucc38\uc870 \ub9c1\ud06c\ub97c \uc81c\uacf5\ud55c\ub2e4\uba74 \ud3ec\ud568\ub420 \uc218 \uc788\ub2e4. Clang-tidy Clang-tidy\ub294 C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uac15\uc81c\ud558\ub294 \uaddc\uce59\ub4e4\uc744 \ud3ec\ud568\ud55c\ub2e4. \uaddc\uce59\ub4e4\uc740 cppcoreguidelines-* \ud615\ud0dc\uc758 \uc774\ub984\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4. CppCoreCheck \ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8 \ucef4\ud30c\uc77c\ub7ec\uc758 \ucf54\ub4dc \ubd84\uc11d\uae30\ub294 C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub97c \uc218 \uc788\ub3c4\ub85d \uaddc\uce59\ub4e4\uc744 \ub0b4\uc7a5\ud558\uace0 \uc788\ub2e4.","title":"Tools"},{"location":"appendix/Tools/#appendix-d-supporting-tools","text":"\uc5ec\uae30\uc11c\ub294 C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc801\uc6a9\ud558\ub294\ub370 \ub3c4\uc6c0\uc744 \uc8fc\ub294 \ub3c4\uad6c\ub4e4\uc744 \uc18c\uac1c\ud55c\ub2e4. \uc774 \ubaa9\ub85d\uc740 \uc88b\uc740 C++ \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uae30 \uc704\ud55c \ubaa8\ub4e0 \ub3c4\uad6c\ub97c \ub098\uc5f4\ud55c \uac83\uc774 \uc544\ub2c8\ub2e4. \ud234\uc774 \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uc9c0\uc6d0\ud558\uace0 \ucc38\uc870 \ub9c1\ud06c\ub97c \uc81c\uacf5\ud55c\ub2e4\uba74 \ud3ec\ud568\ub420 \uc218 \uc788\ub2e4.","title":"Appendix D: Supporting tools"},{"location":"appendix/Tools/#clang-tidy","text":"Clang-tidy\ub294 C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \uac15\uc81c\ud558\ub294 \uaddc\uce59\ub4e4\uc744 \ud3ec\ud568\ud55c\ub2e4. \uaddc\uce59\ub4e4\uc740 cppcoreguidelines-* \ud615\ud0dc\uc758 \uc774\ub984\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4.","title":" Clang-tidy"},{"location":"appendix/Tools/#cppcorecheck","text":"\ub9c8\uc774\ud06c\ub85c\uc18c\ud504\ud2b8 \ucef4\ud30c\uc77c\ub7ec\uc758 \ucf54\ub4dc \ubd84\uc11d\uae30\ub294 C++ \ud575\uc2ec \uac00\uc774\ub4dc\ub77c\uc778\uc744 \ub530\ub97c \uc218 \uc788\ub3c4\ub85d \uaddc\uce59\ub4e4\uc744 \ub0b4\uc7a5\ud558\uace0 \uc788\ub2e4.","title":" CppCoreCheck"}]}